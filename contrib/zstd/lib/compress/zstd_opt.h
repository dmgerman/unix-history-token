begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  */
end_comment

begin_comment
comment|/* Note : this file is intended to be included within zstd_compress.c */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTD_OPT_H_91842398743
end_ifndef

begin_define
define|#
directive|define
name|ZSTD_OPT_H_91842398743
end_define

begin_define
define|#
directive|define
name|ZSTD_LITFREQ_ADD
value|2
end_define

begin_define
define|#
directive|define
name|ZSTD_FREQ_DIV
value|4
end_define

begin_define
define|#
directive|define
name|ZSTD_MAX_PRICE
value|(1<<30)
end_define

begin_comment
comment|/*-************************************* *  Price functions for optimal parser ***************************************/
end_comment

begin_function
specifier|static
name|void
name|ZSTD_setLog2Prices
parameter_list|(
name|optState_t
modifier|*
name|optPtr
parameter_list|)
block|{
name|optPtr
operator|->
name|log2matchLengthSum
operator|=
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|matchLengthSum
operator|+
literal|1
argument_list|)
expr_stmt|;
name|optPtr
operator|->
name|log2litLengthSum
operator|=
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|litLengthSum
operator|+
literal|1
argument_list|)
expr_stmt|;
name|optPtr
operator|->
name|log2litSum
operator|=
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|litSum
operator|+
literal|1
argument_list|)
expr_stmt|;
name|optPtr
operator|->
name|log2offCodeSum
operator|=
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|offCodeSum
operator|+
literal|1
argument_list|)
expr_stmt|;
name|optPtr
operator|->
name|factor
operator|=
literal|1
operator|+
operator|(
operator|(
name|optPtr
operator|->
name|litSum
operator|>>
literal|5
operator|)
operator|/
name|optPtr
operator|->
name|litLengthSum
operator|)
operator|+
operator|(
operator|(
name|optPtr
operator|->
name|litSum
operator|<<
literal|1
operator|)
operator|/
operator|(
name|optPtr
operator|->
name|litSum
operator|+
name|optPtr
operator|->
name|matchSum
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|ZSTD_rescaleFreqs
parameter_list|(
name|optState_t
modifier|*
name|optPtr
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
block|{
name|unsigned
name|u
decl_stmt|;
name|optPtr
operator|->
name|cachedLiterals
operator|=
name|NULL
expr_stmt|;
name|optPtr
operator|->
name|cachedPrice
operator|=
name|optPtr
operator|->
name|cachedLitLength
operator|=
literal|0
expr_stmt|;
name|optPtr
operator|->
name|staticPrices
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|optPtr
operator|->
name|litLengthSum
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|srcSize
operator|<=
literal|1024
condition|)
name|optPtr
operator|->
name|staticPrices
operator|=
literal|1
expr_stmt|;
name|assert
argument_list|(
name|optPtr
operator|->
name|litFreq
operator|!=
name|NULL
argument_list|)
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxLit
condition|;
name|u
operator|++
control|)
name|optPtr
operator|->
name|litFreq
index|[
name|u
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|srcSize
condition|;
name|u
operator|++
control|)
name|optPtr
operator|->
name|litFreq
index|[
name|src
index|[
name|u
index|]
index|]
operator|++
expr_stmt|;
name|optPtr
operator|->
name|litSum
operator|=
literal|0
expr_stmt|;
name|optPtr
operator|->
name|litLengthSum
operator|=
name|MaxLL
operator|+
literal|1
expr_stmt|;
name|optPtr
operator|->
name|matchLengthSum
operator|=
name|MaxML
operator|+
literal|1
expr_stmt|;
name|optPtr
operator|->
name|offCodeSum
operator|=
operator|(
name|MaxOff
operator|+
literal|1
operator|)
expr_stmt|;
name|optPtr
operator|->
name|matchSum
operator|=
operator|(
name|ZSTD_LITFREQ_ADD
operator|<<
name|Litbits
operator|)
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxLit
condition|;
name|u
operator|++
control|)
block|{
name|optPtr
operator|->
name|litFreq
index|[
name|u
index|]
operator|=
literal|1
operator|+
operator|(
name|optPtr
operator|->
name|litFreq
index|[
name|u
index|]
operator|>>
name|ZSTD_FREQ_DIV
operator|)
expr_stmt|;
name|optPtr
operator|->
name|litSum
operator|+=
name|optPtr
operator|->
name|litFreq
index|[
name|u
index|]
expr_stmt|;
block|}
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxLL
condition|;
name|u
operator|++
control|)
name|optPtr
operator|->
name|litLengthFreq
index|[
name|u
index|]
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxML
condition|;
name|u
operator|++
control|)
name|optPtr
operator|->
name|matchLengthFreq
index|[
name|u
index|]
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxOff
condition|;
name|u
operator|++
control|)
name|optPtr
operator|->
name|offCodeFreq
index|[
name|u
index|]
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|optPtr
operator|->
name|matchLengthSum
operator|=
literal|0
expr_stmt|;
name|optPtr
operator|->
name|litLengthSum
operator|=
literal|0
expr_stmt|;
name|optPtr
operator|->
name|offCodeSum
operator|=
literal|0
expr_stmt|;
name|optPtr
operator|->
name|matchSum
operator|=
literal|0
expr_stmt|;
name|optPtr
operator|->
name|litSum
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxLit
condition|;
name|u
operator|++
control|)
block|{
name|optPtr
operator|->
name|litFreq
index|[
name|u
index|]
operator|=
literal|1
operator|+
operator|(
name|optPtr
operator|->
name|litFreq
index|[
name|u
index|]
operator|>>
operator|(
name|ZSTD_FREQ_DIV
operator|+
literal|1
operator|)
operator|)
expr_stmt|;
name|optPtr
operator|->
name|litSum
operator|+=
name|optPtr
operator|->
name|litFreq
index|[
name|u
index|]
expr_stmt|;
block|}
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxLL
condition|;
name|u
operator|++
control|)
block|{
name|optPtr
operator|->
name|litLengthFreq
index|[
name|u
index|]
operator|=
literal|1
operator|+
operator|(
name|optPtr
operator|->
name|litLengthFreq
index|[
name|u
index|]
operator|>>
operator|(
name|ZSTD_FREQ_DIV
operator|+
literal|1
operator|)
operator|)
expr_stmt|;
name|optPtr
operator|->
name|litLengthSum
operator|+=
name|optPtr
operator|->
name|litLengthFreq
index|[
name|u
index|]
expr_stmt|;
block|}
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxML
condition|;
name|u
operator|++
control|)
block|{
name|optPtr
operator|->
name|matchLengthFreq
index|[
name|u
index|]
operator|=
literal|1
operator|+
operator|(
name|optPtr
operator|->
name|matchLengthFreq
index|[
name|u
index|]
operator|>>
name|ZSTD_FREQ_DIV
operator|)
expr_stmt|;
name|optPtr
operator|->
name|matchLengthSum
operator|+=
name|optPtr
operator|->
name|matchLengthFreq
index|[
name|u
index|]
expr_stmt|;
name|optPtr
operator|->
name|matchSum
operator|+=
name|optPtr
operator|->
name|matchLengthFreq
index|[
name|u
index|]
operator|*
operator|(
name|u
operator|+
literal|3
operator|)
expr_stmt|;
block|}
name|optPtr
operator|->
name|matchSum
operator|*=
name|ZSTD_LITFREQ_ADD
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|MaxOff
condition|;
name|u
operator|++
control|)
block|{
name|optPtr
operator|->
name|offCodeFreq
index|[
name|u
index|]
operator|=
literal|1
operator|+
operator|(
name|optPtr
operator|->
name|offCodeFreq
index|[
name|u
index|]
operator|>>
name|ZSTD_FREQ_DIV
operator|)
expr_stmt|;
name|optPtr
operator|->
name|offCodeSum
operator|+=
name|optPtr
operator|->
name|offCodeFreq
index|[
name|u
index|]
expr_stmt|;
block|}
block|}
name|ZSTD_setLog2Prices
argument_list|(
name|optPtr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|U32
name|ZSTD_getLiteralPrice
parameter_list|(
name|optState_t
modifier|*
name|optPtr
parameter_list|,
name|U32
name|litLength
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|literals
parameter_list|)
block|{
name|U32
name|price
decl_stmt|,
name|u
decl_stmt|;
if|if
condition|(
name|optPtr
operator|->
name|staticPrices
condition|)
return|return
name|ZSTD_highbit32
argument_list|(
operator|(
name|U32
operator|)
name|litLength
operator|+
literal|1
argument_list|)
operator|+
operator|(
name|litLength
operator|*
literal|6
operator|)
return|;
if|if
condition|(
name|litLength
operator|==
literal|0
condition|)
return|return
name|optPtr
operator|->
name|log2litLengthSum
operator|-
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|litLengthFreq
index|[
literal|0
index|]
operator|+
literal|1
argument_list|)
return|;
comment|/* literals */
if|if
condition|(
name|optPtr
operator|->
name|cachedLiterals
operator|==
name|literals
condition|)
block|{
name|U32
specifier|const
name|additional
init|=
name|litLength
operator|-
name|optPtr
operator|->
name|cachedLitLength
decl_stmt|;
specifier|const
name|BYTE
modifier|*
name|literals2
init|=
name|optPtr
operator|->
name|cachedLiterals
operator|+
name|optPtr
operator|->
name|cachedLitLength
decl_stmt|;
name|price
operator|=
name|optPtr
operator|->
name|cachedPrice
operator|+
name|additional
operator|*
name|optPtr
operator|->
name|log2litSum
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|additional
condition|;
name|u
operator|++
control|)
name|price
operator|-=
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|litFreq
index|[
name|literals2
index|[
name|u
index|]
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|optPtr
operator|->
name|cachedPrice
operator|=
name|price
expr_stmt|;
name|optPtr
operator|->
name|cachedLitLength
operator|=
name|litLength
expr_stmt|;
block|}
else|else
block|{
name|price
operator|=
name|litLength
operator|*
name|optPtr
operator|->
name|log2litSum
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|litLength
condition|;
name|u
operator|++
control|)
name|price
operator|-=
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|litFreq
index|[
name|literals
index|[
name|u
index|]
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|litLength
operator|>=
literal|12
condition|)
block|{
name|optPtr
operator|->
name|cachedLiterals
operator|=
name|literals
expr_stmt|;
name|optPtr
operator|->
name|cachedPrice
operator|=
name|price
expr_stmt|;
name|optPtr
operator|->
name|cachedLitLength
operator|=
name|litLength
expr_stmt|;
block|}
block|}
comment|/* literal Length */
block|{
specifier|const
name|BYTE
name|LL_deltaCode
init|=
literal|19
decl_stmt|;
specifier|const
name|BYTE
name|llCode
init|=
operator|(
name|litLength
operator|>
literal|63
operator|)
condition|?
operator|(
name|BYTE
operator|)
name|ZSTD_highbit32
argument_list|(
name|litLength
argument_list|)
operator|+
name|LL_deltaCode
else|:
name|LL_Code
index|[
name|litLength
index|]
decl_stmt|;
name|price
operator|+=
name|LL_bits
index|[
name|llCode
index|]
operator|+
name|optPtr
operator|->
name|log2litLengthSum
operator|-
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|litLengthFreq
index|[
name|llCode
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|price
return|;
block|}
end_function

begin_function
name|FORCE_INLINE_TEMPLATE
name|U32
name|ZSTD_getPrice
parameter_list|(
name|optState_t
modifier|*
name|optPtr
parameter_list|,
name|U32
name|litLength
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|literals
parameter_list|,
name|U32
name|offset
parameter_list|,
name|U32
name|matchLength
parameter_list|,
specifier|const
name|int
name|ultra
parameter_list|)
block|{
comment|/* offset */
name|U32
name|price
decl_stmt|;
name|BYTE
specifier|const
name|offCode
init|=
operator|(
name|BYTE
operator|)
name|ZSTD_highbit32
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|optPtr
operator|->
name|staticPrices
condition|)
return|return
name|ZSTD_getLiteralPrice
argument_list|(
name|optPtr
argument_list|,
name|litLength
argument_list|,
name|literals
argument_list|)
operator|+
name|ZSTD_highbit32
argument_list|(
operator|(
name|U32
operator|)
name|matchLength
operator|+
literal|1
argument_list|)
operator|+
literal|16
operator|+
name|offCode
return|;
name|price
operator|=
name|offCode
operator|+
name|optPtr
operator|->
name|log2offCodeSum
operator|-
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|offCodeFreq
index|[
name|offCode
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ultra
operator|&&
name|offCode
operator|>=
literal|20
condition|)
name|price
operator|+=
operator|(
name|offCode
operator|-
literal|19
operator|)
operator|*
literal|2
expr_stmt|;
comment|/* match Length */
block|{
specifier|const
name|BYTE
name|ML_deltaCode
init|=
literal|36
decl_stmt|;
specifier|const
name|BYTE
name|mlCode
init|=
operator|(
name|matchLength
operator|>
literal|127
operator|)
condition|?
operator|(
name|BYTE
operator|)
name|ZSTD_highbit32
argument_list|(
name|matchLength
argument_list|)
operator|+
name|ML_deltaCode
else|:
name|ML_Code
index|[
name|matchLength
index|]
decl_stmt|;
name|price
operator|+=
name|ML_bits
index|[
name|mlCode
index|]
operator|+
name|optPtr
operator|->
name|log2matchLengthSum
operator|-
name|ZSTD_highbit32
argument_list|(
name|optPtr
operator|->
name|matchLengthFreq
index|[
name|mlCode
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|price
operator|+
name|ZSTD_getLiteralPrice
argument_list|(
name|optPtr
argument_list|,
name|litLength
argument_list|,
name|literals
argument_list|)
operator|+
name|optPtr
operator|->
name|factor
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|ZSTD_updatePrice
parameter_list|(
name|optState_t
modifier|*
name|optPtr
parameter_list|,
name|U32
name|litLength
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|literals
parameter_list|,
name|U32
name|offset
parameter_list|,
name|U32
name|matchLength
parameter_list|)
block|{
name|U32
name|u
decl_stmt|;
comment|/* literals */
name|optPtr
operator|->
name|litSum
operator|+=
name|litLength
operator|*
name|ZSTD_LITFREQ_ADD
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|litLength
condition|;
name|u
operator|++
control|)
name|optPtr
operator|->
name|litFreq
index|[
name|literals
index|[
name|u
index|]
index|]
operator|+=
name|ZSTD_LITFREQ_ADD
expr_stmt|;
comment|/* literal Length */
block|{
specifier|const
name|BYTE
name|LL_deltaCode
init|=
literal|19
decl_stmt|;
specifier|const
name|BYTE
name|llCode
init|=
operator|(
name|litLength
operator|>
literal|63
operator|)
condition|?
operator|(
name|BYTE
operator|)
name|ZSTD_highbit32
argument_list|(
name|litLength
argument_list|)
operator|+
name|LL_deltaCode
else|:
name|LL_Code
index|[
name|litLength
index|]
decl_stmt|;
name|optPtr
operator|->
name|litLengthFreq
index|[
name|llCode
index|]
operator|++
expr_stmt|;
name|optPtr
operator|->
name|litLengthSum
operator|++
expr_stmt|;
block|}
comment|/* match offset */
block|{
name|BYTE
specifier|const
name|offCode
init|=
operator|(
name|BYTE
operator|)
name|ZSTD_highbit32
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
decl_stmt|;
name|optPtr
operator|->
name|offCodeSum
operator|++
expr_stmt|;
name|optPtr
operator|->
name|offCodeFreq
index|[
name|offCode
index|]
operator|++
expr_stmt|;
block|}
comment|/* match Length */
block|{
specifier|const
name|BYTE
name|ML_deltaCode
init|=
literal|36
decl_stmt|;
specifier|const
name|BYTE
name|mlCode
init|=
operator|(
name|matchLength
operator|>
literal|127
operator|)
condition|?
operator|(
name|BYTE
operator|)
name|ZSTD_highbit32
argument_list|(
name|matchLength
argument_list|)
operator|+
name|ML_deltaCode
else|:
name|ML_Code
index|[
name|matchLength
index|]
decl_stmt|;
name|optPtr
operator|->
name|matchLengthFreq
index|[
name|mlCode
index|]
operator|++
expr_stmt|;
name|optPtr
operator|->
name|matchLengthSum
operator|++
expr_stmt|;
block|}
name|ZSTD_setLog2Prices
argument_list|(
name|optPtr
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|SET_PRICE
parameter_list|(
name|pos
parameter_list|,
name|mlen_
parameter_list|,
name|offset_
parameter_list|,
name|litlen_
parameter_list|,
name|price_
parameter_list|)
define|\
value|{                                                 \         while (last_pos< pos)  { opt[last_pos+1].price = ZSTD_MAX_PRICE; last_pos++; } \         opt[pos].mlen = mlen_;                         \         opt[pos].off = offset_;                        \         opt[pos].litlen = litlen_;                     \         opt[pos].price = price_;                       \     }
end_define

begin_comment
comment|/* function safe only for comparisons */
end_comment

begin_function
specifier|static
name|U32
name|ZSTD_readMINMATCH
parameter_list|(
specifier|const
name|void
modifier|*
name|memPtr
parameter_list|,
name|U32
name|length
parameter_list|)
block|{
switch|switch
condition|(
name|length
condition|)
block|{
default|default :
case|case
literal|4
case|:
return|return
name|MEM_read32
argument_list|(
name|memPtr
argument_list|)
return|;
case|case
literal|3
case|:
if|if
condition|(
name|MEM_isLittleEndian
argument_list|()
condition|)
return|return
name|MEM_read32
argument_list|(
name|memPtr
argument_list|)
operator|<<
literal|8
return|;
else|else
return|return
name|MEM_read32
argument_list|(
name|memPtr
argument_list|)
operator|>>
literal|8
return|;
block|}
block|}
end_function

begin_comment
comment|/* Update hashTable3 up to ip (excluded)    Assumption : always within prefix (i.e. not within extDict) */
end_comment

begin_function
specifier|static
name|U32
name|ZSTD_insertAndFindFirstIndexHash3
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|zc
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|ip
parameter_list|)
block|{
name|U32
modifier|*
specifier|const
name|hashTable3
init|=
name|zc
operator|->
name|hashTable3
decl_stmt|;
name|U32
specifier|const
name|hashLog3
init|=
name|zc
operator|->
name|hashLog3
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|base
init|=
name|zc
operator|->
name|base
decl_stmt|;
name|U32
name|idx
init|=
name|zc
operator|->
name|nextToUpdate3
decl_stmt|;
specifier|const
name|U32
name|target
init|=
name|zc
operator|->
name|nextToUpdate3
operator|=
call|(
name|U32
call|)
argument_list|(
name|ip
operator|-
name|base
argument_list|)
decl_stmt|;
specifier|const
name|size_t
name|hash3
init|=
name|ZSTD_hash3Ptr
argument_list|(
name|ip
argument_list|,
name|hashLog3
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|target
condition|)
block|{
name|hashTable3
index|[
name|ZSTD_hash3Ptr
argument_list|(
name|base
operator|+
name|idx
argument_list|,
name|hashLog3
argument_list|)
index|]
operator|=
name|idx
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
return|return
name|hashTable3
index|[
name|hash3
index|]
return|;
block|}
end_function

begin_comment
comment|/*-************************************* *  Binary Tree search ***************************************/
end_comment

begin_function
specifier|static
name|U32
name|ZSTD_insertBtAndGetAllMatches
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|zc
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|ip
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|iLimit
parameter_list|,
name|U32
name|nbCompares
parameter_list|,
specifier|const
name|U32
name|mls
parameter_list|,
name|U32
name|extDict
parameter_list|,
name|ZSTD_match_t
modifier|*
name|matches
parameter_list|,
specifier|const
name|U32
name|minMatchLen
parameter_list|)
block|{
specifier|const
name|BYTE
modifier|*
specifier|const
name|base
init|=
name|zc
operator|->
name|base
decl_stmt|;
specifier|const
name|U32
name|current
init|=
call|(
name|U32
call|)
argument_list|(
name|ip
operator|-
name|base
argument_list|)
decl_stmt|;
specifier|const
name|U32
name|hashLog
init|=
name|zc
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|hashLog
decl_stmt|;
specifier|const
name|size_t
name|h
init|=
name|ZSTD_hashPtr
argument_list|(
name|ip
argument_list|,
name|hashLog
argument_list|,
name|mls
argument_list|)
decl_stmt|;
name|U32
modifier|*
specifier|const
name|hashTable
init|=
name|zc
operator|->
name|hashTable
decl_stmt|;
name|U32
name|matchIndex
init|=
name|hashTable
index|[
name|h
index|]
decl_stmt|;
name|U32
modifier|*
specifier|const
name|bt
init|=
name|zc
operator|->
name|chainTable
decl_stmt|;
specifier|const
name|U32
name|btLog
init|=
name|zc
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|chainLog
operator|-
literal|1
decl_stmt|;
specifier|const
name|U32
name|btMask
init|=
operator|(
literal|1U
operator|<<
name|btLog
operator|)
operator|-
literal|1
decl_stmt|;
name|size_t
name|commonLengthSmaller
init|=
literal|0
decl_stmt|,
name|commonLengthLarger
init|=
literal|0
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|dictBase
init|=
name|zc
operator|->
name|dictBase
decl_stmt|;
specifier|const
name|U32
name|dictLimit
init|=
name|zc
operator|->
name|dictLimit
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|dictEnd
init|=
name|dictBase
operator|+
name|dictLimit
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|prefixStart
init|=
name|base
operator|+
name|dictLimit
decl_stmt|;
specifier|const
name|U32
name|btLow
init|=
name|btMask
operator|>=
name|current
condition|?
literal|0
else|:
name|current
operator|-
name|btMask
decl_stmt|;
specifier|const
name|U32
name|windowLow
init|=
name|zc
operator|->
name|lowLimit
decl_stmt|;
name|U32
modifier|*
name|smallerPtr
init|=
name|bt
operator|+
literal|2
operator|*
operator|(
name|current
operator|&
name|btMask
operator|)
decl_stmt|;
name|U32
modifier|*
name|largerPtr
init|=
name|bt
operator|+
literal|2
operator|*
operator|(
name|current
operator|&
name|btMask
operator|)
operator|+
literal|1
decl_stmt|;
name|U32
name|matchEndIdx
init|=
name|current
operator|+
literal|8
decl_stmt|;
name|U32
name|dummy32
decl_stmt|;
comment|/* to be nullified at the end */
name|U32
name|mnum
init|=
literal|0
decl_stmt|;
specifier|const
name|U32
name|minMatch
init|=
operator|(
name|mls
operator|==
literal|3
operator|)
condition|?
literal|3
else|:
literal|4
decl_stmt|;
name|size_t
name|bestLength
init|=
name|minMatchLen
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|minMatch
operator|==
literal|3
condition|)
block|{
comment|/* HC3 match finder */
name|U32
specifier|const
name|matchIndex3
init|=
name|ZSTD_insertAndFindFirstIndexHash3
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchIndex3
operator|>
name|windowLow
operator|&&
operator|(
name|current
operator|-
name|matchIndex3
operator|<
operator|(
literal|1
operator|<<
literal|18
operator|)
operator|)
condition|)
block|{
specifier|const
name|BYTE
modifier|*
name|match
decl_stmt|;
name|size_t
name|currentMl
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|extDict
operator|)
operator|||
name|matchIndex3
operator|>=
name|dictLimit
condition|)
block|{
name|match
operator|=
name|base
operator|+
name|matchIndex3
expr_stmt|;
if|if
condition|(
name|match
index|[
name|bestLength
index|]
operator|==
name|ip
index|[
name|bestLength
index|]
condition|)
name|currentMl
operator|=
name|ZSTD_count
argument_list|(
name|ip
argument_list|,
name|match
argument_list|,
name|iLimit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|match
operator|=
name|dictBase
operator|+
name|matchIndex3
expr_stmt|;
if|if
condition|(
name|ZSTD_readMINMATCH
argument_list|(
name|match
argument_list|,
name|MINMATCH
argument_list|)
operator|==
name|ZSTD_readMINMATCH
argument_list|(
name|ip
argument_list|,
name|MINMATCH
argument_list|)
condition|)
comment|/* assumption : matchIndex3<= dictLimit-4 (by table construction) */
name|currentMl
operator|=
name|ZSTD_count_2segments
argument_list|(
name|ip
operator|+
name|MINMATCH
argument_list|,
name|match
operator|+
name|MINMATCH
argument_list|,
name|iLimit
argument_list|,
name|dictEnd
argument_list|,
name|prefixStart
argument_list|)
operator|+
name|MINMATCH
expr_stmt|;
block|}
comment|/* save best solution */
if|if
condition|(
name|currentMl
operator|>
name|bestLength
condition|)
block|{
name|bestLength
operator|=
name|currentMl
expr_stmt|;
name|matches
index|[
name|mnum
index|]
operator|.
name|off
operator|=
name|ZSTD_REP_MOVE_OPT
operator|+
name|current
operator|-
name|matchIndex3
expr_stmt|;
name|matches
index|[
name|mnum
index|]
operator|.
name|len
operator|=
operator|(
name|U32
operator|)
name|currentMl
expr_stmt|;
name|mnum
operator|++
expr_stmt|;
if|if
condition|(
name|currentMl
operator|>
name|ZSTD_OPT_NUM
condition|)
goto|goto
name|update
goto|;
if|if
condition|(
name|ip
operator|+
name|currentMl
operator|==
name|iLimit
condition|)
goto|goto
name|update
goto|;
comment|/* best possible, and avoid read overflow*/
block|}
block|}
block|}
name|hashTable
index|[
name|h
index|]
operator|=
name|current
expr_stmt|;
comment|/* Update Hash Table */
while|while
condition|(
name|nbCompares
operator|--
operator|&&
operator|(
name|matchIndex
operator|>
name|windowLow
operator|)
condition|)
block|{
name|U32
modifier|*
name|nextPtr
init|=
name|bt
operator|+
literal|2
operator|*
operator|(
name|matchIndex
operator|&
name|btMask
operator|)
decl_stmt|;
name|size_t
name|matchLength
init|=
name|MIN
argument_list|(
name|commonLengthSmaller
argument_list|,
name|commonLengthLarger
argument_list|)
decl_stmt|;
comment|/* guaranteed minimum nb of common bytes */
specifier|const
name|BYTE
modifier|*
name|match
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|extDict
operator|)
operator|||
operator|(
name|matchIndex
operator|+
name|matchLength
operator|>=
name|dictLimit
operator|)
condition|)
block|{
name|match
operator|=
name|base
operator|+
name|matchIndex
expr_stmt|;
if|if
condition|(
name|match
index|[
name|matchLength
index|]
operator|==
name|ip
index|[
name|matchLength
index|]
condition|)
block|{
name|matchLength
operator|+=
name|ZSTD_count
argument_list|(
name|ip
operator|+
name|matchLength
operator|+
literal|1
argument_list|,
name|match
operator|+
name|matchLength
operator|+
literal|1
argument_list|,
name|iLimit
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|match
operator|=
name|dictBase
operator|+
name|matchIndex
expr_stmt|;
name|matchLength
operator|+=
name|ZSTD_count_2segments
argument_list|(
name|ip
operator|+
name|matchLength
argument_list|,
name|match
operator|+
name|matchLength
argument_list|,
name|iLimit
argument_list|,
name|dictEnd
argument_list|,
name|prefixStart
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchIndex
operator|+
name|matchLength
operator|>=
name|dictLimit
condition|)
name|match
operator|=
name|base
operator|+
name|matchIndex
expr_stmt|;
comment|/* to prepare for next usage of match[matchLength] */
block|}
if|if
condition|(
name|matchLength
operator|>
name|bestLength
condition|)
block|{
if|if
condition|(
name|matchLength
operator|>
name|matchEndIdx
operator|-
name|matchIndex
condition|)
name|matchEndIdx
operator|=
name|matchIndex
operator|+
operator|(
name|U32
operator|)
name|matchLength
expr_stmt|;
name|bestLength
operator|=
name|matchLength
expr_stmt|;
name|matches
index|[
name|mnum
index|]
operator|.
name|off
operator|=
name|ZSTD_REP_MOVE_OPT
operator|+
name|current
operator|-
name|matchIndex
expr_stmt|;
name|matches
index|[
name|mnum
index|]
operator|.
name|len
operator|=
operator|(
name|U32
operator|)
name|matchLength
expr_stmt|;
name|mnum
operator|++
expr_stmt|;
if|if
condition|(
name|matchLength
operator|>
name|ZSTD_OPT_NUM
condition|)
break|break;
if|if
condition|(
name|ip
operator|+
name|matchLength
operator|==
name|iLimit
condition|)
comment|/* equal : no way to know if inf or sup */
break|break;
comment|/* drop, to guarantee consistency (miss a little bit of compression) */
block|}
if|if
condition|(
name|match
index|[
name|matchLength
index|]
operator|<
name|ip
index|[
name|matchLength
index|]
condition|)
block|{
comment|/* match is smaller than current */
operator|*
name|smallerPtr
operator|=
name|matchIndex
expr_stmt|;
comment|/* update smaller idx */
name|commonLengthSmaller
operator|=
name|matchLength
expr_stmt|;
comment|/* all smaller will now have at least this guaranteed common length */
if|if
condition|(
name|matchIndex
operator|<=
name|btLow
condition|)
block|{
name|smallerPtr
operator|=
operator|&
name|dummy32
expr_stmt|;
break|break;
block|}
comment|/* beyond tree size, stop the search */
name|smallerPtr
operator|=
name|nextPtr
operator|+
literal|1
expr_stmt|;
comment|/* new "smaller" => larger of match */
name|matchIndex
operator|=
name|nextPtr
index|[
literal|1
index|]
expr_stmt|;
comment|/* new matchIndex larger than previous (closer to current) */
block|}
else|else
block|{
comment|/* match is larger than current */
operator|*
name|largerPtr
operator|=
name|matchIndex
expr_stmt|;
name|commonLengthLarger
operator|=
name|matchLength
expr_stmt|;
if|if
condition|(
name|matchIndex
operator|<=
name|btLow
condition|)
block|{
name|largerPtr
operator|=
operator|&
name|dummy32
expr_stmt|;
break|break;
block|}
comment|/* beyond tree size, stop the search */
name|largerPtr
operator|=
name|nextPtr
expr_stmt|;
name|matchIndex
operator|=
name|nextPtr
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
operator|*
name|smallerPtr
operator|=
operator|*
name|largerPtr
operator|=
literal|0
expr_stmt|;
name|update
label|:
name|zc
operator|->
name|nextToUpdate
operator|=
operator|(
name|matchEndIdx
operator|>
name|current
operator|+
literal|8
operator|)
condition|?
name|matchEndIdx
operator|-
literal|8
else|:
name|current
operator|+
literal|1
expr_stmt|;
return|return
name|mnum
return|;
block|}
end_function

begin_comment
comment|/** Tree updater, providing best match */
end_comment

begin_function
specifier|static
name|U32
name|ZSTD_BtGetAllMatches
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|zc
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|ip
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|iLimit
parameter_list|,
specifier|const
name|U32
name|maxNbAttempts
parameter_list|,
specifier|const
name|U32
name|mls
parameter_list|,
name|ZSTD_match_t
modifier|*
name|matches
parameter_list|,
specifier|const
name|U32
name|minMatchLen
parameter_list|)
block|{
if|if
condition|(
name|ip
operator|<
name|zc
operator|->
name|base
operator|+
name|zc
operator|->
name|nextToUpdate
condition|)
return|return
literal|0
return|;
comment|/* skipped area */
name|ZSTD_updateTree
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iLimit
argument_list|,
name|maxNbAttempts
argument_list|,
name|mls
argument_list|)
expr_stmt|;
return|return
name|ZSTD_insertBtAndGetAllMatches
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iLimit
argument_list|,
name|maxNbAttempts
argument_list|,
name|mls
argument_list|,
literal|0
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|U32
name|ZSTD_BtGetAllMatches_selectMLS
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|zc
parameter_list|,
comment|/* Index table will be updated */
specifier|const
name|BYTE
modifier|*
name|ip
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|iHighLimit
parameter_list|,
specifier|const
name|U32
name|maxNbAttempts
parameter_list|,
specifier|const
name|U32
name|matchLengthSearch
parameter_list|,
name|ZSTD_match_t
modifier|*
name|matches
parameter_list|,
specifier|const
name|U32
name|minMatchLen
parameter_list|)
block|{
switch|switch
condition|(
name|matchLengthSearch
condition|)
block|{
case|case
literal|3
case|:
return|return
name|ZSTD_BtGetAllMatches
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|3
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
default|default :
case|case
literal|4
case|:
return|return
name|ZSTD_BtGetAllMatches
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|4
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|ZSTD_BtGetAllMatches
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|5
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
case|case
literal|7
case|:
case|case
literal|6
case|:
return|return
name|ZSTD_BtGetAllMatches
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|6
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/** Tree updater, providing best match */
end_comment

begin_function
specifier|static
name|U32
name|ZSTD_BtGetAllMatches_extDict
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|zc
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|ip
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|iLimit
parameter_list|,
specifier|const
name|U32
name|maxNbAttempts
parameter_list|,
specifier|const
name|U32
name|mls
parameter_list|,
name|ZSTD_match_t
modifier|*
name|matches
parameter_list|,
specifier|const
name|U32
name|minMatchLen
parameter_list|)
block|{
if|if
condition|(
name|ip
operator|<
name|zc
operator|->
name|base
operator|+
name|zc
operator|->
name|nextToUpdate
condition|)
return|return
literal|0
return|;
comment|/* skipped area */
name|ZSTD_updateTree_extDict
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iLimit
argument_list|,
name|maxNbAttempts
argument_list|,
name|mls
argument_list|)
expr_stmt|;
return|return
name|ZSTD_insertBtAndGetAllMatches
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iLimit
argument_list|,
name|maxNbAttempts
argument_list|,
name|mls
argument_list|,
literal|1
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|U32
name|ZSTD_BtGetAllMatches_selectMLS_extDict
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|zc
parameter_list|,
comment|/* Index table will be updated */
specifier|const
name|BYTE
modifier|*
name|ip
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|iHighLimit
parameter_list|,
specifier|const
name|U32
name|maxNbAttempts
parameter_list|,
specifier|const
name|U32
name|matchLengthSearch
parameter_list|,
name|ZSTD_match_t
modifier|*
name|matches
parameter_list|,
specifier|const
name|U32
name|minMatchLen
parameter_list|)
block|{
switch|switch
condition|(
name|matchLengthSearch
condition|)
block|{
case|case
literal|3
case|:
return|return
name|ZSTD_BtGetAllMatches_extDict
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|3
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
default|default :
case|case
literal|4
case|:
return|return
name|ZSTD_BtGetAllMatches_extDict
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|4
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|ZSTD_BtGetAllMatches_extDict
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|5
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
case|case
literal|7
case|:
case|case
literal|6
case|:
return|return
name|ZSTD_BtGetAllMatches_extDict
argument_list|(
name|zc
argument_list|,
name|ip
argument_list|,
name|iHighLimit
argument_list|,
name|maxNbAttempts
argument_list|,
literal|6
argument_list|,
name|matches
argument_list|,
name|minMatchLen
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/*-******************************* *  Optimal parser *********************************/
end_comment

begin_function
name|FORCE_INLINE_TEMPLATE
name|void
name|ZSTD_compressBlock_opt_generic
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|ctx
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|,
specifier|const
name|int
name|ultra
parameter_list|)
block|{
name|seqStore_t
modifier|*
name|seqStorePtr
init|=
operator|&
operator|(
name|ctx
operator|->
name|seqStore
operator|)
decl_stmt|;
name|optState_t
modifier|*
name|optStatePtr
init|=
operator|&
operator|(
name|ctx
operator|->
name|optState
operator|)
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|istart
init|=
operator|(
specifier|const
name|BYTE
operator|*
operator|)
name|src
decl_stmt|;
specifier|const
name|BYTE
modifier|*
name|ip
init|=
name|istart
decl_stmt|;
specifier|const
name|BYTE
modifier|*
name|anchor
init|=
name|istart
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|iend
init|=
name|istart
operator|+
name|srcSize
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|ilimit
init|=
name|iend
operator|-
literal|8
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|base
init|=
name|ctx
operator|->
name|base
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|prefixStart
init|=
name|base
operator|+
name|ctx
operator|->
name|dictLimit
decl_stmt|;
specifier|const
name|U32
name|maxSearches
init|=
literal|1U
operator|<<
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|searchLog
decl_stmt|;
specifier|const
name|U32
name|sufficient_len
init|=
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|targetLength
decl_stmt|;
specifier|const
name|U32
name|mls
init|=
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|searchLength
decl_stmt|;
specifier|const
name|U32
name|minMatch
init|=
operator|(
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|searchLength
operator|==
literal|3
operator|)
condition|?
literal|3
else|:
literal|4
decl_stmt|;
name|ZSTD_optimal_t
modifier|*
name|opt
init|=
name|optStatePtr
operator|->
name|priceTable
decl_stmt|;
name|ZSTD_match_t
modifier|*
name|matches
init|=
name|optStatePtr
operator|->
name|matchTable
decl_stmt|;
specifier|const
name|BYTE
modifier|*
name|inr
decl_stmt|;
name|U32
name|offset
decl_stmt|,
name|rep
index|[
name|ZSTD_REP_NUM
index|]
decl_stmt|;
comment|/* init */
name|ctx
operator|->
name|nextToUpdate3
operator|=
name|ctx
operator|->
name|nextToUpdate
expr_stmt|;
name|ZSTD_rescaleFreqs
argument_list|(
name|optStatePtr
argument_list|,
operator|(
specifier|const
name|BYTE
operator|*
operator|)
name|src
argument_list|,
name|srcSize
argument_list|)
expr_stmt|;
name|ip
operator|+=
operator|(
name|ip
operator|==
name|prefixStart
operator|)
expr_stmt|;
block|{
name|U32
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ZSTD_REP_NUM
condition|;
name|i
operator|++
control|)
name|rep
index|[
name|i
index|]
operator|=
name|seqStorePtr
operator|->
name|rep
index|[
name|i
index|]
expr_stmt|;
block|}
comment|/* Match Loop */
while|while
condition|(
name|ip
operator|<
name|ilimit
condition|)
block|{
name|U32
name|cur
decl_stmt|,
name|match_num
decl_stmt|,
name|last_pos
decl_stmt|,
name|litlen
decl_stmt|,
name|price
decl_stmt|;
name|U32
name|u
decl_stmt|,
name|mlen
decl_stmt|,
name|best_mlen
decl_stmt|,
name|best_off
decl_stmt|,
name|litLength
decl_stmt|;
name|memset
argument_list|(
name|opt
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ZSTD_optimal_t
argument_list|)
argument_list|)
expr_stmt|;
name|last_pos
operator|=
literal|0
expr_stmt|;
name|litlen
operator|=
call|(
name|U32
call|)
argument_list|(
name|ip
operator|-
name|anchor
argument_list|)
expr_stmt|;
comment|/* check repCode */
block|{
name|U32
name|i
decl_stmt|,
name|last_i
init|=
name|ZSTD_REP_CHECK
operator|+
operator|(
name|ip
operator|==
name|anchor
operator|)
decl_stmt|;
for|for
control|(
name|i
operator|=
operator|(
name|ip
operator|==
name|anchor
operator|)
init|;
name|i
operator|<
name|last_i
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|S32
name|repCur
init|=
operator|(
name|i
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
condition|?
operator|(
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
name|rep
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|repCur
operator|>
literal|0
operator|)
operator|&&
operator|(
name|repCur
operator|<
call|(
name|S32
call|)
argument_list|(
name|ip
operator|-
name|prefixStart
argument_list|)
operator|)
operator|&&
operator|(
name|ZSTD_readMINMATCH
argument_list|(
name|ip
argument_list|,
name|minMatch
argument_list|)
operator|==
name|ZSTD_readMINMATCH
argument_list|(
name|ip
operator|-
name|repCur
argument_list|,
name|minMatch
argument_list|)
operator|)
condition|)
block|{
name|mlen
operator|=
operator|(
name|U32
operator|)
name|ZSTD_count
argument_list|(
name|ip
operator|+
name|minMatch
argument_list|,
name|ip
operator|+
name|minMatch
operator|-
name|repCur
argument_list|,
name|iend
argument_list|)
operator|+
name|minMatch
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|sufficient_len
operator|||
name|mlen
operator|>=
name|ZSTD_OPT_NUM
condition|)
block|{
name|best_mlen
operator|=
name|mlen
expr_stmt|;
name|best_off
operator|=
name|i
expr_stmt|;
name|cur
operator|=
literal|0
expr_stmt|;
name|last_pos
operator|=
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
name|best_off
operator|=
name|i
operator|-
operator|(
name|ip
operator|==
name|anchor
operator|)
expr_stmt|;
do|do
block|{
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|last_pos
operator|||
name|price
operator|<
name|opt
index|[
name|mlen
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|mlen
argument_list|,
name|mlen
argument_list|,
name|i
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
comment|/* note : macro modifies last_pos */
name|mlen
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|mlen
operator|>=
name|minMatch
condition|)
do|;
block|}
block|}
block|}
name|match_num
operator|=
name|ZSTD_BtGetAllMatches_selectMLS
argument_list|(
name|ctx
argument_list|,
name|ip
argument_list|,
name|iend
argument_list|,
name|maxSearches
argument_list|,
name|mls
argument_list|,
name|matches
argument_list|,
name|minMatch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|last_pos
operator|&&
operator|!
name|match_num
condition|)
block|{
name|ip
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|match_num
operator|&&
operator|(
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>
name|sufficient_len
operator|||
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>=
name|ZSTD_OPT_NUM
operator|)
condition|)
block|{
name|best_mlen
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
expr_stmt|;
name|best_off
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|off
expr_stmt|;
name|cur
operator|=
literal|0
expr_stmt|;
name|last_pos
operator|=
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
comment|/* set prices using matches at position = 0 */
name|best_mlen
operator|=
operator|(
name|last_pos
operator|)
condition|?
name|last_pos
else|:
name|minMatch
expr_stmt|;
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|match_num
condition|;
name|u
operator|++
control|)
block|{
name|mlen
operator|=
operator|(
name|u
operator|>
literal|0
operator|)
condition|?
name|matches
index|[
name|u
operator|-
literal|1
index|]
operator|.
name|len
operator|+
literal|1
else|:
name|best_mlen
expr_stmt|;
name|best_mlen
operator|=
name|matches
index|[
name|u
index|]
operator|.
name|len
expr_stmt|;
while|while
condition|(
name|mlen
operator|<=
name|best_mlen
condition|)
block|{
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|last_pos
operator|||
name|price
operator|<
name|opt
index|[
name|mlen
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|mlen
argument_list|,
name|mlen
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
comment|/* note : macro modifies last_pos */
name|mlen
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|last_pos
operator|<
name|minMatch
condition|)
block|{
name|ip
operator|++
expr_stmt|;
continue|continue;
block|}
comment|/* initialize opt[0] */
block|{
name|U32
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ZSTD_REP_NUM
condition|;
name|i
operator|++
control|)
name|opt
index|[
literal|0
index|]
operator|.
name|rep
index|[
name|i
index|]
operator|=
name|rep
index|[
name|i
index|]
expr_stmt|;
block|}
name|opt
index|[
literal|0
index|]
operator|.
name|mlen
operator|=
literal|1
expr_stmt|;
name|opt
index|[
literal|0
index|]
operator|.
name|litlen
operator|=
name|litlen
expr_stmt|;
comment|/* check further positions */
for|for
control|(
name|cur
operator|=
literal|1
init|;
name|cur
operator|<=
name|last_pos
condition|;
name|cur
operator|++
control|)
block|{
name|inr
operator|=
name|ip
operator|+
name|cur
expr_stmt|;
if|if
condition|(
name|opt
index|[
name|cur
operator|-
literal|1
index|]
operator|.
name|mlen
operator|==
literal|1
condition|)
block|{
name|litlen
operator|=
name|opt
index|[
name|cur
operator|-
literal|1
index|]
operator|.
name|litlen
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|cur
operator|>
name|litlen
condition|)
block|{
name|price
operator|=
name|opt
index|[
name|cur
operator|-
name|litlen
index|]
operator|.
name|price
operator|+
name|ZSTD_getLiteralPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|inr
operator|-
name|litlen
argument_list|)
expr_stmt|;
block|}
else|else
name|price
operator|=
name|ZSTD_getLiteralPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|litlen
operator|=
literal|1
expr_stmt|;
name|price
operator|=
name|opt
index|[
name|cur
operator|-
literal|1
index|]
operator|.
name|price
operator|+
name|ZSTD_getLiteralPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|inr
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|>
name|last_pos
operator|||
name|price
operator|<=
name|opt
index|[
name|cur
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|cur
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|==
name|last_pos
condition|)
break|break;
if|if
condition|(
name|inr
operator|>
name|ilimit
condition|)
comment|/* last match must start at a minimum distance of 8 from oend */
continue|continue;
name|mlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
expr_stmt|;
if|if
condition|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|>
name|ZSTD_REP_MOVE_OPT
condition|)
block|{
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|2
index|]
operator|=
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|1
index|]
operator|=
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|0
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|-
name|ZSTD_REP_MOVE_OPT
expr_stmt|;
block|}
else|else
block|{
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|2
index|]
operator|=
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|>
literal|1
operator|)
condition|?
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|1
index|]
else|:
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|2
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|1
index|]
operator|=
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|>
literal|0
operator|)
condition|?
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|0
index|]
else|:
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
operator|&&
operator|(
name|mlen
operator|!=
literal|1
operator|)
operator|)
condition|?
operator|(
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
operator|(
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
name|opt
index|[
name|cur
index|]
operator|.
name|off
index|]
operator|)
expr_stmt|;
block|}
name|best_mlen
operator|=
name|minMatch
expr_stmt|;
block|{
name|U32
name|i
decl_stmt|,
name|last_i
init|=
name|ZSTD_REP_CHECK
operator|+
operator|(
name|mlen
operator|!=
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|i
operator|=
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|!=
literal|1
operator|)
init|;
name|i
operator|<
name|last_i
condition|;
name|i
operator|++
control|)
block|{
comment|/* check rep */
specifier|const
name|S32
name|repCur
init|=
operator|(
name|i
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
condition|?
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|repCur
operator|>
literal|0
operator|)
operator|&&
operator|(
name|repCur
operator|<
call|(
name|S32
call|)
argument_list|(
name|inr
operator|-
name|prefixStart
argument_list|)
operator|)
operator|&&
operator|(
name|ZSTD_readMINMATCH
argument_list|(
name|inr
argument_list|,
name|minMatch
argument_list|)
operator|==
name|ZSTD_readMINMATCH
argument_list|(
name|inr
operator|-
name|repCur
argument_list|,
name|minMatch
argument_list|)
operator|)
condition|)
block|{
name|mlen
operator|=
operator|(
name|U32
operator|)
name|ZSTD_count
argument_list|(
name|inr
operator|+
name|minMatch
argument_list|,
name|inr
operator|+
name|minMatch
operator|-
name|repCur
argument_list|,
name|iend
argument_list|)
operator|+
name|minMatch
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|sufficient_len
operator|||
name|cur
operator|+
name|mlen
operator|>=
name|ZSTD_OPT_NUM
condition|)
block|{
name|best_mlen
operator|=
name|mlen
expr_stmt|;
name|best_off
operator|=
name|i
expr_stmt|;
name|last_pos
operator|=
name|cur
operator|+
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
name|best_off
operator|=
name|i
operator|-
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|!=
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|best_mlen
condition|)
name|best_mlen
operator|=
name|mlen
expr_stmt|;
do|do
block|{
if|if
condition|(
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|==
literal|1
condition|)
block|{
name|litlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|litlen
expr_stmt|;
if|if
condition|(
name|cur
operator|>
name|litlen
condition|)
block|{
name|price
operator|=
name|opt
index|[
name|cur
operator|-
name|litlen
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|inr
operator|-
name|litlen
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
else|else
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|litlen
operator|=
literal|0
expr_stmt|;
name|price
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|+
name|mlen
operator|>
name|last_pos
operator|||
name|price
operator|<=
name|opt
index|[
name|cur
operator|+
name|mlen
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|cur
operator|+
name|mlen
argument_list|,
name|mlen
argument_list|,
name|i
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
name|mlen
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|mlen
operator|>=
name|minMatch
condition|)
do|;
block|}
block|}
block|}
name|match_num
operator|=
name|ZSTD_BtGetAllMatches_selectMLS
argument_list|(
name|ctx
argument_list|,
name|inr
argument_list|,
name|iend
argument_list|,
name|maxSearches
argument_list|,
name|mls
argument_list|,
name|matches
argument_list|,
name|best_mlen
argument_list|)
expr_stmt|;
if|if
condition|(
name|match_num
operator|>
literal|0
operator|&&
operator|(
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>
name|sufficient_len
operator|||
name|cur
operator|+
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>=
name|ZSTD_OPT_NUM
operator|)
condition|)
block|{
name|best_mlen
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
expr_stmt|;
name|best_off
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|off
expr_stmt|;
name|last_pos
operator|=
name|cur
operator|+
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
comment|/* set prices using matches at position = cur */
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|match_num
condition|;
name|u
operator|++
control|)
block|{
name|mlen
operator|=
operator|(
name|u
operator|>
literal|0
operator|)
condition|?
name|matches
index|[
name|u
operator|-
literal|1
index|]
operator|.
name|len
operator|+
literal|1
else|:
name|best_mlen
expr_stmt|;
name|best_mlen
operator|=
name|matches
index|[
name|u
index|]
operator|.
name|len
expr_stmt|;
while|while
condition|(
name|mlen
operator|<=
name|best_mlen
condition|)
block|{
if|if
condition|(
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|==
literal|1
condition|)
block|{
name|litlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|litlen
expr_stmt|;
if|if
condition|(
name|cur
operator|>
name|litlen
condition|)
name|price
operator|=
name|opt
index|[
name|cur
operator|-
name|litlen
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|ip
operator|+
name|cur
operator|-
name|litlen
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
else|else
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|litlen
operator|=
literal|0
expr_stmt|;
name|price
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|+
name|mlen
operator|>
name|last_pos
operator|||
operator|(
name|price
operator|<
name|opt
index|[
name|cur
operator|+
name|mlen
index|]
operator|.
name|price
operator|)
condition|)
name|SET_PRICE
argument_list|(
name|cur
operator|+
name|mlen
argument_list|,
name|mlen
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
name|mlen
operator|++
expr_stmt|;
block|}
block|}
block|}
name|best_mlen
operator|=
name|opt
index|[
name|last_pos
index|]
operator|.
name|mlen
expr_stmt|;
name|best_off
operator|=
name|opt
index|[
name|last_pos
index|]
operator|.
name|off
expr_stmt|;
name|cur
operator|=
name|last_pos
operator|-
name|best_mlen
expr_stmt|;
comment|/* store sequence */
name|_storeSequence
label|:
comment|/* cur, last_pos, best_mlen, best_off have to be set */
name|opt
index|[
literal|0
index|]
operator|.
name|mlen
operator|=
literal|1
expr_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|mlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
expr_stmt|;
name|offset
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|off
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|=
name|best_mlen
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|=
name|best_off
expr_stmt|;
name|best_mlen
operator|=
name|mlen
expr_stmt|;
name|best_off
operator|=
name|offset
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|cur
condition|)
break|break;
name|cur
operator|-=
name|mlen
expr_stmt|;
block|}
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|last_pos
condition|;
control|)
block|{
name|u
operator|+=
name|opt
index|[
name|u
index|]
operator|.
name|mlen
expr_stmt|;
block|}
for|for
control|(
name|cur
operator|=
literal|0
init|;
name|cur
operator|<
name|last_pos
condition|;
control|)
block|{
name|mlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
expr_stmt|;
if|if
condition|(
name|mlen
operator|==
literal|1
condition|)
block|{
name|ip
operator|++
expr_stmt|;
name|cur
operator|++
expr_stmt|;
continue|continue;
block|}
name|offset
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|off
expr_stmt|;
name|cur
operator|+=
name|mlen
expr_stmt|;
name|litLength
operator|=
call|(
name|U32
call|)
argument_list|(
name|ip
operator|-
name|anchor
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|>
name|ZSTD_REP_MOVE_OPT
condition|)
block|{
name|rep
index|[
literal|2
index|]
operator|=
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|rep
index|[
literal|1
index|]
operator|=
name|rep
index|[
literal|0
index|]
expr_stmt|;
name|rep
index|[
literal|0
index|]
operator|=
name|offset
operator|-
name|ZSTD_REP_MOVE_OPT
expr_stmt|;
name|offset
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|best_off
operator|=
operator|(
name|offset
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
condition|?
operator|(
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
operator|(
name|rep
index|[
name|offset
index|]
operator|)
expr_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|1
condition|)
name|rep
index|[
literal|2
index|]
operator|=
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|rep
index|[
literal|1
index|]
operator|=
name|rep
index|[
literal|0
index|]
expr_stmt|;
name|rep
index|[
literal|0
index|]
operator|=
name|best_off
expr_stmt|;
block|}
if|if
condition|(
name|litLength
operator|==
literal|0
condition|)
name|offset
operator|--
expr_stmt|;
block|}
name|ZSTD_updatePrice
argument_list|(
name|optStatePtr
argument_list|,
name|litLength
argument_list|,
name|anchor
argument_list|,
name|offset
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|)
expr_stmt|;
name|ZSTD_storeSeq
argument_list|(
name|seqStorePtr
argument_list|,
name|litLength
argument_list|,
name|anchor
argument_list|,
name|offset
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|)
expr_stmt|;
name|anchor
operator|=
name|ip
operator|=
name|ip
operator|+
name|mlen
expr_stmt|;
block|}
block|}
comment|/* for (cur=0; cur< last_pos; ) */
comment|/* Save reps for next block */
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ZSTD_REP_NUM
condition|;
name|i
operator|++
control|)
name|seqStorePtr
operator|->
name|repToConfirm
index|[
name|i
index|]
operator|=
name|rep
index|[
name|i
index|]
expr_stmt|;
block|}
comment|/* Last Literals */
block|{
name|size_t
specifier|const
name|lastLLSize
init|=
name|iend
operator|-
name|anchor
decl_stmt|;
name|memcpy
argument_list|(
name|seqStorePtr
operator|->
name|lit
argument_list|,
name|anchor
argument_list|,
name|lastLLSize
argument_list|)
expr_stmt|;
name|seqStorePtr
operator|->
name|lit
operator|+=
name|lastLLSize
expr_stmt|;
block|}
block|}
end_function

begin_function
name|FORCE_INLINE_TEMPLATE
name|void
name|ZSTD_compressBlock_opt_extDict_generic
parameter_list|(
name|ZSTD_CCtx
modifier|*
name|ctx
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|,
specifier|const
name|int
name|ultra
parameter_list|)
block|{
name|seqStore_t
modifier|*
name|seqStorePtr
init|=
operator|&
operator|(
name|ctx
operator|->
name|seqStore
operator|)
decl_stmt|;
name|optState_t
modifier|*
name|optStatePtr
init|=
operator|&
operator|(
name|ctx
operator|->
name|optState
operator|)
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|istart
init|=
operator|(
specifier|const
name|BYTE
operator|*
operator|)
name|src
decl_stmt|;
specifier|const
name|BYTE
modifier|*
name|ip
init|=
name|istart
decl_stmt|;
specifier|const
name|BYTE
modifier|*
name|anchor
init|=
name|istart
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|iend
init|=
name|istart
operator|+
name|srcSize
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|ilimit
init|=
name|iend
operator|-
literal|8
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|base
init|=
name|ctx
operator|->
name|base
decl_stmt|;
specifier|const
name|U32
name|lowestIndex
init|=
name|ctx
operator|->
name|lowLimit
decl_stmt|;
specifier|const
name|U32
name|dictLimit
init|=
name|ctx
operator|->
name|dictLimit
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|prefixStart
init|=
name|base
operator|+
name|dictLimit
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|dictBase
init|=
name|ctx
operator|->
name|dictBase
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|dictEnd
init|=
name|dictBase
operator|+
name|dictLimit
decl_stmt|;
specifier|const
name|U32
name|maxSearches
init|=
literal|1U
operator|<<
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|searchLog
decl_stmt|;
specifier|const
name|U32
name|sufficient_len
init|=
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|targetLength
decl_stmt|;
specifier|const
name|U32
name|mls
init|=
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|searchLength
decl_stmt|;
specifier|const
name|U32
name|minMatch
init|=
operator|(
name|ctx
operator|->
name|appliedParams
operator|.
name|cParams
operator|.
name|searchLength
operator|==
literal|3
operator|)
condition|?
literal|3
else|:
literal|4
decl_stmt|;
name|ZSTD_optimal_t
modifier|*
name|opt
init|=
name|optStatePtr
operator|->
name|priceTable
decl_stmt|;
name|ZSTD_match_t
modifier|*
name|matches
init|=
name|optStatePtr
operator|->
name|matchTable
decl_stmt|;
specifier|const
name|BYTE
modifier|*
name|inr
decl_stmt|;
comment|/* init */
name|U32
name|offset
decl_stmt|,
name|rep
index|[
name|ZSTD_REP_NUM
index|]
decl_stmt|;
block|{
name|U32
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ZSTD_REP_NUM
condition|;
name|i
operator|++
control|)
name|rep
index|[
name|i
index|]
operator|=
name|seqStorePtr
operator|->
name|rep
index|[
name|i
index|]
expr_stmt|;
block|}
name|ctx
operator|->
name|nextToUpdate3
operator|=
name|ctx
operator|->
name|nextToUpdate
expr_stmt|;
name|ZSTD_rescaleFreqs
argument_list|(
name|optStatePtr
argument_list|,
operator|(
specifier|const
name|BYTE
operator|*
operator|)
name|src
argument_list|,
name|srcSize
argument_list|)
expr_stmt|;
name|ip
operator|+=
operator|(
name|ip
operator|==
name|prefixStart
operator|)
expr_stmt|;
comment|/* Match Loop */
while|while
condition|(
name|ip
operator|<
name|ilimit
condition|)
block|{
name|U32
name|cur
decl_stmt|,
name|match_num
decl_stmt|,
name|last_pos
decl_stmt|,
name|litlen
decl_stmt|,
name|price
decl_stmt|;
name|U32
name|u
decl_stmt|,
name|mlen
decl_stmt|,
name|best_mlen
decl_stmt|,
name|best_off
decl_stmt|,
name|litLength
decl_stmt|;
name|U32
name|current
init|=
call|(
name|U32
call|)
argument_list|(
name|ip
operator|-
name|base
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|opt
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ZSTD_optimal_t
argument_list|)
argument_list|)
expr_stmt|;
name|last_pos
operator|=
literal|0
expr_stmt|;
name|opt
index|[
literal|0
index|]
operator|.
name|litlen
operator|=
call|(
name|U32
call|)
argument_list|(
name|ip
operator|-
name|anchor
argument_list|)
expr_stmt|;
comment|/* check repCode */
block|{
name|U32
name|i
decl_stmt|,
name|last_i
init|=
name|ZSTD_REP_CHECK
operator|+
operator|(
name|ip
operator|==
name|anchor
operator|)
decl_stmt|;
for|for
control|(
name|i
operator|=
operator|(
name|ip
operator|==
name|anchor
operator|)
init|;
name|i
operator|<
name|last_i
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|S32
name|repCur
init|=
operator|(
name|i
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
condition|?
operator|(
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
name|rep
index|[
name|i
index|]
decl_stmt|;
specifier|const
name|U32
name|repIndex
init|=
call|(
name|U32
call|)
argument_list|(
name|current
operator|-
name|repCur
argument_list|)
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|repBase
init|=
name|repIndex
operator|<
name|dictLimit
condition|?
name|dictBase
else|:
name|base
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|repMatch
init|=
name|repBase
operator|+
name|repIndex
decl_stmt|;
if|if
condition|(
operator|(
name|repCur
operator|>
literal|0
operator|&&
name|repCur
operator|<=
operator|(
name|S32
operator|)
name|current
operator|)
operator|&&
operator|(
operator|(
call|(
name|U32
call|)
argument_list|(
operator|(
name|dictLimit
operator|-
literal|1
operator|)
operator|-
name|repIndex
argument_list|)
operator|>=
literal|3
operator|)
operator|&
operator|(
name|repIndex
operator|>
name|lowestIndex
operator|)
operator|)
comment|/* intentional overflow */
operator|&&
operator|(
name|ZSTD_readMINMATCH
argument_list|(
name|ip
argument_list|,
name|minMatch
argument_list|)
operator|==
name|ZSTD_readMINMATCH
argument_list|(
name|repMatch
argument_list|,
name|minMatch
argument_list|)
operator|)
condition|)
block|{
comment|/* repcode detected we should take it */
specifier|const
name|BYTE
modifier|*
specifier|const
name|repEnd
init|=
name|repIndex
operator|<
name|dictLimit
condition|?
name|dictEnd
else|:
name|iend
decl_stmt|;
name|mlen
operator|=
operator|(
name|U32
operator|)
name|ZSTD_count_2segments
argument_list|(
name|ip
operator|+
name|minMatch
argument_list|,
name|repMatch
operator|+
name|minMatch
argument_list|,
name|iend
argument_list|,
name|repEnd
argument_list|,
name|prefixStart
argument_list|)
operator|+
name|minMatch
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|sufficient_len
operator|||
name|mlen
operator|>=
name|ZSTD_OPT_NUM
condition|)
block|{
name|best_mlen
operator|=
name|mlen
expr_stmt|;
name|best_off
operator|=
name|i
expr_stmt|;
name|cur
operator|=
literal|0
expr_stmt|;
name|last_pos
operator|=
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
name|best_off
operator|=
name|i
operator|-
operator|(
name|ip
operator|==
name|anchor
operator|)
expr_stmt|;
name|litlen
operator|=
name|opt
index|[
literal|0
index|]
operator|.
name|litlen
expr_stmt|;
do|do
block|{
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|last_pos
operator|||
name|price
operator|<
name|opt
index|[
name|mlen
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|mlen
argument_list|,
name|mlen
argument_list|,
name|i
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
comment|/* note : macro modifies last_pos */
name|mlen
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|mlen
operator|>=
name|minMatch
condition|)
do|;
block|}
block|}
block|}
name|match_num
operator|=
name|ZSTD_BtGetAllMatches_selectMLS_extDict
argument_list|(
name|ctx
argument_list|,
name|ip
argument_list|,
name|iend
argument_list|,
name|maxSearches
argument_list|,
name|mls
argument_list|,
name|matches
argument_list|,
name|minMatch
argument_list|)
expr_stmt|;
comment|/* first search (depth 0) */
if|if
condition|(
operator|!
name|last_pos
operator|&&
operator|!
name|match_num
condition|)
block|{
name|ip
operator|++
expr_stmt|;
continue|continue;
block|}
block|{
name|U32
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ZSTD_REP_NUM
condition|;
name|i
operator|++
control|)
name|opt
index|[
literal|0
index|]
operator|.
name|rep
index|[
name|i
index|]
operator|=
name|rep
index|[
name|i
index|]
expr_stmt|;
block|}
name|opt
index|[
literal|0
index|]
operator|.
name|mlen
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|match_num
operator|&&
operator|(
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>
name|sufficient_len
operator|||
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>=
name|ZSTD_OPT_NUM
operator|)
condition|)
block|{
name|best_mlen
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
expr_stmt|;
name|best_off
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|off
expr_stmt|;
name|cur
operator|=
literal|0
expr_stmt|;
name|last_pos
operator|=
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
name|best_mlen
operator|=
operator|(
name|last_pos
operator|)
condition|?
name|last_pos
else|:
name|minMatch
expr_stmt|;
comment|/* set prices using matches at position = 0 */
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|match_num
condition|;
name|u
operator|++
control|)
block|{
name|mlen
operator|=
operator|(
name|u
operator|>
literal|0
operator|)
condition|?
name|matches
index|[
name|u
operator|-
literal|1
index|]
operator|.
name|len
operator|+
literal|1
else|:
name|best_mlen
expr_stmt|;
name|best_mlen
operator|=
name|matches
index|[
name|u
index|]
operator|.
name|len
expr_stmt|;
name|litlen
operator|=
name|opt
index|[
literal|0
index|]
operator|.
name|litlen
expr_stmt|;
while|while
condition|(
name|mlen
operator|<=
name|best_mlen
condition|)
block|{
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|last_pos
operator|||
name|price
operator|<
name|opt
index|[
name|mlen
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|mlen
argument_list|,
name|mlen
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
name|mlen
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|last_pos
operator|<
name|minMatch
condition|)
block|{
name|ip
operator|++
expr_stmt|;
continue|continue;
block|}
comment|/* check further positions */
for|for
control|(
name|cur
operator|=
literal|1
init|;
name|cur
operator|<=
name|last_pos
condition|;
name|cur
operator|++
control|)
block|{
name|inr
operator|=
name|ip
operator|+
name|cur
expr_stmt|;
if|if
condition|(
name|opt
index|[
name|cur
operator|-
literal|1
index|]
operator|.
name|mlen
operator|==
literal|1
condition|)
block|{
name|litlen
operator|=
name|opt
index|[
name|cur
operator|-
literal|1
index|]
operator|.
name|litlen
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|cur
operator|>
name|litlen
condition|)
block|{
name|price
operator|=
name|opt
index|[
name|cur
operator|-
name|litlen
index|]
operator|.
name|price
operator|+
name|ZSTD_getLiteralPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|inr
operator|-
name|litlen
argument_list|)
expr_stmt|;
block|}
else|else
name|price
operator|=
name|ZSTD_getLiteralPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|litlen
operator|=
literal|1
expr_stmt|;
name|price
operator|=
name|opt
index|[
name|cur
operator|-
literal|1
index|]
operator|.
name|price
operator|+
name|ZSTD_getLiteralPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|inr
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|>
name|last_pos
operator|||
name|price
operator|<=
name|opt
index|[
name|cur
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|cur
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|==
name|last_pos
condition|)
break|break;
if|if
condition|(
name|inr
operator|>
name|ilimit
condition|)
comment|/* last match must start at a minimum distance of 8 from oend */
continue|continue;
name|mlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
expr_stmt|;
if|if
condition|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|>
name|ZSTD_REP_MOVE_OPT
condition|)
block|{
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|2
index|]
operator|=
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|1
index|]
operator|=
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|0
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|-
name|ZSTD_REP_MOVE_OPT
expr_stmt|;
block|}
else|else
block|{
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|2
index|]
operator|=
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|>
literal|1
operator|)
condition|?
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|1
index|]
else|:
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|2
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|1
index|]
operator|=
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|>
literal|0
operator|)
condition|?
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|0
index|]
else|:
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
operator|&&
operator|(
name|mlen
operator|!=
literal|1
operator|)
operator|)
condition|?
operator|(
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
operator|(
name|opt
index|[
name|cur
operator|-
name|mlen
index|]
operator|.
name|rep
index|[
name|opt
index|[
name|cur
index|]
operator|.
name|off
index|]
operator|)
expr_stmt|;
block|}
name|best_mlen
operator|=
name|minMatch
expr_stmt|;
block|{
name|U32
name|i
decl_stmt|,
name|last_i
init|=
name|ZSTD_REP_CHECK
operator|+
operator|(
name|mlen
operator|!=
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|i
operator|=
operator|(
name|mlen
operator|!=
literal|1
operator|)
init|;
name|i
operator|<
name|last_i
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|S32
name|repCur
init|=
operator|(
name|i
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
condition|?
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
name|opt
index|[
name|cur
index|]
operator|.
name|rep
index|[
name|i
index|]
decl_stmt|;
specifier|const
name|U32
name|repIndex
init|=
call|(
name|U32
call|)
argument_list|(
name|current
operator|+
name|cur
operator|-
name|repCur
argument_list|)
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|repBase
init|=
name|repIndex
operator|<
name|dictLimit
condition|?
name|dictBase
else|:
name|base
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|repMatch
init|=
name|repBase
operator|+
name|repIndex
decl_stmt|;
if|if
condition|(
operator|(
name|repCur
operator|>
literal|0
operator|&&
name|repCur
operator|<=
call|(
name|S32
call|)
argument_list|(
name|current
operator|+
name|cur
argument_list|)
operator|)
operator|&&
operator|(
operator|(
call|(
name|U32
call|)
argument_list|(
operator|(
name|dictLimit
operator|-
literal|1
operator|)
operator|-
name|repIndex
argument_list|)
operator|>=
literal|3
operator|)
operator|&
operator|(
name|repIndex
operator|>
name|lowestIndex
operator|)
operator|)
comment|/* intentional overflow */
operator|&&
operator|(
name|ZSTD_readMINMATCH
argument_list|(
name|inr
argument_list|,
name|minMatch
argument_list|)
operator|==
name|ZSTD_readMINMATCH
argument_list|(
name|repMatch
argument_list|,
name|minMatch
argument_list|)
operator|)
condition|)
block|{
comment|/* repcode detected */
specifier|const
name|BYTE
modifier|*
specifier|const
name|repEnd
init|=
name|repIndex
operator|<
name|dictLimit
condition|?
name|dictEnd
else|:
name|iend
decl_stmt|;
name|mlen
operator|=
operator|(
name|U32
operator|)
name|ZSTD_count_2segments
argument_list|(
name|inr
operator|+
name|minMatch
argument_list|,
name|repMatch
operator|+
name|minMatch
argument_list|,
name|iend
argument_list|,
name|repEnd
argument_list|,
name|prefixStart
argument_list|)
operator|+
name|minMatch
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|sufficient_len
operator|||
name|cur
operator|+
name|mlen
operator|>=
name|ZSTD_OPT_NUM
condition|)
block|{
name|best_mlen
operator|=
name|mlen
expr_stmt|;
name|best_off
operator|=
name|i
expr_stmt|;
name|last_pos
operator|=
name|cur
operator|+
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
name|best_off
operator|=
name|i
operator|-
operator|(
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|!=
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|best_mlen
condition|)
name|best_mlen
operator|=
name|mlen
expr_stmt|;
do|do
block|{
if|if
condition|(
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|==
literal|1
condition|)
block|{
name|litlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|litlen
expr_stmt|;
if|if
condition|(
name|cur
operator|>
name|litlen
condition|)
block|{
name|price
operator|=
name|opt
index|[
name|cur
operator|-
name|litlen
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|inr
operator|-
name|litlen
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
else|else
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|litlen
operator|=
literal|0
expr_stmt|;
name|price
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|best_off
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|+
name|mlen
operator|>
name|last_pos
operator|||
name|price
operator|<=
name|opt
index|[
name|cur
operator|+
name|mlen
index|]
operator|.
name|price
condition|)
name|SET_PRICE
argument_list|(
name|cur
operator|+
name|mlen
argument_list|,
name|mlen
argument_list|,
name|i
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
name|mlen
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|mlen
operator|>=
name|minMatch
condition|)
do|;
block|}
block|}
block|}
name|match_num
operator|=
name|ZSTD_BtGetAllMatches_selectMLS_extDict
argument_list|(
name|ctx
argument_list|,
name|inr
argument_list|,
name|iend
argument_list|,
name|maxSearches
argument_list|,
name|mls
argument_list|,
name|matches
argument_list|,
name|minMatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|match_num
operator|>
literal|0
operator|&&
operator|(
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>
name|sufficient_len
operator|||
name|cur
operator|+
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
operator|>=
name|ZSTD_OPT_NUM
operator|)
condition|)
block|{
name|best_mlen
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|len
expr_stmt|;
name|best_off
operator|=
name|matches
index|[
name|match_num
operator|-
literal|1
index|]
operator|.
name|off
expr_stmt|;
name|last_pos
operator|=
name|cur
operator|+
literal|1
expr_stmt|;
goto|goto
name|_storeSequence
goto|;
block|}
comment|/* set prices using matches at position = cur */
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<
name|match_num
condition|;
name|u
operator|++
control|)
block|{
name|mlen
operator|=
operator|(
name|u
operator|>
literal|0
operator|)
condition|?
name|matches
index|[
name|u
operator|-
literal|1
index|]
operator|.
name|len
operator|+
literal|1
else|:
name|best_mlen
expr_stmt|;
name|best_mlen
operator|=
name|matches
index|[
name|u
index|]
operator|.
name|len
expr_stmt|;
while|while
condition|(
name|mlen
operator|<=
name|best_mlen
condition|)
block|{
if|if
condition|(
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|==
literal|1
condition|)
block|{
name|litlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|litlen
expr_stmt|;
if|if
condition|(
name|cur
operator|>
name|litlen
condition|)
name|price
operator|=
name|opt
index|[
name|cur
operator|-
name|litlen
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|ip
operator|+
name|cur
operator|-
name|litlen
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
else|else
name|price
operator|=
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
name|litlen
argument_list|,
name|anchor
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|litlen
operator|=
literal|0
expr_stmt|;
name|price
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|price
operator|+
name|ZSTD_getPrice
argument_list|(
name|optStatePtr
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
operator|-
literal|1
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|,
name|ultra
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|+
name|mlen
operator|>
name|last_pos
operator|||
operator|(
name|price
operator|<
name|opt
index|[
name|cur
operator|+
name|mlen
index|]
operator|.
name|price
operator|)
condition|)
name|SET_PRICE
argument_list|(
name|cur
operator|+
name|mlen
argument_list|,
name|mlen
argument_list|,
name|matches
index|[
name|u
index|]
operator|.
name|off
argument_list|,
name|litlen
argument_list|,
name|price
argument_list|)
expr_stmt|;
name|mlen
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/* for (cur = 1; cur<= last_pos; cur++) */
name|best_mlen
operator|=
name|opt
index|[
name|last_pos
index|]
operator|.
name|mlen
expr_stmt|;
name|best_off
operator|=
name|opt
index|[
name|last_pos
index|]
operator|.
name|off
expr_stmt|;
name|cur
operator|=
name|last_pos
operator|-
name|best_mlen
expr_stmt|;
comment|/* store sequence */
name|_storeSequence
label|:
comment|/* cur, last_pos, best_mlen, best_off have to be set */
name|opt
index|[
literal|0
index|]
operator|.
name|mlen
operator|=
literal|1
expr_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|mlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
expr_stmt|;
name|offset
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|off
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
operator|=
name|best_mlen
expr_stmt|;
name|opt
index|[
name|cur
index|]
operator|.
name|off
operator|=
name|best_off
expr_stmt|;
name|best_mlen
operator|=
name|mlen
expr_stmt|;
name|best_off
operator|=
name|offset
expr_stmt|;
if|if
condition|(
name|mlen
operator|>
name|cur
condition|)
break|break;
name|cur
operator|-=
name|mlen
expr_stmt|;
block|}
for|for
control|(
name|u
operator|=
literal|0
init|;
name|u
operator|<=
name|last_pos
condition|;
control|)
block|{
name|u
operator|+=
name|opt
index|[
name|u
index|]
operator|.
name|mlen
expr_stmt|;
block|}
for|for
control|(
name|cur
operator|=
literal|0
init|;
name|cur
operator|<
name|last_pos
condition|;
control|)
block|{
name|mlen
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|mlen
expr_stmt|;
if|if
condition|(
name|mlen
operator|==
literal|1
condition|)
block|{
name|ip
operator|++
expr_stmt|;
name|cur
operator|++
expr_stmt|;
continue|continue;
block|}
name|offset
operator|=
name|opt
index|[
name|cur
index|]
operator|.
name|off
expr_stmt|;
name|cur
operator|+=
name|mlen
expr_stmt|;
name|litLength
operator|=
call|(
name|U32
call|)
argument_list|(
name|ip
operator|-
name|anchor
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|>
name|ZSTD_REP_MOVE_OPT
condition|)
block|{
name|rep
index|[
literal|2
index|]
operator|=
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|rep
index|[
literal|1
index|]
operator|=
name|rep
index|[
literal|0
index|]
expr_stmt|;
name|rep
index|[
literal|0
index|]
operator|=
name|offset
operator|-
name|ZSTD_REP_MOVE_OPT
expr_stmt|;
name|offset
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|best_off
operator|=
operator|(
name|offset
operator|==
name|ZSTD_REP_MOVE_OPT
operator|)
condition|?
operator|(
name|rep
index|[
literal|0
index|]
operator|-
literal|1
operator|)
else|:
operator|(
name|rep
index|[
name|offset
index|]
operator|)
expr_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|1
condition|)
name|rep
index|[
literal|2
index|]
operator|=
name|rep
index|[
literal|1
index|]
expr_stmt|;
name|rep
index|[
literal|1
index|]
operator|=
name|rep
index|[
literal|0
index|]
expr_stmt|;
name|rep
index|[
literal|0
index|]
operator|=
name|best_off
expr_stmt|;
block|}
if|if
condition|(
name|litLength
operator|==
literal|0
condition|)
name|offset
operator|--
expr_stmt|;
block|}
name|ZSTD_updatePrice
argument_list|(
name|optStatePtr
argument_list|,
name|litLength
argument_list|,
name|anchor
argument_list|,
name|offset
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|)
expr_stmt|;
name|ZSTD_storeSeq
argument_list|(
name|seqStorePtr
argument_list|,
name|litLength
argument_list|,
name|anchor
argument_list|,
name|offset
argument_list|,
name|mlen
operator|-
name|MINMATCH
argument_list|)
expr_stmt|;
name|anchor
operator|=
name|ip
operator|=
name|ip
operator|+
name|mlen
expr_stmt|;
block|}
block|}
comment|/* for (cur=0; cur< last_pos; ) */
comment|/* Save reps for next block */
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ZSTD_REP_NUM
condition|;
name|i
operator|++
control|)
name|seqStorePtr
operator|->
name|repToConfirm
index|[
name|i
index|]
operator|=
name|rep
index|[
name|i
index|]
expr_stmt|;
block|}
comment|/* Last Literals */
block|{
name|size_t
name|lastLLSize
init|=
name|iend
operator|-
name|anchor
decl_stmt|;
name|memcpy
argument_list|(
name|seqStorePtr
operator|->
name|lit
argument_list|,
name|anchor
argument_list|,
name|lastLLSize
argument_list|)
expr_stmt|;
name|seqStorePtr
operator|->
name|lit
operator|+=
name|lastLLSize
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTD_OPT_H_91842398743 */
end_comment

end_unit

