begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTD_V04_H_91868324769238
end_ifndef

begin_define
define|#
directive|define
name|ZSTD_V04_H_91868324769238
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* ************************************* *  Includes ***************************************/
include|#
directive|include
file|<stddef.h>
comment|/* size_t */
comment|/* ************************************* *  Simple one-step function ***************************************/
comment|/** ZSTDv04_decompress() : decompress ZSTD frames compliant with v0.4.x format     compressedSize : is the exact source size     maxOriginalSize : is the size of the 'dst' buffer, which must be already allocated.                       It must be equal or larger than originalSize, otherwise decompression will fail.     return : the number of bytes decompressed into destination buffer (originalSize)              or an errorCode if it fails (which can be tested using ZSTDv01_isError()) */
name|size_t
name|ZSTDv04_decompress
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|maxOriginalSize
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/** ZSTDv04_getFrameSrcSize() : get the source length of a ZSTD frame compliant with v0.4.x format     compressedSize : The size of the 'src' buffer, at least as large as the frame pointed to by 'src'     return : the number of bytes that would be read to decompress this frame              or an errorCode if it fails (which can be tested using ZSTDv04_isError()) */
name|size_t
name|ZSTDv04_findFrameCompressedSize
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/** ZSTDv04_isError() : tells if the result of ZSTDv04_decompress() is an error */
name|unsigned
name|ZSTDv04_isError
parameter_list|(
name|size_t
name|code
parameter_list|)
function_decl|;
comment|/* ************************************* *  Advanced functions ***************************************/
typedef|typedef
name|struct
name|ZSTDv04_Dctx_s
name|ZSTDv04_Dctx
typedef|;
name|ZSTDv04_Dctx
modifier|*
name|ZSTDv04_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv04_freeDCtx
parameter_list|(
name|ZSTDv04_Dctx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv04_decompressDCtx
parameter_list|(
name|ZSTDv04_Dctx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|maxOriginalSize
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/* ************************************* *  Direct Streaming ***************************************/
name|size_t
name|ZSTDv04_resetDCtx
parameter_list|(
name|ZSTDv04_Dctx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv04_nextSrcSizeToDecompress
parameter_list|(
name|ZSTDv04_Dctx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv04_decompressContinue
parameter_list|(
name|ZSTDv04_Dctx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|maxDstSize
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/**   Use above functions alternatively.   ZSTD_nextSrcSizeToDecompress() tells how much bytes to provide as 'srcSize' to ZSTD_decompressContinue().   ZSTD_decompressContinue() will use previous data blocks to improve compression if they are located prior to current block.   Result is the number of bytes regenerated within 'dst'.   It can be zero, which is not an error; it just means ZSTD_decompressContinue() has decoded some header. */
comment|/* ************************************* *  Buffered Streaming ***************************************/
typedef|typedef
name|struct
name|ZBUFFv04_DCtx_s
name|ZBUFFv04_DCtx
typedef|;
name|ZBUFFv04_DCtx
modifier|*
name|ZBUFFv04_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv04_freeDCtx
parameter_list|(
name|ZBUFFv04_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv04_decompressInit
parameter_list|(
name|ZBUFFv04_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv04_decompressWithDictionary
parameter_list|(
name|ZBUFFv04_DCtx
modifier|*
name|dctx
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv04_decompressContinue
parameter_list|(
name|ZBUFFv04_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
modifier|*
name|maxDstSizePtr
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
modifier|*
name|srcSizePtr
parameter_list|)
function_decl|;
comment|/** ************************************************ *  Streaming decompression * *  A ZBUFF_DCtx object is required to track streaming operation. *  Use ZBUFF_createDCtx() and ZBUFF_freeDCtx() to create/release resources. *  Use ZBUFF_decompressInit() to start a new decompression operation. *  ZBUFF_DCtx objects can be reused multiple times. * *  Optionally, a reference to a static dictionary can be set, using ZBUFF_decompressWithDictionary() *  It must be the same content as the one set during compression phase. *  Dictionary content must remain accessible during the decompression process. * *  Use ZBUFF_decompressContinue() repetitively to consume your input. *  *srcSizePtr and *maxDstSizePtr can be any size. *  The function will report how many bytes were read or written by modifying *srcSizePtr and *maxDstSizePtr. *  Note that it may not consume the entire input, in which case it's up to the caller to present remaining input again. *  The content of dst will be overwritten (up to *maxDstSizePtr) at each function call, so save its content if it matters or change dst. *  @return : a hint to preferred nb of bytes to use as input for next function call (it's only a hint, to improve latency) *            or 0 when a frame is completely decoded *            or an error code, which can be tested using ZBUFF_isError(). * *  Hint : recommended buffer sizes (not compulsory) : ZBUFF_recommendedDInSize / ZBUFF_recommendedDOutSize *  output : ZBUFF_recommendedDOutSize==128 KB block size is the internal unit, it ensures it's always possible to write a full block when it's decoded. *  input : ZBUFF_recommendedDInSize==128Kb+3; just follow indications from ZBUFF_decompressContinue() to minimize latency. It should always be<= 128 KB + 3 . * **************************************************/
name|unsigned
name|ZBUFFv04_isError
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|ZBUFFv04_getErrorName
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
comment|/** The below functions provide recommended buffer sizes for Compression or Decompression operations. *   These sizes are not compulsory, they just tend to offer better latency */
name|size_t
name|ZBUFFv04_recommendedDInSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv04_recommendedDOutSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* ************************************* *  Prefix - version detection ***************************************/
define|#
directive|define
name|ZSTDv04_magicNumber
value|0xFD2FB524
comment|/* v0.4 */
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTD_V04_H_91868324769238 */
end_comment

end_unit

