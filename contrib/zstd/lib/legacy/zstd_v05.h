begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTDv05_H
end_ifndef

begin_define
define|#
directive|define
name|ZSTDv05_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*-************************************* *  Dependencies ***************************************/
include|#
directive|include
file|<stddef.h>
comment|/* size_t */
include|#
directive|include
file|"mem.h"
comment|/* U64, U32 */
comment|/* ************************************* *  Simple functions ***************************************/
comment|/*! ZSTDv05_decompress() :     `compressedSize` : is the _exact_ size of the compressed blob, otherwise decompression will fail.     `dstCapacity` must be large enough, equal or larger than originalSize.     @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),               or an errorCode if it fails (which can be tested using ZSTDv05_isError()) */
name|size_t
name|ZSTDv05_decompress
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/** ZSTDv05_getFrameSrcSize() : get the source length of a ZSTD frame     compressedSize : The size of the 'src' buffer, at least as large as the frame pointed to by 'src'     return : the number of bytes that would be read to decompress this frame              or an errorCode if it fails (which can be tested using ZSTDv05_isError()) */
name|size_t
name|ZSTDv05_findFrameCompressedSize
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/* ************************************* *  Helper functions ***************************************/
comment|/* Error Management */
name|unsigned
name|ZSTDv05_isError
parameter_list|(
name|size_t
name|code
parameter_list|)
function_decl|;
comment|/*!< tells if a `size_t` function result is an error code */
specifier|const
name|char
modifier|*
name|ZSTDv05_getErrorName
parameter_list|(
name|size_t
name|code
parameter_list|)
function_decl|;
comment|/*!< provides readable string for an error code */
comment|/* ************************************* *  Explicit memory management ***************************************/
comment|/** Decompression context */
typedef|typedef
name|struct
name|ZSTDv05_DCtx_s
name|ZSTDv05_DCtx
typedef|;
name|ZSTDv05_DCtx
modifier|*
name|ZSTDv05_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv05_freeDCtx
parameter_list|(
name|ZSTDv05_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
comment|/*!< @return : errorCode */
comment|/** ZSTDv05_decompressDCtx() : *   Same as ZSTDv05_decompress(), but requires an already allocated ZSTDv05_DCtx (see ZSTDv05_createDCtx()) */
name|size_t
name|ZSTDv05_decompressDCtx
parameter_list|(
name|ZSTDv05_DCtx
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/*-*********************** *  Simple Dictionary API *************************/
comment|/*! ZSTDv05_decompress_usingDict() : *   Decompression using a pre-defined Dictionary content (see dictBuilder). *   Dictionary must be identical to the one used during compression, otherwise regenerated data will be corrupted. *   Note : dict can be NULL, in which case, it's equivalent to ZSTDv05_decompressDCtx() */
name|size_t
name|ZSTDv05_decompress_usingDict
parameter_list|(
name|ZSTDv05_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
comment|/*-************************ *  Advanced Streaming API ***************************/
typedef|typedef
enum|enum
block|{
name|ZSTDv05_fast
block|,
name|ZSTDv05_greedy
block|,
name|ZSTDv05_lazy
block|,
name|ZSTDv05_lazy2
block|,
name|ZSTDv05_btlazy2
block|,
name|ZSTDv05_opt
block|,
name|ZSTDv05_btopt
block|}
name|ZSTDv05_strategy
typedef|;
typedef|typedef
struct|struct
block|{
name|U64
name|srcSize
decl_stmt|;
name|U32
name|windowLog
decl_stmt|;
comment|/* the only useful information to retrieve */
name|U32
name|contentLog
decl_stmt|;
name|U32
name|hashLog
decl_stmt|;
name|U32
name|searchLog
decl_stmt|;
name|U32
name|searchLength
decl_stmt|;
name|U32
name|targetLength
decl_stmt|;
name|ZSTDv05_strategy
name|strategy
decl_stmt|;
block|}
name|ZSTDv05_parameters
typedef|;
name|size_t
name|ZSTDv05_getFrameParams
parameter_list|(
name|ZSTDv05_parameters
modifier|*
name|params
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv05_decompressBegin_usingDict
parameter_list|(
name|ZSTDv05_DCtx
modifier|*
name|dctx
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
name|void
name|ZSTDv05_copyDCtx
parameter_list|(
name|ZSTDv05_DCtx
modifier|*
name|dstDCtx
parameter_list|,
specifier|const
name|ZSTDv05_DCtx
modifier|*
name|srcDCtx
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv05_nextSrcSizeToDecompress
parameter_list|(
name|ZSTDv05_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZSTDv05_decompressContinue
parameter_list|(
name|ZSTDv05_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/*-*********************** *  ZBUFF API *************************/
typedef|typedef
name|struct
name|ZBUFFv05_DCtx_s
name|ZBUFFv05_DCtx
typedef|;
name|ZBUFFv05_DCtx
modifier|*
name|ZBUFFv05_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv05_freeDCtx
parameter_list|(
name|ZBUFFv05_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv05_decompressInit
parameter_list|(
name|ZBUFFv05_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv05_decompressInitDictionary
parameter_list|(
name|ZBUFFv05_DCtx
modifier|*
name|dctx
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv05_decompressContinue
parameter_list|(
name|ZBUFFv05_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
modifier|*
name|dstCapacityPtr
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
modifier|*
name|srcSizePtr
parameter_list|)
function_decl|;
comment|/*-*************************************************************************** *  Streaming decompression * *  A ZBUFFv05_DCtx object is required to track streaming operations. *  Use ZBUFFv05_createDCtx() and ZBUFFv05_freeDCtx() to create/release resources. *  Use ZBUFFv05_decompressInit() to start a new decompression operation, *   or ZBUFFv05_decompressInitDictionary() if decompression requires a dictionary. *  Note that ZBUFFv05_DCtx objects can be reused multiple times. * *  Use ZBUFFv05_decompressContinue() repetitively to consume your input. *  *srcSizePtr and *dstCapacityPtr can be any size. *  The function will report how many bytes were read or written by modifying *srcSizePtr and *dstCapacityPtr. *  Note that it may not consume the entire input, in which case it's up to the caller to present remaining input again. *  The content of @dst will be overwritten (up to *dstCapacityPtr) at each function call, so save its content if it matters or change @dst. *  @return : a hint to preferred nb of bytes to use as input for next function call (it's only a hint, to help latency) *            or 0 when a frame is completely decoded *            or an error code, which can be tested using ZBUFFv05_isError(). * *  Hint : recommended buffer sizes (not compulsory) : ZBUFFv05_recommendedDInSize() / ZBUFFv05_recommendedDOutSize() *  output : ZBUFFv05_recommendedDOutSize==128 KB block size is the internal unit, it ensures it's always possible to write a full block when decoded. *  input  : ZBUFFv05_recommendedDInSize==128Kb+3; just follow indications from ZBUFFv05_decompressContinue() to minimize latency. It should always be<= 128 KB + 3 . * *******************************************************************************/
comment|/* ************************************* *  Tool functions ***************************************/
name|unsigned
name|ZBUFFv05_isError
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|ZBUFFv05_getErrorName
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
comment|/** Functions below provide recommended buffer sizes for Compression or Decompression operations. *   These sizes are just hints, and tend to offer better latency */
name|size_t
name|ZBUFFv05_recommendedDInSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|size_t
name|ZBUFFv05_recommendedDOutSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*-************************************* *  Constants ***************************************/
define|#
directive|define
name|ZSTDv05_MAGICNUMBER
value|0xFD2FB525
comment|/* v0.5 */
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTDv0505_H */
end_comment

end_unit

