begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTDv07_H_235446
end_ifndef

begin_define
define|#
directive|define
name|ZSTDv07_H_235446
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*======  Dependency  ======*/
include|#
directive|include
file|<stddef.h>
comment|/* size_t */
comment|/*======  Export for Windows  ======*/
comment|/*! *  ZSTDv07_DLL_EXPORT : *  Enable exporting of functions when building a Windows DLL */
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
name|defined
argument_list|(
name|ZSTDv07_DLL_EXPORT
argument_list|)
operator|&&
operator|(
name|ZSTDv07_DLL_EXPORT
operator|==
literal|1
operator|)
define|#
directive|define
name|ZSTDLIBv07_API
value|__declspec(dllexport)
else|#
directive|else
define|#
directive|define
name|ZSTDLIBv07_API
endif|#
directive|endif
comment|/* ************************************* *  Simple API ***************************************/
comment|/*! ZSTDv07_getDecompressedSize() : *   @return : decompressed size if known, 0 otherwise.        note 1 : if `0`, follow up with ZSTDv07_getFrameParams() to know precise failure cause.        note 2 : decompressed size could be wrong or intentionally modified !                 always ensure results fit within application's authorized limits */
name|unsigned
name|long
name|long
name|ZSTDv07_getDecompressedSize
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/*! ZSTDv07_decompress() :     `compressedSize` : must be _exact_ size of compressed input, otherwise decompression will fail.     `dstCapacity` must be equal or larger than originalSize.     @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),               or an errorCode if it fails (which can be tested using ZSTDv07_isError()) */
name|ZSTDLIBv07_API
name|size_t
name|ZSTDv07_decompress
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/** ZSTDv07_getFrameSrcSize() : get the source length of a ZSTD frame     compressedSize : The size of the 'src' buffer, at least as large as the frame pointed to by 'src'     return : the number of bytes that would be read to decompress this frame              or an errorCode if it fails (which can be tested using ZSTDv07_isError()) */
name|size_t
name|ZSTDv07_findFrameCompressedSize
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/*======  Helper functions  ======*/
name|ZSTDLIBv07_API
name|unsigned
name|ZSTDv07_isError
parameter_list|(
name|size_t
name|code
parameter_list|)
function_decl|;
comment|/*!< tells if a `size_t` function result is an error code */
name|ZSTDLIBv07_API
specifier|const
name|char
modifier|*
name|ZSTDv07_getErrorName
parameter_list|(
name|size_t
name|code
parameter_list|)
function_decl|;
comment|/*!< provides readable string from an error code */
comment|/*-************************************* *  Explicit memory management ***************************************/
comment|/** Decompression context */
typedef|typedef
name|struct
name|ZSTDv07_DCtx_s
name|ZSTDv07_DCtx
typedef|;
name|ZSTDLIBv07_API
name|ZSTDv07_DCtx
modifier|*
name|ZSTDv07_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
name|size_t
name|ZSTDv07_freeDCtx
parameter_list|(
name|ZSTDv07_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
comment|/*!< @return : errorCode */
comment|/** ZSTDv07_decompressDCtx() : *   Same as ZSTDv07_decompress(), requires an allocated ZSTDv07_DCtx (see ZSTDv07_createDCtx()) */
name|ZSTDLIBv07_API
name|size_t
name|ZSTDv07_decompressDCtx
parameter_list|(
name|ZSTDv07_DCtx
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/*-************************ *  Simple dictionary API ***************************/
comment|/*! ZSTDv07_decompress_usingDict() : *   Decompression using a pre-defined Dictionary content (see dictBuilder). *   Dictionary must be identical to the one used during compression. *   Note : This function load the dictionary, resulting in a significant startup time */
name|ZSTDLIBv07_API
name|size_t
name|ZSTDv07_decompress_usingDict
parameter_list|(
name|ZSTDv07_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
comment|/*-************************** *  Advanced Dictionary API ****************************/
comment|/*! ZSTDv07_createDDict() : *   Create a digested dictionary, ready to start decompression operation without startup delay. *   `dict` can be released after creation */
typedef|typedef
name|struct
name|ZSTDv07_DDict_s
name|ZSTDv07_DDict
typedef|;
name|ZSTDLIBv07_API
name|ZSTDv07_DDict
modifier|*
name|ZSTDv07_createDDict
parameter_list|(
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
name|size_t
name|ZSTDv07_freeDDict
parameter_list|(
name|ZSTDv07_DDict
modifier|*
name|ddict
parameter_list|)
function_decl|;
comment|/*! ZSTDv07_decompress_usingDDict() : *   Decompression using a pre-digested Dictionary *   Faster startup than ZSTDv07_decompress_usingDict(), recommended when same dictionary is used multiple times. */
name|ZSTDLIBv07_API
name|size_t
name|ZSTDv07_decompress_usingDDict
parameter_list|(
name|ZSTDv07_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|,
specifier|const
name|ZSTDv07_DDict
modifier|*
name|ddict
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
block|{
name|unsigned
name|long
name|long
name|frameContentSize
decl_stmt|;
name|unsigned
name|windowSize
decl_stmt|;
name|unsigned
name|dictID
decl_stmt|;
name|unsigned
name|checksumFlag
decl_stmt|;
block|}
name|ZSTDv07_frameParams
typedef|;
name|ZSTDLIBv07_API
name|size_t
name|ZSTDv07_getFrameParams
parameter_list|(
name|ZSTDv07_frameParams
modifier|*
name|fparamsPtr
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/**< doesn't consume input */
comment|/* ************************************* *  Streaming functions ***************************************/
typedef|typedef
name|struct
name|ZBUFFv07_DCtx_s
name|ZBUFFv07_DCtx
typedef|;
name|ZSTDLIBv07_API
name|ZBUFFv07_DCtx
modifier|*
name|ZBUFFv07_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
name|size_t
name|ZBUFFv07_freeDCtx
parameter_list|(
name|ZBUFFv07_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
name|size_t
name|ZBUFFv07_decompressInit
parameter_list|(
name|ZBUFFv07_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
name|size_t
name|ZBUFFv07_decompressInitDictionary
parameter_list|(
name|ZBUFFv07_DCtx
modifier|*
name|dctx
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
name|size_t
name|ZBUFFv07_decompressContinue
parameter_list|(
name|ZBUFFv07_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
modifier|*
name|dstCapacityPtr
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
modifier|*
name|srcSizePtr
parameter_list|)
function_decl|;
comment|/*-*************************************************************************** *  Streaming decompression howto * *  A ZBUFFv07_DCtx object is required to track streaming operations. *  Use ZBUFFv07_createDCtx() and ZBUFFv07_freeDCtx() to create/release resources. *  Use ZBUFFv07_decompressInit() to start a new decompression operation, *   or ZBUFFv07_decompressInitDictionary() if decompression requires a dictionary. *  Note that ZBUFFv07_DCtx objects can be re-init multiple times. * *  Use ZBUFFv07_decompressContinue() repetitively to consume your input. *  *srcSizePtr and *dstCapacityPtr can be any size. *  The function will report how many bytes were read or written by modifying *srcSizePtr and *dstCapacityPtr. *  Note that it may not consume the entire input, in which case it's up to the caller to present remaining input again. *  The content of `dst` will be overwritten (up to *dstCapacityPtr) at each function call, so save its content if it matters, or change `dst`. *  @return : a hint to preferred nb of bytes to use as input for next function call (it's only a hint, to help latency), *            or 0 when a frame is completely decoded, *            or an error code, which can be tested using ZBUFFv07_isError(). * *  Hint : recommended buffer sizes (not compulsory) : ZBUFFv07_recommendedDInSize() and ZBUFFv07_recommendedDOutSize() *  output : ZBUFFv07_recommendedDOutSize== 128 KB block size is the internal unit, it ensures it's always possible to write a full block when decoded. *  input  : ZBUFFv07_recommendedDInSize == 128KB + 3; *           just follow indications from ZBUFFv07_decompressContinue() to minimize latency. It should always be<= 128 KB + 3 . * *******************************************************************************/
comment|/* ************************************* *  Tool functions ***************************************/
name|ZSTDLIBv07_API
name|unsigned
name|ZBUFFv07_isError
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
specifier|const
name|char
modifier|*
name|ZBUFFv07_getErrorName
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
comment|/** Functions below provide recommended buffer sizes for Compression or Decompression operations. *   These sizes are just hints, they tend to offer better latency */
name|ZSTDLIBv07_API
name|size_t
name|ZBUFFv07_recommendedDInSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIBv07_API
name|size_t
name|ZBUFFv07_recommendedDOutSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*-************************************* *  Constants ***************************************/
define|#
directive|define
name|ZSTDv07_MAGICNUMBER
value|0xFD2FB527
comment|/* v0.7 */
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTDv07_H_235446 */
end_comment

end_unit

