begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2016 Tino Reichardt  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  *  * You can contact the author at:  * - zstdmt source repository: https://github.com/mcmilk/zstdmt  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|THREADING_H_938743
end_ifndef

begin_define
define|#
directive|define
name|THREADING_H_938743
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ZSTD_MULTITHREAD
argument_list|)
operator|&&
name|defined
argument_list|(
name|_WIN32
argument_list|)
comment|/**  * Windows minimalist Pthread Wrapper, based on :  * http://www.cse.wustl.edu/~schmidt/win32-cv-1.html  */
ifdef|#
directive|ifdef
name|WINVER
undef|#
directive|undef
name|WINVER
endif|#
directive|endif
define|#
directive|define
name|WINVER
value|0x0600
ifdef|#
directive|ifdef
name|_WIN32_WINNT
undef|#
directive|undef
name|_WIN32_WINNT
endif|#
directive|endif
define|#
directive|define
name|_WIN32_WINNT
value|0x0600
ifndef|#
directive|ifndef
name|WIN32_LEAN_AND_MEAN
define|#
directive|define
name|WIN32_LEAN_AND_MEAN
endif|#
directive|endif
include|#
directive|include
file|<windows.h>
comment|/* mutex */
define|#
directive|define
name|pthread_mutex_t
value|CRITICAL_SECTION
define|#
directive|define
name|pthread_mutex_init
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(InitializeCriticalSection((a)), 0)
define|#
directive|define
name|pthread_mutex_destroy
parameter_list|(
name|a
parameter_list|)
value|DeleteCriticalSection((a))
define|#
directive|define
name|pthread_mutex_lock
parameter_list|(
name|a
parameter_list|)
value|EnterCriticalSection((a))
define|#
directive|define
name|pthread_mutex_unlock
parameter_list|(
name|a
parameter_list|)
value|LeaveCriticalSection((a))
comment|/* condition variable */
define|#
directive|define
name|pthread_cond_t
value|CONDITION_VARIABLE
define|#
directive|define
name|pthread_cond_init
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(InitializeConditionVariable((a)), 0)
define|#
directive|define
name|pthread_cond_destroy
parameter_list|(
name|a
parameter_list|)
comment|/* No delete */
define|#
directive|define
name|pthread_cond_wait
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|SleepConditionVariableCS((a), (b), INFINITE)
define|#
directive|define
name|pthread_cond_signal
parameter_list|(
name|a
parameter_list|)
value|WakeConditionVariable((a))
define|#
directive|define
name|pthread_cond_broadcast
parameter_list|(
name|a
parameter_list|)
value|WakeAllConditionVariable((a))
comment|/* pthread_create() and pthread_join() */
typedef|typedef
struct|struct
block|{
name|HANDLE
name|handle
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|start_routine
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|arg
decl_stmt|;
block|}
name|pthread_t
typedef|;
name|int
name|pthread_create
parameter_list|(
name|pthread_t
modifier|*
name|thread
parameter_list|,
specifier|const
name|void
modifier|*
name|unused
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|start_routine
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
define|#
directive|define
name|pthread_join
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|_pthread_join(&(a), (b))
name|int
name|_pthread_join
parameter_list|(
name|pthread_t
modifier|*
name|thread
parameter_list|,
name|void
modifier|*
modifier|*
name|value_ptr
parameter_list|)
function_decl|;
comment|/**  * add here more wrappers as required  */
elif|#
directive|elif
name|defined
argument_list|(
name|ZSTD_MULTITHREAD
argument_list|)
comment|/* posix assumed ; need a better detection method */
comment|/* ===   POSIX Systems   === */
include|#
directive|include
file|<pthread.h>
else|#
directive|else
comment|/* ZSTD_MULTITHREAD not defined */
comment|/* No multithreading support */
define|#
directive|define
name|pthread_mutex_t
value|int
comment|/* #define rather than typedef, because sometimes pthread support is implicit, resulting in duplicated symbols */
define|#
directive|define
name|pthread_mutex_init
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((void)a, 0)
define|#
directive|define
name|pthread_mutex_destroy
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|pthread_mutex_lock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|pthread_mutex_unlock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|pthread_cond_t
value|int
define|#
directive|define
name|pthread_cond_init
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((void)a, 0)
define|#
directive|define
name|pthread_cond_destroy
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|pthread_cond_wait
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|#
directive|define
name|pthread_cond_signal
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|pthread_cond_broadcast
parameter_list|(
name|a
parameter_list|)
comment|/* do not use pthread_t */
endif|#
directive|endif
comment|/* ZSTD_MULTITHREAD */
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* THREADING_H_938743 */
end_comment

end_unit

