begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTD_ERRORS_H_398273423
end_ifndef

begin_define
define|#
directive|define
name|ZSTD_ERRORS_H_398273423
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*===== dependency =====*/
include|#
directive|include
file|<stddef.h>
comment|/* size_t */
comment|/* =====   ZSTDERRORLIB_API : control library symbols visibility   ===== */
ifndef|#
directive|ifndef
name|ZSTDERRORLIB_VISIBILITY
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
define|#
directive|define
name|ZSTDERRORLIB_VISIBILITY
value|__attribute__ ((visibility ("default")))
else|#
directive|else
define|#
directive|define
name|ZSTDERRORLIB_VISIBILITY
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ZSTD_DLL_EXPORT
argument_list|)
operator|&&
operator|(
name|ZSTD_DLL_EXPORT
operator|==
literal|1
operator|)
define|#
directive|define
name|ZSTDERRORLIB_API
value|__declspec(dllexport) ZSTDERRORLIB_VISIBILITY
elif|#
directive|elif
name|defined
argument_list|(
name|ZSTD_DLL_IMPORT
argument_list|)
operator|&&
operator|(
name|ZSTD_DLL_IMPORT
operator|==
literal|1
operator|)
define|#
directive|define
name|ZSTDERRORLIB_API
value|__declspec(dllimport) ZSTDERRORLIB_VISIBILITY
comment|/* It isn't required but allows to generate better code, saving a function pointer load from the IAT and an indirect jump.*/
else|#
directive|else
define|#
directive|define
name|ZSTDERRORLIB_API
value|ZSTDERRORLIB_VISIBILITY
endif|#
directive|endif
comment|/*-****************************************  *  error codes list  *  note : this API is still considered unstable  *         and shall not be used with a dynamic library.  *         only static linking is allowed  ******************************************/
typedef|typedef
enum|enum
block|{
name|ZSTD_error_no_error
init|=
literal|0
block|,
name|ZSTD_error_GENERIC
init|=
literal|1
block|,
name|ZSTD_error_prefix_unknown
init|=
literal|10
block|,
name|ZSTD_error_version_unsupported
init|=
literal|12
block|,
name|ZSTD_error_frameParameter_unsupported
init|=
literal|14
block|,
name|ZSTD_error_frameParameter_windowTooLarge
init|=
literal|16
block|,
name|ZSTD_error_corruption_detected
init|=
literal|20
block|,
name|ZSTD_error_checksum_wrong
init|=
literal|22
block|,
name|ZSTD_error_dictionary_corrupted
init|=
literal|30
block|,
name|ZSTD_error_dictionary_wrong
init|=
literal|32
block|,
name|ZSTD_error_dictionaryCreation_failed
init|=
literal|34
block|,
name|ZSTD_error_parameter_unsupported
init|=
literal|40
block|,
name|ZSTD_error_parameter_outOfBound
init|=
literal|42
block|,
name|ZSTD_error_tableLog_tooLarge
init|=
literal|44
block|,
name|ZSTD_error_maxSymbolValue_tooLarge
init|=
literal|46
block|,
name|ZSTD_error_maxSymbolValue_tooSmall
init|=
literal|48
block|,
name|ZSTD_error_stage_wrong
init|=
literal|60
block|,
name|ZSTD_error_init_missing
init|=
literal|62
block|,
name|ZSTD_error_memory_allocation
init|=
literal|64
block|,
name|ZSTD_error_dstSize_tooSmall
init|=
literal|70
block|,
name|ZSTD_error_srcSize_wrong
init|=
literal|72
block|,
name|ZSTD_error_frameIndex_tooLarge
init|=
literal|100
block|,
name|ZSTD_error_seekableIO
init|=
literal|102
block|,
name|ZSTD_error_maxCode
init|=
literal|120
comment|/* never EVER use this value directly, it may change in future versions! Use ZSTD_isError() instead */
block|}
name|ZSTD_ErrorCode
typedef|;
comment|/*! ZSTD_getErrorCode() :     convert a `size_t` function result into a `ZSTD_ErrorCode` enum type,     which can be used to compare with enum list published above */
name|ZSTDERRORLIB_API
name|ZSTD_ErrorCode
name|ZSTD_getErrorCode
parameter_list|(
name|size_t
name|functionResult
parameter_list|)
function_decl|;
name|ZSTDERRORLIB_API
specifier|const
name|char
modifier|*
name|ZSTD_getErrorString
parameter_list|(
name|ZSTD_ErrorCode
name|code
parameter_list|)
function_decl|;
comment|/**< Same as ZSTD_getErrorName, but using a `ZSTD_ErrorCode` enum argument */
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTD_ERRORS_H_398273423 */
end_comment

end_unit

