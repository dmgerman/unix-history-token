begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * platform.h - compiler and OS detection  *  * Copyright (c) 2016-present, Przemyslaw Skibinski, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|PLATFORM_H_MODULE
end_ifndef

begin_define
define|#
directive|define
name|PLATFORM_H_MODULE
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* ************************************** *  Compiler Options ****************************************/
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
define|#
directive|define
name|_CRT_SECURE_NO_WARNINGS
comment|/* Disable Visual Studio warning messages for fopen, strncpy, strerror */
define|#
directive|define
name|_CRT_SECURE_NO_DEPRECATE
comment|/* VS2005 - must be declared before<io.h> and<windows.h> */
if|#
directive|if
operator|(
name|_MSC_VER
operator|<=
literal|1800
operator|)
comment|/* (1800 = Visual Studio 2013) */
define|#
directive|define
name|snprintf
value|sprintf_s
comment|/* snprintf unsupported by Visual<= 2013 */
endif|#
directive|endif
endif|#
directive|endif
comment|/* ************************************** *  Detect 64-bit OS *  http://nadeausoftware.com/articles/2012/02/c_c_tip_how_detect_processor_type_using_compiler_predefined_macros ****************************************/
if|#
directive|if
name|defined
name|__ia64
operator|||
name|defined
name|_M_IA64
comment|/* Intel Itanium */
expr|\
operator|||
name|defined
name|__powerpc64__
operator|||
name|defined
name|__ppc64__
operator|||
name|defined
name|__PPC64__
comment|/* POWER 64-bit */
expr|\
operator|||
operator|(
name|defined
name|__sparc
operator|&&
operator|(
name|defined
name|__sparcv9
operator|||
name|defined
name|__sparc_v9__
operator|||
name|defined
name|__arch64__
operator|)
operator|)
operator|||
name|defined
name|__sparc64__
comment|/* SPARC 64-bit */
expr|\
operator|||
name|defined
name|__x86_64__s
operator|||
name|defined
name|_M_X64
comment|/* x86 64-bit */
expr|\
operator|||
name|defined
name|__arm64__
operator|||
name|defined
name|__aarch64__
operator|||
name|defined
name|__ARM64_ARCH_8__
comment|/* ARM 64-bit */
expr|\
operator|||
operator|(
name|defined
name|__mips
operator|&&
operator|(
name|__mips
operator|==
literal|64
operator|||
name|__mips
operator|==
literal|4
operator|||
name|__mips
operator|==
literal|3
operator|)
operator|)
comment|/* MIPS 64-bit */
expr|\
operator|||
name|defined
name|_LP64
operator|||
name|defined
name|__LP64__
comment|/* NetBSD, OpenBSD */
operator|||
name|defined
name|__64BIT__
comment|/* AIX */
operator|||
name|defined
name|_ADDR64
comment|/* Cray */
expr|\
operator|||
operator|(
name|defined
name|__SIZEOF_POINTER__
operator|&&
name|__SIZEOF_POINTER__
operator|==
literal|8
operator|)
comment|/* gcc */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__64BIT__
argument_list|)
define|#
directive|define
name|__64BIT__
value|1
endif|#
directive|endif
endif|#
directive|endif
comment|/* ********************************************************* *  Turn on Large Files support (>4GB) for 32-bit Linux/Unix ***********************************************************/
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__64BIT__
argument_list|)
operator|||
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
comment|/* No point defining Large file for 64 bit but MinGW-w64 requires it */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_FILE_OFFSET_BITS
argument_list|)
define|#
directive|define
name|_FILE_OFFSET_BITS
value|64
comment|/* turn off_t into a 64-bit type for ftello, fseeko */
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LARGEFILE_SOURCE
argument_list|)
comment|/* obsolete macro, replaced with _FILE_OFFSET_BITS */
define|#
directive|define
name|_LARGEFILE_SOURCE
value|1
comment|/* Large File Support extension (LFS) - fseeko, ftello */
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|||
name|defined
argument_list|(
name|__hpux
argument_list|)
define|#
directive|define
name|_LARGE_FILES
comment|/* Large file support on 32-bits AIX and HP-UX */
endif|#
directive|endif
endif|#
directive|endif
comment|/* ************************************************************ *  Detect POSIX version *  PLATFORM_POSIX_VERSION = -1 for non-Unix e.g. Windows *  PLATFORM_POSIX_VERSION = 0 for Unix-like non-POSIX *  PLATFORM_POSIX_VERSION>= 1 is equal to found _POSIX_VERSION ***************************************************************/
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|__unix__
argument_list|)
operator|||
name|defined
argument_list|(
name|__unix
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__MACH__
argument_list|)
operator|)
comment|/* UNIX-like OS */
expr|\
operator|||
name|defined
argument_list|(
name|__midipix__
argument_list|)
operator|||
name|defined
argument_list|(
name|__VMS
argument_list|)
operator|)
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__MACH__
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|__SVR4
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|||
name|defined
argument_list|(
name|__hpux
argument_list|)
comment|/* POSIX.1â2001 (SUSv3) conformant */
expr|\
operator|||
name|defined
argument_list|(
name|__DragonFly__
argument_list|)
operator|||
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|||
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
operator|||
name|defined
argument_list|(
name|__OpenBSD__
argument_list|)
comment|/* BSD distros */
define|#
directive|define
name|PLATFORM_POSIX_VERSION
value|200112L
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|__linux__
argument_list|)
operator|||
name|defined
argument_list|(
name|__linux
argument_list|)
ifndef|#
directive|ifndef
name|_POSIX_C_SOURCE
define|#
directive|define
name|_POSIX_C_SOURCE
value|200112L
comment|/* use feature test macro */
endif|#
directive|endif
endif|#
directive|endif
include|#
directive|include
file|<unistd.h>
comment|/* declares _POSIX_VERSION */
if|#
directive|if
name|defined
argument_list|(
name|_POSIX_VERSION
argument_list|)
comment|/* POSIX compliant */
define|#
directive|define
name|PLATFORM_POSIX_VERSION
value|_POSIX_VERSION
else|#
directive|else
define|#
directive|define
name|PLATFORM_POSIX_VERSION
value|0
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PLATFORM_POSIX_VERSION
argument_list|)
define|#
directive|define
name|PLATFORM_POSIX_VERSION
value|-1
endif|#
directive|endif
comment|/*-********************************************* *  Detect if isatty() and fileno() are available ************************************************/
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__linux__
argument_list|)
operator|&&
operator|(
name|PLATFORM_POSIX_VERSION
operator|>=
literal|1
operator|)
operator|)
operator|||
operator|(
name|PLATFORM_POSIX_VERSION
operator|>=
literal|200112L
operator|)
operator|||
name|defined
argument_list|(
name|__DJGPP__
argument_list|)
include|#
directive|include
file|<unistd.h>
comment|/* isatty */
define|#
directive|define
name|IS_CONSOLE
parameter_list|(
name|stdStream
parameter_list|)
value|isatty(fileno(stdStream))
elif|#
directive|elif
name|defined
argument_list|(
name|MSDOS
argument_list|)
operator|||
name|defined
argument_list|(
name|OS2
argument_list|)
operator|||
name|defined
argument_list|(
name|__CYGWIN__
argument_list|)
include|#
directive|include
file|<io.h>
comment|/* _isatty */
define|#
directive|define
name|IS_CONSOLE
parameter_list|(
name|stdStream
parameter_list|)
value|_isatty(_fileno(stdStream))
elif|#
directive|elif
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|_WIN32
argument_list|)
include|#
directive|include
file|<io.h>
comment|/* _isatty */
include|#
directive|include
file|<windows.h>
comment|/* DeviceIoControl, HANDLE, FSCTL_SET_SPARSE */
include|#
directive|include
file|<stdio.h>
comment|/* FILE */
specifier|static
name|__inline
name|int
name|IS_CONSOLE
parameter_list|(
name|FILE
modifier|*
name|stdStream
parameter_list|)
block|{
name|DWORD
name|dummy
decl_stmt|;
return|return
name|_isatty
argument_list|(
name|_fileno
argument_list|(
name|stdStream
argument_list|)
argument_list|)
operator|&&
name|GetConsoleMode
argument_list|(
operator|(
name|HANDLE
operator|)
name|_get_osfhandle
argument_list|(
name|_fileno
argument_list|(
name|stdStream
argument_list|)
argument_list|)
argument_list|,
operator|&
name|dummy
argument_list|)
return|;
block|}
else|#
directive|else
define|#
directive|define
name|IS_CONSOLE
parameter_list|(
name|stdStream
parameter_list|)
value|0
endif|#
directive|endif
comment|/****************************** *  OS-specific Includes ******************************/
if|#
directive|if
name|defined
argument_list|(
name|MSDOS
argument_list|)
operator|||
name|defined
argument_list|(
name|OS2
argument_list|)
operator|||
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|_WIN32
argument_list|)
include|#
directive|include
file|<fcntl.h>
comment|/* _O_BINARY */
include|#
directive|include
file|<io.h>
comment|/* _setmode, _fileno, _get_osfhandle */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__DJGPP__
argument_list|)
include|#
directive|include
file|<windows.h>
comment|/* DeviceIoControl, HANDLE, FSCTL_SET_SPARSE */
include|#
directive|include
file|<winioctl.h>
comment|/* FSCTL_SET_SPARSE */
define|#
directive|define
name|SET_BINARY_MODE
parameter_list|(
name|file
parameter_list|)
value|{ int unused=_setmode(_fileno(file), _O_BINARY); (void)unused; }
define|#
directive|define
name|SET_SPARSE_FILE_MODE
parameter_list|(
name|file
parameter_list|)
value|{ DWORD dw; DeviceIoControl((HANDLE) _get_osfhandle(_fileno(file)), FSCTL_SET_SPARSE, 0, 0, 0, 0,&dw, 0); }
else|#
directive|else
define|#
directive|define
name|SET_BINARY_MODE
parameter_list|(
name|file
parameter_list|)
value|setmode(fileno(file), O_BINARY)
define|#
directive|define
name|SET_SPARSE_FILE_MODE
parameter_list|(
name|file
parameter_list|)
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|SET_BINARY_MODE
parameter_list|(
name|file
parameter_list|)
define|#
directive|define
name|SET_SPARSE_FILE_MODE
parameter_list|(
name|file
parameter_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ZSTD_SPARSE_DEFAULT
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__MACH__
argument_list|)
operator|)
define|#
directive|define
name|ZSTD_SPARSE_DEFAULT
value|0
else|#
directive|else
define|#
directive|define
name|ZSTD_SPARSE_DEFAULT
value|1
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* PLATFORM_H_MODULE */
end_comment

end_unit

