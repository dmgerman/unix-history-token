begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|"utils/WorkQueue.h"
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<thread>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|pzstd
block|{
comment|/// A simple thread pool that pulls tasks off its queue in FIFO order.
name|class
name|ThreadPool
block|{
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|thread
operator|>
name|threads_
expr_stmt|;
name|WorkQueue
operator|<
name|std
operator|::
name|function
operator|<
name|void
argument_list|()
operator|>>
name|tasks_
expr_stmt|;
name|public
label|:
comment|/// Constructs a thread pool with `numThreads` threads.
name|explicit
name|ThreadPool
argument_list|(
name|std
operator|::
name|size_t
name|numThreads
argument_list|)
block|{
name|threads_
operator|.
name|reserve
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
for|for
control|(
name|std
operator|::
name|size_t
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|threads_
operator|.
name|emplace_back
argument_list|(
index|[
name|this
index|]
block|{
name|std
operator|::
name|function
operator|<
name|void
argument_list|()
operator|>
name|task
block|;
while|while
condition|(
name|tasks_
operator|.
name|pop
argument_list|(
name|task
argument_list|)
condition|)
block|{
name|task
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/// Finishes all tasks currently in the queue.
operator|~
name|ThreadPool
argument_list|()
block|{
name|tasks_
operator|.
name|finish
argument_list|()
block|;
for|for
control|(
name|auto
operator|&
name|thread
operator|:
name|threads_
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Adds `task` to the queue of tasks to execute. Since `task` is a    * `std::function<>`, it cannot be a move only type. So any lambda passed must    * not capture move only types (like `std::unique_ptr`).    *    * @param task  The task to execute.    */
name|void
name|add
argument_list|(
argument|std::function<void()> task
argument_list|)
block|{
name|tasks_
operator|.
name|push
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|task
argument_list|)
argument_list|)
block|;   }
block|}
empty_stmt|;
block|}
end_decl_stmt

end_unit

