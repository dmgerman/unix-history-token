begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  */
end_comment

begin_comment
comment|/**  * A subset of `folly/Range.h`.  * All code copied verbatiam modulo formatting  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|"utils/Likely.h"
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<stdexcept>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|pzstd
block|{
name|namespace
name|detail
block|{
comment|/*  *Use IsCharPointer<T>::type to enable const char* or char*.  *Use IsCharPointer<T>::const_type to enable only const char*. */
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|IsCharPointer
block|{}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IsCharPointer
operator|<
name|char
operator|*
operator|>
block|{
typedef|typedef
name|int
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IsCharPointer
operator|<
specifier|const
name|char
operator|*
operator|>
block|{
typedef|typedef
name|int
name|const_type
typedef|;
typedef|typedef
name|int
name|type
typedef|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace detail
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|Iter
operator|>
name|class
name|Range
block|{
name|Iter
name|b_
block|;
name|Iter
name|e_
block|;
name|public
operator|:
name|using
name|size_type
operator|=
name|std
operator|::
name|size_t
block|;
name|using
name|iterator
operator|=
name|Iter
block|;
name|using
name|const_iterator
operator|=
name|Iter
block|;
name|using
name|value_type
operator|=
name|typename
name|std
operator|::
name|remove_reference
operator|<
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|Iter
operator|>
operator|::
name|reference
operator|>
operator|::
name|type
block|;
name|using
name|reference
operator|=
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|Iter
operator|>
operator|::
name|reference
block|;
name|constexpr
name|Range
argument_list|()
operator|:
name|b_
argument_list|()
block|,
name|e_
argument_list|()
block|{}
name|constexpr
name|Range
argument_list|(
argument|Iter begin
argument_list|,
argument|Iter end
argument_list|)
operator|:
name|b_
argument_list|(
name|begin
argument_list|)
block|,
name|e_
argument_list|(
argument|end
argument_list|)
block|{}
name|constexpr
name|Range
argument_list|(
argument|Iter begin
argument_list|,
argument|size_type size
argument_list|)
operator|:
name|b_
argument_list|(
name|begin
argument_list|)
block|,
name|e_
argument_list|(
argument|begin + size
argument_list|)
block|{}
name|template
operator|<
name|class
name|T
operator|=
name|Iter
block|,
name|typename
name|detail
operator|::
name|IsCharPointer
operator|<
name|T
operator|>
operator|::
name|type
operator|=
literal|0
operator|>
comment|/* implicit */
name|Range
argument_list|(
argument|Iter str
argument_list|)
operator|:
name|b_
argument_list|(
name|str
argument_list|)
block|,
name|e_
argument_list|(
argument|str + std::strlen(str)
argument_list|)
block|{}
name|template
operator|<
name|class
name|T
operator|=
name|Iter
block|,
name|typename
name|detail
operator|::
name|IsCharPointer
operator|<
name|T
operator|>
operator|::
name|const_type
operator|=
literal|0
operator|>
comment|/* implicit */
name|Range
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|str
argument_list|)
operator|:
name|b_
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|)
block|,
name|e_
argument_list|(
argument|b_ + str.size()
argument_list|)
block|{}
comment|// Allow implicit conversion from Range<From> to Range<To> if From is
comment|// implicitly convertible to To.
name|template
operator|<
name|class
name|OtherIter
block|,
name|typename
name|std
operator|::
name|enable_if
operator|<
operator|(
operator|!
name|std
operator|::
name|is_same
operator|<
name|Iter
operator|,
name|OtherIter
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_convertible
operator|<
name|OtherIter
operator|,
name|Iter
operator|>
operator|::
name|value
operator|)
block|,
name|int
operator|>
operator|::
name|type
operator|=
literal|0
operator|>
name|constexpr
comment|/* implicit */
name|Range
argument_list|(
specifier|const
name|Range
operator|<
name|OtherIter
operator|>
operator|&
name|other
argument_list|)
operator|:
name|b_
argument_list|(
name|other
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|e_
argument_list|(
argument|other.end()
argument_list|)
block|{}
name|Range
argument_list|(
specifier|const
name|Range
operator|&
argument_list|)
operator|=
expr|default
block|;
name|Range
argument_list|(
name|Range
operator|&&
argument_list|)
operator|=
expr|default
block|;
name|Range
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Range
operator|&
operator|)
operator|&
operator|=
expr|default
block|;
name|Range
operator|&
name|operator
operator|=
operator|(
name|Range
operator|&&
operator|)
operator|&
operator|=
expr|default
block|;
name|constexpr
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|e_
operator|-
name|b_
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|b_
operator|==
name|e_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Iter
name|data
argument_list|()
specifier|const
block|{
return|return
name|b_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Iter
name|begin
argument_list|()
specifier|const
block|{
return|return
name|b_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Iter
name|end
argument_list|()
specifier|const
block|{
return|return
name|e_
return|;
block|}
end_expr_stmt

begin_function
name|void
name|advance
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
if|if
condition|(
name|UNLIKELY
argument_list|(
name|n
operator|>
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|throw
name|std
operator|::
name|out_of_range
argument_list|(
literal|"index out of range"
argument_list|)
expr_stmt|;
block|}
name|b_
operator|+=
name|n
expr_stmt|;
block|}
end_function

begin_function
name|void
name|subtract
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
if|if
condition|(
name|UNLIKELY
argument_list|(
name|n
operator|>
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|throw
name|std
operator|::
name|out_of_range
argument_list|(
literal|"index out of range"
argument_list|)
expr_stmt|;
block|}
name|e_
operator|-=
name|n
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|Range
name|subpiece
argument_list|(
name|size_type
name|first
argument_list|,
name|size_type
name|length
operator|=
name|std
operator|::
name|string
operator|::
name|npos
argument_list|)
decl|const
block|{
if|if
condition|(
name|UNLIKELY
argument_list|(
name|first
operator|>
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|throw
name|std
operator|::
name|out_of_range
argument_list|(
literal|"index out of range"
argument_list|)
expr_stmt|;
block|}
return|return
name|Range
argument_list|(
name|b_
operator|+
name|first
argument_list|,
name|std
operator|::
name|min
argument_list|(
name|length
argument_list|,
name|size
argument_list|()
operator|-
name|first
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
unit|};
name|using
name|ByteRange
init|=
name|Range
operator|<
specifier|const
name|unsigned
name|char
operator|*
operator|>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|MutableByteRange
init|=
name|Range
operator|<
name|unsigned
name|char
operator|*
operator|>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|StringPiece
init|=
name|Range
operator|<
specifier|const
name|char
operator|*
operator|>
decl_stmt|;
end_decl_stmt

unit|}
end_unit

