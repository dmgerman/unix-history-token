begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * str2wire.h -  read txt presentation of RRs  *  * (c) NLnet Labs, 2005-2006  *  * See the file LICENSE for the license  */
end_comment

begin_comment
comment|/**  * \file  *  * Parses text to wireformat.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_STR2WIRE_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_STR2WIRE_H
end_define

begin_comment
comment|/* include rrdef for MAX_DOMAINLEN constant */
end_comment

begin_include
include|#
directive|include
file|<sldns/rrdef.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|sldns_struct_lookup_table
struct_decl|;
comment|/** buffer to read an RR, cannot be larger than 64K because of packet size */
define|#
directive|define
name|LDNS_RR_BUF_SIZE
value|65535
comment|/* bytes */
define|#
directive|define
name|LDNS_DEFAULT_TTL
value|3600
comment|/*  * To convert class and type to string see  * sldns_get_rr_class_by_name(str)  * sldns_get_rr_type_by_name(str)  * from rrdef.h  */
comment|/**  * Convert text string into dname wireformat, mallocless, with user buffer.  * @param str: the text string with the domain name.  * @param buf: the result buffer, suggested size LDNS_MAX_DOMAINLEN+1  * @param len: length of the buffer on input, length of the result on output.  * @return 0 on success, otherwise an error.  */
name|int
name|sldns_str2wire_dname_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Same as sldns_str2wire_dname_buf, but concatenates origin if the domain  * name is relative (does not end in '.').  * @param str: the text string with the domain name.  * @param buf: the result buffer, suggested size LDNS_MAX_DOMAINLEN+1  * @param len: length of the buffer on input, length of the result on output.  * @param origin: the origin to append or NULL (nothing is appended).  * @param origin_len: length of origin.  * @return 0 on success, otherwise an error.  */
name|int
name|sldns_str2wire_dname_buf_origin
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|uint8_t
modifier|*
name|origin
parameter_list|,
name|size_t
name|origin_len
parameter_list|)
function_decl|;
comment|/**  * Convert text string into dname wireformat  * @param str: the text string with the domain name.  * @param len: returned length of wireformat.  * @return wireformat dname (malloced) or NULL on failure.  */
name|uint8_t
modifier|*
name|sldns_str2wire_dname
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert text RR to wireformat, with user buffer.  * @param str: the RR data in text presentation format.  * @param rr: the buffer where the result is stored into.  This buffer has  * 	the wire-dname(uncompressed), type, class, ttl, rdatalen, rdata.  * 	These values are probably not aligned, and in network format.  * 	Use the sldns_wirerr_get_xxx functions to access them safely.  * 	buffer size LDNS_RR_BUF_SIZE is suggested.  * @param len: on input the length of the buffer, on output the amount of  * 	the buffer used for the rr.  * @param dname_len: if non-NULL, filled with the dname length as result.  * 	Because after the dname you find the type, class, ttl, rdatalen, rdata.  * @param default_ttl: TTL used if no TTL available.  * @param origin: used for origin dname (if not NULL)  * @param origin_len: length of origin.  * @param prev: used for prev_rr dname (if not NULL)  * @param prev_len: length of prev.  * @return 0 on success, an error on failure.  */
name|int
name|sldns_str2wire_rr_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|size_t
modifier|*
name|dname_len
parameter_list|,
name|uint32_t
name|default_ttl
parameter_list|,
name|uint8_t
modifier|*
name|origin
parameter_list|,
name|size_t
name|origin_len
parameter_list|,
name|uint8_t
modifier|*
name|prev
parameter_list|,
name|size_t
name|prev_len
parameter_list|)
function_decl|;
comment|/**  * Same as sldns_str2wire_rr_buf, but there is no rdata, it returns an RR  * with zero rdata and no ttl.  It has name, type, class.  * You can access those with the sldns_wirerr_get_type and class functions.  * @param str: the RR data in text presentation format.  * @param rr: the buffer where the result is stored into.  * @param len: on input the length of the buffer, on output the amount of  * 	the buffer used for the rr.  * @param dname_len: if non-NULL, filled with the dname length as result.  * 	Because after the dname you find the type, class, ttl, rdatalen, rdata.  * @param origin: used for origin dname (if not NULL)  * @param origin_len: length of origin.  * @param prev: used for prev_rr dname (if not NULL)  * @param prev_len: length of prev.  * @return 0 on success, an error on failure.  */
name|int
name|sldns_str2wire_rr_question_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|size_t
modifier|*
name|dname_len
parameter_list|,
name|uint8_t
modifier|*
name|origin
parameter_list|,
name|size_t
name|origin_len
parameter_list|,
name|uint8_t
modifier|*
name|prev
parameter_list|,
name|size_t
name|prev_len
parameter_list|)
function_decl|;
comment|/**  * Get the type of the RR.  * @param rr: the RR in wire format.  * @param len: rr length.  * @param dname_len: dname length to skip.  * @return type in host byteorder  */
name|uint16_t
name|sldns_wirerr_get_type
parameter_list|(
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|size_t
name|dname_len
parameter_list|)
function_decl|;
comment|/**  * Get the class of the RR.  * @param rr: the RR in wire format.  * @param len: rr length.  * @param dname_len: dname length to skip.  * @return class in host byteorder  */
name|uint16_t
name|sldns_wirerr_get_class
parameter_list|(
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|size_t
name|dname_len
parameter_list|)
function_decl|;
comment|/**  * Get the ttl of the RR.  * @param rr: the RR in wire format.  * @param len: rr length.  * @param dname_len: dname length to skip.  * @return ttl in host byteorder  */
name|uint32_t
name|sldns_wirerr_get_ttl
parameter_list|(
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|size_t
name|dname_len
parameter_list|)
function_decl|;
comment|/**  * Get the rdata length of the RR.  * @param rr: the RR in wire format.  * @param len: rr length.  * @param dname_len: dname length to skip.  * @return rdata length in host byteorder  * 	If the rdata length is larger than the rr-len allows, it is truncated.  * 	So, that it is safe to read the data length returned  * 	from this function from the rdata pointer of sldns_wirerr_get_rdata.  */
name|uint16_t
name|sldns_wirerr_get_rdatalen
parameter_list|(
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|size_t
name|dname_len
parameter_list|)
function_decl|;
comment|/**  * Get the rdata pointer of the RR.  * @param rr: the RR in wire format.  * @param len: rr length.  * @param dname_len: dname length to skip.  * @return rdata pointer  */
name|uint8_t
modifier|*
name|sldns_wirerr_get_rdata
parameter_list|(
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|size_t
name|dname_len
parameter_list|)
function_decl|;
comment|/**  * Get the rdata pointer of the RR. prefixed with rdata length.  * @param rr: the RR in wire format.  * @param len: rr length.  * @param dname_len: dname length to skip.  * @return pointer to rdatalength, followed by the rdata.  */
name|uint8_t
modifier|*
name|sldns_wirerr_get_rdatawl
parameter_list|(
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|size_t
name|dname_len
parameter_list|)
function_decl|;
comment|/**  * Parse result codes  */
define|#
directive|define
name|LDNS_WIREPARSE_MASK
value|0x0fff
define|#
directive|define
name|LDNS_WIREPARSE_SHIFT
value|12
define|#
directive|define
name|LDNS_WIREPARSE_ERROR
parameter_list|(
name|e
parameter_list|)
value|((e)&LDNS_WIREPARSE_MASK)
define|#
directive|define
name|LDNS_WIREPARSE_OFFSET
parameter_list|(
name|e
parameter_list|)
value|(((e)&~LDNS_WIREPARSE_MASK)>>LDNS_WIREPARSE_SHIFT)
comment|/* use lookuptable to get error string, sldns_wireparse_errors */
define|#
directive|define
name|LDNS_WIREPARSE_ERR_OK
value|0
define|#
directive|define
name|LDNS_WIREPARSE_ERR_GENERAL
value|342
define|#
directive|define
name|LDNS_WIREPARSE_ERR_DOMAINNAME_OVERFLOW
value|343
define|#
directive|define
name|LDNS_WIREPARSE_ERR_DOMAINNAME_UNDERFLOW
value|344
define|#
directive|define
name|LDNS_WIREPARSE_ERR_BUFFER_TOO_SMALL
value|345
define|#
directive|define
name|LDNS_WIREPARSE_ERR_LABEL_OVERFLOW
value|346
define|#
directive|define
name|LDNS_WIREPARSE_ERR_EMPTY_LABEL
value|347
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_BAD_ESCAPE
value|348
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX
value|349
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_TTL
value|350
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_TYPE
value|351
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_CLASS
value|352
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_RDATA
value|353
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_MISSING_VALUE
value|354
define|#
directive|define
name|LDNS_WIREPARSE_ERR_INVALID_STR
value|355
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_B64
value|356
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_B32_EXT
value|357
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_HEX
value|358
define|#
directive|define
name|LDNS_WIREPARSE_ERR_CERT_BAD_ALGORITHM
value|359
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_TIME
value|360
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_PERIOD
value|361
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_ILNP64
value|362
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_EUI48
value|363
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_EUI64
value|364
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_TAG
value|365
define|#
directive|define
name|LDNS_WIREPARSE_ERR_NOT_IMPL
value|366
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_INT
value|367
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_IP4
value|368
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_IP6
value|369
define|#
directive|define
name|LDNS_WIREPARSE_ERR_SYNTAX_INTEGER_OVERFLOW
value|370
define|#
directive|define
name|LDNS_WIREPARSE_ERR_INCLUDE
value|371
define|#
directive|define
name|LDNS_WIREPARSE_ERR_PARENTHESIS
value|372
comment|/**  * Get reference to a constant string for the (parse) error.  * @param e: error return value  * @return string.  */
specifier|const
name|char
modifier|*
name|sldns_get_errorstr_parse
parameter_list|(
name|int
name|e
parameter_list|)
function_decl|;
comment|/**  * wire parse state for parsing files  */
struct|struct
name|sldns_file_parse_state
block|{
comment|/** the origin domain name, if len!=0. uncompressed wireformat */
name|uint8_t
name|origin
index|[
name|LDNS_MAX_DOMAINLEN
operator|+
literal|1
index|]
decl_stmt|;
comment|/** length of origin domain name, in bytes. 0 if not set. */
name|size_t
name|origin_len
decl_stmt|;
comment|/** the previous domain name, if len!=0. uncompressed wireformat*/
name|uint8_t
name|prev_rr
index|[
name|LDNS_MAX_DOMAINLEN
operator|+
literal|1
index|]
decl_stmt|;
comment|/** length of the previous domain name, in bytes. 0 if not set. */
name|size_t
name|prev_rr_len
decl_stmt|;
comment|/** default TTL, this is used if the text does not specify a TTL, 	 * host byteorder */
name|uint32_t
name|default_ttl
decl_stmt|;
comment|/** line number information */
name|int
name|lineno
decl_stmt|;
block|}
struct|;
comment|/**  * Read one RR from zonefile with buffer for the data.  * @param in: file that is read from (one RR, multiple lines if it spans them).  * @param rr: this is malloced by the user and the result is stored here,  * 	if an RR is read.  If no RR is read this is signalled with the  * 	return len set to 0 (for ORIGIN, TTL directives).  * @param len: on input, the length of the rr buffer.  on output the rr len.  * 	Buffer size of 64k should be enough.  * @param dname_len: returns the length of the dname initial part of the rr.  * @param parse_state: pass a pointer to user-allocated struct.  * 	Contents are maintained by this function.  * 	If you pass NULL then ORIGIN and TTL directives are not honored.  * 	You can start out with a particular origin by pre-filling it.  * 	otherwise, zero the structure before passing it.  * 	lineno is incremented when a newline is passed by the parser,  * 	you should initialize it at 1 at the start of the file.  * @return 0 on success, error on failure.  */
name|int
name|sldns_fp2wire_rr_buf
parameter_list|(
name|FILE
modifier|*
name|in
parameter_list|,
name|uint8_t
modifier|*
name|rr
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|size_t
modifier|*
name|dname_len
parameter_list|,
name|struct
name|sldns_file_parse_state
modifier|*
name|parse_state
parameter_list|)
function_decl|;
comment|/**  * Convert one rdf in rdata to wireformat and parse from string.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @param rdftype: the type of the rdf.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_rdf_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|sldns_rdf_type
name|rdftype
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_INT8 from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_int8_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_INT16 from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_int16_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_INT32 from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_int32_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_A from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_a_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_AAAA from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_aaaa_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_STR from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_str_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_APL from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_apl_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_B64 from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_b64_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_B32_EXT from string to wireformat.  * And also LDNS_RDF_TYPE_NSEC3_NEXT_OWNER.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_b32_ext_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_HEX from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_hex_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_NSEC from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_nsec_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_TYPE from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_type_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_CLASS from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_class_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_CERT_ALG from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_cert_alg_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_ALG from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_alg_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_TIME from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_time_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_PERIOD from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_period_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_LOC from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_loc_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_WKS from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_wks_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_NSAP from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_nsap_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_ATMA from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_atma_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_IPSECKEY from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_ipseckey_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_NSEC3_SALT from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_nsec3_salt_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_ILNP64 from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_ilnp64_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_EUI48 from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_eui48_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_EUI64 from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_eui64_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_TAG from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_tag_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_LONG_STR from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_long_str_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_HIP from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_hip_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/**  * Convert rdf of type LDNS_RDF_TYPE_INT16_DATA from string to wireformat.  * @param str: the text to convert for this rdata element.  * @param rd: rdata buffer for the wireformat.  * @param len: length of rd buffer on input, used length on output.  * @return 0 on success, error on failure.  */
name|int
name|sldns_str2wire_int16_data_buf
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint8_t
modifier|*
name|rd
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LDNS_STR2WIRE_H */
end_comment

end_unit

