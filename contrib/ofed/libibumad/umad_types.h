begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 Mellanox Technologies Ltd.  All rights reserved.  * Copyright (c) 2004 Infinicon Corporation.  All rights reserved.  * Copyright (c) 2004, 2010 Intel Corporation.  All rights reserved.  * Copyright (c) 2004 Topspin Corporation.  All rights reserved.  * Copyright (c) 2004-2006 Voltaire Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_UMAD_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|_UMAD_TYPES_H
end_define

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/umad.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
value|extern "C" {
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
value|}
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__cplusplus */
end_comment

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_decl_stmt
name|BEGIN_C_DECLS
define|#
directive|define
name|UMAD_BASE_VERSION
value|1
define|#
directive|define
name|UMAD_QKEY
value|0x80010000
comment|/* Management classes */
name|enum
type|{
name|UMAD_CLASS_SUBN_LID_ROUTED
init|=
literal|0x01
decl_stmt|,
name|UMAD_CLASS_SUBN_DIRECTED_ROUTE
init|=
literal|0x81
decl_stmt|,
name|UMAD_CLASS_SUBN_ADM
init|=
literal|0x03
decl_stmt|,
name|UMAD_CLASS_PERF_MGMT
init|=
literal|0x04
decl_stmt|,
name|UMAD_CLASS_BM
init|=
literal|0x05
decl_stmt|,
name|UMAD_CLASS_DEVICE_MGMT
init|=
literal|0x06
decl_stmt|,
name|UMAD_CLASS_CM
init|=
literal|0x07
decl_stmt|,
name|UMAD_CLASS_SNMP
init|=
literal|0x08
decl_stmt|,
name|UMAD_CLASS_VENDOR_RANGE1_START
init|=
literal|0x09
decl_stmt|,
name|UMAD_CLASS_VENDOR_RANGE1_END
init|=
literal|0x0F
decl_stmt|,
name|UMAD_CLASS_APPLICATION_START
init|=
literal|0x10
decl_stmt|,
name|UMAD_CLASS_DEVICE_ADM
init|=
name|UMAD_CLASS_APPLICATION_START
decl_stmt|,
name|UMAD_CLASS_BOOT_MGMT
init|=
literal|0x11
decl_stmt|,
name|UMAD_CLASS_BIS
init|=
literal|0x12
decl_stmt|,
name|UMAD_CLASS_CONG_MGMT
init|=
literal|0x21
decl_stmt|,
name|UMAD_CLASS_APPLICATION_END
init|=
literal|0x2F
decl_stmt|,
name|UMAD_CLASS_VENDOR_RANGE2_START
init|=
literal|0x30
decl_stmt|,
name|UMAD_CLASS_VENDOR_RANGE2_END
init|=
literal|0x4F
end_decl_stmt

begin_comment
unit|};
comment|/* Management methods */
end_comment

begin_enum
enum|enum
block|{
name|UMAD_METHOD_GET
init|=
literal|0x01
block|,
name|UMAD_METHOD_SET
init|=
literal|0x02
block|,
name|UMAD_METHOD_GET_RESP
init|=
literal|0x81
block|,
name|UMAD_METHOD_SEND
init|=
literal|0x03
block|,
name|UMAD_METHOD_TRAP
init|=
literal|0x05
block|,
name|UMAD_METHOD_REPORT
init|=
literal|0x06
block|,
name|UMAD_METHOD_REPORT_RESP
init|=
literal|0x86
block|,
name|UMAD_METHOD_TRAP_REPRESS
init|=
literal|0x07
block|,
name|UMAD_METHOD_RESP_MASK
init|=
literal|0x80
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|UMAD_STATUS_SUCCESS
init|=
literal|0x0000
block|,
name|UMAD_STATUS_BUSY
init|=
literal|0x0001
block|,
name|UMAD_STATUS_REDIRECT
init|=
literal|0x0002
block|,
comment|/* Invalid fields, bits 2-4 */
name|UMAD_STATUS_BAD_VERSION
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|UMAD_STATUS_METHOD_NOT_SUPPORTED
init|=
operator|(
literal|2
operator|<<
literal|2
operator|)
block|,
name|UMAD_STATUS_ATTR_NOT_SUPPORTED
init|=
operator|(
literal|3
operator|<<
literal|2
operator|)
block|,
name|UMAD_STATUS_INVALID_ATTR_VALUE
init|=
operator|(
literal|7
operator|<<
literal|2
operator|)
block|,
name|UMAD_STATUS_INVALID_FIELD_MASK
init|=
literal|0x001C
block|,
name|UMAD_STATUS_CLASS_MASK
init|=
literal|0xFF00
block|}
enum|;
end_enum

begin_comment
comment|/* Attributes common to multiple classes */
end_comment

begin_enum
enum|enum
block|{
name|UMAD_ATTR_CLASS_PORT_INFO
init|=
literal|0x0001
block|,
name|UMAD_ATTR_NOTICE
init|=
literal|0x0002
block|,
name|UMAD_ATTR_INFORM_INFO
init|=
literal|0x0003
block|}
enum|;
end_enum

begin_comment
comment|/* RMPP information */
end_comment

begin_define
define|#
directive|define
name|UMAD_RMPP_VERSION
value|1
end_define

begin_enum
enum|enum
block|{
name|UMAD_RMPP_FLAG_ACTIVE
init|=
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|UMAD_LEN_DATA
init|=
literal|232
block|,
name|UMAD_LEN_RMPP_DATA
init|=
literal|220
block|,
name|UMAD_LEN_DM_DATA
init|=
literal|192
block|,
name|UMAD_LEN_VENDOR_DATA
init|=
literal|216
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|umad_hdr
block|{
name|uint8_t
name|base_version
decl_stmt|;
name|uint8_t
name|mgmt_class
decl_stmt|;
name|uint8_t
name|class_version
decl_stmt|;
name|uint8_t
name|method
decl_stmt|;
name|__be16
name|status
decl_stmt|;
name|__be16
name|class_specific
decl_stmt|;
name|__be64
name|tid
decl_stmt|;
name|__be16
name|attr_id
decl_stmt|;
name|__be16
name|resv
decl_stmt|;
name|__be32
name|attr_mod
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|umad_rmpp_hdr
block|{
name|uint8_t
name|rmpp_version
decl_stmt|;
name|uint8_t
name|rmpp_type
decl_stmt|;
name|uint8_t
name|rmpp_rtime_flags
decl_stmt|;
name|uint8_t
name|rmpp_status
decl_stmt|;
name|__be32
name|seg_num
decl_stmt|;
name|__be32
name|paylen_newwin
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|umad_packet
block|{
name|struct
name|umad_hdr
name|mad_hdr
decl_stmt|;
name|uint8_t
name|data
index|[
name|UMAD_LEN_DATA
index|]
decl_stmt|;
comment|/* network-byte order */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|umad_rmpp_packet
block|{
name|struct
name|umad_hdr
name|mad_hdr
decl_stmt|;
name|struct
name|umad_rmpp_hdr
name|rmpp_hdr
decl_stmt|;
name|uint8_t
name|data
index|[
name|UMAD_LEN_RMPP_DATA
index|]
decl_stmt|;
comment|/* network-byte order */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|umad_dm_packet
block|{
name|struct
name|umad_hdr
name|mad_hdr
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|40
index|]
decl_stmt|;
name|uint8_t
name|data
index|[
name|UMAD_LEN_DM_DATA
index|]
decl_stmt|;
comment|/* network-byte order */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|umad_vendor_packet
block|{
name|struct
name|umad_hdr
name|mad_hdr
decl_stmt|;
name|struct
name|umad_rmpp_hdr
name|rmpp_hdr
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|oui
index|[
literal|3
index|]
decl_stmt|;
comment|/* network-byte order */
name|uint8_t
name|data
index|[
name|UMAD_LEN_VENDOR_DATA
index|]
decl_stmt|;
comment|/* network-byte order */
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|UMAD_OPENIB_OUI
init|=
literal|0x001405
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|UMAD_CLASS_RESP_TIME_MASK
init|=
literal|0x1F
block|}
enum|;
end_enum

begin_struct
struct|struct
name|umad_class_port_info
block|{
name|uint8_t
name|base_ver
decl_stmt|;
name|uint8_t
name|class_ver
decl_stmt|;
name|__be16
name|cap_mask
decl_stmt|;
name|__be32
name|cap_mask2_resp_time
decl_stmt|;
union|union
block|{
name|uint8_t
name|redir_gid
index|[
literal|16
index|]
name|__attribute__
argument_list|(
operator|(
name|deprecated
operator|)
argument_list|)
decl_stmt|;
comment|/* network byte order */
name|union
name|umad_gid
name|redirgid
decl_stmt|;
block|}
union|;
name|__be32
name|redir_tc_sl_fl
decl_stmt|;
name|__be16
name|redir_lid
decl_stmt|;
name|__be16
name|redir_pkey
decl_stmt|;
name|__be32
name|redir_qp
decl_stmt|;
name|__be32
name|redir_qkey
decl_stmt|;
union|union
block|{
name|uint8_t
name|trap_gid
index|[
literal|16
index|]
name|__attribute__
argument_list|(
operator|(
name|deprecated
operator|)
argument_list|)
decl_stmt|;
comment|/* network byte order */
name|union
name|umad_gid
name|trapgid
decl_stmt|;
block|}
union|;
name|__be32
name|trap_tc_sl_fl
decl_stmt|;
name|__be16
name|trap_lid
decl_stmt|;
name|__be16
name|trap_pkey
decl_stmt|;
name|__be32
name|trap_hl_qp
decl_stmt|;
name|__be32
name|trap_qkey
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|uint32_t
name|umad_class_cap_mask2
parameter_list|(
name|struct
name|umad_class_port_info
modifier|*
name|cpi
parameter_list|)
block|{
return|return
operator|(
name|be32toh
argument_list|(
name|cpi
operator|->
name|cap_mask2_resp_time
argument_list|)
operator|>>
literal|5
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|umad_class_resp_time
parameter_list|(
name|struct
name|umad_class_port_info
modifier|*
name|cpi
parameter_list|)
block|{
return|return
call|(
name|uint8_t
call|)
argument_list|(
name|be32toh
argument_list|(
name|cpi
operator|->
name|cap_mask2_resp_time
argument_list|)
operator|&
name|UMAD_CLASS_RESP_TIME_MASK
argument_list|)
return|;
block|}
end_function

begin_macro
name|END_C_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _UMAD_TYPES_H */
end_comment

end_unit

