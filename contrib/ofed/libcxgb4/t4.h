begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2006-2016 Chelsio, Inc. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__T4_H__
end_ifndef

begin_define
define|#
directive|define
name|__T4_H__
end_define

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<syslog.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/types.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/udma_barrier.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/endian.h>
end_include

begin_comment
comment|/*  * Try and minimize the changes from the kernel code that is pull in  * here for kernel bypass ops.  */
end_comment

begin_define
define|#
directive|define
name|u8
value|uint8_t
end_define

begin_define
define|#
directive|define
name|u16
value|uint16_t
end_define

begin_define
define|#
directive|define
name|u32
value|uint32_t
end_define

begin_define
define|#
directive|define
name|u64
value|uint64_t
end_define

begin_define
define|#
directive|define
name|DECLARE_PCI_UNMAP_ADDR
parameter_list|(
name|a
parameter_list|)
end_define

begin_define
define|#
directive|define
name|__iomem
end_define

begin_define
define|#
directive|define
name|BUG_ON
parameter_list|(
name|c
parameter_list|)
value|assert(!(c))
end_define

begin_define
define|#
directive|define
name|ROUND_UP
parameter_list|(
name|x
parameter_list|,
name|n
parameter_list|)
value|(((x) + (n) - 1u)& ~((n) - 1u))
end_define

begin_define
define|#
directive|define
name|DIV_ROUND_UP
parameter_list|(
name|n
parameter_list|,
name|d
parameter_list|)
value|(((n) + (d) - 1) / (d))
end_define

begin_comment
comment|/* FIXME: Move me to a generic PCI mmio accessor */
end_comment

begin_define
define|#
directive|define
name|cpu_to_pci32
parameter_list|(
name|val
parameter_list|)
value|htole32(val)
end_define

begin_define
define|#
directive|define
name|writel
parameter_list|(
name|v
parameter_list|,
name|a
parameter_list|)
value|do { *((volatile u32 *)(a)) = cpu_to_pci32(v); } while (0)
end_define

begin_include
include|#
directive|include
file|"t4_regs.h"
end_include

begin_include
include|#
directive|include
file|"t4_chip_type.h"
end_include

begin_include
include|#
directive|include
file|"t4fw_api.h"
end_include

begin_include
include|#
directive|include
file|"t4fw_ri_api.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG
end_ifdef

begin_define
define|#
directive|define
name|DBGLOG
parameter_list|(
name|s
parameter_list|)
end_define

begin_define
define|#
directive|define
name|PDBG
parameter_list|(
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
value|do {syslog(LOG_DEBUG, fmt, ##args); } while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DBGLOG
parameter_list|(
name|s
parameter_list|)
end_define

begin_define
define|#
directive|define
name|PDBG
parameter_list|(
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
value|do {} while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|A_PCIE_MA_SYNC
value|0x30b4
end_define

begin_define
define|#
directive|define
name|T4_MAX_READ_DEPTH
value|16
end_define

begin_define
define|#
directive|define
name|T4_QID_BASE
value|1024
end_define

begin_define
define|#
directive|define
name|T4_MAX_QIDS
value|256
end_define

begin_define
define|#
directive|define
name|T4_MAX_NUM_PD
value|65536
end_define

begin_define
define|#
directive|define
name|T4_EQ_STATUS_ENTRIES
value|(L1_CACHE_BYTES> 64 ? 2 : 1)
end_define

begin_define
define|#
directive|define
name|T4_MAX_EQ_SIZE
value|(65520 - T4_EQ_STATUS_ENTRIES)
end_define

begin_define
define|#
directive|define
name|T4_MAX_IQ_SIZE
value|(65520 - 1)
end_define

begin_define
define|#
directive|define
name|T4_MAX_RQ_SIZE
value|(8192 - T4_EQ_STATUS_ENTRIES)
end_define

begin_define
define|#
directive|define
name|T4_MAX_SQ_SIZE
value|(T4_MAX_EQ_SIZE - 1)
end_define

begin_define
define|#
directive|define
name|T4_MAX_QP_DEPTH
value|(T4_MAX_RQ_SIZE - 1)
end_define

begin_define
define|#
directive|define
name|T4_MAX_CQ_DEPTH
value|(T4_MAX_IQ_SIZE - 1)
end_define

begin_define
define|#
directive|define
name|T4_MAX_NUM_STAG
value|(1<<15)
end_define

begin_define
define|#
directive|define
name|T4_MAX_MR_SIZE
value|(~0ULL - 1)
end_define

begin_define
define|#
directive|define
name|T4_PAGESIZE_MASK
value|0xffffffff000
end_define

begin_comment
comment|/* 4KB-8TB */
end_comment

begin_define
define|#
directive|define
name|T4_STAG_UNSET
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|T4_FW_MAJ
value|0
end_define

begin_struct
struct|struct
name|t4_status_page
block|{
name|__be32
name|rsvd1
decl_stmt|;
comment|/* flit 0 - hw owns */
name|__be16
name|rsvd2
decl_stmt|;
name|__be16
name|qid
decl_stmt|;
name|__be16
name|cidx
decl_stmt|;
name|__be16
name|pidx
decl_stmt|;
name|u8
name|qp_err
decl_stmt|;
comment|/* flit 1 - sw owns */
name|u8
name|db_off
decl_stmt|;
name|u8
name|pad
decl_stmt|;
name|u16
name|host_wq_pidx
decl_stmt|;
name|u16
name|host_cidx
decl_stmt|;
name|u16
name|host_pidx
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|T4_EQ_ENTRY_SIZE
value|64
end_define

begin_define
define|#
directive|define
name|T4_SQ_NUM_SLOTS
value|5
end_define

begin_define
define|#
directive|define
name|T4_SQ_NUM_BYTES
value|(T4_EQ_ENTRY_SIZE * T4_SQ_NUM_SLOTS)
end_define

begin_define
define|#
directive|define
name|T4_MAX_SEND_SGE
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_send_wr) - sizeof(struct fw_ri_isgl)) / sizeof (struct fw_ri_sge))
end_define

begin_define
define|#
directive|define
name|T4_MAX_SEND_INLINE
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_send_wr) - sizeof(struct fw_ri_immd)))
end_define

begin_define
define|#
directive|define
name|T4_MAX_WRITE_INLINE
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_rdma_write_wr) - sizeof(struct fw_ri_immd)))
end_define

begin_define
define|#
directive|define
name|T4_MAX_WRITE_SGE
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_rdma_write_wr) - sizeof(struct fw_ri_isgl)) / sizeof (struct fw_ri_sge))
end_define

begin_define
define|#
directive|define
name|T4_MAX_FR_IMMD
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_fr_nsmr_wr) - sizeof(struct fw_ri_immd)))
end_define

begin_define
define|#
directive|define
name|T4_MAX_FR_DEPTH
value|255
end_define

begin_define
define|#
directive|define
name|T4_RQ_NUM_SLOTS
value|2
end_define

begin_define
define|#
directive|define
name|T4_RQ_NUM_BYTES
value|(T4_EQ_ENTRY_SIZE * T4_RQ_NUM_SLOTS)
end_define

begin_define
define|#
directive|define
name|T4_MAX_RECV_SGE
value|4
end_define

begin_union
union|union
name|t4_wr
block|{
name|struct
name|fw_ri_res_wr
name|res
decl_stmt|;
name|struct
name|fw_ri_wr
name|init
decl_stmt|;
name|struct
name|fw_ri_rdma_write_wr
name|write
decl_stmt|;
name|struct
name|fw_ri_send_wr
name|send
decl_stmt|;
name|struct
name|fw_ri_rdma_read_wr
name|read
decl_stmt|;
name|struct
name|fw_ri_bind_mw_wr
name|bind
decl_stmt|;
name|struct
name|fw_ri_fr_nsmr_wr
name|fr
decl_stmt|;
name|struct
name|fw_ri_inv_lstag_wr
name|inv
decl_stmt|;
name|struct
name|t4_status_page
name|status
decl_stmt|;
name|__be64
name|flits
index|[
name|T4_EQ_ENTRY_SIZE
operator|/
sizeof|sizeof
argument_list|(
name|__be64
argument_list|)
operator|*
name|T4_SQ_NUM_SLOTS
index|]
decl_stmt|;
block|}
union|;
end_union

begin_union
union|union
name|t4_recv_wr
block|{
name|struct
name|fw_ri_recv_wr
name|recv
decl_stmt|;
name|struct
name|t4_status_page
name|status
decl_stmt|;
name|__be64
name|flits
index|[
name|T4_EQ_ENTRY_SIZE
operator|/
sizeof|sizeof
argument_list|(
name|__be64
argument_list|)
operator|*
name|T4_RQ_NUM_SLOTS
index|]
decl_stmt|;
block|}
union|;
end_union

begin_function
specifier|static
specifier|inline
name|void
name|init_wr_hdr
parameter_list|(
name|union
name|t4_wr
modifier|*
name|wqe
parameter_list|,
name|u16
name|wrid
parameter_list|,
name|enum
name|fw_wr_opcodes
name|opcode
parameter_list|,
name|u8
name|flags
parameter_list|,
name|u8
name|len16
parameter_list|)
block|{
name|wqe
operator|->
name|send
operator|.
name|opcode
operator|=
operator|(
name|u8
operator|)
name|opcode
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|wrid
operator|=
name|wrid
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|r1
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|r1
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|r1
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|len16
operator|=
name|len16
expr_stmt|;
block|}
end_function

begin_comment
comment|/* CQE/AE status codes */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_SUCCESS
value|0x0
end_define

begin_define
define|#
directive|define
name|T4_ERR_STAG
value|0x1
end_define

begin_comment
comment|/* STAG invalid: either the */
end_comment

begin_comment
comment|/* STAG is offlimt, being 0, */
end_comment

begin_comment
comment|/* or STAG_key mismatch */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_PDID
value|0x2
end_define

begin_comment
comment|/* PDID mismatch */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_QPID
value|0x3
end_define

begin_comment
comment|/* QPID mismatch */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_ACCESS
value|0x4
end_define

begin_comment
comment|/* Invalid access right */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_WRAP
value|0x5
end_define

begin_comment
comment|/* Wrap error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_BOUND
value|0x6
end_define

begin_comment
comment|/* base and bounds voilation */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_INVALIDATE_SHARED_MR
value|0x7
end_define

begin_comment
comment|/* attempt to invalidate a  */
end_comment

begin_comment
comment|/* shared memory region */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_INVALIDATE_MR_WITH_MW_BOUND
value|0x8
end_define

begin_comment
comment|/* attempt to invalidate a  */
end_comment

begin_comment
comment|/* shared memory region */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_ECC
value|0x9
end_define

begin_comment
comment|/* ECC error detected */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_ECC_PSTAG
value|0xA
end_define

begin_comment
comment|/* ECC error detected when  */
end_comment

begin_comment
comment|/* reading PSTAG for a MW  */
end_comment

begin_comment
comment|/* Invalidate */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_PBL_ADDR_BOUND
value|0xB
end_define

begin_comment
comment|/* pbl addr out of bounds:  */
end_comment

begin_comment
comment|/* software error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_SWFLUSH
value|0xC
end_define

begin_comment
comment|/* SW FLUSHED */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_CRC
value|0x10
end_define

begin_comment
comment|/* CRC error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MARKER
value|0x11
end_define

begin_comment
comment|/* Marker error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_PDU_LEN_ERR
value|0x12
end_define

begin_comment
comment|/* invalid PDU length */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_OUT_OF_RQE
value|0x13
end_define

begin_comment
comment|/* out of RQE */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_DDP_VERSION
value|0x14
end_define

begin_comment
comment|/* wrong DDP version */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_RDMA_VERSION
value|0x15
end_define

begin_comment
comment|/* wrong RDMA version */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_OPCODE
value|0x16
end_define

begin_comment
comment|/* invalid rdma opcode */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_DDP_QUEUE_NUM
value|0x17
end_define

begin_comment
comment|/* invalid ddp queue number */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MSN
value|0x18
end_define

begin_comment
comment|/* MSN error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_TBIT
value|0x19
end_define

begin_comment
comment|/* tag bit not set correctly */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MO
value|0x1A
end_define

begin_comment
comment|/* MO not 0 for TERMINATE  */
end_comment

begin_comment
comment|/* or READ_REQ */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MSN_GAP
value|0x1B
end_define

begin_define
define|#
directive|define
name|T4_ERR_MSN_RANGE
value|0x1C
end_define

begin_define
define|#
directive|define
name|T4_ERR_IRD_OVERFLOW
value|0x1D
end_define

begin_define
define|#
directive|define
name|T4_ERR_RQE_ADDR_BOUND
value|0x1E
end_define

begin_comment
comment|/* RQE addr out of bounds:  */
end_comment

begin_comment
comment|/* software error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_INTERNAL_ERR
value|0x1F
end_define

begin_comment
comment|/* internal error (opcode  */
end_comment

begin_comment
comment|/* mismatch) */
end_comment

begin_comment
comment|/*  * CQE defs  */
end_comment

begin_struct
struct|struct
name|t4_cqe
block|{
name|__be32
name|header
decl_stmt|;
name|__be32
name|len
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|__be32
name|stag
decl_stmt|;
name|__be32
name|msn
decl_stmt|;
block|}
name|rcqe
struct|;
struct|struct
block|{
name|u32
name|nada1
decl_stmt|;
name|u16
name|nada2
decl_stmt|;
name|u16
name|cidx
decl_stmt|;
block|}
name|scqe
struct|;
struct|struct
block|{
name|__be32
name|wrid_hi
decl_stmt|;
name|__be32
name|wrid_low
decl_stmt|;
block|}
name|gen
struct|;
block|}
name|u
union|;
name|__be64
name|reserved
decl_stmt|;
name|__be64
name|bits_type_ts
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* macros for flit 0 of the cqe */
end_comment

begin_define
define|#
directive|define
name|S_CQE_QPID
value|12
end_define

begin_define
define|#
directive|define
name|M_CQE_QPID
value|0xFFFFF
end_define

begin_define
define|#
directive|define
name|G_CQE_QPID
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_QPID))& M_CQE_QPID)
end_define

begin_define
define|#
directive|define
name|V_CQE_QPID
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_QPID)
end_define

begin_define
define|#
directive|define
name|S_CQE_SWCQE
value|11
end_define

begin_define
define|#
directive|define
name|M_CQE_SWCQE
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_SWCQE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_SWCQE))& M_CQE_SWCQE)
end_define

begin_define
define|#
directive|define
name|V_CQE_SWCQE
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_SWCQE)
end_define

begin_define
define|#
directive|define
name|S_CQE_STATUS
value|5
end_define

begin_define
define|#
directive|define
name|M_CQE_STATUS
value|0x1F
end_define

begin_define
define|#
directive|define
name|G_CQE_STATUS
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_STATUS))& M_CQE_STATUS)
end_define

begin_define
define|#
directive|define
name|V_CQE_STATUS
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_STATUS)
end_define

begin_define
define|#
directive|define
name|S_CQE_TYPE
value|4
end_define

begin_define
define|#
directive|define
name|M_CQE_TYPE
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_TYPE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_TYPE))& M_CQE_TYPE)
end_define

begin_define
define|#
directive|define
name|V_CQE_TYPE
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_TYPE)
end_define

begin_define
define|#
directive|define
name|S_CQE_OPCODE
value|0
end_define

begin_define
define|#
directive|define
name|M_CQE_OPCODE
value|0xF
end_define

begin_define
define|#
directive|define
name|G_CQE_OPCODE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_OPCODE))& M_CQE_OPCODE)
end_define

begin_define
define|#
directive|define
name|V_CQE_OPCODE
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_OPCODE)
end_define

begin_define
define|#
directive|define
name|SW_CQE
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_SWCQE(be32toh((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_QPID
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_QPID(be32toh((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_TYPE
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_TYPE(be32toh((x)->header)))
end_define

begin_define
define|#
directive|define
name|SQ_TYPE
parameter_list|(
name|x
parameter_list|)
value|(CQE_TYPE((x)))
end_define

begin_define
define|#
directive|define
name|RQ_TYPE
parameter_list|(
name|x
parameter_list|)
value|(!CQE_TYPE((x)))
end_define

begin_define
define|#
directive|define
name|CQE_STATUS
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_STATUS(be32toh((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_OPCODE
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_OPCODE(be32toh((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_SEND_OPCODE
parameter_list|(
name|x
parameter_list|)
value|( \ 	(G_CQE_OPCODE(be32toh((x)->header)) == FW_RI_SEND) || \ 	(G_CQE_OPCODE(be32toh((x)->header)) == FW_RI_SEND_WITH_SE) || \ 	(G_CQE_OPCODE(be32toh((x)->header)) == FW_RI_SEND_WITH_INV) || \ 	(G_CQE_OPCODE(be32toh((x)->header)) == FW_RI_SEND_WITH_SE_INV))
end_define

begin_define
define|#
directive|define
name|CQE_LEN
parameter_list|(
name|x
parameter_list|)
value|(be32toh((x)->len))
end_define

begin_comment
comment|/* used for RQ completion processing */
end_comment

begin_define
define|#
directive|define
name|CQE_WRID_STAG
parameter_list|(
name|x
parameter_list|)
value|(be32toh((x)->u.rcqe.stag))
end_define

begin_define
define|#
directive|define
name|CQE_WRID_MSN
parameter_list|(
name|x
parameter_list|)
value|(be32toh((x)->u.rcqe.msn))
end_define

begin_comment
comment|/* used for SQ completion processing */
end_comment

begin_define
define|#
directive|define
name|CQE_WRID_SQ_IDX
parameter_list|(
name|x
parameter_list|)
value|(x)->u.scqe.cidx
end_define

begin_comment
comment|/* generic accessor macros */
end_comment

begin_define
define|#
directive|define
name|CQE_WRID_HI
parameter_list|(
name|x
parameter_list|)
value|((x)->u.gen.wrid_hi)
end_define

begin_define
define|#
directive|define
name|CQE_WRID_LOW
parameter_list|(
name|x
parameter_list|)
value|((x)->u.gen.wrid_low)
end_define

begin_comment
comment|/* macros for flit 3 of the cqe */
end_comment

begin_define
define|#
directive|define
name|S_CQE_GENBIT
value|63
end_define

begin_define
define|#
directive|define
name|M_CQE_GENBIT
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_GENBIT
parameter_list|(
name|x
parameter_list|)
value|(((x)>> S_CQE_GENBIT)& M_CQE_GENBIT)
end_define

begin_define
define|#
directive|define
name|V_CQE_GENBIT
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_GENBIT)
end_define

begin_define
define|#
directive|define
name|S_CQE_OVFBIT
value|62
end_define

begin_define
define|#
directive|define
name|M_CQE_OVFBIT
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_OVFBIT
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_OVFBIT))& M_CQE_OVFBIT)
end_define

begin_define
define|#
directive|define
name|S_CQE_IQTYPE
value|60
end_define

begin_define
define|#
directive|define
name|M_CQE_IQTYPE
value|0x3
end_define

begin_define
define|#
directive|define
name|G_CQE_IQTYPE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_IQTYPE))& M_CQE_IQTYPE)
end_define

begin_define
define|#
directive|define
name|M_CQE_TS
value|0x0fffffffffffffffULL
end_define

begin_define
define|#
directive|define
name|G_CQE_TS
parameter_list|(
name|x
parameter_list|)
value|((x)& M_CQE_TS)
end_define

begin_define
define|#
directive|define
name|CQE_OVFBIT
parameter_list|(
name|x
parameter_list|)
value|((unsigned)G_CQE_OVFBIT(be64toh((x)->bits_type_ts)))
end_define

begin_define
define|#
directive|define
name|CQE_GENBIT
parameter_list|(
name|x
parameter_list|)
value|((unsigned)G_CQE_GENBIT(be64toh((x)->bits_type_ts)))
end_define

begin_define
define|#
directive|define
name|CQE_TS
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_TS(be64toh((x)->bits_type_ts)))
end_define

begin_struct
struct|struct
name|t4_swsqe
block|{
name|u64
name|wr_id
decl_stmt|;
name|struct
name|t4_cqe
name|cqe
decl_stmt|;
name|__be32
name|read_len
decl_stmt|;
name|int
name|opcode
decl_stmt|;
name|int
name|complete
decl_stmt|;
name|int
name|signaled
decl_stmt|;
name|u16
name|idx
decl_stmt|;
name|int
name|flushed
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|T4_SQ_ONCHIP
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|t4_sq
block|{
comment|/* queue is either host memory or WC MMIO memory if 	 * t4_sq_onchip(). */
name|union
name|t4_wr
modifier|*
name|queue
decl_stmt|;
name|struct
name|t4_swsqe
modifier|*
name|sw_sq
decl_stmt|;
name|struct
name|t4_swsqe
modifier|*
name|oldest_read
decl_stmt|;
comment|/* udb is either UC or WC MMIO memory depending on device version. */
specifier|volatile
name|u32
modifier|*
name|udb
decl_stmt|;
name|size_t
name|memsize
decl_stmt|;
name|u32
name|qid
decl_stmt|;
name|u32
name|bar2_qid
decl_stmt|;
name|void
modifier|*
name|ma_sync
decl_stmt|;
name|u16
name|in_use
decl_stmt|;
name|u16
name|size
decl_stmt|;
name|u16
name|cidx
decl_stmt|;
name|u16
name|pidx
decl_stmt|;
name|u16
name|wq_pidx
decl_stmt|;
name|u16
name|flags
decl_stmt|;
name|short
name|flush_cidx
decl_stmt|;
name|int
name|wc_reg_available
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_swrqe
block|{
name|u64
name|wr_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_rq
block|{
name|union
name|t4_recv_wr
modifier|*
name|queue
decl_stmt|;
name|struct
name|t4_swrqe
modifier|*
name|sw_rq
decl_stmt|;
specifier|volatile
name|u32
modifier|*
name|udb
decl_stmt|;
name|size_t
name|memsize
decl_stmt|;
name|u32
name|qid
decl_stmt|;
name|u32
name|bar2_qid
decl_stmt|;
name|u32
name|msn
decl_stmt|;
name|u32
name|rqt_hwaddr
decl_stmt|;
name|u16
name|rqt_size
decl_stmt|;
name|u16
name|in_use
decl_stmt|;
name|u16
name|size
decl_stmt|;
name|u16
name|cidx
decl_stmt|;
name|u16
name|pidx
decl_stmt|;
name|u16
name|wq_pidx
decl_stmt|;
name|int
name|wc_reg_available
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_wq
block|{
name|struct
name|t4_sq
name|sq
decl_stmt|;
name|struct
name|t4_rq
name|rq
decl_stmt|;
name|struct
name|c4iw_rdev
modifier|*
name|rdev
decl_stmt|;
name|u32
name|qid_mask
decl_stmt|;
name|int
name|error
decl_stmt|;
name|int
name|flushed
decl_stmt|;
name|u8
modifier|*
name|db_offp
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|t4_rqes_posted
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|in_use
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_rq_empty
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|==
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_rq_full
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|==
operator|(
name|wq
operator|->
name|rq
operator|.
name|size
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|t4_rq_avail
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|size
operator|-
literal|1
operator|-
name|wq
operator|->
name|rq
operator|.
name|in_use
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_rq_produce
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u8
name|len16
parameter_list|)
block|{
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|rq
operator|.
name|pidx
operator|==
name|wq
operator|->
name|rq
operator|.
name|size
condition|)
name|wq
operator|->
name|rq
operator|.
name|pidx
operator|=
literal|0
expr_stmt|;
name|wq
operator|->
name|rq
operator|.
name|wq_pidx
operator|+=
name|DIV_ROUND_UP
argument_list|(
name|len16
operator|*
literal|16
argument_list|,
name|T4_EQ_ENTRY_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|wq
operator|->
name|rq
operator|.
name|wq_pidx
operator|>=
name|wq
operator|->
name|rq
operator|.
name|size
operator|*
name|T4_RQ_NUM_SLOTS
condition|)
name|wq
operator|->
name|rq
operator|.
name|wq_pidx
operator|%=
name|wq
operator|->
name|rq
operator|.
name|size
operator|*
name|T4_RQ_NUM_SLOTS
expr_stmt|;
if|if
condition|(
operator|!
name|wq
operator|->
name|error
condition|)
name|wq
operator|->
name|rq
operator|.
name|queue
index|[
name|wq
operator|->
name|rq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|host_pidx
operator|=
name|wq
operator|->
name|rq
operator|.
name|pidx
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_rq_consume
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|--
expr_stmt|;
name|wq
operator|->
name|rq
operator|.
name|msn
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|rq
operator|.
name|cidx
operator|==
name|wq
operator|->
name|rq
operator|.
name|size
condition|)
name|wq
operator|->
name|rq
operator|.
name|cidx
operator|=
literal|0
expr_stmt|;
name|assert
argument_list|(
operator|(
name|wq
operator|->
name|rq
operator|.
name|cidx
operator|!=
name|wq
operator|->
name|rq
operator|.
name|pidx
operator|)
operator|||
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wq
operator|->
name|error
condition|)
name|wq
operator|->
name|rq
operator|.
name|queue
index|[
name|wq
operator|->
name|rq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|host_cidx
operator|=
name|wq
operator|->
name|rq
operator|.
name|cidx
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_sq_empty
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|==
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_sq_full
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|==
operator|(
name|wq
operator|->
name|sq
operator|.
name|size
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|t4_sq_avail
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|size
operator|-
literal|1
operator|-
name|wq
operator|->
name|sq
operator|.
name|in_use
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_sq_onchip
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|flags
operator|&
name|T4_SQ_ONCHIP
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_sq_produce
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u8
name|len16
parameter_list|)
block|{
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|sq
operator|.
name|pidx
operator|==
name|wq
operator|->
name|sq
operator|.
name|size
condition|)
name|wq
operator|->
name|sq
operator|.
name|pidx
operator|=
literal|0
expr_stmt|;
name|wq
operator|->
name|sq
operator|.
name|wq_pidx
operator|+=
name|DIV_ROUND_UP
argument_list|(
name|len16
operator|*
literal|16
argument_list|,
name|T4_EQ_ENTRY_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|wq
operator|->
name|sq
operator|.
name|wq_pidx
operator|>=
name|wq
operator|->
name|sq
operator|.
name|size
operator|*
name|T4_SQ_NUM_SLOTS
condition|)
name|wq
operator|->
name|sq
operator|.
name|wq_pidx
operator|%=
name|wq
operator|->
name|sq
operator|.
name|size
operator|*
name|T4_SQ_NUM_SLOTS
expr_stmt|;
if|if
condition|(
operator|!
name|wq
operator|->
name|error
condition|)
block|{
comment|/* This write is only for debugging, the value does not matter 		 * for DMA */
name|wq
operator|->
name|sq
operator|.
name|queue
index|[
name|wq
operator|->
name|sq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|host_pidx
operator|=
operator|(
name|wq
operator|->
name|sq
operator|.
name|pidx
operator|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_sq_consume
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
name|assert
argument_list|(
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|>=
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|wq
operator|->
name|sq
operator|.
name|cidx
operator|==
name|wq
operator|->
name|sq
operator|.
name|flush_cidx
condition|)
name|wq
operator|->
name|sq
operator|.
name|flush_cidx
operator|=
operator|-
literal|1
expr_stmt|;
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|--
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|sq
operator|.
name|cidx
operator|==
name|wq
operator|->
name|sq
operator|.
name|size
condition|)
name|wq
operator|->
name|sq
operator|.
name|cidx
operator|=
literal|0
expr_stmt|;
name|assert
argument_list|(
operator|(
name|wq
operator|->
name|sq
operator|.
name|cidx
operator|!=
name|wq
operator|->
name|sq
operator|.
name|pidx
operator|)
operator|||
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wq
operator|->
name|error
condition|)
block|{
comment|/* This write is only for debugging, the value does not matter 		 * for DMA */
name|wq
operator|->
name|sq
operator|.
name|queue
index|[
name|wq
operator|->
name|sq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|host_cidx
operator|=
name|wq
operator|->
name|sq
operator|.
name|cidx
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* Copies to WC MMIO memory */
end_comment

begin_function
specifier|static
name|void
name|copy_wqe_to_udb
parameter_list|(
specifier|volatile
name|u32
modifier|*
name|udb_offset
parameter_list|,
name|void
modifier|*
name|wqe
parameter_list|)
block|{
name|u64
modifier|*
name|src
decl_stmt|,
modifier|*
name|dst
decl_stmt|;
name|int
name|len16
init|=
literal|4
decl_stmt|;
name|src
operator|=
operator|(
name|u64
operator|*
operator|)
name|wqe
expr_stmt|;
name|dst
operator|=
operator|(
name|u64
operator|*
operator|)
name|udb_offset
expr_stmt|;
while|while
condition|(
name|len16
condition|)
block|{
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
name|len16
operator|--
expr_stmt|;
block|}
block|}
end_function

begin_decl_stmt
specifier|extern
name|int
name|ma_wr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|t5_en_wc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|void
name|t4_ring_sq_db
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u16
name|inc
parameter_list|,
name|u8
name|t4
parameter_list|,
name|u8
name|len16
parameter_list|,
name|union
name|t4_wr
modifier|*
name|wqe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|t4
condition|)
block|{
name|mmio_wc_start
argument_list|()
expr_stmt|;
if|if
condition|(
name|t5_en_wc
operator|&&
name|inc
operator|==
literal|1
operator|&&
name|wq
operator|->
name|sq
operator|.
name|wc_reg_available
condition|)
block|{
name|PDBG
argument_list|(
literal|"%s: WC wq->sq.pidx = %d; len16=%d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|sq
operator|.
name|pidx
argument_list|,
name|len16
argument_list|)
expr_stmt|;
name|copy_wqe_to_udb
argument_list|(
name|wq
operator|->
name|sq
operator|.
name|udb
operator|+
literal|14
argument_list|,
name|wqe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDBG
argument_list|(
literal|"%s: DB wq->sq.pidx = %d; len16=%d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|sq
operator|.
name|pidx
argument_list|,
name|len16
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|QID_V
argument_list|(
name|wq
operator|->
name|sq
operator|.
name|bar2_qid
argument_list|)
operator||
name|PIDX_T5_V
argument_list|(
name|inc
argument_list|)
argument_list|,
name|wq
operator|->
name|sq
operator|.
name|udb
argument_list|)
expr_stmt|;
block|}
comment|/* udb is WC for> t4 devices */
name|mmio_flush_writes
argument_list|()
expr_stmt|;
return|return;
block|}
name|udma_to_device_barrier
argument_list|()
expr_stmt|;
if|if
condition|(
name|ma_wr
condition|)
block|{
if|if
condition|(
name|t4_sq_onchip
argument_list|(
name|wq
argument_list|)
condition|)
block|{
name|int
name|i
decl_stmt|;
name|mmio_wc_start
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
operator|*
operator|(
specifier|volatile
name|u32
operator|*
operator|)
operator|&
name|wq
operator|->
name|sq
operator|.
name|queue
index|[
name|wq
operator|->
name|sq
operator|.
name|size
index|]
operator|.
name|flits
index|[
literal|2
operator|+
name|i
index|]
operator|=
name|i
expr_stmt|;
name|mmio_flush_writes
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|t4_sq_onchip
argument_list|(
name|wq
argument_list|)
condition|)
block|{
name|int
name|i
decl_stmt|;
name|mmio_wc_start
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
comment|/* FIXME: What is this supposed to be doing? 				 * Writing to the same address multiple times 				 * with WC memory is not guarenteed to 				 * generate any more than one TLP. Why isn't 				 * writing to WC memory marked volatile? */
operator|*
operator|(
name|u32
operator|*
operator|)
operator|&
name|wq
operator|->
name|sq
operator|.
name|queue
index|[
name|wq
operator|->
name|sq
operator|.
name|size
index|]
operator|.
name|flits
index|[
literal|2
index|]
operator|=
name|i
expr_stmt|;
name|mmio_flush_writes
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* udb is UC for t4 devices */
name|writel
argument_list|(
name|QID_V
argument_list|(
name|wq
operator|->
name|sq
operator|.
name|qid
operator|&
name|wq
operator|->
name|qid_mask
argument_list|)
operator||
name|PIDX_V
argument_list|(
name|inc
argument_list|)
argument_list|,
name|wq
operator|->
name|sq
operator|.
name|udb
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_ring_rq_db
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u16
name|inc
parameter_list|,
name|u8
name|t4
parameter_list|,
name|u8
name|len16
parameter_list|,
name|union
name|t4_recv_wr
modifier|*
name|wqe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|t4
condition|)
block|{
name|mmio_wc_start
argument_list|()
expr_stmt|;
if|if
condition|(
name|t5_en_wc
operator|&&
name|inc
operator|==
literal|1
operator|&&
name|wq
operator|->
name|sq
operator|.
name|wc_reg_available
condition|)
block|{
name|PDBG
argument_list|(
literal|"%s: WC wq->rq.pidx = %d; len16=%d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|rq
operator|.
name|pidx
argument_list|,
name|len16
argument_list|)
expr_stmt|;
name|copy_wqe_to_udb
argument_list|(
name|wq
operator|->
name|rq
operator|.
name|udb
operator|+
literal|14
argument_list|,
name|wqe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDBG
argument_list|(
literal|"%s: DB wq->rq.pidx = %d; len16=%d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|rq
operator|.
name|pidx
argument_list|,
name|len16
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|QID_V
argument_list|(
name|wq
operator|->
name|rq
operator|.
name|bar2_qid
argument_list|)
operator||
name|PIDX_T5_V
argument_list|(
name|inc
argument_list|)
argument_list|,
name|wq
operator|->
name|rq
operator|.
name|udb
argument_list|)
expr_stmt|;
block|}
comment|/* udb is WC for> t4 devices */
name|mmio_flush_writes
argument_list|()
expr_stmt|;
return|return;
block|}
comment|/* udb is UC for t4 devices */
name|udma_to_device_barrier
argument_list|()
expr_stmt|;
name|writel
argument_list|(
name|QID_V
argument_list|(
name|wq
operator|->
name|rq
operator|.
name|qid
operator|&
name|wq
operator|->
name|qid_mask
argument_list|)
operator||
name|PIDX_V
argument_list|(
name|inc
argument_list|)
argument_list|,
name|wq
operator|->
name|rq
operator|.
name|udb
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_wq_in_error
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|error
operator|||
name|wq
operator|->
name|rq
operator|.
name|queue
index|[
name|wq
operator|->
name|rq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|qp_err
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_set_wq_in_error
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
name|wq
operator|->
name|rq
operator|.
name|queue
index|[
name|wq
operator|->
name|rq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|qp_err
operator|=
literal|1
expr_stmt|;
block|}
end_function

begin_decl_stmt
specifier|extern
name|int
name|c4iw_abi_version
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|t4_wq_db_enabled
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
comment|/* 	 * If iw_cxgb4 driver supports door bell drop recovery then its 	 * c4iw_abi_version would be greater than or equal to 2. In such 	 * case return the status of db_off flag to ring the kernel mode 	 * DB from user mode library. 	 */
if|if
condition|(
name|c4iw_abi_version
operator|>=
literal|2
condition|)
return|return
operator|!
operator|*
name|wq
operator|->
name|db_offp
return|;
else|else
return|return
literal|1
return|;
block|}
end_function

begin_struct
struct|struct
name|t4_cq
block|{
name|struct
name|t4_cqe
modifier|*
name|queue
decl_stmt|;
name|struct
name|t4_cqe
modifier|*
name|sw_queue
decl_stmt|;
name|struct
name|c4iw_rdev
modifier|*
name|rdev
decl_stmt|;
specifier|volatile
name|u32
modifier|*
name|ugts
decl_stmt|;
name|size_t
name|memsize
decl_stmt|;
name|u64
name|bits_type_ts
decl_stmt|;
name|u32
name|cqid
decl_stmt|;
name|u32
name|qid_mask
decl_stmt|;
name|u16
name|size
decl_stmt|;
comment|/* including status page */
name|u16
name|cidx
decl_stmt|;
name|u16
name|sw_pidx
decl_stmt|;
name|u16
name|sw_cidx
decl_stmt|;
name|u16
name|sw_in_use
decl_stmt|;
name|u16
name|cidx_inc
decl_stmt|;
name|u8
name|gen
decl_stmt|;
name|u8
name|error
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|t4_arm_cq
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|int
name|se
parameter_list|)
block|{
name|u32
name|val
decl_stmt|;
while|while
condition|(
name|cq
operator|->
name|cidx_inc
operator|>
name|CIDXINC_M
condition|)
block|{
name|val
operator|=
name|SEINTARM_V
argument_list|(
literal|0
argument_list|)
operator||
name|CIDXINC_V
argument_list|(
name|CIDXINC_M
argument_list|)
operator||
name|TIMERREG_V
argument_list|(
literal|7
argument_list|)
operator||
name|INGRESSQID_V
argument_list|(
name|cq
operator|->
name|cqid
operator|&
name|cq
operator|->
name|qid_mask
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|val
argument_list|,
name|cq
operator|->
name|ugts
argument_list|)
expr_stmt|;
name|cq
operator|->
name|cidx_inc
operator|-=
name|CIDXINC_M
expr_stmt|;
block|}
name|val
operator|=
name|SEINTARM_V
argument_list|(
name|se
argument_list|)
operator||
name|CIDXINC_V
argument_list|(
name|cq
operator|->
name|cidx_inc
argument_list|)
operator||
name|TIMERREG_V
argument_list|(
literal|6
argument_list|)
operator||
name|INGRESSQID_V
argument_list|(
name|cq
operator|->
name|cqid
operator|&
name|cq
operator|->
name|qid_mask
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|val
argument_list|,
name|cq
operator|->
name|ugts
argument_list|)
expr_stmt|;
name|cq
operator|->
name|cidx_inc
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_swcq_produce
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
name|cq
operator|->
name|sw_in_use
operator|++
expr_stmt|;
if|if
condition|(
name|cq
operator|->
name|sw_in_use
operator|==
name|cq
operator|->
name|size
condition|)
block|{
name|syslog
argument_list|(
name|LOG_NOTICE
argument_list|,
literal|"cxgb4 sw cq overflow cqid %u\n"
argument_list|,
name|cq
operator|->
name|cqid
argument_list|)
expr_stmt|;
name|cq
operator|->
name|error
operator|=
literal|1
expr_stmt|;
name|assert
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|cq
operator|->
name|sw_pidx
operator|==
name|cq
operator|->
name|size
condition|)
name|cq
operator|->
name|sw_pidx
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_swcq_consume
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
name|assert
argument_list|(
name|cq
operator|->
name|sw_in_use
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|cq
operator|->
name|sw_in_use
operator|--
expr_stmt|;
if|if
condition|(
operator|++
name|cq
operator|->
name|sw_cidx
operator|==
name|cq
operator|->
name|size
condition|)
name|cq
operator|->
name|sw_cidx
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_hwcq_consume
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
name|cq
operator|->
name|bits_type_ts
operator|=
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
operator|.
name|bits_type_ts
expr_stmt|;
if|if
condition|(
operator|++
name|cq
operator|->
name|cidx_inc
operator|==
operator|(
name|cq
operator|->
name|size
operator|>>
literal|4
operator|)
operator|||
name|cq
operator|->
name|cidx_inc
operator|==
name|CIDXINC_M
condition|)
block|{
name|uint32_t
name|val
decl_stmt|;
name|val
operator|=
name|SEINTARM_V
argument_list|(
literal|0
argument_list|)
operator||
name|CIDXINC_V
argument_list|(
name|cq
operator|->
name|cidx_inc
argument_list|)
operator||
name|TIMERREG_V
argument_list|(
literal|7
argument_list|)
operator||
name|INGRESSQID_V
argument_list|(
name|cq
operator|->
name|cqid
operator|&
name|cq
operator|->
name|qid_mask
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|val
argument_list|,
name|cq
operator|->
name|ugts
argument_list|)
expr_stmt|;
name|cq
operator|->
name|cidx_inc
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|cq
operator|->
name|cidx
operator|==
name|cq
operator|->
name|size
condition|)
block|{
name|cq
operator|->
name|cidx
operator|=
literal|0
expr_stmt|;
name|cq
operator|->
name|gen
operator|^=
literal|1
expr_stmt|;
block|}
operator|(
operator|(
expr|struct
name|t4_status_page
operator|*
operator|)
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|size
index|]
operator|)
operator|->
name|host_cidx
operator|=
name|cq
operator|->
name|cidx
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_valid_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t4_cqe
modifier|*
name|cqe
parameter_list|)
block|{
return|return
operator|(
name|CQE_GENBIT
argument_list|(
name|cqe
argument_list|)
operator|==
name|cq
operator|->
name|gen
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_next_hw_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t4_cqe
modifier|*
modifier|*
name|cqe
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|u16
name|prev_cidx
decl_stmt|;
if|if
condition|(
name|cq
operator|->
name|cidx
operator|==
literal|0
condition|)
name|prev_cidx
operator|=
name|cq
operator|->
name|size
operator|-
literal|1
expr_stmt|;
else|else
name|prev_cidx
operator|=
name|cq
operator|->
name|cidx
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|cq
operator|->
name|queue
index|[
name|prev_cidx
index|]
operator|.
name|bits_type_ts
operator|!=
name|cq
operator|->
name|bits_type_ts
condition|)
block|{
name|ret
operator|=
operator|-
name|EOVERFLOW
expr_stmt|;
name|syslog
argument_list|(
name|LOG_NOTICE
argument_list|,
literal|"cxgb4 cq overflow cqid %u\n"
argument_list|,
name|cq
operator|->
name|cqid
argument_list|)
expr_stmt|;
name|cq
operator|->
name|error
operator|=
literal|1
expr_stmt|;
name|assert
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t4_valid_cqe
argument_list|(
name|cq
argument_list|,
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
argument_list|)
condition|)
block|{
name|udma_from_device_barrier
argument_list|()
expr_stmt|;
operator|*
name|cqe
operator|=
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
else|else
name|ret
operator|=
operator|-
name|ENODATA
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|t4_cqe
modifier|*
name|t4_next_sw_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
if|if
condition|(
name|cq
operator|->
name|sw_in_use
operator|==
name|cq
operator|->
name|size
condition|)
block|{
name|syslog
argument_list|(
name|LOG_NOTICE
argument_list|,
literal|"cxgb4 sw cq overflow cqid %u\n"
argument_list|,
name|cq
operator|->
name|cqid
argument_list|)
expr_stmt|;
name|cq
operator|->
name|error
operator|=
literal|1
expr_stmt|;
name|assert
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|cq
operator|->
name|sw_in_use
condition|)
return|return
operator|&
name|cq
operator|->
name|sw_queue
index|[
name|cq
operator|->
name|sw_cidx
index|]
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_cq_notempty
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|sw_in_use
operator|||
name|t4_valid_cqe
argument_list|(
name|cq
argument_list|,
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_next_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t4_cqe
modifier|*
modifier|*
name|cqe
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cq
operator|->
name|error
condition|)
name|ret
operator|=
operator|-
name|ENODATA
expr_stmt|;
elseif|else
if|if
condition|(
name|cq
operator|->
name|sw_in_use
condition|)
operator|*
name|cqe
operator|=
operator|&
name|cq
operator|->
name|sw_queue
index|[
name|cq
operator|->
name|sw_cidx
index|]
expr_stmt|;
else|else
name|ret
operator|=
name|t4_next_hw_cqe
argument_list|(
name|cq
argument_list|,
name|cqe
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_cq_in_error
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
operator|(
operator|(
expr|struct
name|t4_status_page
operator|*
operator|)
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|size
index|]
operator|)
operator|->
name|qp_err
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_set_cq_in_error
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
operator|(
operator|(
expr|struct
name|t4_status_page
operator|*
operator|)
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|size
index|]
operator|)
operator|->
name|qp_err
operator|=
literal|1
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_reset_cq_in_error
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
operator|(
operator|(
expr|struct
name|t4_status_page
operator|*
operator|)
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|size
index|]
operator|)
operator|->
name|qp_err
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_struct
struct|struct
name|t4_dev_status_page
block|{
name|u8
name|db_off
decl_stmt|;
name|u8
name|wc_supported
decl_stmt|;
name|u16
name|pad2
decl_stmt|;
name|u32
name|pad3
decl_stmt|;
name|u64
name|qp_start
decl_stmt|;
name|u64
name|qp_size
decl_stmt|;
name|u64
name|cq_start
decl_stmt|;
name|u64
name|cq_size
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

end_unit

