begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004-2006 Intel Corporation.  All rights reserved.  * Copyright (c) 2004 Topspin Corporation.  All rights reserved.  * Copyright (c) 2004 Voltaire Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  * $Id$  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|CM_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|CM_H
end_define

begin_include
include|#
directive|include
file|<infiniband/verbs.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/sa.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<infiniband/types.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/endian.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
enum|enum
name|ib_cm_event_type
block|{
name|IB_CM_REQ_ERROR
block|,
name|IB_CM_REQ_RECEIVED
block|,
name|IB_CM_REP_ERROR
block|,
name|IB_CM_REP_RECEIVED
block|,
name|IB_CM_RTU_RECEIVED
block|,
name|IB_CM_USER_ESTABLISHED
block|,
name|IB_CM_DREQ_ERROR
block|,
name|IB_CM_DREQ_RECEIVED
block|,
name|IB_CM_DREP_RECEIVED
block|,
name|IB_CM_TIMEWAIT_EXIT
block|,
name|IB_CM_MRA_RECEIVED
block|,
name|IB_CM_REJ_RECEIVED
block|,
name|IB_CM_LAP_ERROR
block|,
name|IB_CM_LAP_RECEIVED
block|,
name|IB_CM_APR_RECEIVED
block|,
name|IB_CM_SIDR_REQ_ERROR
block|,
name|IB_CM_SIDR_REQ_RECEIVED
block|,
name|IB_CM_SIDR_REP_RECEIVED
block|}
enum|;
enum|enum
name|ib_cm_data_size
block|{
name|IB_CM_REQ_PRIVATE_DATA_SIZE
init|=
literal|92
block|,
name|IB_CM_MRA_PRIVATE_DATA_SIZE
init|=
literal|222
block|,
name|IB_CM_REJ_PRIVATE_DATA_SIZE
init|=
literal|148
block|,
name|IB_CM_REP_PRIVATE_DATA_SIZE
init|=
literal|196
block|,
name|IB_CM_RTU_PRIVATE_DATA_SIZE
init|=
literal|224
block|,
name|IB_CM_DREQ_PRIVATE_DATA_SIZE
init|=
literal|220
block|,
name|IB_CM_DREP_PRIVATE_DATA_SIZE
init|=
literal|224
block|,
name|IB_CM_REJ_ARI_LENGTH
init|=
literal|72
block|,
name|IB_CM_LAP_PRIVATE_DATA_SIZE
init|=
literal|168
block|,
name|IB_CM_APR_PRIVATE_DATA_SIZE
init|=
literal|148
block|,
name|IB_CM_APR_INFO_LENGTH
init|=
literal|72
block|,
name|IB_CM_SIDR_REQ_PRIVATE_DATA_SIZE
init|=
literal|216
block|,
name|IB_CM_SIDR_REP_PRIVATE_DATA_SIZE
init|=
literal|136
block|,
name|IB_CM_SIDR_REP_INFO_LENGTH
init|=
literal|72
block|}
enum|;
struct|struct
name|ib_cm_device
block|{
name|struct
name|ibv_context
modifier|*
name|device_context
decl_stmt|;
name|int
name|fd
decl_stmt|;
block|}
struct|;
struct|struct
name|ib_cm_id
block|{
name|void
modifier|*
name|context
decl_stmt|;
name|struct
name|ib_cm_device
modifier|*
name|device
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
block|}
struct|;
struct|struct
name|ib_cm_req_event_param
block|{
name|struct
name|ib_cm_id
modifier|*
name|listen_id
decl_stmt|;
name|uint8_t
name|port
decl_stmt|;
name|struct
name|ibv_sa_path_rec
modifier|*
name|primary_path
decl_stmt|;
name|struct
name|ibv_sa_path_rec
modifier|*
name|alternate_path
decl_stmt|;
name|__be64
name|remote_ca_guid
decl_stmt|;
name|uint32_t
name|remote_qkey
decl_stmt|;
name|uint32_t
name|remote_qpn
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
name|uint32_t
name|starting_psn
decl_stmt|;
name|uint8_t
name|responder_resources
decl_stmt|;
name|uint8_t
name|initiator_depth
decl_stmt|;
name|unsigned
name|int
name|local_cm_response_timeout
range|:
literal|5
decl_stmt|;
name|unsigned
name|int
name|flow_control
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|remote_cm_response_timeout
range|:
literal|5
decl_stmt|;
name|unsigned
name|int
name|retry_count
range|:
literal|3
decl_stmt|;
name|unsigned
name|int
name|rnr_retry_count
range|:
literal|3
decl_stmt|;
name|unsigned
name|int
name|srq
range|:
literal|1
decl_stmt|;
block|}
struct|;
struct|struct
name|ib_cm_rep_event_param
block|{
name|__be64
name|remote_ca_guid
decl_stmt|;
name|uint32_t
name|remote_qkey
decl_stmt|;
name|uint32_t
name|remote_qpn
decl_stmt|;
name|uint32_t
name|starting_psn
decl_stmt|;
name|uint8_t
name|responder_resources
decl_stmt|;
name|uint8_t
name|initiator_depth
decl_stmt|;
name|unsigned
name|int
name|target_ack_delay
range|:
literal|5
decl_stmt|;
name|unsigned
name|int
name|failover_accepted
range|:
literal|2
decl_stmt|;
name|unsigned
name|int
name|flow_control
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|rnr_retry_count
range|:
literal|3
decl_stmt|;
name|unsigned
name|int
name|srq
range|:
literal|1
decl_stmt|;
block|}
struct|;
enum|enum
name|ib_cm_rej_reason
block|{
name|IB_CM_REJ_NO_QP
init|=
literal|1
block|,
name|IB_CM_REJ_NO_EEC
init|=
literal|2
block|,
name|IB_CM_REJ_NO_RESOURCES
init|=
literal|3
block|,
name|IB_CM_REJ_TIMEOUT
init|=
literal|4
block|,
name|IB_CM_REJ_UNSUPPORTED
init|=
literal|5
block|,
name|IB_CM_REJ_INVALID_COMM_ID
init|=
literal|6
block|,
name|IB_CM_REJ_INVALID_COMM_INSTANCE
init|=
literal|7
block|,
name|IB_CM_REJ_INVALID_SERVICE_ID
init|=
literal|8
block|,
name|IB_CM_REJ_INVALID_TRANSPORT_TYPE
init|=
literal|9
block|,
name|IB_CM_REJ_STALE_CONN
init|=
literal|10
block|,
name|IB_CM_REJ_RDC_NOT_EXIST
init|=
literal|11
block|,
name|IB_CM_REJ_INVALID_GID
init|=
literal|12
block|,
name|IB_CM_REJ_INVALID_LID
init|=
literal|13
block|,
name|IB_CM_REJ_INVALID_SL
init|=
literal|14
block|,
name|IB_CM_REJ_INVALID_TRAFFIC_CLASS
init|=
literal|15
block|,
name|IB_CM_REJ_INVALID_HOP_LIMIT
init|=
literal|16
block|,
name|IB_CM_REJ_INVALID_PACKET_RATE
init|=
literal|17
block|,
name|IB_CM_REJ_INVALID_ALT_GID
init|=
literal|18
block|,
name|IB_CM_REJ_INVALID_ALT_LID
init|=
literal|19
block|,
name|IB_CM_REJ_INVALID_ALT_SL
init|=
literal|20
block|,
name|IB_CM_REJ_INVALID_ALT_TRAFFIC_CLASS
init|=
literal|21
block|,
name|IB_CM_REJ_INVALID_ALT_HOP_LIMIT
init|=
literal|22
block|,
name|IB_CM_REJ_INVALID_ALT_PACKET_RATE
init|=
literal|23
block|,
name|IB_CM_REJ_PORT_CM_REDIRECT
init|=
literal|24
block|,
name|IB_CM_REJ_PORT_REDIRECT
init|=
literal|25
block|,
name|IB_CM_REJ_INVALID_MTU
init|=
literal|26
block|,
name|IB_CM_REJ_INSUFFICIENT_RESP_RESOURCES
init|=
literal|27
block|,
name|IB_CM_REJ_CONSUMER_DEFINED
init|=
literal|28
block|,
name|IB_CM_REJ_INVALID_RNR_RETRY
init|=
literal|29
block|,
name|IB_CM_REJ_DUPLICATE_LOCAL_COMM_ID
init|=
literal|30
block|,
name|IB_CM_REJ_INVALID_CLASS_VERSION
init|=
literal|31
block|,
name|IB_CM_REJ_INVALID_FLOW_LABEL
init|=
literal|32
block|,
name|IB_CM_REJ_INVALID_ALT_FLOW_LABEL
init|=
literal|33
block|}
enum|;
struct|struct
name|ib_cm_rej_event_param
block|{
name|enum
name|ib_cm_rej_reason
name|reason
decl_stmt|;
name|void
modifier|*
name|ari
decl_stmt|;
name|uint8_t
name|ari_length
decl_stmt|;
block|}
struct|;
struct|struct
name|ib_cm_mra_event_param
block|{
name|uint8_t
name|service_timeout
decl_stmt|;
block|}
struct|;
struct|struct
name|ib_cm_lap_event_param
block|{
name|struct
name|ibv_sa_path_rec
modifier|*
name|alternate_path
decl_stmt|;
block|}
struct|;
enum|enum
name|ib_cm_apr_status
block|{
name|IB_CM_APR_SUCCESS
block|,
name|IB_CM_APR_INVALID_COMM_ID
block|,
name|IB_CM_APR_UNSUPPORTED
block|,
name|IB_CM_APR_REJECT
block|,
name|IB_CM_APR_REDIRECT
block|,
name|IB_CM_APR_IS_CURRENT
block|,
name|IB_CM_APR_INVALID_QPN_EECN
block|,
name|IB_CM_APR_INVALID_LID
block|,
name|IB_CM_APR_INVALID_GID
block|,
name|IB_CM_APR_INVALID_FLOW_LABEL
block|,
name|IB_CM_APR_INVALID_TCLASS
block|,
name|IB_CM_APR_INVALID_HOP_LIMIT
block|,
name|IB_CM_APR_INVALID_PACKET_RATE
block|,
name|IB_CM_APR_INVALID_SL
block|}
enum|;
struct|struct
name|ib_cm_apr_event_param
block|{
name|enum
name|ib_cm_apr_status
name|ap_status
decl_stmt|;
name|void
modifier|*
name|apr_info
decl_stmt|;
name|uint8_t
name|info_len
decl_stmt|;
block|}
struct|;
struct|struct
name|ib_cm_sidr_req_event_param
block|{
name|struct
name|ib_cm_id
modifier|*
name|listen_id
decl_stmt|;
name|uint8_t
name|port
decl_stmt|;
name|uint16_t
name|pkey
decl_stmt|;
block|}
struct|;
enum|enum
name|ib_cm_sidr_status
block|{
name|IB_SIDR_SUCCESS
block|,
name|IB_SIDR_UNSUPPORTED
block|,
name|IB_SIDR_REJECT
block|,
name|IB_SIDR_NO_QP
block|,
name|IB_SIDR_REDIRECT
block|,
name|IB_SIDR_UNSUPPORTED_VERSION
block|}
enum|;
struct|struct
name|ib_cm_sidr_rep_event_param
block|{
name|enum
name|ib_cm_sidr_status
name|status
decl_stmt|;
name|uint32_t
name|qkey
decl_stmt|;
name|uint32_t
name|qpn
decl_stmt|;
name|void
modifier|*
name|info
decl_stmt|;
name|uint8_t
name|info_len
decl_stmt|;
block|}
struct|;
struct|struct
name|ib_cm_event
block|{
name|struct
name|ib_cm_id
modifier|*
name|cm_id
decl_stmt|;
name|enum
name|ib_cm_event_type
name|event
decl_stmt|;
union|union
block|{
name|struct
name|ib_cm_req_event_param
name|req_rcvd
decl_stmt|;
name|struct
name|ib_cm_rep_event_param
name|rep_rcvd
decl_stmt|;
comment|/* No data for RTU received events. */
name|struct
name|ib_cm_rej_event_param
name|rej_rcvd
decl_stmt|;
name|struct
name|ib_cm_mra_event_param
name|mra_rcvd
decl_stmt|;
name|struct
name|ib_cm_lap_event_param
name|lap_rcvd
decl_stmt|;
name|struct
name|ib_cm_apr_event_param
name|apr_rcvd
decl_stmt|;
comment|/* No data for DREQ/DREP received events. */
name|struct
name|ib_cm_sidr_req_event_param
name|sidr_req_rcvd
decl_stmt|;
name|struct
name|ib_cm_sidr_rep_event_param
name|sidr_rep_rcvd
decl_stmt|;
name|enum
name|ibv_wc_status
name|send_status
decl_stmt|;
block|}
name|param
union|;
name|void
modifier|*
name|private_data
decl_stmt|;
block|}
struct|;
comment|/**  * ib_cm_get_event - Retrieves the next pending communications event,  *   if no event is pending waits for an event.  * @device: CM device to retrieve the event.  * @event: Allocated information about the next communication event.  *    Event should be freed using ib_cm_ack_event()  *  * IB_CM_REQ_RECEIVED and IB_CM_SIDR_REQ_RECEIVED communication events   * generated as a result of listen requests result in the allocation of a   * new @cm_id.   * Clients are responsible for destroying the new @cm_id.  For peer-to-peer  * IB_CM_REQ_RECEIVED and all other events, the returned @cm_id corresponds  * to a user's existing communication identifier.  */
name|int
name|ib_cm_get_event
parameter_list|(
name|struct
name|ib_cm_device
modifier|*
name|device
parameter_list|,
name|struct
name|ib_cm_event
modifier|*
modifier|*
name|event
parameter_list|)
function_decl|;
comment|/**  * ib_cm_ack_event - Free a communications event.  * @event: Event to be released.  *  * All events which are allocated by ib_cm_get_event() must be released,  * there should be a one-to-one correspondence between successful gets  * and puts.  */
name|int
name|ib_cm_ack_event
parameter_list|(
name|struct
name|ib_cm_event
modifier|*
name|event
parameter_list|)
function_decl|;
comment|/**  * ib_cm_open_device - Returns the device the CM uses to submit requests  *   and retrieve events, corresponding to the specified verbs device.  *  * The CM device contains the file descriptor that the CM uses to  * communicate with the kernel CM component.  The primary use of the  * file descriptor is to test for CM readiness events. When the CM  * becomes ready to READ there is a pending event ready, and a subsequent  * call to ib_cm_get_event will not block.  * Note: The user should not read or write directly to the CM file  *       descriptor, it will likely result in an error or unexpected  *       results.  */
name|struct
name|ib_cm_device
modifier|*
name|ib_cm_open_device
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|device_context
parameter_list|)
function_decl|;
comment|/**  * ib_cm_close_device - Close a CM device.  * @device: Device to close.  */
name|void
name|ib_cm_close_device
parameter_list|(
name|struct
name|ib_cm_device
modifier|*
name|device
parameter_list|)
function_decl|;
comment|/**  * ib_cm_create_id - Allocate a communication identifier.  *  * Communication identifiers are used to track connection states, service  * ID resolution requests, and listen requests.  */
name|int
name|ib_cm_create_id
parameter_list|(
name|struct
name|ib_cm_device
modifier|*
name|device
parameter_list|,
name|struct
name|ib_cm_id
modifier|*
modifier|*
name|cm_id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
comment|/**  * ib_cm_destroy_id - Destroy a connection identifier.  * @cm_id: Connection identifier to destroy.  */
name|int
name|ib_cm_destroy_id
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|)
function_decl|;
struct|struct
name|ib_cm_attr_param
block|{
name|__be64
name|service_id
decl_stmt|;
name|__be64
name|service_mask
decl_stmt|;
name|__be32
name|local_id
decl_stmt|;
name|__be32
name|remote_id
decl_stmt|;
block|}
struct|;
comment|/**  * ib_cm_attr_id - Get connection identifier attributes.  * @cm_id: Connection identifier to retrieve attributes.  * @param: Destination of retreived parameters.  *  * Not all parameters are valid during all connection states.  */
name|int
name|ib_cm_attr_id
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|ib_cm_attr_param
modifier|*
name|param
parameter_list|)
function_decl|;
define|#
directive|define
name|IB_CM_ASSIGN_SERVICE_ID_MASK
value|htobe64(0xFF00000000000000ULL)
define|#
directive|define
name|IB_CM_ASSIGN_SERVICE_ID
value|htobe64(0x0200000000000000ULL)
comment|/**  * ib_cm_listen - Initiates listening on the specified service ID for  *   connection and service ID resolution requests.  * @cm_id: Connection identifier associated with the listen request.  * @service_id: Service identifier matched against incoming connection  *   and service ID resolution requests.  The service ID should be specified  *   network-byte order.  * @service_mask: Mask applied to service ID used to listen across a  *   range of service IDs.  If set to 0, the service ID is matched  *   exactly.  */
name|int
name|ib_cm_listen
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|__be64
name|service_id
parameter_list|,
name|__be64
name|service_mask
parameter_list|)
function_decl|;
struct|struct
name|ib_cm_req_param
block|{
name|struct
name|ibv_sa_path_rec
modifier|*
name|primary_path
decl_stmt|;
name|struct
name|ibv_sa_path_rec
modifier|*
name|alternate_path
decl_stmt|;
name|__be64
name|service_id
decl_stmt|;
name|uint32_t
name|qp_num
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
name|uint32_t
name|starting_psn
decl_stmt|;
name|void
modifier|*
name|private_data
decl_stmt|;
name|uint8_t
name|private_data_len
decl_stmt|;
name|uint8_t
name|peer_to_peer
decl_stmt|;
name|uint8_t
name|responder_resources
decl_stmt|;
name|uint8_t
name|initiator_depth
decl_stmt|;
name|uint8_t
name|remote_cm_response_timeout
decl_stmt|;
name|uint8_t
name|flow_control
decl_stmt|;
name|uint8_t
name|local_cm_response_timeout
decl_stmt|;
name|uint8_t
name|retry_count
decl_stmt|;
name|uint8_t
name|rnr_retry_count
decl_stmt|;
name|uint8_t
name|max_cm_retries
decl_stmt|;
name|uint8_t
name|srq
decl_stmt|;
block|}
struct|;
comment|/**  * ib_cm_send_req - Sends a connection request to the remote node.  * @cm_id: Connection identifier that will be associated with the  *   connection request.  * @param: Connection request information needed to establish the  *   connection.  */
name|int
name|ib_cm_send_req
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|ib_cm_req_param
modifier|*
name|param
parameter_list|)
function_decl|;
struct|struct
name|ib_cm_rep_param
block|{
name|uint32_t
name|qp_num
decl_stmt|;
name|uint32_t
name|starting_psn
decl_stmt|;
name|void
modifier|*
name|private_data
decl_stmt|;
name|uint8_t
name|private_data_len
decl_stmt|;
name|uint8_t
name|responder_resources
decl_stmt|;
name|uint8_t
name|initiator_depth
decl_stmt|;
name|uint8_t
name|target_ack_delay
decl_stmt|;
name|uint8_t
name|failover_accepted
decl_stmt|;
name|uint8_t
name|flow_control
decl_stmt|;
name|uint8_t
name|rnr_retry_count
decl_stmt|;
name|uint8_t
name|srq
decl_stmt|;
block|}
struct|;
comment|/**  * ib_cm_send_rep - Sends a connection reply in response to a connection  *   request.  * @cm_id: Connection identifier that will be associated with the  *   connection request.  * @param: Connection reply information needed to establish the  *   connection.  */
name|int
name|ib_cm_send_rep
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|ib_cm_rep_param
modifier|*
name|param
parameter_list|)
function_decl|;
comment|/**  * ib_cm_send_rtu - Sends a connection ready to use message in response  *   to a connection reply message.  * @cm_id: Connection identifier associated with the connection request.  * @private_data: Optional user-defined private data sent with the  *   ready to use message.  * @private_data_len: Size of the private data buffer, in bytes.  */
name|int
name|ib_cm_send_rtu
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
comment|/**  * ib_cm_send_dreq - Sends a disconnection request for an existing  *   connection.  * @cm_id: Connection identifier associated with the connection being  *   released.  * @private_data: Optional user-defined private data sent with the  *   disconnection request message.  * @private_data_len: Size of the private data buffer, in bytes.  */
name|int
name|ib_cm_send_dreq
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
comment|/**  * ib_cm_send_drep - Sends a disconnection reply to a disconnection request.  * @cm_id: Connection identifier associated with the connection being  *   released.  * @private_data: Optional user-defined private data sent with the  *   disconnection reply message.  * @private_data_len: Size of the private data buffer, in bytes.  */
name|int
name|ib_cm_send_drep
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
comment|/**  * ib_cm_notify - Notifies the CM of an event reported to the consumer.  * @cm_id: Connection identifier to transition to established.  * @event: Type of event.  *  * This routine should be invoked by users to notify the CM of relevant  * communication events.  Events that should be reported to the CM and  * when to report them are:  *  * IBV_EVENT_COMM_EST - Used when a message is received on a connected  *    QP before an RTU has been received.  * IBV_EVENT_PATH_MIG - Notifies the CM that the connection has failed over  *   to the alternate path.  */
name|int
name|ib_cm_notify
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|enum
name|ibv_event_type
name|event
parameter_list|)
function_decl|;
comment|/**  * ib_cm_send_rej - Sends a connection rejection message to the  *   remote node.  * @cm_id: Connection identifier associated with the connection being  *   rejected.  * @reason: Reason for the connection request rejection.  * @ari: Optional additional rejection information.  * @ari_length: Size of the additional rejection information, in bytes.  * @private_data: Optional user-defined private data sent with the  *   rejection message.  * @private_data_len: Size of the private data buffer, in bytes.  */
name|int
name|ib_cm_send_rej
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|enum
name|ib_cm_rej_reason
name|reason
parameter_list|,
name|void
modifier|*
name|ari
parameter_list|,
name|uint8_t
name|ari_length
parameter_list|,
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
comment|/**  * ib_cm_send_mra - Sends a message receipt acknowledgement to a connection  *   message.  * @cm_id: Connection identifier associated with the connection message.  * @service_timeout: The maximum time required for the sender to reply to  *   to the connection message.  * @private_data: Optional user-defined private data sent with the  *   message receipt acknowledgement.  * @private_data_len: Size of the private data buffer, in bytes.  */
name|int
name|ib_cm_send_mra
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|uint8_t
name|service_timeout
parameter_list|,
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
comment|/**  * ib_cm_send_lap - Sends a load alternate path request.  * @cm_id: Connection identifier associated with the load alternate path  *   message.  * @alternate_path: A path record that identifies the alternate path to  *   load.  * @private_data: Optional user-defined private data sent with the  *   load alternate path message.  * @private_data_len: Size of the private data buffer, in bytes.  */
name|int
name|ib_cm_send_lap
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|ibv_sa_path_rec
modifier|*
name|alternate_path
parameter_list|,
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
comment|/**  * ib_cm_init_qp_attr - Initializes the QP attributes for use in transitioning  *   to a specified QP state.  * @cm_id: Communication identifier associated with the QP attributes to  *   initialize.  * @qp_attr: On input, specifies the desired QP state.  On output, the  *   mandatory and desired optional attributes will be set in order to  *   modify the QP to the specified state.  * @qp_attr_mask: The QP attribute mask that may be used to transition the  *   QP to the specified state.  *  * Users must set the @qp_attr->qp_state to the desired QP state.  This call  * will set all required attributes for the given transition, along with  * known optional attributes.  Users may override the attributes returned from  * this call before calling ib_modify_qp.  */
name|int
name|ib_cm_init_qp_attr
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|qp_attr
parameter_list|,
name|int
modifier|*
name|qp_attr_mask
parameter_list|)
function_decl|;
comment|/**  * ib_cm_send_apr - Sends an alternate path response message in response to  *   a load alternate path request.  * @cm_id: Connection identifier associated with the alternate path response.  * @status: Reply status sent with the alternate path response.  * @info: Optional additional information sent with the alternate path  *   response.  * @info_length: Size of the additional information, in bytes.  * @private_data: Optional user-defined private data sent with the  *   alternate path response message.  * @private_data_len: Size of the private data buffer, in bytes.  */
name|int
name|ib_cm_send_apr
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|enum
name|ib_cm_apr_status
name|status
parameter_list|,
name|void
modifier|*
name|info
parameter_list|,
name|uint8_t
name|info_length
parameter_list|,
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
struct|struct
name|ib_cm_sidr_req_param
block|{
name|struct
name|ibv_sa_path_rec
modifier|*
name|path
decl_stmt|;
name|__be64
name|service_id
decl_stmt|;
name|int
name|timeout_ms
decl_stmt|;
name|void
modifier|*
name|private_data
decl_stmt|;
name|uint8_t
name|private_data_len
decl_stmt|;
name|uint8_t
name|max_cm_retries
decl_stmt|;
block|}
struct|;
comment|/**  * ib_cm_send_sidr_req - Sends a service ID resolution request to the  *   remote node.  * @cm_id: Communication identifier that will be associated with the  *   service ID resolution request.  * @param: Service ID resolution request information.  */
name|int
name|ib_cm_send_sidr_req
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|ib_cm_sidr_req_param
modifier|*
name|param
parameter_list|)
function_decl|;
struct|struct
name|ib_cm_sidr_rep_param
block|{
name|uint32_t
name|qp_num
decl_stmt|;
name|uint32_t
name|qkey
decl_stmt|;
name|enum
name|ib_cm_sidr_status
name|status
decl_stmt|;
name|void
modifier|*
name|info
decl_stmt|;
name|uint8_t
name|info_length
decl_stmt|;
name|void
modifier|*
name|private_data
decl_stmt|;
name|uint8_t
name|private_data_len
decl_stmt|;
block|}
struct|;
comment|/**  * ib_cm_send_sidr_rep - Sends a service ID resolution reply to the  *   remote node.  * @cm_id: Communication identifier associated with the received service ID  *   resolution request.  * @param: Service ID resolution reply information.  */
name|int
name|ib_cm_send_sidr_rep
parameter_list|(
name|struct
name|ib_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|ib_cm_sidr_rep_param
modifier|*
name|param
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CM_H */
end_comment

end_unit

