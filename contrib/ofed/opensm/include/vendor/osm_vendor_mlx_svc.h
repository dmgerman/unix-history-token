begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004, 2005 Voltaire, Inc. All rights reserved.  * Copyright (c) 2002-2005 Mellanox Technologies LTD. All rights reserved.  * Copyright (c) 1996-2003 Intel Corporation. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OSMV_SVC_H_
end_ifndef

begin_define
define|#
directive|define
name|_OSMV_SVC_H_
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<iba/ib_types.h>
end_include

begin_include
include|#
directive|include
file|<vendor/osm_vendor_mlx_defs.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
value|extern "C" {
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
value|}
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__cplusplus */
end_comment

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_function
name|BEGIN_C_DECLS
specifier|inline
specifier|static
name|uint8_t
name|osmv_invert_method
parameter_list|(
name|IN
name|uint8_t
name|req_method
parameter_list|)
block|{
switch|switch
condition|(
name|req_method
condition|)
block|{
case|case
name|IB_MAD_METHOD_GET_RESP
case|:
comment|/* Not a 1-1 mapping! */
return|return
name|IB_MAD_METHOD_GET
return|;
case|case
name|IB_MAD_METHOD_GET
case|:
return|return
name|IB_MAD_METHOD_GET_RESP
return|;
case|case
name|IB_MAD_METHOD_SET
case|:
return|return
name|IB_MAD_METHOD_GET_RESP
return|;
case|case
name|IB_MAD_METHOD_GETTABLE_RESP
case|:
return|return
name|IB_MAD_METHOD_GETTABLE
return|;
case|case
name|IB_MAD_METHOD_GETTABLE
case|:
return|return
name|IB_MAD_METHOD_GETTABLE_RESP
return|;
case|case
name|IB_MAD_METHOD_GETMULTI_RESP
case|:
comment|/* Not a 1-1 mapping! */
return|return
name|IB_MAD_METHOD_GETMULTI
return|;
case|case
name|IB_MAD_METHOD_GETTRACETABLE
case|:
case|case
name|IB_MAD_METHOD_GETMULTI
case|:
return|return
name|IB_MAD_METHOD_GETMULTI_RESP
return|;
case|case
name|IB_MAD_METHOD_TRAP
case|:
return|return
name|IB_MAD_METHOD_TRAP_REPRESS
return|;
case|case
name|IB_MAD_METHOD_TRAP_REPRESS
case|:
return|return
name|IB_MAD_METHOD_TRAP
return|;
case|case
name|IB_MAD_METHOD_REPORT
case|:
return|return
name|IB_MAD_METHOD_REPORT_RESP
return|;
case|case
name|IB_MAD_METHOD_REPORT_RESP
case|:
return|return
name|IB_MAD_METHOD_REPORT
return|;
comment|/*  IB_MAD_METHOD_SEND does not have a response */
case|case
name|IB_MAD_METHOD_SEND
case|:
return|return
name|IB_MAD_METHOD_SEND
return|;
default|default:
name|CL_ASSERT
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
comment|/* Just make the compiler happy */
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_mad_is_rmpp
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|uint8_t
name|rmpp_flags
decl_stmt|;
name|CL_ASSERT
argument_list|(
name|NULL
operator|!=
name|p_mad
argument_list|)
expr_stmt|;
name|rmpp_flags
operator|=
operator|(
operator|(
name|ib_rmpp_mad_t
operator|*
operator|)
name|p_mad
operator|)
operator|->
name|rmpp_flags
expr_stmt|;
comment|/* HACK - JUST SA and DevMgt for now - need to add BIS and DevAdm */
if|if
condition|(
operator|(
name|p_mad
operator|->
name|mgmt_class
operator|!=
name|IB_MCLASS_SUBN_ADM
operator|)
operator|&&
operator|(
name|p_mad
operator|->
name|mgmt_class
operator|!=
name|IB_MCLASS_DEV_MGMT
operator|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
literal|0
operator|!=
operator|(
name|rmpp_flags
operator|&
name|IB_RMPP_FLAG_ACTIVE
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_mad_is_multi_resp
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|CL_ASSERT
argument_list|(
name|NULL
operator|!=
name|p_mad
argument_list|)
expr_stmt|;
return|return
operator|(
name|IB_MAD_METHOD_GETMULTI
operator|==
name|p_mad
operator|->
name|method
operator|||
name|IB_MAD_METHOD_GETTRACETABLE
operator|==
name|p_mad
operator|->
name|method
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_mad_is_sa
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|CL_ASSERT
argument_list|(
name|NULL
operator|!=
name|p_mad
argument_list|)
expr_stmt|;
return|return
operator|(
name|IB_MCLASS_SUBN_ADM
operator|==
name|p_mad
operator|->
name|mgmt_class
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_rmpp_is_abort_stop
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|uint8_t
name|rmpp_type
decl_stmt|;
name|CL_ASSERT
argument_list|(
name|p_mad
argument_list|)
expr_stmt|;
name|rmpp_type
operator|=
operator|(
operator|(
name|ib_rmpp_mad_t
operator|*
operator|)
name|p_mad
operator|)
operator|->
name|rmpp_type
expr_stmt|;
return|return
operator|(
name|IB_RMPP_TYPE_STOP
operator|==
name|rmpp_type
operator|||
name|IB_RMPP_TYPE_ABORT
operator|==
name|rmpp_type
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_rmpp_is_data
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|CL_ASSERT
argument_list|(
name|p_mad
argument_list|)
expr_stmt|;
return|return
operator|(
name|IB_RMPP_TYPE_DATA
operator|==
operator|(
operator|(
name|ib_rmpp_mad_t
operator|*
operator|)
name|p_mad
operator|)
operator|->
name|rmpp_type
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_rmpp_is_ack
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|CL_ASSERT
argument_list|(
name|p_mad
argument_list|)
expr_stmt|;
return|return
operator|(
name|IB_RMPP_TYPE_ACK
operator|==
operator|(
operator|(
name|ib_rmpp_mad_t
operator|*
operator|)
name|p_mad
operator|)
operator|->
name|rmpp_type
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_rmpp_is_first
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|uint8_t
name|rmpp_flags
decl_stmt|;
name|CL_ASSERT
argument_list|(
name|NULL
operator|!=
name|p_mad
argument_list|)
expr_stmt|;
name|rmpp_flags
operator|=
operator|(
operator|(
name|ib_rmpp_mad_t
operator|*
operator|)
name|p_mad
operator|)
operator|->
name|rmpp_flags
expr_stmt|;
return|return
operator|(
literal|0
operator|!=
operator|(
name|IB_RMPP_FLAG_FIRST
operator|&
name|rmpp_flags
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_rmpp_is_last
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|uint8_t
name|rmpp_flags
decl_stmt|;
name|CL_ASSERT
argument_list|(
name|NULL
operator|!=
name|p_mad
argument_list|)
expr_stmt|;
name|rmpp_flags
operator|=
operator|(
operator|(
name|ib_rmpp_mad_t
operator|*
operator|)
name|p_mad
operator|)
operator|->
name|rmpp_flags
expr_stmt|;
return|return
operator|(
literal|0
operator|!=
operator|(
name|IB_RMPP_FLAG_LAST
operator|&
name|rmpp_flags
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|uint8_t
modifier|*
name|osmv_mad_copy
parameter_list|(
name|IN
specifier|const
name|ib_mad_t
modifier|*
name|p_mad
parameter_list|)
block|{
name|uint8_t
modifier|*
name|p_copy
decl_stmt|;
name|CL_ASSERT
argument_list|(
name|p_mad
argument_list|)
expr_stmt|;
name|p_copy
operator|=
name|malloc
argument_list|(
name|MAD_BLOCK_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|NULL
operator|!=
name|p_copy
condition|)
block|{
name|memset
argument_list|(
name|p_copy
argument_list|,
literal|0
argument_list|,
name|MAD_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|p_copy
argument_list|,
name|p_mad
argument_list|,
name|MAD_BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
return|return
name|p_copy
return|;
block|}
end_function

begin_comment
comment|/* Should be passed externally from the Makefile */
end_comment

begin_comment
comment|/*  #define OSMV_RANDOM_DROP 1 */
end_comment

begin_define
define|#
directive|define
name|OSMV_DROP_RATE
value|0.3
end_define

begin_function
specifier|inline
specifier|static
name|boolean_t
name|osmv_random_drop
parameter_list|(
name|void
parameter_list|)
block|{
name|srand
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|/* Pick a new base */
return|return
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|double
operator|)
name|RAND_MAX
operator|<
name|OSMV_DROP_RATE
operator|)
return|;
block|}
end_function

begin_macro
name|END_C_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _OSMV_SVC_H_ */
end_comment

end_unit

