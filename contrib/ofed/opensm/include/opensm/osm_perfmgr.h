begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2007 The Regents of the University of California.  * Copyright (c) 2007-2009 Voltaire, Inc. All rights reserved.  * Copyright (c) 2009,2010 HNR Consulting. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OSM_PERFMGR_H_
end_ifndef

begin_define
define|#
directive|define
name|_OSM_PERFMGR_H_
end_define

begin_if
if|#
directive|if
name|HAVE_CONFIG_H
end_if

begin_include
include|#
directive|include
file|<config.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* HAVE_CONFIG_H */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|ENABLE_OSM_PERF_MGR
end_ifdef

begin_include
include|#
directive|include
file|<iba/ib_types.h>
end_include

begin_include
include|#
directive|include
file|<complib/cl_passivelock.h>
end_include

begin_include
include|#
directive|include
file|<complib/cl_event.h>
end_include

begin_include
include|#
directive|include
file|<complib/cl_timer.h>
end_include

begin_include
include|#
directive|include
file|<opensm/osm_subnet.h>
end_include

begin_include
include|#
directive|include
file|<opensm/osm_log.h>
end_include

begin_include
include|#
directive|include
file|<opensm/osm_perfmgr_db.h>
end_include

begin_include
include|#
directive|include
file|<opensm/osm_sm.h>
end_include

begin_include
include|#
directive|include
file|<opensm/osm_base.h>
end_include

begin_include
include|#
directive|include
file|<opensm/osm_event_plugin.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/****h* OpenSM/PerfMgr * NAME *	PerfMgr * * DESCRIPTION *       Performance manager thread which takes care of polling the fabric for *       Port counters values. * *	The PerfMgr object is thread safe. * * AUTHOR *	Ira Weiny, LLNL * *********/
define|#
directive|define
name|OSM_PERFMGR_DEFAULT_SWEEP_TIME_S
value|180
define|#
directive|define
name|OSM_PERFMGR_DEFAULT_DUMP_FILE
value|"opensm_port_counters.log"
define|#
directive|define
name|OSM_PERFMGR_DEFAULT_MAX_OUTSTANDING_QUERIES
value|500
define|#
directive|define
name|OSM_PERFMGR_DEFAULT_XMIT_WAIT_THRESHOLD
value|0x0000FFFF
comment|/****s* OpenSM: PerfMgr/osm_perfmgr_state_t */
typedef|typedef
enum|enum
block|{
name|PERFMGR_STATE_DISABLE
block|,
name|PERFMGR_STATE_ENABLED
block|,
name|PERFMGR_STATE_NO_DB
block|}
name|osm_perfmgr_state_t
typedef|;
comment|/****s* OpenSM: PerfMgr/osm_perfmgr_sweep_state_t */
typedef|typedef
enum|enum
block|{
name|PERFMGR_SWEEP_SLEEP
block|,
name|PERFMGR_SWEEP_ACTIVE
block|,
name|PERFMGR_SWEEP_SUSPENDED
block|,
name|PERFMGR_SWEEP_POST_PROCESSING
block|}
name|osm_perfmgr_sweep_state_t
typedef|;
typedef|typedef
struct|struct
name|monitored_port
block|{
name|uint16_t
name|pkey_ix
decl_stmt|;
name|ib_net16_t
name|orig_lid
decl_stmt|;
name|boolean_t
name|redirection
decl_stmt|;
name|boolean_t
name|valid
decl_stmt|;
comment|/* Redirection fields from ClassPortInfo */
name|ib_gid_t
name|gid
decl_stmt|;
name|ib_net16_t
name|lid
decl_stmt|;
name|ib_net16_t
name|pkey
decl_stmt|;
name|ib_net32_t
name|qp
decl_stmt|;
comment|/* ClassPortInfo fields */
name|boolean_t
name|cpi_valid
decl_stmt|;
name|ib_net16_t
name|cap_mask
decl_stmt|;
comment|/* Remote end connected to */
name|boolean_t
name|remote_valid
decl_stmt|;
name|uint64_t
name|remote_guid
decl_stmt|;
name|char
modifier|*
name|remote_name
decl_stmt|;
name|uint8_t
name|remote_port
decl_stmt|;
block|}
name|monitored_port_t
typedef|;
comment|/* Node to store information about nodes being monitored */
typedef|typedef
struct|struct
name|monitored_node
block|{
name|cl_map_item_t
name|map_item
decl_stmt|;
name|struct
name|monitored_node
modifier|*
name|next
decl_stmt|;
name|uint64_t
name|guid
decl_stmt|;
name|uint8_t
name|node_type
decl_stmt|;
name|boolean_t
name|esp0
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|uint32_t
name|num_ports
decl_stmt|;
name|monitored_port_t
name|port
index|[
literal|1
index|]
decl_stmt|;
block|}
name|monitored_node_t
typedef|;
struct_decl|struct
name|osm_opensm
struct_decl|;
comment|/****s* OpenSM: PerfMgr/osm_perfmgr_t *  This object should be treated as opaque and should *  be manipulated only through the provided functions. */
typedef|typedef
struct|struct
name|osm_perfmgr
block|{
name|cl_timer_t
name|sweep_timer
decl_stmt|;
name|struct
name|osm_opensm
modifier|*
name|osm
decl_stmt|;
name|osm_subn_t
modifier|*
name|subn
decl_stmt|;
name|osm_sm_t
modifier|*
name|sm
decl_stmt|;
name|osm_log_t
modifier|*
name|log
decl_stmt|;
name|osm_mad_pool_t
modifier|*
name|mad_pool
decl_stmt|;
name|atomic32_t
name|trans_id
decl_stmt|;
name|osm_vendor_t
modifier|*
name|vendor
decl_stmt|;
name|osm_bind_handle_t
name|bind_handle
decl_stmt|;
name|cl_disp_reg_handle_t
name|pc_disp_h
decl_stmt|;
name|osm_perfmgr_state_t
name|state
decl_stmt|;
name|osm_perfmgr_sweep_state_t
name|sweep_state
decl_stmt|;
name|cl_spinlock_t
name|lock
decl_stmt|;
name|uint16_t
name|sweep_time_s
decl_stmt|;
name|perfmgr_db_t
modifier|*
name|db
decl_stmt|;
name|atomic32_t
name|outstanding_queries
decl_stmt|;
comment|/* this along with sig_query */
name|cl_event_t
name|sig_query
decl_stmt|;
comment|/* will throttle our queries */
name|uint32_t
name|max_outstanding_queries
decl_stmt|;
name|boolean_t
name|ignore_cas
decl_stmt|;
name|cl_qmap_t
name|monitored_map
decl_stmt|;
comment|/* map the nodes being tracked */
name|monitored_node_t
modifier|*
name|remove_list
decl_stmt|;
name|ib_net64_t
name|port_guid
decl_stmt|;
name|int16_t
name|local_port
decl_stmt|;
name|int
name|rm_nodes
decl_stmt|;
name|boolean_t
name|query_cpi
decl_stmt|;
name|boolean_t
name|xmit_wait_log
decl_stmt|;
name|uint32_t
name|xmit_wait_threshold
decl_stmt|;
block|}
name|osm_perfmgr_t
typedef|;
comment|/* * FIELDS *	subn *	      Subnet object for this subnet. * *	log *	      Pointer to the log object. * *	mad_pool *	      Pointer to the MAD pool. * *	mad_ctrl *	      Mad Controller *********/
comment|/****f* OpenSM: Creation Functions */
name|void
name|osm_perfmgr_shutdown
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|)
function_decl|;
name|void
name|osm_perfmgr_destroy
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|)
function_decl|;
comment|/****f* OpenSM: Inline accessor functions */
specifier|inline
specifier|static
name|void
name|osm_perfmgr_set_state
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|,
name|osm_perfmgr_state_t
name|state
parameter_list|)
block|{
name|p_perfmgr
operator|->
name|state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|PERFMGR_STATE_ENABLED
condition|)
block|{
name|cl_timer_start
argument_list|(
operator|&
name|p_perfmgr
operator|->
name|sweep_timer
argument_list|,
name|p_perfmgr
operator|->
name|sweep_time_s
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cl_timer_stop
argument_list|(
operator|&
name|p_perfmgr
operator|->
name|sweep_timer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|inline
specifier|static
name|osm_perfmgr_state_t
name|osm_perfmgr_get_state
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|perfmgr
parameter_list|)
block|{
return|return
name|perfmgr
operator|->
name|state
return|;
block|}
specifier|inline
specifier|static
name|void
name|osm_perfmgr_set_rm_nodes
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|perfmgr
parameter_list|,
name|int
name|rm_nodes
parameter_list|)
block|{
name|perfmgr
operator|->
name|rm_nodes
operator|=
name|rm_nodes
expr_stmt|;
block|}
specifier|inline
specifier|static
name|int
name|osm_perfmgr_get_rm_nodes
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|perfmgr
parameter_list|)
block|{
return|return
name|perfmgr
operator|->
name|rm_nodes
return|;
block|}
specifier|inline
specifier|static
name|void
name|osm_perfmgr_set_query_cpi
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|perfmgr
parameter_list|,
name|int
name|query_cpi
parameter_list|)
block|{
name|perfmgr
operator|->
name|query_cpi
operator|=
name|query_cpi
expr_stmt|;
block|}
specifier|inline
specifier|static
name|int
name|osm_perfmgr_get_query_cpi
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|perfmgr
parameter_list|)
block|{
return|return
name|perfmgr
operator|->
name|query_cpi
return|;
block|}
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|osm_perfmgr_get_state_str
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|)
block|{
switch|switch
condition|(
name|p_perfmgr
operator|->
name|state
condition|)
block|{
case|case
name|PERFMGR_STATE_DISABLE
case|:
return|return
literal|"Disabled"
return|;
break|break;
case|case
name|PERFMGR_STATE_ENABLED
case|:
return|return
literal|"Enabled"
return|;
break|break;
case|case
name|PERFMGR_STATE_NO_DB
case|:
return|return
literal|"No Database"
return|;
break|break;
block|}
return|return
literal|"UNKNOWN"
return|;
block|}
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|osm_perfmgr_get_sweep_state_str
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|perfmgr
parameter_list|)
block|{
switch|switch
condition|(
name|perfmgr
operator|->
name|sweep_state
condition|)
block|{
case|case
name|PERFMGR_SWEEP_SLEEP
case|:
return|return
literal|"Sleeping"
return|;
break|break;
case|case
name|PERFMGR_SWEEP_ACTIVE
case|:
return|return
literal|"Active"
return|;
break|break;
case|case
name|PERFMGR_SWEEP_SUSPENDED
case|:
return|return
literal|"Suspended"
return|;
break|break;
case|case
name|PERFMGR_SWEEP_POST_PROCESSING
case|:
return|return
literal|"PostProcessing"
return|;
break|break;
block|}
return|return
literal|"UNKNOWN"
return|;
block|}
specifier|inline
specifier|static
name|void
name|osm_perfmgr_set_sweep_time_s
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|,
name|uint16_t
name|time_s
parameter_list|)
block|{
name|p_perfmgr
operator|->
name|sweep_time_s
operator|=
name|time_s
expr_stmt|;
name|osm_sm_signal
argument_list|(
name|p_perfmgr
operator|->
name|sm
argument_list|,
name|OSM_SIGNAL_PERFMGR_SWEEP
argument_list|)
expr_stmt|;
block|}
specifier|inline
specifier|static
name|uint16_t
name|osm_perfmgr_get_sweep_time_s
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|)
block|{
return|return
name|p_perfmgr
operator|->
name|sweep_time_s
return|;
block|}
specifier|inline
specifier|static
name|unsigned
name|osm_perfmgr_delete_inactive
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|pm
parameter_list|)
block|{
name|unsigned
name|rc
decl_stmt|;
name|perfmgr_db_delete_inactive
argument_list|(
name|pm
operator|->
name|db
argument_list|,
operator|&
name|rc
argument_list|)
expr_stmt|;
return|return
operator|(
name|rc
operator|)
return|;
block|}
name|void
name|osm_perfmgr_clear_counters
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|)
function_decl|;
name|void
name|osm_perfmgr_dump_counters
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|,
name|perfmgr_db_dump_t
name|dump_type
parameter_list|)
function_decl|;
name|void
name|osm_perfmgr_print_counters
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|pm
parameter_list|,
name|char
modifier|*
name|nodename
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|char
modifier|*
name|port
parameter_list|,
name|int
name|err_only
parameter_list|)
function_decl|;
name|void
name|osm_perfmgr_update_nodename
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|pm
parameter_list|,
name|uint64_t
name|node_guid
parameter_list|,
name|char
modifier|*
name|nodename
parameter_list|)
function_decl|;
name|ib_api_status_t
name|osm_perfmgr_bind
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|p_perfmgr
parameter_list|,
name|ib_net64_t
name|port_guid
parameter_list|)
function_decl|;
name|void
name|osm_perfmgr_process
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|pm
parameter_list|)
function_decl|;
comment|/****f* OpenSM: PerfMgr/osm_perfmgr_init */
name|ib_api_status_t
name|osm_perfmgr_init
parameter_list|(
name|osm_perfmgr_t
modifier|*
name|perfmgr
parameter_list|,
name|struct
name|osm_opensm
modifier|*
name|osm
parameter_list|,
specifier|const
name|osm_subn_opt_t
modifier|*
name|p_opt
parameter_list|)
function_decl|;
comment|/* * PARAMETERS *	perfmgr *		[in] Pointer to an osm_perfmgr_t object to initialize. * *	osm *		[in] Pointer to the OpenSM object. * *	p_opt *		[in] Pointer to the subnet options structure. * * RETURN VALUES *	IB_SUCCESS if the PerfMgr object was initialized successfully. *********/
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ENABLE_OSM_PERF_MGR */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _OSM_PERFMGR_H_ */
end_comment

end_unit

