begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2009 Voltaire, Inc. All rights reserved.  * Copyright (c) 2008 Lawrence Livermore National Lab.  All rights reserved.  * Copyright (c) 2010-2011 Mellanox Technologies LTD.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IBNETDISC_H_
end_ifndef

begin_define
define|#
directive|define
name|_IBNETDISC_H_
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/mad.h>
end_include

begin_include
include|#
directive|include
file|<iba/ib_types.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/ibnetdisc_osd.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|ibnd_chassis
struct_decl|;
comment|/* forward declare */
struct_decl|struct
name|ibnd_port
struct_decl|;
comment|/* forward declare */
define|#
directive|define
name|CHASSIS_TYPE_SIZE
value|20
comment|/** =========================================================================  * Node  */
typedef|typedef
struct|struct
name|ibnd_node
block|{
name|struct
name|ibnd_node
modifier|*
name|next
decl_stmt|;
comment|/* all node list in fabric */
name|ib_portid_t
name|path_portid
decl_stmt|;
comment|/* path from "from_node" */
comment|/* NOTE: this is not valid on a fabric 					 * read from a cache file */
name|uint16_t
name|smalid
decl_stmt|;
name|uint8_t
name|smalmc
decl_stmt|;
comment|/* quick cache of switchinfo below */
name|int
name|smaenhsp0
decl_stmt|;
comment|/* use libibmad decoder functions for switchinfo */
name|uint8_t
name|switchinfo
index|[
name|IB_SMP_DATA_SIZE
index|]
decl_stmt|;
comment|/* quick cache of info below */
name|uint64_t
name|guid
decl_stmt|;
name|int
name|type
decl_stmt|;
name|int
name|numports
decl_stmt|;
comment|/* use libibmad decoder functions for info */
name|uint8_t
name|info
index|[
name|IB_SMP_DATA_SIZE
index|]
decl_stmt|;
name|char
name|nodedesc
index|[
name|IB_SMP_DATA_SIZE
index|]
decl_stmt|;
name|struct
name|ibnd_port
modifier|*
modifier|*
name|ports
decl_stmt|;
comment|/* array of ports, indexed by port number 					   ports[1] == port 1, 					   ports[2] == port 2, 					   etc... 					   Any port in the array MAY BE NULL! 					   Most notable is non-switches have no 					   port 0 therefore node.ports[0] == NULL 					   for those nodes */
comment|/* chassis info */
name|struct
name|ibnd_node
modifier|*
name|next_chassis_node
decl_stmt|;
comment|/* next node in ibnd_chassis_t->nodes */
name|struct
name|ibnd_chassis
modifier|*
name|chassis
decl_stmt|;
comment|/* if != NULL the chassis this node belongs to */
name|unsigned
name|char
name|ch_type
decl_stmt|;
name|char
name|ch_type_str
index|[
name|CHASSIS_TYPE_SIZE
index|]
decl_stmt|;
name|unsigned
name|char
name|ch_anafanum
decl_stmt|;
name|unsigned
name|char
name|ch_slotnum
decl_stmt|;
name|unsigned
name|char
name|ch_slot
decl_stmt|;
comment|/* internal use only */
name|unsigned
name|char
name|ch_found
decl_stmt|;
name|struct
name|ibnd_node
modifier|*
name|htnext
decl_stmt|;
comment|/* hash table list */
name|struct
name|ibnd_node
modifier|*
name|type_next
decl_stmt|;
comment|/* next based on type */
block|}
name|ibnd_node_t
typedef|;
comment|/** =========================================================================  * Port  */
typedef|typedef
struct|struct
name|ibnd_port
block|{
name|uint64_t
name|guid
decl_stmt|;
name|int
name|portnum
decl_stmt|;
name|int
name|ext_portnum
decl_stmt|;
comment|/* optional if != 0 external port num */
name|ibnd_node_t
modifier|*
name|node
decl_stmt|;
comment|/* node this port belongs to */
name|struct
name|ibnd_port
modifier|*
name|remoteport
decl_stmt|;
comment|/* null if SMA, or does not exist */
comment|/* quick cache of info below */
name|uint16_t
name|base_lid
decl_stmt|;
name|uint8_t
name|lmc
decl_stmt|;
comment|/* use libibmad decoder functions for info */
name|uint8_t
name|info
index|[
name|IB_SMP_DATA_SIZE
index|]
decl_stmt|;
name|uint8_t
name|ext_info
index|[
name|IB_SMP_DATA_SIZE
index|]
decl_stmt|;
comment|/* internal use only */
name|struct
name|ibnd_port
modifier|*
name|htnext
decl_stmt|;
block|}
name|ibnd_port_t
typedef|;
comment|/** =========================================================================  * Chassis  */
typedef|typedef
struct|struct
name|ibnd_chassis
block|{
name|struct
name|ibnd_chassis
modifier|*
name|next
decl_stmt|;
name|uint64_t
name|chassisguid
decl_stmt|;
name|unsigned
name|char
name|chassisnum
decl_stmt|;
comment|/* generic grouping by SystemImageGUID */
name|unsigned
name|char
name|nodecount
decl_stmt|;
name|ibnd_node_t
modifier|*
name|nodes
decl_stmt|;
comment|/* specific to voltaire type nodes */
define|#
directive|define
name|SPINES_MAX_NUM
value|18
define|#
directive|define
name|LINES_MAX_NUM
value|36
name|ibnd_node_t
modifier|*
name|spinenode
index|[
name|SPINES_MAX_NUM
operator|+
literal|1
index|]
decl_stmt|;
name|ibnd_node_t
modifier|*
name|linenode
index|[
name|LINES_MAX_NUM
operator|+
literal|1
index|]
decl_stmt|;
block|}
name|ibnd_chassis_t
typedef|;
define|#
directive|define
name|HTSZ
value|137
comment|/* define config flags */
define|#
directive|define
name|IBND_CONFIG_MLX_EPI
value|(1<< 0)
typedef|typedef
struct|struct
name|ibnd_config
block|{
name|unsigned
name|max_smps
decl_stmt|;
name|unsigned
name|show_progress
decl_stmt|;
name|unsigned
name|max_hops
decl_stmt|;
name|unsigned
name|debug
decl_stmt|;
name|unsigned
name|timeout_ms
decl_stmt|;
name|unsigned
name|retries
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint64_t
name|mkey
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|44
index|]
decl_stmt|;
block|}
name|ibnd_config_t
typedef|;
comment|/** =========================================================================  * Fabric  * Main fabric object which is returned and represents the data discovered  */
typedef|typedef
struct|struct
name|ibnd_fabric
block|{
comment|/* the node the discover was initiated from 	 * "from" parameter in ibnd_discover_fabric 	 * or by default the node you ar running on 	 */
name|ibnd_node_t
modifier|*
name|from_node
decl_stmt|;
name|int
name|from_portnum
decl_stmt|;
comment|/* NULL term list of all nodes in the fabric */
name|ibnd_node_t
modifier|*
name|nodes
decl_stmt|;
comment|/* NULL terminated list of all chassis found in the fabric */
name|ibnd_chassis_t
modifier|*
name|chassis
decl_stmt|;
name|unsigned
name|maxhops_discovered
decl_stmt|;
name|unsigned
name|total_mads_used
decl_stmt|;
comment|/* internal use only */
name|ibnd_node_t
modifier|*
name|nodestbl
index|[
name|HTSZ
index|]
decl_stmt|;
name|ibnd_port_t
modifier|*
name|portstbl
index|[
name|HTSZ
index|]
decl_stmt|;
name|ibnd_node_t
modifier|*
name|switches
decl_stmt|;
name|ibnd_node_t
modifier|*
name|ch_adapters
decl_stmt|;
name|ibnd_node_t
modifier|*
name|routers
decl_stmt|;
block|}
name|ibnd_fabric_t
typedef|;
comment|/** =========================================================================  * Initialization (fabric operations)  */
name|IBND_EXPORT
name|ibnd_fabric_t
modifier|*
name|ibnd_discover_fabric
parameter_list|(
name|char
modifier|*
name|ca_name
parameter_list|,
name|int
name|ca_port
parameter_list|,
name|ib_portid_t
modifier|*
name|from
parameter_list|,
name|struct
name|ibnd_config
modifier|*
name|config
parameter_list|)
function_decl|;
comment|/** 	 * ca_name: (optional) name of the CA to use 	 * ca_port: (optional) CA port to use 	 * from: (optional) specify the node to start scanning from. 	 *       If NULL start from the CA/CA port specified 	 * config: (optional) additional config options for the scan 	 */
name|IBND_EXPORT
name|void
name|ibnd_destroy_fabric
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|ibnd_fabric_t
modifier|*
name|ibnd_load_fabric
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|int
name|ibnd_cache_fabric
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
function_decl|;
define|#
directive|define
name|IBND_CACHE_FABRIC_FLAG_DEFAULT
value|0x0000
define|#
directive|define
name|IBND_CACHE_FABRIC_FLAG_NO_OVERWRITE
value|0x0001
comment|/** =========================================================================  * Node operations  */
name|IBND_EXPORT
name|ibnd_node_t
modifier|*
name|ibnd_find_node_guid
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|uint64_t
name|guid
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|ibnd_node_t
modifier|*
name|ibnd_find_node_dr
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|char
modifier|*
name|dr_str
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|ibnd_iter_node_func_t
function_decl|)
parameter_list|(
name|ibnd_node_t
modifier|*
name|node
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|void
name|ibnd_iter_nodes
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|ibnd_iter_node_func_t
name|func
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|void
name|ibnd_iter_nodes_type
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|ibnd_iter_node_func_t
name|func
parameter_list|,
name|int
name|node_type
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
comment|/** =========================================================================  * Port operations  */
name|IBND_EXPORT
name|ibnd_port_t
modifier|*
name|ibnd_find_port_guid
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|uint64_t
name|guid
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|ibnd_port_t
modifier|*
name|ibnd_find_port_dr
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|char
modifier|*
name|dr_str
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|ibnd_port_t
modifier|*
name|ibnd_find_port_lid
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|ibnd_iter_port_func_t
function_decl|)
parameter_list|(
name|ibnd_port_t
modifier|*
name|port
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|void
name|ibnd_iter_ports
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|ibnd_iter_port_func_t
name|func
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
comment|/** =========================================================================  * Chassis queries  */
name|IBND_EXPORT
name|uint64_t
name|ibnd_get_chassis_guid
parameter_list|(
name|ibnd_fabric_t
modifier|*
name|fabric
parameter_list|,
name|unsigned
name|char
name|chassisnum
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|char
modifier|*
name|ibnd_get_chassis_type
parameter_list|(
name|ibnd_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|char
modifier|*
name|ibnd_get_chassis_slot_str
parameter_list|(
name|ibnd_node_t
modifier|*
name|node
parameter_list|,
name|char
modifier|*
name|str
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|int
name|ibnd_is_xsigo_guid
parameter_list|(
name|uint64_t
name|guid
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|int
name|ibnd_is_xsigo_tca
parameter_list|(
name|uint64_t
name|guid
parameter_list|)
function_decl|;
name|IBND_EXPORT
name|int
name|ibnd_is_xsigo_hca
parameter_list|(
name|uint64_t
name|guid
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _IBNETDISC_H_ */
end_comment

end_unit

