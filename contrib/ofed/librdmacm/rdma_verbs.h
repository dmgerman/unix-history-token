begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2010-2014 Intel Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|RDMA_VERBS_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|RDMA_VERBS_H
end_define

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/verbs.h>
end_include

begin_include
include|#
directive|include
file|<rdma/rdma_cma.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
specifier|static
specifier|inline
name|int
name|rdma_seterrno
parameter_list|(
name|int
name|ret
parameter_list|)
block|{
if|if
condition|(
name|ret
condition|)
block|{
name|errno
operator|=
name|ret
expr_stmt|;
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/*  * Shared receive queues.  */
name|int
name|rdma_create_srq
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_srq_init_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
name|rdma_create_srq_ex
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|ibv_srq_init_attr_ex
modifier|*
name|attr
parameter_list|)
function_decl|;
name|void
name|rdma_destroy_srq
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/*  * Memory registration helpers.  */
specifier|static
specifier|inline
name|struct
name|ibv_mr
modifier|*
name|rdma_reg_msgs
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|)
block|{
return|return
name|ibv_reg_mr
argument_list|(
name|id
operator|->
name|pd
argument_list|,
name|addr
argument_list|,
name|length
argument_list|,
name|IBV_ACCESS_LOCAL_WRITE
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|struct
name|ibv_mr
modifier|*
name|rdma_reg_read
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|)
block|{
return|return
name|ibv_reg_mr
argument_list|(
name|id
operator|->
name|pd
argument_list|,
name|addr
argument_list|,
name|length
argument_list|,
name|IBV_ACCESS_LOCAL_WRITE
operator||
name|IBV_ACCESS_REMOTE_READ
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|struct
name|ibv_mr
modifier|*
name|rdma_reg_write
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|)
block|{
return|return
name|ibv_reg_mr
argument_list|(
name|id
operator|->
name|pd
argument_list|,
name|addr
argument_list|,
name|length
argument_list|,
name|IBV_ACCESS_LOCAL_WRITE
operator||
name|IBV_ACCESS_REMOTE_WRITE
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_dereg_mr
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|)
block|{
return|return
name|rdma_seterrno
argument_list|(
name|ibv_dereg_mr
argument_list|(
name|mr
argument_list|)
argument_list|)
return|;
block|}
comment|/*  * Vectored send, receive, and RDMA operations.  * Support multiple scatter-gather entries.  */
specifier|static
specifier|inline
name|int
name|rdma_post_recvv
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_sge
modifier|*
name|sgl
parameter_list|,
name|int
name|nsge
parameter_list|)
block|{
name|struct
name|ibv_recv_wr
name|wr
decl_stmt|,
modifier|*
name|bad
decl_stmt|;
name|wr
operator|.
name|wr_id
operator|=
operator|(
name|uintptr_t
operator|)
name|context
expr_stmt|;
name|wr
operator|.
name|next
operator|=
name|NULL
expr_stmt|;
name|wr
operator|.
name|sg_list
operator|=
name|sgl
expr_stmt|;
name|wr
operator|.
name|num_sge
operator|=
name|nsge
expr_stmt|;
if|if
condition|(
name|id
operator|->
name|srq
condition|)
return|return
name|rdma_seterrno
argument_list|(
name|ibv_post_srq_recv
argument_list|(
name|id
operator|->
name|srq
argument_list|,
operator|&
name|wr
argument_list|,
operator|&
name|bad
argument_list|)
argument_list|)
return|;
else|else
return|return
name|rdma_seterrno
argument_list|(
name|ibv_post_recv
argument_list|(
name|id
operator|->
name|qp
argument_list|,
operator|&
name|wr
argument_list|,
operator|&
name|bad
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_post_sendv
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_sge
modifier|*
name|sgl
parameter_list|,
name|int
name|nsge
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|ibv_send_wr
name|wr
decl_stmt|,
modifier|*
name|bad
decl_stmt|;
name|wr
operator|.
name|wr_id
operator|=
operator|(
name|uintptr_t
operator|)
name|context
expr_stmt|;
name|wr
operator|.
name|next
operator|=
name|NULL
expr_stmt|;
name|wr
operator|.
name|sg_list
operator|=
name|sgl
expr_stmt|;
name|wr
operator|.
name|num_sge
operator|=
name|nsge
expr_stmt|;
name|wr
operator|.
name|opcode
operator|=
name|IBV_WR_SEND
expr_stmt|;
name|wr
operator|.
name|send_flags
operator|=
name|flags
expr_stmt|;
return|return
name|rdma_seterrno
argument_list|(
name|ibv_post_send
argument_list|(
name|id
operator|->
name|qp
argument_list|,
operator|&
name|wr
argument_list|,
operator|&
name|bad
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_post_readv
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_sge
modifier|*
name|sgl
parameter_list|,
name|int
name|nsge
parameter_list|,
name|int
name|flags
parameter_list|,
name|uint64_t
name|remote_addr
parameter_list|,
name|uint32_t
name|rkey
parameter_list|)
block|{
name|struct
name|ibv_send_wr
name|wr
decl_stmt|,
modifier|*
name|bad
decl_stmt|;
name|wr
operator|.
name|wr_id
operator|=
operator|(
name|uintptr_t
operator|)
name|context
expr_stmt|;
name|wr
operator|.
name|next
operator|=
name|NULL
expr_stmt|;
name|wr
operator|.
name|sg_list
operator|=
name|sgl
expr_stmt|;
name|wr
operator|.
name|num_sge
operator|=
name|nsge
expr_stmt|;
name|wr
operator|.
name|opcode
operator|=
name|IBV_WR_RDMA_READ
expr_stmt|;
name|wr
operator|.
name|send_flags
operator|=
name|flags
expr_stmt|;
name|wr
operator|.
name|wr
operator|.
name|rdma
operator|.
name|remote_addr
operator|=
name|remote_addr
expr_stmt|;
name|wr
operator|.
name|wr
operator|.
name|rdma
operator|.
name|rkey
operator|=
name|rkey
expr_stmt|;
return|return
name|rdma_seterrno
argument_list|(
name|ibv_post_send
argument_list|(
name|id
operator|->
name|qp
argument_list|,
operator|&
name|wr
argument_list|,
operator|&
name|bad
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_post_writev
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_sge
modifier|*
name|sgl
parameter_list|,
name|int
name|nsge
parameter_list|,
name|int
name|flags
parameter_list|,
name|uint64_t
name|remote_addr
parameter_list|,
name|uint32_t
name|rkey
parameter_list|)
block|{
name|struct
name|ibv_send_wr
name|wr
decl_stmt|,
modifier|*
name|bad
decl_stmt|;
name|wr
operator|.
name|wr_id
operator|=
operator|(
name|uintptr_t
operator|)
name|context
expr_stmt|;
name|wr
operator|.
name|next
operator|=
name|NULL
expr_stmt|;
name|wr
operator|.
name|sg_list
operator|=
name|sgl
expr_stmt|;
name|wr
operator|.
name|num_sge
operator|=
name|nsge
expr_stmt|;
name|wr
operator|.
name|opcode
operator|=
name|IBV_WR_RDMA_WRITE
expr_stmt|;
name|wr
operator|.
name|send_flags
operator|=
name|flags
expr_stmt|;
name|wr
operator|.
name|wr
operator|.
name|rdma
operator|.
name|remote_addr
operator|=
name|remote_addr
expr_stmt|;
name|wr
operator|.
name|wr
operator|.
name|rdma
operator|.
name|rkey
operator|=
name|rkey
expr_stmt|;
return|return
name|rdma_seterrno
argument_list|(
name|ibv_post_send
argument_list|(
name|id
operator|->
name|qp
argument_list|,
operator|&
name|wr
argument_list|,
operator|&
name|bad
argument_list|)
argument_list|)
return|;
block|}
comment|/*  * Simple send, receive, and RDMA calls.  */
specifier|static
specifier|inline
name|int
name|rdma_post_recv
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|)
block|{
name|struct
name|ibv_sge
name|sge
decl_stmt|;
name|assert
argument_list|(
operator|(
name|addr
operator|>=
name|mr
operator|->
name|addr
operator|)
operator|&&
operator|(
operator|(
operator|(
name|uint8_t
operator|*
operator|)
name|addr
operator|+
name|length
operator|)
operator|<=
operator|(
operator|(
name|uint8_t
operator|*
operator|)
name|mr
operator|->
name|addr
operator|+
name|mr
operator|->
name|length
operator|)
operator|)
argument_list|)
expr_stmt|;
name|sge
operator|.
name|addr
operator|=
operator|(
name|uint64_t
operator|)
operator|(
name|uintptr_t
operator|)
name|addr
expr_stmt|;
name|sge
operator|.
name|length
operator|=
operator|(
name|uint32_t
operator|)
name|length
expr_stmt|;
name|sge
operator|.
name|lkey
operator|=
name|mr
operator|->
name|lkey
expr_stmt|;
return|return
name|rdma_post_recvv
argument_list|(
name|id
argument_list|,
name|context
argument_list|,
operator|&
name|sge
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_post_send
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|ibv_sge
name|sge
decl_stmt|;
name|sge
operator|.
name|addr
operator|=
operator|(
name|uint64_t
operator|)
operator|(
name|uintptr_t
operator|)
name|addr
expr_stmt|;
name|sge
operator|.
name|length
operator|=
operator|(
name|uint32_t
operator|)
name|length
expr_stmt|;
name|sge
operator|.
name|lkey
operator|=
name|mr
condition|?
name|mr
operator|->
name|lkey
else|:
literal|0
expr_stmt|;
return|return
name|rdma_post_sendv
argument_list|(
name|id
argument_list|,
name|context
argument_list|,
operator|&
name|sge
argument_list|,
literal|1
argument_list|,
name|flags
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_post_read
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|,
name|int
name|flags
parameter_list|,
name|uint64_t
name|remote_addr
parameter_list|,
name|uint32_t
name|rkey
parameter_list|)
block|{
name|struct
name|ibv_sge
name|sge
decl_stmt|;
name|sge
operator|.
name|addr
operator|=
operator|(
name|uint64_t
operator|)
operator|(
name|uintptr_t
operator|)
name|addr
expr_stmt|;
name|sge
operator|.
name|length
operator|=
operator|(
name|uint32_t
operator|)
name|length
expr_stmt|;
name|sge
operator|.
name|lkey
operator|=
name|mr
operator|->
name|lkey
expr_stmt|;
return|return
name|rdma_post_readv
argument_list|(
name|id
argument_list|,
name|context
argument_list|,
operator|&
name|sge
argument_list|,
literal|1
argument_list|,
name|flags
argument_list|,
name|remote_addr
argument_list|,
name|rkey
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_post_write
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|,
name|int
name|flags
parameter_list|,
name|uint64_t
name|remote_addr
parameter_list|,
name|uint32_t
name|rkey
parameter_list|)
block|{
name|struct
name|ibv_sge
name|sge
decl_stmt|;
name|sge
operator|.
name|addr
operator|=
operator|(
name|uint64_t
operator|)
operator|(
name|uintptr_t
operator|)
name|addr
expr_stmt|;
name|sge
operator|.
name|length
operator|=
operator|(
name|uint32_t
operator|)
name|length
expr_stmt|;
name|sge
operator|.
name|lkey
operator|=
name|mr
condition|?
name|mr
operator|->
name|lkey
else|:
literal|0
expr_stmt|;
return|return
name|rdma_post_writev
argument_list|(
name|id
argument_list|,
name|context
argument_list|,
operator|&
name|sge
argument_list|,
literal|1
argument_list|,
name|flags
argument_list|,
name|remote_addr
argument_list|,
name|rkey
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_post_ud_send
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|ibv_ah
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|remote_qpn
parameter_list|)
block|{
name|struct
name|ibv_send_wr
name|wr
decl_stmt|,
modifier|*
name|bad
decl_stmt|;
name|struct
name|ibv_sge
name|sge
decl_stmt|;
name|sge
operator|.
name|addr
operator|=
operator|(
name|uint64_t
operator|)
operator|(
name|uintptr_t
operator|)
name|addr
expr_stmt|;
name|sge
operator|.
name|length
operator|=
operator|(
name|uint32_t
operator|)
name|length
expr_stmt|;
name|sge
operator|.
name|lkey
operator|=
name|mr
condition|?
name|mr
operator|->
name|lkey
else|:
literal|0
expr_stmt|;
name|wr
operator|.
name|wr_id
operator|=
operator|(
name|uintptr_t
operator|)
name|context
expr_stmt|;
name|wr
operator|.
name|next
operator|=
name|NULL
expr_stmt|;
name|wr
operator|.
name|sg_list
operator|=
operator|&
name|sge
expr_stmt|;
name|wr
operator|.
name|num_sge
operator|=
literal|1
expr_stmt|;
name|wr
operator|.
name|opcode
operator|=
name|IBV_WR_SEND
expr_stmt|;
name|wr
operator|.
name|send_flags
operator|=
name|flags
expr_stmt|;
name|wr
operator|.
name|wr
operator|.
name|ud
operator|.
name|ah
operator|=
name|ah
expr_stmt|;
name|wr
operator|.
name|wr
operator|.
name|ud
operator|.
name|remote_qpn
operator|=
name|remote_qpn
expr_stmt|;
name|wr
operator|.
name|wr
operator|.
name|ud
operator|.
name|remote_qkey
operator|=
name|RDMA_UDP_QKEY
expr_stmt|;
return|return
name|rdma_seterrno
argument_list|(
name|ibv_post_send
argument_list|(
name|id
operator|->
name|qp
argument_list|,
operator|&
name|wr
argument_list|,
operator|&
name|bad
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_get_send_comp
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|)
block|{
name|struct
name|ibv_cq
modifier|*
name|cq
decl_stmt|;
name|void
modifier|*
name|context
decl_stmt|;
name|int
name|ret
decl_stmt|;
do|do
block|{
name|ret
operator|=
name|ibv_poll_cq
argument_list|(
name|id
operator|->
name|send_cq
argument_list|,
literal|1
argument_list|,
name|wc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
break|break;
name|ret
operator|=
name|ibv_req_notify_cq
argument_list|(
name|id
operator|->
name|send_cq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
return|return
name|rdma_seterrno
argument_list|(
name|ret
argument_list|)
return|;
name|ret
operator|=
name|ibv_poll_cq
argument_list|(
name|id
operator|->
name|send_cq
argument_list|,
literal|1
argument_list|,
name|wc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
break|break;
name|ret
operator|=
name|ibv_get_cq_event
argument_list|(
name|id
operator|->
name|send_cq_channel
argument_list|,
operator|&
name|cq
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
return|return
name|ret
return|;
name|assert
argument_list|(
name|cq
operator|==
name|id
operator|->
name|send_cq
operator|&&
name|context
operator|==
name|id
argument_list|)
expr_stmt|;
name|ibv_ack_cq_events
argument_list|(
name|id
operator|->
name|send_cq
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|1
condition|)
do|;
return|return
operator|(
name|ret
operator|<
literal|0
operator|)
condition|?
name|rdma_seterrno
argument_list|(
name|ret
argument_list|)
else|:
name|ret
return|;
block|}
specifier|static
specifier|inline
name|int
name|rdma_get_recv_comp
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|)
block|{
name|struct
name|ibv_cq
modifier|*
name|cq
decl_stmt|;
name|void
modifier|*
name|context
decl_stmt|;
name|int
name|ret
decl_stmt|;
do|do
block|{
name|ret
operator|=
name|ibv_poll_cq
argument_list|(
name|id
operator|->
name|recv_cq
argument_list|,
literal|1
argument_list|,
name|wc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
break|break;
name|ret
operator|=
name|ibv_req_notify_cq
argument_list|(
name|id
operator|->
name|recv_cq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
return|return
name|rdma_seterrno
argument_list|(
name|ret
argument_list|)
return|;
name|ret
operator|=
name|ibv_poll_cq
argument_list|(
name|id
operator|->
name|recv_cq
argument_list|,
literal|1
argument_list|,
name|wc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
break|break;
name|ret
operator|=
name|ibv_get_cq_event
argument_list|(
name|id
operator|->
name|recv_cq_channel
argument_list|,
operator|&
name|cq
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
return|return
name|ret
return|;
name|assert
argument_list|(
name|cq
operator|==
name|id
operator|->
name|recv_cq
operator|&&
name|context
operator|==
name|id
argument_list|)
expr_stmt|;
name|ibv_ack_cq_events
argument_list|(
name|id
operator|->
name|recv_cq
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|1
condition|)
do|;
return|return
operator|(
name|ret
operator|<
literal|0
operator|)
condition|?
name|rdma_seterrno
argument_list|(
name|ret
argument_list|)
else|:
name|ret
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* RDMA_CMA_H */
end_comment

end_unit

