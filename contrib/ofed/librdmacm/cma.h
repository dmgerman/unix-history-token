begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005-2014 Intel Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|CMA_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|CMA_H
end_define

begin_include
include|#
directive|include
file|<config.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/endian.h>
end_include

begin_include
include|#
directive|include
file|<semaphore.h>
end_include

begin_include
include|#
directive|include
file|<stdatomic.h>
end_include

begin_include
include|#
directive|include
file|<rdma/rdma_cma.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/ib.h>
end_include

begin_define
define|#
directive|define
name|PFX
value|"librdmacm: "
end_define

begin_comment
comment|/*  * Fast synchronization for low contention locking.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|sem_t
name|sem
decl_stmt|;
atomic|_Atomic
argument_list|(
name|int
argument_list|)
name|cnt
decl_stmt|;
block|}
name|fastlock_t
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|void
name|fastlock_init
parameter_list|(
name|fastlock_t
modifier|*
name|lock
parameter_list|)
block|{
name|sem_init
argument_list|(
operator|&
name|lock
operator|->
name|sem
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_store
argument_list|(
operator|&
name|lock
operator|->
name|cnt
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|fastlock_destroy
parameter_list|(
name|fastlock_t
modifier|*
name|lock
parameter_list|)
block|{
name|sem_destroy
argument_list|(
operator|&
name|lock
operator|->
name|sem
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|fastlock_acquire
parameter_list|(
name|fastlock_t
modifier|*
name|lock
parameter_list|)
block|{
if|if
condition|(
name|atomic_fetch_add
argument_list|(
operator|&
name|lock
operator|->
name|cnt
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
condition|)
name|sem_wait
argument_list|(
operator|&
name|lock
operator|->
name|sem
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|fastlock_release
parameter_list|(
name|fastlock_t
modifier|*
name|lock
parameter_list|)
block|{
if|if
condition|(
name|atomic_fetch_sub
argument_list|(
operator|&
name|lock
operator|->
name|cnt
argument_list|,
literal|1
argument_list|)
operator|>
literal|1
condition|)
name|sem_post
argument_list|(
operator|&
name|lock
operator|->
name|sem
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|__be16
name|ucma_get_port
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ucma_addrlen
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ucma_set_sid
parameter_list|(
name|enum
name|rdma_port_space
name|ps
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|struct
name|sockaddr_ib
modifier|*
name|sib
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ucma_max_qpsize
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ucma_complete
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ucma_shutdown
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ERR
parameter_list|(
name|int
name|err
parameter_list|)
block|{
name|errno
operator|=
name|err
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function_decl
name|int
name|ucma_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|af_ib_support
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|RAI_ROUTEONLY
value|0x01000000
end_define

begin_function_decl
name|void
name|ucma_ib_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ucma_ib_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ucma_ib_resolve
parameter_list|(
name|struct
name|rdma_addrinfo
modifier|*
modifier|*
name|rai
parameter_list|,
specifier|const
name|struct
name|rdma_addrinfo
modifier|*
name|hints
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ib_connect_hdr
block|{
name|uint8_t
name|cma_version
decl_stmt|;
name|uint8_t
name|ip_version
decl_stmt|;
comment|/* IP version: 7:4 */
name|uint16_t
name|port
decl_stmt|;
name|uint32_t
name|src_addr
index|[
literal|4
index|]
decl_stmt|;
name|uint32_t
name|dst_addr
index|[
literal|4
index|]
decl_stmt|;
define|#
directive|define
name|cma_src_ip4
value|src_addr[3]
define|#
directive|define
name|cma_src_ip6
value|src_addr[0]
define|#
directive|define
name|cma_dst_ip4
value|dst_addr[3]
define|#
directive|define
name|cma_dst_ip6
value|dst_addr[0]
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CMA_H */
end_comment

end_unit

