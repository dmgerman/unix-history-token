begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Voltaire Inc.  All rights reserved.  * Copyright (c) 2005-2014 Intel Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|RDMA_CMA_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|RDMA_CMA_H
end_define

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/verbs.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/sa.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Upon receiving a device removal event, users must destroy the associated  * RDMA identifier and release all resources allocated with the device.  */
enum|enum
name|rdma_cm_event_type
block|{
name|RDMA_CM_EVENT_ADDR_RESOLVED
block|,
name|RDMA_CM_EVENT_ADDR_ERROR
block|,
name|RDMA_CM_EVENT_ROUTE_RESOLVED
block|,
name|RDMA_CM_EVENT_ROUTE_ERROR
block|,
name|RDMA_CM_EVENT_CONNECT_REQUEST
block|,
name|RDMA_CM_EVENT_CONNECT_RESPONSE
block|,
name|RDMA_CM_EVENT_CONNECT_ERROR
block|,
name|RDMA_CM_EVENT_UNREACHABLE
block|,
name|RDMA_CM_EVENT_REJECTED
block|,
name|RDMA_CM_EVENT_ESTABLISHED
block|,
name|RDMA_CM_EVENT_DISCONNECTED
block|,
name|RDMA_CM_EVENT_DEVICE_REMOVAL
block|,
name|RDMA_CM_EVENT_MULTICAST_JOIN
block|,
name|RDMA_CM_EVENT_MULTICAST_ERROR
block|,
name|RDMA_CM_EVENT_ADDR_CHANGE
block|,
name|RDMA_CM_EVENT_TIMEWAIT_EXIT
block|}
enum|;
enum|enum
name|rdma_port_space
block|{
name|RDMA_PS_IPOIB
init|=
literal|0x0002
block|,
name|RDMA_PS_TCP
init|=
literal|0x0106
block|,
name|RDMA_PS_UDP
init|=
literal|0x0111
block|,
name|RDMA_PS_IB
init|=
literal|0x013F
block|, }
enum|;
define|#
directive|define
name|RDMA_IB_IP_PS_MASK
value|0xFFFFFFFFFFFF0000ULL
define|#
directive|define
name|RDMA_IB_IP_PORT_MASK
value|0x000000000000FFFFULL
define|#
directive|define
name|RDMA_IB_IP_PS_TCP
value|0x0000000001060000ULL
define|#
directive|define
name|RDMA_IB_IP_PS_UDP
value|0x0000000001110000ULL
define|#
directive|define
name|RDMA_IB_PS_IB
value|0x00000000013F0000ULL
comment|/*  * Global qkey value for UDP QPs and multicast groups created via the   * RDMA CM.  */
define|#
directive|define
name|RDMA_UDP_QKEY
value|0x01234567
struct|struct
name|rdma_ib_addr
block|{
name|union
name|ibv_gid
name|sgid
decl_stmt|;
name|union
name|ibv_gid
name|dgid
decl_stmt|;
name|__be16
name|pkey
decl_stmt|;
block|}
struct|;
struct|struct
name|rdma_addr
block|{
union|union
block|{
name|struct
name|sockaddr
name|src_addr
decl_stmt|;
name|struct
name|sockaddr_in
name|src_sin
decl_stmt|;
name|struct
name|sockaddr_in6
name|src_sin6
decl_stmt|;
name|struct
name|sockaddr_storage
name|src_storage
decl_stmt|;
block|}
union|;
union|union
block|{
name|struct
name|sockaddr
name|dst_addr
decl_stmt|;
name|struct
name|sockaddr_in
name|dst_sin
decl_stmt|;
name|struct
name|sockaddr_in6
name|dst_sin6
decl_stmt|;
name|struct
name|sockaddr_storage
name|dst_storage
decl_stmt|;
block|}
union|;
union|union
block|{
name|struct
name|rdma_ib_addr
name|ibaddr
decl_stmt|;
block|}
name|addr
union|;
block|}
struct|;
struct|struct
name|rdma_route
block|{
name|struct
name|rdma_addr
name|addr
decl_stmt|;
name|struct
name|ibv_sa_path_rec
modifier|*
name|path_rec
decl_stmt|;
name|int
name|num_paths
decl_stmt|;
block|}
struct|;
struct|struct
name|rdma_event_channel
block|{
name|int
name|fd
decl_stmt|;
block|}
struct|;
struct|struct
name|rdma_cm_id
block|{
name|struct
name|ibv_context
modifier|*
name|verbs
decl_stmt|;
name|struct
name|rdma_event_channel
modifier|*
name|channel
decl_stmt|;
name|void
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_qp
modifier|*
name|qp
decl_stmt|;
name|struct
name|rdma_route
name|route
decl_stmt|;
name|enum
name|rdma_port_space
name|ps
decl_stmt|;
name|uint8_t
name|port_num
decl_stmt|;
name|struct
name|rdma_cm_event
modifier|*
name|event
decl_stmt|;
name|struct
name|ibv_comp_channel
modifier|*
name|send_cq_channel
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|send_cq
decl_stmt|;
name|struct
name|ibv_comp_channel
modifier|*
name|recv_cq_channel
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|recv_cq
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
block|}
struct|;
enum|enum
block|{
name|RDMA_MAX_RESP_RES
init|=
literal|0xFF
block|,
name|RDMA_MAX_INIT_DEPTH
init|=
literal|0xFF
block|}
enum|;
struct|struct
name|rdma_conn_param
block|{
specifier|const
name|void
modifier|*
name|private_data
decl_stmt|;
name|uint8_t
name|private_data_len
decl_stmt|;
name|uint8_t
name|responder_resources
decl_stmt|;
name|uint8_t
name|initiator_depth
decl_stmt|;
name|uint8_t
name|flow_control
decl_stmt|;
name|uint8_t
name|retry_count
decl_stmt|;
comment|/* ignored when accepting */
name|uint8_t
name|rnr_retry_count
decl_stmt|;
comment|/* Fields below ignored if a QP is created on the rdma_cm_id. */
name|uint8_t
name|srq
decl_stmt|;
name|uint32_t
name|qp_num
decl_stmt|;
block|}
struct|;
struct|struct
name|rdma_ud_param
block|{
specifier|const
name|void
modifier|*
name|private_data
decl_stmt|;
name|uint8_t
name|private_data_len
decl_stmt|;
name|struct
name|ibv_ah_attr
name|ah_attr
decl_stmt|;
name|uint32_t
name|qp_num
decl_stmt|;
name|uint32_t
name|qkey
decl_stmt|;
block|}
struct|;
struct|struct
name|rdma_cm_event
block|{
name|struct
name|rdma_cm_id
modifier|*
name|id
decl_stmt|;
name|struct
name|rdma_cm_id
modifier|*
name|listen_id
decl_stmt|;
name|enum
name|rdma_cm_event_type
name|event
decl_stmt|;
name|int
name|status
decl_stmt|;
union|union
block|{
name|struct
name|rdma_conn_param
name|conn
decl_stmt|;
name|struct
name|rdma_ud_param
name|ud
decl_stmt|;
block|}
name|param
union|;
block|}
struct|;
define|#
directive|define
name|RAI_PASSIVE
value|0x00000001
define|#
directive|define
name|RAI_NUMERICHOST
value|0x00000002
define|#
directive|define
name|RAI_NOROUTE
value|0x00000004
define|#
directive|define
name|RAI_FAMILY
value|0x00000008
struct|struct
name|rdma_addrinfo
block|{
name|int
name|ai_flags
decl_stmt|;
name|int
name|ai_family
decl_stmt|;
name|int
name|ai_qp_type
decl_stmt|;
name|int
name|ai_port_space
decl_stmt|;
name|socklen_t
name|ai_src_len
decl_stmt|;
name|socklen_t
name|ai_dst_len
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|ai_src_addr
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|ai_dst_addr
decl_stmt|;
name|char
modifier|*
name|ai_src_canonname
decl_stmt|;
name|char
modifier|*
name|ai_dst_canonname
decl_stmt|;
name|size_t
name|ai_route_len
decl_stmt|;
name|void
modifier|*
name|ai_route
decl_stmt|;
name|size_t
name|ai_connect_len
decl_stmt|;
name|void
modifier|*
name|ai_connect
decl_stmt|;
name|struct
name|rdma_addrinfo
modifier|*
name|ai_next
decl_stmt|;
block|}
struct|;
comment|/**  * rdma_create_event_channel - Open a channel used to report communication events.  * Description:  *   Asynchronous events are reported to users through event channels.  Each  *   event channel maps to a file descriptor.  * Notes:  *   All created event channels must be destroyed by calling  *   rdma_destroy_event_channel.  Users should call rdma_get_cm_event to  *   retrieve events on an event channel.  * See also:  *   rdma_get_cm_event, rdma_destroy_event_channel  */
name|struct
name|rdma_event_channel
modifier|*
name|rdma_create_event_channel
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * rdma_destroy_event_channel - Close an event communication channel.  * @channel: The communication channel to destroy.  * Description:  *   Release all resources associated with an event channel and closes the  *   associated file descriptor.  * Notes:  *   All rdma_cm_id's associated with the event channel must be destroyed,  *   and all returned events must be acked before calling this function.  * See also:  *  rdma_create_event_channel, rdma_get_cm_event, rdma_ack_cm_event  */
name|void
name|rdma_destroy_event_channel
parameter_list|(
name|struct
name|rdma_event_channel
modifier|*
name|channel
parameter_list|)
function_decl|;
comment|/**  * rdma_create_id - Allocate a communication identifier.  * @channel: The communication channel that events associated with the  *   allocated rdma_cm_id will be reported on.  * @id: A reference where the allocated communication identifier will be  *   returned.  * @context: User specified context associated with the rdma_cm_id.  * @ps: RDMA port space.  * Description:  *   Creates an identifier that is used to track communication information.  * Notes:  *   Rdma_cm_id's are conceptually equivalent to a socket for RDMA  *   communication.  The difference is that RDMA communication requires  *   explicitly binding to a specified RDMA device before communication  *   can occur, and most operations are asynchronous in nature.  Communication  *   events on an rdma_cm_id are reported through the associated event  *   channel.  Users must release the rdma_cm_id by calling rdma_destroy_id.  * See also:  *   rdma_create_event_channel, rdma_destroy_id, rdma_get_devices,  *   rdma_bind_addr, rdma_resolve_addr, rdma_connect, rdma_listen,  */
name|int
name|rdma_create_id
parameter_list|(
name|struct
name|rdma_event_channel
modifier|*
name|channel
parameter_list|,
name|struct
name|rdma_cm_id
modifier|*
modifier|*
name|id
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|enum
name|rdma_port_space
name|ps
parameter_list|)
function_decl|;
comment|/**  * rdma_create_ep - Allocate a communication identifier and qp.  * @id: A reference where the allocated communication identifier will be  *   returned.  * @res: Result from rdma_getaddrinfo, which specifies the source and  *   destination addresses, plus optional routing and connection information.  * @pd: Optional protection domain.  This parameter is ignored if qp_init_attr  *   is NULL.  * @qp_init_attr: Optional attributes for a QP created on the rdma_cm_id.  * Description:  *   Create an identifier and option QP used for communication.  * Notes:  *   If qp_init_attr is provided, then a queue pair will be allocated and  *   associated with the rdma_cm_id.  If a pd is provided, the QP will be  *   created on that PD.  Otherwise, the QP will be allocated on a default  *   PD.  *   The rdma_cm_id will be set to use synchronous operations (connect,  *   listen, and get_request).  To convert to asynchronous operation, the  *   rdma_cm_id should be migrated to a user allocated event channel.  * See also:  *   rdma_create_id, rdma_create_qp, rdma_migrate_id, rdma_connect,  *   rdma_listen  */
name|int
name|rdma_create_ep
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
modifier|*
name|id
parameter_list|,
name|struct
name|rdma_addrinfo
modifier|*
name|res
parameter_list|,
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|qp_init_attr
parameter_list|)
function_decl|;
comment|/**  * rdma_destroy_ep - Deallocates a communication identifier and qp.  * @id: The communication identifier to destroy.  * Description:  *   Destroys the specified rdma_cm_id and any associated QP created  *   on that id.  * See also:  *   rdma_create_ep  */
name|void
name|rdma_destroy_ep
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/**  * rdma_destroy_id - Release a communication identifier.  * @id: The communication identifier to destroy.  * Description:  *   Destroys the specified rdma_cm_id and cancels any outstanding  *   asynchronous operation.  * Notes:  *   Users must free any associated QP with the rdma_cm_id before  *   calling this routine and ack an related events.  * See also:  *   rdma_create_id, rdma_destroy_qp, rdma_ack_cm_event  */
name|int
name|rdma_destroy_id
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/**  * rdma_bind_addr - Bind an RDMA identifier to a source address.  * @id: RDMA identifier.  * @addr: Local address information.  Wildcard values are permitted.  * Description:  *   Associates a source address with an rdma_cm_id.  The address may be  *   wildcarded.  If binding to a specific local address, the rdma_cm_id  *   will also be bound to a local RDMA device.  * Notes:  *   Typically, this routine is called before calling rdma_listen to bind  *   to a specific port number, but it may also be called on the active side  *   of a connection before calling rdma_resolve_addr to bind to a specific  *   address.  * See also:  *   rdma_create_id, rdma_listen, rdma_resolve_addr, rdma_create_qp  */
name|int
name|rdma_bind_addr
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/**  * rdma_resolve_addr - Resolve destination and optional source addresses.  * @id: RDMA identifier.  * @src_addr: Source address information.  This parameter may be NULL.  * @dst_addr: Destination address information.  * @timeout_ms: Time to wait for resolution to complete.  * Description:  *   Resolve destination and optional source addresses from IP addresses  *   to an RDMA address.  If successful, the specified rdma_cm_id will  *   be bound to a local device.  * Notes:  *   This call is used to map a given destination IP address to a usable RDMA  *   address.  If a source address is given, the rdma_cm_id is bound to that  *   address, the same as if rdma_bind_addr were called.  If no source  *   address is given, and the rdma_cm_id has not yet been bound to a device,  *   then the rdma_cm_id will be bound to a source address based on the  *   local routing tables.  After this call, the rdma_cm_id will be bound to  *   an RDMA device.  This call is typically made from the active side of a  *   connection before calling rdma_resolve_route and rdma_connect.  * See also:  *   rdma_create_id, rdma_resolve_route, rdma_connect, rdma_create_qp,  *   rdma_get_cm_event, rdma_bind_addr  */
name|int
name|rdma_resolve_addr
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|src_addr
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|dst_addr
parameter_list|,
name|int
name|timeout_ms
parameter_list|)
function_decl|;
comment|/**  * rdma_resolve_route - Resolve the route information needed to establish a connection.  * @id: RDMA identifier.  * @timeout_ms: Time to wait for resolution to complete.  * Description:  *   Resolves an RDMA route to the destination address in order to establish  *   a connection.  The destination address must have already been resolved  *   by calling rdma_resolve_addr.  * Notes:  *   This is called on the client side of a connection after calling  *   rdma_resolve_addr, but before calling rdma_connect.  * See also:  *   rdma_resolve_addr, rdma_connect, rdma_get_cm_event  */
name|int
name|rdma_resolve_route
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|int
name|timeout_ms
parameter_list|)
function_decl|;
comment|/**  * rdma_create_qp - Allocate a QP.  * @id: RDMA identifier.  * @pd: Optional protection domain for the QP.  * @qp_init_attr: initial QP attributes.  * Description:  *  Allocate a QP associated with the specified rdma_cm_id and transition it  *  for sending and receiving.  * Notes:  *   The rdma_cm_id must be bound to a local RDMA device before calling this  *   function, and the protection domain must be for that same device.  *   QPs allocated to an rdma_cm_id are automatically transitioned by the  *   librdmacm through their states.  After being allocated, the QP will be  *   ready to handle posting of receives.  If the QP is unconnected, it will  *   be ready to post sends.  *   If pd is NULL, then the QP will be allocated using a default protection  *   domain associated with the underlying RDMA device.  * See also:  *   rdma_bind_addr, rdma_resolve_addr, rdma_destroy_qp, ibv_create_qp,  *   ibv_modify_qp  */
name|int
name|rdma_create_qp
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|qp_init_attr
parameter_list|)
function_decl|;
name|int
name|rdma_create_qp_ex
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|ibv_qp_init_attr_ex
modifier|*
name|qp_init_attr
parameter_list|)
function_decl|;
comment|/**  * rdma_destroy_qp - Deallocate a QP.  * @id: RDMA identifier.  * Description:  *   Destroy a QP allocated on the rdma_cm_id.  * Notes:  *   Users must destroy any QP associated with an rdma_cm_id before  *   destroying the ID.  * See also:  *   rdma_create_qp, rdma_destroy_id, ibv_destroy_qp  */
name|void
name|rdma_destroy_qp
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/**  * rdma_connect - Initiate an active connection request.  * @id: RDMA identifier.  * @conn_param: optional connection parameters.  * Description:  *   For a connected rdma_cm_id, this call initiates a connection request  *   to a remote destination.  For an unconnected rdma_cm_id, it initiates  *   a lookup of the remote QP providing the datagram service.  * Notes:  *   Users must have resolved a route to the destination address  *   by having called rdma_resolve_route before calling this routine.  *   A user may override the default connection parameters and exchange  *   private data as part of the connection by using the conn_param parameter.  * See also:  *   rdma_resolve_route, rdma_disconnect, rdma_listen, rdma_get_cm_event  */
name|int
name|rdma_connect
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|rdma_conn_param
modifier|*
name|conn_param
parameter_list|)
function_decl|;
comment|/**  * rdma_listen - Listen for incoming connection requests.  * @id: RDMA identifier.  * @backlog: backlog of incoming connection requests.  * Description:  *   Initiates a listen for incoming connection requests or datagram service  *   lookup.  The listen will be restricted to the locally bound source  *   address.  * Notes:  *   Users must have bound the rdma_cm_id to a local address by calling  *   rdma_bind_addr before calling this routine.  If the rdma_cm_id is  *   bound to a specific IP address, the listen will be restricted to that  *   address and the associated RDMA device.  If the rdma_cm_id is bound  *   to an RDMA port number only, the listen will occur across all RDMA  *   devices.  * See also:  *   rdma_bind_addr, rdma_connect, rdma_accept, rdma_reject, rdma_get_cm_event  */
name|int
name|rdma_listen
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|int
name|backlog
parameter_list|)
function_decl|;
comment|/**  * rdma_get_request  */
name|int
name|rdma_get_request
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|listen
parameter_list|,
name|struct
name|rdma_cm_id
modifier|*
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/**  * rdma_accept - Called to accept a connection request.  * @id: Connection identifier associated with the request.  * @conn_param: Optional information needed to establish the connection.  * Description:  *   Called from the listening side to accept a connection or datagram  *   service lookup request.  * Notes:  *   Unlike the socket accept routine, rdma_accept is not called on a  *   listening rdma_cm_id.  Instead, after calling rdma_listen, the user  *   waits for a connection request event to occur.  Connection request  *   events give the user a newly created rdma_cm_id, similar to a new  *   socket, but the rdma_cm_id is bound to a specific RDMA device.  *   rdma_accept is called on the new rdma_cm_id.  *   A user may override the default connection parameters and exchange  *   private data as part of the connection by using the conn_param parameter.  * See also:  *   rdma_listen, rdma_reject, rdma_get_cm_event  */
name|int
name|rdma_accept
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|rdma_conn_param
modifier|*
name|conn_param
parameter_list|)
function_decl|;
comment|/**  * rdma_reject - Called to reject a connection request.  * @id: Connection identifier associated with the request.  * @private_data: Optional private data to send with the reject message.  * @private_data_len: Size of the private_data to send, in bytes.  * Description:  *   Called from the listening side to reject a connection or datagram  *   service lookup request.  * Notes:  *   After receiving a connection request event, a user may call rdma_reject  *   to reject the request.  If the underlying RDMA transport supports  *   private data in the reject message, the specified data will be passed to  *   the remote side.  * See also:  *   rdma_listen, rdma_accept, rdma_get_cm_event  */
name|int
name|rdma_reject
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
specifier|const
name|void
modifier|*
name|private_data
parameter_list|,
name|uint8_t
name|private_data_len
parameter_list|)
function_decl|;
comment|/**  * rdma_notify - Notifies the librdmacm of an asynchronous event.  * @id: RDMA identifier.  * @event: Asynchronous event.  * Description:  *   Used to notify the librdmacm of asynchronous events that have occurred  *   on a QP associated with the rdma_cm_id.  * Notes:  *   Asynchronous events that occur on a QP are reported through the user's  *   device event handler.  This routine is used to notify the librdmacm of  *   communication events.  In most cases, use of this routine is not  *   necessary, however if connection establishment is done out of band  *   (such as done through Infiniband), it's possible to receive data on a  *   QP that is not yet considered connected.  This routine forces the  *   connection into an established state in this case in order to handle  *   the rare situation where the connection never forms on its own.  *   Events that should be reported to the CM are: IB_EVENT_COMM_EST.  * See also:  *   rdma_connect, rdma_accept, rdma_listen  */
name|int
name|rdma_notify
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|enum
name|ibv_event_type
name|event
parameter_list|)
function_decl|;
comment|/**  * rdma_disconnect - This function disconnects a connection.  * @id: RDMA identifier.  * Description:  *   Disconnects a connection and transitions any associated QP to the  *   error state.  * See also:  *   rdma_connect, rdma_listen, rdma_accept  */
name|int
name|rdma_disconnect
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/**  * rdma_join_multicast - Joins a multicast group.  * @id: Communication identifier associated with the request.  * @addr: Multicast address identifying the group to join.  * @context: User-defined context associated with the join request.  * Description:  *   Joins a multicast group and attaches an associated QP to the group.  * Notes:  *   Before joining a multicast group, the rdma_cm_id must be bound to  *   an RDMA device by calling rdma_bind_addr or rdma_resolve_addr.  Use of  *   rdma_resolve_addr requires the local routing tables to resolve the  *   multicast address to an RDMA device.  The user must call  *   rdma_leave_multicast to leave the multicast group and release any  *   multicast resources.  The context is returned to the user through  *   the private_data field in the rdma_cm_event.  * See also:  *   rdma_leave_multicast, rdma_bind_addr, rdma_resolve_addr, rdma_create_qp  */
name|int
name|rdma_join_multicast
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
comment|/**  * rdma_leave_multicast - Leaves a multicast group.  * @id: Communication identifier associated with the request.  * @addr: Multicast address identifying the group to leave.  * Description:  *   Leaves a multicast group and detaches an associated QP from the group.  * Notes:  *   Calling this function before a group has been fully joined results in  *   canceling the join operation.  Users should be aware that messages  *   received from the multicast group may stilled be queued for  *   completion processing immediately after leaving a multicast group.  *   Destroying an rdma_cm_id will automatically leave all multicast groups.  * See also:  *   rdma_join_multicast, rdma_destroy_qp  */
name|int
name|rdma_leave_multicast
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/**  * rdma_get_cm_event - Retrieves the next pending communication event.  * @channel: Event channel to check for events.  * @event: Allocated information about the next communication event.  * Description:  *   Retrieves a communication event.  If no events are pending, by default,  *   the call will block until an event is received.  * Notes:  *   The default synchronous behavior of this routine can be changed by  *   modifying the file descriptor associated with the given channel.  All  *   events that are reported must be acknowledged by calling rdma_ack_cm_event.  *   Destruction of an rdma_cm_id will block until related events have been  *   acknowledged.  * See also:  *   rdma_ack_cm_event, rdma_create_event_channel, rdma_event_str  */
name|int
name|rdma_get_cm_event
parameter_list|(
name|struct
name|rdma_event_channel
modifier|*
name|channel
parameter_list|,
name|struct
name|rdma_cm_event
modifier|*
modifier|*
name|event
parameter_list|)
function_decl|;
comment|/**  * rdma_ack_cm_event - Free a communication event.  * @event: Event to be released.  * Description:  *   All events which are allocated by rdma_get_cm_event must be released,  *   there should be a one-to-one correspondence between successful gets  *   and acks.  * See also:  *   rdma_get_cm_event, rdma_destroy_id  */
name|int
name|rdma_ack_cm_event
parameter_list|(
name|struct
name|rdma_cm_event
modifier|*
name|event
parameter_list|)
function_decl|;
name|__be16
name|rdma_get_src_port
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
name|__be16
name|rdma_get_dst_port
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|struct
name|sockaddr
modifier|*
name|rdma_get_local_addr
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
block|{
return|return
operator|&
name|id
operator|->
name|route
operator|.
name|addr
operator|.
name|src_addr
return|;
block|}
specifier|static
specifier|inline
name|struct
name|sockaddr
modifier|*
name|rdma_get_peer_addr
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|)
block|{
return|return
operator|&
name|id
operator|->
name|route
operator|.
name|addr
operator|.
name|dst_addr
return|;
block|}
comment|/**  * rdma_get_devices - Get list of RDMA devices currently available.  * @num_devices: If non-NULL, set to the number of devices returned.  * Description:  *   Return a NULL-terminated array of opened RDMA devices.  Callers can use  *   this routine to allocate resources on specific RDMA devices that will be  *   shared across multiple rdma_cm_id's.  * Notes:  *   The returned array must be released by calling rdma_free_devices.  Devices  *   remain opened while the librdmacm is loaded.  * See also:  *   rdma_free_devices  */
name|struct
name|ibv_context
modifier|*
modifier|*
name|rdma_get_devices
parameter_list|(
name|int
modifier|*
name|num_devices
parameter_list|)
function_decl|;
comment|/**  * rdma_free_devices - Frees the list of devices returned by rdma_get_devices.  * @list: List of devices returned from rdma_get_devices.  * Description:  *   Frees the device array returned by rdma_get_devices.  * See also:  *   rdma_get_devices  */
name|void
name|rdma_free_devices
parameter_list|(
name|struct
name|ibv_context
modifier|*
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * rdma_event_str - Returns a string representation of an rdma cm event.  * @event: Asynchronous event.  * Description:  *   Returns a string representation of an asynchronous event.  * See also:  *   rdma_get_cm_event  */
specifier|const
name|char
modifier|*
name|rdma_event_str
parameter_list|(
name|enum
name|rdma_cm_event_type
name|event
parameter_list|)
function_decl|;
comment|/* Option levels */
enum|enum
block|{
name|RDMA_OPTION_ID
init|=
literal|0
block|,
name|RDMA_OPTION_IB
init|=
literal|1
block|}
enum|;
comment|/* Option details */
enum|enum
block|{
name|RDMA_OPTION_ID_TOS
init|=
literal|0
block|,
comment|/* uint8_t: RFC 2474 */
name|RDMA_OPTION_ID_REUSEADDR
init|=
literal|1
block|,
comment|/* int: ~SO_REUSEADDR */
name|RDMA_OPTION_ID_AFONLY
init|=
literal|2
block|,
comment|/* int: ~IPV6_V6ONLY */
name|RDMA_OPTION_IB_PATH
init|=
literal|1
comment|/* struct ibv_path_data[] */
block|}
enum|;
comment|/**  * rdma_set_option - Set options for an rdma_cm_id.  * @id: Communication identifier to set option for.  * @level: Protocol level of the option to set.  * @optname: Name of the option to set.  * @optval: Reference to the option data.  * @optlen: The size of the %optval buffer.  */
name|int
name|rdma_set_option
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|int
name|level
parameter_list|,
name|int
name|optname
parameter_list|,
name|void
modifier|*
name|optval
parameter_list|,
name|size_t
name|optlen
parameter_list|)
function_decl|;
comment|/**  * rdma_migrate_id - Move an rdma_cm_id to a new event channel.  * @id: Communication identifier to migrate.  * @channel: New event channel for rdma_cm_id events.  */
name|int
name|rdma_migrate_id
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
name|id
parameter_list|,
name|struct
name|rdma_event_channel
modifier|*
name|channel
parameter_list|)
function_decl|;
comment|/**  * rdma_getaddrinfo - RDMA address and route resolution service.  */
name|int
name|rdma_getaddrinfo
parameter_list|(
specifier|const
name|char
modifier|*
name|node
parameter_list|,
specifier|const
name|char
modifier|*
name|service
parameter_list|,
specifier|const
name|struct
name|rdma_addrinfo
modifier|*
name|hints
parameter_list|,
name|struct
name|rdma_addrinfo
modifier|*
modifier|*
name|res
parameter_list|)
function_decl|;
name|void
name|rdma_freeaddrinfo
parameter_list|(
name|struct
name|rdma_addrinfo
modifier|*
name|res
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* RDMA_CMA_H */
end_comment

end_unit

