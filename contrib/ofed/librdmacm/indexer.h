begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2011 Intel Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|INDEXER_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|INDEXER_H
end_define

begin_include
include|#
directive|include
file|<config.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_comment
comment|/*  * Indexer - to find a structure given an index.  Synchronization  * must be provided by the caller.  Caller must initialize the  * indexer by setting free_list and size to 0.  */
end_comment

begin_union
union|union
name|idx_entry
block|{
name|void
modifier|*
name|item
decl_stmt|;
name|int
name|next
decl_stmt|;
block|}
union|;
end_union

begin_define
define|#
directive|define
name|IDX_INDEX_BITS
value|16
end_define

begin_define
define|#
directive|define
name|IDX_ENTRY_BITS
value|10
end_define

begin_define
define|#
directive|define
name|IDX_ENTRY_SIZE
value|(1<< IDX_ENTRY_BITS)
end_define

begin_define
define|#
directive|define
name|IDX_ARRAY_SIZE
value|(1<< (IDX_INDEX_BITS - IDX_ENTRY_BITS))
end_define

begin_define
define|#
directive|define
name|IDX_MAX_INDEX
value|((1<< IDX_INDEX_BITS) - 1)
end_define

begin_struct
struct|struct
name|indexer
block|{
name|union
name|idx_entry
modifier|*
name|array
index|[
name|IDX_ARRAY_SIZE
index|]
decl_stmt|;
name|int
name|free_list
decl_stmt|;
name|int
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|idx_array_index
parameter_list|(
name|index
parameter_list|)
value|(index>> IDX_ENTRY_BITS)
end_define

begin_define
define|#
directive|define
name|idx_entry_index
parameter_list|(
name|index
parameter_list|)
value|(index& (IDX_ENTRY_SIZE - 1))
end_define

begin_function_decl
name|int
name|idx_insert
parameter_list|(
name|struct
name|indexer
modifier|*
name|idx
parameter_list|,
name|void
modifier|*
name|item
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|idx_remove
parameter_list|(
name|struct
name|indexer
modifier|*
name|idx
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|idx_replace
parameter_list|(
name|struct
name|indexer
modifier|*
name|idx
parameter_list|,
name|int
name|index
parameter_list|,
name|void
modifier|*
name|item
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|idx_at
parameter_list|(
name|struct
name|indexer
modifier|*
name|idx
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|idx
operator|->
name|array
index|[
name|idx_array_index
argument_list|(
name|index
argument_list|)
index|]
operator|+
name|idx_entry_index
argument_list|(
name|index
argument_list|)
operator|)
operator|->
name|item
return|;
block|}
end_function

begin_comment
comment|/*  * Index map - associates a structure with an index.  Synchronization  * must be provided by the caller.  Caller must initialize the  * index map by setting it to 0.  */
end_comment

begin_struct
struct|struct
name|index_map
block|{
name|void
modifier|*
modifier|*
name|array
index|[
name|IDX_ARRAY_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|idm_set
parameter_list|(
name|struct
name|index_map
modifier|*
name|idm
parameter_list|,
name|int
name|index
parameter_list|,
name|void
modifier|*
name|item
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|idm_clear
parameter_list|(
name|struct
name|index_map
modifier|*
name|idm
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|idm_at
parameter_list|(
name|struct
name|index_map
modifier|*
name|idm
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|void
modifier|*
modifier|*
name|entry
decl_stmt|;
name|entry
operator|=
name|idm
operator|->
name|array
index|[
name|idx_array_index
argument_list|(
name|index
argument_list|)
index|]
expr_stmt|;
return|return
name|entry
index|[
name|idx_entry_index
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|idm_lookup
parameter_list|(
name|struct
name|index_map
modifier|*
name|idm
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
operator|(
name|index
operator|<=
name|IDX_MAX_INDEX
operator|)
operator|&&
name|idm
operator|->
name|array
index|[
name|idx_array_index
argument_list|(
name|index
argument_list|)
index|]
operator|)
condition|?
name|idm_at
argument_list|(
name|idm
argument_list|,
name|index
argument_list|)
else|:
name|NULL
return|;
block|}
end_function

begin_typedef
typedef|typedef
struct|struct
name|_dlist_entry
block|{
name|struct
name|_dlist_entry
modifier|*
name|next
decl_stmt|;
name|struct
name|_dlist_entry
modifier|*
name|prev
decl_stmt|;
block|}
name|dlist_entry
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|void
name|dlist_init
parameter_list|(
name|dlist_entry
modifier|*
name|head
parameter_list|)
block|{
name|head
operator|->
name|next
operator|=
name|head
expr_stmt|;
name|head
operator|->
name|prev
operator|=
name|head
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dlist_empty
parameter_list|(
name|dlist_entry
modifier|*
name|head
parameter_list|)
block|{
return|return
name|head
operator|->
name|next
operator|==
name|head
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dlist_insert_after
parameter_list|(
name|dlist_entry
modifier|*
name|item
parameter_list|,
name|dlist_entry
modifier|*
name|head
parameter_list|)
block|{
name|item
operator|->
name|next
operator|=
name|head
operator|->
name|next
expr_stmt|;
name|item
operator|->
name|prev
operator|=
name|head
expr_stmt|;
name|head
operator|->
name|next
operator|->
name|prev
operator|=
name|item
expr_stmt|;
name|head
operator|->
name|next
operator|=
name|item
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dlist_insert_before
parameter_list|(
name|dlist_entry
modifier|*
name|item
parameter_list|,
name|dlist_entry
modifier|*
name|head
parameter_list|)
block|{
name|dlist_insert_after
argument_list|(
name|item
argument_list|,
name|head
operator|->
name|prev
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|dlist_insert_head
value|dlist_insert_after
end_define

begin_define
define|#
directive|define
name|dlist_insert_tail
value|dlist_insert_before
end_define

begin_function
specifier|static
specifier|inline
name|void
name|dlist_remove
parameter_list|(
name|dlist_entry
modifier|*
name|item
parameter_list|)
block|{
name|item
operator|->
name|prev
operator|->
name|next
operator|=
name|item
operator|->
name|next
expr_stmt|;
name|item
operator|->
name|next
operator|->
name|prev
operator|=
name|item
operator|->
name|prev
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* INDEXER_H */
end_comment

end_unit

