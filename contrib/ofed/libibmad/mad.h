begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004-2009 Voltaire Inc.  All rights reserved.  * Copyright (c) 2009 HNR Consulting.  All rights reserved.  * Copyright (c) 2009-2011 Mellanox Technologies LTD.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MAD_H_
end_ifndef

begin_define
define|#
directive|define
name|_MAD_H_
end_define

begin_include
include|#
directive|include
file|<infiniband/mad_osd.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
value|extern "C" {
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
value|}
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__cplusplus */
end_comment

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_decl_stmt
name|BEGIN_C_DECLS
define|#
directive|define
name|IB_MAD_RPC_VERSION_MASK
value|0x0f00
define|#
directive|define
name|IB_MAD_RPC_VERSION1
value|(1<<8)
define|#
directive|define
name|IB_SUBNET_PATH_HOPS_MAX
value|64
define|#
directive|define
name|IB_DEFAULT_SUBN_PREFIX
value|0xfe80000000000000ULL
define|#
directive|define
name|IB_DEFAULT_QP1_QKEY
value|0x80010000
define|#
directive|define
name|IB_MAD_SIZE
value|256
define|#
directive|define
name|IB_SMP_DATA_OFFS
value|64
define|#
directive|define
name|IB_SMP_DATA_SIZE
value|64
define|#
directive|define
name|IB_VENDOR_RANGE1_DATA_OFFS
value|24
define|#
directive|define
name|IB_VENDOR_RANGE1_DATA_SIZE
value|(IB_MAD_SIZE - IB_VENDOR_RANGE1_DATA_OFFS)
define|#
directive|define
name|IB_VENDOR_RANGE2_DATA_OFFS
value|40
define|#
directive|define
name|IB_VENDOR_RANGE2_DATA_SIZE
value|(IB_MAD_SIZE - IB_VENDOR_RANGE2_DATA_OFFS)
define|#
directive|define
name|IB_SA_DATA_SIZE
value|200
define|#
directive|define
name|IB_SA_DATA_OFFS
value|56
define|#
directive|define
name|IB_PC_DATA_OFFS
value|64
define|#
directive|define
name|IB_PC_DATA_SZ
value|(IB_MAD_SIZE - IB_PC_DATA_OFFS)
define|#
directive|define
name|IB_SA_MCM_RECSZ
value|53
define|#
directive|define
name|IB_SA_PR_RECSZ
value|64
define|#
directive|define
name|IB_SA_NR_RECSZ
value|108
define|#
directive|define
name|IB_SA_GIR_RECSZ
value|72
define|#
directive|define
name|IB_BM_DATA_OFFS
value|64
define|#
directive|define
name|IB_BM_DATA_SZ
value|(IB_MAD_SIZE - IB_BM_DATA_OFFS)
define|#
directive|define
name|IB_BM_BKEY_OFFS
value|24
define|#
directive|define
name|IB_BM_BKEY_AND_DATA_SZ
value|(IB_MAD_SIZE - IB_BM_BKEY_OFFS)
define|#
directive|define
name|IB_CC_DATA_OFFS
value|64
define|#
directive|define
name|IB_CC_DATA_SZ
value|(IB_MAD_SIZE - IB_CC_DATA_OFFS)
define|#
directive|define
name|IB_CC_LOG_DATA_OFFS
value|32
define|#
directive|define
name|IB_CC_LOG_DATA_SZ
value|(IB_MAD_SIZE - IB_CC_LOG_DATA_OFFS)
name|enum
name|MAD_CLASSES
block|{
name|IB_SMI_CLASS
operator|=
literal|0x1
operator|,
name|IB_SMI_DIRECT_CLASS
operator|=
literal|0x81
operator|,
name|IB_SA_CLASS
operator|=
literal|0x3
operator|,
name|IB_PERFORMANCE_CLASS
operator|=
literal|0x4
operator|,
name|IB_BOARD_MGMT_CLASS
operator|=
literal|0x5
operator|,
name|IB_DEVICE_MGMT_CLASS
operator|=
literal|0x6
operator|,
name|IB_CM_CLASS
operator|=
literal|0x7
operator|,
name|IB_SNMP_CLASS
operator|=
literal|0x8
operator|,
name|IB_VENDOR_RANGE1_START_CLASS
operator|=
literal|0x9
operator|,
name|IB_VENDOR_RANGE1_END_CLASS
operator|=
literal|0x0f
operator|,
name|IB_CC_CLASS
operator|=
literal|0x21
operator|,
name|IB_VENDOR_RANGE2_START_CLASS
operator|=
literal|0x30
operator|,
name|IB_VENDOR_RANGE2_END_CLASS
operator|=
literal|0x4f
operator|,
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_enum
enum|enum
name|MAD_METHODS
block|{
name|IB_MAD_METHOD_GET
init|=
literal|0x1
block|,
name|IB_MAD_METHOD_SET
init|=
literal|0x2
block|,
name|IB_MAD_METHOD_GET_RESPONSE
init|=
literal|0x81
block|,
name|IB_MAD_METHOD_SEND
init|=
literal|0x3
block|,
name|IB_MAD_METHOD_TRAP
init|=
literal|0x5
block|,
name|IB_MAD_METHOD_TRAP_REPRESS
init|=
literal|0x7
block|,
name|IB_MAD_METHOD_REPORT
init|=
literal|0x6
block|,
name|IB_MAD_METHOD_REPORT_RESPONSE
init|=
literal|0x86
block|,
name|IB_MAD_METHOD_GET_TABLE
init|=
literal|0x12
block|,
name|IB_MAD_METHOD_GET_TABLE_RESPONSE
init|=
literal|0x92
block|,
name|IB_MAD_METHOD_GET_TRACE_TABLE
init|=
literal|0x13
block|,
name|IB_MAD_METHOD_GET_TRACE_TABLE_RESPONSE
init|=
literal|0x93
block|,
name|IB_MAD_METHOD_GETMULTI
init|=
literal|0x14
block|,
name|IB_MAD_METHOD_GETMULTI_RESPONSE
init|=
literal|0x94
block|,
name|IB_MAD_METHOD_DELETE
init|=
literal|0x15
block|,
name|IB_MAD_METHOD_DELETE_RESPONSE
init|=
literal|0x95
block|,
name|IB_MAD_RESPONSE
init|=
literal|0x80
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|MAD_ATTR_ID
block|{
name|CLASS_PORT_INFO
init|=
literal|0x1
block|,
name|NOTICE
init|=
literal|0x2
block|,
name|INFORM_INFO
init|=
literal|0x3
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|MAD_STATUS
block|{
name|IB_MAD_STS_OK
init|=
operator|(
literal|0
operator|<<
literal|2
operator|)
block|,
name|IB_MAD_STS_BUSY
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|IB_MAD_STS_REDIRECT
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|IB_MAD_STS_BAD_BASE_VER_OR_CLASS
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|IB_MAD_STS_METHOD_NOT_SUPPORTED
init|=
operator|(
literal|2
operator|<<
literal|2
operator|)
block|,
name|IB_MAD_STS_METHOD_ATTR_NOT_SUPPORTED
init|=
operator|(
literal|3
operator|<<
literal|2
operator|)
block|,
name|IB_MAD_STS_INV_ATTR_VALUE
init|=
operator|(
literal|7
operator|<<
literal|2
operator|)
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|SMI_ATTR_ID
block|{
name|IB_ATTR_NODE_DESC
init|=
literal|0x10
block|,
name|IB_ATTR_NODE_INFO
init|=
literal|0x11
block|,
name|IB_ATTR_SWITCH_INFO
init|=
literal|0x12
block|,
name|IB_ATTR_GUID_INFO
init|=
literal|0x14
block|,
name|IB_ATTR_PORT_INFO
init|=
literal|0x15
block|,
name|IB_ATTR_PKEY_TBL
init|=
literal|0x16
block|,
name|IB_ATTR_SLVL_TABLE
init|=
literal|0x17
block|,
name|IB_ATTR_VL_ARBITRATION
init|=
literal|0x18
block|,
name|IB_ATTR_LINEARFORWTBL
init|=
literal|0x19
block|,
name|IB_ATTR_MULTICASTFORWTBL
init|=
literal|0x1b
block|,
name|IB_ATTR_LINKSPEEDWIDTHPAIRSTBL
init|=
literal|0x1c
block|,
name|IB_ATTR_VENDORMADSTBL
init|=
literal|0x1d
block|,
name|IB_ATTR_SMINFO
init|=
literal|0x20
block|,
name|IB_ATTR_PORT_INFO_EXT
init|=
literal|0x33
block|,
name|IB_ATTR_LAST
block|,
name|IB_ATTR_MLNX_EXT_PORT_INFO
init|=
literal|0xff90
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|SA_ATTR_ID
block|{
name|IB_SA_ATTR_NOTICE
init|=
literal|0x02
block|,
name|IB_SA_ATTR_INFORMINFO
init|=
literal|0x03
block|,
name|IB_SA_ATTR_NODERECORD
init|=
literal|0x11
block|,
name|IB_SA_ATTR_PORTINFORECORD
init|=
literal|0x12
block|,
name|IB_SA_ATTR_SL2VLTABLERECORD
init|=
literal|0x13
block|,
name|IB_SA_ATTR_SWITCHINFORECORD
init|=
literal|0x14
block|,
name|IB_SA_ATTR_LFTRECORD
init|=
literal|0x15
block|,
name|IB_SA_ATTR_RFTRECORD
init|=
literal|0x16
block|,
name|IB_SA_ATTR_MFTRECORD
init|=
literal|0x17
block|,
name|IB_SA_ATTR_SMINFORECORD
init|=
literal|0x18
block|,
name|IB_SA_ATTR_LINKRECORD
init|=
literal|0x20
block|,
name|IB_SA_ATTR_GUIDINFORECORD
init|=
literal|0x30
block|,
name|IB_SA_ATTR_SERVICERECORD
init|=
literal|0x31
block|,
name|IB_SA_ATTR_PKEYTABLERECORD
init|=
literal|0x33
block|,
name|IB_SA_ATTR_PATHRECORD
init|=
literal|0x35
block|,
name|IB_SA_ATTR_VLARBTABLERECORD
init|=
literal|0x36
block|,
name|IB_SA_ATTR_MCRECORD
init|=
literal|0x38
block|,
name|IB_SA_ATTR_MULTIPATH
init|=
literal|0x3a
block|,
name|IB_SA_ATTR_INFORMINFORECORD
init|=
literal|0xf3
block|,
name|IB_SA_ATTR_LAST
block|}
enum|;
end_enum

begin_enum
enum|enum
name|GSI_ATTR_ID
block|{
name|IB_GSI_PORT_SAMPLES_CONTROL
init|=
literal|0x10
block|,
name|IB_GSI_PORT_SAMPLES_RESULT
init|=
literal|0x11
block|,
name|IB_GSI_PORT_COUNTERS
init|=
literal|0x12
block|,
name|IB_GSI_PORT_RCV_ERROR_DETAILS
init|=
literal|0x15
block|,
name|IB_GSI_PORT_XMIT_DISCARD_DETAILS
init|=
literal|0x16
block|,
name|IB_GSI_PORT_PORT_OP_RCV_COUNTERS
init|=
literal|0x17
block|,
name|IB_GSI_PORT_PORT_FLOW_CTL_COUNTERS
init|=
literal|0x18
block|,
name|IB_GSI_PORT_PORT_VL_OP_PACKETS
init|=
literal|0x19
block|,
name|IB_GSI_PORT_PORT_VL_OP_DATA
init|=
literal|0x1A
block|,
name|IB_GSI_PORT_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS
init|=
literal|0x1B
block|,
name|IB_GSI_PORT_PORT_VL_XMIT_WAIT_COUNTERS
init|=
literal|0x1C
block|,
name|IB_GSI_PORT_COUNTERS_EXT
init|=
literal|0x1D
block|,
name|IB_GSI_PORT_EXT_SPEEDS_COUNTERS
init|=
literal|0x1F
block|,
name|IB_GSI_SW_PORT_VL_CONGESTION
init|=
literal|0x30
block|,
name|IB_GSI_PORT_RCV_CON_CTRL
init|=
literal|0x31
block|,
name|IB_GSI_PORT_SL_RCV_FECN
init|=
literal|0x32
block|,
name|IB_GSI_PORT_SL_RCV_BECN
init|=
literal|0x33
block|,
name|IB_GSI_PORT_XMIT_CON_CTRL
init|=
literal|0x34
block|,
name|IB_GSI_PORT_VL_XMIT_TIME_CONG
init|=
literal|0x35
block|,
name|IB_GSI_PORT_XMIT_DATA_SL
init|=
literal|0x36
block|,
name|IB_GSI_PORT_RCV_DATA_SL
init|=
literal|0x37
block|,
name|IB_GSI_ATTR_LAST
block|}
enum|;
end_enum

begin_enum
enum|enum
name|BM_ATTR_ID
block|{
name|IB_BM_ATTR_BKEYINFO
init|=
literal|0x10
block|,
name|IB_BM_ATTR_WRITE_VPD
init|=
literal|0x20
block|,
name|IB_BM_ATTR_READ_VPD
init|=
literal|0x21
block|,
name|IB_BM_ATTR_RESET_IBML
init|=
literal|0x22
block|,
name|IB_BM_ATTR_SET_MODULE_PM_CONTROL
init|=
literal|0x23
block|,
name|IB_BM_ATTR_GET_MODULE_PM_CONTROL
init|=
literal|0x24
block|,
name|IB_BM_ATTR_SET_UNIT_PM_CONTROL
init|=
literal|0x25
block|,
name|IB_BM_ATTR_GET_UNIT_PM_CONTROL
init|=
literal|0x26
block|,
name|IB_BM_ATTR_SET_IOC_PM_CONTROL
init|=
literal|0x27
block|,
name|IB_BM_ATTR_GET_IOC_PM_CONTROL
init|=
literal|0x28
block|,
name|IB_BM_ATTR_SET_MODULE_STATE
init|=
literal|0x29
block|,
name|IB_BM_ATTR_SET_MODULE_ATTENTION
init|=
literal|0x2A
block|,
name|IB_BM_ATTR_GET_MODULE_STATUS
init|=
literal|0x2B
block|,
name|IB_BM_ATTR_IB2IBML
init|=
literal|0x2C
block|,
name|IB_BM_ATTR_IB2CME
init|=
literal|0x2D
block|,
name|IB_BM_ATTR_IB2MME
init|=
literal|0x2E
block|,
name|IB_BM_ATTR_OEM
init|=
literal|0x2F
block|,
name|IB_BM_ATTR_LAST
block|}
enum|;
end_enum

begin_enum
enum|enum
name|CC_ATTRI_ID
block|{
name|IB_CC_ATTR_CONGESTION_INFO
init|=
literal|0x11
block|,
name|IB_CC_ATTR_CONGESTION_KEY_INFO
init|=
literal|0x12
block|,
name|IB_CC_ATTR_CONGESTION_LOG
init|=
literal|0x13
block|,
name|IB_CC_ATTR_SWITCH_CONGESTION_SETTING
init|=
literal|0x14
block|,
name|IB_CC_ATTR_SWITCH_PORT_CONGESTION_SETTING
init|=
literal|0x15
block|,
name|IB_CC_ATTR_CA_CONGESTION_SETTING
init|=
literal|0x16
block|,
name|IB_CC_ATTR_CONGESTION_CONTROL_TABLE
init|=
literal|0x17
block|,
name|IB_CC_ATTR_TIMESTAMP
init|=
literal|0x18
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|IB_VENDOR_OPENIB_PING_CLASS
value|(IB_VENDOR_RANGE2_START_CLASS + 2)
end_define

begin_define
define|#
directive|define
name|IB_VENDOR_OPENIB_SYSSTAT_CLASS
value|(IB_VENDOR_RANGE2_START_CLASS + 3)
end_define

begin_define
define|#
directive|define
name|IB_OPENIB_OUI
value|(0x001405)
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|ibmad_gid_t
index|[
literal|16
index|]
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|USE_DEPRECATED_IB_GID_T
end_ifdef

begin_typedef
typedef|typedef
name|ibmad_gid_t
name|ib_gid_t
name|__attribute__
typedef|((
name|deprecated
typedef|));
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|cnt
decl_stmt|;
name|uint8_t
name|p
index|[
name|IB_SUBNET_PATH_HOPS_MAX
index|]
decl_stmt|;
name|uint16_t
name|drslid
decl_stmt|;
name|uint16_t
name|drdlid
decl_stmt|;
block|}
name|ib_dr_path_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|unsigned
name|id
decl_stmt|;
name|unsigned
name|mod
decl_stmt|;
block|}
name|ib_attr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|mgtclass
decl_stmt|;
name|int
name|method
decl_stmt|;
name|ib_attr_t
name|attr
decl_stmt|;
name|uint32_t
name|rstatus
decl_stmt|;
comment|/* return status */
name|int
name|dataoffs
decl_stmt|;
name|int
name|datasz
decl_stmt|;
name|uint64_t
name|mkey
decl_stmt|;
name|uint64_t
name|trid
decl_stmt|;
comment|/* used for out mad if nonzero, return real val */
name|uint64_t
name|mask
decl_stmt|;
comment|/* for sa mads */
name|unsigned
name|recsz
decl_stmt|;
comment|/* for sa mads (attribute offset) */
name|int
name|timeout
decl_stmt|;
name|uint32_t
name|oui
decl_stmt|;
comment|/* for vendor range 2 mads */
block|}
name|ib_rpc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|mgtclass
decl_stmt|;
name|int
name|method
decl_stmt|;
name|ib_attr_t
name|attr
decl_stmt|;
name|uint32_t
name|rstatus
decl_stmt|;
comment|/* return status */
name|int
name|dataoffs
decl_stmt|;
name|int
name|datasz
decl_stmt|;
name|uint64_t
name|mkey
decl_stmt|;
name|uint64_t
name|trid
decl_stmt|;
comment|/* used for out mad if nonzero, return real val */
name|uint64_t
name|mask
decl_stmt|;
comment|/* for sa mads */
name|unsigned
name|recsz
decl_stmt|;
comment|/* for sa mads (attribute offset) */
name|int
name|timeout
decl_stmt|;
name|uint32_t
name|oui
decl_stmt|;
comment|/* for vendor range 2 mads */
name|int
name|error
decl_stmt|;
comment|/* errno */
block|}
name|ib_rpc_v1_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|mgtclass
decl_stmt|;
name|int
name|method
decl_stmt|;
name|ib_attr_t
name|attr
decl_stmt|;
name|uint32_t
name|rstatus
decl_stmt|;
comment|/* return status */
name|int
name|dataoffs
decl_stmt|;
name|int
name|datasz
decl_stmt|;
name|uint64_t
name|mkey
decl_stmt|;
name|uint64_t
name|trid
decl_stmt|;
comment|/* used for out mad if nonzero, return real val */
name|uint64_t
name|mask
decl_stmt|;
comment|/* for sa mads */
name|unsigned
name|recsz
decl_stmt|;
comment|/* for sa mads (attribute offset) */
name|int
name|timeout
decl_stmt|;
name|uint32_t
name|oui
decl_stmt|;
comment|/* for vendor range 2 mads */
name|int
name|error
decl_stmt|;
comment|/* errno */
name|uint64_t
name|cckey
decl_stmt|;
block|}
name|ib_rpc_cc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|portid
block|{
name|int
name|lid
decl_stmt|;
comment|/* lid or 0 if directed route */
name|ib_dr_path_t
name|drpath
decl_stmt|;
name|int
name|grh_present
decl_stmt|;
comment|/* flag */
name|ibmad_gid_t
name|gid
decl_stmt|;
name|uint32_t
name|qp
decl_stmt|;
name|uint32_t
name|qkey
decl_stmt|;
name|uint8_t
name|sl
decl_stmt|;
name|unsigned
name|pkey_idx
decl_stmt|;
block|}
name|ib_portid_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ib_mad_dump_fn
function_decl|)
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|,
name|int
name|valsz
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|IB_FIELD_NAME_LEN
value|32
end_define

begin_typedef
typedef|typedef
struct|struct
name|ib_field
block|{
name|int
name|bitoffs
decl_stmt|;
name|int
name|bitlen
decl_stmt|;
name|char
name|name
index|[
name|IB_FIELD_NAME_LEN
index|]
decl_stmt|;
name|ib_mad_dump_fn
modifier|*
name|def_dump_fn
decl_stmt|;
block|}
name|ib_field_t
typedef|;
end_typedef

begin_enum
enum|enum
name|MAD_FIELDS
block|{
name|IB_NO_FIELD
block|,
name|IB_GID_PREFIX_F
block|,
name|IB_GID_GUID_F
block|,
comment|/* first MAD word (0-3 bytes) */
name|IB_MAD_METHOD_F
block|,
name|IB_MAD_RESPONSE_F
block|,
name|IB_MAD_CLASSVER_F
block|,
name|IB_MAD_MGMTCLASS_F
block|,
name|IB_MAD_BASEVER_F
block|,
comment|/* second MAD word (4-7 bytes) */
name|IB_MAD_STATUS_F
block|,
comment|/* DRSMP only */
name|IB_DRSMP_HOPCNT_F
block|,
name|IB_DRSMP_HOPPTR_F
block|,
name|IB_DRSMP_STATUS_F
block|,
name|IB_DRSMP_DIRECTION_F
block|,
comment|/* words 3,4,5,6 (8-23 bytes) */
name|IB_MAD_TRID_F
block|,
name|IB_MAD_ATTRID_F
block|,
name|IB_MAD_ATTRMOD_F
block|,
comment|/* word 7,8 (24-31 bytes) */
name|IB_MAD_MKEY_F
block|,
comment|/* word 9 (32-37 bytes) */
name|IB_DRSMP_DRDLID_F
block|,
name|IB_DRSMP_DRSLID_F
block|,
comment|/* word 10,11 (36-43 bytes) */
name|IB_SA_MKEY_F
block|,
comment|/* word 12 (44-47 bytes) */
name|IB_SA_ATTROFFS_F
block|,
comment|/* word 13,14 (48-55 bytes) */
name|IB_SA_COMPMASK_F
block|,
comment|/* word 13,14 (56-255 bytes) */
name|IB_SA_DATA_F
block|,
comment|/* bytes 64 - 127 */
name|IB_SM_DATA_F
block|,
comment|/* bytes 64 - 256 */
name|IB_GS_DATA_F
block|,
comment|/* bytes 128 - 191 */
name|IB_DRSMP_PATH_F
block|,
comment|/* bytes 192 - 255 */
name|IB_DRSMP_RPATH_F
block|,
comment|/* 	 * PortInfo fields 	 */
name|IB_PORT_FIRST_F
block|,
name|IB_PORT_MKEY_F
init|=
name|IB_PORT_FIRST_F
block|,
name|IB_PORT_GID_PREFIX_F
block|,
name|IB_PORT_LID_F
block|,
name|IB_PORT_SMLID_F
block|,
name|IB_PORT_CAPMASK_F
block|,
name|IB_PORT_DIAG_F
block|,
name|IB_PORT_MKEY_LEASE_F
block|,
name|IB_PORT_LOCAL_PORT_F
block|,
name|IB_PORT_LINK_WIDTH_ENABLED_F
block|,
name|IB_PORT_LINK_WIDTH_SUPPORTED_F
block|,
name|IB_PORT_LINK_WIDTH_ACTIVE_F
block|,
name|IB_PORT_LINK_SPEED_SUPPORTED_F
block|,
name|IB_PORT_STATE_F
block|,
name|IB_PORT_PHYS_STATE_F
block|,
name|IB_PORT_LINK_DOWN_DEF_F
block|,
name|IB_PORT_MKEY_PROT_BITS_F
block|,
name|IB_PORT_LMC_F
block|,
name|IB_PORT_LINK_SPEED_ACTIVE_F
block|,
name|IB_PORT_LINK_SPEED_ENABLED_F
block|,
name|IB_PORT_NEIGHBOR_MTU_F
block|,
name|IB_PORT_SMSL_F
block|,
name|IB_PORT_VL_CAP_F
block|,
name|IB_PORT_INIT_TYPE_F
block|,
name|IB_PORT_VL_HIGH_LIMIT_F
block|,
name|IB_PORT_VL_ARBITRATION_HIGH_CAP_F
block|,
name|IB_PORT_VL_ARBITRATION_LOW_CAP_F
block|,
name|IB_PORT_INIT_TYPE_REPLY_F
block|,
name|IB_PORT_MTU_CAP_F
block|,
name|IB_PORT_VL_STALL_COUNT_F
block|,
name|IB_PORT_HOQ_LIFE_F
block|,
name|IB_PORT_OPER_VLS_F
block|,
name|IB_PORT_PART_EN_INB_F
block|,
name|IB_PORT_PART_EN_OUTB_F
block|,
name|IB_PORT_FILTER_RAW_INB_F
block|,
name|IB_PORT_FILTER_RAW_OUTB_F
block|,
name|IB_PORT_MKEY_VIOL_F
block|,
name|IB_PORT_PKEY_VIOL_F
block|,
name|IB_PORT_QKEY_VIOL_F
block|,
name|IB_PORT_GUID_CAP_F
block|,
name|IB_PORT_CLIENT_REREG_F
block|,
name|IB_PORT_MCAST_PKEY_SUPR_ENAB_F
block|,
name|IB_PORT_SUBN_TIMEOUT_F
block|,
name|IB_PORT_RESP_TIME_VAL_F
block|,
name|IB_PORT_LOCAL_PHYS_ERR_F
block|,
name|IB_PORT_OVERRUN_ERR_F
block|,
name|IB_PORT_MAX_CREDIT_HINT_F
block|,
name|IB_PORT_LINK_ROUND_TRIP_F
block|,
name|IB_PORT_LAST_F
block|,
comment|/* 	 * NodeInfo fields 	 */
name|IB_NODE_FIRST_F
block|,
name|IB_NODE_BASE_VERS_F
init|=
name|IB_NODE_FIRST_F
block|,
name|IB_NODE_CLASS_VERS_F
block|,
name|IB_NODE_TYPE_F
block|,
name|IB_NODE_NPORTS_F
block|,
name|IB_NODE_SYSTEM_GUID_F
block|,
name|IB_NODE_GUID_F
block|,
name|IB_NODE_PORT_GUID_F
block|,
name|IB_NODE_PARTITION_CAP_F
block|,
name|IB_NODE_DEVID_F
block|,
name|IB_NODE_REVISION_F
block|,
name|IB_NODE_LOCAL_PORT_F
block|,
name|IB_NODE_VENDORID_F
block|,
name|IB_NODE_LAST_F
block|,
comment|/* 	 * SwitchInfo fields 	 */
name|IB_SW_FIRST_F
block|,
name|IB_SW_LINEAR_FDB_CAP_F
init|=
name|IB_SW_FIRST_F
block|,
name|IB_SW_RANDOM_FDB_CAP_F
block|,
name|IB_SW_MCAST_FDB_CAP_F
block|,
name|IB_SW_LINEAR_FDB_TOP_F
block|,
name|IB_SW_DEF_PORT_F
block|,
name|IB_SW_DEF_MCAST_PRIM_F
block|,
name|IB_SW_DEF_MCAST_NOT_PRIM_F
block|,
name|IB_SW_LIFE_TIME_F
block|,
name|IB_SW_STATE_CHANGE_F
block|,
name|IB_SW_OPT_SLTOVL_MAPPING_F
block|,
name|IB_SW_LIDS_PER_PORT_F
block|,
name|IB_SW_PARTITION_ENFORCE_CAP_F
block|,
name|IB_SW_PARTITION_ENF_INB_F
block|,
name|IB_SW_PARTITION_ENF_OUTB_F
block|,
name|IB_SW_FILTER_RAW_INB_F
block|,
name|IB_SW_FILTER_RAW_OUTB_F
block|,
name|IB_SW_ENHANCED_PORT0_F
block|,
name|IB_SW_MCAST_FDB_TOP_F
block|,
name|IB_SW_LAST_F
block|,
comment|/* 	 * SwitchLinearForwardingTable fields 	 */
name|IB_LINEAR_FORW_TBL_F
block|,
comment|/* 	 * SwitchMulticastForwardingTable fields 	 */
name|IB_MULTICAST_FORW_TBL_F
block|,
comment|/* 	 * NodeDescription fields 	 */
name|IB_NODE_DESC_F
block|,
comment|/* 	 * Notice/Trap fields 	 */
name|IB_NOTICE_IS_GENERIC_F
block|,
name|IB_NOTICE_TYPE_F
block|,
name|IB_NOTICE_PRODUCER_F
block|,
name|IB_NOTICE_TRAP_NUMBER_F
block|,
name|IB_NOTICE_ISSUER_LID_F
block|,
name|IB_NOTICE_TOGGLE_F
block|,
name|IB_NOTICE_COUNT_F
block|,
name|IB_NOTICE_DATA_DETAILS_F
block|,
name|IB_NOTICE_DATA_LID_F
block|,
name|IB_NOTICE_DATA_144_LID_F
block|,
name|IB_NOTICE_DATA_144_CAPMASK_F
block|,
comment|/* 	 * GS Performance 	 */
name|IB_PC_FIRST_F
block|,
name|IB_PC_PORT_SELECT_F
init|=
name|IB_PC_FIRST_F
block|,
name|IB_PC_COUNTER_SELECT_F
block|,
name|IB_PC_ERR_SYM_F
block|,
name|IB_PC_LINK_RECOVERS_F
block|,
name|IB_PC_LINK_DOWNED_F
block|,
name|IB_PC_ERR_RCV_F
block|,
name|IB_PC_ERR_PHYSRCV_F
block|,
name|IB_PC_ERR_SWITCH_REL_F
block|,
name|IB_PC_XMT_DISCARDS_F
block|,
name|IB_PC_ERR_XMTCONSTR_F
block|,
name|IB_PC_ERR_RCVCONSTR_F
block|,
name|IB_PC_COUNTER_SELECT2_F
block|,
name|IB_PC_ERR_LOCALINTEG_F
block|,
name|IB_PC_ERR_EXCESS_OVR_F
block|,
name|IB_PC_VL15_DROPPED_F
block|,
name|IB_PC_XMT_BYTES_F
block|,
name|IB_PC_RCV_BYTES_F
block|,
name|IB_PC_XMT_PKTS_F
block|,
name|IB_PC_RCV_PKTS_F
block|,
name|IB_PC_XMT_WAIT_F
block|,
name|IB_PC_LAST_F
block|,
comment|/* 	 * SMInfo 	 */
name|IB_SMINFO_GUID_F
block|,
name|IB_SMINFO_KEY_F
block|,
name|IB_SMINFO_ACT_F
block|,
name|IB_SMINFO_PRIO_F
block|,
name|IB_SMINFO_STATE_F
block|,
comment|/* 	 * SA RMPP 	 */
name|IB_SA_RMPP_VERS_F
block|,
name|IB_SA_RMPP_TYPE_F
block|,
name|IB_SA_RMPP_RESP_F
block|,
name|IB_SA_RMPP_FLAGS_F
block|,
name|IB_SA_RMPP_STATUS_F
block|,
comment|/* data1 */
name|IB_SA_RMPP_D1_F
block|,
name|IB_SA_RMPP_SEGNUM_F
block|,
comment|/* data2 */
name|IB_SA_RMPP_D2_F
block|,
name|IB_SA_RMPP_LEN_F
block|,
comment|/* DATA: Payload len */
name|IB_SA_RMPP_NEWWIN_F
block|,
comment|/* ACK: new window last */
comment|/* 	 * SA Multi Path rec 	 */
name|IB_SA_MP_NPATH_F
block|,
name|IB_SA_MP_NSRC_F
block|,
name|IB_SA_MP_NDEST_F
block|,
name|IB_SA_MP_GID0_F
block|,
comment|/* 	 * SA Path rec 	 */
name|IB_SA_PR_DGID_F
block|,
name|IB_SA_PR_SGID_F
block|,
name|IB_SA_PR_DLID_F
block|,
name|IB_SA_PR_SLID_F
block|,
name|IB_SA_PR_NPATH_F
block|,
name|IB_SA_PR_SL_F
block|,
comment|/* 	 * MC Member rec 	 */
name|IB_SA_MCM_MGID_F
block|,
name|IB_SA_MCM_PORTGID_F
block|,
name|IB_SA_MCM_QKEY_F
block|,
name|IB_SA_MCM_MLID_F
block|,
name|IB_SA_MCM_SL_F
block|,
name|IB_SA_MCM_MTU_F
block|,
name|IB_SA_MCM_RATE_F
block|,
name|IB_SA_MCM_TCLASS_F
block|,
name|IB_SA_MCM_PKEY_F
block|,
name|IB_SA_MCM_FLOW_LABEL_F
block|,
name|IB_SA_MCM_JOIN_STATE_F
block|,
name|IB_SA_MCM_PROXY_JOIN_F
block|,
comment|/* 	 * Service record 	 */
name|IB_SA_SR_ID_F
block|,
name|IB_SA_SR_GID_F
block|,
name|IB_SA_SR_PKEY_F
block|,
name|IB_SA_SR_LEASE_F
block|,
name|IB_SA_SR_KEY_F
block|,
name|IB_SA_SR_NAME_F
block|,
name|IB_SA_SR_DATA_F
block|,
comment|/* 	 * ATS SM record - within SA_SR_DATA 	 */
name|IB_ATS_SM_NODE_ADDR_F
block|,
name|IB_ATS_SM_MAGIC_KEY_F
block|,
name|IB_ATS_SM_NODE_TYPE_F
block|,
name|IB_ATS_SM_NODE_NAME_F
block|,
comment|/* 	 * SLTOVL MAPPING TABLE 	 */
name|IB_SLTOVL_MAPPING_TABLE_F
block|,
comment|/* 	 * VL ARBITRATION TABLE 	 */
name|IB_VL_ARBITRATION_TABLE_F
block|,
comment|/* 	 * IB vendor class range 2 	 */
name|IB_VEND2_OUI_F
block|,
name|IB_VEND2_DATA_F
block|,
comment|/* 	 * PortCountersExtended 	 */
name|IB_PC_EXT_FIRST_F
block|,
name|IB_PC_EXT_PORT_SELECT_F
init|=
name|IB_PC_EXT_FIRST_F
block|,
name|IB_PC_EXT_COUNTER_SELECT_F
block|,
name|IB_PC_EXT_XMT_BYTES_F
block|,
name|IB_PC_EXT_RCV_BYTES_F
block|,
name|IB_PC_EXT_XMT_PKTS_F
block|,
name|IB_PC_EXT_RCV_PKTS_F
block|,
name|IB_PC_EXT_XMT_UPKTS_F
block|,
name|IB_PC_EXT_RCV_UPKTS_F
block|,
name|IB_PC_EXT_XMT_MPKTS_F
block|,
name|IB_PC_EXT_RCV_MPKTS_F
block|,
name|IB_PC_EXT_LAST_F
block|,
comment|/* 	 * GUIDInfo fields 	 */
name|IB_GUID_GUID0_F
block|,
comment|/* Obsolete, kept for compatibility 			    Use IB_GI_GUID0_F going forward */
comment|/* 	 * ClassPortInfo fields 	 */
name|IB_CPI_BASEVER_F
block|,
name|IB_CPI_CLASSVER_F
block|,
name|IB_CPI_CAPMASK_F
block|,
name|IB_CPI_CAPMASK2_F
block|,
name|IB_CPI_RESP_TIME_VALUE_F
block|,
name|IB_CPI_REDIRECT_GID_F
block|,
name|IB_CPI_REDIRECT_TC_F
block|,
name|IB_CPI_REDIRECT_SL_F
block|,
name|IB_CPI_REDIRECT_FL_F
block|,
name|IB_CPI_REDIRECT_LID_F
block|,
name|IB_CPI_REDIRECT_PKEY_F
block|,
name|IB_CPI_REDIRECT_QP_F
block|,
name|IB_CPI_REDIRECT_QKEY_F
block|,
name|IB_CPI_TRAP_GID_F
block|,
name|IB_CPI_TRAP_TC_F
block|,
name|IB_CPI_TRAP_SL_F
block|,
name|IB_CPI_TRAP_FL_F
block|,
name|IB_CPI_TRAP_LID_F
block|,
name|IB_CPI_TRAP_PKEY_F
block|,
name|IB_CPI_TRAP_HL_F
block|,
name|IB_CPI_TRAP_QP_F
block|,
name|IB_CPI_TRAP_QKEY_F
block|,
comment|/* 	 * PortXmitDataSL fields 	 */
name|IB_PC_XMT_DATA_SL_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_XMT_DATA_SL0_F
init|=
name|IB_PC_XMT_DATA_SL_FIRST_F
block|,
name|IB_PC_XMT_DATA_SL1_F
block|,
name|IB_PC_XMT_DATA_SL2_F
block|,
name|IB_PC_XMT_DATA_SL3_F
block|,
name|IB_PC_XMT_DATA_SL4_F
block|,
name|IB_PC_XMT_DATA_SL5_F
block|,
name|IB_PC_XMT_DATA_SL6_F
block|,
name|IB_PC_XMT_DATA_SL7_F
block|,
name|IB_PC_XMT_DATA_SL8_F
block|,
name|IB_PC_XMT_DATA_SL9_F
block|,
name|IB_PC_XMT_DATA_SL10_F
block|,
name|IB_PC_XMT_DATA_SL11_F
block|,
name|IB_PC_XMT_DATA_SL12_F
block|,
name|IB_PC_XMT_DATA_SL13_F
block|,
name|IB_PC_XMT_DATA_SL14_F
block|,
name|IB_PC_XMT_DATA_SL15_F
block|,
name|IB_PC_XMT_DATA_SL_LAST_F
block|,
comment|/* 	 * PortRcvDataSL fields 	 */
name|IB_PC_RCV_DATA_SL_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_RCV_DATA_SL0_F
init|=
name|IB_PC_RCV_DATA_SL_FIRST_F
block|,
name|IB_PC_RCV_DATA_SL1_F
block|,
name|IB_PC_RCV_DATA_SL2_F
block|,
name|IB_PC_RCV_DATA_SL3_F
block|,
name|IB_PC_RCV_DATA_SL4_F
block|,
name|IB_PC_RCV_DATA_SL5_F
block|,
name|IB_PC_RCV_DATA_SL6_F
block|,
name|IB_PC_RCV_DATA_SL7_F
block|,
name|IB_PC_RCV_DATA_SL8_F
block|,
name|IB_PC_RCV_DATA_SL9_F
block|,
name|IB_PC_RCV_DATA_SL10_F
block|,
name|IB_PC_RCV_DATA_SL11_F
block|,
name|IB_PC_RCV_DATA_SL12_F
block|,
name|IB_PC_RCV_DATA_SL13_F
block|,
name|IB_PC_RCV_DATA_SL14_F
block|,
name|IB_PC_RCV_DATA_SL15_F
block|,
name|IB_PC_RCV_DATA_SL_LAST_F
block|,
comment|/* 	 * PortXmitDiscardDetails fields 	 */
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_XMT_INACT_DISC_F
block|,
name|IB_PC_XMT_NEIGH_MTU_DISC_F
block|,
name|IB_PC_XMT_SW_LIFE_DISC_F
block|,
name|IB_PC_XMT_SW_HOL_DISC_F
block|,
name|IB_PC_XMT_DISC_LAST_F
block|,
comment|/* 	 * PortRcvErrorDetails fields 	 */
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_RCV_LOCAL_PHY_ERR_F
block|,
name|IB_PC_RCV_MALFORMED_PKT_ERR_F
block|,
name|IB_PC_RCV_BUF_OVR_ERR_F
block|,
name|IB_PC_RCV_DLID_MAP_ERR_F
block|,
name|IB_PC_RCV_VL_MAP_ERR_F
block|,
name|IB_PC_RCV_LOOPING_ERR_F
block|,
name|IB_PC_RCV_ERR_LAST_F
block|,
comment|/* 	 * PortSamplesControl fields 	 */
name|IB_PSC_OPCODE_F
block|,
name|IB_PSC_PORT_SELECT_F
block|,
name|IB_PSC_TICK_F
block|,
name|IB_PSC_COUNTER_WIDTH_F
block|,
name|IB_PSC_COUNTER_MASK0_F
block|,
name|IB_PSC_COUNTER_MASKS1TO9_F
block|,
name|IB_PSC_COUNTER_MASKS10TO14_F
block|,
name|IB_PSC_SAMPLE_MECHS_F
block|,
name|IB_PSC_SAMPLE_STATUS_F
block|,
name|IB_PSC_OPTION_MASK_F
block|,
name|IB_PSC_VENDOR_MASK_F
block|,
name|IB_PSC_SAMPLE_START_F
block|,
name|IB_PSC_SAMPLE_INTVL_F
block|,
name|IB_PSC_TAG_F
block|,
name|IB_PSC_COUNTER_SEL0_F
block|,
name|IB_PSC_COUNTER_SEL1_F
block|,
name|IB_PSC_COUNTER_SEL2_F
block|,
name|IB_PSC_COUNTER_SEL3_F
block|,
name|IB_PSC_COUNTER_SEL4_F
block|,
name|IB_PSC_COUNTER_SEL5_F
block|,
name|IB_PSC_COUNTER_SEL6_F
block|,
name|IB_PSC_COUNTER_SEL7_F
block|,
name|IB_PSC_COUNTER_SEL8_F
block|,
name|IB_PSC_COUNTER_SEL9_F
block|,
name|IB_PSC_COUNTER_SEL10_F
block|,
name|IB_PSC_COUNTER_SEL11_F
block|,
name|IB_PSC_COUNTER_SEL12_F
block|,
name|IB_PSC_COUNTER_SEL13_F
block|,
name|IB_PSC_COUNTER_SEL14_F
block|,
name|IB_PSC_SAMPLES_ONLY_OPT_MASK_F
block|,
name|IB_PSC_LAST_F
block|,
comment|/* 	 * GUIDInfo fields 	 */
name|IB_GI_GUID0_F
block|,
comment|/* a duplicate of IB_GUID_GUID0_F for backwards 			  compatibility */
name|IB_GI_GUID1_F
block|,
name|IB_GI_GUID2_F
block|,
name|IB_GI_GUID3_F
block|,
name|IB_GI_GUID4_F
block|,
name|IB_GI_GUID5_F
block|,
name|IB_GI_GUID6_F
block|,
name|IB_GI_GUID7_F
block|,
comment|/* 	 * GUID Info Record 	 */
name|IB_SA_GIR_LID_F
block|,
name|IB_SA_GIR_BLOCKNUM_F
block|,
name|IB_SA_GIR_GUID0_F
block|,
name|IB_SA_GIR_GUID1_F
block|,
name|IB_SA_GIR_GUID2_F
block|,
name|IB_SA_GIR_GUID3_F
block|,
name|IB_SA_GIR_GUID4_F
block|,
name|IB_SA_GIR_GUID5_F
block|,
name|IB_SA_GIR_GUID6_F
block|,
name|IB_SA_GIR_GUID7_F
block|,
comment|/* 	 * More PortInfo fields 	 */
name|IB_PORT_CAPMASK2_F
block|,
name|IB_PORT_LINK_SPEED_EXT_ACTIVE_F
block|,
name|IB_PORT_LINK_SPEED_EXT_SUPPORTED_F
block|,
name|IB_PORT_LINK_SPEED_EXT_ENABLED_F
block|,
name|IB_PORT_LINK_SPEED_EXT_LAST_F
block|,
comment|/* 	 * PortExtendedSpeedsCounters fields 	 */
name|IB_PESC_PORT_SELECT_F
block|,
name|IB_PESC_COUNTER_SELECT_F
block|,
name|IB_PESC_SYNC_HDR_ERR_CTR_F
block|,
name|IB_PESC_UNK_BLOCK_CTR_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE0_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE1_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE2_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE3_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE4_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE5_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE6_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE7_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE8_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE9_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE10_F
block|,
name|IB_PESC_ERR_DET_CTR_LANE11_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE0_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE1_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE2_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE3_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE4_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE5_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE6_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE7_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE8_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE9_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE10_F
block|,
name|IB_PESC_FEC_CORR_BLOCK_CTR_LANE11_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE0_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE1_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE2_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE3_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE4_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE5_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE6_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE7_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE8_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE9_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE10_F
block|,
name|IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE11_F
block|,
name|IB_PESC_LAST_F
block|,
comment|/* 	 * PortOpRcvCounters fields 	 */
name|IB_PC_PORT_OP_RCV_COUNTERS_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_PORT_OP_RCV_PKTS_F
init|=
name|IB_PC_PORT_OP_RCV_COUNTERS_FIRST_F
block|,
name|IB_PC_PORT_OP_RCV_DATA_F
block|,
name|IB_PC_PORT_OP_RCV_COUNTERS_LAST_F
block|,
comment|/* 	 * PortFlowCtlCounters fields 	 */
name|IB_PC_PORT_FLOW_CTL_COUNTERS_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_PORT_XMIT_FLOW_PKTS_F
init|=
name|IB_PC_PORT_FLOW_CTL_COUNTERS_FIRST_F
block|,
name|IB_PC_PORT_RCV_FLOW_PKTS_F
block|,
name|IB_PC_PORT_FLOW_CTL_COUNTERS_LAST_F
block|,
comment|/* 	 * PortVLOpPackets fields 	 */
name|IB_PC_PORT_VL_OP_PACKETS_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_PORT_VL_OP_PACKETS0_F
init|=
name|IB_PC_PORT_VL_OP_PACKETS_FIRST_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS1_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS2_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS3_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS4_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS5_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS6_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS7_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS8_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS9_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS10_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS11_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS12_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS13_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS14_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS15_F
block|,
name|IB_PC_PORT_VL_OP_PACKETS_LAST_F
block|,
comment|/* 	 * PortVLOpData fields 	 */
name|IB_PC_PORT_VL_OP_DATA_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_PORT_VL_OP_DATA0_F
init|=
name|IB_PC_PORT_VL_OP_DATA_FIRST_F
block|,
name|IB_PC_PORT_VL_OP_DATA1_F
block|,
name|IB_PC_PORT_VL_OP_DATA2_F
block|,
name|IB_PC_PORT_VL_OP_DATA3_F
block|,
name|IB_PC_PORT_VL_OP_DATA4_F
block|,
name|IB_PC_PORT_VL_OP_DATA5_F
block|,
name|IB_PC_PORT_VL_OP_DATA6_F
block|,
name|IB_PC_PORT_VL_OP_DATA7_F
block|,
name|IB_PC_PORT_VL_OP_DATA8_F
block|,
name|IB_PC_PORT_VL_OP_DATA9_F
block|,
name|IB_PC_PORT_VL_OP_DATA10_F
block|,
name|IB_PC_PORT_VL_OP_DATA11_F
block|,
name|IB_PC_PORT_VL_OP_DATA12_F
block|,
name|IB_PC_PORT_VL_OP_DATA13_F
block|,
name|IB_PC_PORT_VL_OP_DATA14_F
block|,
name|IB_PC_PORT_VL_OP_DATA15_F
block|,
name|IB_PC_PORT_VL_OP_DATA_LAST_F
block|,
comment|/* 	 * PortVLXmitFlowCtlUpdateErrors fields 	 */
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS0_F
init|=
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS_FIRST_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS1_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS2_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS3_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS4_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS5_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS6_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS7_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS8_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS9_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS10_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS11_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS12_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS13_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS14_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS15_F
block|,
name|IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS_LAST_F
block|,
comment|/* 	 * PortVLXmitWaitCounters fields 	 */
name|IB_PC_PORT_VL_XMIT_WAIT_COUNTERS_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_PORT_VL_XMIT_WAIT0_F
init|=
name|IB_PC_PORT_VL_XMIT_WAIT_COUNTERS_FIRST_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT1_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT2_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT3_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT4_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT5_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT6_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT7_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT8_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT9_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT10_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT11_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT12_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT13_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT14_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT15_F
block|,
name|IB_PC_PORT_VL_XMIT_WAIT_COUNTERS_LAST_F
block|,
comment|/* 	 * SwPortVLCongestion fields 	 */
name|IB_PC_SW_PORT_VL_CONGESTION_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_SW_PORT_VL_CONGESTION0_F
init|=
name|IB_PC_SW_PORT_VL_CONGESTION_FIRST_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION1_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION2_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION3_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION4_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION5_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION6_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION7_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION8_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION9_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION10_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION11_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION12_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION13_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION14_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION15_F
block|,
name|IB_PC_SW_PORT_VL_CONGESTION_LAST_F
block|,
comment|/* 	 * PortRcvConCtrl fields 	 */
name|IB_PC_RCV_CON_CTRL_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_RCV_CON_CTRL_PKT_RCV_FECN_F
init|=
name|IB_PC_RCV_CON_CTRL_FIRST_F
block|,
name|IB_PC_RCV_CON_CTRL_PKT_RCV_BECN_F
block|,
name|IB_PC_RCV_CON_CTRL_LAST_F
block|,
comment|/* 	 * PortSLRcvFECN fields 	 */
name|IB_PC_SL_RCV_FECN_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_SL_RCV_FECN0_F
init|=
name|IB_PC_SL_RCV_FECN_FIRST_F
block|,
name|IB_PC_SL_RCV_FECN1_F
block|,
name|IB_PC_SL_RCV_FECN2_F
block|,
name|IB_PC_SL_RCV_FECN3_F
block|,
name|IB_PC_SL_RCV_FECN4_F
block|,
name|IB_PC_SL_RCV_FECN5_F
block|,
name|IB_PC_SL_RCV_FECN6_F
block|,
name|IB_PC_SL_RCV_FECN7_F
block|,
name|IB_PC_SL_RCV_FECN8_F
block|,
name|IB_PC_SL_RCV_FECN9_F
block|,
name|IB_PC_SL_RCV_FECN10_F
block|,
name|IB_PC_SL_RCV_FECN11_F
block|,
name|IB_PC_SL_RCV_FECN12_F
block|,
name|IB_PC_SL_RCV_FECN13_F
block|,
name|IB_PC_SL_RCV_FECN14_F
block|,
name|IB_PC_SL_RCV_FECN15_F
block|,
name|IB_PC_SL_RCV_FECN_LAST_F
block|,
comment|/* 	 * PortSLRcvBECN fields 	 */
name|IB_PC_SL_RCV_BECN_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_SL_RCV_BECN0_F
init|=
name|IB_PC_SL_RCV_BECN_FIRST_F
block|,
name|IB_PC_SL_RCV_BECN1_F
block|,
name|IB_PC_SL_RCV_BECN2_F
block|,
name|IB_PC_SL_RCV_BECN3_F
block|,
name|IB_PC_SL_RCV_BECN4_F
block|,
name|IB_PC_SL_RCV_BECN5_F
block|,
name|IB_PC_SL_RCV_BECN6_F
block|,
name|IB_PC_SL_RCV_BECN7_F
block|,
name|IB_PC_SL_RCV_BECN8_F
block|,
name|IB_PC_SL_RCV_BECN9_F
block|,
name|IB_PC_SL_RCV_BECN10_F
block|,
name|IB_PC_SL_RCV_BECN11_F
block|,
name|IB_PC_SL_RCV_BECN12_F
block|,
name|IB_PC_SL_RCV_BECN13_F
block|,
name|IB_PC_SL_RCV_BECN14_F
block|,
name|IB_PC_SL_RCV_BECN15_F
block|,
name|IB_PC_SL_RCV_BECN_LAST_F
block|,
comment|/* 	 * PortXmitConCtrl fields 	 */
name|IB_PC_XMIT_CON_CTRL_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_XMIT_CON_CTRL_TIME_CONG_F
init|=
name|IB_PC_XMIT_CON_CTRL_FIRST_F
block|,
name|IB_PC_XMIT_CON_CTRL_LAST_F
block|,
comment|/* 	 * PortVLXmitTimeCong fields 	 */
name|IB_PC_VL_XMIT_TIME_CONG_FIRST_F
block|,
comment|/* for PortSelect and CounterSelect, use IB_PC_PORT_SELECT_F and IB_PC_COUNTER_SELECT_F */
name|IB_PC_VL_XMIT_TIME_CONG0_F
init|=
name|IB_PC_VL_XMIT_TIME_CONG_FIRST_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG1_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG2_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG3_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG4_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG5_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG6_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG7_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG8_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG9_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG10_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG11_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG12_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG13_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG14_F
block|,
name|IB_PC_VL_XMIT_TIME_CONG_LAST_F
block|,
comment|/* 	 * Mellanox ExtendedPortInfo fields 	 */
name|IB_MLNX_EXT_PORT_STATE_CHG_ENABLE_F
block|,
name|IB_MLNX_EXT_PORT_LINK_SPEED_SUPPORTED_F
block|,
name|IB_MLNX_EXT_PORT_LINK_SPEED_ENABLED_F
block|,
name|IB_MLNX_EXT_PORT_LINK_SPEED_ACTIVE_F
block|,
name|IB_MLNX_EXT_PORT_LAST_F
block|,
comment|/* 	 * Congestion Control Mad fields 	 * bytes 24-31 of congestion control mad 	 */
name|IB_CC_CCKEY_F
block|,
comment|/* 	 * CongestionInfo fields 	 */
name|IB_CC_CONGESTION_INFO_FIRST_F
block|,
name|IB_CC_CONGESTION_INFO_F
init|=
name|IB_CC_CONGESTION_INFO_FIRST_F
block|,
name|IB_CC_CONGESTION_INFO_CONTROL_TABLE_CAP_F
block|,
name|IB_CC_CONGESTION_INFO_LAST_F
block|,
comment|/* 	 * CongestionKeyInfo fields 	 */
name|IB_CC_CONGESTION_KEY_INFO_FIRST_F
block|,
name|IB_CC_CONGESTION_KEY_INFO_CC_KEY_F
init|=
name|IB_CC_CONGESTION_KEY_INFO_FIRST_F
block|,
name|IB_CC_CONGESTION_KEY_INFO_CC_KEY_PROTECT_BIT_F
block|,
name|IB_CC_CONGESTION_KEY_INFO_CC_KEY_LEASE_PERIOD_F
block|,
name|IB_CC_CONGESTION_KEY_INFO_CC_KEY_VIOLATIONS_F
block|,
name|IB_CC_CONGESTION_KEY_INFO_LAST_F
block|,
comment|/* 	 * CongestionLog (common) fields 	 */
name|IB_CC_CONGESTION_LOG_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_LOGTYPE_F
init|=
name|IB_CC_CONGESTION_LOG_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_CONGESTION_FLAGS_F
block|,
name|IB_CC_CONGESTION_LOG_LAST_F
block|,
comment|/* 	 * CongestionLog (Switch) fields 	 */
name|IB_CC_CONGESTION_LOG_SWITCH_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_SWITCH_LOG_EVENTS_COUNTER_F
init|=
name|IB_CC_CONGESTION_LOG_SWITCH_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_SWITCH_CURRENT_TIME_STAMP_F
block|,
name|IB_CC_CONGESTION_LOG_SWITCH_PORTMAP_F
block|,
name|IB_CC_CONGESTION_LOG_SWITCH_LAST_F
block|,
comment|/* 	 * CongestionLogEvent (Switch) fields 	 */
name|IB_CC_CONGESTION_LOG_ENTRY_SWITCH_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_SWITCH_SLID_F
init|=
name|IB_CC_CONGESTION_LOG_ENTRY_SWITCH_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_SWITCH_DLID_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_SWITCH_SL_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_SWITCH_TIMESTAMP_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_SWITCH_LAST_F
block|,
comment|/* 	 * CongestionLog (CA) fields 	 */
name|IB_CC_CONGESTION_LOG_CA_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_CA_THRESHOLD_EVENT_COUNTER_F
init|=
name|IB_CC_CONGESTION_LOG_CA_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_CA_THRESHOLD_CONGESTION_EVENT_MAP_F
block|,
name|IB_CC_CONGESTION_LOG_CA_CURRENT_TIMESTAMP_F
block|,
name|IB_CC_CONGESTION_LOG_CA_LAST_F
block|,
comment|/* 	 * CongestionLogEvent (CA) fields 	 */
name|IB_CC_CONGESTION_LOG_ENTRY_CA_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_LOCAL_QP_CN_ENTRY_F
init|=
name|IB_CC_CONGESTION_LOG_ENTRY_CA_FIRST_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_SL_CN_ENTRY_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_SERVICE_TYPE_CN_ENTRY_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_REMOTE_QP_NUMBER_CN_ENTRY_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_LOCAL_LID_CN_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_REMOTE_LID_CN_ENTRY_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_TIMESTAMP_CN_ENTRY_F
block|,
name|IB_CC_CONGESTION_LOG_ENTRY_CA_LAST_F
block|,
comment|/* 	 * SwitchCongestionSetting fields 	 */
name|IB_CC_SWITCH_CONGESTION_SETTING_FIRST_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_CONTROL_MAP_F
init|=
name|IB_CC_SWITCH_CONGESTION_SETTING_FIRST_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_VICTIM_MASK_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_CREDIT_MASK_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_THRESHOLD_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_PACKET_SIZE_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_CS_THRESHOLD_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_CS_RETURN_DELAY_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_MARKING_RATE_F
block|,
name|IB_CC_SWITCH_CONGESTION_SETTING_LAST_F
block|,
comment|/* 	 * SwitchPortCongestionSettingElement fields 	 */
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_FIRST_F
block|,
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_VALID_F
init|=
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_FIRST_F
block|,
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_CONTROL_TYPE_F
block|,
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_THRESHOLD_F
block|,
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_PACKET_SIZE_F
block|,
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_CONG_PARM_MARKING_RATE_F
block|,
name|IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_LAST_F
block|,
comment|/* 	 * CACongestionSetting fields 	 */
name|IB_CC_CA_CONGESTION_SETTING_FIRST_F
block|,
name|IB_CC_CA_CONGESTION_SETTING_PORT_CONTROL_F
init|=
name|IB_CC_CA_CONGESTION_SETTING_FIRST_F
block|,
name|IB_CC_CA_CONGESTION_SETTING_CONTROL_MAP_F
block|,
name|IB_CC_CA_CONGESTION_SETTING_LAST_F
block|,
comment|/* 	 * CACongestionEntry fields 	 */
name|IB_CC_CA_CONGESTION_ENTRY_FIRST_F
block|,
name|IB_CC_CA_CONGESTION_ENTRY_CCTI_TIMER_F
init|=
name|IB_CC_CA_CONGESTION_ENTRY_FIRST_F
block|,
name|IB_CC_CA_CONGESTION_ENTRY_CCTI_INCREASE_F
block|,
name|IB_CC_CA_CONGESTION_ENTRY_TRIGGER_THRESHOLD_F
block|,
name|IB_CC_CA_CONGESTION_ENTRY_CCTI_MIN_F
block|,
name|IB_CC_CA_CONGESTION_ENTRY_LAST_F
block|,
comment|/* 	 * CongestionControlTable fields 	 */
name|IB_CC_CONGESTION_CONTROL_TABLE_FIRST_F
block|,
name|IB_CC_CONGESTION_CONTROL_TABLE_CCTI_LIMIT_F
init|=
name|IB_CC_CONGESTION_CONTROL_TABLE_FIRST_F
block|,
name|IB_CC_CONGESTION_CONTROL_TABLE_LAST_F
block|,
comment|/* 	 * CongestionControlTableEntry fields 	 */
name|IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_FIRST_F
block|,
name|IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_CCT_SHIFT_F
init|=
name|IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_FIRST_F
block|,
name|IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_CCT_MULTIPLIER_F
block|,
name|IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_LAST_F
block|,
comment|/* 	 * Timestamp fields 	 */
name|IB_CC_TIMESTAMP_FIRST_F
block|,
name|IB_CC_TIMESTAMP_F
init|=
name|IB_CC_TIMESTAMP_FIRST_F
block|,
name|IB_CC_TIMESTAMP_LAST_F
block|,
comment|/* 	 * Node Record 	 */
name|IB_SA_NR_FIRST_F
block|,
name|IB_SA_NR_LID_F
init|=
name|IB_SA_NR_FIRST_F
block|,
name|IB_SA_NR_BASEVER_F
block|,
name|IB_SA_NR_CLASSVER_F
block|,
name|IB_SA_NR_TYPE_F
block|,
name|IB_SA_NR_NPORTS_F
block|,
name|IB_SA_NR_SYSTEM_GUID_F
block|,
name|IB_SA_NR_GUID_F
block|,
name|IB_SA_NR_PORT_GUID_F
block|,
name|IB_SA_NR_PARTITION_CAP_F
block|,
name|IB_SA_NR_DEVID_F
block|,
name|IB_SA_NR_REVISION_F
block|,
name|IB_SA_NR_LOCAL_PORT_F
block|,
name|IB_SA_NR_VENDORID_F
block|,
name|IB_SA_NR_NODEDESC_F
block|,
name|IB_SA_NR_LAST_F
block|,
comment|/* 	 * PortMirrorRoute fields 	 */
name|IB_PMR_FIRST_F
block|,
name|IB_PMR_ENCAP_RAW_ETH_TYPE_F
init|=
name|IB_PMR_FIRST_F
block|,
name|IB_PMR_MAX_MIRROR_LEN_F
block|,
name|IB_PMR_MT_F
block|,
name|IB_PMR_BF_F
block|,
name|IB_PMR_NM_PORT_F
block|,
name|IB_PMR_LRH_VL_F
block|,
name|IB_PMR_LRH_LVER_F
block|,
name|IB_PMR_LRH_SL_F
block|,
name|IB_PMR_LRH_LNH_F
block|,
name|IB_PMR_LRH_DLID_F
block|,
name|IB_PMR_LRH_LEN_F
block|,
name|IB_PMR_LRH_SLID_F
block|,
name|IB_PMR_LAST_F
block|,
comment|/* 	 * PortMirrorFilter fields 	 */
name|IB_PMF_FIRST_F
block|,
name|IB_PMF_MIRROR_FILTER0_F
init|=
name|IB_PMF_FIRST_F
block|,
name|IB_PMF_MIRROR_FILTER1_F
block|,
name|IB_PMF_MIRROR_MASK0_F
block|,
name|IB_PMF_MIRROR_MASK1_F
block|,
name|IB_PMF_MIRROR_MASK2_F
block|,
name|IB_PMF_MIRROR_MASK3_F
block|,
name|IB_PMF_B0_F
block|,
name|IB_PMF_MIRROR_MASK_OFFS_0
block|,
name|IB_PMF_B1_F
block|,
name|IB_PMF_MIRROR_MASK_OFFS_1
block|,
name|IB_PMF_B2_F
block|,
name|IB_PMF_MIRROR_MASK_OFFS_2
block|,
name|IB_PMF_B3_F
block|,
name|IB_PMF_MIRROR_MASK_OFFS_3
block|,
name|IB_PMF_LAST_F
block|,
comment|/* 	 * PortMirrorPorts fields 	 */
name|IB_PMP_FIRST_F
block|,
name|IB_PMP_TQ_1_F
init|=
name|IB_PMP_FIRST_F
block|,
name|IB_PMP_RQ_1_F
block|,
name|IB_PMP_TQ_2_F
block|,
name|IB_PMP_RQ_2_F
block|,
name|IB_PMP_TQ_3_F
block|,
name|IB_PMP_RQ_3_F
block|,
name|IB_PMP_TQ_4_F
block|,
name|IB_PMP_RQ_4_F
block|,
name|IB_PMP_TQ_5_F
block|,
name|IB_PMP_RQ_5_F
block|,
name|IB_PMP_TQ_6_F
block|,
name|IB_PMP_RQ_6_F
block|,
name|IB_PMP_TQ_7_F
block|,
name|IB_PMP_RQ_7_F
block|,
name|IB_PMP_TQ_8_F
block|,
name|IB_PMP_RQ_8_F
block|,
name|IB_PMP_TQ_9_F
block|,
name|IB_PMP_RQ_9_F
block|,
name|IB_PMP_TQ_10_F
block|,
name|IB_PMP_RQ_10_F
block|,
name|IB_PMP_TQ_11_F
block|,
name|IB_PMP_RQ_11_F
block|,
name|IB_PMP_TQ_12_F
block|,
name|IB_PMP_RQ_12_F
block|,
name|IB_PMP_TQ_13_F
block|,
name|IB_PMP_RQ_13_F
block|,
name|IB_PMP_TQ_14_F
block|,
name|IB_PMP_RQ_14_F
block|,
name|IB_PMP_TQ_15_F
block|,
name|IB_PMP_RQ_15_F
block|,
name|IB_PMP_TQ_16_F
block|,
name|IB_PMP_RQ_16_F
block|,
name|IB_PMP_TQ_17_F
block|,
name|IB_PMP_RQ_17_F
block|,
name|IB_PMP_TQ_18_F
block|,
name|IB_PMP_RQ_18_F
block|,
name|IB_PMP_TQ_19_F
block|,
name|IB_PMP_RQ_19_F
block|,
name|IB_PMP_TQ_20_F
block|,
name|IB_PMP_RQ_20_F
block|,
name|IB_PMP_TQ_21_F
block|,
name|IB_PMP_RQ_21_F
block|,
name|IB_PMP_TQ_22_F
block|,
name|IB_PMP_RQ_22_F
block|,
name|IB_PMP_TQ_23_F
block|,
name|IB_PMP_RQ_23_F
block|,
name|IB_PMP_TQ_24_F
block|,
name|IB_PMP_RQ_24_F
block|,
name|IB_PMP_TQ_25_F
block|,
name|IB_PMP_RQ_25_F
block|,
name|IB_PMP_TQ_26_F
block|,
name|IB_PMP_RQ_26_F
block|,
name|IB_PMP_TQ_27_F
block|,
name|IB_PMP_RQ_27_F
block|,
name|IB_PMP_TQ_28_F
block|,
name|IB_PMP_RQ_28_F
block|,
name|IB_PMP_TQ_29_F
block|,
name|IB_PMP_RQ_29_F
block|,
name|IB_PMP_TQ_30_F
block|,
name|IB_PMP_RQ_30_F
block|,
name|IB_PMP_TQ_31_F
block|,
name|IB_PMP_RQ_31_F
block|,
name|IB_PMP_TQ_32_F
block|,
name|IB_PMP_RQ_32_F
block|,
name|IB_PMP_TQ_33_F
block|,
name|IB_PMP_RQ_33_F
block|,
name|IB_PMP_TQ_34_F
block|,
name|IB_PMP_RQ_34_F
block|,
name|IB_PMP_TQ_35_F
block|,
name|IB_PMP_RQ_35_F
block|,
name|IB_PMP_TQ_36_F
block|,
name|IB_PMP_RQ_36_F
block|,
name|IB_PMP_LAST_F
block|,
comment|/* 	 * PortSamplesResult fields 	 */
name|IB_PSR_TAG_F
block|,
name|IB_PSR_SAMPLE_STATUS_F
block|,
name|IB_PSR_COUNTER0_F
block|,
name|IB_PSR_COUNTER1_F
block|,
name|IB_PSR_COUNTER2_F
block|,
name|IB_PSR_COUNTER3_F
block|,
name|IB_PSR_COUNTER4_F
block|,
name|IB_PSR_COUNTER5_F
block|,
name|IB_PSR_COUNTER6_F
block|,
name|IB_PSR_COUNTER7_F
block|,
name|IB_PSR_COUNTER8_F
block|,
name|IB_PSR_COUNTER9_F
block|,
name|IB_PSR_COUNTER10_F
block|,
name|IB_PSR_COUNTER11_F
block|,
name|IB_PSR_COUNTER12_F
block|,
name|IB_PSR_COUNTER13_F
block|,
name|IB_PSR_COUNTER14_F
block|,
name|IB_PSR_LAST_F
block|,
comment|/* 	 * PortInfoExtended fields 	 */
name|IB_PORT_EXT_FIRST_F
block|,
name|IB_PORT_EXT_CAPMASK_F
init|=
name|IB_PORT_EXT_FIRST_F
block|,
name|IB_PORT_EXT_FEC_MODE_ACTIVE_F
block|,
name|IB_PORT_EXT_FDR_FEC_MODE_SUPPORTED_F
block|,
name|IB_PORT_EXT_FDR_FEC_MODE_ENABLED_F
block|,
name|IB_PORT_EXT_EDR_FEC_MODE_SUPPORTED_F
block|,
name|IB_PORT_EXT_EDR_FEC_MODE_ENABLED_F
block|,
name|IB_PORT_EXT_LAST_F
block|,
comment|/* 	 * PortExtendedSpeedsCounters RSFEC active fields 	 */
name|IB_PESC_RSFEC_PORT_SELECT_F
block|,
name|IB_PESC_RSFEC_COUNTER_SELECT_F
block|,
name|IB_PESC_RSFEC_SYNC_HDR_ERR_CTR_F
block|,
name|IB_PESC_RSFEC_UNK_BLOCK_CTR_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE0_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE1_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE2_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE3_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE4_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE5_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE6_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE7_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE8_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE9_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE10_F
block|,
name|IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE11_F
block|,
name|IB_PESC_PORT_FEC_CORR_BLOCK_CTR_F
block|,
name|IB_PESC_PORT_FEC_UNCORR_BLOCK_CTR_F
block|,
name|IB_PESC_PORT_FEC_CORR_SYMBOL_CTR_F
block|,
name|IB_PESC_RSFEC_LAST_F
block|,
comment|/* 	 * More PortCountersExtended fields 	 */
name|IB_PC_EXT_COUNTER_SELECT2_F
block|,
name|IB_PC_EXT_ERR_SYM_F
block|,
name|IB_PC_EXT_LINK_RECOVERS_F
block|,
name|IB_PC_EXT_LINK_DOWNED_F
block|,
name|IB_PC_EXT_ERR_RCV_F
block|,
name|IB_PC_EXT_ERR_PHYSRCV_F
block|,
name|IB_PC_EXT_ERR_SWITCH_REL_F
block|,
name|IB_PC_EXT_XMT_DISCARDS_F
block|,
name|IB_PC_EXT_ERR_XMTCONSTR_F
block|,
name|IB_PC_EXT_ERR_RCVCONSTR_F
block|,
name|IB_PC_EXT_ERR_LOCALINTEG_F
block|,
name|IB_PC_EXT_ERR_EXCESS_OVR_F
block|,
name|IB_PC_EXT_VL15_DROPPED_F
block|,
name|IB_PC_EXT_XMT_WAIT_F
block|,
name|IB_PC_EXT_QP1_DROP_F
block|,
name|IB_PC_EXT_ERR_LAST_F
block|,
comment|/* 	 * Another PortCounters field 	 */
name|IB_PC_QP1_DROP_F
block|,
name|IB_FIELD_LAST_
comment|/* must be last */
block|}
enum|;
end_enum

begin_comment
comment|/*  * SA RMPP section  */
end_comment

begin_enum
enum|enum
name|RMPP_TYPE_ENUM
block|{
name|IB_RMPP_TYPE_NONE
block|,
name|IB_RMPP_TYPE_DATA
block|,
name|IB_RMPP_TYPE_ACK
block|,
name|IB_RMPP_TYPE_STOP
block|,
name|IB_RMPP_TYPE_ABORT
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|RMPP_FLAGS_ENUM
block|{
name|IB_RMPP_FLAG_ACTIVE
init|=
literal|1
operator|<<
literal|0
block|,
name|IB_RMPP_FLAG_FIRST
init|=
literal|1
operator|<<
literal|1
block|,
name|IB_RMPP_FLAG_LAST
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|status
decl_stmt|;
union|union
block|{
name|uint32_t
name|u
decl_stmt|;
name|uint32_t
name|segnum
decl_stmt|;
block|}
name|d1
union|;
union|union
block|{
name|uint32_t
name|u
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
name|uint32_t
name|newwin
decl_stmt|;
block|}
name|d2
union|;
block|}
name|ib_rmpp_hdr_t
typedef|;
end_typedef

begin_enum
enum|enum
name|SA_SIZES_ENUM
block|{
name|SA_HEADER_SZ
init|=
literal|20
block|, }
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
name|ib_sa_call
block|{
name|unsigned
name|attrid
decl_stmt|;
name|unsigned
name|mod
decl_stmt|;
name|uint64_t
name|mask
decl_stmt|;
name|unsigned
name|method
decl_stmt|;
name|uint64_t
name|trid
decl_stmt|;
comment|/* used for out mad if nonzero, return real val */
name|unsigned
name|recsz
decl_stmt|;
comment|/* return field */
name|ib_rmpp_hdr_t
name|rmpp
decl_stmt|;
block|}
name|ib_sa_call_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ib_vendor_call
block|{
name|unsigned
name|method
decl_stmt|;
name|unsigned
name|mgmt_class
decl_stmt|;
name|unsigned
name|attrid
decl_stmt|;
name|unsigned
name|mod
decl_stmt|;
name|uint32_t
name|oui
decl_stmt|;
name|unsigned
name|timeout
decl_stmt|;
name|ib_rmpp_hdr_t
name|rmpp
decl_stmt|;
block|}
name|ib_vendor_call_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ib_bm_call
block|{
name|unsigned
name|method
decl_stmt|;
name|unsigned
name|attrid
decl_stmt|;
name|unsigned
name|mod
decl_stmt|;
name|unsigned
name|timeout
decl_stmt|;
name|uint64_t
name|bkey
decl_stmt|;
block|}
name|ib_bm_call_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|IB_MIN_UCAST_LID
value|1
end_define

begin_define
define|#
directive|define
name|IB_MAX_UCAST_LID
value|(0xc000-1)
end_define

begin_define
define|#
directive|define
name|IB_MIN_MCAST_LID
value|0xc000
end_define

begin_define
define|#
directive|define
name|IB_MAX_MCAST_LID
value|(0xffff-1)
end_define

begin_define
define|#
directive|define
name|IB_LID_VALID
parameter_list|(
name|lid
parameter_list|)
value|((lid)>= IB_MIN_UCAST_LID&& lid<= IB_MAX_UCAST_LID)
end_define

begin_define
define|#
directive|define
name|IB_MLID_VALID
parameter_list|(
name|lid
parameter_list|)
value|((lid)>= IB_MIN_MCAST_LID&& lid<= IB_MAX_MCAST_LID)
end_define

begin_define
define|#
directive|define
name|MAD_DEF_RETRIES
value|3
end_define

begin_define
define|#
directive|define
name|MAD_DEF_TIMEOUT_MS
value|1000
end_define

begin_enum
enum|enum
name|MAD_DEST
block|{
name|IB_DEST_LID
block|,
name|IB_DEST_DRPATH
block|,
name|IB_DEST_GUID
block|,
name|IB_DEST_DRSLID
block|,
name|IB_DEST_GID
block|}
enum|;
end_enum

begin_enum
enum|enum
name|MAD_NODE_TYPE
block|{
name|IB_NODE_CA
init|=
literal|1
block|,
name|IB_NODE_SWITCH
block|,
name|IB_NODE_ROUTER
block|,
name|NODE_RNIC
block|,
name|IB_NODE_MAX
init|=
name|NODE_RNIC
block|}
enum|;
end_enum

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* portid.c */
end_comment

begin_function_decl
name|MAD_EXPORT
name|char
modifier|*
name|portid2str
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|portid2portnum
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|str2drpath
parameter_list|(
name|ib_dr_path_t
modifier|*
name|path
parameter_list|,
name|char
modifier|*
name|routepath
parameter_list|,
name|int
name|drslid
parameter_list|,
name|int
name|drdlid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|char
modifier|*
name|drpath2str
parameter_list|(
name|ib_dr_path_t
modifier|*
name|path
parameter_list|,
name|char
modifier|*
name|dstr
parameter_list|,
name|size_t
name|dstr_size
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ib_portid_set
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|int
name|lid
parameter_list|,
name|int
name|qp
parameter_list|,
name|int
name|qkey
parameter_list|)
block|{
name|portid
operator|->
name|lid
operator|=
name|lid
expr_stmt|;
name|portid
operator|->
name|qp
operator|=
name|qp
expr_stmt|;
name|portid
operator|->
name|qkey
operator|=
name|qkey
expr_stmt|;
name|portid
operator|->
name|grh_present
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* fields.c */
end_comment

begin_function_decl
name|MAD_EXPORT
name|uint32_t
name|mad_get_field
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_set_field
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* field must be byte aligned */
end_comment

begin_function_decl
name|MAD_EXPORT
name|uint64_t
name|mad_get_field64
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_set_field64
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|uint64_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_set_array
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_get_array
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_decode_field
parameter_list|(
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_encode_field
parameter_list|(
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_print_field
parameter_list|(
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|char
modifier|*
name|mad_dump_field
parameter_list|(
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|char
modifier|*
name|mad_dump_val
parameter_list|(
name|enum
name|MAD_FIELDS
name|field
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
specifier|const
name|char
modifier|*
name|mad_field_name
parameter_list|(
name|enum
name|MAD_FIELDS
name|field
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* mad.c */
end_comment

begin_function_decl
name|MAD_EXPORT
name|void
modifier|*
name|mad_encode
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_dr_path_t
modifier|*
name|drpath
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|uint64_t
name|mad_trid
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_build_pkt
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|ib_rmpp_hdr_t
modifier|*
name|rmpp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* New interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|void
name|madrpc_show_errors
parameter_list|(
name|int
name|set
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|madrpc_set_retries
parameter_list|(
name|int
name|retries
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|madrpc_set_timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|struct
name|ibmad_port
modifier|*
name|mad_rpc_open_port
parameter_list|(
name|char
modifier|*
name|dev_name
parameter_list|,
name|int
name|dev_port
parameter_list|,
name|int
modifier|*
name|mgmt_classes
parameter_list|,
name|int
name|num_classes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_rpc_close_port
parameter_list|(
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * On redirection, the dport argument is updated with the redirection target,  * so subsequent MADs will not go through the redirection process again but  * reach the target directly.  */
end_comment

begin_function_decl
name|MAD_EXPORT
name|void
modifier|*
name|mad_rpc
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|void
modifier|*
name|payload
parameter_list|,
name|void
modifier|*
name|rcvdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
modifier|*
name|mad_rpc_rmpp
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|ib_rmpp_hdr_t
modifier|*
name|rmpp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_rpc_portid
parameter_list|(
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_rpc_set_retries
parameter_list|(
name|struct
name|ibmad_port
modifier|*
name|port
parameter_list|,
name|int
name|retries
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_rpc_set_timeout
parameter_list|(
name|struct
name|ibmad_port
modifier|*
name|port
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_rpc_class_agent
parameter_list|(
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|int
name|cls
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_get_timeout
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|int
name|override_ms
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_get_retries
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* register.c */
end_comment

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_register_port_client
parameter_list|(
name|int
name|port_id
parameter_list|,
name|int
name|mgmt
parameter_list|,
name|uint8_t
name|rmpp_version
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|MAD_EXPORT
name|int
name|mad_register_client
argument_list|(
name|int
name|mgmt
argument_list|,
name|uint8_t
name|rmpp_version
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|int
name|mad_register_server
argument_list|(
name|int
name|mgmt
argument_list|,
name|uint8_t
name|rmpp_version
argument_list|,
name|long
name|method_mask
index|[
literal|16
operator|/
sizeof|sizeof
argument_list|(
name|long
argument_list|)
index|]
argument_list|,
name|uint32_t
name|class_oui
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* register.c new interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_register_client_via
parameter_list|(
name|int
name|mgmt
parameter_list|,
name|uint8_t
name|rmpp_version
parameter_list|,
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_register_server_via
parameter_list|(
name|int
name|mgmt
parameter_list|,
name|uint8_t
name|rmpp_version
parameter_list|,
name|long
name|method_mask
index|[
literal|16
operator|/
sizeof|sizeof
argument_list|(
name|long
argument_list|)
index|]
parameter_list|,
name|uint32_t
name|class_oui
parameter_list|,
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|MAD_EXPORT
name|int
name|mad_class_agent
argument_list|(
name|int
name|mgmt
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* serv.c */
end_comment

begin_decl_stmt
name|MAD_EXPORT
name|int
name|mad_send
argument_list|(
name|ib_rpc_t
operator|*
name|rpc
argument_list|,
name|ib_portid_t
operator|*
name|dport
argument_list|,
name|ib_rmpp_hdr_t
operator|*
name|rmpp
argument_list|,
name|void
operator|*
name|data
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|void
modifier|*
name|mad_receive
argument_list|(
name|void
operator|*
name|umad
argument_list|,
name|int
name|timeout
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|int
name|mad_respond
argument_list|(
name|void
operator|*
name|umad
argument_list|,
name|ib_portid_t
operator|*
name|portid
argument_list|,
name|uint32_t
name|rstatus
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* serv.c new interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_send_via
parameter_list|(
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|ib_rmpp_hdr_t
modifier|*
name|rmpp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
modifier|*
name|mad_receive_via
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|,
name|int
name|timeout
parameter_list|,
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|mad_respond_via
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|uint32_t
name|rstatus
parameter_list|,
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
modifier|*
name|mad_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_free
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* vendor.c */
end_comment

begin_decl_stmt
name|MAD_EXPORT
name|uint8_t
modifier|*
name|ib_vendor_call
argument_list|(
name|void
operator|*
name|data
argument_list|,
name|ib_portid_t
operator|*
name|portid
argument_list|,
name|ib_vendor_call_t
operator|*
name|call
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* vendor.c new interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|ib_vendor_call_via
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ib_vendor_call_t
modifier|*
name|call
parameter_list|,
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|mad_is_vendor_range1
parameter_list|(
name|int
name|mgmt
parameter_list|)
block|{
return|return
name|mgmt
operator|>=
literal|0x9
operator|&&
name|mgmt
operator|<=
literal|0xf
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mad_is_vendor_range2
parameter_list|(
name|int
name|mgmt
parameter_list|)
block|{
return|return
name|mgmt
operator|>=
literal|0x30
operator|&&
name|mgmt
operator|<=
literal|0x4f
return|;
block|}
end_function

begin_comment
comment|/* rpc.c */
end_comment

begin_decl_stmt
name|MAD_EXPORT
name|int
name|madrpc_portid
argument_list|(
name|void
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|madrpc
argument_list|(
name|ib_rpc_t
operator|*
name|rpc
argument_list|,
name|ib_portid_t
operator|*
name|dport
argument_list|,
name|void
operator|*
name|payload
argument_list|,
name|void
operator|*
name|rcvdata
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|madrpc_rmpp
argument_list|(
name|ib_rpc_t
operator|*
name|rpc
argument_list|,
name|ib_portid_t
operator|*
name|dport
argument_list|,
name|ib_rmpp_hdr_t
operator|*
name|rmpp
argument_list|,
name|void
operator|*
name|data
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|void
name|madrpc_init
argument_list|(
name|char
operator|*
name|dev_name
argument_list|,
name|int
name|dev_port
argument_list|,
name|int
operator|*
name|mgmt_classes
argument_list|,
name|int
name|num_classes
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|madrpc_save_mad
argument_list|(
name|void
operator|*
name|madbuf
argument_list|,
name|int
name|len
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* smp.c */
end_comment

begin_decl_stmt
name|MAD_EXPORT
name|uint8_t
modifier|*
name|smp_query
argument_list|(
name|void
operator|*
name|buf
argument_list|,
name|ib_portid_t
operator|*
name|id
argument_list|,
name|unsigned
name|attrid
argument_list|,
name|unsigned
name|mod
argument_list|,
name|unsigned
name|timeout
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|uint8_t
modifier|*
name|smp_set
argument_list|(
name|void
operator|*
name|buf
argument_list|,
name|ib_portid_t
operator|*
name|id
argument_list|,
name|unsigned
name|attrid
argument_list|,
name|unsigned
name|mod
argument_list|,
name|unsigned
name|timeout
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* smp.c new interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|smp_query_via
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_portid_t
modifier|*
name|id
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|smp_set_via
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_portid_t
modifier|*
name|id
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|smp_query_status_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
name|int
modifier|*
name|rstatus
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|smp_set_status_via
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
name|int
modifier|*
name|rstatus
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
name|smp_mkey_set
parameter_list|(
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|uint64_t
name|mkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|uint64_t
name|smp_mkey_get
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* cc.c */
end_comment

begin_function_decl
name|MAD_EXPORT
name|void
modifier|*
name|cc_query_status_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
name|int
modifier|*
name|rstatus
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|uint64_t
name|cckey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|void
modifier|*
name|cc_config_status_via
parameter_list|(
name|void
modifier|*
name|payload
parameter_list|,
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
name|int
modifier|*
name|rstatus
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|uint64_t
name|cckey
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* sa.c */
end_comment

begin_decl_stmt
name|uint8_t
modifier|*
name|sa_call
argument_list|(
name|void
operator|*
name|rcvbuf
argument_list|,
name|ib_portid_t
operator|*
name|portid
argument_list|,
name|ib_sa_call_t
operator|*
name|sa
argument_list|,
name|unsigned
name|timeout
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|int
name|ib_path_query
argument_list|(
name|ibmad_gid_t
name|srcgid
argument_list|,
name|ibmad_gid_t
name|destgid
argument_list|,
name|ib_portid_t
operator|*
name|sm_id
argument_list|,
name|void
operator|*
name|buf
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* sa.c new interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|sa_rpc_call
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ib_sa_call_t
modifier|*
name|sa
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|ib_path_query_via
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|ibmad_gid_t
name|srcgid
parameter_list|,
name|ibmad_gid_t
name|destgid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* returns lid */
end_comment

begin_function_decl
name|MAD_EXPORT
name|int
name|ib_node_query_via
parameter_list|(
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|,
name|uint64_t
name|guid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* resolve.c */
end_comment

begin_decl_stmt
name|MAD_EXPORT
name|int
name|ib_resolve_smlid
argument_list|(
name|ib_portid_t
operator|*
name|sm_id
argument_list|,
name|int
name|timeout
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|int
name|ib_resolve_portid_str
argument_list|(
name|ib_portid_t
operator|*
name|portid
argument_list|,
name|char
operator|*
name|addr_str
argument_list|,
expr|enum
name|MAD_DEST
name|dest
argument_list|,
name|ib_portid_t
operator|*
name|sm_id
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MAD_EXPORT
name|int
name|ib_resolve_self
argument_list|(
name|ib_portid_t
operator|*
name|portid
argument_list|,
name|int
operator|*
name|portnum
argument_list|,
name|ibmad_gid_t
operator|*
name|gid
argument_list|)
name|DEPRECATED
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* resolve.c new interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|int
name|ib_resolve_smlid_via
parameter_list|(
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|int
name|timeout
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|ib_resolve_guid_via
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|uint64_t
modifier|*
name|guid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|int
name|timeout
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|ib_resolve_gid_via
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ibmad_gid_t
name|gid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|int
name|timeout
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|ib_resolve_portid_str_via
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|char
modifier|*
name|addr_str
parameter_list|,
name|enum
name|MAD_DEST
name|dest
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|int
name|ib_resolve_self_via
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|int
modifier|*
name|portnum
parameter_list|,
name|ibmad_gid_t
modifier|*
name|gid
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* gs.c new interface */
end_comment

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|pma_query_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
name|unsigned
name|id
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|performance_reset_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|mask
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
name|unsigned
name|id
parameter_list|,
specifier|const
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* bm.c */
end_comment

begin_function_decl
name|MAD_EXPORT
name|uint8_t
modifier|*
name|bm_call_via
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ib_bm_call_t
modifier|*
name|call
parameter_list|,
name|struct
name|ibmad_port
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* dump.c */
end_comment

begin_decl_stmt
name|MAD_EXPORT
name|ib_mad_dump_fn
name|mad_dump_int
decl_stmt|,
name|mad_dump_uint
decl_stmt|,
name|mad_dump_hex
decl_stmt|,
name|mad_dump_rhex
decl_stmt|,
name|mad_dump_bitfield
decl_stmt|,
name|mad_dump_array
decl_stmt|,
name|mad_dump_string
decl_stmt|,
name|mad_dump_linkwidth
decl_stmt|,
name|mad_dump_linkwidthsup
decl_stmt|,
name|mad_dump_linkwidthen
decl_stmt|,
name|mad_dump_linkdowndefstate
decl_stmt|,
name|mad_dump_linkspeed
decl_stmt|,
name|mad_dump_linkspeedsup
decl_stmt|,
name|mad_dump_linkspeeden
decl_stmt|,
name|mad_dump_linkspeedext
decl_stmt|,
name|mad_dump_linkspeedextsup
decl_stmt|,
name|mad_dump_linkspeedexten
decl_stmt|,
name|mad_dump_portstate
decl_stmt|,
name|mad_dump_portstates
decl_stmt|,
name|mad_dump_physportstate
decl_stmt|,
name|mad_dump_portcapmask
decl_stmt|,
name|mad_dump_portcapmask2
decl_stmt|,
name|mad_dump_mtu
decl_stmt|,
name|mad_dump_vlcap
decl_stmt|,
name|mad_dump_opervls
decl_stmt|,
name|mad_dump_node_type
decl_stmt|,
name|mad_dump_sltovl
decl_stmt|,
name|mad_dump_vlarbitration
decl_stmt|,
name|mad_dump_nodedesc
decl_stmt|,
name|mad_dump_nodeinfo
decl_stmt|,
name|mad_dump_portinfo
decl_stmt|,
name|mad_dump_switchinfo
decl_stmt|,
name|mad_dump_perfcounters
decl_stmt|,
name|mad_dump_perfcounters_ext
decl_stmt|,
name|mad_dump_perfcounters_xmt_sl
decl_stmt|,
name|mad_dump_perfcounters_rcv_sl
decl_stmt|,
name|mad_dump_perfcounters_xmt_disc
decl_stmt|,
name|mad_dump_perfcounters_rcv_err
decl_stmt|,
name|mad_dump_portsamples_control
decl_stmt|,
name|mad_dump_port_ext_speeds_counters
decl_stmt|,
name|mad_dump_perfcounters_port_op_rcv_counters
decl_stmt|,
name|mad_dump_perfcounters_port_flow_ctl_counters
decl_stmt|,
name|mad_dump_perfcounters_port_vl_op_packet
decl_stmt|,
name|mad_dump_perfcounters_port_vl_op_data
decl_stmt|,
name|mad_dump_perfcounters_port_vl_xmit_flow_ctl_update_errors
decl_stmt|,
name|mad_dump_perfcounters_port_vl_xmit_wait_counters
decl_stmt|,
name|mad_dump_perfcounters_sw_port_vl_congestion
decl_stmt|,
name|mad_dump_perfcounters_rcv_con_ctrl
decl_stmt|,
name|mad_dump_perfcounters_sl_rcv_fecn
decl_stmt|,
name|mad_dump_perfcounters_sl_rcv_becn
decl_stmt|,
name|mad_dump_perfcounters_xmit_con_ctrl
decl_stmt|,
name|mad_dump_perfcounters_vl_xmit_time_cong
decl_stmt|,
name|mad_dump_mlnx_ext_port_info
decl_stmt|,
name|mad_dump_cc_congestioninfo
decl_stmt|,
name|mad_dump_cc_congestionkeyinfo
decl_stmt|,
name|mad_dump_cc_congestionlog
decl_stmt|,
name|mad_dump_cc_congestionlogswitch
decl_stmt|,
name|mad_dump_cc_congestionlogentryswitch
decl_stmt|,
name|mad_dump_cc_congestionlogca
decl_stmt|,
name|mad_dump_cc_congestionlogentryca
decl_stmt|,
name|mad_dump_cc_switchcongestionsetting
decl_stmt|,
name|mad_dump_cc_switchportcongestionsettingelement
decl_stmt|,
name|mad_dump_cc_cacongestionsetting
decl_stmt|,
name|mad_dump_cc_cacongestionentry
decl_stmt|,
name|mad_dump_cc_congestioncontroltable
decl_stmt|,
name|mad_dump_cc_congestioncontroltableentry
decl_stmt|,
name|mad_dump_cc_timestamp
decl_stmt|,
name|mad_dump_classportinfo
decl_stmt|,
name|mad_dump_portmirror_route
decl_stmt|,
name|mad_dump_portmirror_ports
decl_stmt|,
name|mad_dump_portsamples_result
decl_stmt|,
name|mad_dump_portinfo_ext
decl_stmt|,
name|mad_dump_port_ext_speeds_counters_rsfec_active
decl_stmt|;
end_decl_stmt

begin_function_decl
name|MAD_EXPORT
name|void
name|mad_dump_fields
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|,
name|int
name|valsz
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|MAD_EXPORT
name|int
name|ibdebug
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
end_if

begin_ifndef
ifndef|#
directive|ifndef
name|ntohll
end_ifndef

begin_define
define|#
directive|define
name|ntohll
value|bswap_64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|htonll
end_ifndef

begin_define
define|#
directive|define
name|htonll
value|bswap_64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_elif
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
end_elif

begin_ifndef
ifndef|#
directive|ifndef
name|ntohll
end_ifndef

begin_define
define|#
directive|define
name|ntohll
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|htonll
end_ifndef

begin_define
define|#
directive|define
name|htonll
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __BYTE_ORDER == __BIG_ENDIAN */
end_comment

begin_comment
comment|/* Misc. macros: */
end_comment

begin_comment
comment|/** align value \a l to \a size (ceil) */
end_comment

begin_define
define|#
directive|define
name|ALIGN
parameter_list|(
name|l
parameter_list|,
name|size
parameter_list|)
value|(((l) + ((size) - 1)) / (size) * (size))
end_define

begin_comment
comment|/** printf style warning MACRO, includes name of function and pid */
end_comment

begin_define
define|#
directive|define
name|IBWARN
parameter_list|(
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|fprintf(stderr, "ibwarn: [%d] %s: " fmt "\n", \ (int)getpid(), __func__, ## __VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|IBDEBUG
parameter_list|(
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|fprintf(stdout, "ibdebug: [%d] %s: " fmt "\n", \ (int)getpid(), __func__, ## __VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|IBVERBOSE
parameter_list|(
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|fprintf(stdout, "[%d] %s: " fmt "\n", \ (int)getpid(), __func__, ## __VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|IBPANIC
parameter_list|(
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|do { \ 	fprintf(stderr, "ibpanic: [%d] %s: " fmt ": %m\n", \ 	(int)getpid(), __func__, ## __VA_ARGS__); \ 	exit(-1); \ } while(0)
end_define

begin_function_decl
name|MAD_EXPORT
name|void
name|xdump
parameter_list|(
name|FILE
modifier|*
name|file
parameter_list|,
name|char
modifier|*
name|msg
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|END_C_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MAD_H_ */
end_comment

end_unit

