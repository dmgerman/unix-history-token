begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.  * Copyright (c) 2004, 2011-2012 Intel Corporation.  All rights reserved.  * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc.  All rights reserved.  * Copyright (c) 2005 PathScale, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|INFINIBAND_VERBS_H
end_ifndef

begin_define
define|#
directive|define
name|INFINIBAND_VERBS_H
end_define

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
value|extern "C" {
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
value|}
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__cplusplus */
end_comment

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_if
if|#
directive|if
name|__GNUC__
operator|>=
literal|3
end_if

begin_define
define|#
directive|define
name|__attribute_const
value|__attribute__((const))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__attribute_const
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|BEGIN_C_DECLS
end_macro

begin_union
union|union
name|ibv_gid
block|{
name|uint8_t
name|raw
index|[
literal|16
index|]
decl_stmt|;
struct|struct
block|{
name|__be64
name|subnet_prefix
decl_stmt|;
name|__be64
name|interface_id
decl_stmt|;
block|}
name|global
struct|;
block|}
union|;
end_union

begin_ifndef
ifndef|#
directive|ifndef
name|container_of
end_ifndef

begin_comment
comment|/**   * container_of - cast a member of a structure out to the containing structure   * @ptr:        the pointer to the member.   * @type:       the type of the container struct this is embedded in.   * @member:     the name of the member within the struct.   *  */
end_comment

begin_define
define|#
directive|define
name|container_of
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|((type *) ((uint8_t *)(ptr) - offsetof(type, member)))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|vext_field_avail
parameter_list|(
name|type
parameter_list|,
name|fld
parameter_list|,
name|sz
parameter_list|)
value|(offsetof(type, fld)< (sz))
end_define

begin_decl_stmt
specifier|static
name|void
modifier|*
name|__VERBS_ABI_IS_EXTENDED
init|=
operator|(
operator|(
name|uint8_t
operator|*
operator|)
name|NULL
operator|)
operator|-
literal|1
decl_stmt|;
end_decl_stmt

begin_enum
enum|enum
name|ibv_node_type
block|{
name|IBV_NODE_UNKNOWN
init|=
operator|-
literal|1
block|,
name|IBV_NODE_CA
init|=
literal|1
block|,
name|IBV_NODE_SWITCH
block|,
name|IBV_NODE_ROUTER
block|,
name|IBV_NODE_RNIC
block|,
name|IBV_NODE_USNIC
block|,
name|IBV_NODE_USNIC_UDP
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_transport_type
block|{
name|IBV_TRANSPORT_UNKNOWN
init|=
operator|-
literal|1
block|,
name|IBV_TRANSPORT_IB
init|=
literal|0
block|,
name|IBV_TRANSPORT_IWARP
block|,
name|IBV_TRANSPORT_USNIC
block|,
name|IBV_TRANSPORT_USNIC_UDP
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_device_cap_flags
block|{
name|IBV_DEVICE_RESIZE_MAX_WR
init|=
literal|1
block|,
name|IBV_DEVICE_BAD_PKEY_CNTR
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_DEVICE_BAD_QKEY_CNTR
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_DEVICE_RAW_MULTI
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_DEVICE_AUTO_PATH_MIG
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_DEVICE_CHANGE_PHY_PORT
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_DEVICE_UD_AV_PORT_ENFORCE
init|=
literal|1
operator|<<
literal|6
block|,
name|IBV_DEVICE_CURR_QP_STATE_MOD
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_DEVICE_SHUTDOWN_PORT
init|=
literal|1
operator|<<
literal|8
block|,
name|IBV_DEVICE_INIT_TYPE
init|=
literal|1
operator|<<
literal|9
block|,
name|IBV_DEVICE_PORT_ACTIVE_EVENT
init|=
literal|1
operator|<<
literal|10
block|,
name|IBV_DEVICE_SYS_IMAGE_GUID
init|=
literal|1
operator|<<
literal|11
block|,
name|IBV_DEVICE_RC_RNR_NAK_GEN
init|=
literal|1
operator|<<
literal|12
block|,
name|IBV_DEVICE_SRQ_RESIZE
init|=
literal|1
operator|<<
literal|13
block|,
name|IBV_DEVICE_N_NOTIFY_CQ
init|=
literal|1
operator|<<
literal|14
block|,
name|IBV_DEVICE_MEM_WINDOW
init|=
literal|1
operator|<<
literal|17
block|,
name|IBV_DEVICE_UD_IP_CSUM
init|=
literal|1
operator|<<
literal|18
block|,
name|IBV_DEVICE_XRC
init|=
literal|1
operator|<<
literal|20
block|,
name|IBV_DEVICE_MEM_MGT_EXTENSIONS
init|=
literal|1
operator|<<
literal|21
block|,
name|IBV_DEVICE_MEM_WINDOW_TYPE_2A
init|=
literal|1
operator|<<
literal|23
block|,
name|IBV_DEVICE_MEM_WINDOW_TYPE_2B
init|=
literal|1
operator|<<
literal|24
block|,
name|IBV_DEVICE_RC_IP_CSUM
init|=
literal|1
operator|<<
literal|25
block|,
name|IBV_DEVICE_RAW_IP_CSUM
init|=
literal|1
operator|<<
literal|26
block|,
name|IBV_DEVICE_MANAGED_FLOW_STEERING
init|=
literal|1
operator|<<
literal|29
block|}
enum|;
end_enum

begin_comment
comment|/*  * Can't extended above ibv_device_cap_flags enum as in some systems/compilers  * enum range is limited to 4 bytes.  */
end_comment

begin_define
define|#
directive|define
name|IBV_DEVICE_RAW_SCATTER_FCS
value|(1ULL<< 34)
end_define

begin_enum
enum|enum
name|ibv_atomic_cap
block|{
name|IBV_ATOMIC_NONE
block|,
name|IBV_ATOMIC_HCA
block|,
name|IBV_ATOMIC_GLOB
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_device_attr
block|{
name|char
name|fw_ver
index|[
literal|64
index|]
decl_stmt|;
name|__be64
name|node_guid
decl_stmt|;
name|__be64
name|sys_image_guid
decl_stmt|;
name|uint64_t
name|max_mr_size
decl_stmt|;
name|uint64_t
name|page_size_cap
decl_stmt|;
name|uint32_t
name|vendor_id
decl_stmt|;
name|uint32_t
name|vendor_part_id
decl_stmt|;
name|uint32_t
name|hw_ver
decl_stmt|;
name|int
name|max_qp
decl_stmt|;
name|int
name|max_qp_wr
decl_stmt|;
name|int
name|device_cap_flags
decl_stmt|;
name|int
name|max_sge
decl_stmt|;
name|int
name|max_sge_rd
decl_stmt|;
name|int
name|max_cq
decl_stmt|;
name|int
name|max_cqe
decl_stmt|;
name|int
name|max_mr
decl_stmt|;
name|int
name|max_pd
decl_stmt|;
name|int
name|max_qp_rd_atom
decl_stmt|;
name|int
name|max_ee_rd_atom
decl_stmt|;
name|int
name|max_res_rd_atom
decl_stmt|;
name|int
name|max_qp_init_rd_atom
decl_stmt|;
name|int
name|max_ee_init_rd_atom
decl_stmt|;
name|enum
name|ibv_atomic_cap
name|atomic_cap
decl_stmt|;
name|int
name|max_ee
decl_stmt|;
name|int
name|max_rdd
decl_stmt|;
name|int
name|max_mw
decl_stmt|;
name|int
name|max_raw_ipv6_qp
decl_stmt|;
name|int
name|max_raw_ethy_qp
decl_stmt|;
name|int
name|max_mcast_grp
decl_stmt|;
name|int
name|max_mcast_qp_attach
decl_stmt|;
name|int
name|max_total_mcast_qp_attach
decl_stmt|;
name|int
name|max_ah
decl_stmt|;
name|int
name|max_fmr
decl_stmt|;
name|int
name|max_map_per_fmr
decl_stmt|;
name|int
name|max_srq
decl_stmt|;
name|int
name|max_srq_wr
decl_stmt|;
name|int
name|max_srq_sge
decl_stmt|;
name|uint16_t
name|max_pkeys
decl_stmt|;
name|uint8_t
name|local_ca_ack_delay
decl_stmt|;
name|uint8_t
name|phys_port_cnt
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* An extensible input struct for possible future extensions of the  * ibv_query_device_ex verb. */
end_comment

begin_struct
struct|struct
name|ibv_query_device_ex_input
block|{
name|uint32_t
name|comp_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_odp_transport_cap_bits
block|{
name|IBV_ODP_SUPPORT_SEND
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_ODP_SUPPORT_RECV
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_ODP_SUPPORT_WRITE
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_ODP_SUPPORT_READ
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_ODP_SUPPORT_ATOMIC
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_odp_caps
block|{
name|uint64_t
name|general_caps
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|rc_odp_caps
decl_stmt|;
name|uint32_t
name|uc_odp_caps
decl_stmt|;
name|uint32_t
name|ud_odp_caps
decl_stmt|;
block|}
name|per_transport_caps
struct|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_odp_general_caps
block|{
name|IBV_ODP_SUPPORT
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_tso_caps
block|{
name|uint32_t
name|max_tso
decl_stmt|;
name|uint32_t
name|supported_qpts
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* RX Hash function flags */
end_comment

begin_enum
enum|enum
name|ibv_rx_hash_function_flags
block|{
name|IBV_RX_HASH_FUNC_TOEPLITZ
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_comment
comment|/*  * RX Hash fields enable to set which incoming packet's field should  * participates in RX Hash. Each flag represent certain packet's field,  * when the flag is set the field that is represented by the flag will  * participate in RX Hash calculation.  * Note: *IPV4 and *IPV6 flags can't be enabled together on the same QP  * and *TCP and *UDP flags can't be enabled together on the same QP. */
end_comment

begin_enum
enum|enum
name|ibv_rx_hash_fields
block|{
name|IBV_RX_HASH_SRC_IPV4
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_RX_HASH_DST_IPV4
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_RX_HASH_SRC_IPV6
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_RX_HASH_DST_IPV6
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_RX_HASH_SRC_PORT_TCP
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_RX_HASH_DST_PORT_TCP
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_RX_HASH_SRC_PORT_UDP
init|=
literal|1
operator|<<
literal|6
block|,
name|IBV_RX_HASH_DST_PORT_UDP
init|=
literal|1
operator|<<
literal|7
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_rss_caps
block|{
name|uint32_t
name|supported_qpts
decl_stmt|;
name|uint32_t
name|max_rwq_indirection_tables
decl_stmt|;
name|uint32_t
name|max_rwq_indirection_table_size
decl_stmt|;
name|uint64_t
name|rx_hash_fields_mask
decl_stmt|;
comment|/* enum ibv_rx_hash_fields */
name|uint8_t
name|rx_hash_function
decl_stmt|;
comment|/* enum ibv_rx_hash_function_flags */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_packet_pacing_caps
block|{
name|uint32_t
name|qp_rate_limit_min
decl_stmt|;
name|uint32_t
name|qp_rate_limit_max
decl_stmt|;
comment|/* In kbps */
name|uint32_t
name|supported_qpts
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_raw_packet_caps
block|{
name|IBV_RAW_PACKET_CAP_CVLAN_STRIPPING
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_RAW_PACKET_CAP_SCATTER_FCS
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_RAW_PACKET_CAP_IP_CSUM
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_device_attr_ex
block|{
name|struct
name|ibv_device_attr
name|orig_attr
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
name|struct
name|ibv_odp_caps
name|odp_caps
decl_stmt|;
name|uint64_t
name|completion_timestamp_mask
decl_stmt|;
name|uint64_t
name|hca_core_clock
decl_stmt|;
name|uint64_t
name|device_cap_flags_ex
decl_stmt|;
name|struct
name|ibv_tso_caps
name|tso_caps
decl_stmt|;
name|struct
name|ibv_rss_caps
name|rss_caps
decl_stmt|;
name|uint32_t
name|max_wq_type_rq
decl_stmt|;
name|struct
name|ibv_packet_pacing_caps
name|packet_pacing_caps
decl_stmt|;
name|uint32_t
name|raw_packet_caps
decl_stmt|;
comment|/* Use ibv_raw_packet_caps */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_mtu
block|{
name|IBV_MTU_256
init|=
literal|1
block|,
name|IBV_MTU_512
init|=
literal|2
block|,
name|IBV_MTU_1024
init|=
literal|3
block|,
name|IBV_MTU_2048
init|=
literal|4
block|,
name|IBV_MTU_4096
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_port_state
block|{
name|IBV_PORT_NOP
init|=
literal|0
block|,
name|IBV_PORT_DOWN
init|=
literal|1
block|,
name|IBV_PORT_INIT
init|=
literal|2
block|,
name|IBV_PORT_ARMED
init|=
literal|3
block|,
name|IBV_PORT_ACTIVE
init|=
literal|4
block|,
name|IBV_PORT_ACTIVE_DEFER
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|IBV_LINK_LAYER_UNSPECIFIED
block|,
name|IBV_LINK_LAYER_INFINIBAND
block|,
name|IBV_LINK_LAYER_ETHERNET
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_port_cap_flags
block|{
name|IBV_PORT_SM
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_PORT_NOTICE_SUP
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_PORT_TRAP_SUP
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_PORT_OPT_IPD_SUP
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_PORT_AUTO_MIGR_SUP
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_PORT_SL_MAP_SUP
init|=
literal|1
operator|<<
literal|6
block|,
name|IBV_PORT_MKEY_NVRAM
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_PORT_PKEY_NVRAM
init|=
literal|1
operator|<<
literal|8
block|,
name|IBV_PORT_LED_INFO_SUP
init|=
literal|1
operator|<<
literal|9
block|,
name|IBV_PORT_SYS_IMAGE_GUID_SUP
init|=
literal|1
operator|<<
literal|11
block|,
name|IBV_PORT_PKEY_SW_EXT_PORT_TRAP_SUP
init|=
literal|1
operator|<<
literal|12
block|,
name|IBV_PORT_EXTENDED_SPEEDS_SUP
init|=
literal|1
operator|<<
literal|14
block|,
name|IBV_PORT_CM_SUP
init|=
literal|1
operator|<<
literal|16
block|,
name|IBV_PORT_SNMP_TUNNEL_SUP
init|=
literal|1
operator|<<
literal|17
block|,
name|IBV_PORT_REINIT_SUP
init|=
literal|1
operator|<<
literal|18
block|,
name|IBV_PORT_DEVICE_MGMT_SUP
init|=
literal|1
operator|<<
literal|19
block|,
name|IBV_PORT_VENDOR_CLASS_SUP
init|=
literal|1
operator|<<
literal|20
block|,
name|IBV_PORT_DR_NOTICE_SUP
init|=
literal|1
operator|<<
literal|21
block|,
name|IBV_PORT_CAP_MASK_NOTICE_SUP
init|=
literal|1
operator|<<
literal|22
block|,
name|IBV_PORT_BOOT_MGMT_SUP
init|=
literal|1
operator|<<
literal|23
block|,
name|IBV_PORT_LINK_LATENCY_SUP
init|=
literal|1
operator|<<
literal|24
block|,
name|IBV_PORT_CLIENT_REG_SUP
init|=
literal|1
operator|<<
literal|25
block|,
name|IBV_PORT_IP_BASED_GIDS
init|=
literal|1
operator|<<
literal|26
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_port_attr
block|{
name|enum
name|ibv_port_state
name|state
decl_stmt|;
name|enum
name|ibv_mtu
name|max_mtu
decl_stmt|;
name|enum
name|ibv_mtu
name|active_mtu
decl_stmt|;
name|int
name|gid_tbl_len
decl_stmt|;
name|uint32_t
name|port_cap_flags
decl_stmt|;
name|uint32_t
name|max_msg_sz
decl_stmt|;
name|uint32_t
name|bad_pkey_cntr
decl_stmt|;
name|uint32_t
name|qkey_viol_cntr
decl_stmt|;
name|uint16_t
name|pkey_tbl_len
decl_stmt|;
name|uint16_t
name|lid
decl_stmt|;
name|uint16_t
name|sm_lid
decl_stmt|;
name|uint8_t
name|lmc
decl_stmt|;
name|uint8_t
name|max_vl_num
decl_stmt|;
name|uint8_t
name|sm_sl
decl_stmt|;
name|uint8_t
name|subnet_timeout
decl_stmt|;
name|uint8_t
name|init_type_reply
decl_stmt|;
name|uint8_t
name|active_width
decl_stmt|;
name|uint8_t
name|active_speed
decl_stmt|;
name|uint8_t
name|phys_state
decl_stmt|;
name|uint8_t
name|link_layer
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_event_type
block|{
name|IBV_EVENT_CQ_ERR
block|,
name|IBV_EVENT_QP_FATAL
block|,
name|IBV_EVENT_QP_REQ_ERR
block|,
name|IBV_EVENT_QP_ACCESS_ERR
block|,
name|IBV_EVENT_COMM_EST
block|,
name|IBV_EVENT_SQ_DRAINED
block|,
name|IBV_EVENT_PATH_MIG
block|,
name|IBV_EVENT_PATH_MIG_ERR
block|,
name|IBV_EVENT_DEVICE_FATAL
block|,
name|IBV_EVENT_PORT_ACTIVE
block|,
name|IBV_EVENT_PORT_ERR
block|,
name|IBV_EVENT_LID_CHANGE
block|,
name|IBV_EVENT_PKEY_CHANGE
block|,
name|IBV_EVENT_SM_CHANGE
block|,
name|IBV_EVENT_SRQ_ERR
block|,
name|IBV_EVENT_SRQ_LIMIT_REACHED
block|,
name|IBV_EVENT_QP_LAST_WQE_REACHED
block|,
name|IBV_EVENT_CLIENT_REREGISTER
block|,
name|IBV_EVENT_GID_CHANGE
block|,
name|IBV_EVENT_WQ_FATAL
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_async_event
block|{
union|union
block|{
name|struct
name|ibv_cq
modifier|*
name|cq
decl_stmt|;
name|struct
name|ibv_qp
modifier|*
name|qp
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|struct
name|ibv_wq
modifier|*
name|wq
decl_stmt|;
name|int
name|port_num
decl_stmt|;
block|}
name|element
union|;
name|enum
name|ibv_event_type
name|event_type
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_wc_status
block|{
name|IBV_WC_SUCCESS
block|,
name|IBV_WC_LOC_LEN_ERR
block|,
name|IBV_WC_LOC_QP_OP_ERR
block|,
name|IBV_WC_LOC_EEC_OP_ERR
block|,
name|IBV_WC_LOC_PROT_ERR
block|,
name|IBV_WC_WR_FLUSH_ERR
block|,
name|IBV_WC_MW_BIND_ERR
block|,
name|IBV_WC_BAD_RESP_ERR
block|,
name|IBV_WC_LOC_ACCESS_ERR
block|,
name|IBV_WC_REM_INV_REQ_ERR
block|,
name|IBV_WC_REM_ACCESS_ERR
block|,
name|IBV_WC_REM_OP_ERR
block|,
name|IBV_WC_RETRY_EXC_ERR
block|,
name|IBV_WC_RNR_RETRY_EXC_ERR
block|,
name|IBV_WC_LOC_RDD_VIOL_ERR
block|,
name|IBV_WC_REM_INV_RD_REQ_ERR
block|,
name|IBV_WC_REM_ABORT_ERR
block|,
name|IBV_WC_INV_EECN_ERR
block|,
name|IBV_WC_INV_EEC_STATE_ERR
block|,
name|IBV_WC_FATAL_ERR
block|,
name|IBV_WC_RESP_TIMEOUT_ERR
block|,
name|IBV_WC_GENERAL_ERR
block|}
enum|;
end_enum

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_wc_status_str
parameter_list|(
name|enum
name|ibv_wc_status
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|ibv_wc_opcode
block|{
name|IBV_WC_SEND
block|,
name|IBV_WC_RDMA_WRITE
block|,
name|IBV_WC_RDMA_READ
block|,
name|IBV_WC_COMP_SWAP
block|,
name|IBV_WC_FETCH_ADD
block|,
name|IBV_WC_BIND_MW
block|,
name|IBV_WC_LOCAL_INV
block|,
name|IBV_WC_TSO
block|,
comment|/*  * Set value of IBV_WC_RECV so consumers can test if a completion is a  * receive by testing (opcode& IBV_WC_RECV).  */
name|IBV_WC_RECV
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_WC_RECV_RDMA_WITH_IMM
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|IBV_WC_IP_CSUM_OK_SHIFT
init|=
literal|2
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_create_cq_wc_flags
block|{
name|IBV_WC_EX_WITH_BYTE_LEN
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_WC_EX_WITH_IMM
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_WC_EX_WITH_QP_NUM
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_WC_EX_WITH_SRC_QP
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_WC_EX_WITH_SLID
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_WC_EX_WITH_SL
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_WC_EX_WITH_DLID_PATH_BITS
init|=
literal|1
operator|<<
literal|6
block|,
name|IBV_WC_EX_WITH_COMPLETION_TIMESTAMP
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_WC_EX_WITH_CVLAN
init|=
literal|1
operator|<<
literal|8
block|,
name|IBV_WC_EX_WITH_FLOW_TAG
init|=
literal|1
operator|<<
literal|9
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|IBV_WC_STANDARD_FLAGS
init|=
name|IBV_WC_EX_WITH_BYTE_LEN
operator||
name|IBV_WC_EX_WITH_IMM
operator||
name|IBV_WC_EX_WITH_QP_NUM
operator||
name|IBV_WC_EX_WITH_SRC_QP
operator||
name|IBV_WC_EX_WITH_SLID
operator||
name|IBV_WC_EX_WITH_SL
operator||
name|IBV_WC_EX_WITH_DLID_PATH_BITS
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|IBV_CREATE_CQ_SUP_WC_FLAGS
init|=
name|IBV_WC_STANDARD_FLAGS
operator||
name|IBV_WC_EX_WITH_COMPLETION_TIMESTAMP
operator||
name|IBV_WC_EX_WITH_CVLAN
operator||
name|IBV_WC_EX_WITH_FLOW_TAG
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_wc_flags
block|{
name|IBV_WC_GRH
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_WC_WITH_IMM
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_WC_IP_CSUM_OK
init|=
literal|1
operator|<<
name|IBV_WC_IP_CSUM_OK_SHIFT
block|,
name|IBV_WC_WITH_INV
init|=
literal|1
operator|<<
literal|3
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_wc
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|enum
name|ibv_wc_status
name|status
decl_stmt|;
name|enum
name|ibv_wc_opcode
name|opcode
decl_stmt|;
name|uint32_t
name|vendor_err
decl_stmt|;
name|uint32_t
name|byte_len
decl_stmt|;
comment|/* When (wc_flags& IBV_WC_WITH_IMM): Immediate data in network byte order. 	 * When (wc_flags& IBV_WC_WITH_INV): Stores the invalidated rkey. 	 */
union|union
block|{
name|__be32
name|imm_data
decl_stmt|;
name|uint32_t
name|invalidated_rkey
decl_stmt|;
block|}
union|;
name|uint32_t
name|qp_num
decl_stmt|;
name|uint32_t
name|src_qp
decl_stmt|;
name|int
name|wc_flags
decl_stmt|;
name|uint16_t
name|pkey_index
decl_stmt|;
name|uint16_t
name|slid
decl_stmt|;
name|uint8_t
name|sl
decl_stmt|;
name|uint8_t
name|dlid_path_bits
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_access_flags
block|{
name|IBV_ACCESS_LOCAL_WRITE
init|=
literal|1
block|,
name|IBV_ACCESS_REMOTE_WRITE
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|IBV_ACCESS_REMOTE_READ
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|IBV_ACCESS_REMOTE_ATOMIC
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|IBV_ACCESS_MW_BIND
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
name|IBV_ACCESS_ZERO_BASED
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
name|IBV_ACCESS_ON_DEMAND
init|=
operator|(
literal|1
operator|<<
literal|6
operator|)
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_mw_bind_info
block|{
name|struct
name|ibv_mr
modifier|*
name|mr
decl_stmt|;
name|uint64_t
name|addr
decl_stmt|;
name|uint64_t
name|length
decl_stmt|;
name|int
name|mw_access_flags
decl_stmt|;
comment|/* use ibv_access_flags */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_pd
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_xrcd_init_attr_mask
block|{
name|IBV_XRCD_INIT_ATTR_FD
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_XRCD_INIT_ATTR_OFLAGS
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_XRCD_INIT_ATTR_RESERVED
init|=
literal|1
operator|<<
literal|2
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_xrcd_init_attr
block|{
name|uint32_t
name|comp_mask
decl_stmt|;
name|int
name|fd
decl_stmt|;
name|int
name|oflags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_xrcd
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_rereg_mr_flags
block|{
name|IBV_REREG_MR_CHANGE_TRANSLATION
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|IBV_REREG_MR_CHANGE_PD
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|IBV_REREG_MR_CHANGE_ACCESS
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|IBV_REREG_MR_KEEP_VALID
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|IBV_REREG_MR_FLAGS_SUPPORTED
init|=
operator|(
operator|(
name|IBV_REREG_MR_KEEP_VALID
operator|<<
literal|1
operator|)
operator|-
literal|1
operator|)
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_mr
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|void
modifier|*
name|addr
decl_stmt|;
name|size_t
name|length
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|uint32_t
name|lkey
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_mw_type
block|{
name|IBV_MW_TYPE_1
init|=
literal|1
block|,
name|IBV_MW_TYPE_2
init|=
literal|2
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_mw
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|enum
name|ibv_mw_type
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_global_route
block|{
name|union
name|ibv_gid
name|dgid
decl_stmt|;
name|uint32_t
name|flow_label
decl_stmt|;
name|uint8_t
name|sgid_index
decl_stmt|;
name|uint8_t
name|hop_limit
decl_stmt|;
name|uint8_t
name|traffic_class
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_grh
block|{
name|__be32
name|version_tclass_flow
decl_stmt|;
name|__be16
name|paylen
decl_stmt|;
name|uint8_t
name|next_hdr
decl_stmt|;
name|uint8_t
name|hop_limit
decl_stmt|;
name|union
name|ibv_gid
name|sgid
decl_stmt|;
name|union
name|ibv_gid
name|dgid
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_rate
block|{
name|IBV_RATE_MAX
init|=
literal|0
block|,
name|IBV_RATE_2_5_GBPS
init|=
literal|2
block|,
name|IBV_RATE_5_GBPS
init|=
literal|5
block|,
name|IBV_RATE_10_GBPS
init|=
literal|3
block|,
name|IBV_RATE_20_GBPS
init|=
literal|6
block|,
name|IBV_RATE_30_GBPS
init|=
literal|4
block|,
name|IBV_RATE_40_GBPS
init|=
literal|7
block|,
name|IBV_RATE_60_GBPS
init|=
literal|8
block|,
name|IBV_RATE_80_GBPS
init|=
literal|9
block|,
name|IBV_RATE_120_GBPS
init|=
literal|10
block|,
name|IBV_RATE_14_GBPS
init|=
literal|11
block|,
name|IBV_RATE_56_GBPS
init|=
literal|12
block|,
name|IBV_RATE_112_GBPS
init|=
literal|13
block|,
name|IBV_RATE_168_GBPS
init|=
literal|14
block|,
name|IBV_RATE_25_GBPS
init|=
literal|15
block|,
name|IBV_RATE_100_GBPS
init|=
literal|16
block|,
name|IBV_RATE_200_GBPS
init|=
literal|17
block|,
name|IBV_RATE_300_GBPS
init|=
literal|18
block|}
enum|;
end_enum

begin_comment
comment|/**  * ibv_rate_to_mult - Convert the IB rate enum to a multiple of the  * base rate of 2.5 Gbit/sec.  For example, IBV_RATE_5_GBPS will be  * converted to 2, since 5 Gbit/sec is 2 * 2.5 Gbit/sec.  * @rate: rate to convert.  */
end_comment

begin_function_decl
name|int
name|__attribute_const
name|ibv_rate_to_mult
parameter_list|(
name|enum
name|ibv_rate
name|rate
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * mult_to_ibv_rate - Convert a multiple of 2.5 Gbit/sec to an IB rate enum.  * @mult: multiple to convert.  */
end_comment

begin_function_decl
name|enum
name|ibv_rate
name|__attribute_const
name|mult_to_ibv_rate
parameter_list|(
name|int
name|mult
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_rate_to_mbps - Convert the IB rate enum to Mbit/sec.  * For example, IBV_RATE_5_GBPS will return the value 5000.  * @rate: rate to convert.  */
end_comment

begin_function_decl
name|int
name|__attribute_const
name|ibv_rate_to_mbps
parameter_list|(
name|enum
name|ibv_rate
name|rate
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * mbps_to_ibv_rate - Convert a Mbit/sec value to an IB rate enum.  * @mbps: value to convert.  */
end_comment

begin_decl_stmt
name|enum
name|ibv_rate
name|__attribute_const
name|mbps_to_ibv_rate
argument_list|(
name|int
name|mbps
argument_list|)
name|__attribute_const
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|ibv_ah_attr
block|{
name|struct
name|ibv_global_route
name|grh
decl_stmt|;
name|uint16_t
name|dlid
decl_stmt|;
name|uint8_t
name|sl
decl_stmt|;
name|uint8_t
name|src_path_bits
decl_stmt|;
name|uint8_t
name|static_rate
decl_stmt|;
name|uint8_t
name|is_global
decl_stmt|;
name|uint8_t
name|port_num
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_srq_attr_mask
block|{
name|IBV_SRQ_MAX_WR
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_SRQ_LIMIT
init|=
literal|1
operator|<<
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_srq_attr
block|{
name|uint32_t
name|max_wr
decl_stmt|;
name|uint32_t
name|max_sge
decl_stmt|;
name|uint32_t
name|srq_limit
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_srq_init_attr
block|{
name|void
modifier|*
name|srq_context
decl_stmt|;
name|struct
name|ibv_srq_attr
name|attr
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_srq_type
block|{
name|IBV_SRQT_BASIC
block|,
name|IBV_SRQT_XRC
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_srq_init_attr_mask
block|{
name|IBV_SRQ_INIT_ATTR_TYPE
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_SRQ_INIT_ATTR_PD
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_SRQ_INIT_ATTR_XRCD
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_SRQ_INIT_ATTR_CQ
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_SRQ_INIT_ATTR_RESERVED
init|=
literal|1
operator|<<
literal|4
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_srq_init_attr_ex
block|{
name|void
modifier|*
name|srq_context
decl_stmt|;
name|struct
name|ibv_srq_attr
name|attr
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
name|enum
name|ibv_srq_type
name|srq_type
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|struct
name|ibv_xrcd
modifier|*
name|xrcd
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|cq
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_wq_type
block|{
name|IBV_WQT_RQ
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_wq_init_attr_mask
block|{
name|IBV_WQ_INIT_ATTR_FLAGS
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_WQ_INIT_ATTR_RESERVED
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_wq_flags
block|{
name|IBV_WQ_FLAGS_CVLAN_STRIPPING
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_WQ_FLAGS_SCATTER_FCS
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_WQ_FLAGS_RESERVED
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_wq_init_attr
block|{
name|void
modifier|*
name|wq_context
decl_stmt|;
name|enum
name|ibv_wq_type
name|wq_type
decl_stmt|;
name|uint32_t
name|max_wr
decl_stmt|;
name|uint32_t
name|max_sge
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|cq
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
comment|/* Use ibv_wq_init_attr_mask */
name|uint32_t
name|create_flags
decl_stmt|;
comment|/* use ibv_wq_flags */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_wq_state
block|{
name|IBV_WQS_RESET
block|,
name|IBV_WQS_RDY
block|,
name|IBV_WQS_ERR
block|,
name|IBV_WQS_UNKNOWN
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_wq_attr_mask
block|{
name|IBV_WQ_ATTR_STATE
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_WQ_ATTR_CURR_STATE
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_WQ_ATTR_FLAGS
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_WQ_ATTR_RESERVED
init|=
literal|1
operator|<<
literal|3
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_wq_attr
block|{
comment|/* enum ibv_wq_attr_mask */
name|uint32_t
name|attr_mask
decl_stmt|;
comment|/* Move the WQ to this state */
name|enum
name|ibv_wq_state
name|wq_state
decl_stmt|;
comment|/* Assume this is the current WQ state */
name|enum
name|ibv_wq_state
name|curr_wq_state
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
comment|/* Use ibv_wq_flags */
name|uint32_t
name|flags_mask
decl_stmt|;
comment|/* Use ibv_wq_flags */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Receive Work Queue Indirection Table.  * It's used in order to distribute incoming packets between different  * Receive Work Queues. Associating Receive WQs with different CPU cores  * allows to workload the traffic between different CPU cores.  * The Indirection Table can contain only WQs of type IBV_WQT_RQ. */
end_comment

begin_struct
struct|struct
name|ibv_rwq_ind_table
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|int
name|ind_tbl_handle
decl_stmt|;
name|int
name|ind_tbl_num
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_ind_table_init_attr_mask
block|{
name|IBV_CREATE_IND_TABLE_RESERVED
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|}
enum|;
end_enum

begin_comment
comment|/*  * Receive Work Queue Indirection Table attributes  */
end_comment

begin_struct
struct|struct
name|ibv_rwq_ind_table_init_attr
block|{
name|uint32_t
name|log_ind_tbl_size
decl_stmt|;
comment|/* Each entry is a pointer to a Receive Work Queue */
name|struct
name|ibv_wq
modifier|*
modifier|*
name|ind_tbl
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_qp_type
block|{
name|IBV_QPT_RC
init|=
literal|2
block|,
name|IBV_QPT_UC
block|,
name|IBV_QPT_UD
block|,
name|IBV_QPT_RAW_PACKET
init|=
literal|8
block|,
name|IBV_QPT_XRC_SEND
init|=
literal|9
block|,
name|IBV_QPT_XRC_RECV
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_qp_cap
block|{
name|uint32_t
name|max_send_wr
decl_stmt|;
name|uint32_t
name|max_recv_wr
decl_stmt|;
name|uint32_t
name|max_send_sge
decl_stmt|;
name|uint32_t
name|max_recv_sge
decl_stmt|;
name|uint32_t
name|max_inline_data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_qp_init_attr
block|{
name|void
modifier|*
name|qp_context
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|send_cq
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|recv_cq
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|struct
name|ibv_qp_cap
name|cap
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
name|int
name|sq_sig_all
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_qp_init_attr_mask
block|{
name|IBV_QP_INIT_ATTR_PD
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_QP_INIT_ATTR_XRCD
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_QP_INIT_ATTR_CREATE_FLAGS
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_QP_INIT_ATTR_MAX_TSO_HEADER
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_QP_INIT_ATTR_IND_TABLE
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_QP_INIT_ATTR_RX_HASH
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_QP_INIT_ATTR_RESERVED
init|=
literal|1
operator|<<
literal|6
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_qp_create_flags
block|{
name|IBV_QP_CREATE_BLOCK_SELF_MCAST_LB
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_QP_CREATE_SCATTER_FCS
init|=
literal|1
operator|<<
literal|8
block|,
name|IBV_QP_CREATE_CVLAN_STRIPPING
init|=
literal|1
operator|<<
literal|9
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_rx_hash_conf
block|{
comment|/* enum ibv_rx_hash_function_flags */
name|uint8_t
name|rx_hash_function
decl_stmt|;
name|uint8_t
name|rx_hash_key_len
decl_stmt|;
name|uint8_t
modifier|*
name|rx_hash_key
decl_stmt|;
comment|/* enum ibv_rx_hash_fields */
name|uint64_t
name|rx_hash_fields_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_qp_init_attr_ex
block|{
name|void
modifier|*
name|qp_context
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|send_cq
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|recv_cq
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|struct
name|ibv_qp_cap
name|cap
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
name|int
name|sq_sig_all
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|struct
name|ibv_xrcd
modifier|*
name|xrcd
decl_stmt|;
name|uint32_t
name|create_flags
decl_stmt|;
name|uint16_t
name|max_tso_header
decl_stmt|;
name|struct
name|ibv_rwq_ind_table
modifier|*
name|rwq_ind_tbl
decl_stmt|;
name|struct
name|ibv_rx_hash_conf
name|rx_hash_conf
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_qp_open_attr_mask
block|{
name|IBV_QP_OPEN_ATTR_NUM
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_QP_OPEN_ATTR_XRCD
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_QP_OPEN_ATTR_CONTEXT
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_QP_OPEN_ATTR_TYPE
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_QP_OPEN_ATTR_RESERVED
init|=
literal|1
operator|<<
literal|4
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_qp_open_attr
block|{
name|uint32_t
name|comp_mask
decl_stmt|;
name|uint32_t
name|qp_num
decl_stmt|;
name|struct
name|ibv_xrcd
modifier|*
name|xrcd
decl_stmt|;
name|void
modifier|*
name|qp_context
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_qp_attr_mask
block|{
name|IBV_QP_STATE
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_QP_CUR_STATE
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_QP_EN_SQD_ASYNC_NOTIFY
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_QP_ACCESS_FLAGS
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_QP_PKEY_INDEX
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_QP_PORT
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_QP_QKEY
init|=
literal|1
operator|<<
literal|6
block|,
name|IBV_QP_AV
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_QP_PATH_MTU
init|=
literal|1
operator|<<
literal|8
block|,
name|IBV_QP_TIMEOUT
init|=
literal|1
operator|<<
literal|9
block|,
name|IBV_QP_RETRY_CNT
init|=
literal|1
operator|<<
literal|10
block|,
name|IBV_QP_RNR_RETRY
init|=
literal|1
operator|<<
literal|11
block|,
name|IBV_QP_RQ_PSN
init|=
literal|1
operator|<<
literal|12
block|,
name|IBV_QP_MAX_QP_RD_ATOMIC
init|=
literal|1
operator|<<
literal|13
block|,
name|IBV_QP_ALT_PATH
init|=
literal|1
operator|<<
literal|14
block|,
name|IBV_QP_MIN_RNR_TIMER
init|=
literal|1
operator|<<
literal|15
block|,
name|IBV_QP_SQ_PSN
init|=
literal|1
operator|<<
literal|16
block|,
name|IBV_QP_MAX_DEST_RD_ATOMIC
init|=
literal|1
operator|<<
literal|17
block|,
name|IBV_QP_PATH_MIG_STATE
init|=
literal|1
operator|<<
literal|18
block|,
name|IBV_QP_CAP
init|=
literal|1
operator|<<
literal|19
block|,
name|IBV_QP_DEST_QPN
init|=
literal|1
operator|<<
literal|20
block|,
name|IBV_QP_RATE_LIMIT
init|=
literal|1
operator|<<
literal|25
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_qp_state
block|{
name|IBV_QPS_RESET
block|,
name|IBV_QPS_INIT
block|,
name|IBV_QPS_RTR
block|,
name|IBV_QPS_RTS
block|,
name|IBV_QPS_SQD
block|,
name|IBV_QPS_SQE
block|,
name|IBV_QPS_ERR
block|,
name|IBV_QPS_UNKNOWN
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_mig_state
block|{
name|IBV_MIG_MIGRATED
block|,
name|IBV_MIG_REARM
block|,
name|IBV_MIG_ARMED
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_qp_attr
block|{
name|enum
name|ibv_qp_state
name|qp_state
decl_stmt|;
name|enum
name|ibv_qp_state
name|cur_qp_state
decl_stmt|;
name|enum
name|ibv_mtu
name|path_mtu
decl_stmt|;
name|enum
name|ibv_mig_state
name|path_mig_state
decl_stmt|;
name|uint32_t
name|qkey
decl_stmt|;
name|uint32_t
name|rq_psn
decl_stmt|;
name|uint32_t
name|sq_psn
decl_stmt|;
name|uint32_t
name|dest_qp_num
decl_stmt|;
name|int
name|qp_access_flags
decl_stmt|;
name|struct
name|ibv_qp_cap
name|cap
decl_stmt|;
name|struct
name|ibv_ah_attr
name|ah_attr
decl_stmt|;
name|struct
name|ibv_ah_attr
name|alt_ah_attr
decl_stmt|;
name|uint16_t
name|pkey_index
decl_stmt|;
name|uint16_t
name|alt_pkey_index
decl_stmt|;
name|uint8_t
name|en_sqd_async_notify
decl_stmt|;
name|uint8_t
name|sq_draining
decl_stmt|;
name|uint8_t
name|max_rd_atomic
decl_stmt|;
name|uint8_t
name|max_dest_rd_atomic
decl_stmt|;
name|uint8_t
name|min_rnr_timer
decl_stmt|;
name|uint8_t
name|port_num
decl_stmt|;
name|uint8_t
name|timeout
decl_stmt|;
name|uint8_t
name|retry_cnt
decl_stmt|;
name|uint8_t
name|rnr_retry
decl_stmt|;
name|uint8_t
name|alt_port_num
decl_stmt|;
name|uint8_t
name|alt_timeout
decl_stmt|;
name|uint32_t
name|rate_limit
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_wr_opcode
block|{
name|IBV_WR_RDMA_WRITE
block|,
name|IBV_WR_RDMA_WRITE_WITH_IMM
block|,
name|IBV_WR_SEND
block|,
name|IBV_WR_SEND_WITH_IMM
block|,
name|IBV_WR_RDMA_READ
block|,
name|IBV_WR_ATOMIC_CMP_AND_SWP
block|,
name|IBV_WR_ATOMIC_FETCH_AND_ADD
block|,
name|IBV_WR_LOCAL_INV
block|,
name|IBV_WR_BIND_MW
block|,
name|IBV_WR_SEND_WITH_INV
block|,
name|IBV_WR_TSO
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_send_flags
block|{
name|IBV_SEND_FENCE
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_SEND_SIGNALED
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_SEND_SOLICITED
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_SEND_INLINE
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_SEND_IP_CSUM
init|=
literal|1
operator|<<
literal|4
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_sge
block|{
name|uint64_t
name|addr
decl_stmt|;
name|uint32_t
name|length
decl_stmt|;
name|uint32_t
name|lkey
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_send_wr
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|struct
name|ibv_send_wr
modifier|*
name|next
decl_stmt|;
name|struct
name|ibv_sge
modifier|*
name|sg_list
decl_stmt|;
name|int
name|num_sge
decl_stmt|;
name|enum
name|ibv_wr_opcode
name|opcode
decl_stmt|;
name|int
name|send_flags
decl_stmt|;
name|__be32
name|imm_data
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint64_t
name|remote_addr
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
block|}
name|rdma
struct|;
struct|struct
block|{
name|uint64_t
name|remote_addr
decl_stmt|;
name|uint64_t
name|compare_add
decl_stmt|;
name|uint64_t
name|swap
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
block|}
name|atomic
struct|;
struct|struct
block|{
name|struct
name|ibv_ah
modifier|*
name|ah
decl_stmt|;
name|uint32_t
name|remote_qpn
decl_stmt|;
name|uint32_t
name|remote_qkey
decl_stmt|;
block|}
name|ud
struct|;
block|}
name|wr
union|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|remote_srqn
decl_stmt|;
block|}
name|xrc
struct|;
block|}
name|qp_type
union|;
union|union
block|{
struct|struct
block|{
name|struct
name|ibv_mw
modifier|*
name|mw
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
name|struct
name|ibv_mw_bind_info
name|bind_info
decl_stmt|;
block|}
name|bind_mw
struct|;
struct|struct
block|{
name|void
modifier|*
name|hdr
decl_stmt|;
name|uint16_t
name|hdr_sz
decl_stmt|;
name|uint16_t
name|mss
decl_stmt|;
block|}
name|tso
struct|;
block|}
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_recv_wr
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|struct
name|ibv_recv_wr
modifier|*
name|next
decl_stmt|;
name|struct
name|ibv_sge
modifier|*
name|sg_list
decl_stmt|;
name|int
name|num_sge
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_mw_bind
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|int
name|send_flags
decl_stmt|;
name|struct
name|ibv_mw_bind_info
name|bind_info
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_srq
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|void
modifier|*
name|srq_context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
name|uint32_t
name|events_completed
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Work Queue. QP can be created without internal WQs "packaged" inside it,  * this QP can be configured to use "external" WQ object as its  * receive/send queue.  * WQ associated (many to one) with Completion Queue it owns WQ properties  * (PD, WQ size etc).  * WQ of type IBV_WQT_RQ:  * - Contains receive WQEs, in this case its PD serves as scatter as well.  * - Exposes post receive function to be used to post a list of work  *   requests (WRs) to its receive queue.  */
end_comment

begin_struct
struct|struct
name|ibv_wq
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|void
modifier|*
name|wq_context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|cq
decl_stmt|;
name|uint32_t
name|wq_num
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|enum
name|ibv_wq_state
name|state
decl_stmt|;
name|enum
name|ibv_wq_type
name|wq_type
decl_stmt|;
name|int
function_decl|(
modifier|*
name|post_recv
function_decl|)
parameter_list|(
name|struct
name|ibv_wq
modifier|*
name|current
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|recv_wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_recv_wr
parameter_list|)
function_decl|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
name|uint32_t
name|events_completed
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_qp
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|void
modifier|*
name|qp_context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|send_cq
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|recv_cq
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|uint32_t
name|qp_num
decl_stmt|;
name|enum
name|ibv_qp_state
name|state
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
name|uint32_t
name|events_completed
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_comp_channel
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|int
name|fd
decl_stmt|;
name|int
name|refcnt
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_cq
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_comp_channel
modifier|*
name|channel
decl_stmt|;
name|void
modifier|*
name|cq_context
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|int
name|cqe
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
name|uint32_t
name|comp_events_completed
decl_stmt|;
name|uint32_t
name|async_events_completed
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_poll_cq_attr
block|{
name|uint32_t
name|comp_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_cq_ex
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_comp_channel
modifier|*
name|channel
decl_stmt|;
name|void
modifier|*
name|cq_context
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|int
name|cqe
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
name|uint32_t
name|comp_events_completed
decl_stmt|;
name|uint32_t
name|async_events_completed
decl_stmt|;
name|uint32_t
name|comp_mask
decl_stmt|;
name|enum
name|ibv_wc_status
name|status
decl_stmt|;
name|uint64_t
name|wr_id
decl_stmt|;
name|int
function_decl|(
modifier|*
name|start_poll
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|,
name|struct
name|ibv_poll_cq_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|next_poll
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|end_poll
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|enum
name|ibv_wc_opcode
function_decl|(
modifier|*
name|read_opcode
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_vendor_err
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_byte_len
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_imm_data
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_qp_num
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_src_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_wc_flags
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_slid
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint8_t
function_decl|(
modifier|*
name|read_sl
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint8_t
function_decl|(
modifier|*
name|read_dlid_path_bits
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint64_t
function_decl|(
modifier|*
name|read_completion_ts
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint16_t
function_decl|(
modifier|*
name|read_cvlan
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_flow_tag
function_decl|)
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|current
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_cq
modifier|*
name|ibv_cq_ex_to_cq
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
operator|(
expr|struct
name|ibv_cq
operator|*
operator|)
name|cq
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ibv_start_poll
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|,
name|struct
name|ibv_poll_cq_attr
modifier|*
name|attr
parameter_list|)
block|{
return|return
name|cq
operator|->
name|start_poll
argument_list|(
name|cq
argument_list|,
name|attr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ibv_next_poll
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|next_poll
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ibv_end_poll
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
name|cq
operator|->
name|end_poll
argument_list|(
name|cq
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|enum
name|ibv_wc_opcode
name|ibv_wc_read_opcode
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_opcode
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_wc_read_vendor_err
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_vendor_err
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_wc_read_byte_len
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_byte_len
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_wc_read_imm_data
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_imm_data
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_wc_read_qp_num
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_qp_num
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_wc_read_src_qp
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_src_qp
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ibv_wc_read_wc_flags
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_wc_flags
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_wc_read_slid
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_slid
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|ibv_wc_read_sl
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_sl
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|ibv_wc_read_dlid_path_bits
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_dlid_path_bits
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|ibv_wc_read_completion_ts
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_completion_ts
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|ibv_wc_read_cvlan
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_cvlan
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_wc_read_flow_tag
parameter_list|(
name|struct
name|ibv_cq_ex
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|read_flow_tag
argument_list|(
name|cq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ibv_post_wq_recv
parameter_list|(
name|struct
name|ibv_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|recv_wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_recv_wr
parameter_list|)
block|{
return|return
name|wq
operator|->
name|post_recv
argument_list|(
name|wq
argument_list|,
name|recv_wr
argument_list|,
name|bad_recv_wr
argument_list|)
return|;
block|}
end_function

begin_struct
struct|struct
name|ibv_ah
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_flow_flags
block|{
name|IBV_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_FLOW_ATTR_FLAGS_DONT_TRAP
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_flow_attr_type
block|{
comment|/* steering according to rule specifications */
name|IBV_FLOW_ATTR_NORMAL
init|=
literal|0x0
block|,
comment|/* default unicast and multicast rule - 	 * receive all Eth traffic which isn't steered to any QP 	 */
name|IBV_FLOW_ATTR_ALL_DEFAULT
init|=
literal|0x1
block|,
comment|/* default multicast rule - 	 * receive all Eth multicast traffic which isn't steered to any QP 	 */
name|IBV_FLOW_ATTR_MC_DEFAULT
init|=
literal|0x2
block|,
comment|/* sniffer rule - receive all port traffic */
name|IBV_FLOW_ATTR_SNIFFER
init|=
literal|0x3
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_flow_spec_type
block|{
name|IBV_FLOW_SPEC_ETH
init|=
literal|0x20
block|,
name|IBV_FLOW_SPEC_IPV4
init|=
literal|0x30
block|,
name|IBV_FLOW_SPEC_IPV6
init|=
literal|0x31
block|,
name|IBV_FLOW_SPEC_IPV4_EXT
init|=
literal|0x32
block|,
name|IBV_FLOW_SPEC_TCP
init|=
literal|0x40
block|,
name|IBV_FLOW_SPEC_UDP
init|=
literal|0x41
block|,
name|IBV_FLOW_SPEC_VXLAN_TUNNEL
init|=
literal|0x50
block|,
name|IBV_FLOW_SPEC_INNER
init|=
literal|0x100
block|,
name|IBV_FLOW_SPEC_ACTION_TAG
init|=
literal|0x1000
block|,
name|IBV_FLOW_SPEC_ACTION_DROP
init|=
literal|0x1001
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_flow_eth_filter
block|{
name|uint8_t
name|dst_mac
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|src_mac
index|[
literal|6
index|]
decl_stmt|;
name|uint16_t
name|ether_type
decl_stmt|;
comment|/* 	 * same layout as 802.1q: prio 3, cfi 1, vlan id 12 	 */
name|uint16_t
name|vlan_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_eth
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|struct
name|ibv_flow_eth_filter
name|val
decl_stmt|;
name|struct
name|ibv_flow_eth_filter
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_ipv4_filter
block|{
name|uint32_t
name|src_ip
decl_stmt|;
name|uint32_t
name|dst_ip
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_ipv4
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|struct
name|ibv_flow_ipv4_filter
name|val
decl_stmt|;
name|struct
name|ibv_flow_ipv4_filter
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_ipv4_ext_filter
block|{
name|uint32_t
name|src_ip
decl_stmt|;
name|uint32_t
name|dst_ip
decl_stmt|;
name|uint8_t
name|proto
decl_stmt|;
name|uint8_t
name|tos
decl_stmt|;
name|uint8_t
name|ttl
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_ipv4_ext
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|struct
name|ibv_flow_ipv4_ext_filter
name|val
decl_stmt|;
name|struct
name|ibv_flow_ipv4_ext_filter
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_ipv6_filter
block|{
name|uint8_t
name|src_ip
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|dst_ip
index|[
literal|16
index|]
decl_stmt|;
name|uint32_t
name|flow_label
decl_stmt|;
name|uint8_t
name|next_hdr
decl_stmt|;
name|uint8_t
name|traffic_class
decl_stmt|;
name|uint8_t
name|hop_limit
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_ipv6
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|struct
name|ibv_flow_ipv6_filter
name|val
decl_stmt|;
name|struct
name|ibv_flow_ipv6_filter
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_tcp_udp_filter
block|{
name|uint16_t
name|dst_port
decl_stmt|;
name|uint16_t
name|src_port
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_tcp_udp
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|struct
name|ibv_flow_tcp_udp_filter
name|val
decl_stmt|;
name|struct
name|ibv_flow_tcp_udp_filter
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_tunnel_filter
block|{
name|uint32_t
name|tunnel_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_tunnel
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|struct
name|ibv_flow_tunnel_filter
name|val
decl_stmt|;
name|struct
name|ibv_flow_tunnel_filter
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_action_tag
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|uint32_t
name|tag_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec_action_drop
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_spec
block|{
union|union
block|{
struct|struct
block|{
name|enum
name|ibv_flow_spec_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
block|}
name|hdr
struct|;
name|struct
name|ibv_flow_spec_eth
name|eth
decl_stmt|;
name|struct
name|ibv_flow_spec_ipv4
name|ipv4
decl_stmt|;
name|struct
name|ibv_flow_spec_tcp_udp
name|tcp_udp
decl_stmt|;
name|struct
name|ibv_flow_spec_ipv4_ext
name|ipv4_ext
decl_stmt|;
name|struct
name|ibv_flow_spec_ipv6
name|ipv6
decl_stmt|;
name|struct
name|ibv_flow_spec_tunnel
name|tunnel
decl_stmt|;
name|struct
name|ibv_flow_spec_action_tag
name|flow_tag
decl_stmt|;
name|struct
name|ibv_flow_spec_action_drop
name|drop
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow_attr
block|{
name|uint32_t
name|comp_mask
decl_stmt|;
name|enum
name|ibv_flow_attr_type
name|type
decl_stmt|;
name|uint16_t
name|size
decl_stmt|;
name|uint16_t
name|priority
decl_stmt|;
name|uint8_t
name|num_of_specs
decl_stmt|;
name|uint8_t
name|port
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
comment|/* Following are the optional layers according to user request 	 * struct ibv_flow_spec_xxx [L2] 	 * struct ibv_flow_spec_yyy [L3/L4] 	 */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_flow
block|{
name|uint32_t
name|comp_mask
decl_stmt|;
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|ibv_device
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ibv_context
struct_decl|;
end_struct_decl

begin_comment
comment|/* Obsolete, never used, do not touch */
end_comment

begin_struct
struct|struct
name|_ibv_device_ops
block|{
name|struct
name|ibv_context
modifier|*
function_decl|(
modifier|*
name|_dummy1
function_decl|)
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|,
name|int
name|cmd_fd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|_dummy2
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|IBV_SYSFS_NAME_MAX
init|=
literal|64
block|,
name|IBV_SYSFS_PATH_MAX
init|=
literal|256
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_device
block|{
name|struct
name|_ibv_device_ops
name|_ops
decl_stmt|;
name|enum
name|ibv_node_type
name|node_type
decl_stmt|;
name|enum
name|ibv_transport_type
name|transport_type
decl_stmt|;
comment|/* Name of underlying kernel IB device, eg "mthca0" */
name|char
name|name
index|[
name|IBV_SYSFS_NAME_MAX
index|]
decl_stmt|;
comment|/* Name of uverbs device, eg "uverbs0" */
name|char
name|dev_name
index|[
name|IBV_SYSFS_NAME_MAX
index|]
decl_stmt|;
comment|/* Path to infiniband_verbs class device in sysfs */
name|char
name|dev_path
index|[
name|IBV_SYSFS_PATH_MAX
index|]
decl_stmt|;
comment|/* Path to infiniband class device in sysfs */
name|char
name|ibdev_path
index|[
name|IBV_SYSFS_PATH_MAX
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_context_ops
block|{
name|int
function_decl|(
modifier|*
name|query_device
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_device_attr
modifier|*
name|device_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_port
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_port_attr
modifier|*
name|port_attr
parameter_list|)
function_decl|;
name|struct
name|ibv_pd
modifier|*
function_decl|(
modifier|*
name|alloc_pd
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dealloc_pd
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|)
function_decl|;
name|struct
name|ibv_mr
modifier|*
function_decl|(
modifier|*
name|reg_mr
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rereg_mr
function_decl|)
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dereg_mr
function_decl|)
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
name|struct
name|ibv_mw
modifier|*
function_decl|(
modifier|*
name|alloc_mw
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|enum
name|ibv_mw_type
name|type
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|bind_mw
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_mw
modifier|*
name|mw
parameter_list|,
name|struct
name|ibv_mw_bind
modifier|*
name|mw_bind
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dealloc_mw
function_decl|)
parameter_list|(
name|struct
name|ibv_mw
modifier|*
name|mw
parameter_list|)
function_decl|;
name|struct
name|ibv_cq
modifier|*
function_decl|(
modifier|*
name|create_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|int
name|cqe
parameter_list|,
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|,
name|int
name|comp_vector
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|poll_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|num_entries
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|req_notify_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|solicited_only
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|cq_event
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|resize_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|cqe
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
name|struct
name|ibv_srq
modifier|*
function_decl|(
modifier|*
name|create_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_srq_init_attr
modifier|*
name|srq_init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|modify_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|,
name|int
name|srq_attr_mask
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|post_srq_recv
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|recv_wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_recv_wr
parameter_list|)
function_decl|;
name|struct
name|ibv_qp
modifier|*
function_decl|(
modifier|*
name|create_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|modify_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|post_send
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|post_recv
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
function_decl|;
name|struct
name|ibv_ah
modifier|*
function_decl|(
modifier|*
name|create_ah
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_ah_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_ah
function_decl|)
parameter_list|(
name|struct
name|ibv_ah
modifier|*
name|ah
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|attach_mcast
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|detach_mcast
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|async_event
function_decl|)
parameter_list|(
name|struct
name|ibv_async_event
modifier|*
name|event
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_context
block|{
name|struct
name|ibv_device
modifier|*
name|device
decl_stmt|;
name|struct
name|ibv_context_ops
name|ops
decl_stmt|;
name|int
name|cmd_fd
decl_stmt|;
name|int
name|async_fd
decl_stmt|;
name|int
name|num_comp_vectors
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|void
modifier|*
name|abi_compat
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_cq_init_attr_mask
block|{
name|IBV_CQ_INIT_ATTR_MASK_FLAGS
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_CQ_INIT_ATTR_MASK_RESERVED
init|=
literal|1
operator|<<
literal|1
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_create_cq_attr_flags
block|{
name|IBV_CREATE_CQ_ATTR_SINGLE_THREADED
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_CREATE_CQ_ATTR_RESERVED
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_cq_init_attr_ex
block|{
comment|/* Minimum number of entries required for CQ */
name|uint32_t
name|cqe
decl_stmt|;
comment|/* Consumer-supplied context returned for completion events */
name|void
modifier|*
name|cq_context
decl_stmt|;
comment|/* Completion channel where completion events will be queued. 	 * May be NULL if completion events will not be used. 	 */
name|struct
name|ibv_comp_channel
modifier|*
name|channel
decl_stmt|;
comment|/* Completion vector used to signal completion events. 	 *  Must be< context->num_comp_vectors. 	 */
name|uint32_t
name|comp_vector
decl_stmt|;
comment|/* Or'ed bit of enum ibv_create_cq_wc_flags. */
name|uint64_t
name|wc_flags
decl_stmt|;
comment|/* compatibility mask (extended verb). Or'd flags of 	 * enum ibv_cq_init_attr_mask 	 */
name|uint32_t
name|comp_mask
decl_stmt|;
comment|/* create cq attr flags - one or more flags from 	 * enum ibv_create_cq_attr_flags 	 */
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_values_mask
block|{
name|IBV_VALUES_MASK_RAW_CLOCK
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_VALUES_MASK_RESERVED
init|=
literal|1
operator|<<
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_values_ex
block|{
name|uint32_t
name|comp_mask
decl_stmt|;
name|struct
name|timespec
name|raw_clock
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|verbs_context_mask
block|{
name|VERBS_CONTEXT_XRCD
init|=
literal|1
operator|<<
literal|0
block|,
name|VERBS_CONTEXT_SRQ
init|=
literal|1
operator|<<
literal|1
block|,
name|VERBS_CONTEXT_QP
init|=
literal|1
operator|<<
literal|2
block|,
name|VERBS_CONTEXT_CREATE_FLOW
init|=
literal|1
operator|<<
literal|3
block|,
name|VERBS_CONTEXT_DESTROY_FLOW
init|=
literal|1
operator|<<
literal|4
block|,
name|VERBS_CONTEXT_RESERVED
init|=
literal|1
operator|<<
literal|5
block|}
enum|;
end_enum

begin_struct
struct|struct
name|verbs_context
block|{
comment|/*  "grows up" - new fields go here */
name|int
function_decl|(
modifier|*
name|destroy_rwq_ind_table
function_decl|)
parameter_list|(
name|struct
name|ibv_rwq_ind_table
modifier|*
name|rwq_ind_table
parameter_list|)
function_decl|;
name|struct
name|ibv_rwq_ind_table
modifier|*
function_decl|(
modifier|*
name|create_rwq_ind_table
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_rwq_ind_table_init_attr
modifier|*
name|init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_wq
function_decl|)
parameter_list|(
name|struct
name|ibv_wq
modifier|*
name|wq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|modify_wq
function_decl|)
parameter_list|(
name|struct
name|ibv_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|ibv_wq_attr
modifier|*
name|wq_attr
parameter_list|)
function_decl|;
name|struct
name|ibv_wq
modifier|*
function_decl|(
modifier|*
name|create_wq
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_wq_init_attr
modifier|*
name|wq_init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_rt_values
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_values_ex
modifier|*
name|values
parameter_list|)
function_decl|;
name|struct
name|ibv_cq_ex
modifier|*
function_decl|(
modifier|*
name|create_cq_ex
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_cq_init_attr_ex
modifier|*
name|init_attr
parameter_list|)
function_decl|;
name|struct
name|verbs_ex_private
modifier|*
name|priv
decl_stmt|;
name|int
function_decl|(
modifier|*
name|query_device_ex
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
specifier|const
name|struct
name|ibv_query_device_ex_input
modifier|*
name|input
parameter_list|,
name|struct
name|ibv_device_attr_ex
modifier|*
name|attr
parameter_list|,
name|size_t
name|attr_size
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ibv_destroy_flow
function_decl|)
parameter_list|(
name|struct
name|ibv_flow
modifier|*
name|flow
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ABI_placeholder2
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* DO NOT COPY THIS GARBAGE */
name|struct
name|ibv_flow
modifier|*
function_decl|(
modifier|*
name|ibv_create_flow
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_flow_attr
modifier|*
name|flow_attr
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ABI_placeholder1
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* DO NOT COPY THIS GARBAGE */
name|struct
name|ibv_qp
modifier|*
function_decl|(
modifier|*
name|open_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_qp_open_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
name|struct
name|ibv_qp
modifier|*
function_decl|(
modifier|*
name|create_qp_ex
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_qp_init_attr_ex
modifier|*
name|qp_init_attr_ex
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_srq_num
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|uint32_t
modifier|*
name|srq_num
parameter_list|)
function_decl|;
name|struct
name|ibv_srq
modifier|*
function_decl|(
modifier|*
name|create_srq_ex
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_srq_init_attr_ex
modifier|*
name|srq_init_attr_ex
parameter_list|)
function_decl|;
name|struct
name|ibv_xrcd
modifier|*
function_decl|(
modifier|*
name|open_xrcd
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_xrcd_init_attr
modifier|*
name|xrcd_init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|close_xrcd
function_decl|)
parameter_list|(
name|struct
name|ibv_xrcd
modifier|*
name|xrcd
parameter_list|)
function_decl|;
name|uint64_t
name|has_comp_mask
decl_stmt|;
name|size_t
name|sz
decl_stmt|;
comment|/* Must be immediately before struct ibv_context */
name|struct
name|ibv_context
name|context
decl_stmt|;
comment|/* Must be last field in the struct */
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|verbs_context
modifier|*
name|verbs_get_ctx
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|ctx
parameter_list|)
block|{
return|return
operator|(
name|ctx
operator|->
name|abi_compat
operator|!=
name|__VERBS_ABI_IS_EXTENDED
operator|)
condition|?
name|NULL
else|:
name|container_of
argument_list|(
name|ctx
argument_list|,
expr|struct
name|verbs_context
argument_list|,
name|context
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|verbs_get_ctx_op
parameter_list|(
name|ctx
parameter_list|,
name|op
parameter_list|)
value|({ \ 	struct verbs_context *__vctx = verbs_get_ctx(ctx); \ 	(!__vctx || (__vctx->sz< sizeof(*__vctx) - offsetof(struct verbs_context, op)) || \ 	 !__vctx->op) ? NULL : __vctx; })
end_define

begin_define
define|#
directive|define
name|verbs_set_ctx_op
parameter_list|(
name|_vctx
parameter_list|,
name|op
parameter_list|,
name|ptr
parameter_list|)
value|({ \ 	struct verbs_context *vctx = _vctx; \ 	if (vctx&& (vctx->sz>= sizeof(*vctx) - offsetof(struct verbs_context, op))) \ 		vctx->op = ptr; })
end_define

begin_comment
comment|/**  * ibv_get_device_list - Get list of IB devices currently available  * @num_devices: optional.  if non-NULL, set to the number of devices  * returned in the array.  *  * Return a NULL-terminated array of IB devices.  The array can be  * released with ibv_free_device_list().  */
end_comment

begin_function_decl
name|struct
name|ibv_device
modifier|*
modifier|*
name|ibv_get_device_list
parameter_list|(
name|int
modifier|*
name|num_devices
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_free_device_list - Free list from ibv_get_device_list()  *  * Free an array of devices returned from ibv_get_device_list().  Once  * the array is freed, pointers to devices that were not opened with  * ibv_open_device() are no longer valid.  Client code must open all  * devices it intends to use before calling ibv_free_device_list().  */
end_comment

begin_function_decl
name|void
name|ibv_free_device_list
parameter_list|(
name|struct
name|ibv_device
modifier|*
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_device_name - Return kernel device name  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_get_device_name
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_device_guid - Return device's node GUID  */
end_comment

begin_function_decl
name|__be64
name|ibv_get_device_guid
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_open_device - Initialize device for use  */
end_comment

begin_function_decl
name|struct
name|ibv_context
modifier|*
name|ibv_open_device
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_close_device - Release device  */
end_comment

begin_function_decl
name|int
name|ibv_close_device
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_async_event - Get next async event  * @event: Pointer to use to return async event  *  * All async events returned by ibv_get_async_event() must eventually  * be acknowledged with ibv_ack_async_event().  */
end_comment

begin_function_decl
name|int
name|ibv_get_async_event
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_async_event
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_ack_async_event - Acknowledge an async event  * @event: Event to be acknowledged.  *  * All async events which are returned by ibv_get_async_event() must  * be acknowledged.  To avoid races, destroying an object (CQ, SRQ or  * QP) will wait for all affiliated events to be acknowledged, so  * there should be a one-to-one correspondence between acks and  * successful gets.  */
end_comment

begin_function_decl
name|void
name|ibv_ack_async_event
parameter_list|(
name|struct
name|ibv_async_event
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_device - Get device properties  */
end_comment

begin_function_decl
name|int
name|ibv_query_device
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_device_attr
modifier|*
name|device_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_port - Get port properties  */
end_comment

begin_function_decl
name|int
name|ibv_query_port
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_port_attr
modifier|*
name|port_attr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|___ibv_query_port
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_port_attr
modifier|*
name|port_attr
parameter_list|)
block|{
comment|/* For compatibility when running with old libibverbs */
name|port_attr
operator|->
name|link_layer
operator|=
name|IBV_LINK_LAYER_UNSPECIFIED
expr_stmt|;
name|port_attr
operator|->
name|reserved
operator|=
literal|0
expr_stmt|;
return|return
name|ibv_query_port
argument_list|(
name|context
argument_list|,
name|port_num
argument_list|,
name|port_attr
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|ibv_query_port
parameter_list|(
name|context
parameter_list|,
name|port_num
parameter_list|,
name|port_attr
parameter_list|)
define|\
value|___ibv_query_port(context, port_num, port_attr)
end_define

begin_comment
comment|/**  * ibv_query_gid - Get a GID table entry  */
end_comment

begin_function_decl
name|int
name|ibv_query_gid
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|int
name|index
parameter_list|,
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_pkey - Get a P_Key table entry  */
end_comment

begin_function_decl
name|int
name|ibv_query_pkey
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|int
name|index
parameter_list|,
name|__be16
modifier|*
name|pkey
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_alloc_pd - Allocate a protection domain  */
end_comment

begin_function_decl
name|struct
name|ibv_pd
modifier|*
name|ibv_alloc_pd
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_dealloc_pd - Free a protection domain  */
end_comment

begin_function_decl
name|int
name|ibv_dealloc_pd
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_flow
modifier|*
name|ibv_create_flow
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_flow_attr
modifier|*
name|flow
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|qp
operator|->
name|context
argument_list|,
name|ibv_create_flow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
operator|||
operator|!
name|vctx
operator|->
name|ibv_create_flow
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|vctx
operator|->
name|ibv_create_flow
argument_list|(
name|qp
argument_list|,
name|flow
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ibv_destroy_flow
parameter_list|(
name|struct
name|ibv_flow
modifier|*
name|flow_id
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|flow_id
operator|->
name|context
argument_list|,
name|ibv_destroy_flow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
operator|||
operator|!
name|vctx
operator|->
name|ibv_destroy_flow
condition|)
return|return
operator|-
name|ENOSYS
return|;
return|return
name|vctx
operator|->
name|ibv_destroy_flow
argument_list|(
name|flow_id
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_open_xrcd - Open an extended connection domain  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_xrcd
modifier|*
name|ibv_open_xrcd
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_xrcd_init_attr
modifier|*
name|xrcd_init_attr
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|open_xrcd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|vctx
operator|->
name|open_xrcd
argument_list|(
name|context
argument_list|,
name|xrcd_init_attr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_close_xrcd - Close an extended connection domain  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_close_xrcd
parameter_list|(
name|struct
name|ibv_xrcd
modifier|*
name|xrcd
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx
argument_list|(
name|xrcd
operator|->
name|context
argument_list|)
decl_stmt|;
return|return
name|vctx
operator|->
name|close_xrcd
argument_list|(
name|xrcd
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_reg_mr - Register a memory region  */
end_comment

begin_function_decl
name|struct
name|ibv_mr
modifier|*
name|ibv_reg_mr
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|ibv_rereg_mr_err_code
block|{
comment|/* Old MR is valid, invalid input */
name|IBV_REREG_MR_ERR_INPUT
init|=
operator|-
literal|1
block|,
comment|/* Old MR is valid, failed via don't fork on new address range */
name|IBV_REREG_MR_ERR_DONT_FORK_NEW
init|=
operator|-
literal|2
block|,
comment|/* New MR is valid, failed via do fork on old address range */
name|IBV_REREG_MR_ERR_DO_FORK_OLD
init|=
operator|-
literal|3
block|,
comment|/* MR shouldn't be used, command error */
name|IBV_REREG_MR_ERR_CMD
init|=
operator|-
literal|4
block|,
comment|/* MR shouldn't be used, command error, invalid fork state on new address range */
name|IBV_REREG_MR_ERR_CMD_AND_DO_FORK_NEW
init|=
operator|-
literal|5
block|, }
enum|;
end_enum

begin_comment
comment|/**  * ibv_rereg_mr - Re-Register a memory region  */
end_comment

begin_function_decl
name|int
name|ibv_rereg_mr
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_dereg_mr - Deregister a memory region  */
end_comment

begin_function_decl
name|int
name|ibv_dereg_mr
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_alloc_mw - Allocate a memory window  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_mw
modifier|*
name|ibv_alloc_mw
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|enum
name|ibv_mw_type
name|type
parameter_list|)
block|{
name|struct
name|ibv_mw
modifier|*
name|mw
decl_stmt|;
if|if
condition|(
operator|!
name|pd
operator|->
name|context
operator|->
name|ops
operator|.
name|alloc_mw
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|mw
operator|=
name|pd
operator|->
name|context
operator|->
name|ops
operator|.
name|alloc_mw
argument_list|(
name|pd
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|mw
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_dealloc_mw - Free a memory window  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_dealloc_mw
parameter_list|(
name|struct
name|ibv_mw
modifier|*
name|mw
parameter_list|)
block|{
return|return
name|mw
operator|->
name|context
operator|->
name|ops
operator|.
name|dealloc_mw
argument_list|(
name|mw
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_inc_rkey - Increase the 8 lsb in the given rkey  */
end_comment

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ibv_inc_rkey
parameter_list|(
name|uint32_t
name|rkey
parameter_list|)
block|{
specifier|const
name|uint32_t
name|mask
init|=
literal|0x000000ff
decl_stmt|;
name|uint8_t
name|newtag
init|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|rkey
operator|+
literal|1
operator|)
operator|&
name|mask
argument_list|)
decl_stmt|;
return|return
operator|(
name|rkey
operator|&
operator|~
name|mask
operator|)
operator||
name|newtag
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_bind_mw - Bind a memory window to a region  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_bind_mw
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_mw
modifier|*
name|mw
parameter_list|,
name|struct
name|ibv_mw_bind
modifier|*
name|mw_bind
parameter_list|)
block|{
if|if
condition|(
name|mw
operator|->
name|type
operator|!=
name|IBV_MW_TYPE_1
condition|)
return|return
name|EINVAL
return|;
return|return
name|mw
operator|->
name|context
operator|->
name|ops
operator|.
name|bind_mw
argument_list|(
name|qp
argument_list|,
name|mw
argument_list|,
name|mw_bind
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_create_comp_channel - Create a completion event channel  */
end_comment

begin_function_decl
name|struct
name|ibv_comp_channel
modifier|*
name|ibv_create_comp_channel
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_comp_channel - Destroy a completion event channel  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_comp_channel
parameter_list|(
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_cq - Create a completion queue  * @context - Context CQ will be attached to  * @cqe - Minimum number of entries required for CQ  * @cq_context - Consumer-supplied context returned for completion events  * @channel - Completion channel where completion events will be queued.  *     May be NULL if completion events will not be used.  * @comp_vector - Completion vector used to signal completion events.  *     Must be>= 0 and< context->num_comp_vectors.  */
end_comment

begin_function_decl
name|struct
name|ibv_cq
modifier|*
name|ibv_create_cq
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|int
name|cqe
parameter_list|,
name|void
modifier|*
name|cq_context
parameter_list|,
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|,
name|int
name|comp_vector
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_cq_ex - Create a completion queue  * @context - Context CQ will be attached to  * @cq_attr - Attributes to create the CQ with  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_cq_ex
modifier|*
name|ibv_create_cq_ex
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_cq_init_attr_ex
modifier|*
name|cq_attr
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|create_cq_ex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|cq_attr
operator|->
name|comp_mask
operator|&
operator|~
operator|(
name|IBV_CQ_INIT_ATTR_MASK_RESERVED
operator|-
literal|1
operator|)
condition|)
block|{
name|errno
operator|=
name|EINVAL
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|vctx
operator|->
name|create_cq_ex
argument_list|(
name|context
argument_list|,
name|cq_attr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_resize_cq - Modifies the capacity of the CQ.  * @cq: The CQ to resize.  * @cqe: The minimum size of the CQ.  *  * Users can examine the cq structure to determine the actual CQ size.  */
end_comment

begin_function_decl
name|int
name|ibv_resize_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|cqe
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_cq - Destroy a completion queue  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_cq_event - Read next CQ event  * @channel: Channel to get next event from.  * @cq: Used to return pointer to CQ.  * @cq_context: Used to return consumer-supplied CQ context.  *  * All completion events returned by ibv_get_cq_event() must  * eventually be acknowledged with ibv_ack_cq_events().  */
end_comment

begin_function_decl
name|int
name|ibv_get_cq_event
parameter_list|(
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|,
name|struct
name|ibv_cq
modifier|*
modifier|*
name|cq
parameter_list|,
name|void
modifier|*
modifier|*
name|cq_context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_ack_cq_events - Acknowledge CQ completion events  * @cq: CQ to acknowledge events for  * @nevents: Number of events to acknowledge.  *  * All completion events which are returned by ibv_get_cq_event() must  * be acknowledged.  To avoid races, ibv_destroy_cq() will wait for  * all completion events to be acknowledged, so there should be a  * one-to-one correspondence between acks and successful gets.  An  * application may accumulate multiple completion events and  * acknowledge them in a single call to ibv_ack_cq_events() by passing  * the number of events to ack in @nevents.  */
end_comment

begin_function_decl
name|void
name|ibv_ack_cq_events
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|unsigned
name|int
name|nevents
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_poll_cq - Poll a CQ for work completions  * @cq:the CQ being polled  * @num_entries:maximum number of completions to return  * @wc:array of at least @num_entries of&struct ibv_wc where completions  *   will be returned  *  * Poll a CQ for (possibly multiple) completions.  If the return value  * is< 0, an error occurred.  If the return value is>= 0, it is the  * number of completions returned.  If the return value is  * non-negative and strictly less than num_entries, then the CQ was  * emptied.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_poll_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|num_entries
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|)
block|{
return|return
name|cq
operator|->
name|context
operator|->
name|ops
operator|.
name|poll_cq
argument_list|(
name|cq
argument_list|,
name|num_entries
argument_list|,
name|wc
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_req_notify_cq - Request completion notification on a CQ.  An  *   event will be added to the completion channel associated with the  *   CQ when an entry is added to the CQ.  * @cq: The completion queue to request notification for.  * @solicited_only: If non-zero, an event will be generated only for  *   the next solicited CQ entry.  If zero, any CQ entry, solicited or  *   not, will generate an event.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_req_notify_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|solicited_only
parameter_list|)
block|{
return|return
name|cq
operator|->
name|context
operator|->
name|ops
operator|.
name|req_notify_cq
argument_list|(
name|cq
argument_list|,
name|solicited_only
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_create_srq - Creates a SRQ associated with the specified protection  *   domain.  * @pd: The protection domain associated with the SRQ.  * @srq_init_attr: A list of initial attributes required to create the SRQ.  *  * srq_attr->max_wr and srq_attr->max_sge are read the determine the  * requested size of the SRQ, and set to the actual values allocated  * on return.  If ibv_create_srq() succeeds, then max_wr and max_sge  * will always be at least as large as the requested values.  */
end_comment

begin_function_decl
name|struct
name|ibv_srq
modifier|*
name|ibv_create_srq
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_srq_init_attr
modifier|*
name|srq_init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_srq
modifier|*
name|ibv_create_srq_ex
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_srq_init_attr_ex
modifier|*
name|srq_init_attr_ex
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
decl_stmt|;
name|uint32_t
name|mask
init|=
name|srq_init_attr_ex
operator|->
name|comp_mask
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mask
operator|&
operator|~
operator|(
name|IBV_SRQ_INIT_ATTR_PD
operator||
name|IBV_SRQ_INIT_ATTR_TYPE
operator|)
operator|)
operator|&&
operator|(
name|mask
operator|&
name|IBV_SRQ_INIT_ATTR_PD
operator|)
operator|&&
operator|(
operator|!
operator|(
name|mask
operator|&
name|IBV_SRQ_INIT_ATTR_TYPE
operator|)
operator|||
operator|(
name|srq_init_attr_ex
operator|->
name|srq_type
operator|==
name|IBV_SRQT_BASIC
operator|)
operator|)
condition|)
return|return
name|ibv_create_srq
argument_list|(
name|srq_init_attr_ex
operator|->
name|pd
argument_list|,
operator|(
expr|struct
name|ibv_srq_init_attr
operator|*
operator|)
name|srq_init_attr_ex
argument_list|)
return|;
name|vctx
operator|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|create_srq_ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|vctx
operator|->
name|create_srq_ex
argument_list|(
name|context
argument_list|,
name|srq_init_attr_ex
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_modify_srq - Modifies the attributes for the specified SRQ.  * @srq: The SRQ to modify.  * @srq_attr: On input, specifies the SRQ attributes to modify.  On output,  *   the current values of selected SRQ attributes are returned.  * @srq_attr_mask: A bit-mask used to specify which attributes of the SRQ  *   are being modified.  *  * The mask may contain IBV_SRQ_MAX_WR to resize the SRQ and/or  * IBV_SRQ_LIMIT to set the SRQ's limit and request notification when  * the number of receives queued drops below the limit.  */
end_comment

begin_function_decl
name|int
name|ibv_modify_srq
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|,
name|int
name|srq_attr_mask
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_srq - Returns the attribute list and current values for the  *   specified SRQ.  * @srq: The SRQ to query.  * @srq_attr: The attributes of the specified SRQ.  */
end_comment

begin_function_decl
name|int
name|ibv_query_srq
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ibv_get_srq_num
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|uint32_t
modifier|*
name|srq_num
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|srq
operator|->
name|context
argument_list|,
name|get_srq_num
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
return|return
name|ENOSYS
return|;
return|return
name|vctx
operator|->
name|get_srq_num
argument_list|(
name|srq
argument_list|,
name|srq_num
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_destroy_srq - Destroys the specified SRQ.  * @srq: The SRQ to destroy.  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_srq
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_post_srq_recv - Posts a list of work requests to the specified SRQ.  * @srq: The SRQ to post the work request on.  * @recv_wr: A list of work requests to post on the receive queue.  * @bad_recv_wr: On an immediate failure, this parameter will reference  *   the work request that failed to be posted on the QP.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_post_srq_recv
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|recv_wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_recv_wr
parameter_list|)
block|{
return|return
name|srq
operator|->
name|context
operator|->
name|ops
operator|.
name|post_srq_recv
argument_list|(
name|srq
argument_list|,
name|recv_wr
argument_list|,
name|bad_recv_wr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_create_qp - Create a queue pair.  */
end_comment

begin_function_decl
name|struct
name|ibv_qp
modifier|*
name|ibv_create_qp
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|qp_init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_qp
modifier|*
name|ibv_create_qp_ex
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_qp_init_attr_ex
modifier|*
name|qp_init_attr_ex
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
decl_stmt|;
name|uint32_t
name|mask
init|=
name|qp_init_attr_ex
operator|->
name|comp_mask
decl_stmt|;
if|if
condition|(
name|mask
operator|==
name|IBV_QP_INIT_ATTR_PD
condition|)
return|return
name|ibv_create_qp
argument_list|(
name|qp_init_attr_ex
operator|->
name|pd
argument_list|,
operator|(
expr|struct
name|ibv_qp_init_attr
operator|*
operator|)
name|qp_init_attr_ex
argument_list|)
return|;
name|vctx
operator|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|create_qp_ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|vctx
operator|->
name|create_qp_ex
argument_list|(
name|context
argument_list|,
name|qp_init_attr_ex
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_query_rt_values_ex - Get current real time @values of a device.  * @values - in/out - defines the attributes we need to query/queried.  * (Or's bits of enum ibv_values_mask on values->comp_mask field)  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_query_rt_values_ex
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_values_ex
modifier|*
name|values
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
decl_stmt|;
name|vctx
operator|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|query_rt_values
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
return|return
name|ENOSYS
return|;
if|if
condition|(
name|values
operator|->
name|comp_mask
operator|&
operator|~
operator|(
name|IBV_VALUES_MASK_RESERVED
operator|-
literal|1
operator|)
condition|)
return|return
name|EINVAL
return|;
return|return
name|vctx
operator|->
name|query_rt_values
argument_list|(
name|context
argument_list|,
name|values
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_query_device_ex - Get extended device properties  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_query_device_ex
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
specifier|const
name|struct
name|ibv_query_device_ex_input
modifier|*
name|input
parameter_list|,
name|struct
name|ibv_device_attr_ex
modifier|*
name|attr
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
decl_stmt|;
name|int
name|ret
decl_stmt|;
name|vctx
operator|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|query_device_ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
goto|goto
name|legacy
goto|;
name|ret
operator|=
name|vctx
operator|->
name|query_device_ex
argument_list|(
name|context
argument_list|,
name|input
argument_list|,
name|attr
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|attr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|ENOSYS
condition|)
goto|goto
name|legacy
goto|;
return|return
name|ret
return|;
name|legacy
label|:
name|memset
argument_list|(
name|attr
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ibv_query_device
argument_list|(
name|context
argument_list|,
operator|&
name|attr
operator|->
name|orig_attr
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_open_qp - Open a shareable queue pair.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_qp
modifier|*
name|ibv_open_qp
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_qp_open_attr
modifier|*
name|qp_open_attr
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|open_qp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|vctx
operator|->
name|open_qp
argument_list|(
name|context
argument_list|,
name|qp_open_attr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_modify_qp - Modify a queue pair.  */
end_comment

begin_function_decl
name|int
name|ibv_modify_qp
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_qp - Returns the attribute list and current values for the  *   specified QP.  * @qp: The QP to query.  * @attr: The attributes of the specified QP.  * @attr_mask: A bit-mask used to select specific attributes to query.  * @init_attr: Additional attributes of the selected QP.  *  * The qp_attr_mask may be used to limit the query to gathering only the  * selected attributes.  */
end_comment

begin_function_decl
name|int
name|ibv_query_qp
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_qp - Destroy a queue pair.  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_qp
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * ibv_create_wq - Creates a WQ associated with the specified protection  * domain.  * @context: ibv_context.  * @wq_init_attr: A list of initial attributes required to create the  * WQ. If WQ creation succeeds, then the attributes are updated to  * the actual capabilities of the created WQ.  *  * wq_init_attr->max_wr and wq_init_attr->max_sge determine  * the requested size of the WQ, and set to the actual values allocated  * on return.  * If ibv_create_wq() succeeds, then max_wr and max_sge will always be  * at least as large as the requested values.  *  * Return Value  * ibv_create_wq() returns a pointer to the created WQ, or NULL if the request  * fails.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_wq
modifier|*
name|ibv_create_wq
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_wq_init_attr
modifier|*
name|wq_init_attr
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|create_wq
argument_list|)
decl_stmt|;
name|struct
name|ibv_wq
modifier|*
name|wq
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|wq
operator|=
name|vctx
operator|->
name|create_wq
argument_list|(
name|context
argument_list|,
name|wq_init_attr
argument_list|)
expr_stmt|;
if|if
condition|(
name|wq
condition|)
block|{
name|wq
operator|->
name|events_completed
operator|=
literal|0
expr_stmt|;
name|pthread_mutex_init
argument_list|(
operator|&
name|wq
operator|->
name|mutex
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|pthread_cond_init
argument_list|(
operator|&
name|wq
operator|->
name|cond
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
return|return
name|wq
return|;
block|}
end_function

begin_comment
comment|/*  * ibv_modify_wq - Modifies the attributes for the specified WQ.  * @wq: The WQ to modify.  * @wq_attr: On input, specifies the WQ attributes to modify.  *    wq_attr->attr_mask: A bit-mask used to specify which attributes of the WQ  *    are being modified.  * On output, the current values of selected WQ attributes are returned.  *  * Return Value  * ibv_modify_wq() returns 0 on success, or the value of errno  * on failure (which indicates the failure reason).  * */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_modify_wq
parameter_list|(
name|struct
name|ibv_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|ibv_wq_attr
modifier|*
name|wq_attr
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
init|=
name|verbs_get_ctx_op
argument_list|(
name|wq
operator|->
name|context
argument_list|,
name|modify_wq
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
return|return
name|ENOSYS
return|;
return|return
name|vctx
operator|->
name|modify_wq
argument_list|(
name|wq
argument_list|,
name|wq_attr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * ibv_destroy_wq - Destroys the specified WQ.  * @ibv_wq: The WQ to destroy.  * Return Value  * ibv_destroy_wq() returns 0 on success, or the value of errno  * on failure (which indicates the failure reason). */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_destroy_wq
parameter_list|(
name|struct
name|ibv_wq
modifier|*
name|wq
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
decl_stmt|;
name|vctx
operator|=
name|verbs_get_ctx_op
argument_list|(
name|wq
operator|->
name|context
argument_list|,
name|destroy_wq
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
return|return
name|ENOSYS
return|;
return|return
name|vctx
operator|->
name|destroy_wq
argument_list|(
name|wq
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * ibv_create_rwq_ind_table - Creates a receive work queue Indirection Table  * @context: ibv_context.  * @init_attr: A list of initial attributes required to create the Indirection Table.  * Return Value  * ibv_create_rwq_ind_table returns a pointer to the created  * Indirection Table, or NULL if the request fails.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|ibv_rwq_ind_table
modifier|*
name|ibv_create_rwq_ind_table
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_rwq_ind_table_init_attr
modifier|*
name|init_attr
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
decl_stmt|;
name|vctx
operator|=
name|verbs_get_ctx_op
argument_list|(
name|context
argument_list|,
name|create_rwq_ind_table
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
block|{
name|errno
operator|=
name|ENOSYS
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|vctx
operator|->
name|create_rwq_ind_table
argument_list|(
name|context
argument_list|,
name|init_attr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * ibv_destroy_rwq_ind_table - Destroys the specified Indirection Table.  * @rwq_ind_table: The Indirection Table to destroy.  * Return Value  * ibv_destroy_rwq_ind_table() returns 0 on success, or the value of errno  * on failure (which indicates the failure reason). */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_destroy_rwq_ind_table
parameter_list|(
name|struct
name|ibv_rwq_ind_table
modifier|*
name|rwq_ind_table
parameter_list|)
block|{
name|struct
name|verbs_context
modifier|*
name|vctx
decl_stmt|;
name|vctx
operator|=
name|verbs_get_ctx_op
argument_list|(
name|rwq_ind_table
operator|->
name|context
argument_list|,
name|destroy_rwq_ind_table
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vctx
condition|)
return|return
name|ENOSYS
return|;
return|return
name|vctx
operator|->
name|destroy_rwq_ind_table
argument_list|(
name|rwq_ind_table
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_post_send - Post a list of work requests to a send queue.  *  * If IBV_SEND_INLINE flag is set, the data buffers can be reused  * immediately after the call returns.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_post_send
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
block|{
return|return
name|qp
operator|->
name|context
operator|->
name|ops
operator|.
name|post_send
argument_list|(
name|qp
argument_list|,
name|wr
argument_list|,
name|bad_wr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_post_recv - Post a list of work requests to a receive queue.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_post_recv
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
block|{
return|return
name|qp
operator|->
name|context
operator|->
name|ops
operator|.
name|post_recv
argument_list|(
name|qp
argument_list|,
name|wr
argument_list|,
name|bad_wr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_create_ah - Create an address handle.  */
end_comment

begin_function_decl
name|struct
name|ibv_ah
modifier|*
name|ibv_create_ah
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_ah_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_init_ah_from_wc - Initializes address handle attributes from a  *   work completion.  * @context: Device context on which the received message arrived.  * @port_num: Port on which the received message arrived.  * @wc: Work completion associated with the received message.  * @grh: References the received global route header.  This parameter is  *   ignored unless the work completion indicates that the GRH is valid.  * @ah_attr: Returned attributes that can be used when creating an address  *   handle for replying to the message.  */
end_comment

begin_function_decl
name|int
name|ibv_init_ah_from_wc
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|,
name|struct
name|ibv_grh
modifier|*
name|grh
parameter_list|,
name|struct
name|ibv_ah_attr
modifier|*
name|ah_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_ah_from_wc - Creates an address handle associated with the  *   sender of the specified work completion.  * @pd: The protection domain associated with the address handle.  * @wc: Work completion information associated with a received message.  * @grh: References the received global route header.  This parameter is  *   ignored unless the work completion indicates that the GRH is valid.  * @port_num: The outbound port number to associate with the address.  *  * The address handle is used to reference a local or global destination  * in all UD QP post sends.  */
end_comment

begin_function_decl
name|struct
name|ibv_ah
modifier|*
name|ibv_create_ah_from_wc
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|,
name|struct
name|ibv_grh
modifier|*
name|grh
parameter_list|,
name|uint8_t
name|port_num
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_ah - Destroy an address handle.  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_ah
parameter_list|(
name|struct
name|ibv_ah
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_attach_mcast - Attaches the specified QP to a multicast group.  * @qp: QP to attach to the multicast group.  The QP must be a UD QP.  * @gid: Multicast group GID.  * @lid: Multicast group LID in host byte order.  *  * In order to route multicast packets correctly, subnet  * administration must have created the multicast group and configured  * the fabric appropriately.  The port associated with the specified  * QP must also be a member of the multicast group.  */
end_comment

begin_function_decl
name|int
name|ibv_attach_mcast
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_detach_mcast - Detaches the specified QP from a multicast group.  * @qp: QP to detach from the multicast group.  * @gid: Multicast group GID.  * @lid: Multicast group LID in host byte order.  */
end_comment

begin_function_decl
name|int
name|ibv_detach_mcast
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_fork_init - Prepare data structures so that fork() may be used  * safely.  If this function is not called or returns a non-zero  * status, then libibverbs data structures are not fork()-safe and the  * effect of an application calling fork() is undefined.  */
end_comment

begin_function_decl
name|int
name|ibv_fork_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_node_type_str - Return string describing node_type enum value  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_node_type_str
parameter_list|(
name|enum
name|ibv_node_type
name|node_type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_port_state_str - Return string describing port_state enum value  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_port_state_str
parameter_list|(
name|enum
name|ibv_port_state
name|port_state
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_event_type_str - Return string describing event_type enum value  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_event_type_str
parameter_list|(
name|enum
name|ibv_event_type
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|ETHERNET_LL_SIZE
value|6
end_define

begin_function_decl
name|int
name|ibv_resolve_eth_l2_from_gid
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_ah_attr
modifier|*
name|attr
parameter_list|,
name|uint8_t
name|eth_mac
index|[
name|ETHERNET_LL_SIZE
index|]
parameter_list|,
name|uint16_t
modifier|*
name|vid
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ibv_is_qpt_supported
parameter_list|(
name|uint32_t
name|caps
parameter_list|,
name|enum
name|ibv_qp_type
name|qpt
parameter_list|)
block|{
return|return
operator|!
operator|!
operator|(
name|caps
operator|&
operator|(
literal|1
operator|<<
name|qpt
operator|)
operator|)
return|;
block|}
end_function

begin_macro
name|END_C_DECLS
end_macro

begin_undef
undef|#
directive|undef
name|__attribute_const
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* INFINIBAND_VERBS_H */
end_comment

end_unit

