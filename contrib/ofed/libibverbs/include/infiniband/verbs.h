begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.  * Copyright (c) 2004 Intel Corporation.  All rights reserved.  * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc.  All rights reserved.  * Copyright (c) 2005 PathScale, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|INFINIBAND_VERBS_H
end_ifndef

begin_define
define|#
directive|define
name|INFINIBAND_VERBS_H
end_define

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
value|extern "C" {
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
value|}
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__cplusplus */
end_comment

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_if
if|#
directive|if
name|__GNUC__
operator|>=
literal|3
end_if

begin_define
define|#
directive|define
name|__attribute_const
value|__attribute__((const))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__attribute_const
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|BEGIN_C_DECLS
end_macro

begin_union
union|union
name|ibv_gid
block|{
name|uint8_t
name|raw
index|[
literal|16
index|]
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|subnet_prefix
decl_stmt|;
name|uint64_t
name|interface_id
decl_stmt|;
block|}
name|global
struct|;
block|}
union|;
end_union

begin_enum
enum|enum
name|ibv_node_type
block|{
name|IBV_NODE_UNKNOWN
init|=
operator|-
literal|1
block|,
name|IBV_NODE_CA
init|=
literal|1
block|,
name|IBV_NODE_SWITCH
block|,
name|IBV_NODE_ROUTER
block|,
name|IBV_NODE_RNIC
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_transport_type
block|{
name|IBV_TRANSPORT_UNKNOWN
init|=
operator|-
literal|1
block|,
name|IBV_TRANSPORT_IB
init|=
literal|0
block|,
name|IBV_TRANSPORT_IWARP
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_device_cap_flags
block|{
name|IBV_DEVICE_RESIZE_MAX_WR
init|=
literal|1
block|,
name|IBV_DEVICE_BAD_PKEY_CNTR
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_DEVICE_BAD_QKEY_CNTR
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_DEVICE_RAW_MULTI
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_DEVICE_AUTO_PATH_MIG
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_DEVICE_CHANGE_PHY_PORT
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_DEVICE_UD_AV_PORT_ENFORCE
init|=
literal|1
operator|<<
literal|6
block|,
name|IBV_DEVICE_CURR_QP_STATE_MOD
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_DEVICE_SHUTDOWN_PORT
init|=
literal|1
operator|<<
literal|8
block|,
name|IBV_DEVICE_INIT_TYPE
init|=
literal|1
operator|<<
literal|9
block|,
name|IBV_DEVICE_PORT_ACTIVE_EVENT
init|=
literal|1
operator|<<
literal|10
block|,
name|IBV_DEVICE_SYS_IMAGE_GUID
init|=
literal|1
operator|<<
literal|11
block|,
name|IBV_DEVICE_RC_RNR_NAK_GEN
init|=
literal|1
operator|<<
literal|12
block|,
name|IBV_DEVICE_SRQ_RESIZE
init|=
literal|1
operator|<<
literal|13
block|,
name|IBV_DEVICE_N_NOTIFY_CQ
init|=
literal|1
operator|<<
literal|14
block|,
name|IBV_DEVICE_XRC
init|=
literal|1
operator|<<
literal|20
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_atomic_cap
block|{
name|IBV_ATOMIC_NONE
block|,
name|IBV_ATOMIC_HCA
block|,
name|IBV_ATOMIC_GLOB
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_device_attr
block|{
name|char
name|fw_ver
index|[
literal|64
index|]
decl_stmt|;
name|uint64_t
name|node_guid
decl_stmt|;
name|uint64_t
name|sys_image_guid
decl_stmt|;
name|uint64_t
name|max_mr_size
decl_stmt|;
name|uint64_t
name|page_size_cap
decl_stmt|;
name|uint32_t
name|vendor_id
decl_stmt|;
name|uint32_t
name|vendor_part_id
decl_stmt|;
name|uint32_t
name|hw_ver
decl_stmt|;
name|int
name|max_qp
decl_stmt|;
name|int
name|max_qp_wr
decl_stmt|;
name|int
name|device_cap_flags
decl_stmt|;
name|int
name|max_sge
decl_stmt|;
name|int
name|max_sge_rd
decl_stmt|;
name|int
name|max_cq
decl_stmt|;
name|int
name|max_cqe
decl_stmt|;
name|int
name|max_mr
decl_stmt|;
name|int
name|max_pd
decl_stmt|;
name|int
name|max_qp_rd_atom
decl_stmt|;
name|int
name|max_ee_rd_atom
decl_stmt|;
name|int
name|max_res_rd_atom
decl_stmt|;
name|int
name|max_qp_init_rd_atom
decl_stmt|;
name|int
name|max_ee_init_rd_atom
decl_stmt|;
name|enum
name|ibv_atomic_cap
name|atomic_cap
decl_stmt|;
name|int
name|max_ee
decl_stmt|;
name|int
name|max_rdd
decl_stmt|;
name|int
name|max_mw
decl_stmt|;
name|int
name|max_raw_ipv6_qp
decl_stmt|;
name|int
name|max_raw_ethy_qp
decl_stmt|;
name|int
name|max_mcast_grp
decl_stmt|;
name|int
name|max_mcast_qp_attach
decl_stmt|;
name|int
name|max_total_mcast_qp_attach
decl_stmt|;
name|int
name|max_ah
decl_stmt|;
name|int
name|max_fmr
decl_stmt|;
name|int
name|max_map_per_fmr
decl_stmt|;
name|int
name|max_srq
decl_stmt|;
name|int
name|max_srq_wr
decl_stmt|;
name|int
name|max_srq_sge
decl_stmt|;
name|uint16_t
name|max_pkeys
decl_stmt|;
name|uint8_t
name|local_ca_ack_delay
decl_stmt|;
name|uint8_t
name|phys_port_cnt
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_mtu
block|{
name|IBV_MTU_256
init|=
literal|1
block|,
name|IBV_MTU_512
init|=
literal|2
block|,
name|IBV_MTU_1024
init|=
literal|3
block|,
name|IBV_MTU_2048
init|=
literal|4
block|,
name|IBV_MTU_4096
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_port_state
block|{
name|IBV_PORT_NOP
init|=
literal|0
block|,
name|IBV_PORT_DOWN
init|=
literal|1
block|,
name|IBV_PORT_INIT
init|=
literal|2
block|,
name|IBV_PORT_ARMED
init|=
literal|3
block|,
name|IBV_PORT_ACTIVE
init|=
literal|4
block|,
name|IBV_PORT_ACTIVE_DEFER
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|IBV_LINK_LAYER_UNSPECIFIED
block|,
name|IBV_LINK_LAYER_INFINIBAND
block|,
name|IBV_LINK_LAYER_ETHERNET
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_port_attr
block|{
name|enum
name|ibv_port_state
name|state
decl_stmt|;
name|enum
name|ibv_mtu
name|max_mtu
decl_stmt|;
name|enum
name|ibv_mtu
name|active_mtu
decl_stmt|;
name|int
name|gid_tbl_len
decl_stmt|;
name|uint32_t
name|port_cap_flags
decl_stmt|;
name|uint32_t
name|max_msg_sz
decl_stmt|;
name|uint32_t
name|bad_pkey_cntr
decl_stmt|;
name|uint32_t
name|qkey_viol_cntr
decl_stmt|;
name|uint16_t
name|pkey_tbl_len
decl_stmt|;
name|uint16_t
name|lid
decl_stmt|;
name|uint16_t
name|sm_lid
decl_stmt|;
name|uint8_t
name|lmc
decl_stmt|;
name|uint8_t
name|max_vl_num
decl_stmt|;
name|uint8_t
name|sm_sl
decl_stmt|;
name|uint8_t
name|subnet_timeout
decl_stmt|;
name|uint8_t
name|init_type_reply
decl_stmt|;
name|uint8_t
name|active_width
decl_stmt|;
name|uint8_t
name|active_speed
decl_stmt|;
name|uint8_t
name|phys_state
decl_stmt|;
name|uint8_t
name|link_layer
decl_stmt|;
name|uint8_t
name|pad
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_event_type
block|{
name|IBV_EVENT_CQ_ERR
block|,
name|IBV_EVENT_QP_FATAL
block|,
name|IBV_EVENT_QP_REQ_ERR
block|,
name|IBV_EVENT_QP_ACCESS_ERR
block|,
name|IBV_EVENT_COMM_EST
block|,
name|IBV_EVENT_SQ_DRAINED
block|,
name|IBV_EVENT_PATH_MIG
block|,
name|IBV_EVENT_PATH_MIG_ERR
block|,
name|IBV_EVENT_DEVICE_FATAL
block|,
name|IBV_EVENT_PORT_ACTIVE
block|,
name|IBV_EVENT_PORT_ERR
block|,
name|IBV_EVENT_LID_CHANGE
block|,
name|IBV_EVENT_PKEY_CHANGE
block|,
name|IBV_EVENT_SM_CHANGE
block|,
name|IBV_EVENT_SRQ_ERR
block|,
name|IBV_EVENT_SRQ_LIMIT_REACHED
block|,
name|IBV_EVENT_QP_LAST_WQE_REACHED
block|,
name|IBV_EVENT_CLIENT_REREGISTER
block|,
name|IBV_EVENT_GID_CHANGE
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ibv_event_flags
block|{
name|IBV_XRC_QP_EVENT_FLAG
init|=
literal|0x80000000
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ibv_async_event
block|{
union|union
block|{
name|struct
name|ibv_cq
modifier|*
name|cq
decl_stmt|;
name|struct
name|ibv_qp
modifier|*
name|qp
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|int
name|port_num
decl_stmt|;
name|uint32_t
name|xrc_qp_num
decl_stmt|;
block|}
name|element
union|;
name|enum
name|ibv_event_type
name|event_type
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_wc_status
block|{
name|IBV_WC_SUCCESS
block|,
name|IBV_WC_LOC_LEN_ERR
block|,
name|IBV_WC_LOC_QP_OP_ERR
block|,
name|IBV_WC_LOC_EEC_OP_ERR
block|,
name|IBV_WC_LOC_PROT_ERR
block|,
name|IBV_WC_WR_FLUSH_ERR
block|,
name|IBV_WC_MW_BIND_ERR
block|,
name|IBV_WC_BAD_RESP_ERR
block|,
name|IBV_WC_LOC_ACCESS_ERR
block|,
name|IBV_WC_REM_INV_REQ_ERR
block|,
name|IBV_WC_REM_ACCESS_ERR
block|,
name|IBV_WC_REM_OP_ERR
block|,
name|IBV_WC_RETRY_EXC_ERR
block|,
name|IBV_WC_RNR_RETRY_EXC_ERR
block|,
name|IBV_WC_LOC_RDD_VIOL_ERR
block|,
name|IBV_WC_REM_INV_RD_REQ_ERR
block|,
name|IBV_WC_REM_ABORT_ERR
block|,
name|IBV_WC_INV_EECN_ERR
block|,
name|IBV_WC_INV_EEC_STATE_ERR
block|,
name|IBV_WC_FATAL_ERR
block|,
name|IBV_WC_RESP_TIMEOUT_ERR
block|,
name|IBV_WC_GENERAL_ERR
block|}
enum|;
end_enum

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_wc_status_str
parameter_list|(
name|enum
name|ibv_wc_status
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|ibv_wc_opcode
block|{
name|IBV_WC_SEND
block|,
name|IBV_WC_RDMA_WRITE
block|,
name|IBV_WC_RDMA_READ
block|,
name|IBV_WC_COMP_SWAP
block|,
name|IBV_WC_FETCH_ADD
block|,
name|IBV_WC_BIND_MW
block|,
comment|/*  * Set value of IBV_WC_RECV so consumers can test if a completion is a  * receive by testing (opcode& IBV_WC_RECV).  */
name|IBV_WC_RECV
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_WC_RECV_RDMA_WITH_IMM
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_wc_flags
block|{
name|IBV_WC_GRH
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_WC_WITH_IMM
init|=
literal|1
operator|<<
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_wc
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|enum
name|ibv_wc_status
name|status
decl_stmt|;
name|enum
name|ibv_wc_opcode
name|opcode
decl_stmt|;
name|uint32_t
name|vendor_err
decl_stmt|;
name|uint32_t
name|byte_len
decl_stmt|;
name|uint32_t
name|imm_data
decl_stmt|;
comment|/* in network byte order */
name|uint32_t
name|qp_num
decl_stmt|;
name|uint32_t
name|src_qp
decl_stmt|;
name|int
name|wc_flags
decl_stmt|;
name|uint16_t
name|pkey_index
decl_stmt|;
name|uint16_t
name|slid
decl_stmt|;
name|uint8_t
name|sl
decl_stmt|;
name|uint8_t
name|dlid_path_bits
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_access_flags
block|{
name|IBV_ACCESS_LOCAL_WRITE
init|=
literal|1
block|,
name|IBV_ACCESS_REMOTE_WRITE
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|IBV_ACCESS_REMOTE_READ
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|IBV_ACCESS_REMOTE_ATOMIC
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|IBV_ACCESS_MW_BIND
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_pd
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_rereg_mr_flags
block|{
name|IBV_REREG_MR_CHANGE_TRANSLATION
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|IBV_REREG_MR_CHANGE_PD
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|IBV_REREG_MR_CHANGE_ACCESS
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|IBV_REREG_MR_KEEP_VALID
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_mr
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|void
modifier|*
name|addr
decl_stmt|;
name|size_t
name|length
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|uint32_t
name|lkey
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_mw_type
block|{
name|IBV_MW_TYPE_1
init|=
literal|1
block|,
name|IBV_MW_TYPE_2
init|=
literal|2
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_mw
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_global_route
block|{
name|union
name|ibv_gid
name|dgid
decl_stmt|;
name|uint32_t
name|flow_label
decl_stmt|;
name|uint8_t
name|sgid_index
decl_stmt|;
name|uint8_t
name|hop_limit
decl_stmt|;
name|uint8_t
name|traffic_class
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_grh
block|{
name|uint32_t
name|version_tclass_flow
decl_stmt|;
name|uint16_t
name|paylen
decl_stmt|;
name|uint8_t
name|next_hdr
decl_stmt|;
name|uint8_t
name|hop_limit
decl_stmt|;
name|union
name|ibv_gid
name|sgid
decl_stmt|;
name|union
name|ibv_gid
name|dgid
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_rate
block|{
name|IBV_RATE_MAX
init|=
literal|0
block|,
name|IBV_RATE_2_5_GBPS
init|=
literal|2
block|,
name|IBV_RATE_5_GBPS
init|=
literal|5
block|,
name|IBV_RATE_10_GBPS
init|=
literal|3
block|,
name|IBV_RATE_20_GBPS
init|=
literal|6
block|,
name|IBV_RATE_30_GBPS
init|=
literal|4
block|,
name|IBV_RATE_40_GBPS
init|=
literal|7
block|,
name|IBV_RATE_60_GBPS
init|=
literal|8
block|,
name|IBV_RATE_80_GBPS
init|=
literal|9
block|,
name|IBV_RATE_120_GBPS
init|=
literal|10
block|}
enum|;
end_enum

begin_comment
comment|/**  * ibv_rate_to_mult - Convert the IB rate enum to a multiple of the  * base rate of 2.5 Gbit/sec.  For example, IBV_RATE_5_GBPS will be  * converted to 2, since 5 Gbit/sec is 2 * 2.5 Gbit/sec.  * @rate: rate to convert.  */
end_comment

begin_decl_stmt
name|int
name|ibv_rate_to_mult
argument_list|(
expr|enum
name|ibv_rate
name|rate
argument_list|)
name|__attribute_const
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**  * mult_to_ibv_rate - Convert a multiple of 2.5 Gbit/sec to an IB rate enum.  * @mult: multiple to convert.  */
end_comment

begin_decl_stmt
name|enum
name|ibv_rate
name|mult_to_ibv_rate
argument_list|(
name|int
name|mult
argument_list|)
name|__attribute_const
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|ibv_ah_attr
block|{
name|struct
name|ibv_global_route
name|grh
decl_stmt|;
name|uint16_t
name|dlid
decl_stmt|;
name|uint8_t
name|sl
decl_stmt|;
name|uint8_t
name|src_path_bits
decl_stmt|;
name|uint8_t
name|static_rate
decl_stmt|;
name|uint8_t
name|is_global
decl_stmt|;
name|uint8_t
name|port_num
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_xrc_domain
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_srq_attr_mask
block|{
name|IBV_SRQ_MAX_WR
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_SRQ_LIMIT
init|=
literal|1
operator|<<
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_srq_attr
block|{
name|uint32_t
name|max_wr
decl_stmt|;
name|uint32_t
name|max_sge
decl_stmt|;
name|uint32_t
name|srq_limit
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_srq_init_attr
block|{
name|void
modifier|*
name|srq_context
decl_stmt|;
name|struct
name|ibv_srq_attr
name|attr
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_qp_type
block|{
name|IBV_QPT_RC
init|=
literal|2
block|,
name|IBV_QPT_UC
block|,
name|IBV_QPT_UD
block|,
name|IBV_QPT_XRC
block|,
name|IBV_QPT_RAW_ETH
init|=
literal|8
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_qp_cap
block|{
name|uint32_t
name|max_send_wr
decl_stmt|;
name|uint32_t
name|max_recv_wr
decl_stmt|;
name|uint32_t
name|max_send_sge
decl_stmt|;
name|uint32_t
name|max_recv_sge
decl_stmt|;
name|uint32_t
name|max_inline_data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_qp_init_attr
block|{
name|void
modifier|*
name|qp_context
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|send_cq
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|recv_cq
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|struct
name|ibv_qp_cap
name|cap
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
name|int
name|sq_sig_all
decl_stmt|;
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_qp_attr_mask
block|{
name|IBV_QP_STATE
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_QP_CUR_STATE
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_QP_EN_SQD_ASYNC_NOTIFY
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_QP_ACCESS_FLAGS
init|=
literal|1
operator|<<
literal|3
block|,
name|IBV_QP_PKEY_INDEX
init|=
literal|1
operator|<<
literal|4
block|,
name|IBV_QP_PORT
init|=
literal|1
operator|<<
literal|5
block|,
name|IBV_QP_QKEY
init|=
literal|1
operator|<<
literal|6
block|,
name|IBV_QP_AV
init|=
literal|1
operator|<<
literal|7
block|,
name|IBV_QP_PATH_MTU
init|=
literal|1
operator|<<
literal|8
block|,
name|IBV_QP_TIMEOUT
init|=
literal|1
operator|<<
literal|9
block|,
name|IBV_QP_RETRY_CNT
init|=
literal|1
operator|<<
literal|10
block|,
name|IBV_QP_RNR_RETRY
init|=
literal|1
operator|<<
literal|11
block|,
name|IBV_QP_RQ_PSN
init|=
literal|1
operator|<<
literal|12
block|,
name|IBV_QP_MAX_QP_RD_ATOMIC
init|=
literal|1
operator|<<
literal|13
block|,
name|IBV_QP_ALT_PATH
init|=
literal|1
operator|<<
literal|14
block|,
name|IBV_QP_MIN_RNR_TIMER
init|=
literal|1
operator|<<
literal|15
block|,
name|IBV_QP_SQ_PSN
init|=
literal|1
operator|<<
literal|16
block|,
name|IBV_QP_MAX_DEST_RD_ATOMIC
init|=
literal|1
operator|<<
literal|17
block|,
name|IBV_QP_PATH_MIG_STATE
init|=
literal|1
operator|<<
literal|18
block|,
name|IBV_QP_CAP
init|=
literal|1
operator|<<
literal|19
block|,
name|IBV_QP_DEST_QPN
init|=
literal|1
operator|<<
literal|20
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_qp_state
block|{
name|IBV_QPS_RESET
block|,
name|IBV_QPS_INIT
block|,
name|IBV_QPS_RTR
block|,
name|IBV_QPS_RTS
block|,
name|IBV_QPS_SQD
block|,
name|IBV_QPS_SQE
block|,
name|IBV_QPS_ERR
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_mig_state
block|{
name|IBV_MIG_MIGRATED
block|,
name|IBV_MIG_REARM
block|,
name|IBV_MIG_ARMED
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_qp_attr
block|{
name|enum
name|ibv_qp_state
name|qp_state
decl_stmt|;
name|enum
name|ibv_qp_state
name|cur_qp_state
decl_stmt|;
name|enum
name|ibv_mtu
name|path_mtu
decl_stmt|;
name|enum
name|ibv_mig_state
name|path_mig_state
decl_stmt|;
name|uint32_t
name|qkey
decl_stmt|;
name|uint32_t
name|rq_psn
decl_stmt|;
name|uint32_t
name|sq_psn
decl_stmt|;
name|uint32_t
name|dest_qp_num
decl_stmt|;
name|int
name|qp_access_flags
decl_stmt|;
name|struct
name|ibv_qp_cap
name|cap
decl_stmt|;
name|struct
name|ibv_ah_attr
name|ah_attr
decl_stmt|;
name|struct
name|ibv_ah_attr
name|alt_ah_attr
decl_stmt|;
name|uint16_t
name|pkey_index
decl_stmt|;
name|uint16_t
name|alt_pkey_index
decl_stmt|;
name|uint8_t
name|en_sqd_async_notify
decl_stmt|;
name|uint8_t
name|sq_draining
decl_stmt|;
name|uint8_t
name|max_rd_atomic
decl_stmt|;
name|uint8_t
name|max_dest_rd_atomic
decl_stmt|;
name|uint8_t
name|min_rnr_timer
decl_stmt|;
name|uint8_t
name|port_num
decl_stmt|;
name|uint8_t
name|timeout
decl_stmt|;
name|uint8_t
name|retry_cnt
decl_stmt|;
name|uint8_t
name|rnr_retry
decl_stmt|;
name|uint8_t
name|alt_port_num
decl_stmt|;
name|uint8_t
name|alt_timeout
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ibv_wr_opcode
block|{
name|IBV_WR_RDMA_WRITE
block|,
name|IBV_WR_RDMA_WRITE_WITH_IMM
block|,
name|IBV_WR_SEND
block|,
name|IBV_WR_SEND_WITH_IMM
block|,
name|IBV_WR_RDMA_READ
block|,
name|IBV_WR_ATOMIC_CMP_AND_SWP
block|,
name|IBV_WR_ATOMIC_FETCH_AND_ADD
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ibv_send_flags
block|{
name|IBV_SEND_FENCE
init|=
literal|1
operator|<<
literal|0
block|,
name|IBV_SEND_SIGNALED
init|=
literal|1
operator|<<
literal|1
block|,
name|IBV_SEND_SOLICITED
init|=
literal|1
operator|<<
literal|2
block|,
name|IBV_SEND_INLINE
init|=
literal|1
operator|<<
literal|3
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_sge
block|{
name|uint64_t
name|addr
decl_stmt|;
name|uint32_t
name|length
decl_stmt|;
name|uint32_t
name|lkey
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_send_wr
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|struct
name|ibv_send_wr
modifier|*
name|next
decl_stmt|;
name|struct
name|ibv_sge
modifier|*
name|sg_list
decl_stmt|;
name|int
name|num_sge
decl_stmt|;
name|enum
name|ibv_wr_opcode
name|opcode
decl_stmt|;
name|int
name|send_flags
decl_stmt|;
name|uint32_t
name|imm_data
decl_stmt|;
comment|/* in network byte order */
union|union
block|{
struct|struct
block|{
name|uint64_t
name|remote_addr
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
block|}
name|rdma
struct|;
struct|struct
block|{
name|uint64_t
name|remote_addr
decl_stmt|;
name|uint64_t
name|compare_add
decl_stmt|;
name|uint64_t
name|swap
decl_stmt|;
name|uint32_t
name|rkey
decl_stmt|;
block|}
name|atomic
struct|;
struct|struct
block|{
name|struct
name|ibv_ah
modifier|*
name|ah
decl_stmt|;
name|uint32_t
name|remote_qpn
decl_stmt|;
name|uint32_t
name|remote_qkey
decl_stmt|;
block|}
name|ud
struct|;
block|}
name|wr
union|;
name|uint32_t
name|xrc_remote_srq_num
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_recv_wr
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|struct
name|ibv_recv_wr
modifier|*
name|next
decl_stmt|;
name|struct
name|ibv_sge
modifier|*
name|sg_list
decl_stmt|;
name|int
name|num_sge
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_mw_bind
block|{
name|uint64_t
name|wr_id
decl_stmt|;
name|struct
name|ibv_mr
modifier|*
name|mr
decl_stmt|;
name|void
modifier|*
name|addr
decl_stmt|;
name|size_t
name|length
decl_stmt|;
name|int
name|send_flags
decl_stmt|;
name|int
name|mw_access_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_srq
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|void
modifier|*
name|srq_context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|uint32_t
name|events_completed
decl_stmt|;
name|uint32_t
name|xrc_srq_num
decl_stmt|;
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|xrc_cq
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_qp
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|void
modifier|*
name|qp_context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|send_cq
decl_stmt|;
name|struct
name|ibv_cq
modifier|*
name|recv_cq
decl_stmt|;
name|struct
name|ibv_srq
modifier|*
name|srq
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|uint32_t
name|qp_num
decl_stmt|;
name|enum
name|ibv_qp_state
name|state
decl_stmt|;
name|enum
name|ibv_qp_type
name|qp_type
decl_stmt|;
name|uint32_t
name|events_completed
decl_stmt|;
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_comp_channel
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|int
name|fd
decl_stmt|;
name|int
name|refcnt
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_cq
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_comp_channel
modifier|*
name|channel
decl_stmt|;
name|void
modifier|*
name|cq_context
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
name|int
name|cqe
decl_stmt|;
name|uint32_t
name|comp_events_completed
decl_stmt|;
name|uint32_t
name|async_events_completed
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|pthread_cond_t
name|cond
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_ah
block|{
name|struct
name|ibv_context
modifier|*
name|context
decl_stmt|;
name|struct
name|ibv_pd
modifier|*
name|pd
decl_stmt|;
name|uint32_t
name|handle
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|ibv_device
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ibv_context
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ibv_device_ops
block|{
name|struct
name|ibv_context
modifier|*
function_decl|(
modifier|*
name|alloc_context
function_decl|)
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|,
name|int
name|cmd_fd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free_context
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|IBV_SYSFS_NAME_MAX
init|=
literal|64
block|,
name|IBV_SYSFS_PATH_MAX
init|=
literal|256
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ibv_device
block|{
name|struct
name|ibv_device_ops
name|ops
decl_stmt|;
name|enum
name|ibv_node_type
name|node_type
decl_stmt|;
name|enum
name|ibv_transport_type
name|transport_type
decl_stmt|;
comment|/* Name of underlying kernel IB device, eg "mthca0" */
name|char
name|name
index|[
name|IBV_SYSFS_NAME_MAX
index|]
decl_stmt|;
comment|/* Name of uverbs device, eg "uverbs0" */
name|char
name|dev_name
index|[
name|IBV_SYSFS_NAME_MAX
index|]
decl_stmt|;
comment|/* Path to infiniband_verbs class device in sysfs */
name|char
name|dev_path
index|[
name|IBV_SYSFS_PATH_MAX
index|]
decl_stmt|;
comment|/* Path to infiniband class device in sysfs */
name|char
name|ibdev_path
index|[
name|IBV_SYSFS_PATH_MAX
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_more_ops
block|{
name|struct
name|ibv_srq
modifier|*
function_decl|(
modifier|*
name|create_xrc_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|struct
name|ibv_cq
modifier|*
name|xrc_cq
parameter_list|,
name|struct
name|ibv_srq_init_attr
modifier|*
name|srq_init_attr
parameter_list|)
function_decl|;
name|struct
name|ibv_xrc_domain
modifier|*
function_decl|(
modifier|*
name|open_xrc_domain
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|int
name|fd
parameter_list|,
name|int
name|oflag
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|close_xrc_domain
function_decl|)
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|d
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|create_xrc_rcv_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|,
name|uint32_t
modifier|*
name|xrc_qp_num
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|modify_xrc_rcv_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_xrc_rcv_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|reg_xrc_rcv_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|unreg_xrc_rcv_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_context_ops
block|{
name|int
function_decl|(
modifier|*
name|query_device
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_device_attr
modifier|*
name|device_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_port
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_port_attr
modifier|*
name|port_attr
parameter_list|)
function_decl|;
name|struct
name|ibv_pd
modifier|*
function_decl|(
modifier|*
name|alloc_pd
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dealloc_pd
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|)
function_decl|;
name|struct
name|ibv_mr
modifier|*
function_decl|(
modifier|*
name|reg_mr
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
name|struct
name|ibv_mr
modifier|*
function_decl|(
modifier|*
name|rereg_mr
function_decl|)
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dereg_mr
function_decl|)
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
name|struct
name|ibv_mw
modifier|*
function_decl|(
modifier|*
name|alloc_mw
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|enum
name|ibv_mw_type
name|type
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|bind_mw
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_mw
modifier|*
name|mw
parameter_list|,
name|struct
name|ibv_mw_bind
modifier|*
name|mw_bind
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dealloc_mw
function_decl|)
parameter_list|(
name|struct
name|ibv_mw
modifier|*
name|mw
parameter_list|)
function_decl|;
name|struct
name|ibv_cq
modifier|*
function_decl|(
modifier|*
name|create_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|int
name|cqe
parameter_list|,
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|,
name|int
name|comp_vector
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|poll_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|num_entries
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|req_notify_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|solicited_only
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|cq_event
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|resize_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|cqe
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_cq
function_decl|)
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
name|struct
name|ibv_srq
modifier|*
function_decl|(
modifier|*
name|create_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_srq_init_attr
modifier|*
name|srq_init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|modify_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|,
name|int
name|srq_attr_mask
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_srq
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|post_srq_recv
function_decl|)
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|recv_wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_recv_wr
parameter_list|)
function_decl|;
name|struct
name|ibv_qp
modifier|*
function_decl|(
modifier|*
name|create_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|modify_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_qp
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|post_send
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|post_recv
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
function_decl|;
name|struct
name|ibv_ah
modifier|*
function_decl|(
modifier|*
name|create_ah
function_decl|)
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_ah_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_ah
function_decl|)
parameter_list|(
name|struct
name|ibv_ah
modifier|*
name|ah
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|attach_mcast
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|detach_mcast
function_decl|)
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|async_event
function_decl|)
parameter_list|(
name|struct
name|ibv_async_event
modifier|*
name|event
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ibv_context
block|{
name|struct
name|ibv_device
modifier|*
name|device
decl_stmt|;
name|struct
name|ibv_context_ops
name|ops
decl_stmt|;
name|int
name|cmd_fd
decl_stmt|;
name|int
name|async_fd
decl_stmt|;
name|int
name|num_comp_vectors
decl_stmt|;
name|pthread_mutex_t
name|mutex
decl_stmt|;
name|void
modifier|*
name|abi_compat
decl_stmt|;
name|struct
name|ibv_more_ops
modifier|*
name|more_ops
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|___ibv_query_port
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_port_attr
modifier|*
name|port_attr
parameter_list|)
block|{
name|port_attr
operator|->
name|link_layer
operator|=
name|IBV_LINK_LAYER_UNSPECIFIED
expr_stmt|;
name|port_attr
operator|->
name|pad
operator|=
literal|0
expr_stmt|;
return|return
name|context
operator|->
name|ops
operator|.
name|query_port
argument_list|(
name|context
argument_list|,
name|port_num
argument_list|,
name|port_attr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_get_device_list - Get list of IB devices currently available  * @num_devices: optional.  if non-NULL, set to the number of devices  * returned in the array.  *  * Return a NULL-terminated array of IB devices.  The array can be  * released with ibv_free_device_list().  */
end_comment

begin_function_decl
name|struct
name|ibv_device
modifier|*
modifier|*
name|ibv_get_device_list
parameter_list|(
name|int
modifier|*
name|num_devices
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_free_device_list - Free list from ibv_get_device_list()  *  * Free an array of devices returned from ibv_get_device_list().  Once  * the array is freed, pointers to devices that were not opened with  * ibv_open_device() are no longer valid.  Client code must open all  * devices it intends to use before calling ibv_free_device_list().  */
end_comment

begin_function_decl
name|void
name|ibv_free_device_list
parameter_list|(
name|struct
name|ibv_device
modifier|*
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_device_name - Return kernel device name  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_get_device_name
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_device_guid - Return device's node GUID  */
end_comment

begin_function_decl
name|uint64_t
name|ibv_get_device_guid
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_open_device - Initialize device for use  */
end_comment

begin_function_decl
name|struct
name|ibv_context
modifier|*
name|ibv_open_device
parameter_list|(
name|struct
name|ibv_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_close_device - Release device  */
end_comment

begin_function_decl
name|int
name|ibv_close_device
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_async_event - Get next async event  * @event: Pointer to use to return async event  *  * All async events returned by ibv_get_async_event() must eventually  * be acknowledged with ibv_ack_async_event().  */
end_comment

begin_function_decl
name|int
name|ibv_get_async_event
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_async_event
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_ack_async_event - Acknowledge an async event  * @event: Event to be acknowledged.  *  * All async events which are returned by ibv_get_async_event() must  * be acknowledged.  To avoid races, destroying an object (CQ, SRQ or  * QP) will wait for all affiliated events to be acknowledged, so  * there should be a one-to-one correspondence between acks and  * successful gets.  */
end_comment

begin_function_decl
name|void
name|ibv_ack_async_event
parameter_list|(
name|struct
name|ibv_async_event
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_device - Get device properties  */
end_comment

begin_function_decl
name|int
name|ibv_query_device
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|struct
name|ibv_device_attr
modifier|*
name|device_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_port - Get port properties  */
end_comment

begin_function_decl
name|int
name|ibv_query_port
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_port_attr
modifier|*
name|port_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_gid - Get a GID table entry  */
end_comment

begin_function_decl
name|int
name|ibv_query_gid
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|int
name|index
parameter_list|,
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_pkey - Get a P_Key table entry  */
end_comment

begin_function_decl
name|int
name|ibv_query_pkey
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|int
name|index
parameter_list|,
name|uint16_t
modifier|*
name|pkey
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_alloc_pd - Allocate a protection domain  */
end_comment

begin_function_decl
name|struct
name|ibv_pd
modifier|*
name|ibv_alloc_pd
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_dealloc_pd - Free a protection domain  */
end_comment

begin_function_decl
name|int
name|ibv_dealloc_pd
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_reg_mr - Register a memory region  */
end_comment

begin_function_decl
name|struct
name|ibv_mr
modifier|*
name|ibv_reg_mr
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_dereg_mr - Deregister a memory region  */
end_comment

begin_function_decl
name|int
name|ibv_dereg_mr
parameter_list|(
name|struct
name|ibv_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_comp_channel - Create a completion event channel  */
end_comment

begin_function_decl
name|struct
name|ibv_comp_channel
modifier|*
name|ibv_create_comp_channel
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_comp_channel - Destroy a completion event channel  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_comp_channel
parameter_list|(
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_cq - Create a completion queue  * @context - Context CQ will be attached to  * @cqe - Minimum number of entries required for CQ  * @cq_context - Consumer-supplied context returned for completion events  * @channel - Completion channel where completion events will be queued.  *     May be NULL if completion events will not be used.  * @comp_vector - Completion vector used to signal completion events.  *     Must be>= 0 and< context->num_comp_vectors.  */
end_comment

begin_function_decl
name|struct
name|ibv_cq
modifier|*
name|ibv_create_cq
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|int
name|cqe
parameter_list|,
name|void
modifier|*
name|cq_context
parameter_list|,
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|,
name|int
name|comp_vector
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_resize_cq - Modifies the capacity of the CQ.  * @cq: The CQ to resize.  * @cqe: The minimum size of the CQ.  *  * Users can examine the cq structure to determine the actual CQ size.  */
end_comment

begin_function_decl
name|int
name|ibv_resize_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|cqe
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_cq - Destroy a completion queue  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_get_cq_event - Read next CQ event  * @channel: Channel to get next event from.  * @cq: Used to return pointer to CQ.  * @cq_context: Used to return consumer-supplied CQ context.  *  * All completion events returned by ibv_get_cq_event() must  * eventually be acknowledged with ibv_ack_cq_events().  */
end_comment

begin_function_decl
name|int
name|ibv_get_cq_event
parameter_list|(
name|struct
name|ibv_comp_channel
modifier|*
name|channel
parameter_list|,
name|struct
name|ibv_cq
modifier|*
modifier|*
name|cq
parameter_list|,
name|void
modifier|*
modifier|*
name|cq_context
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_ack_cq_events - Acknowledge CQ completion events  * @cq: CQ to acknowledge events for  * @nevents: Number of events to acknowledge.  *  * All completion events which are returned by ibv_get_cq_event() must  * be acknowledged.  To avoid races, ibv_destroy_cq() will wait for  * all completion events to be acknowledged, so there should be a  * one-to-one correspondence between acks and successful gets.  An  * application may accumulate multiple completion events and  * acknowledge them in a single call to ibv_ack_cq_events() by passing  * the number of events to ack in @nevents.  */
end_comment

begin_function_decl
name|void
name|ibv_ack_cq_events
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|unsigned
name|int
name|nevents
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_poll_cq - Poll a CQ for work completions  * @cq:the CQ being polled  * @num_entries:maximum number of completions to return  * @wc:array of at least @num_entries of&struct ibv_wc where completions  *   will be returned  *  * Poll a CQ for (possibly multiple) completions.  If the return value  * is< 0, an error occurred.  If the return value is>= 0, it is the  * number of completions returned.  If the return value is  * non-negative and strictly less than num_entries, then the CQ was  * emptied.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_poll_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|num_entries
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|)
block|{
return|return
name|cq
operator|->
name|context
operator|->
name|ops
operator|.
name|poll_cq
argument_list|(
name|cq
argument_list|,
name|num_entries
argument_list|,
name|wc
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_req_notify_cq - Request completion notification on a CQ.  An  *   event will be added to the completion channel associated with the  *   CQ when an entry is added to the CQ.  * @cq: The completion queue to request notification for.  * @solicited_only: If non-zero, an event will be generated only for  *   the next solicited CQ entry.  If zero, any CQ entry, solicited or  *   not, will generate an event.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_req_notify_cq
parameter_list|(
name|struct
name|ibv_cq
modifier|*
name|cq
parameter_list|,
name|int
name|solicited_only
parameter_list|)
block|{
return|return
name|cq
operator|->
name|context
operator|->
name|ops
operator|.
name|req_notify_cq
argument_list|(
name|cq
argument_list|,
name|solicited_only
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_create_srq - Creates a SRQ associated with the specified protection  *   domain.  * @pd: The protection domain associated with the SRQ.  * @srq_init_attr: A list of initial attributes required to create the SRQ.  *  * srq_attr->max_wr and srq_attr->max_sge are read the determine the  * requested size of the SRQ, and set to the actual values allocated  * on return.  If ibv_create_srq() succeeds, then max_wr and max_sge  * will always be at least as large as the requested values.  */
end_comment

begin_function_decl
name|struct
name|ibv_srq
modifier|*
name|ibv_create_srq
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_srq_init_attr
modifier|*
name|srq_init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_xrc_srq - Creates a SRQ associated with the specified protection  *   domain and xrc domain.  * @pd: The protection domain associated with the SRQ.  * @xrc_domain: The XRC domain associated with the SRQ.  * @xrc_cq: CQ to report completions for XRC packets on.  *  * @srq_init_attr: A list of initial attributes required to create the SRQ.  *  * srq_attr->max_wr and srq_attr->max_sge are read the determine the  * requested size of the SRQ, and set to the actual values allocated  * on return.  If ibv_create_srq() succeeds, then max_wr and max_sge  * will always be at least as large as the requested values.  */
end_comment

begin_function_decl
name|struct
name|ibv_srq
modifier|*
name|ibv_create_xrc_srq
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|struct
name|ibv_cq
modifier|*
name|xrc_cq
parameter_list|,
name|struct
name|ibv_srq_init_attr
modifier|*
name|srq_init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_modify_srq - Modifies the attributes for the specified SRQ.  * @srq: The SRQ to modify.  * @srq_attr: On input, specifies the SRQ attributes to modify.  On output,  *   the current values of selected SRQ attributes are returned.  * @srq_attr_mask: A bit-mask used to specify which attributes of the SRQ  *   are being modified.  *  * The mask may contain IBV_SRQ_MAX_WR to resize the SRQ and/or  * IBV_SRQ_LIMIT to set the SRQ's limit and request notification when  * the number of receives queued drops below the limit.  */
end_comment

begin_function_decl
name|int
name|ibv_modify_srq
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|,
name|int
name|srq_attr_mask
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_srq - Returns the attribute list and current values for the  *   specified SRQ.  * @srq: The SRQ to query.  * @srq_attr: The attributes of the specified SRQ.  */
end_comment

begin_function_decl
name|int
name|ibv_query_srq
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_srq_attr
modifier|*
name|srq_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_srq - Destroys the specified SRQ.  * @srq: The SRQ to destroy.  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_srq
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_post_srq_recv - Posts a list of work requests to the specified SRQ.  * @srq: The SRQ to post the work request on.  * @recv_wr: A list of work requests to post on the receive queue.  * @bad_recv_wr: On an immediate failure, this parameter will reference  *   the work request that failed to be posted on the QP.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_post_srq_recv
parameter_list|(
name|struct
name|ibv_srq
modifier|*
name|srq
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|recv_wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_recv_wr
parameter_list|)
block|{
return|return
name|srq
operator|->
name|context
operator|->
name|ops
operator|.
name|post_srq_recv
argument_list|(
name|srq
argument_list|,
name|recv_wr
argument_list|,
name|bad_recv_wr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_create_qp - Create a queue pair.  */
end_comment

begin_function_decl
name|struct
name|ibv_qp
modifier|*
name|ibv_create_qp
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|qp_init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_modify_qp - Modify a queue pair.  */
end_comment

begin_function_decl
name|int
name|ibv_modify_qp
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_qp - Returns the attribute list and current values for the  *   specified QP.  * @qp: The QP to query.  * @attr: The attributes of the specified QP.  * @attr_mask: A bit-mask used to select specific attributes to query.  * @init_attr: Additional attributes of the selected QP.  *  * The qp_attr_mask may be used to limit the query to gathering only the  * selected attributes.  */
end_comment

begin_function_decl
name|int
name|ibv_query_qp
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_qp - Destroy a queue pair.  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_qp
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_post_send - Post a list of work requests to a send queue.  *  * If IBV_SEND_INLINE flag is set, the data buffers can be reused  * immediately after the call returns.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_post_send
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_send_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
block|{
return|return
name|qp
operator|->
name|context
operator|->
name|ops
operator|.
name|post_send
argument_list|(
name|qp
argument_list|,
name|wr
argument_list|,
name|bad_wr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_post_recv - Post a list of work requests to a receive queue.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ibv_post_recv
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ibv_recv_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
block|{
return|return
name|qp
operator|->
name|context
operator|->
name|ops
operator|.
name|post_recv
argument_list|(
name|qp
argument_list|,
name|wr
argument_list|,
name|bad_wr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * ibv_create_ah - Create an address handle.  */
end_comment

begin_function_decl
name|struct
name|ibv_ah
modifier|*
name|ibv_create_ah
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_ah_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_init_ah_from_wc - Initializes address handle attributes from a  *   work completion.  * @context: Device context on which the received message arrived.  * @port_num: Port on which the received message arrived.  * @wc: Work completion associated with the received message.  * @grh: References the received global route header.  This parameter is  *   ignored unless the work completion indicates that the GRH is valid.  * @ah_attr: Returned attributes that can be used when creating an address  *   handle for replying to the message.  */
end_comment

begin_function_decl
name|int
name|ibv_init_ah_from_wc
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|uint8_t
name|port_num
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|,
name|struct
name|ibv_grh
modifier|*
name|grh
parameter_list|,
name|struct
name|ibv_ah_attr
modifier|*
name|ah_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_ah_from_wc - Creates an address handle associated with the  *   sender of the specified work completion.  * @pd: The protection domain associated with the address handle.  * @wc: Work completion information associated with a received message.  * @grh: References the received global route header.  This parameter is  *   ignored unless the work completion indicates that the GRH is valid.  * @port_num: The outbound port number to associate with the address.  *  * The address handle is used to reference a local or global destination  * in all UD QP post sends.  */
end_comment

begin_function_decl
name|struct
name|ibv_ah
modifier|*
name|ibv_create_ah_from_wc
parameter_list|(
name|struct
name|ibv_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|ibv_wc
modifier|*
name|wc
parameter_list|,
name|struct
name|ibv_grh
modifier|*
name|grh
parameter_list|,
name|uint8_t
name|port_num
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_destroy_ah - Destroy an address handle.  */
end_comment

begin_function_decl
name|int
name|ibv_destroy_ah
parameter_list|(
name|struct
name|ibv_ah
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_attach_mcast - Attaches the specified QP to a multicast group.  * @qp: QP to attach to the multicast group.  The QP must be a UD QP.  * @gid: Multicast group GID.  * @lid: Multicast group LID in host byte order.  *  * In order to route multicast packets correctly, subnet  * administration must have created the multicast group and configured  * the fabric appropriately.  The port associated with the specified  * QP must also be a member of the multicast group.  */
end_comment

begin_function_decl
name|int
name|ibv_attach_mcast
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_detach_mcast - Detaches the specified QP from a multicast group.  * @qp: QP to detach from the multicast group.  * @gid: Multicast group GID.  * @lid: Multicast group LID in host byte order.  */
end_comment

begin_function_decl
name|int
name|ibv_detach_mcast
parameter_list|(
name|struct
name|ibv_qp
modifier|*
name|qp
parameter_list|,
specifier|const
name|union
name|ibv_gid
modifier|*
name|gid
parameter_list|,
name|uint16_t
name|lid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_fork_init - Prepare data structures so that fork() may be used  * safely.  If this function is not called or returns a non-zero  * status, then libibverbs data structures are not fork()-safe and the  * effect of an application calling fork() is undefined.  */
end_comment

begin_function_decl
name|int
name|ibv_fork_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_node_type_str - Return string describing node_type enum value  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_node_type_str
parameter_list|(
name|enum
name|ibv_node_type
name|node_type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_port_state_str - Return string describing port_state enum value  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_port_state_str
parameter_list|(
name|enum
name|ibv_port_state
name|port_state
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_event_type_str - Return string describing event_type enum value  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|ibv_event_type_str
parameter_list|(
name|enum
name|ibv_event_type
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_open_xrc_domain - open an XRC domain  * Returns a reference to an XRC domain.  *  * @context: Device context  * @fd: descriptor for inode associated with the domain  *     If fd == -1, no inode is associated with the domain; in this ca= se,  *     the only legal value for oflag is O_CREAT  *  * @oflag: oflag values are constructed by OR-ing flags from the following list  *  * O_CREAT  *     If a domain belonging to device named by context is already associated  *     with the inode, this flag has no effect, except as noted under O_EXCL  *     below. Otherwise, a new XRC domain is created and is associated with  *     inode specified by fd.  *  * O_EXCL  *     If O_EXCL and O_CREAT are set, open will fail if a domain associated with  *     the inode exists. The check for the existence of the domain and creation  *     of the domain if it does not exist is atomic with respect to other  *     processes executing open with fd naming the same inode.  */
end_comment

begin_function_decl
name|struct
name|ibv_xrc_domain
modifier|*
name|ibv_open_xrc_domain
parameter_list|(
name|struct
name|ibv_context
modifier|*
name|context
parameter_list|,
name|int
name|fd
parameter_list|,
name|int
name|oflag
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_close_xrc_domain - close an XRC domain  * If this is the last reference, destroys the domain.  *  * @d: reference to XRC domain to close  *  * close is implicitly performed at process exit.  */
end_comment

begin_function_decl
name|int
name|ibv_close_xrc_domain
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_create_xrc_rcv_qp - creates an XRC QP for serving as a receive-side-only QP,  *  * This QP is created in kernel space, and persists until the last process  * registered for the QP calls ibv_unreg_xrc_rcv_qp() (at which time the QP  * is destroyed).  *  * @init_attr: init attributes to use for QP. xrc domain MUST be included here.  *	       All other fields are ignored.  *  * @xrc_rcv_qpn: qp_num of created QP (if success). To be passed to the  *		 remote node (sender). The remote node will use xrc_rcv_qpn  *		 in ibv_post_send when sending to XRC SRQ's on this host  *		 in the same xrc domain.  *  * RETURNS: success (0), or a (negative) error value.  *  * NOTE: this verb also registers the calling user-process with the QP at its  *	 creation time (implicit call to ibv_reg_xrc_rcv_qp), to avoid race  *	 conditions. The creating process will need to call ibv_unreg_xrc_qp()  *	 for the QP to release it from this process.  */
end_comment

begin_function_decl
name|int
name|ibv_create_xrc_rcv_qp
parameter_list|(
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|,
name|uint32_t
modifier|*
name|xrc_rcv_qpn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_modify_xrc_rcv_qp - modifies an xrc_rcv qp.  *  * @xrc_domain: xrc domain the QP belongs to (for verification).  * @xrc_qp_num: The (24 bit) number of the XRC QP.  * @attr: modify-qp attributes. The following fields must be specified:  *		for RESET_2_INIT: qp_state, pkey_index , port, qp_access_flags  *		for INIT_2_RTR:   qp_state, path_mtu, dest_qp_num, rq_psn,  *				  max_dest_rd_atomic, min_rnr_timer, ah_attr  *		The QP need not be brought to RTS for the QP to operate as a  *		receive-only QP.  * @attr_mask:  bitmap indicating which attributes are provided in the attr  *		struct.	Used for validity checking.  *		The following bits must be set:  *		for RESET_2_INIT: IBV_QP_PKEY_INDEX, IBV_QP_PORT,  *				  IBV_QP_ACCESS_FLAGS, IBV_QP_STATE  *		for INIT_2_RTR: IBV_QP_AV, IBV_QP_PATH_MTU, IBV_QP_DEST_QPN,  *				IBV_QP_RQ_PSN, IBV_QP_MAX_DEST_RD_ATOMIC,  *				IBV_QP_MIN_RNR_TIMER, IBV_QP_STATE  *  * RETURNS: success (0), or a (positive) error value.  *  */
end_comment

begin_function_decl
name|int
name|ibv_modify_xrc_rcv_qp
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_query_xrc_rcv_qp - queries an xrc_rcv qp.  *  * @xrc_domain: xrc domain the QP belongs to (for verification).  * @xrc_qp_num: The (24 bit) number of the XRC QP.  * @attr: for returning qp attributes.  * @attr_mask:  bitmap indicating which attributes to return.  * @init_attr: for returning the init attributes  *  * RETURNS: success (0), or a (positive) error value.  *  */
end_comment

begin_function_decl
name|int
name|ibv_query_xrc_rcv_qp
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|,
name|struct
name|ibv_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ibv_qp_init_attr
modifier|*
name|init_attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_reg_xrc_rcv_qp: registers a user process with an XRC QP which serves as  *         a receive-side only QP.  *  * @xrc_domain: xrc domain the QP belongs to (for verification).  * @xrc_qp_num: The (24 bit) number of the XRC QP.  *  * RETURNS: success (0),  *	or error (EINVAL), if:  *		1. There is no such QP_num allocated.  *		2. The QP is allocated, but is not an receive XRC QP  *		3. The XRC QP does not belong to the given domain.  */
end_comment

begin_function_decl
name|int
name|ibv_reg_xrc_rcv_qp
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * ibv_unreg_xrc_rcv_qp: detaches a user process from an XRC QP serving as  *         a receive-side only QP. If as a result, there are no remaining  *	   userspace processes registered for this XRC QP, it is destroyed.  *  * @xrc_domain: xrc domain the QP belongs to (for verification).  * @xrc_qp_num: The (24 bit) number of the XRC QP.  *  * RETURNS: success (0),  *	    or error (EINVAL), if:  *		1. There is no such QP_num allocated.  *		2. The QP is allocated, but is not an XRC QP  *		3. The XRC QP does not belong to the given domain.  * NOTE: There is no reason to return a special code if the QP is destroyed.  *	 The unregister simply succeeds.  */
end_comment

begin_function_decl
name|int
name|ibv_unreg_xrc_rcv_qp
parameter_list|(
name|struct
name|ibv_xrc_domain
modifier|*
name|xrc_domain
parameter_list|,
name|uint32_t
name|xrc_qp_num
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|END_C_DECLS
end_macro

begin_undef
undef|#
directive|undef
name|__attribute_const
end_undef

begin_define
define|#
directive|define
name|ibv_query_port
parameter_list|(
name|context
parameter_list|,
name|port_num
parameter_list|,
name|port_attr
parameter_list|)
define|\
value|___ibv_query_port(context, port_num, port_attr)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* INFINIBAND_VERBS_H */
end_comment

end_unit

