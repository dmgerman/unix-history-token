begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2012 Mellanox Technologies, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX5_ABI_H
end_ifndef

begin_define
define|#
directive|define
name|MLX5_ABI_H
end_define

begin_include
include|#
directive|include
file|<infiniband/kern-abi.h>
end_include

begin_include
include|#
directive|include
file|<infiniband/verbs.h>
end_include

begin_include
include|#
directive|include
file|"mlx5dv.h"
end_include

begin_define
define|#
directive|define
name|MLX5_UVERBS_MIN_ABI_VERSION
value|1
end_define

begin_define
define|#
directive|define
name|MLX5_UVERBS_MAX_ABI_VERSION
value|1
end_define

begin_enum
enum|enum
block|{
name|MLX5_QP_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_QP_FLAG_SCATTER_CQE
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_RWQ_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_NUM_NON_FP_BFREGS_PER_UAR
init|=
literal|2
block|,
name|NUM_BFREGS_PER_UAR
init|=
literal|4
block|,
name|MLX5_MAX_UARS
init|=
literal|1
operator|<<
literal|8
block|,
name|MLX5_MAX_BFREGS
init|=
name|MLX5_MAX_UARS
operator|*
name|MLX5_NUM_NON_FP_BFREGS_PER_UAR
block|,
name|MLX5_DEF_TOT_UUARS
init|=
literal|8
operator|*
name|MLX5_NUM_NON_FP_BFREGS_PER_UAR
block|,
name|MLX5_MED_BFREGS_TSHOLD
init|=
literal|12
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_lib_caps
block|{
name|MLX5_LIB_CAP_4K_UAR
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_alloc_ucontext
block|{
name|struct
name|ibv_get_context
name|ibv_req
decl_stmt|;
name|__u32
name|total_num_uuars
decl_stmt|;
name|__u32
name|num_low_latency_uuars
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u8
name|cqe_version
decl_stmt|;
name|__u8
name|reserved0
decl_stmt|;
name|__u16
name|reserved1
decl_stmt|;
name|__u32
name|reserved2
decl_stmt|;
name|__u64
name|lib_caps
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx5_ib_alloc_ucontext_resp_mask
block|{
name|MLX5_IB_ALLOC_UCONTEXT_RESP_MASK_CORE_CLOCK_OFFSET
init|=
literal|1UL
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_alloc_ucontext_resp
block|{
name|struct
name|ibv_get_context_resp
name|ibv_resp
decl_stmt|;
name|__u32
name|qp_tab_size
decl_stmt|;
name|__u32
name|bf_reg_size
decl_stmt|;
name|__u32
name|tot_uuars
decl_stmt|;
name|__u32
name|cache_line_size
decl_stmt|;
name|__u16
name|max_sq_desc_sz
decl_stmt|;
name|__u16
name|max_rq_desc_sz
decl_stmt|;
name|__u32
name|max_send_wqebb
decl_stmt|;
name|__u32
name|max_recv_wr
decl_stmt|;
name|__u32
name|max_srq_recv_wr
decl_stmt|;
name|__u16
name|num_ports
decl_stmt|;
name|__u16
name|reserved1
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|response_length
decl_stmt|;
name|__u8
name|cqe_version
decl_stmt|;
name|__u8
name|cmds_supp_uhw
decl_stmt|;
name|__u16
name|reserved2
decl_stmt|;
name|__u64
name|hca_core_clock_offset
decl_stmt|;
name|__u32
name|log_uar_size
decl_stmt|;
name|__u32
name|num_uars_per_page
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_ah_resp
block|{
name|struct
name|ibv_create_ah_resp
name|ibv_resp
decl_stmt|;
name|__u32
name|response_length
decl_stmt|;
name|__u8
name|dmac
index|[
name|ETHERNET_LL_SIZE
index|]
decl_stmt|;
name|__u8
name|reserved
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_alloc_pd_resp
block|{
name|struct
name|ibv_alloc_pd_resp
name|ibv_resp
decl_stmt|;
name|__u32
name|pdn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_cq
block|{
name|struct
name|ibv_create_cq
name|ibv_cmd
decl_stmt|;
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|cqe_size
decl_stmt|;
name|__u8
name|cqe_comp_en
decl_stmt|;
name|__u8
name|cqe_comp_res_format
decl_stmt|;
name|__u16
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_cq_resp
block|{
name|struct
name|ibv_create_cq_resp
name|ibv_resp
decl_stmt|;
name|__u32
name|cqn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_srq
block|{
name|struct
name|ibv_create_srq
name|ibv_cmd
decl_stmt|;
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_srq_resp
block|{
name|struct
name|ibv_create_srq_resp
name|ibv_resp
decl_stmt|;
name|__u32
name|srqn
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_srq_ex
block|{
name|struct
name|ibv_create_xsrq
name|ibv_cmd
decl_stmt|;
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
name|__u32
name|uidx
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp_drv_ex
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|sq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|uidx
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
comment|/* SQ buffer address - used for Raw Packet QP */
name|__u64
name|sq_buf_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp_ex
block|{
name|struct
name|ibv_create_qp_ex
name|ibv_cmd
decl_stmt|;
name|struct
name|mlx5_create_qp_drv_ex
name|drv_ex
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp_ex_rss
block|{
name|struct
name|ibv_create_qp_ex
name|ibv_cmd
decl_stmt|;
name|__u64
name|rx_hash_fields_mask
decl_stmt|;
comment|/* enum ibv_rx_hash_fields */
name|__u8
name|rx_hash_function
decl_stmt|;
comment|/* enum ibv_rx_hash_function_flags */
name|__u8
name|rx_key_len
decl_stmt|;
name|__u8
name|reserved
index|[
literal|6
index|]
decl_stmt|;
name|__u8
name|rx_hash_key
index|[
literal|128
index|]
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp_resp_ex
block|{
name|struct
name|ibv_create_qp_resp_ex
name|ibv_resp
decl_stmt|;
name|__u32
name|uuar_index
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp
block|{
name|struct
name|ibv_create_qp
name|ibv_cmd
decl_stmt|;
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|sq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|uidx
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
comment|/* SQ buffer address - used for Raw Packet QP */
name|__u64
name|sq_buf_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp_resp
block|{
name|struct
name|ibv_create_qp_resp
name|ibv_resp
decl_stmt|;
name|__u32
name|uuar_index
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_drv_create_wq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|user_index
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_wq
block|{
name|struct
name|ibv_create_wq
name|ibv_cmd
decl_stmt|;
name|struct
name|mlx5_drv_create_wq
name|drv
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_wq_resp
block|{
name|struct
name|ibv_create_wq_resp
name|ibv_resp
decl_stmt|;
name|__u32
name|response_length
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_modify_wq
block|{
name|struct
name|ibv_modify_wq
name|ibv_cmd
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_rwq_ind_table_resp
block|{
name|struct
name|ibv_create_rwq_ind_table_resp
name|ibv_resp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_rwq_ind_table
block|{
name|struct
name|ibv_destroy_rwq_ind_table
name|ibv_cmd
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_resize_cq
block|{
name|struct
name|ibv_resize_cq
name|ibv_cmd
decl_stmt|;
name|__u64
name|buf_addr
decl_stmt|;
name|__u16
name|cqe_size
decl_stmt|;
name|__u16
name|reserved0
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_resize_cq_resp
block|{
name|struct
name|ibv_resize_cq_resp
name|ibv_resp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_device_ex
block|{
name|struct
name|ibv_query_device_ex
name|ibv_cmd
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_reserved_tso_caps
block|{
name|__u64
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_rss_caps
block|{
name|__u64
name|rx_hash_fields_mask
decl_stmt|;
comment|/* enum ibv_rx_hash_fields */
name|__u8
name|rx_hash_function
decl_stmt|;
comment|/* enum ibv_rx_hash_function_flags */
name|__u8
name|reserved
index|[
literal|7
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_packet_pacing_caps
block|{
name|struct
name|ibv_packet_pacing_caps
name|caps
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_device_ex_resp
block|{
name|struct
name|ibv_query_device_resp_ex
name|ibv_resp
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|response_length
decl_stmt|;
name|struct
name|ibv_tso_caps
name|tso_caps
decl_stmt|;
name|struct
name|mlx5_rss_caps
name|rss_caps
decl_stmt|;
comment|/* vendor data channel */
name|struct
name|mlx5dv_cqe_comp_caps
name|cqe_comp_caps
decl_stmt|;
name|struct
name|mlx5_packet_pacing_caps
name|packet_pacing_caps
decl_stmt|;
name|__u32
name|support_multi_pkt_send_wqe
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX5_ABI_H */
end_comment

end_unit

