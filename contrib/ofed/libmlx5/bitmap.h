begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000, 2011 Mellanox Technology Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|BITMAP_H
end_ifndef

begin_define
define|#
directive|define
name|BITMAP_H
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/ipc.h>
end_include

begin_include
include|#
directive|include
file|<sys/shm.h>
end_include

begin_include
include|#
directive|include
file|<sys/mman.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|"mlx5.h"
end_include

begin_comment
comment|/* Only ia64 requires this */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__ia64__
end_ifdef

begin_define
define|#
directive|define
name|MLX5_SHM_ADDR
value|((void *)0x8000000000000000UL)
end_define

begin_define
define|#
directive|define
name|MLX5_SHMAT_FLAGS
value|(SHM_RND)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|MLX5_SHM_ADDR
value|NULL
end_define

begin_define
define|#
directive|define
name|MLX5_SHMAT_FLAGS
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|BITS_PER_LONG
value|(8 * sizeof(long))
end_define

begin_define
define|#
directive|define
name|BITS_TO_LONGS
parameter_list|(
name|nr
parameter_list|)
value|DIV_ROUND_UP(nr, BITS_PER_LONG)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|HPAGE_SIZE
end_ifndef

begin_define
define|#
directive|define
name|HPAGE_SIZE
value|(2UL * 1024 * 1024)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|MLX5_SHM_LENGTH
value|HPAGE_SIZE
end_define

begin_define
define|#
directive|define
name|MLX5_Q_CHUNK_SIZE
value|32768
end_define

begin_define
define|#
directive|define
name|MLX5_SHM_NUM_REGION
value|64
end_define

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|mlx5_ffz
parameter_list|(
name|uint32_t
name|word
parameter_list|)
block|{
return|return
name|__builtin_ffs
argument_list|(
operator|~
name|word
argument_list|)
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|mlx5_find_first_zero_bit
parameter_list|(
specifier|const
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|uint32_t
name|size
parameter_list|)
block|{
specifier|const
name|unsigned
name|long
modifier|*
name|p
init|=
name|addr
decl_stmt|;
name|uint32_t
name|result
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|tmp
decl_stmt|;
while|while
condition|(
name|size
operator|&
operator|~
operator|(
name|BITS_PER_LONG
operator|-
literal|1
operator|)
condition|)
block|{
name|tmp
operator|=
operator|*
operator|(
name|p
operator|++
operator|)
expr_stmt|;
if|if
condition|(
operator|~
name|tmp
condition|)
goto|goto
name|found
goto|;
name|result
operator|+=
name|BITS_PER_LONG
expr_stmt|;
name|size
operator|-=
name|BITS_PER_LONG
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|size
condition|)
return|return
name|result
return|;
name|tmp
operator|=
operator|(
operator|*
name|p
operator|)
operator||
operator|(
operator|~
literal|0UL
operator|<<
name|size
operator|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|==
operator|(
name|uint32_t
operator|)
operator|~
literal|0UL
condition|)
comment|/* Are any bits zero? */
return|return
name|result
operator|+
name|size
return|;
comment|/* Nope. */
name|found
label|:
return|return
name|result
operator|+
name|mlx5_ffz
argument_list|(
name|tmp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mlx5_set_bit
parameter_list|(
name|unsigned
name|int
name|nr
parameter_list|,
name|unsigned
name|long
modifier|*
name|addr
parameter_list|)
block|{
name|addr
index|[
operator|(
name|nr
operator|/
name|BITS_PER_LONG
operator|)
index|]
operator||=
operator|(
literal|1
operator|<<
operator|(
name|nr
operator|%
name|BITS_PER_LONG
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mlx5_clear_bit
parameter_list|(
name|unsigned
name|int
name|nr
parameter_list|,
name|unsigned
name|long
modifier|*
name|addr
parameter_list|)
block|{
name|addr
index|[
operator|(
name|nr
operator|/
name|BITS_PER_LONG
operator|)
index|]
operator|&=
operator|~
operator|(
literal|1
operator|<<
operator|(
name|nr
operator|%
name|BITS_PER_LONG
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx5_test_bit
parameter_list|(
name|unsigned
name|int
name|nr
parameter_list|,
specifier|const
name|unsigned
name|long
modifier|*
name|addr
parameter_list|)
block|{
return|return
operator|!
operator|!
operator|(
name|addr
index|[
operator|(
name|nr
operator|/
name|BITS_PER_LONG
operator|)
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|nr
operator|%
name|BITS_PER_LONG
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

