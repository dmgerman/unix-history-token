begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: h_bpf.h,v 1.2 2014/07/08 21:44:26 alnsn Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2014 Alexander Nasonov.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS  * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TESTS_NET_BPF_H_BPF_H_
end_ifndef

begin_define
define|#
directive|define
name|_TESTS_NET_BPF_H_BPF_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/mbuf.h>
end_include

begin_include
include|#
directive|include
file|<net/bpf.h>
end_include

begin_include
include|#
directive|include
file|<net/bpfjit.h>
end_include

begin_include
include|#
directive|include
file|<rump/rump.h>
end_include

begin_include
include|#
directive|include
file|<rump/rump_syscalls.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_comment
comment|/* XXX These declarations don't look kosher. */
end_comment

begin_function_decl
name|int
name|rumpns_bpf_validate
parameter_list|(
specifier|const
name|struct
name|bpf_insn
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|rumpns_bpf_filter_ext
parameter_list|(
specifier|const
name|bpf_ctx_t
modifier|*
parameter_list|,
specifier|const
name|struct
name|bpf_insn
modifier|*
parameter_list|,
name|bpf_args_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bpfjit_func_t
name|rumpns_bpfjit_generate_code
parameter_list|(
specifier|const
name|bpf_ctx_t
modifier|*
parameter_list|,
specifier|const
name|struct
name|bpf_insn
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rumpns_bpfjit_free_code
parameter_list|(
name|bpfjit_func_t
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Init mbuf chain with one or two chunks. The first chunk holds  * [pkt, pkt + split] bytes, the second chunk (if it's not empty)  * holds (pkt + split, pkt + pktsize) bytes.  * The function returns (const uint8_t *)mb1.  */
end_comment

begin_function
specifier|static
specifier|inline
specifier|const
name|uint8_t
modifier|*
name|init_mchain2
parameter_list|(
name|struct
name|mbuf
modifier|*
name|mb1
parameter_list|,
name|struct
name|mbuf
modifier|*
name|mb2
parameter_list|,
name|unsigned
name|char
name|pkt
index|[]
parameter_list|,
name|size_t
name|pktsize
parameter_list|,
name|size_t
name|split
parameter_list|)
block|{
operator|(
name|void
operator|)
name|memset
argument_list|(
name|mb1
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|mb1
argument_list|)
argument_list|)
expr_stmt|;
name|mb1
operator|->
name|m_data
operator|=
operator|(
name|char
operator|*
operator|)
name|pkt
expr_stmt|;
name|mb1
operator|->
name|m_next
operator|=
operator|(
name|split
operator|<
name|pktsize
operator|)
condition|?
name|mb2
else|:
name|NULL
expr_stmt|;
name|mb1
operator|->
name|m_len
operator|=
operator|(
name|split
operator|<
name|pktsize
operator|)
condition|?
name|split
else|:
name|pktsize
expr_stmt|;
if|if
condition|(
name|split
operator|<
name|pktsize
condition|)
block|{
operator|(
name|void
operator|)
name|memset
argument_list|(
name|mb2
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|mb2
argument_list|)
argument_list|)
expr_stmt|;
name|mb2
operator|->
name|m_next
operator|=
name|NULL
expr_stmt|;
name|mb2
operator|->
name|m_data
operator|=
operator|(
name|char
operator|*
operator|)
operator|&
name|pkt
index|[
name|split
index|]
expr_stmt|;
name|mb2
operator|->
name|m_len
operator|=
name|pktsize
operator|-
name|split
expr_stmt|;
block|}
return|return
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|mb1
return|;
block|}
end_function

begin_comment
comment|/*  * Compile and run a filter program.  */
end_comment

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|exec_prog
parameter_list|(
name|struct
name|bpf_insn
modifier|*
name|insns
parameter_list|,
name|size_t
name|insn_count
parameter_list|,
name|unsigned
name|char
name|pkt
index|[]
parameter_list|,
name|size_t
name|pktsize
parameter_list|)
block|{
name|bpfjit_func_t
name|fn
decl_stmt|;
name|bpf_args_t
name|args
decl_stmt|;
name|unsigned
name|int
name|res
decl_stmt|;
name|args
operator|.
name|pkt
operator|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|pkt
expr_stmt|;
name|args
operator|.
name|buflen
operator|=
name|pktsize
expr_stmt|;
name|args
operator|.
name|wirelen
operator|=
name|pktsize
expr_stmt|;
name|rump_schedule
argument_list|()
expr_stmt|;
name|fn
operator|=
name|rumpns_bpfjit_generate_code
argument_list|(
name|NULL
argument_list|,
name|insns
argument_list|,
name|insn_count
argument_list|)
expr_stmt|;
name|rump_unschedule
argument_list|()
expr_stmt|;
name|res
operator|=
name|fn
argument_list|(
name|NULL
argument_list|,
operator|&
name|args
argument_list|)
expr_stmt|;
name|rump_schedule
argument_list|()
expr_stmt|;
name|rumpns_bpfjit_free_code
argument_list|(
name|fn
argument_list|)
expr_stmt|;
name|rump_unschedule
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_comment
comment|/*  * Interpret a filter program with mbuf chain passed to bpf_filter_ext().  */
end_comment

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|interp_prog_mchain2
parameter_list|(
name|struct
name|bpf_insn
modifier|*
name|insns
parameter_list|,
name|unsigned
name|char
name|pkt
index|[]
parameter_list|,
name|size_t
name|pktsize
parameter_list|,
name|size_t
name|split
parameter_list|)
block|{
name|uint32_t
name|mem
index|[
name|BPF_MEMWORDS
index|]
decl_stmt|;
name|struct
name|mbuf
name|mb1
decl_stmt|,
name|mb2
decl_stmt|;
name|bpf_args_t
name|args
decl_stmt|;
name|unsigned
name|int
name|res
decl_stmt|;
name|args
operator|.
name|pkt
operator|=
name|init_mchain2
argument_list|(
operator|&
name|mb1
argument_list|,
operator|&
name|mb2
argument_list|,
name|pkt
argument_list|,
name|pktsize
argument_list|,
name|split
argument_list|)
expr_stmt|;
name|args
operator|.
name|buflen
operator|=
literal|0
expr_stmt|;
name|args
operator|.
name|wirelen
operator|=
name|pktsize
expr_stmt|;
name|args
operator|.
name|mem
operator|=
name|mem
expr_stmt|;
name|rump_schedule
argument_list|()
expr_stmt|;
name|res
operator|=
name|rumpns_bpf_filter_ext
argument_list|(
name|NULL
argument_list|,
name|insns
argument_list|,
operator|&
name|args
argument_list|)
expr_stmt|;
name|rump_unschedule
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_comment
comment|/*  * Compile and run a filter program with mbuf chain passed to compiled function.  */
end_comment

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|exec_prog_mchain2
parameter_list|(
name|struct
name|bpf_insn
modifier|*
name|insns
parameter_list|,
name|size_t
name|insn_count
parameter_list|,
name|unsigned
name|char
name|pkt
index|[]
parameter_list|,
name|size_t
name|pktsize
parameter_list|,
name|size_t
name|split
parameter_list|)
block|{
name|bpfjit_func_t
name|fn
decl_stmt|;
name|struct
name|mbuf
name|mb1
decl_stmt|,
name|mb2
decl_stmt|;
name|bpf_args_t
name|args
decl_stmt|;
name|unsigned
name|int
name|res
decl_stmt|;
name|args
operator|.
name|pkt
operator|=
name|init_mchain2
argument_list|(
operator|&
name|mb1
argument_list|,
operator|&
name|mb2
argument_list|,
name|pkt
argument_list|,
name|pktsize
argument_list|,
name|split
argument_list|)
expr_stmt|;
name|args
operator|.
name|buflen
operator|=
literal|0
expr_stmt|;
name|args
operator|.
name|wirelen
operator|=
name|pktsize
expr_stmt|;
name|rump_schedule
argument_list|()
expr_stmt|;
name|fn
operator|=
name|rumpns_bpfjit_generate_code
argument_list|(
name|NULL
argument_list|,
name|insns
argument_list|,
name|insn_count
argument_list|)
expr_stmt|;
name|rump_unschedule
argument_list|()
expr_stmt|;
name|res
operator|=
name|fn
argument_list|(
name|NULL
argument_list|,
operator|&
name|args
argument_list|)
expr_stmt|;
name|rump_schedule
argument_list|()
expr_stmt|;
name|rumpns_bpfjit_free_code
argument_list|(
name|fn
argument_list|)
expr_stmt|;
name|rump_unschedule
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|prog_validate
parameter_list|(
name|struct
name|bpf_insn
modifier|*
name|insns
parameter_list|,
name|size_t
name|insn_count
parameter_list|)
block|{
name|bool
name|res
decl_stmt|;
name|rump_schedule
argument_list|()
expr_stmt|;
name|res
operator|=
name|rumpns_bpf_validate
argument_list|(
name|insns
argument_list|,
name|insn_count
argument_list|)
expr_stmt|;
name|rump_unschedule
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _TESTS_NET_BPF_H_BPF_H_ */
end_comment

end_unit

