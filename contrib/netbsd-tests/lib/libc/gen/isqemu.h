begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: isqemu.h,v 1.4 2015/01/03 14:21:05 gson Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2013 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Christos Zoulas.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<err.h>
end_include

begin_function
specifier|static
name|__inline
name|bool
name|isQEMU
parameter_list|(
name|void
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__FreeBSD__
name|char
modifier|*
name|vm_guest_name_buf
decl_stmt|;
name|size_t
name|len
decl_stmt|;
name|bool
name|is_vm
decl_stmt|;
if|if
condition|(
name|sysctlbyname
argument_list|(
literal|"kern.vm_guest"
argument_list|,
name|NULL
argument_list|,
operator|&
name|len
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|err
argument_list|(
name|EXIT_FAILURE
argument_list|,
literal|"sysctl"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|vm_guest_name_buf
operator|=
name|malloc
argument_list|(
name|len
argument_list|)
operator|)
operator|==
name|NULL
condition|)
name|err
argument_list|(
name|EXIT_FAILURE
argument_list|,
literal|"malloc"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sysctlbyname
argument_list|(
literal|"kern.vm_guest"
argument_list|,
name|vm_guest_name_buf
argument_list|,
operator|&
name|len
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|err
argument_list|(
name|EXIT_FAILURE
argument_list|,
literal|"sysctl"
argument_list|)
expr_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
name|vm_guest_name_buf
argument_list|,
literal|"none"
argument_list|)
operator|==
literal|0
condition|)
name|is_vm
operator|=
name|false
expr_stmt|;
else|else
name|is_vm
operator|=
name|true
expr_stmt|;
name|free
argument_list|(
name|vm_guest_name_buf
argument_list|)
expr_stmt|;
return|return
name|is_vm
return|;
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
name|char
name|name
index|[
literal|1024
index|]
decl_stmt|;
name|size_t
name|len
init|=
sizeof|sizeof
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysctlbyname
argument_list|(
literal|"machdep.cpu_brand"
argument_list|,
name|name
argument_list|,
operator|&
name|len
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|errno
operator|==
name|ENOENT
condition|)
return|return
name|false
return|;
name|err
argument_list|(
name|EXIT_FAILURE
argument_list|,
literal|"sysctl"
argument_list|)
expr_stmt|;
block|}
return|return
name|strstr
argument_list|(
name|name
argument_list|,
literal|"QEMU"
argument_list|)
operator|!=
name|NULL
return|;
else|#
directive|else
return|return
name|false
return|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|TEST
end_ifdef

begin_function
name|int
name|main
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|isQEMU
argument_list|()
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

