begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $NetBSD: h_macros.h,v 1.9 2013/05/17 15:42:09 christos Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2008, 2009 The NetBSD Foundation, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SRC_TESTS_H_MACROS_H_
end_ifndef

begin_define
define|#
directive|define
name|SRC_TESTS_H_MACROS_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<atf-c.h>
end_include

begin_define
define|#
directive|define
name|REQUIRE_LIBC
parameter_list|(
name|x
parameter_list|,
name|v
parameter_list|)
define|\
value|ATF_REQUIRE_MSG((x) != (v), "%s: %s", #x, strerror(errno))
end_define

begin_define
define|#
directive|define
name|CHECK_LIBC
parameter_list|(
name|x
parameter_list|,
name|v
parameter_list|)
define|\
value|ATF_CHECK_MSG((x) != (v), "%s: %s", #x, strerror(errno))
end_define

begin_define
define|#
directive|define
name|RL
parameter_list|(
name|x
parameter_list|)
value|REQUIRE_LIBC(x, -1)
end_define

begin_define
define|#
directive|define
name|RZ
parameter_list|(
name|x
parameter_list|)
define|\
value|do {									\ 	int RZ_rv = x;							\ 	ATF_REQUIRE_MSG(RZ_rv == 0, "%s: %s", #x, strerror(RZ_rv));	\ } while (
comment|/*CONSTCOND*/
value|0)
end_define

begin_decl_stmt
specifier|static
name|__inline
name|__printflike
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
name|void
name|atf_tc_fail_errno
argument_list|(
specifier|const
name|char
operator|*
name|fmt
argument_list|,
operator|...
argument_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|char
name|buf
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|sverrno
init|=
name|errno
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|vsnprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
name|fmt
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|strlcat
argument_list|(
name|buf
argument_list|,
literal|": "
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|strlcat
argument_list|(
name|buf
argument_list|,
name|strerror
argument_list|(
name|sverrno
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|atf_tc_fail
argument_list|(
literal|"%s"
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
specifier|static
name|__inline
name|void
name|tests_makegarbage
parameter_list|(
name|void
modifier|*
name|space
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|uint16_t
modifier|*
name|sb
init|=
name|space
decl_stmt|;
name|uint16_t
name|randval
decl_stmt|;
while|while
condition|(
name|len
operator|>=
sizeof|sizeof
argument_list|(
name|randval
argument_list|)
condition|)
block|{
operator|*
name|sb
operator|++
operator|=
operator|(
name|random
argument_list|()
operator|&
literal|0xffff
operator|)
expr_stmt|;
name|len
operator|-=
sizeof|sizeof
argument_list|(
operator|*
name|sb
argument_list|)
expr_stmt|;
block|}
name|randval
operator|=
operator|(
name|uint16_t
operator|)
name|random
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
name|sb
argument_list|,
operator|&
name|randval
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

