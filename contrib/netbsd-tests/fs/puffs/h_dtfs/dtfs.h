begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: dtfs.h,v 1.2 2010/07/14 13:09:52 pooka Exp $	*/
end_comment

begin_comment
comment|/*  * Copyright (c) 2006  Antti Kantee.  All Rights Reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS  * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DTFS_H_
end_ifndef

begin_define
define|#
directive|define
name|DTFS_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<puffs.h>
end_include

begin_expr_stmt
name|PUFFSOP_PROTOS
argument_list|(
name|dtfs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|int
name|dtfs_domount
parameter_list|(
name|struct
name|puffs_usermount
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|DTFS_BLOCKSHIFT
value|(12)
end_define

begin_define
define|#
directive|define
name|DTFS_BLOCKSIZE
value|(1<<DTFS_BLOCKSHIFT)
end_define

begin_define
define|#
directive|define
name|ROUNDUP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a)& ((b)-1))
end_define

begin_define
define|#
directive|define
name|BLOCKNUM
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a)& ~((1<<(b))-1))>> (b))
end_define

begin_struct_decl
struct_decl|struct
name|dtfs_fid
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|dtfs_mount
block|{
name|ino_t
name|dtm_nextfileid
decl_stmt|;
comment|/* running number for file id	*/
name|size_t
name|dtm_fsizes
decl_stmt|;
comment|/* sum of file sizes in bytes	*/
name|fsfilcnt_t
name|dtm_nfiles
decl_stmt|;
comment|/* number of files		*/
name|LIST_HEAD
argument_list|(
argument_list|,
argument|dtfs_poll
argument_list|)
name|dtm_pollent
expr_stmt|;
name|int
name|dtm_needwakeup
decl_stmt|;
name|vm_prot_t
name|dtm_allowprot
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dtfs_file
block|{
union|union
block|{
struct|struct
block|{
name|uint8_t
modifier|*
modifier|*
name|blocks
decl_stmt|;
name|size_t
name|numblocks
decl_stmt|;
name|size_t
name|datalen
decl_stmt|;
block|}
name|reg
struct|;
struct|struct
block|{
name|struct
name|puffs_node
modifier|*
name|dotdot
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|dtfs_dirent
argument_list|)
name|dirents
expr_stmt|;
block|}
name|dir
struct|;
struct|struct
block|{
name|char
modifier|*
name|target
decl_stmt|;
block|}
name|link
struct|;
block|}
name|u
union|;
define|#
directive|define
name|df_blocks
value|u.reg.blocks
define|#
directive|define
name|df_numblocks
value|u.reg.numblocks
define|#
directive|define
name|df_datalen
value|u.reg.datalen
define|#
directive|define
name|df_dotdot
value|u.dir.dotdot
define|#
directive|define
name|df_dirents
value|u.dir.dirents
define|#
directive|define
name|df_linktarget
value|u.link.target
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dtfs_dirent
block|{
name|struct
name|puffs_node
modifier|*
name|dfd_node
decl_stmt|;
name|struct
name|puffs_node
modifier|*
name|dfd_parent
decl_stmt|;
name|char
modifier|*
name|dfd_name
decl_stmt|;
name|size_t
name|dfd_namelen
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|dtfs_dirent
argument_list|)
name|dfd_entries
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dtfs_fid
block|{
name|struct
name|puffs_node
modifier|*
name|dfid_addr
decl_stmt|;
comment|/* best^Wsome-effort extra sanity check */
name|ino_t
name|dfid_fileid
decl_stmt|;
name|u_long
name|dfid_gen
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DTFS_FIDSIZE
value|(sizeof(struct dtfs_fid))
end_define

begin_struct
struct|struct
name|dtfs_poll
block|{
name|struct
name|puffs_cc
modifier|*
name|dp_pcc
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|dtfs_poll
argument_list|)
name|dp_entries
expr_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|puffs_node
modifier|*
name|dtfs_genfile
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|,
specifier|const
name|struct
name|puffs_cn
modifier|*
parameter_list|,
name|enum
name|vtype
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|dtfs_file
modifier|*
name|dtfs_newdir
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|dtfs_file
modifier|*
name|dtfs_newfile
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|dtfs_dirent
modifier|*
name|dtfs_dirgetnth
parameter_list|(
name|struct
name|dtfs_file
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|dtfs_dirent
modifier|*
name|dtfs_dirgetbyname
parameter_list|(
name|struct
name|dtfs_file
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dtfs_nukenode
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|,
name|struct
name|puffs_node
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dtfs_freenode
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dtfs_setsize
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|,
name|off_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dtfs_adddent
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|,
name|struct
name|dtfs_dirent
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dtfs_removedent
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|,
name|struct
name|dtfs_dirent
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dtfs_baseattrs
parameter_list|(
name|struct
name|vattr
modifier|*
parameter_list|,
name|enum
name|vtype
parameter_list|,
name|ino_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dtfs_updatetimes
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|dtfs_isunder
parameter_list|(
name|struct
name|puffs_node
modifier|*
parameter_list|,
name|struct
name|puffs_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|DTFS_CTOF
parameter_list|(
name|a
parameter_list|)
value|((struct dtfs_file *)(((struct puffs_node *)a)->pn_data))
end_define

begin_define
define|#
directive|define
name|DTFS_PTOF
parameter_list|(
name|a
parameter_list|)
value|((struct dtfs_file *)(a->pn_data))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DTFS_H_ */
end_comment

end_unit

