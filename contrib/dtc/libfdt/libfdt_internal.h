begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_LIBFDT_INTERNAL_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBFDT_INTERNAL_H
end_define

begin_comment
comment|/*  * libfdt - Flat Device Tree manipulation  * Copyright (C) 2006 David Gibson, IBM Corporation.  *  * libfdt is dual licensed: you can use it either under the terms of  * the GPL, or the BSD license, at your option.  *  *  a) This library is free software; you can redistribute it and/or  *     modify it under the terms of the GNU General Public License as  *     published by the Free Software Foundation; either version 2 of the  *     License, or (at your option) any later version.  *  *     This library is distributed in the hope that it will be useful,  *     but WITHOUT ANY WARRANTY; without even the implied warranty of  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *     GNU General Public License for more details.  *  *     You should have received a copy of the GNU General Public  *     License along with this library; if not, write to the Free  *     Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,  *     MA 02110-1301 USA  *  * Alternatively,  *  *  b) Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *     1. Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *     2. Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  *     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND  *     CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,  *     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  *     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR  *     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *     SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  *     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  *     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  *     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR  *     OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  *     EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<fdt.h>
end_include

begin_define
define|#
directive|define
name|FDT_ALIGN
parameter_list|(
name|x
parameter_list|,
name|a
parameter_list|)
value|(((x) + (a) - 1)& ~((a) - 1))
end_define

begin_define
define|#
directive|define
name|FDT_TAGALIGN
parameter_list|(
name|x
parameter_list|)
value|(FDT_ALIGN((x), FDT_TAGSIZE))
end_define

begin_define
define|#
directive|define
name|FDT_CHECK_HEADER
parameter_list|(
name|fdt
parameter_list|)
define|\
value|{ \ 		int err; \ 		if ((err = fdt_check_header(fdt)) != 0) \ 			return err; \ 	}
end_define

begin_function_decl
name|int
name|_fdt_check_node_offset
parameter_list|(
specifier|const
name|void
modifier|*
name|fdt
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_fdt_check_prop_offset
parameter_list|(
specifier|const
name|void
modifier|*
name|fdt
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|_fdt_find_string
parameter_list|(
specifier|const
name|char
modifier|*
name|strtab
parameter_list|,
name|int
name|tabsize
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_fdt_node_end_offset
parameter_list|(
name|void
modifier|*
name|fdt
parameter_list|,
name|int
name|nodeoffset
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
specifier|const
name|void
modifier|*
name|_fdt_offset_ptr
parameter_list|(
specifier|const
name|void
modifier|*
name|fdt
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
specifier|const
name|char
operator|*
operator|)
name|fdt
operator|+
name|fdt_off_dt_struct
argument_list|(
name|fdt
argument_list|)
operator|+
name|offset
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|_fdt_offset_ptr_w
parameter_list|(
name|void
modifier|*
name|fdt
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
name|_fdt_offset_ptr
argument_list|(
name|fdt
argument_list|,
name|offset
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
specifier|const
name|struct
name|fdt_reserve_entry
modifier|*
name|_fdt_mem_rsv
parameter_list|(
specifier|const
name|void
modifier|*
name|fdt
parameter_list|,
name|int
name|n
parameter_list|)
block|{
specifier|const
name|struct
name|fdt_reserve_entry
modifier|*
name|rsv_table
init|=
operator|(
specifier|const
expr|struct
name|fdt_reserve_entry
operator|*
operator|)
operator|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|fdt
operator|+
name|fdt_off_mem_rsvmap
argument_list|(
name|fdt
argument_list|)
operator|)
decl_stmt|;
return|return
name|rsv_table
operator|+
name|n
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|fdt_reserve_entry
modifier|*
name|_fdt_mem_rsv_w
parameter_list|(
name|void
modifier|*
name|fdt
parameter_list|,
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
name|_fdt_mem_rsv
argument_list|(
name|fdt
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|FDT_SW_MAGIC
value|(~FDT_MAGIC)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBFDT_INTERNAL_H */
end_comment

end_unit

