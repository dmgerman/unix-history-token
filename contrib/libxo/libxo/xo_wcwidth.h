begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * This is an implementation of wcwidth() and wcswidth() (defined in  * IEEE Std 1002.1-2001) for Unicode.  *  * http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html  * http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html  *  * In fixed-width output devices, Latin characters all occupy a single  * "cell" position of equal width, whereas ideographic CJK characters  * occupy two such cells. Interoperability between terminal-line  * applications and (teletype-style) character terminals using the  * UTF-8 encoding requires agreement on which character should advance  * the cursor by how many cell positions. No established formal  * standards exist at present on which Unicode character shall occupy  * how many cell positions on character terminals. These routines are  * a first attempt of defining such behavior based on simple rules  * applied to data provided by the Unicode Consortium.  *  * For some graphical characters, the Unicode standard explicitly  * defines a character-cell width via the definition of the East Asian  * FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.  * In all these cases, there is no ambiguity about which width a  * terminal shall use. For characters in the East Asian Ambiguous (A)  * class, the width choice depends purely on a preference of backward  * compatibility with either historic CJK or Western practice.  * Choosing single-width for these characters is easy to justify as  * the appropriate long-term solution, as the CJK practice of  * displaying these characters as double-width comes from historic  * implementation simplicity (8-bit encoded characters were displayed  * single-width and 16-bit ones double-width, even for Greek,  * Cyrillic, etc.) and not any typographic considerations.  *  * Much less clear is the choice of width for the Not East Asian  * (Neutral) class. Existing practice does not dictate a width for any  * of these characters. It would nevertheless make sense  * typographically to allocate two character cells to characters such  * as for instance EM SPACE or VOLUME INTEGRAL, which cannot be  * represented adequately with a single-width glyph. The following  * routines at present merely assign a single-cell width to all  * neutral characters, in the interest of simplicity. This is not  * entirely satisfactory and should be reconsidered before  * establishing a formal standard in this area. At the moment, the  * decision which Not East Asian (Neutral) characters should be  * represented by double-width glyphs cannot yet be answered by  * applying a simple rule from the Unicode database content. Setting  * up a proper standard for the behavior of UTF-8 character terminals  * will require a careful analysis not only of each Unicode character,  * but also of each presentation form, something the author of these  * routines has avoided to do so far.  *  * http://www.unicode.org/unicode/reports/tr11/  *  * Markus Kuhn -- 2007-05-26 (Unicode 5.0)  *  * Permission to use, copy, modify, and distribute this software  * for any purpose and without fee is hereby granted. The author  * disclaims all warranties with regard to this software.  *  * Latest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c  */
end_comment

begin_include
include|#
directive|include
file|<wchar.h>
end_include

begin_struct
struct|struct
name|interval
block|{
name|int
name|first
decl_stmt|;
name|int
name|last
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* auxiliary function for binary search in interval table */
end_comment

begin_function
specifier|static
name|int
name|xo_bisearch
parameter_list|(
name|wchar_t
name|ucs
parameter_list|,
specifier|const
name|struct
name|interval
modifier|*
name|table
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|mid
decl_stmt|;
if|if
condition|(
name|ucs
operator|<
name|table
index|[
literal|0
index|]
operator|.
name|first
operator|||
name|ucs
operator|>
name|table
index|[
name|max
index|]
operator|.
name|last
condition|)
return|return
literal|0
return|;
while|while
condition|(
name|max
operator|>=
name|min
condition|)
block|{
name|mid
operator|=
operator|(
name|min
operator|+
name|max
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|ucs
operator|>
name|table
index|[
name|mid
index|]
operator|.
name|last
condition|)
name|min
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|ucs
operator|<
name|table
index|[
name|mid
index|]
operator|.
name|first
condition|)
name|max
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* The following two functions define the column width of an ISO 10646  * character as follows:  *  *    - The null character (U+0000) has a column width of 0.  *  *    - Other C0/C1 control characters and DEL will lead to a return  *      value of -1.  *  *    - Non-spacing and enclosing combining characters (general  *      category code Mn or Me in the Unicode database) have a  *      column width of 0.  *  *    - SOFT HYPHEN (U+00AD) has a column width of 1.  *  *    - Other format characters (general category code Cf in the Unicode  *      database) and ZERO WIDTH SPACE (U+200B) have a column width of 0.  *  *    - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)  *      have a column width of 0.  *  *    - Spacing characters in the East Asian Wide (W) or East Asian  *      Full-width (F) category as defined in Unicode Technical  *      Report #11 have a column width of 2.  *  *    - All remaining characters (including all printable  *      ISO 8859-1 and WGL4 characters, Unicode control characters,  *      etc.) have a column width of 1.  *  * This implementation assumes that wchar_t characters are encoded  * in ISO 10646.  */
end_comment

begin_function
specifier|static
name|int
name|xo_wcwidth
parameter_list|(
name|wchar_t
name|ucs
parameter_list|)
block|{
comment|/* sorted list of non-overlapping intervals of non-spacing characters */
comment|/* generated by "uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c" */
specifier|static
specifier|const
name|struct
name|interval
name|combining
index|[]
init|=
block|{
block|{
literal|0x0300
block|,
literal|0x036F
block|}
block|,
block|{
literal|0x0483
block|,
literal|0x0486
block|}
block|,
block|{
literal|0x0488
block|,
literal|0x0489
block|}
block|,
block|{
literal|0x0591
block|,
literal|0x05BD
block|}
block|,
block|{
literal|0x05BF
block|,
literal|0x05BF
block|}
block|,
block|{
literal|0x05C1
block|,
literal|0x05C2
block|}
block|,
block|{
literal|0x05C4
block|,
literal|0x05C5
block|}
block|,
block|{
literal|0x05C7
block|,
literal|0x05C7
block|}
block|,
block|{
literal|0x0600
block|,
literal|0x0603
block|}
block|,
block|{
literal|0x0610
block|,
literal|0x0615
block|}
block|,
block|{
literal|0x064B
block|,
literal|0x065E
block|}
block|,
block|{
literal|0x0670
block|,
literal|0x0670
block|}
block|,
block|{
literal|0x06D6
block|,
literal|0x06E4
block|}
block|,
block|{
literal|0x06E7
block|,
literal|0x06E8
block|}
block|,
block|{
literal|0x06EA
block|,
literal|0x06ED
block|}
block|,
block|{
literal|0x070F
block|,
literal|0x070F
block|}
block|,
block|{
literal|0x0711
block|,
literal|0x0711
block|}
block|,
block|{
literal|0x0730
block|,
literal|0x074A
block|}
block|,
block|{
literal|0x07A6
block|,
literal|0x07B0
block|}
block|,
block|{
literal|0x07EB
block|,
literal|0x07F3
block|}
block|,
block|{
literal|0x0901
block|,
literal|0x0902
block|}
block|,
block|{
literal|0x093C
block|,
literal|0x093C
block|}
block|,
block|{
literal|0x0941
block|,
literal|0x0948
block|}
block|,
block|{
literal|0x094D
block|,
literal|0x094D
block|}
block|,
block|{
literal|0x0951
block|,
literal|0x0954
block|}
block|,
block|{
literal|0x0962
block|,
literal|0x0963
block|}
block|,
block|{
literal|0x0981
block|,
literal|0x0981
block|}
block|,
block|{
literal|0x09BC
block|,
literal|0x09BC
block|}
block|,
block|{
literal|0x09C1
block|,
literal|0x09C4
block|}
block|,
block|{
literal|0x09CD
block|,
literal|0x09CD
block|}
block|,
block|{
literal|0x09E2
block|,
literal|0x09E3
block|}
block|,
block|{
literal|0x0A01
block|,
literal|0x0A02
block|}
block|,
block|{
literal|0x0A3C
block|,
literal|0x0A3C
block|}
block|,
block|{
literal|0x0A41
block|,
literal|0x0A42
block|}
block|,
block|{
literal|0x0A47
block|,
literal|0x0A48
block|}
block|,
block|{
literal|0x0A4B
block|,
literal|0x0A4D
block|}
block|,
block|{
literal|0x0A70
block|,
literal|0x0A71
block|}
block|,
block|{
literal|0x0A81
block|,
literal|0x0A82
block|}
block|,
block|{
literal|0x0ABC
block|,
literal|0x0ABC
block|}
block|,
block|{
literal|0x0AC1
block|,
literal|0x0AC5
block|}
block|,
block|{
literal|0x0AC7
block|,
literal|0x0AC8
block|}
block|,
block|{
literal|0x0ACD
block|,
literal|0x0ACD
block|}
block|,
block|{
literal|0x0AE2
block|,
literal|0x0AE3
block|}
block|,
block|{
literal|0x0B01
block|,
literal|0x0B01
block|}
block|,
block|{
literal|0x0B3C
block|,
literal|0x0B3C
block|}
block|,
block|{
literal|0x0B3F
block|,
literal|0x0B3F
block|}
block|,
block|{
literal|0x0B41
block|,
literal|0x0B43
block|}
block|,
block|{
literal|0x0B4D
block|,
literal|0x0B4D
block|}
block|,
block|{
literal|0x0B56
block|,
literal|0x0B56
block|}
block|,
block|{
literal|0x0B82
block|,
literal|0x0B82
block|}
block|,
block|{
literal|0x0BC0
block|,
literal|0x0BC0
block|}
block|,
block|{
literal|0x0BCD
block|,
literal|0x0BCD
block|}
block|,
block|{
literal|0x0C3E
block|,
literal|0x0C40
block|}
block|,
block|{
literal|0x0C46
block|,
literal|0x0C48
block|}
block|,
block|{
literal|0x0C4A
block|,
literal|0x0C4D
block|}
block|,
block|{
literal|0x0C55
block|,
literal|0x0C56
block|}
block|,
block|{
literal|0x0CBC
block|,
literal|0x0CBC
block|}
block|,
block|{
literal|0x0CBF
block|,
literal|0x0CBF
block|}
block|,
block|{
literal|0x0CC6
block|,
literal|0x0CC6
block|}
block|,
block|{
literal|0x0CCC
block|,
literal|0x0CCD
block|}
block|,
block|{
literal|0x0CE2
block|,
literal|0x0CE3
block|}
block|,
block|{
literal|0x0D41
block|,
literal|0x0D43
block|}
block|,
block|{
literal|0x0D4D
block|,
literal|0x0D4D
block|}
block|,
block|{
literal|0x0DCA
block|,
literal|0x0DCA
block|}
block|,
block|{
literal|0x0DD2
block|,
literal|0x0DD4
block|}
block|,
block|{
literal|0x0DD6
block|,
literal|0x0DD6
block|}
block|,
block|{
literal|0x0E31
block|,
literal|0x0E31
block|}
block|,
block|{
literal|0x0E34
block|,
literal|0x0E3A
block|}
block|,
block|{
literal|0x0E47
block|,
literal|0x0E4E
block|}
block|,
block|{
literal|0x0EB1
block|,
literal|0x0EB1
block|}
block|,
block|{
literal|0x0EB4
block|,
literal|0x0EB9
block|}
block|,
block|{
literal|0x0EBB
block|,
literal|0x0EBC
block|}
block|,
block|{
literal|0x0EC8
block|,
literal|0x0ECD
block|}
block|,
block|{
literal|0x0F18
block|,
literal|0x0F19
block|}
block|,
block|{
literal|0x0F35
block|,
literal|0x0F35
block|}
block|,
block|{
literal|0x0F37
block|,
literal|0x0F37
block|}
block|,
block|{
literal|0x0F39
block|,
literal|0x0F39
block|}
block|,
block|{
literal|0x0F71
block|,
literal|0x0F7E
block|}
block|,
block|{
literal|0x0F80
block|,
literal|0x0F84
block|}
block|,
block|{
literal|0x0F86
block|,
literal|0x0F87
block|}
block|,
block|{
literal|0x0F90
block|,
literal|0x0F97
block|}
block|,
block|{
literal|0x0F99
block|,
literal|0x0FBC
block|}
block|,
block|{
literal|0x0FC6
block|,
literal|0x0FC6
block|}
block|,
block|{
literal|0x102D
block|,
literal|0x1030
block|}
block|,
block|{
literal|0x1032
block|,
literal|0x1032
block|}
block|,
block|{
literal|0x1036
block|,
literal|0x1037
block|}
block|,
block|{
literal|0x1039
block|,
literal|0x1039
block|}
block|,
block|{
literal|0x1058
block|,
literal|0x1059
block|}
block|,
block|{
literal|0x1160
block|,
literal|0x11FF
block|}
block|,
block|{
literal|0x135F
block|,
literal|0x135F
block|}
block|,
block|{
literal|0x1712
block|,
literal|0x1714
block|}
block|,
block|{
literal|0x1732
block|,
literal|0x1734
block|}
block|,
block|{
literal|0x1752
block|,
literal|0x1753
block|}
block|,
block|{
literal|0x1772
block|,
literal|0x1773
block|}
block|,
block|{
literal|0x17B4
block|,
literal|0x17B5
block|}
block|,
block|{
literal|0x17B7
block|,
literal|0x17BD
block|}
block|,
block|{
literal|0x17C6
block|,
literal|0x17C6
block|}
block|,
block|{
literal|0x17C9
block|,
literal|0x17D3
block|}
block|,
block|{
literal|0x17DD
block|,
literal|0x17DD
block|}
block|,
block|{
literal|0x180B
block|,
literal|0x180D
block|}
block|,
block|{
literal|0x18A9
block|,
literal|0x18A9
block|}
block|,
block|{
literal|0x1920
block|,
literal|0x1922
block|}
block|,
block|{
literal|0x1927
block|,
literal|0x1928
block|}
block|,
block|{
literal|0x1932
block|,
literal|0x1932
block|}
block|,
block|{
literal|0x1939
block|,
literal|0x193B
block|}
block|,
block|{
literal|0x1A17
block|,
literal|0x1A18
block|}
block|,
block|{
literal|0x1B00
block|,
literal|0x1B03
block|}
block|,
block|{
literal|0x1B34
block|,
literal|0x1B34
block|}
block|,
block|{
literal|0x1B36
block|,
literal|0x1B3A
block|}
block|,
block|{
literal|0x1B3C
block|,
literal|0x1B3C
block|}
block|,
block|{
literal|0x1B42
block|,
literal|0x1B42
block|}
block|,
block|{
literal|0x1B6B
block|,
literal|0x1B73
block|}
block|,
block|{
literal|0x1DC0
block|,
literal|0x1DCA
block|}
block|,
block|{
literal|0x1DFE
block|,
literal|0x1DFF
block|}
block|,
block|{
literal|0x200B
block|,
literal|0x200F
block|}
block|,
block|{
literal|0x202A
block|,
literal|0x202E
block|}
block|,
block|{
literal|0x2060
block|,
literal|0x2063
block|}
block|,
block|{
literal|0x206A
block|,
literal|0x206F
block|}
block|,
block|{
literal|0x20D0
block|,
literal|0x20EF
block|}
block|,
block|{
literal|0x302A
block|,
literal|0x302F
block|}
block|,
block|{
literal|0x3099
block|,
literal|0x309A
block|}
block|,
block|{
literal|0xA806
block|,
literal|0xA806
block|}
block|,
block|{
literal|0xA80B
block|,
literal|0xA80B
block|}
block|,
block|{
literal|0xA825
block|,
literal|0xA826
block|}
block|,
block|{
literal|0xFB1E
block|,
literal|0xFB1E
block|}
block|,
block|{
literal|0xFE00
block|,
literal|0xFE0F
block|}
block|,
block|{
literal|0xFE20
block|,
literal|0xFE23
block|}
block|,
block|{
literal|0xFEFF
block|,
literal|0xFEFF
block|}
block|,
block|{
literal|0xFFF9
block|,
literal|0xFFFB
block|}
block|,
block|{
literal|0x10A01
block|,
literal|0x10A03
block|}
block|,
block|{
literal|0x10A05
block|,
literal|0x10A06
block|}
block|,
block|{
literal|0x10A0C
block|,
literal|0x10A0F
block|}
block|,
block|{
literal|0x10A38
block|,
literal|0x10A3A
block|}
block|,
block|{
literal|0x10A3F
block|,
literal|0x10A3F
block|}
block|,
block|{
literal|0x1D167
block|,
literal|0x1D169
block|}
block|,
block|{
literal|0x1D173
block|,
literal|0x1D182
block|}
block|,
block|{
literal|0x1D185
block|,
literal|0x1D18B
block|}
block|,
block|{
literal|0x1D1AA
block|,
literal|0x1D1AD
block|}
block|,
block|{
literal|0x1D242
block|,
literal|0x1D244
block|}
block|,
block|{
literal|0xE0001
block|,
literal|0xE0001
block|}
block|,
block|{
literal|0xE0020
block|,
literal|0xE007F
block|}
block|,
block|{
literal|0xE0100
block|,
literal|0xE01EF
block|}
block|}
decl_stmt|;
comment|/* test for 8-bit control characters */
if|if
condition|(
name|ucs
operator|==
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|ucs
operator|<
literal|32
operator|||
operator|(
name|ucs
operator|>=
literal|0x7f
operator|&&
name|ucs
operator|<
literal|0xa0
operator|)
condition|)
return|return
operator|-
literal|1
return|;
comment|/* binary search in table of non-spacing characters */
if|if
condition|(
name|xo_bisearch
argument_list|(
name|ucs
argument_list|,
name|combining
argument_list|,
sizeof|sizeof
argument_list|(
name|combining
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|interval
argument_list|)
operator|-
literal|1
argument_list|)
condition|)
return|return
literal|0
return|;
comment|/* if we arrive here, ucs is not a combining or C0/C1 control character */
return|return
literal|1
operator|+
operator|(
name|ucs
operator|>=
literal|0x1100
operator|&&
operator|(
name|ucs
operator|<=
literal|0x115f
operator|||
comment|/* Hangul Jamo init. consonants */
name|ucs
operator|==
literal|0x2329
operator|||
name|ucs
operator|==
literal|0x232a
operator|||
operator|(
name|ucs
operator|>=
literal|0x2e80
operator|&&
name|ucs
operator|<=
literal|0xa4cf
operator|&&
name|ucs
operator|!=
literal|0x303f
operator|)
operator|||
comment|/* CJK ... Yi */
operator|(
name|ucs
operator|>=
literal|0xac00
operator|&&
name|ucs
operator|<=
literal|0xd7a3
operator|)
operator|||
comment|/* Hangul Syllables */
operator|(
name|ucs
operator|>=
literal|0xf900
operator|&&
name|ucs
operator|<=
literal|0xfaff
operator|)
operator|||
comment|/* CJK Compatibility Ideographs */
operator|(
name|ucs
operator|>=
literal|0xfe10
operator|&&
name|ucs
operator|<=
literal|0xfe19
operator|)
operator|||
comment|/* Vertical forms */
operator|(
name|ucs
operator|>=
literal|0xfe30
operator|&&
name|ucs
operator|<=
literal|0xfe6f
operator|)
operator|||
comment|/* CJK Compatibility Forms */
operator|(
name|ucs
operator|>=
literal|0xff00
operator|&&
name|ucs
operator|<=
literal|0xff60
operator|)
operator|||
comment|/* Fullwidth Forms */
operator|(
name|ucs
operator|>=
literal|0xffe0
operator|&&
name|ucs
operator|<=
literal|0xffe6
operator|)
operator|||
operator|(
name|ucs
operator|>=
literal|0x20000
operator|&&
name|ucs
operator|<=
literal|0x2fffd
operator|)
operator|||
operator|(
name|ucs
operator|>=
literal|0x30000
operator|&&
name|ucs
operator|<=
literal|0x3fffd
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|UNUSED_CODE
end_if

begin_function
specifier|static
name|int
name|xo_wcswidth
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|pwcs
parameter_list|,
name|size_t
name|n
parameter_list|)
block|{
name|int
name|w
decl_stmt|,
name|width
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
operator|*
name|pwcs
operator|&&
name|n
operator|--
operator|>
literal|0
condition|;
name|pwcs
operator|++
control|)
if|if
condition|(
operator|(
name|w
operator|=
name|mk_wcwidth
argument_list|(
operator|*
name|pwcs
argument_list|)
operator|)
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
else|else
name|width
operator|+=
name|w
expr_stmt|;
return|return
name|width
return|;
block|}
end_function

begin_comment
comment|/*  * The following functions are the same as mk_wcwidth() and  * mk_wcswidth(), except that spacing characters in the East Asian  * Ambiguous (A) category as defined in Unicode Technical Report #11  * have a column width of 2. This variant might be useful for users of  * CJK legacy encodings who want to migrate to UCS without changing  * the traditional terminal character-width behaviour. It is not  * otherwise recommended for general use.  */
end_comment

begin_function
name|int
name|mk_wcwidth_cjk
parameter_list|(
name|wchar_t
name|ucs
parameter_list|)
block|{
comment|/* sorted list of non-overlapping intervals of East Asian Ambiguous    * characters, generated by "uniset +WIDTH-A -cat=Me -cat=Mn -cat=Cf c" */
specifier|static
specifier|const
name|struct
name|interval
name|ambiguous
index|[]
init|=
block|{
block|{
literal|0x00A1
block|,
literal|0x00A1
block|}
block|,
block|{
literal|0x00A4
block|,
literal|0x00A4
block|}
block|,
block|{
literal|0x00A7
block|,
literal|0x00A8
block|}
block|,
block|{
literal|0x00AA
block|,
literal|0x00AA
block|}
block|,
block|{
literal|0x00AE
block|,
literal|0x00AE
block|}
block|,
block|{
literal|0x00B0
block|,
literal|0x00B4
block|}
block|,
block|{
literal|0x00B6
block|,
literal|0x00BA
block|}
block|,
block|{
literal|0x00BC
block|,
literal|0x00BF
block|}
block|,
block|{
literal|0x00C6
block|,
literal|0x00C6
block|}
block|,
block|{
literal|0x00D0
block|,
literal|0x00D0
block|}
block|,
block|{
literal|0x00D7
block|,
literal|0x00D8
block|}
block|,
block|{
literal|0x00DE
block|,
literal|0x00E1
block|}
block|,
block|{
literal|0x00E6
block|,
literal|0x00E6
block|}
block|,
block|{
literal|0x00E8
block|,
literal|0x00EA
block|}
block|,
block|{
literal|0x00EC
block|,
literal|0x00ED
block|}
block|,
block|{
literal|0x00F0
block|,
literal|0x00F0
block|}
block|,
block|{
literal|0x00F2
block|,
literal|0x00F3
block|}
block|,
block|{
literal|0x00F7
block|,
literal|0x00FA
block|}
block|,
block|{
literal|0x00FC
block|,
literal|0x00FC
block|}
block|,
block|{
literal|0x00FE
block|,
literal|0x00FE
block|}
block|,
block|{
literal|0x0101
block|,
literal|0x0101
block|}
block|,
block|{
literal|0x0111
block|,
literal|0x0111
block|}
block|,
block|{
literal|0x0113
block|,
literal|0x0113
block|}
block|,
block|{
literal|0x011B
block|,
literal|0x011B
block|}
block|,
block|{
literal|0x0126
block|,
literal|0x0127
block|}
block|,
block|{
literal|0x012B
block|,
literal|0x012B
block|}
block|,
block|{
literal|0x0131
block|,
literal|0x0133
block|}
block|,
block|{
literal|0x0138
block|,
literal|0x0138
block|}
block|,
block|{
literal|0x013F
block|,
literal|0x0142
block|}
block|,
block|{
literal|0x0144
block|,
literal|0x0144
block|}
block|,
block|{
literal|0x0148
block|,
literal|0x014B
block|}
block|,
block|{
literal|0x014D
block|,
literal|0x014D
block|}
block|,
block|{
literal|0x0152
block|,
literal|0x0153
block|}
block|,
block|{
literal|0x0166
block|,
literal|0x0167
block|}
block|,
block|{
literal|0x016B
block|,
literal|0x016B
block|}
block|,
block|{
literal|0x01CE
block|,
literal|0x01CE
block|}
block|,
block|{
literal|0x01D0
block|,
literal|0x01D0
block|}
block|,
block|{
literal|0x01D2
block|,
literal|0x01D2
block|}
block|,
block|{
literal|0x01D4
block|,
literal|0x01D4
block|}
block|,
block|{
literal|0x01D6
block|,
literal|0x01D6
block|}
block|,
block|{
literal|0x01D8
block|,
literal|0x01D8
block|}
block|,
block|{
literal|0x01DA
block|,
literal|0x01DA
block|}
block|,
block|{
literal|0x01DC
block|,
literal|0x01DC
block|}
block|,
block|{
literal|0x0251
block|,
literal|0x0251
block|}
block|,
block|{
literal|0x0261
block|,
literal|0x0261
block|}
block|,
block|{
literal|0x02C4
block|,
literal|0x02C4
block|}
block|,
block|{
literal|0x02C7
block|,
literal|0x02C7
block|}
block|,
block|{
literal|0x02C9
block|,
literal|0x02CB
block|}
block|,
block|{
literal|0x02CD
block|,
literal|0x02CD
block|}
block|,
block|{
literal|0x02D0
block|,
literal|0x02D0
block|}
block|,
block|{
literal|0x02D8
block|,
literal|0x02DB
block|}
block|,
block|{
literal|0x02DD
block|,
literal|0x02DD
block|}
block|,
block|{
literal|0x02DF
block|,
literal|0x02DF
block|}
block|,
block|{
literal|0x0391
block|,
literal|0x03A1
block|}
block|,
block|{
literal|0x03A3
block|,
literal|0x03A9
block|}
block|,
block|{
literal|0x03B1
block|,
literal|0x03C1
block|}
block|,
block|{
literal|0x03C3
block|,
literal|0x03C9
block|}
block|,
block|{
literal|0x0401
block|,
literal|0x0401
block|}
block|,
block|{
literal|0x0410
block|,
literal|0x044F
block|}
block|,
block|{
literal|0x0451
block|,
literal|0x0451
block|}
block|,
block|{
literal|0x2010
block|,
literal|0x2010
block|}
block|,
block|{
literal|0x2013
block|,
literal|0x2016
block|}
block|,
block|{
literal|0x2018
block|,
literal|0x2019
block|}
block|,
block|{
literal|0x201C
block|,
literal|0x201D
block|}
block|,
block|{
literal|0x2020
block|,
literal|0x2022
block|}
block|,
block|{
literal|0x2024
block|,
literal|0x2027
block|}
block|,
block|{
literal|0x2030
block|,
literal|0x2030
block|}
block|,
block|{
literal|0x2032
block|,
literal|0x2033
block|}
block|,
block|{
literal|0x2035
block|,
literal|0x2035
block|}
block|,
block|{
literal|0x203B
block|,
literal|0x203B
block|}
block|,
block|{
literal|0x203E
block|,
literal|0x203E
block|}
block|,
block|{
literal|0x2074
block|,
literal|0x2074
block|}
block|,
block|{
literal|0x207F
block|,
literal|0x207F
block|}
block|,
block|{
literal|0x2081
block|,
literal|0x2084
block|}
block|,
block|{
literal|0x20AC
block|,
literal|0x20AC
block|}
block|,
block|{
literal|0x2103
block|,
literal|0x2103
block|}
block|,
block|{
literal|0x2105
block|,
literal|0x2105
block|}
block|,
block|{
literal|0x2109
block|,
literal|0x2109
block|}
block|,
block|{
literal|0x2113
block|,
literal|0x2113
block|}
block|,
block|{
literal|0x2116
block|,
literal|0x2116
block|}
block|,
block|{
literal|0x2121
block|,
literal|0x2122
block|}
block|,
block|{
literal|0x2126
block|,
literal|0x2126
block|}
block|,
block|{
literal|0x212B
block|,
literal|0x212B
block|}
block|,
block|{
literal|0x2153
block|,
literal|0x2154
block|}
block|,
block|{
literal|0x215B
block|,
literal|0x215E
block|}
block|,
block|{
literal|0x2160
block|,
literal|0x216B
block|}
block|,
block|{
literal|0x2170
block|,
literal|0x2179
block|}
block|,
block|{
literal|0x2190
block|,
literal|0x2199
block|}
block|,
block|{
literal|0x21B8
block|,
literal|0x21B9
block|}
block|,
block|{
literal|0x21D2
block|,
literal|0x21D2
block|}
block|,
block|{
literal|0x21D4
block|,
literal|0x21D4
block|}
block|,
block|{
literal|0x21E7
block|,
literal|0x21E7
block|}
block|,
block|{
literal|0x2200
block|,
literal|0x2200
block|}
block|,
block|{
literal|0x2202
block|,
literal|0x2203
block|}
block|,
block|{
literal|0x2207
block|,
literal|0x2208
block|}
block|,
block|{
literal|0x220B
block|,
literal|0x220B
block|}
block|,
block|{
literal|0x220F
block|,
literal|0x220F
block|}
block|,
block|{
literal|0x2211
block|,
literal|0x2211
block|}
block|,
block|{
literal|0x2215
block|,
literal|0x2215
block|}
block|,
block|{
literal|0x221A
block|,
literal|0x221A
block|}
block|,
block|{
literal|0x221D
block|,
literal|0x2220
block|}
block|,
block|{
literal|0x2223
block|,
literal|0x2223
block|}
block|,
block|{
literal|0x2225
block|,
literal|0x2225
block|}
block|,
block|{
literal|0x2227
block|,
literal|0x222C
block|}
block|,
block|{
literal|0x222E
block|,
literal|0x222E
block|}
block|,
block|{
literal|0x2234
block|,
literal|0x2237
block|}
block|,
block|{
literal|0x223C
block|,
literal|0x223D
block|}
block|,
block|{
literal|0x2248
block|,
literal|0x2248
block|}
block|,
block|{
literal|0x224C
block|,
literal|0x224C
block|}
block|,
block|{
literal|0x2252
block|,
literal|0x2252
block|}
block|,
block|{
literal|0x2260
block|,
literal|0x2261
block|}
block|,
block|{
literal|0x2264
block|,
literal|0x2267
block|}
block|,
block|{
literal|0x226A
block|,
literal|0x226B
block|}
block|,
block|{
literal|0x226E
block|,
literal|0x226F
block|}
block|,
block|{
literal|0x2282
block|,
literal|0x2283
block|}
block|,
block|{
literal|0x2286
block|,
literal|0x2287
block|}
block|,
block|{
literal|0x2295
block|,
literal|0x2295
block|}
block|,
block|{
literal|0x2299
block|,
literal|0x2299
block|}
block|,
block|{
literal|0x22A5
block|,
literal|0x22A5
block|}
block|,
block|{
literal|0x22BF
block|,
literal|0x22BF
block|}
block|,
block|{
literal|0x2312
block|,
literal|0x2312
block|}
block|,
block|{
literal|0x2460
block|,
literal|0x24E9
block|}
block|,
block|{
literal|0x24EB
block|,
literal|0x254B
block|}
block|,
block|{
literal|0x2550
block|,
literal|0x2573
block|}
block|,
block|{
literal|0x2580
block|,
literal|0x258F
block|}
block|,
block|{
literal|0x2592
block|,
literal|0x2595
block|}
block|,
block|{
literal|0x25A0
block|,
literal|0x25A1
block|}
block|,
block|{
literal|0x25A3
block|,
literal|0x25A9
block|}
block|,
block|{
literal|0x25B2
block|,
literal|0x25B3
block|}
block|,
block|{
literal|0x25B6
block|,
literal|0x25B7
block|}
block|,
block|{
literal|0x25BC
block|,
literal|0x25BD
block|}
block|,
block|{
literal|0x25C0
block|,
literal|0x25C1
block|}
block|,
block|{
literal|0x25C6
block|,
literal|0x25C8
block|}
block|,
block|{
literal|0x25CB
block|,
literal|0x25CB
block|}
block|,
block|{
literal|0x25CE
block|,
literal|0x25D1
block|}
block|,
block|{
literal|0x25E2
block|,
literal|0x25E5
block|}
block|,
block|{
literal|0x25EF
block|,
literal|0x25EF
block|}
block|,
block|{
literal|0x2605
block|,
literal|0x2606
block|}
block|,
block|{
literal|0x2609
block|,
literal|0x2609
block|}
block|,
block|{
literal|0x260E
block|,
literal|0x260F
block|}
block|,
block|{
literal|0x2614
block|,
literal|0x2615
block|}
block|,
block|{
literal|0x261C
block|,
literal|0x261C
block|}
block|,
block|{
literal|0x261E
block|,
literal|0x261E
block|}
block|,
block|{
literal|0x2640
block|,
literal|0x2640
block|}
block|,
block|{
literal|0x2642
block|,
literal|0x2642
block|}
block|,
block|{
literal|0x2660
block|,
literal|0x2661
block|}
block|,
block|{
literal|0x2663
block|,
literal|0x2665
block|}
block|,
block|{
literal|0x2667
block|,
literal|0x266A
block|}
block|,
block|{
literal|0x266C
block|,
literal|0x266D
block|}
block|,
block|{
literal|0x266F
block|,
literal|0x266F
block|}
block|,
block|{
literal|0x273D
block|,
literal|0x273D
block|}
block|,
block|{
literal|0x2776
block|,
literal|0x277F
block|}
block|,
block|{
literal|0xE000
block|,
literal|0xF8FF
block|}
block|,
block|{
literal|0xFFFD
block|,
literal|0xFFFD
block|}
block|,
block|{
literal|0xF0000
block|,
literal|0xFFFFD
block|}
block|,
block|{
literal|0x100000
block|,
literal|0x10FFFD
block|}
block|}
decl_stmt|;
comment|/* binary search in table of non-spacing characters */
if|if
condition|(
name|xo_bisearch
argument_list|(
name|ucs
argument_list|,
name|ambiguous
argument_list|,
sizeof|sizeof
argument_list|(
name|ambiguous
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|interval
argument_list|)
operator|-
literal|1
argument_list|)
condition|)
return|return
literal|2
return|;
return|return
name|mk_wcwidth
argument_list|(
name|ucs
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|mk_wcswidth_cjk
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|pwcs
parameter_list|,
name|size_t
name|n
parameter_list|)
block|{
name|int
name|w
decl_stmt|,
name|width
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
operator|*
name|pwcs
operator|&&
name|n
operator|--
operator|>
literal|0
condition|;
name|pwcs
operator|++
control|)
if|if
condition|(
operator|(
name|w
operator|=
name|mk_wcwidth_cjk
argument_list|(
operator|*
name|pwcs
argument_list|)
operator|)
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
else|else
name|width
operator|+=
name|w
expr_stmt|;
return|return
name|width
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* UNUSED_CODE */
end_comment

end_unit

