begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* lock.h : internal interface to lock functions  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_FS_LOCK_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_FS_LOCK_H
end_define

begin_include
include|#
directive|include
file|"trail.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* These functions implement part of the FS loader library's fs    vtables.  See the public svn_fs.h for docstrings.*/
name|svn_error_t
modifier|*
name|svn_fs_base__lock
parameter_list|(
name|svn_lock_t
modifier|*
modifier|*
name|lock
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|comment
parameter_list|,
name|svn_boolean_t
name|is_dav_comment
parameter_list|,
name|apr_time_t
name|expiration_date
parameter_list|,
name|svn_revnum_t
name|current_rev
parameter_list|,
name|svn_boolean_t
name|steal_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_fs_base__generate_lock_token
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|token
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_fs_base__unlock
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
name|svn_boolean_t
name|break_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_fs_base__get_lock
parameter_list|(
name|svn_lock_t
modifier|*
modifier|*
name|lock
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_fs_base__get_locks
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_fs_get_locks_callback_t
name|get_locks_func
parameter_list|,
name|void
modifier|*
name|get_locks_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* These next functions are 'helpers' for internal fs use:    if a fs function's txn_body needs to enforce existing locks, it    should use these routines: */
comment|/* Implements main logic of 'svn_fs_get_lock' (or in this    case, svn_fs_base__get_lock() above.)  See svn_fs.h. */
name|svn_error_t
modifier|*
name|svn_fs_base__get_lock_helper
parameter_list|(
name|svn_lock_t
modifier|*
modifier|*
name|lock_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Examine PATH for existing locks, and check whether they can be    used.  Do all work in the context of TRAIL, using POOL for    temporary allocations.     If no locks are present, return SVN_NO_ERROR.     If PATH is locked (or contains locks "below" it, when RECURSE is    set), then verify that:        1. a username has been supplied to TRAIL->fs's access-context,          else return SVN_ERR_FS_NO_USER.        2. for every lock discovered, the current username in the access          context of TRAIL->fs matches the "owner" of the lock, else          return SVN_ERR_FS_LOCK_OWNER_MISMATCH.        3. for every lock discovered, a matching lock token has been          passed into TRAIL->fs's access-context, else return          SVN_ERR_FS_BAD_LOCK_TOKEN.     If all three conditions are met, return SVN_NO_ERROR. */
name|svn_error_t
modifier|*
name|svn_fs_base__allow_locked_operation
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_FS_LOCK_H */
end_comment

end_unit

