begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* dag.h : DAG-like interface filesystem, private to libsvn_fs  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_FS_DAG_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_FS_DAG_H
end_define

begin_include
include|#
directive|include
file|"svn_fs.h"
end_include

begin_include
include|#
directive|include
file|"svn_delta.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_cache.h"
end_include

begin_include
include|#
directive|include
file|"fs.h"
end_include

begin_include
include|#
directive|include
file|"id.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* The interface in this file provides all the essential filesystem    operations, but exposes the filesystem's DAG structure.  This makes    it simpler to implement than the public interface, since a client    of this interface has to understand and cope with shared structure    directly as it appears in the database.  However, it's still a    self-consistent set of invariants to maintain, making it    (hopefully) a useful interface boundary.     In other words:     - The dag_node_t interface exposes the internal DAG structure of      the filesystem, while the svn_fs.h interface does any cloning      necessary to make the filesystem look like a tree.     - The dag_node_t interface exposes the existence of copy nodes,      whereas the svn_fs.h handles them transparently.     - dag_node_t's must be explicitly cloned, whereas the svn_fs.h      operations make clones implicitly.     - Callers of the dag_node_t interface use Berkeley DB transactions      to ensure consistency between operations, while callers of the      svn_fs.h interface use Subversion transactions.  */
comment|/* Generic DAG node stuff.  */
typedef|typedef
name|struct
name|dag_node_t
name|dag_node_t
typedef|;
comment|/* Fill *NODE with a dag_node_t representing node revision ID in FS,    allocating in RESULT_POOL.  Use SCRATCH_POOL for temporaries. */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_node
parameter_list|(
name|dag_node_t
modifier|*
modifier|*
name|node
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|svn_fs_x__id_t
modifier|*
name|id
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Return a new dag_node_t object referring to the same node as NODE,    allocated in RESULT_POOL.  If you're trying to build a structure in a    pool that wants to refer to dag nodes that may have been allocated    elsewhere, you can call this function and avoid inter-pool pointers. */
name|dag_node_t
modifier|*
name|svn_fs_x__dag_dup
parameter_list|(
specifier|const
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* If NODE has been allocated in POOL, return NODE.  Otherwise, return    a copy created in RESULT_POOL with svn_fs_fs__dag_dup. */
name|dag_node_t
modifier|*
name|svn_fs_x__dag_copy_into_pool
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Serialize a DAG node, except don't try to preserve the 'fs' member.    Implements svn_cache__serialize_func_t */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_serialize
parameter_list|(
name|void
modifier|*
modifier|*
name|data
parameter_list|,
name|apr_size_t
modifier|*
name|data_len
parameter_list|,
name|void
modifier|*
name|in
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Deserialize a DAG node, leaving the 'fs' member as NULL.    Implements svn_cache__deserialize_func_t */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_deserialize
parameter_list|(
name|void
modifier|*
modifier|*
name|out
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|apr_size_t
name|data_len
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Return the filesystem containing NODE.  */
name|svn_fs_t
modifier|*
name|svn_fs_x__dag_get_fs
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Changes the filesystem containing NODE to FS.  (Used when pulling    nodes out of a shared cache, say.) */
name|void
name|svn_fs_x__dag_set_fs
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|)
function_decl|;
comment|/* Return NODE's revision number.  If NODE has never been committed as    part of a revision, set *REV to SVN_INVALID_REVNUM.  */
name|svn_revnum_t
name|svn_fs_x__dag_get_revision
parameter_list|(
specifier|const
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Return the node revision ID of NODE.  The value returned is shared    with NODE, and will be deallocated when NODE is.  */
specifier|const
name|svn_fs_x__id_t
modifier|*
name|svn_fs_x__dag_get_id
parameter_list|(
specifier|const
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Return the node ID of NODE.  The value returned is shared with NODE,    and will be deallocated when NODE is.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_node_id
parameter_list|(
name|svn_fs_x__id_t
modifier|*
name|node_id
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Return the copy ID of NODE.  The value returned is shared with NODE,    and will be deallocated when NODE is.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_copy_id
parameter_list|(
name|svn_fs_x__id_t
modifier|*
name|copy_id
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *SAME to TRUE, if nodes LHS and RHS have the same node ID. */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_related_node
parameter_list|(
name|svn_boolean_t
modifier|*
name|same
parameter_list|,
name|dag_node_t
modifier|*
name|lhs
parameter_list|,
name|dag_node_t
modifier|*
name|rhs
parameter_list|)
function_decl|;
comment|/* Set *SAME to TRUE, if nodes LHS and RHS have the same node and copy IDs.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_same_line_of_history
parameter_list|(
name|svn_boolean_t
modifier|*
name|same
parameter_list|,
name|dag_node_t
modifier|*
name|lhs
parameter_list|,
name|dag_node_t
modifier|*
name|rhs
parameter_list|)
function_decl|;
comment|/* Return the created path of NODE.  The value returned is shared    with NODE, and will be deallocated when NODE is.  */
specifier|const
name|char
modifier|*
name|svn_fs_x__dag_get_created_path
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *ID_P to the node revision ID of NODE's immediate predecessor.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_predecessor_id
parameter_list|(
name|svn_fs_x__id_t
modifier|*
name|id_p
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *COUNT to the number of predecessors NODE has (recursively).  */
comment|/* ### This function is currently only used by 'verify'. */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_predecessor_count
parameter_list|(
name|int
modifier|*
name|count
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *COUNT to the number of node under NODE (inclusive) with    svn:mergeinfo properties.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_mergeinfo_count
parameter_list|(
name|apr_int64_t
modifier|*
name|count
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *DO_THEY to a flag indicating whether or not NODE is a    directory with at least one descendant (not including itself) with    svn:mergeinfo.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_has_descendants_with_mergeinfo
parameter_list|(
name|svn_boolean_t
modifier|*
name|do_they
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *HAS_MERGEINFO to a flag indicating whether or not NODE itself    has svn:mergeinfo set on it.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_has_mergeinfo
parameter_list|(
name|svn_boolean_t
modifier|*
name|has_mergeinfo
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Return non-zero IFF NODE is currently mutable. */
name|svn_boolean_t
name|svn_fs_x__dag_check_mutable
parameter_list|(
specifier|const
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Return the node kind of NODE. */
name|svn_node_kind_t
name|svn_fs_x__dag_node_kind
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *PROPLIST_P to a PROPLIST hash representing the entire property    list of NODE, allocating from POOL.  The hash has const char *    names (the property names) and svn_string_t * values (the property    values).     If properties do not exist on NODE, *PROPLIST_P will be set to    NULL.     Allocate the result in RESULT_POOL and use SCRATCH_POOL for temporaries.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_proplist
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|proplist_p
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set the property list of NODE to PROPLIST, allocating from POOL.    The node being changed must be mutable.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_set_proplist
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|apr_hash_t
modifier|*
name|proplist
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Increment the mergeinfo_count field on NODE by INCREMENT.  The node    being changed must be mutable.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_increment_mergeinfo_count
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|apr_int64_t
name|increment
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set the has-mergeinfo flag on NODE to HAS_MERGEINFO.  The node    being changed must be mutable.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_set_has_mergeinfo
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|svn_boolean_t
name|has_mergeinfo
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Revision and transaction roots.  */
comment|/* Open the root of revision REV of filesystem FS, allocating from    RESULT_POOL.  Set *NODE_P to the new node.  Use SCRATCH_POOL for    temporary allocations.*/
name|svn_error_t
modifier|*
name|svn_fs_x__dag_revision_root
parameter_list|(
name|dag_node_t
modifier|*
modifier|*
name|node_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *NODE_P to the root of transaction TXN_ID in FS, allocating    from RESULT_POOL.  Use SCRATCH_POOL for temporary allocations. */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_txn_root
parameter_list|(
name|dag_node_t
modifier|*
modifier|*
name|node_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_fs_x__txn_id_t
name|txn_id
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Directories.  */
comment|/* Open the node named NAME in the directory PARENT.  Set *CHILD_P to    the new node, allocated in RESULT_POOL.  NAME must be a single path    component; it cannot be a slash-separated directory path.  If NAME does    not exist within PARENT, set *CHILD_P to NULL.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_open
parameter_list|(
name|dag_node_t
modifier|*
modifier|*
name|child_p
parameter_list|,
name|dag_node_t
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *ENTRIES_P to an array of NODE's entries, sorted by entry names,    and the values are svn_fs_x__dirent_t. The returned table (and elements)    is allocated in RESULT_POOL, temporaries in SCRATCH_POOL. */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_dir_entries
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|entries_p
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set ENTRY_NAME in NODE to point to ID (with kind KIND), allocating    from POOL.  NODE must be a mutable directory.  ID can refer to a    mutable or immutable node.  If ENTRY_NAME does not exist, it will    be created.  TXN_ID is the Subversion transaction under which this    occurs.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_set_entry
parameter_list|(
name|dag_node_t
modifier|*
name|node
parameter_list|,
specifier|const
name|char
modifier|*
name|entry_name
parameter_list|,
specifier|const
name|svn_fs_x__id_t
modifier|*
name|id
parameter_list|,
name|svn_node_kind_t
name|kind
parameter_list|,
name|svn_fs_x__txn_id_t
name|txn_id
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Make a new mutable clone of the node named NAME in PARENT, and    adjust PARENT's directory entry to point to it, unless NAME in    PARENT already refers to a mutable node.  In either case, set    *CHILD_P to a reference to the new node, allocated in POOL.  PARENT    must be mutable.  NAME must be a single path component; it cannot    be a slash-separated directory path.  PARENT_PATH must be the    canonicalized absolute path of the parent directory.     COPY_ID, if non-NULL, is a key into the `copies' table, and    indicates that this new node is being created as the result of a    copy operation, and specifically which operation that was.     PATH is the canonicalized absolute path at which this node is being    created.     TXN_ID is the Subversion transaction under which this occurs.     Allocate *CHILD_P in RESULT_POOL and use SCRATCH_POOL for temporaries.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_clone_child
parameter_list|(
name|dag_node_t
modifier|*
modifier|*
name|child_p
parameter_list|,
name|dag_node_t
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_path
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_fs_x__id_t
modifier|*
name|copy_id
parameter_list|,
name|svn_fs_x__txn_id_t
name|txn_id
parameter_list|,
name|svn_boolean_t
name|is_parent_copyroot
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Delete the directory entry named NAME from PARENT, allocating from    POOL.  PARENT must be mutable.  NAME must be a single path    component; it cannot be a slash-separated directory path.  If the    node being deleted is a mutable directory, remove all mutable nodes    reachable from it.  TXN_ID is the Subversion transaction under    which this occurs.     If return SVN_ERR_FS_NO_SUCH_ENTRY, then there is no entry NAME in    PARENT.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_delete
parameter_list|(
name|dag_node_t
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|svn_fs_x__txn_id_t
name|txn_id
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Create a new mutable directory named NAME in PARENT.  Set *CHILD_P    to a reference to the new node, allocated in RESULT_POOL.  The new    directory has no contents, and no properties.  PARENT must be    mutable.  NAME must be a single path component; it cannot be a    slash-separated directory path.  PARENT_PATH must be the    canonicalized absolute path of the parent directory.  PARENT must    not currently have an entry named NAME.  TXN_ID is the Subversion    transaction under which this occurs.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_make_dir
parameter_list|(
name|dag_node_t
modifier|*
modifier|*
name|child_p
parameter_list|,
name|dag_node_t
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_path
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|svn_fs_x__txn_id_t
name|txn_id
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Files.  */
comment|/* Set *CONTENTS to a readable generic stream which yields the    contents of FILE.  Allocate the stream in RESULT_POOL.     If FILE is not a file, return SVN_ERR_FS_NOT_FILE.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_contents
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|contents
parameter_list|,
name|dag_node_t
modifier|*
name|file
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Attempt to fetch the contents of NODE and pass it along with the BATON    to the PROCESSOR.   Set *SUCCESS only of the data could be provided    and the processor had been called.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_try_process_file_contents
parameter_list|(
name|svn_boolean_t
modifier|*
name|success
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|,
name|svn_fs_process_contents_func_t
name|processor
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *STREAM_P to a delta stream that will turn the contents of SOURCE into    the contents of TARGET, allocated in RESULT_POOL.  If SOURCE is null, the    empty string will be used is its stead.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_file_delta_stream
parameter_list|(
name|svn_txdelta_stream_t
modifier|*
modifier|*
name|stream_p
parameter_list|,
name|dag_node_t
modifier|*
name|source
parameter_list|,
name|dag_node_t
modifier|*
name|target
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Return a generic writable stream in *CONTENTS with which to set the    contents of FILE.  Allocate the stream in RESULT_POOL.     Any previous edits on the file will be deleted, and a new edit    stream will be constructed.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_edit_stream
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|contents
parameter_list|,
name|dag_node_t
modifier|*
name|file
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Signify the completion of edits to FILE made using the stream    returned by svn_fs_x__dag_get_edit_stream.     If CHECKSUM is non-null, it must match the checksum for FILE's    contents (note: this is not recalculated, the recorded checksum is    used), else the error SVN_ERR_CHECKSUM_MISMATCH is returned.     This operation is a no-op if no edits are present.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_finalize_edits
parameter_list|(
name|dag_node_t
modifier|*
name|file
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
name|checksum
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *LENGTH to the length of the contents of FILE.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_file_length
parameter_list|(
name|svn_filesize_t
modifier|*
name|length
parameter_list|,
name|dag_node_t
modifier|*
name|file
parameter_list|)
function_decl|;
comment|/* Put the recorded checksum of type KIND for FILE into CHECKSUM, allocating    from RESULT_POOL.     If no stored checksum is available, do not calculate the checksum,    just put NULL into CHECKSUM.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_file_checksum
parameter_list|(
name|svn_checksum_t
modifier|*
modifier|*
name|checksum
parameter_list|,
name|dag_node_t
modifier|*
name|file
parameter_list|,
name|svn_checksum_kind_t
name|kind
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Create a new mutable file named NAME in PARENT.  Set *CHILD_P to a    reference to the new node, allocated in RESULT_POOL.  The new file's    contents are the empty string, and it has no properties.  PARENT    must be mutable.  NAME must be a single path component; it cannot    be a slash-separated directory path.  PARENT_PATH must be the    canonicalized absolute path of the parent directory.  TXN_ID is the    Subversion transaction under which this occurs.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_make_file
parameter_list|(
name|dag_node_t
modifier|*
modifier|*
name|child_p
parameter_list|,
name|dag_node_t
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_path
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|svn_fs_x__txn_id_t
name|txn_id
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Copies */
comment|/* Make ENTRY in TO_NODE be a copy of FROM_NODE.  TO_NODE must be mutable.    TXN_ID is the Subversion transaction under which this occurs.     If PRESERVE_HISTORY is true, the new node will record that it was    copied from FROM_PATH in FROM_REV; therefore, FROM_NODE should be    the node found at FROM_PATH in FROM_REV, although this is not    checked.  FROM_PATH should be canonicalized before being passed    here.     If PRESERVE_HISTORY is false, FROM_PATH and FROM_REV are ignored.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_copy
parameter_list|(
name|dag_node_t
modifier|*
name|to_node
parameter_list|,
specifier|const
name|char
modifier|*
name|entry
parameter_list|,
name|dag_node_t
modifier|*
name|from_node
parameter_list|,
name|svn_boolean_t
name|preserve_history
parameter_list|,
name|svn_revnum_t
name|from_rev
parameter_list|,
specifier|const
name|char
modifier|*
name|from_path
parameter_list|,
name|svn_fs_x__txn_id_t
name|txn_id
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Comparison */
comment|/* Find out what is the same between two nodes.  If STRICT is FALSE,    this function may report false positives, i.e. report changes even    if the resulting contents / props are equal.     If PROPS_CHANGED is non-null, set *PROPS_CHANGED to 1 if the two    nodes have different property lists, or to 0 if same.     If CONTENTS_CHANGED is non-null, set *CONTENTS_CHANGED to 1 if the    two nodes have different contents, or to 0 if same.  NODE1 and NODE2    must refer to files from the same filesystem.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_things_different
parameter_list|(
name|svn_boolean_t
modifier|*
name|props_changed
parameter_list|,
name|svn_boolean_t
modifier|*
name|contents_changed
parameter_list|,
name|dag_node_t
modifier|*
name|node1
parameter_list|,
name|dag_node_t
modifier|*
name|node2
parameter_list|,
name|svn_boolean_t
name|strict
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *REV and *PATH to the copyroot revision and path of node NODE, or    to SVN_INVALID_REVNUM and NULL if no copyroot exists.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_copyroot
parameter_list|(
name|svn_revnum_t
modifier|*
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|path
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *REV to the copyfrom revision associated with NODE.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_copyfrom_rev
parameter_list|(
name|svn_revnum_t
modifier|*
name|rev
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Set *PATH to the copyfrom path associated with NODE.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_get_copyfrom_path
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|path
parameter_list|,
name|dag_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
comment|/* Update *TARGET so that SOURCE is it's predecessor.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_x__dag_update_ancestry
parameter_list|(
name|dag_node_t
modifier|*
name|target
parameter_list|,
name|dag_node_t
modifier|*
name|source
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_FS_DAG_H */
end_comment

end_unit

