begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * props.h :  properties  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_WC_PROPS_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_WC_PROPS_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_props.h"
end_include

begin_include
include|#
directive|include
file|"wc_db.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* Internal function for diffing props. See svn_wc_get_prop_diffs2(). */
name|svn_error_t
modifier|*
name|svn_wc__internal_propdiff
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|propchanges
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|original_props
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Internal function for fetching a property. See svn_wc_prop_get2(). */
name|svn_error_t
modifier|*
name|svn_wc__internal_propget
parameter_list|(
specifier|const
name|svn_string_t
modifier|*
modifier|*
name|value
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Validate and canonicalize the PROPS like svn_wc_prop_set4() does;  * see that function for details of the SKIP_SOME_CHECKS option.  *  * The properties are checked against the node at LOCAL_ABSPATH (which  * need not be under version control) of kind KIND.  This text of this  * node may be read (if it is a file) in order to validate the  * svn:eol-style property.  *  * Only regular props are accepted; WC props and entry props raise an error  * (unlike svn_wc_prop_set4() which accepts WC props).  *  * Set *PREPARED_PROPS to the resulting canonicalized properties,  * allocating any new data in RESULT_POOL but making shallow copies of  * keys and unchanged values from PROPS.  */
name|svn_error_t
modifier|*
name|svn_wc__canonicalize_props
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|prepared_props
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_node_kind_t
name|node_kind
parameter_list|,
specifier|const
name|apr_hash_t
modifier|*
name|props
parameter_list|,
name|svn_boolean_t
name|skip_some_checks
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Given LOCAL_ABSPATH/DB and an array of PROPCHANGES based on    SERVER_BASEPROPS, calculate what changes should be applied to the working    copy.     We return the new property collections to the caller, so the caller    can combine the property update with other operations.     If SERVER_BASEPROPS is NULL then use the pristine props as PROPCHANGES    base.     Return the new set of actual properties in *NEW_ACTUAL_PROPS.     Append any conflicts of the actual props to *CONFLICT_SKEL.  (First    allocate *CONFLICT_SKEL from RESULT_POOL if it is initially NULL.    CONFLICT_SKEL itself must not be NULL.)     If STATE is non-null, set *STATE to the state of the local properties    after the merge, one of:       svn_wc_notify_state_unchanged      svn_wc_notify_state_changed      svn_wc_notify_state_merged      svn_wc_notify_state_conflicted  */
name|svn_error_t
modifier|*
name|svn_wc__merge_props
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|conflict_skel
parameter_list|,
name|svn_wc_notify_state_t
modifier|*
name|state
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|new_actual_props
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|server_baseprops
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|pristine_props
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|actual_props
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|propchanges
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Given PROPERTIES is array of @c svn_prop_t structures. Returns TRUE if any    of the PROPERTIES are the known "magic" ones that might require    changing the working file. */
name|svn_boolean_t
name|svn_wc__has_magic_property
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|properties
parameter_list|)
function_decl|;
comment|/* Set *MODIFIED_P TRUE if the props for LOCAL_ABSPATH have been modified. */
name|svn_error_t
modifier|*
name|svn_wc__props_modified
parameter_list|(
name|svn_boolean_t
modifier|*
name|modified_p
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Internal version of svn_wc_prop_list2().  */
name|svn_error_t
modifier|*
name|svn_wc__get_actual_props
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Creates a property reject file at *TMP_PREJFILE_ABSPATH, with    either the property conflict data from DB (when PROP_CONFLICT_DATA    is NULL) or the information in PROP_CONFLICT_DATA if it isn't.  */
name|svn_error_t
modifier|*
name|svn_wc__create_prejfile
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|tmp_prejfile_abspath
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|svn_skel_t
modifier|*
name|prop_conflict_data
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_WC_PROPS_H */
end_comment

end_unit

