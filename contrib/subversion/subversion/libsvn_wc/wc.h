begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * wc.h :  shared stuff internal to the svn_wc library.  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_WC_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_WC_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_error.h"
end_include

begin_include
include|#
directive|include
file|"svn_wc.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_sqlite.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_wc_private.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_skel.h"
end_include

begin_include
include|#
directive|include
file|"wc_db.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
define|#
directive|define
name|SVN_WC__PROP_REJ_EXT
value|".prej"
comment|/* We can handle this format or anything lower, and we (should) error  * on anything higher.  *  * There is no format version 0; we started with 1.  *  * The bump to 2 introduced the ".svn-work" extension. For example,  *   ".svn/props/foo" became ".svn/props/foo.svn-work".  *  * The bump to 3 introduced the entry attribute  *   old-and-busted.c::ENTRIES_ATTR_ABSENT.  *  * The bump to 4 renamed the magic "svn:this_dir" entry name to "".  *  * == 1.0.x shipped with format 4  * == 1.1.x shipped with format 4  * == 1.2.x shipped with format 4  * == 1.3.x shipped with format 4  *  * The bump to 5 added support for replacing files with history (the  *   "revert base"). This was introduced in 1.4.0, but buggy until 1.4.6.  *  * The bump to 6 introduced caching of property modification state and  *   certain properties in the entries file.  *  * The bump to 7 changed the entries file format from XML to a custom  *   text-based format.  *  * The bump to 8 placed wcprops in one file per directory (named  *   upgrade.c::WCPROPS_ALL_DATA)  *  * == 1.4.x shipped with format 8  *  * The bump to 9 added changelists, keep-local, and sticky depth (for  *   selective/sparse checkouts) to each entry.  *  * == 1.5.x shipped with format 9  *  * The bump to 10 added tree-conflicts, file externals and a different  *   canonicalization of urls.  *  * == 1.6.x shipped with format 10  *  * The bump to 11 cleared the has_props, has_prop_mods, cachable_props,  *   and present_props values in the entries file. Older clients expect  *   proper values for these fields.  *  * The bump to 12 switched from 'entries' to the SQLite database 'wc.db'.  *  * The bump to 13 added the WORK_QUEUE table into 'wc.db', moved the  *   wcprops into the 'dav_cache' column in BASE_NODE, and stopped using  *   the 'incomplete_children' column of BASE_NODE.  *  * The bump to 14 added the WCLOCKS table (and migrated locks from the  *   filesystem into wc.db), and some columns to ACTUAL_NODE for future  *   use.  *  * The bump to 15 switched from depth='exclude' on directories to using  *   presence='exclude' within the BASE_NODE and WORKING_NODE tables.  *   This change also enabled exclude support on files and symlinks.  *  * The bump to 16 added 'locked_levels' to WC_LOCK, setting any existing  *   locks to a level of 0. The 'md5_checksum' column was added to PRISTINE  *   for future use.  *  * The bump to 17 added a '.svn/pristine' dir and moved the text bases into  *   the Pristine Store (the PRISTINE table and '.svn/pristine' dir), and  *   removed the '/.svn/text-base' dir.  *  * The bump to 18 moved the properties from separate files in the props and  *   prop-base directory (and .svn for the dir itself) into the wc.db file,  *   and then removed the props and prop-base dir.  *  * The bump to 19 introduced the 'single DB' per working copy. All metadata  *   is held in a single '.svn/wc.db' in the root directory of the working  *   copy. Bumped in r991236.  *  * The bump to 20 introduced NODES and drops BASE_NODE and WORKING_NODE,  *   op_depth is always 0 or 2. Bumped in r1005388.  *  * The bump to 21 moved tree conflict storage from the parent to the  *   conflicted node. Bumped in r1034436.  *  * The bump to 22 moved tree conflict storage from conflict_data column  *   to the tree_conflict_data column. Bumped in r1040255.  *  * The bump to 23 introduced multi-layer op_depth processing for NODES.  *   Bumped in r1044384.  *  * The bump to 24 started using the 'refcount' column of the PRISTINE table  *   correctly, instead of always setting it to '1'. Bumped in r1058523.  *  * The bump to 25 introduced the NODES_CURRENT view. Bumped in r1071283.  *  * The bump to 26 introduced the NODES_BASE view. Bumped in r1076617.  *  * The bump to 27 stored conflict files as relpaths rather than basenames.  *   Bumped in r1089593.  *  * The bump to 28 converted any remaining references to MD5 checksums  *   to SHA1 checksums. Bumped in r1095214.  *  * The bump to 29 renamed the pristine files from '<SHA1>' to '<SHA1>.svn-base'  * and introduced the EXTERNALS store. Bumped in r1129286.  *  * == 1.7.x shipped with format 29  *  * The bump to 30 switched the conflict storage to a skel inside conflict_data.  * Also clears some known invalid state. Bumped in r1387742.  *  * The bump to 31 added the inherited_props column in the NODES table.  * Bumped in r1395109.  *  * == 1.8.x shipped with format 31  *  * Please document any further format changes here.  */
define|#
directive|define
name|SVN_WC__VERSION
value|31
comment|/* Formats<= this have no concept of "revert text-base/props".  */
define|#
directive|define
name|SVN_WC__NO_REVERT_FILES
value|4
comment|/* A version<= this has wcprops stored in one file per entry. */
define|#
directive|define
name|SVN_WC__WCPROPS_MANY_FILES_VERSION
value|7
comment|/* A version< this can have urls that aren't canonical according to the new    rules. See issue #2475. */
define|#
directive|define
name|SVN_WC__CHANGED_CANONICAL_URLS
value|10
comment|/* The format number written to wc-ng working copies so that old clients    can recognize them as "newer Subversion"'s working copies. */
define|#
directive|define
name|SVN_WC__NON_ENTRIES
value|12
define|#
directive|define
name|SVN_WC__NON_ENTRIES_STRING
value|"12\n"
comment|/* A version< this uses the old 'entries' file mechanism.  */
define|#
directive|define
name|SVN_WC__WC_NG_VERSION
value|12
comment|/* In this version, the wcprops are "lost" between files and wc.db. We want    to ignore them in upgrades.  */
define|#
directive|define
name|SVN_WC__WCPROPS_LOST
value|12
comment|/* A version< this has no work queue (see workqueue.h).  */
define|#
directive|define
name|SVN_WC__HAS_WORK_QUEUE
value|13
comment|/* While we still have this DB version we should verify if there is    sqlite_stat1 table on opening */
define|#
directive|define
name|SVN_WC__ENSURE_STAT1_TABLE
value|31
comment|/* Return a string indicating the released version (or versions) of  * Subversion that used WC format number WC_FORMAT, or some other  * suitable string if no released version used WC_FORMAT.  *  * ### It's not ideal to encode this sort of knowledge in this low-level  * library.  On the other hand, it doesn't need to be updated often and  * should be easily found when it does need to be updated.  */
specifier|const
name|char
modifier|*
name|svn_wc__version_string_from_format
parameter_list|(
name|int
name|wc_format
parameter_list|)
function_decl|;
comment|/* Return true iff error E indicates an "is not a working copy" type    of error, either because something wasn't a working copy at all, or    because it's a working copy from a previous version (in need of    upgrade). */
define|#
directive|define
name|SVN_WC__ERR_IS_NOT_CURRENT_WC
parameter_list|(
name|e
parameter_list|)
define|\
value|((e->apr_err == SVN_ERR_WC_NOT_WORKING_COPY) || \              (e->apr_err == SVN_ERR_WC_UPGRADE_REQUIRED))
comment|/*** Context handling ***/
struct|struct
name|svn_wc_context_t
block|{
comment|/* The wc_db handle for this working copy. */
name|svn_wc__db_t
modifier|*
name|db
decl_stmt|;
comment|/* Close the DB when we destroy this context?      (This is used inside backward compat wrappers, and should only be       modified by the proper create() functions. */
name|svn_boolean_t
name|close_db_on_destroy
decl_stmt|;
comment|/* The state pool for this context. */
name|apr_pool_t
modifier|*
name|state_pool
decl_stmt|;
block|}
struct|;
comment|/**  * Just like svn_wc_context_create(), only use the provided DB to construct  * the context.  *  * Even though DB is not allocated from the same pool at *WC_CTX, it is  * expected to remain open throughout the life of *WC_CTX.  */
name|svn_error_t
modifier|*
name|svn_wc__context_create_with_db
parameter_list|(
name|svn_wc_context_t
modifier|*
modifier|*
name|wc_ctx
parameter_list|,
name|svn_config_t
modifier|*
name|config
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/*** Committed Queue ***/
comment|/**  * Return the pool associated with QUEUE.  (This so we can keep some  * deprecated functions that need to peek inside the QUEUE struct in  * deprecated.c).  */
name|apr_pool_t
modifier|*
name|svn_wc__get_committed_queue_pool
parameter_list|(
specifier|const
name|struct
name|svn_wc_committed_queue_t
modifier|*
name|queue
parameter_list|)
function_decl|;
comment|/*** Update traversals. ***/
struct|struct
name|svn_wc_traversal_info_t
block|{
comment|/* The pool in which this structure and everything inside it is      allocated. */
name|apr_pool_t
modifier|*
name|pool
decl_stmt|;
comment|/* The before and after values of the SVN_PROP_EXTERNALS property,    * for each directory on which that property changed.  These have    * the same layout as those returned by svn_wc_edited_externals().    *    * The hashes, their keys, and their values are allocated in the    * above pool.    */
name|apr_hash_t
modifier|*
name|externals_old
decl_stmt|;
name|apr_hash_t
modifier|*
name|externals_new
decl_stmt|;
comment|/* The ambient depths of the working copy directories.  The keys are      working copy paths (as for svn_wc_edited_externals()), the values      are the result of svn_depth_to_word(depth_of_each_dir). */
name|apr_hash_t
modifier|*
name|depths
decl_stmt|;
block|}
struct|;
comment|/*** Names and file/dir operations in the administrative area. ***/
comment|/** The files within the administrative subdir. **/
define|#
directive|define
name|SVN_WC__ADM_FORMAT
value|"format"
define|#
directive|define
name|SVN_WC__ADM_ENTRIES
value|"entries"
define|#
directive|define
name|SVN_WC__ADM_TMP
value|"tmp"
define|#
directive|define
name|SVN_WC__ADM_PRISTINE
value|"pristine"
define|#
directive|define
name|SVN_WC__ADM_NONEXISTENT_PATH
value|"nonexistent-path"
comment|/* The basename of the ".prej" file, if a directory ever has property    conflicts.  This .prej file will appear *within* the conflicted    directory.  */
define|#
directive|define
name|SVN_WC__THIS_DIR_PREJ
value|"dir_conflicts"
comment|/* A few declarations for stuff in util.c.  * If this section gets big, move it all out into a new util.h file. */
comment|/* Ensure that DIR exists. */
name|svn_error_t
modifier|*
name|svn_wc__ensure_directory
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Return a hash keyed by 'const char *' property names and with    'svn_string_t *' values built from PROPS (which is an array of    pointers to svn_prop_t's) or to NULL if PROPS is NULL or empty.    PROPS items which lack a value will be ignored.  If PROPS contains    multiple properties with the same name, each successive such item    reached in a walk from the beginning to the end of the array will    overwrite the previous in the returned hash.     NOTE: While the returned hash will be allocated in RESULT_POOL, the    items it holds will share storage with those in PROPS.     ### This is rather the reverse of svn_prop_hash_to_array(), except    ### that function's arrays contains svn_prop_t's, whereas this    ### one's contains *pointers* to svn_prop_t's.  So much for    ### consistency.  */
name|apr_hash_t
modifier|*
name|svn_wc__prop_array_to_hash
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|props
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Set *MODIFIED_P to non-zero if LOCAL_ABSPATH's text is modified with  * regard to the base revision, else set *MODIFIED_P to zero.  *  * If EXACT_COMPARISON is FALSE, translate LOCAL_ABSPATH's EOL  * style and keywords to repository-normal form according to its properties,  * and compare the result with the text base.  * Usually, EXACT_COMPARISON should be FALSE.  *  * If LOCAL_ABSPATH does not exist, consider it unmodified.  If it exists  * but is not under revision control (not even scheduled for  * addition), return the error SVN_WC_PATH_NOT_FOUND.  *  * If the text is unmodified and a write-lock is held this function  * will ensure that the last-known-unmodified timestamp and  * filesize of the file as recorded in DB matches the corresponding  * attributes of the actual file.  (This is often referred to as  * "timestamp repair", and serves to help future unforced is-modified  * checks return quickly if the file remains untouched.)  */
name|svn_error_t
modifier|*
name|svn_wc__internal_file_modified_p
parameter_list|(
name|svn_boolean_t
modifier|*
name|modified_p
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|exact_comparison
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Prepare to merge a file content change into the working copy.     This does not merge properties; see svn_wc__merge_props() for that.    This does not necessarily change the file TARGET_ABSPATH on disk; it    may instead return work items that will replace the file on disk when    they are run.  ### Can we be more consistent about this?     Merge the difference between LEFT_ABSPATH and RIGHT_ABSPATH into    TARGET_ABSPATH.     Set *WORK_ITEMS to the appropriate work queue operations.     If there are any conflicts, append a conflict description to    *CONFLICT_SKEL.  (First allocate *CONFLICT_SKEL from RESULT_POOL if    it is initially NULL.  CONFLICT_SKEL itself must not be NULL.)    Also, unless it is considered to be a 'binary' file, mark any    conflicts in the text of the file TARGET_ABSPATH using LEFT_LABEL,    RIGHT_LABEL and TARGET_LABEL.     Set *MERGE_OUTCOME to indicate the result.     When DRY_RUN is true, no actual changes are made to the working copy.     If DIFF3_CMD is specified, the given external diff3 tool will    be used instead of our built in diff3 routines.     When MERGE_OPTIONS are specified, they are used by the internal    diff3 routines, or passed to the external diff3 tool.     WRI_ABSPATH describes in which working copy information should be    retrieved. (Interesting for merging file externals).     OLD_ACTUAL_PROPS is the set of actual properties before merging; used for    detranslating the file before merging.  This is necessary because, in    the case of updating, the update can have sent new properties, so we    cannot simply fetch and use the current actual properties.       ### Is OLD_ACTUAL_PROPS still necessary, now that we first prepare the          content change and property change and then apply them both to          the WC together?     Property changes sent by the update are provided in PROP_DIFF.     For a complete description, see svn_wc_merge5() for which this is    the (loggy) implementation.     *WORK_ITEMS will be allocated in RESULT_POOL. All temporary allocations    will be performed in SCRATCH_POOL. */
name|svn_error_t
modifier|*
name|svn_wc__internal_merge
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|work_items
parameter_list|,
name|svn_skel_t
modifier|*
modifier|*
name|conflict_skel
parameter_list|,
name|enum
name|svn_wc_merge_outcome_t
modifier|*
name|merge_outcome
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|left_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|right_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|target_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|wri_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|left_label
parameter_list|,
specifier|const
name|char
modifier|*
name|right_label
parameter_list|,
specifier|const
name|char
modifier|*
name|target_label
parameter_list|,
name|apr_hash_t
modifier|*
name|old_actual_props
parameter_list|,
name|svn_boolean_t
name|dry_run
parameter_list|,
specifier|const
name|char
modifier|*
name|diff3_cmd
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|merge_options
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|prop_diff
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* A default error handler for svn_wc_walk_entries3().  Returns ERR in    all cases. */
name|svn_error_t
modifier|*
name|svn_wc__walker_default_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_error_t
modifier|*
name|err
parameter_list|,
name|void
modifier|*
name|walk_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Set *EDITOR and *EDIT_BATON to an ambient-depth-based filtering  * editor that wraps WRAPPED_EDITOR and WRAPPED_BATON.  This is only  * required for operations where the requested depth is @c  * svn_depth_unknown and the server's editor driver doesn't understand  * depth.  It is safe for *EDITOR and *EDIT_BATON to start as  * WRAPPED_EDITOR and WRAPPED_BATON.  *  * ANCHOR, TARGET, and DB are as in svn_wc_get_update_editor3.  *  * @a requested_depth must be one of the following depth values:  * @c svn_depth_infinity, @c svn_depth_empty, @c svn_depth_files,  * @c svn_depth_immediates, or @c svn_depth_unknown.  *  * Allocations are done in POOL.  */
name|svn_error_t
modifier|*
name|svn_wc__ambient_depth_filter_editor
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|anchor_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|wrapped_editor
parameter_list|,
name|void
modifier|*
name|wrapped_edit_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Similar to svn_wc_conflicted_p3(), but with a wc_db parameter in place of  * a wc_context. */
name|svn_error_t
modifier|*
name|svn_wc__internal_conflicted_p
parameter_list|(
name|svn_boolean_t
modifier|*
name|text_conflicted_p
parameter_list|,
name|svn_boolean_t
modifier|*
name|prop_conflicted_p
parameter_list|,
name|svn_boolean_t
modifier|*
name|tree_conflicted_p
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Similar to svn_wc__internal_conflicted_p(), but ignores  * moved-away-edit tree conflicts.  If CONFLICT_IGNORED_P is not NULL  * then sets *CONFLICT_IGNORED_P TRUE if a tree-conflict is ignored  * and FALSE otherwise. Also ignores text and property conflicts if  * TREE_ONLY is TRUE */
name|svn_error_t
modifier|*
name|svn_wc__conflicted_for_update_p
parameter_list|(
name|svn_boolean_t
modifier|*
name|conflicted_p
parameter_list|,
name|svn_boolean_t
modifier|*
name|conflict_ignored_p
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|tree_only
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Internal version of svn_wc_transmit_text_deltas3(). */
name|svn_error_t
modifier|*
name|svn_wc__internal_transmit_text_deltas
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|tempfile
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
modifier|*
name|new_text_base_md5_checksum
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
modifier|*
name|new_text_base_sha1_checksum
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|fulltext
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|file_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Internal version of svn_wc_transmit_prop_deltas2(). */
name|svn_error_t
modifier|*
name|svn_wc__internal_transmit_prop_deltas
parameter_list|(
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Library-internal version of svn_wc_ensure_adm4(). */
name|svn_error_t
modifier|*
name|svn_wc__internal_ensure_adm
parameter_list|(
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_uuid
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Library-internal version of svn_wc__changelist_match(). */
name|svn_boolean_t
name|svn_wc__internal_changelist_match
parameter_list|(
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|apr_hash_t
modifier|*
name|clhash
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Library-internal version of svn_wc_walk_status(), which see. */
name|svn_error_t
modifier|*
name|svn_wc__internal_walk_status
parameter_list|(
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|get_all
parameter_list|,
name|svn_boolean_t
name|no_ignore
parameter_list|,
name|svn_boolean_t
name|ignore_text_mods
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|ignore_patterns
parameter_list|,
name|svn_wc_status_func4_t
name|status_func
parameter_list|,
name|void
modifier|*
name|status_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** A callback invoked by the generic node-walker function.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_wc__node_found_func_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_node_kind_t
name|kind
parameter_list|,
name|void
modifier|*
name|walk_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Call @a walk_callback with @a walk_baton for @a local_abspath and all    nodes underneath it, restricted by @a walk_depth, and possibly    @a changelists.     If @a show_hidden is true, include hidden nodes, else ignore them.    If CHANGELISTS is non-NULL and non-empty, filter thereon. */
name|svn_error_t
modifier|*
name|svn_wc__internal_walk_children
parameter_list|(
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|show_hidden
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|changelists
parameter_list|,
name|svn_wc__node_found_func_t
name|walk_callback
parameter_list|,
name|void
modifier|*
name|walk_baton
parameter_list|,
name|svn_depth_t
name|walk_depth
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Library-internal version of svn_wc_remove_from_revision_control2,    which see.*/
name|svn_error_t
modifier|*
name|svn_wc__internal_remove_from_revision_control
parameter_list|(
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|destroy_wf
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Internal version of svn_wc__node_get_origin() */
name|svn_error_t
modifier|*
name|svn_wc__internal_get_origin
parameter_list|(
name|svn_boolean_t
modifier|*
name|is_copy
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_relpath
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_root_url
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_uuid
parameter_list|,
name|svn_depth_t
modifier|*
name|depth
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|copy_root_abspath
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|scan_deleted
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Upgrade the wc sqlite database given in SDB for the wc located at    WCROOT_ABSPATH. It's current/starting format is given by START_FORMAT.    After the upgrade is complete (to as far as the automatic upgrade will    perform), the resulting format is RESULT_FORMAT. All allocations are    performed in SCRATCH_POOL.  */
name|svn_error_t
modifier|*
name|svn_wc__upgrade_sdb
parameter_list|(
name|int
modifier|*
name|result_format
parameter_list|,
specifier|const
name|char
modifier|*
name|wcroot_abspath
parameter_list|,
name|svn_sqlite__db_t
modifier|*
name|sdb
parameter_list|,
name|int
name|start_format
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Create a conflict skel from the old separated data */
name|svn_error_t
modifier|*
name|svn_wc__upgrade_conflict_skel_from_raw
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|conflicts
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|wri_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_old
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_wrk
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_new
parameter_list|,
specifier|const
name|char
modifier|*
name|prej_file
parameter_list|,
specifier|const
name|char
modifier|*
name|tree_conflict_data
parameter_list|,
name|apr_size_t
name|tree_conflict_len
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_wc__wipe_postupgrade
parameter_list|(
specifier|const
name|char
modifier|*
name|dir_abspath
parameter_list|,
name|svn_boolean_t
name|whole_admin
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Ensure LOCAL_ABSPATH is still locked in DB.  Returns the error  * SVN_ERR_WC_NOT_LOCKED if this is not the case.  */
name|svn_error_t
modifier|*
name|svn_wc__write_check
parameter_list|(
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Read into CONFLICTS svn_wc_conflict_description2_t* structs  * for all conflicts that have LOCAL_ABSPATH as victim.  *  * Victim must be versioned or be part of a tree conflict.  *  * If CREATE_TEMPFILES is TRUE, create temporary files for property conflicts.  *  * Allocate *CONFLICTS in RESULT_POOL and do temporary allocations in  * SCRATCH_POOL  */
name|svn_error_t
modifier|*
name|svn_wc__read_conflicts
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
modifier|*
name|conflicts
parameter_list|,
name|svn_skel_t
modifier|*
modifier|*
name|conflict_skel
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|create_tempfiles
parameter_list|,
name|svn_boolean_t
name|only_tree_conflict
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Perform the actual merge of file changes between an original file,    identified by ORIGINAL_CHECKSUM (an empty file if NULL) to a new file    identified by NEW_CHECKSUM in the working copy identified by WRI_ABSPATH.     Merge the result into LOCAL_ABSPATH, which is part of the working copy    identified by WRI_ABSPATH. Use OLD_REVISION and TARGET_REVISION for naming    the intermediate files.     Set *FOUND_TEXT_CONFLICT to TRUE when the merge encountered a conflict,    otherwise to FALSE.     The rest of the arguments are passed to svn_wc__internal_merge.  */
name|svn_error_t
modifier|*
name|svn_wc__perform_file_merge
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|work_items
parameter_list|,
name|svn_skel_t
modifier|*
modifier|*
name|conflict_skel
parameter_list|,
name|svn_boolean_t
modifier|*
name|found_conflict
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|wri_abspath
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
name|new_checksum
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
name|original_checksum
parameter_list|,
name|apr_hash_t
modifier|*
name|old_actual_props
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|ext_patterns
parameter_list|,
name|svn_revnum_t
name|old_revision
parameter_list|,
name|svn_revnum_t
name|target_revision
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|propchanges
parameter_list|,
specifier|const
name|char
modifier|*
name|diff3_cmd
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Couple of random helpers for the Ev2 shims.    ### These will eventually be obsoleted and removed. */
struct|struct
name|svn_wc__shim_fetch_baton_t
block|{
name|svn_wc__db_t
modifier|*
name|db
decl_stmt|;
specifier|const
name|char
modifier|*
name|base_abspath
decl_stmt|;
name|svn_boolean_t
name|fetch_base
decl_stmt|;
block|}
struct|;
comment|/* Using a BATON of struct shim_fetch_baton, return KIND for PATH. */
name|svn_error_t
modifier|*
name|svn_wc__fetch_kind_func
parameter_list|(
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|base_revision
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Using a BATON of struct shim_fetch_baton, return PROPS for PATH. */
name|svn_error_t
modifier|*
name|svn_wc__fetch_props_func
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|base_revision
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Using a BATON of struct shim_fetch_baton, return a delta base for PATH. */
name|svn_error_t
modifier|*
name|svn_wc__fetch_base_func
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|filename
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|base_revision
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Find duplicate targets in *EXTERNALS, a list of svn_wc_external_item2_t*  * elements, and store each target string in *DUPLICATE_TARGETS as const  * char * elements. *DUPLICATE_TARGETS will be NULL if no duplicates were  * found. */
name|svn_error_t
modifier|*
name|svn_wc__externals_find_target_dups
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|duplicate_targets
parameter_list|,
name|apr_array_header_t
modifier|*
name|externals
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_wc__node_has_local_mods
parameter_list|(
name|svn_boolean_t
modifier|*
name|modified
parameter_list|,
name|svn_boolean_t
modifier|*
name|all_edits_are_deletes
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|ignore_unversioned
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_WC_H */
end_comment

end_unit

