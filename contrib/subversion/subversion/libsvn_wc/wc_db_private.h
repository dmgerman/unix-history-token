begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  */
end_comment

begin_comment
comment|/* This file is not for general consumption; it should only be used by    wc_db.c. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_WC__I_AM_WC_DB
end_ifndef

begin_error
error|#
directive|error
literal|"You should not be using these data structures directly"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_WC__I_AM_WC_DB */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|WC_DB_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|WC_DB_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|"wc_db.h"
end_include

begin_escape
end_escape

begin_struct
struct|struct
name|svn_wc__db_t
block|{
comment|/* We need the config whenever we run into a new WC directory, in order      to figure out where we should look for the corresponding datastore. */
name|svn_config_t
modifier|*
name|config
decl_stmt|;
comment|/* Should we fail with SVN_ERR_WC_UPGRADE_REQUIRED when it is      opened, and found to be not-current?  */
name|svn_boolean_t
name|verify_format
decl_stmt|;
comment|/* Should we ensure the WORK_QUEUE is empty when a DB is locked    * for writing?  */
name|svn_boolean_t
name|enforce_empty_wq
decl_stmt|;
comment|/* Should we open Sqlite databases EXCLUSIVE */
name|svn_boolean_t
name|exclusive
decl_stmt|;
comment|/* Busy timeout in ms., 0 for the libsvn_subr default. */
name|apr_int32_t
name|timeout
decl_stmt|;
comment|/* Map a given working copy directory to its relevant data.      const char *local_abspath -> svn_wc__db_wcroot_t *wcroot  */
name|apr_hash_t
modifier|*
name|dir_data
decl_stmt|;
comment|/* A few members to assist with caching of kind values for paths.  See      get_path_kind() for use. */
struct|struct
block|{
name|svn_stringbuf_t
modifier|*
name|abspath
decl_stmt|;
name|svn_node_kind_t
name|kind
decl_stmt|;
block|}
name|parse_cache
struct|;
comment|/* As we grow the state of this DB, allocate that state here. */
name|apr_pool_t
modifier|*
name|state_pool
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Hold information about an owned lock */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|svn_wc__db_wclock_t
block|{
comment|/* Relative path of the lock root */
specifier|const
name|char
modifier|*
name|local_relpath
decl_stmt|;
comment|/* Number of levels locked (0 for infinity) */
name|int
name|levels
decl_stmt|;
block|}
name|svn_wc__db_wclock_t
typedef|;
end_typedef

begin_comment
comment|/** Hold information about a WCROOT.  *  * This structure is referenced by all per-directory handles underneath it.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|svn_wc__db_wcroot_t
block|{
comment|/* Location of this wcroot in the filesystem.  */
specifier|const
name|char
modifier|*
name|abspath
decl_stmt|;
comment|/* The SQLite database containing the metadata for everything in      this wcroot.  */
name|svn_sqlite__db_t
modifier|*
name|sdb
decl_stmt|;
comment|/* The WCROOT.id for this directory (and all its children).  */
name|apr_int64_t
name|wc_id
decl_stmt|;
comment|/* The format of this wcroot's metadata storage (see wc.h). If the      format has not (yet) been determined, this will be UNKNOWN_FORMAT.  */
name|int
name|format
decl_stmt|;
comment|/* Array of svn_wc__db_wclock_t structures (not pointers!).      Typically just one or two locks maximum. */
name|apr_array_header_t
modifier|*
name|owned_locks
decl_stmt|;
comment|/* Map a working copy directory to a cached adm_access baton.      const char *local_abspath -> svn_wc_adm_access_t *adm_access */
name|apr_hash_t
modifier|*
name|access_cache
decl_stmt|;
block|}
name|svn_wc__db_wcroot_t
typedef|;
end_typedef

begin_escape
end_escape

begin_comment
comment|/* */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_close_many_wcroots
parameter_list|(
name|apr_hash_t
modifier|*
name|roots
parameter_list|,
name|apr_pool_t
modifier|*
name|state_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Construct a new svn_wc__db_wcroot_t. The WCROOT_ABSPATH and SDB parameters    must have lifetime of at least RESULT_POOL.  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_pdh_create_wcroot
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|wcroot_abspath
parameter_list|,
name|svn_sqlite__db_t
modifier|*
name|sdb
parameter_list|,
name|apr_int64_t
name|wc_id
parameter_list|,
name|int
name|format
parameter_list|,
name|svn_boolean_t
name|verify_format
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* For a given LOCAL_ABSPATH, figure out what sqlite database (WCROOT) to    use and the RELPATH within that wcroot.     *LOCAL_RELPATH will be allocated within RESULT_POOL. Temporary allocations    will be made in SCRATCH_POOL.     *WCROOT will be allocated within DB->STATE_POOL.     Certain internal structures will be allocated in DB->STATE_POOL. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_wcroot_parse_local_abspath
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|local_relpath
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Return an error if the work queue in SDB is non-empty. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_verify_no_work
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|sdb
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Assert that the given WCROOT is usable.    NOTE: the expression is multiply-evaluated!!  */
end_comment

begin_define
define|#
directive|define
name|VERIFY_USABLE_WCROOT
parameter_list|(
name|wcroot
parameter_list|)
value|SVN_ERR_ASSERT(               \     (wcroot) != NULL&& (wcroot)->format == SVN_WC__VERSION)
end_define

begin_comment
comment|/* Check if the WCROOT is usable for light db operations such as path    calculations */
end_comment

begin_define
define|#
directive|define
name|CHECK_MINIMAL_WCROOT
parameter_list|(
name|wcroot
parameter_list|,
name|abspath
parameter_list|,
name|scratch_pool
parameter_list|)
define|\
value|do                                                                  \     {                                                                   \       if (wcroot == NULL)                                               \         return svn_error_createf(SVN_ERR_WC_NOT_WORKING_COPY, NULL,     \                     _("The node '%s' is not in a working copy."),       \                              svn_dirent_local_style(wri_abspath,        \                                                     scratch_pool));     \     }                                                                   \     while (0)
end_define

begin_comment
comment|/* Calculates the depth of the relpath below "" */
end_comment

begin_function
name|APR_INLINE
specifier|static
name|int
name|relpath_depth
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|)
block|{
name|int
name|n
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|*
name|relpath
operator|==
literal|'\0'
condition|)
return|return
literal|0
return|;
do|do
block|{
if|if
condition|(
operator|*
name|relpath
operator|==
literal|'/'
condition|)
name|n
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|*
operator|(
operator|++
name|relpath
operator|)
condition|)
do|;
return|return
name|n
return|;
block|}
end_function

begin_comment
comment|/* */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_util_fetch_wc_id
parameter_list|(
name|apr_int64_t
modifier|*
name|wc_id
parameter_list|,
name|svn_sqlite__db_t
modifier|*
name|sdb
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Open a connection in *SDB to the WC database found in the WC metadata  * directory inside DIR_ABSPATH, having the filename SDB_FNAME.  *  * SMODE, EXCLUSIVE and TIMEOUT are passed to svn_sqlite__open().  *  * Register MY_STATEMENTS, or if that is null, the default set of WC DB  * statements, as the set of statements to be prepared now and executed  * later.  MY_STATEMENTS (the strings and the array itself) is not duplicated  * internally, and should have a lifetime at least as long as RESULT_POOL.  * See svn_sqlite__open() for details. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_util_open_db
parameter_list|(
name|svn_sqlite__db_t
modifier|*
modifier|*
name|sdb
parameter_list|,
specifier|const
name|char
modifier|*
name|dir_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|sdb_fname
parameter_list|,
name|svn_sqlite__mode_t
name|smode
parameter_list|,
name|svn_boolean_t
name|exclusive
parameter_list|,
name|apr_int32_t
name|timeout
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|my_statements
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_wq_add() but taking WCROOT */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_wq_add_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|svn_skel_t
modifier|*
name|work_item
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_read_info(), but taking WCROOT+LOCAL_RELPATH instead of    DB+LOCAL_ABSPATH, and outputting repos ids instead of URL+UUID. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_read_info_internal
parameter_list|(
name|svn_wc__db_status_t
modifier|*
name|status
parameter_list|,
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_relpath
parameter_list|,
name|apr_int64_t
modifier|*
name|repos_id
parameter_list|,
name|svn_revnum_t
modifier|*
name|changed_rev
parameter_list|,
name|apr_time_t
modifier|*
name|changed_date
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|changed_author
parameter_list|,
name|svn_depth_t
modifier|*
name|depth
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
modifier|*
name|checksum
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|original_repos_relpath
parameter_list|,
name|apr_int64_t
modifier|*
name|original_repos_id
parameter_list|,
name|svn_revnum_t
modifier|*
name|original_revision
parameter_list|,
name|svn_wc__db_lock_t
modifier|*
modifier|*
name|lock
parameter_list|,
name|svn_filesize_t
modifier|*
name|recorded_size
parameter_list|,
name|apr_time_t
modifier|*
name|recorded_mod_time
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|changelist
parameter_list|,
name|svn_boolean_t
modifier|*
name|conflicted
parameter_list|,
name|svn_boolean_t
modifier|*
name|op_root
parameter_list|,
name|svn_boolean_t
modifier|*
name|had_props
parameter_list|,
name|svn_boolean_t
modifier|*
name|props_mod
parameter_list|,
name|svn_boolean_t
modifier|*
name|have_base
parameter_list|,
name|svn_boolean_t
modifier|*
name|have_more_work
parameter_list|,
name|svn_boolean_t
modifier|*
name|have_work
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_base_get_info(), but taking WCROOT+LOCAL_RELPATH instead of    DB+LOCAL_ABSPATH and outputting REPOS_ID instead of URL+UUID. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_base_get_info_internal
parameter_list|(
name|svn_wc__db_status_t
modifier|*
name|status
parameter_list|,
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_relpath
parameter_list|,
name|apr_int64_t
modifier|*
name|repos_id
parameter_list|,
name|svn_revnum_t
modifier|*
name|changed_rev
parameter_list|,
name|apr_time_t
modifier|*
name|changed_date
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|changed_author
parameter_list|,
name|svn_depth_t
modifier|*
name|depth
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
modifier|*
name|checksum
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|target
parameter_list|,
name|svn_wc__db_lock_t
modifier|*
modifier|*
name|lock
parameter_list|,
name|svn_boolean_t
modifier|*
name|had_props
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_boolean_t
modifier|*
name|update_root
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Similar to svn_wc__db_base_get_info(), but taking WCROOT+LOCAL_RELPATH  * instead of DB+LOCAL_ABSPATH, an explicit op-depth of the node to get  * information about, and outputting REPOS_ID instead of URL+UUID, and  * without the LOCK or UPDATE_ROOT outputs.  *  * OR  *  * Similar to svn_wc__db_base_get_info_internal(), but taking an explicit  * op-depth OP_DEPTH of the node to get information about, and without the  * LOCK or UPDATE_ROOT outputs.  *  * ### [JAF] TODO: Harmonize svn_wc__db_base_get_info[_internal] with  * svn_wc__db_depth_get_info -- common API, common implementation.  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_depth_get_info
parameter_list|(
name|svn_wc__db_status_t
modifier|*
name|status
parameter_list|,
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_relpath
parameter_list|,
name|apr_int64_t
modifier|*
name|repos_id
parameter_list|,
name|svn_revnum_t
modifier|*
name|changed_rev
parameter_list|,
name|apr_time_t
modifier|*
name|changed_date
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|changed_author
parameter_list|,
name|svn_depth_t
modifier|*
name|depth
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
modifier|*
name|checksum
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|target
parameter_list|,
name|svn_boolean_t
modifier|*
name|had_props
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|int
name|op_depth
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_scan_addition_internal
parameter_list|(
name|svn_wc__db_status_t
modifier|*
name|status
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|op_root_relpath_p
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_relpath
parameter_list|,
name|apr_int64_t
modifier|*
name|repos_id
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|original_repos_relpath
parameter_list|,
name|apr_int64_t
modifier|*
name|original_repos_id
parameter_list|,
name|svn_revnum_t
modifier|*
name|original_revision
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_scan_deletion_internal
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|base_del_relpath
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|moved_to_relpath
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|work_del_relpath
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|moved_to_op_root_relpath
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Look up REPOS_ID in WCROOT->SDB and set *REPOS_ROOT_URL and/or *REPOS_UUID    to its root URL and UUID respectively.  If REPOS_ID is INVALID_REPOS_ID,    use NULL for both URL and UUID.  Either or both output parameters may be    NULL if not wanted.  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_fetch_repos_info
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|repos_root_url
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|repos_uuid
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
name|apr_int64_t
name|repos_id
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_read_conflict(), but with WCROOT+LOCAL_RELPATH instead of    DB+LOCAL_ABSPATH, and outputting relpaths instead of abspaths. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_read_conflict_internal
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|conflict
parameter_list|,
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_op_mark_conflict(), but with WCROOT+LOCAL_RELPATH instead of    DB+LOCAL_ABSPATH. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_mark_conflict_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
specifier|const
name|svn_skel_t
modifier|*
name|conflict_skel
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_escape
end_escape

begin_comment
comment|/* Transaction handling */
end_comment

begin_comment
comment|/* Evaluate the expression EXPR within a transaction.  *  * Begin a transaction in WCROOT's DB; evaluate the expression EXPR, which would  * typically be a function call that does some work in DB; finally commit  * the transaction if EXPR evaluated to SVN_NO_ERROR, otherwise roll back  * the transaction.  */
end_comment

begin_define
define|#
directive|define
name|SVN_WC__DB_WITH_TXN
parameter_list|(
name|expr
parameter_list|,
name|wcroot
parameter_list|)
define|\
value|SVN_SQLITE__WITH_LOCK(expr, (wcroot)->sdb)
end_define

begin_comment
comment|/* Evaluate the expressions EXPR1..EXPR4 within a transaction, returning the  * first error if an error occurs.  *  * Begin a transaction in WCROOT's DB; evaluate the expressions, which would  * typically be  function calls that do some work in DB; finally commit  * the transaction if EXPR evaluated to SVN_NO_ERROR, otherwise roll back  * the transaction.  */
end_comment

begin_define
define|#
directive|define
name|SVN_WC__DB_WITH_TXN4
parameter_list|(
name|expr1
parameter_list|,
name|expr2
parameter_list|,
name|expr3
parameter_list|,
name|expr4
parameter_list|,
name|wcroot
parameter_list|)
define|\
value|SVN_SQLITE__WITH_LOCK4(expr1, expr2, expr3, expr4, (wcroot)->sdb)
end_define

begin_comment
comment|/* Update the single op-depth layer in the move destination subtree    rooted at DST_RELPATH to make it match the move source subtree    rooted at SRC_RELPATH. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_op_copy_layer_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|src_op_relpath
parameter_list|,
name|int
name|src_op_depth
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_op_relpath
parameter_list|,
name|svn_skel_t
modifier|*
name|conflict
parameter_list|,
name|svn_skel_t
modifier|*
name|work_items
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_op_make_copy but with wcroot, local_relpath */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_op_make_copy_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|svn_boolean_t
name|move_move_info
parameter_list|,
specifier|const
name|svn_skel_t
modifier|*
name|conflicts
parameter_list|,
specifier|const
name|svn_skel_t
modifier|*
name|work_items
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Extract the moved-to information for LOCAL_RELPATH as it existed    at OP-DEPTH.  The output paths are optional and set to NULL    if there is no move, otherwise:     *MOVE_SRC_RELPATH: the path that was moved (LOCAL_RELPATH or one                       of its ancestors)     *MOVE_DST_RELPATH: The path *MOVE_SRC_RELPATH was moved to.     *DELETE_RELPATH: The path at which LOCAL_RELPATH was removed (                     *MOVE_SRC_RELPATH or one of its ancestors)     Given a path A/B/C with A/B moved to X and A deleted then for A/B/C:       MOVE_SRC_RELPATH is A/B      MOVE_DST_RELPATH is X      DELETE_RELPATH is A       X/C can be calculated if necessesary, like with the other      scan functions.     This function returns SVN_ERR_WC_PATH_NOT_FOUND if LOCAL_RELPATH didn't    exist at OP_DEPTH, or when it is not shadowed.     ### Think about combining with scan_deletion?  Also with    ### scan_addition to get moved-to for replaces?  Do we need to    ### return the op-root of the move source, i.e. A/B in the example    ### above?  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_scan_moved_to_internal
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|move_src_relpath
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|move_dst_relpath
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|delete_relpath
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|int
name|op_depth
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_op_set_props, but updates ACTUAL_NODE directly without    comparing with the pristine properties, etc. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_op_set_props_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|apr_hash_t
modifier|*
name|props
parameter_list|,
name|svn_boolean_t
name|clear_recorded_info
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_read_props_internal
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Like svn_wc__db_wclock_owns_lock() but taking WCROOT+LOCAL_RELPATH instead    of DB+LOCAL_ABSPATH.  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_wclock_owns_lock_internal
parameter_list|(
name|svn_boolean_t
modifier|*
name|own_lock
parameter_list|,
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|svn_boolean_t
name|exact
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Do a post-drive revision bump for the moved-away destination for    any move sources under LOCAL_RELPATH.  This is called from within    the revision bump transaction after the tree at LOCAL_RELPATH has    been bumped. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_bump_moved_away
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Unbreak the move from LOCAL_RELPATH on op-depth in WCROOT, by making    the destination DST_RELPATH a normal copy. SRC_OP_DEPTH is the op-depth    where the move_to information is stored */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_op_break_move_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|src_relpath
parameter_list|,
name|int
name|delete_op_depth
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_relpath
parameter_list|,
specifier|const
name|svn_skel_t
modifier|*
name|work_items
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_op_mark_resolved_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
name|svn_boolean_t
name|resolved_text
parameter_list|,
name|svn_boolean_t
name|resolved_props
parameter_list|,
name|svn_boolean_t
name|resolved_tree
parameter_list|,
specifier|const
name|svn_skel_t
modifier|*
name|work_items
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* op_depth is the depth at which the node is added. */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_op_raise_moved_away_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
specifier|const
name|char
modifier|*
name|local_relpath
parameter_list|,
name|int
name|op_depth
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
name|svn_wc_operation_t
name|operation
parameter_list|,
name|svn_wc_conflict_action_t
name|action
parameter_list|,
specifier|const
name|svn_wc_conflict_version_t
modifier|*
name|old_version
parameter_list|,
specifier|const
name|svn_wc_conflict_version_t
modifier|*
name|new_version
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_update_move_list_notify
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
name|svn_revnum_t
name|old_revision
parameter_list|,
name|svn_revnum_t
name|new_revision
parameter_list|,
name|svn_wc_notify_func2_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|svn_error_t
modifier|*
name|svn_wc__db_verify_db_full_internal
parameter_list|(
name|svn_wc__db_wcroot_t
modifier|*
name|wcroot
parameter_list|,
name|svn_wc__db_verify_cb_t
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* WC_DB_PRIVATE_H */
end_comment

end_unit

