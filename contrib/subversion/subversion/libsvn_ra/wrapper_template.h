begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  */
end_comment

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|<apr_time.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_props.h"
end_include

begin_include
include|#
directive|include
file|"svn_compat.h"
end_include

begin_comment
comment|/* This file is a template for a compatibility wrapper for an RA library.  * It contains an svn_ra_plugin_t and wrappers for all of its functions,  * implemented in terms of svn_ra__vtable_t functions.  It also contains  * the implementations of an svn_ra_FOO_init for the FOO RA library.  *  * A file in the RA library includes this file, providing the  * following macros before inclusion:  *  * NAME             The library name, e.g. "ra_local".  * DESCRIPTION      The short library description as a string constant.  * VTBL             The name of an svn_ra_vtable_t object for the library.  * INITFUNC         The init function for the library, e.g. svn_ra_local__init.  * COMPAT_INITFUNC  The compatibility init function, e.g. svn_ra_local_init.  */
end_comment

begin_comment
comment|/* Check that all our "arguments" are defined. */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|NAME
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|DESCRIPTION
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|VTBL
argument_list|)
expr|\
operator|||
operator|!
name|defined
argument_list|(
name|INITFUNC
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|COMPAT_INITFUNC
argument_list|)
end_if

begin_error
error|#
directive|error
error|Missing define for RA compatibility wrapper.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_open
parameter_list|(
name|void
modifier|*
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_URL
parameter_list|,
specifier|const
name|svn_ra_callbacks_t
modifier|*
name|callbacks
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|config
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
comment|/* Here, we should be calling svn_ra_create_callbacks to initialize    * the svn_ra_callbacks2_t structure.  However, doing that    * introduces a circular dependancy between libsvn_ra and    * libsvn_ra_{local,neon,serf,svn}, which include    * wrapper_template.h.  In turn, circular dependancies break the    * build on win32 (and possibly other systems).    *    * In order to avoid this happening at all, the code of    * svn_ra_create_callbacks is duplicated here.  This is evil, but    * the alternative (creating a new ra_util library) would be massive    * overkill for the time being.  Just be sure to keep the following    * line and the code of svn_ra_create_callbacks in sync.  */
name|apr_pool_t
modifier|*
name|sesspool
init|=
name|svn_pool_create
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|svn_ra_callbacks2_t
modifier|*
name|callbacks2
init|=
name|apr_pcalloc
argument_list|(
name|sesspool
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|callbacks2
argument_list|)
argument_list|)
decl_stmt|;
name|svn_ra_session_t
modifier|*
name|sess
init|=
name|apr_pcalloc
argument_list|(
name|sesspool
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|sess
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|session_url
decl_stmt|;
name|sess
operator|->
name|vtable
operator|=
operator|&
name|VTBL
expr_stmt|;
name|sess
operator|->
name|pool
operator|=
name|sesspool
expr_stmt|;
name|callbacks2
operator|->
name|open_tmp_file
operator|=
name|callbacks
operator|->
name|open_tmp_file
expr_stmt|;
name|callbacks2
operator|->
name|auth_baton
operator|=
name|callbacks
operator|->
name|auth_baton
expr_stmt|;
name|callbacks2
operator|->
name|get_wc_prop
operator|=
name|callbacks
operator|->
name|get_wc_prop
expr_stmt|;
name|callbacks2
operator|->
name|set_wc_prop
operator|=
name|callbacks
operator|->
name|set_wc_prop
expr_stmt|;
name|callbacks2
operator|->
name|push_wc_prop
operator|=
name|callbacks
operator|->
name|push_wc_prop
expr_stmt|;
name|callbacks2
operator|->
name|invalidate_wc_props
operator|=
name|callbacks
operator|->
name|invalidate_wc_props
expr_stmt|;
name|callbacks2
operator|->
name|progress_func
operator|=
name|NULL
expr_stmt|;
name|callbacks2
operator|->
name|progress_baton
operator|=
name|NULL
expr_stmt|;
name|SVN_ERR
argument_list|(
name|VTBL
operator|.
name|open_session
argument_list|(
name|sess
argument_list|,
operator|&
name|session_url
argument_list|,
name|repos_URL
argument_list|,
name|callbacks2
argument_list|,
name|callback_baton
argument_list|,
name|config
argument_list|,
name|sesspool
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
name|repos_URL
argument_list|,
name|session_url
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|svn_pool_destroy
argument_list|(
name|sesspool
argument_list|)
expr_stmt|;
return|return
name|svn_error_createf
argument_list|(
name|SVN_ERR_RA_SESSION_URL_MISMATCH
argument_list|,
name|NULL
argument_list|,
name|_
argument_list|(
literal|"Session URL '%s' does not match requested "
literal|" URL '%s', and redirection was disallowed."
argument_list|)
argument_list|,
name|session_url
argument_list|,
name|repos_URL
argument_list|)
return|;
block|}
operator|*
name|session_baton
operator|=
name|sess
expr_stmt|;
return|return
name|SVN_NO_ERROR
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_latest_revnum
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
name|svn_revnum_t
modifier|*
name|latest_revnum
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_latest_revnum
argument_list|(
name|session_baton
argument_list|,
name|latest_revnum
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_dated_revision
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|apr_time_t
name|tm
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_dated_revision
argument_list|(
name|session_baton
argument_list|,
name|revision
argument_list|,
name|tm
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_change_rev_prop
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|change_rev_prop
argument_list|(
name|session_baton
argument_list|,
name|rev
argument_list|,
name|propname
argument_list|,
name|NULL
argument_list|,
name|value
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_rev_proplist
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|rev_proplist
argument_list|(
name|session_baton
argument_list|,
name|rev
argument_list|,
name|props
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_rev_prop
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|svn_string_t
modifier|*
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|rev_prop
argument_list|(
name|session_baton
argument_list|,
name|rev
argument_list|,
name|propname
argument_list|,
name|value
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_commit_editor
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|log_msg
parameter_list|,
name|svn_commit_callback_t
name|callback
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|svn_commit_callback2_t
name|callback2
decl_stmt|;
name|void
modifier|*
name|callback2_baton
decl_stmt|;
name|apr_hash_t
modifier|*
name|revprop_table
init|=
name|apr_hash_make
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|svn_compat_wrap_commit_callback
argument_list|(
operator|&
name|callback2
argument_list|,
operator|&
name|callback2_baton
argument_list|,
name|callback
argument_list|,
name|callback_baton
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|apr_hash_set
argument_list|(
name|revprop_table
argument_list|,
name|SVN_PROP_REVISION_LOG
argument_list|,
name|APR_HASH_KEY_STRING
argument_list|,
name|svn_string_create
argument_list|(
name|log_msg
argument_list|,
name|pool
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|VTBL
operator|.
name|get_commit_editor
argument_list|(
name|session_baton
argument_list|,
name|editor
argument_list|,
name|edit_baton
argument_list|,
name|revprop_table
argument_list|,
name|callback2
argument_list|,
name|callback2_baton
argument_list|,
name|NULL
argument_list|,
name|TRUE
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_file
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
name|svn_revnum_t
modifier|*
name|fetched_rev
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_file
argument_list|(
name|session_baton
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
name|stream
argument_list|,
name|fetched_rev
argument_list|,
name|props
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_dir
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|dirents
parameter_list|,
name|svn_revnum_t
modifier|*
name|fetched_rev
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_dir
argument_list|(
name|session_baton
argument_list|,
name|dirents
argument_list|,
name|fetched_rev
argument_list|,
name|props
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
name|SVN_DIRENT_ALL
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Reporter compat code. **/
end_comment

begin_struct
struct|struct
name|compat_report_baton
block|{
specifier|const
name|svn_ra_reporter3_t
modifier|*
name|reporter
decl_stmt|;
name|void
modifier|*
name|baton
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_set_path
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|struct
name|compat_report_baton
modifier|*
name|crb
init|=
name|report_baton
decl_stmt|;
return|return
name|crb
operator|->
name|reporter
operator|->
name|set_path
argument_list|(
name|crb
operator|->
name|baton
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
name|svn_depth_infinity
argument_list|,
name|start_empty
argument_list|,
name|NULL
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_delete_path
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|struct
name|compat_report_baton
modifier|*
name|crb
init|=
name|report_baton
decl_stmt|;
return|return
name|crb
operator|->
name|reporter
operator|->
name|delete_path
argument_list|(
name|crb
operator|->
name|baton
argument_list|,
name|path
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_link_path
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|struct
name|compat_report_baton
modifier|*
name|crb
init|=
name|report_baton
decl_stmt|;
return|return
name|crb
operator|->
name|reporter
operator|->
name|link_path
argument_list|(
name|crb
operator|->
name|baton
argument_list|,
name|path
argument_list|,
name|url
argument_list|,
name|revision
argument_list|,
name|svn_depth_infinity
argument_list|,
name|start_empty
argument_list|,
name|NULL
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_finish_report
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|struct
name|compat_report_baton
modifier|*
name|crb
init|=
name|report_baton
decl_stmt|;
return|return
name|crb
operator|->
name|reporter
operator|->
name|finish_report
argument_list|(
name|crb
operator|->
name|baton
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_abort_report
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|struct
name|compat_report_baton
modifier|*
name|crb
init|=
name|report_baton
decl_stmt|;
return|return
name|crb
operator|->
name|reporter
operator|->
name|abort_report
argument_list|(
name|crb
operator|->
name|baton
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|static
specifier|const
name|svn_ra_reporter_t
name|compat_reporter
init|=
block|{
name|compat_set_path
block|,
name|compat_delete_path
block|,
name|compat_link_path
block|,
name|compat_finish_report
block|,
name|compat_abort_report
block|}
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|void
name|compat_wrap_reporter
parameter_list|(
specifier|const
name|svn_ra_reporter_t
modifier|*
modifier|*
name|reporter
parameter_list|,
name|void
modifier|*
modifier|*
name|baton
parameter_list|,
specifier|const
name|svn_ra_reporter3_t
modifier|*
name|wrapped
parameter_list|,
name|void
modifier|*
name|wrapped_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|struct
name|compat_report_baton
modifier|*
name|crb
init|=
name|apr_palloc
argument_list|(
name|pool
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|crb
argument_list|)
argument_list|)
decl_stmt|;
name|crb
operator|->
name|reporter
operator|=
name|wrapped
expr_stmt|;
name|crb
operator|->
name|baton
operator|=
name|wrapped_baton
expr_stmt|;
operator|*
name|reporter
operator|=
operator|&
name|compat_reporter
expr_stmt|;
operator|*
name|baton
operator|=
name|crb
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_do_update
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|svn_ra_reporter_t
modifier|*
modifier|*
name|reporter
parameter_list|,
name|void
modifier|*
modifier|*
name|report_baton
parameter_list|,
name|svn_revnum_t
name|revision_to_update_to
parameter_list|,
specifier|const
name|char
modifier|*
name|update_target
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|update_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
specifier|const
name|svn_ra_reporter3_t
modifier|*
name|reporter3
decl_stmt|;
name|void
modifier|*
name|baton3
decl_stmt|;
name|svn_depth_t
name|depth
init|=
name|SVN_DEPTH_INFINITY_OR_FILES
argument_list|(
name|recurse
argument_list|)
decl_stmt|;
name|SVN_ERR
argument_list|(
name|VTBL
operator|.
name|do_update
argument_list|(
name|session_baton
argument_list|,
operator|&
name|reporter3
argument_list|,
operator|&
name|baton3
argument_list|,
name|revision_to_update_to
argument_list|,
name|update_target
argument_list|,
name|depth
argument_list|,
name|FALSE
comment|/* send_copyfrom_args */
argument_list|,
name|FALSE
comment|/* ignore_ancestry */
argument_list|,
name|editor
argument_list|,
name|update_baton
argument_list|,
name|pool
argument_list|,
name|pool
argument_list|)
argument_list|)
expr_stmt|;
name|compat_wrap_reporter
argument_list|(
name|reporter
argument_list|,
name|report_baton
argument_list|,
name|reporter3
argument_list|,
name|baton3
argument_list|,
name|pool
argument_list|)
expr_stmt|;
return|return
name|SVN_NO_ERROR
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_do_switch
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|svn_ra_reporter_t
modifier|*
modifier|*
name|reporter
parameter_list|,
name|void
modifier|*
modifier|*
name|report_baton
parameter_list|,
name|svn_revnum_t
name|revision_to_switch_to
parameter_list|,
specifier|const
name|char
modifier|*
name|switch_target
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
specifier|const
name|char
modifier|*
name|switch_url
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|switch_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
specifier|const
name|svn_ra_reporter3_t
modifier|*
name|reporter3
decl_stmt|;
name|void
modifier|*
name|baton3
decl_stmt|;
name|svn_depth_t
name|depth
init|=
name|SVN_DEPTH_INFINITY_OR_FILES
argument_list|(
name|recurse
argument_list|)
decl_stmt|;
name|SVN_ERR
argument_list|(
name|VTBL
operator|.
name|do_switch
argument_list|(
name|session_baton
argument_list|,
operator|&
name|reporter3
argument_list|,
operator|&
name|baton3
argument_list|,
name|revision_to_switch_to
argument_list|,
name|switch_target
argument_list|,
name|depth
argument_list|,
name|switch_url
argument_list|,
name|FALSE
comment|/* send_copyfrom_args */
argument_list|,
name|TRUE
comment|/* ignore_ancestry */
argument_list|,
name|editor
argument_list|,
name|switch_baton
argument_list|,
name|pool
comment|/* result_pool */
argument_list|,
name|pool
comment|/* scratch_pool */
argument_list|)
argument_list|)
expr_stmt|;
name|compat_wrap_reporter
argument_list|(
name|reporter
argument_list|,
name|report_baton
argument_list|,
name|reporter3
argument_list|,
name|baton3
argument_list|,
name|pool
argument_list|)
expr_stmt|;
return|return
name|SVN_NO_ERROR
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_do_status
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|svn_ra_reporter_t
modifier|*
modifier|*
name|reporter
parameter_list|,
name|void
modifier|*
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|status_target
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|status_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
specifier|const
name|svn_ra_reporter3_t
modifier|*
name|reporter3
decl_stmt|;
name|void
modifier|*
name|baton3
decl_stmt|;
name|svn_depth_t
name|depth
init|=
name|SVN_DEPTH_INFINITY_OR_IMMEDIATES
argument_list|(
name|recurse
argument_list|)
decl_stmt|;
name|SVN_ERR
argument_list|(
name|VTBL
operator|.
name|do_status
argument_list|(
name|session_baton
argument_list|,
operator|&
name|reporter3
argument_list|,
operator|&
name|baton3
argument_list|,
name|status_target
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|editor
argument_list|,
name|status_baton
argument_list|,
name|pool
argument_list|)
argument_list|)
expr_stmt|;
name|compat_wrap_reporter
argument_list|(
name|reporter
argument_list|,
name|report_baton
argument_list|,
name|reporter3
argument_list|,
name|baton3
argument_list|,
name|pool
argument_list|)
expr_stmt|;
return|return
name|SVN_NO_ERROR
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_do_diff
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|svn_ra_reporter_t
modifier|*
modifier|*
name|reporter
parameter_list|,
name|void
modifier|*
modifier|*
name|report_baton
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
name|diff_target
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
specifier|const
name|char
modifier|*
name|versus_url
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|diff_editor
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
specifier|const
name|svn_ra_reporter3_t
modifier|*
name|reporter3
decl_stmt|;
name|void
modifier|*
name|baton3
decl_stmt|;
name|svn_depth_t
name|depth
init|=
name|SVN_DEPTH_INFINITY_OR_FILES
argument_list|(
name|recurse
argument_list|)
decl_stmt|;
name|SVN_ERR
argument_list|(
name|VTBL
operator|.
name|do_diff
argument_list|(
name|session_baton
argument_list|,
operator|&
name|reporter3
argument_list|,
operator|&
name|baton3
argument_list|,
name|revision
argument_list|,
name|diff_target
argument_list|,
name|depth
argument_list|,
name|ignore_ancestry
argument_list|,
name|TRUE
argument_list|,
name|versus_url
argument_list|,
name|diff_editor
argument_list|,
name|diff_baton
argument_list|,
name|pool
argument_list|)
argument_list|)
expr_stmt|;
name|compat_wrap_reporter
argument_list|(
name|reporter
argument_list|,
name|report_baton
argument_list|,
name|reporter3
argument_list|,
name|baton3
argument_list|,
name|pool
argument_list|)
expr_stmt|;
return|return
name|SVN_NO_ERROR
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_log
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_boolean_t
name|discover_changed_paths
parameter_list|,
name|svn_boolean_t
name|strict_node_history
parameter_list|,
name|svn_log_message_receiver_t
name|receiver
parameter_list|,
name|void
modifier|*
name|receiver_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|svn_log_entry_receiver_t
name|receiver2
decl_stmt|;
name|void
modifier|*
name|receiver2_baton
decl_stmt|;
name|svn_compat_wrap_log_receiver
argument_list|(
operator|&
name|receiver2
argument_list|,
operator|&
name|receiver2_baton
argument_list|,
name|receiver
argument_list|,
name|receiver_baton
argument_list|,
name|pool
argument_list|)
expr_stmt|;
return|return
name|VTBL
operator|.
name|get_log
argument_list|(
name|session_baton
argument_list|,
name|paths
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
literal|0
argument_list|,
comment|/* limit */
name|discover_changed_paths
argument_list|,
name|strict_node_history
argument_list|,
name|FALSE
argument_list|,
comment|/* include_merged_revisions */
name|svn_compat_log_revprops_in
argument_list|(
name|pool
argument_list|)
argument_list|,
comment|/* revprops */
name|receiver2
argument_list|,
name|receiver2_baton
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_check_path
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|check_path
argument_list|(
name|session_baton
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
name|kind
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_uuid
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|uuid
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_uuid
argument_list|(
name|session_baton
argument_list|,
name|uuid
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_repos_root
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|url
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_repos_root
argument_list|(
name|session_baton
argument_list|,
name|url
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_locations
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|locations
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|peg_revision
parameter_list|,
name|apr_array_header_t
modifier|*
name|location_revs
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_locations
argument_list|(
name|session_baton
argument_list|,
name|locations
argument_list|,
name|path
argument_list|,
name|peg_revision
argument_list|,
name|location_revs
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|svn_error_t
modifier|*
name|compat_get_file_revs
parameter_list|(
name|void
modifier|*
name|session_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_ra_file_rev_handler_t
name|handler
parameter_list|,
name|void
modifier|*
name|handler_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
block|{
name|svn_file_rev_handler_t
name|handler2
decl_stmt|;
name|void
modifier|*
name|handler2_baton
decl_stmt|;
name|svn_compat_wrap_file_rev_handler
argument_list|(
operator|&
name|handler2
argument_list|,
operator|&
name|handler2_baton
argument_list|,
name|handler
argument_list|,
name|handler_baton
argument_list|,
name|pool
argument_list|)
expr_stmt|;
return|return
name|VTBL
operator|.
name|get_file_revs
argument_list|(
name|session_baton
argument_list|,
name|path
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|FALSE
argument_list|,
comment|/* include merged revisions */
name|handler2
argument_list|,
name|handler2_baton
argument_list|,
name|pool
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|const
name|svn_version_t
modifier|*
name|compat_get_version
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|VTBL
operator|.
name|get_version
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
specifier|static
specifier|const
name|svn_ra_plugin_t
name|compat_plugin
init|=
block|{
name|NAME
block|,
name|DESCRIPTION
block|,
name|compat_open
block|,
name|compat_get_latest_revnum
block|,
name|compat_get_dated_revision
block|,
name|compat_change_rev_prop
block|,
name|compat_rev_proplist
block|,
name|compat_rev_prop
block|,
name|compat_get_commit_editor
block|,
name|compat_get_file
block|,
name|compat_get_dir
block|,
name|compat_do_update
block|,
name|compat_do_switch
block|,
name|compat_do_status
block|,
name|compat_do_diff
block|,
name|compat_get_log
block|,
name|compat_check_path
block|,
name|compat_get_uuid
block|,
name|compat_get_repos_root
block|,
name|compat_get_locations
block|,
name|compat_get_file_revs
block|,
name|compat_get_version
block|}
decl_stmt|;
end_decl_stmt

begin_function
name|svn_error_t
modifier|*
name|COMPAT_INITFUNC
parameter_list|(
name|int
name|abi_version
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_hash_t
modifier|*
name|hash
parameter_list|)
block|{
specifier|const
name|svn_ra__vtable_t
modifier|*
name|vtable
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|schemes
decl_stmt|;
if|if
condition|(
name|abi_version
operator|<
literal|1
operator|||
name|abi_version
operator|>
name|SVN_RA_ABI_VERSION
condition|)
return|return
name|svn_error_createf
argument_list|(
name|SVN_ERR_RA_UNSUPPORTED_ABI_VERSION
argument_list|,
name|NULL
argument_list|,
name|_
argument_list|(
literal|"Unsupported RA plugin ABI version (%d) "
literal|"for %s"
argument_list|)
argument_list|,
name|abi_version
argument_list|,
name|NAME
argument_list|)
return|;
comment|/* We call the new init function so it can check library dependencies or      do other initialization things.  We fake the loader version, since we      rely on the ABI version check instead. */
name|SVN_ERR
argument_list|(
name|INITFUNC
argument_list|(
name|VTBL
operator|.
name|get_version
argument_list|()
argument_list|,
operator|&
name|vtable
argument_list|,
name|pool
argument_list|)
argument_list|)
expr_stmt|;
name|schemes
operator|=
name|VTBL
operator|.
name|get_schemes
argument_list|(
name|pool
argument_list|)
expr_stmt|;
for|for
control|(
init|;
operator|*
name|schemes
operator|!=
name|NULL
condition|;
operator|++
name|schemes
control|)
name|apr_hash_set
argument_list|(
name|hash
argument_list|,
operator|*
name|schemes
argument_list|,
name|APR_HASH_KEY_STRING
argument_list|,
operator|&
name|compat_plugin
argument_list|)
expr_stmt|;
return|return
name|SVN_NO_ERROR
return|;
block|}
end_function

end_unit

