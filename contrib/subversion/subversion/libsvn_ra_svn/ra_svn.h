begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * ra_svn.h :  private declarations for the ra_svn module  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|RA_SVN_H
end_ifndef

begin_define
define|#
directive|define
name|RA_SVN_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
include|#
directive|include
file|<apr_network_io.h>
include|#
directive|include
file|<apr_file_io.h>
include|#
directive|include
file|<apr_thread_proc.h>
include|#
directive|include
file|"svn_ra.h"
include|#
directive|include
file|"svn_ra_svn.h"
include|#
directive|include
file|"private/svn_ra_svn_private.h"
comment|/* Callback function that indicates if a svn_ra_svn__stream_t has pending  * data.  */
typedef|typedef
name|svn_boolean_t
function_decl|(
modifier|*
name|ra_svn_pending_fn_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/* Callback function that sets the timeout value for a svn_ra_svn__stream_t. */
typedef|typedef
name|void
function_decl|(
modifier|*
name|ra_svn_timeout_fn_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|apr_interval_time_t
name|timeout
parameter_list|)
function_decl|;
comment|/* A stream abstraction for ra_svn.  *  * This is different from svn_stream_t in that it provides timeouts and  * the ability to check for pending data.  */
typedef|typedef
name|struct
name|svn_ra_svn__stream_st
name|svn_ra_svn__stream_t
typedef|;
comment|/* Handler for blocked writes. */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|ra_svn_block_handler_t
function_decl|)
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/* The default "user agent". */
define|#
directive|define
name|SVN_RA_SVN__DEFAULT_USERAGENT
value|"SVN/" SVN_VER_NUMBER\                                        " (" SVN_BUILD_TARGET ")"
comment|/* The size of our per-connection read and write buffers. */
define|#
directive|define
name|SVN_RA_SVN__PAGE_SIZE
value|4096
define|#
directive|define
name|SVN_RA_SVN__READBUF_SIZE
value|(4 * SVN_RA_SVN__PAGE_SIZE)
define|#
directive|define
name|SVN_RA_SVN__WRITEBUF_SIZE
value|(4 * SVN_RA_SVN__PAGE_SIZE)
comment|/* Create forward reference */
typedef|typedef
name|struct
name|svn_ra_svn__session_baton_t
name|svn_ra_svn__session_baton_t
typedef|;
comment|/* This structure is opaque to the server.  The client pokes at the  * first few fields during setup and cleanup. */
struct|struct
name|svn_ra_svn_conn_st
block|{
comment|/* I/O buffers */
name|char
name|write_buf
index|[
name|SVN_RA_SVN__WRITEBUF_SIZE
index|]
decl_stmt|;
name|char
name|read_buf
index|[
name|SVN_RA_SVN__READBUF_SIZE
index|]
decl_stmt|;
name|char
modifier|*
name|read_ptr
decl_stmt|;
name|char
modifier|*
name|read_end
decl_stmt|;
name|apr_size_t
name|write_pos
decl_stmt|;
name|svn_ra_svn__stream_t
modifier|*
name|stream
decl_stmt|;
name|svn_ra_svn__session_baton_t
modifier|*
name|session
decl_stmt|;
ifdef|#
directive|ifdef
name|SVN_HAVE_SASL
comment|/* Although all reads and writes go through the svn_ra_svn__stream_t      interface, SASL still needs direct access to the underlying socket      for stuff like IP addresses and port numbers. */
name|apr_socket_t
modifier|*
name|sock
decl_stmt|;
name|svn_boolean_t
name|encrypted
decl_stmt|;
endif|#
directive|endif
comment|/* abortion check control */
name|apr_size_t
name|written_since_error_check
decl_stmt|;
name|apr_size_t
name|error_check_interval
decl_stmt|;
name|svn_boolean_t
name|may_check_for_error
decl_stmt|;
comment|/* repository info */
specifier|const
name|char
modifier|*
name|uuid
decl_stmt|;
specifier|const
name|char
modifier|*
name|repos_root
decl_stmt|;
comment|/* TX block notification target */
name|ra_svn_block_handler_t
name|block_handler
decl_stmt|;
name|void
modifier|*
name|block_baton
decl_stmt|;
comment|/* server settings */
name|apr_hash_t
modifier|*
name|capabilities
decl_stmt|;
name|int
name|compression_level
decl_stmt|;
name|apr_size_t
name|zero_copy_limit
decl_stmt|;
comment|/* who's on the other side of the connection? */
name|char
modifier|*
name|remote_ip
decl_stmt|;
comment|/* EV2 support*/
name|svn_delta_shim_callbacks_t
modifier|*
name|shim_callbacks
decl_stmt|;
comment|/* our pool */
name|apr_pool_t
modifier|*
name|pool
decl_stmt|;
block|}
struct|;
struct|struct
name|svn_ra_svn__session_baton_t
block|{
name|apr_pool_t
modifier|*
name|pool
decl_stmt|;
name|svn_ra_svn_conn_t
modifier|*
name|conn
decl_stmt|;
name|svn_boolean_t
name|is_tunneled
decl_stmt|;
specifier|const
name|char
modifier|*
name|url
decl_stmt|;
specifier|const
name|char
modifier|*
name|user
decl_stmt|;
specifier|const
name|char
modifier|*
name|hostname
decl_stmt|;
comment|/* The remote hostname. */
specifier|const
name|char
modifier|*
name|realm_prefix
decl_stmt|;
specifier|const
name|char
modifier|*
modifier|*
name|tunnel_argv
decl_stmt|;
specifier|const
name|svn_ra_callbacks2_t
modifier|*
name|callbacks
decl_stmt|;
name|void
modifier|*
name|callbacks_baton
decl_stmt|;
name|apr_off_t
name|bytes_read
decl_stmt|,
name|bytes_written
decl_stmt|;
comment|/* apr_off_t's because that's what                                           the callback interface uses */
specifier|const
name|char
modifier|*
name|useragent
decl_stmt|;
block|}
struct|;
comment|/* Set a callback for blocked writes on conn.  This handler may  * perform reads on the connection in order to prevent deadlock due to  * pipelining.  If callback is NULL, the connection goes back to  * normal blocking I/O for writes.  */
name|void
name|svn_ra_svn__set_block_handler
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|ra_svn_block_handler_t
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/* Return true if there is input waiting on conn. */
name|svn_boolean_t
name|svn_ra_svn__input_waiting
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* CRAM-MD5 client implementation. */
name|svn_error_t
modifier|*
name|svn_ra_svn__cram_client
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|password
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|message
parameter_list|)
function_decl|;
comment|/* Return a pointer to the error chain child of ERR which contains the  * first "real" error message, not merely one of the  * SVN_ERR_RA_SVN_CMD_ERR wrapper errors. */
name|svn_error_t
modifier|*
name|svn_ra_svn__locate_real_error_child
parameter_list|(
name|svn_error_t
modifier|*
name|err
parameter_list|)
function_decl|;
comment|/* Return an error chain based on @a params (which contains a  * command response indicating failure).  The error chain will be  * in the same order as the errors indicated in @a params.  Use  * @a pool for temporary allocations. */
name|svn_error_t
modifier|*
name|svn_ra_svn__handle_failure_status
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|params
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Returns a stream that reads/writes from/to SOCK. */
name|svn_ra_svn__stream_t
modifier|*
name|svn_ra_svn__stream_from_sock
parameter_list|(
name|apr_socket_t
modifier|*
name|sock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Returns a stream that reads from IN_FILE and writes to OUT_FILE.  */
name|svn_ra_svn__stream_t
modifier|*
name|svn_ra_svn__stream_from_files
parameter_list|(
name|apr_file_t
modifier|*
name|in_file
parameter_list|,
name|apr_file_t
modifier|*
name|out_file
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Create an svn_ra_svn__stream_t using READ_CB, WRITE_CB, TIMEOUT_CB,  * PENDING_CB, and BATON.  */
name|svn_ra_svn__stream_t
modifier|*
name|svn_ra_svn__stream_create
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|svn_read_fn_t
name|read_cb
parameter_list|,
name|svn_write_fn_t
name|write_cb
parameter_list|,
name|ra_svn_timeout_fn_t
name|timeout_cb
parameter_list|,
name|ra_svn_pending_fn_t
name|pending_cb
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Write *LEN bytes from DATA to STREAM, returning the number of bytes  * written in *LEN.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__stream_write
parameter_list|(
name|svn_ra_svn__stream_t
modifier|*
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|apr_size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/* Read *LEN bytes from STREAM into DATA, returning the number of bytes  * read in *LEN.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__stream_read
parameter_list|(
name|svn_ra_svn__stream_t
modifier|*
name|stream
parameter_list|,
name|char
modifier|*
name|data
parameter_list|,
name|apr_size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/* Read the command word from CONN, return it in *COMMAND and skip to the  * end of the command.  Allocate data in POOL.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__read_command_only
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|command
parameter_list|)
function_decl|;
comment|/* Set the timeout for operations on STREAM to INTERVAL. */
name|void
name|svn_ra_svn__stream_timeout
parameter_list|(
name|svn_ra_svn__stream_t
modifier|*
name|stream
parameter_list|,
name|apr_interval_time_t
name|interval
parameter_list|)
function_decl|;
comment|/* Return whether or not there is data pending on STREAM. */
name|svn_boolean_t
name|svn_ra_svn__stream_pending
parameter_list|(
name|svn_ra_svn__stream_t
modifier|*
name|stream
parameter_list|)
function_decl|;
comment|/* Respond to an auth request and perform authentication.  Use the Cyrus  * SASL library for mechanism negotiation and for creating authentication  * tokens. */
name|svn_error_t
modifier|*
name|svn_ra_svn__do_cyrus_auth
parameter_list|(
name|svn_ra_svn__session_baton_t
modifier|*
name|sess
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|mechlist
parameter_list|,
specifier|const
name|char
modifier|*
name|realm
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Same as svn_ra_svn__do_cyrus_auth, but uses the built-in implementation of  * the CRAM-MD5, ANONYMOUS and EXTERNAL mechanisms.  Return the error  * SVN_ERR_RA_SVN_NO_MECHANSIMS if we cannot negotiate an authentication  * mechanism with the server. */
name|svn_error_t
modifier|*
name|svn_ra_svn__do_internal_auth
parameter_list|(
name|svn_ra_svn__session_baton_t
modifier|*
name|sess
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|mechlist
parameter_list|,
specifier|const
name|char
modifier|*
name|realm
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Having picked a mechanism, start authentication by writing out an  * auth response.  MECH_ARG may be NULL for mechanisms with no  * initial client response. */
name|svn_error_t
modifier|*
name|svn_ra_svn__auth_response
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|mech
parameter_list|,
specifier|const
name|char
modifier|*
name|mech_arg
parameter_list|)
function_decl|;
comment|/* Looks for MECH as a word in MECHLIST (an array of svn_ra_svn_item_t). */
name|svn_boolean_t
name|svn_ra_svn__find_mech
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|mechlist
parameter_list|,
specifier|const
name|char
modifier|*
name|mech
parameter_list|)
function_decl|;
comment|/* Initialize the SASL library. */
name|svn_error_t
modifier|*
name|svn_ra_svn__sasl_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* RA_SVN_H */
end_comment

end_unit

