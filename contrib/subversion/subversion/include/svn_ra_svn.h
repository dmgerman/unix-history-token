begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_ra_svn.h  * @brief libsvn_ra_svn functions used by the server  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_RA_SVN_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_RA_SVN_H
end_define

begin_include
include|#
directive|include
file|<apr.h>
end_include

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|<apr_tables.h>
end_include

begin_include
include|#
directive|include
file|<apr_file_io.h>
end_include

begin_comment
comment|/* for apr_file_t */
end_comment

begin_include
include|#
directive|include
file|<apr_network_io.h>
end_include

begin_comment
comment|/* for apr_socket_t */
end_comment

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_config.h"
end_include

begin_include
include|#
directive|include
file|"svn_delta.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/** The well-known svn port number. */
define|#
directive|define
name|SVN_RA_SVN_PORT
value|3690
comment|/** Currently-defined capabilities. */
define|#
directive|define
name|SVN_RA_SVN_CAP_EDIT_PIPELINE
value|"edit-pipeline"
define|#
directive|define
name|SVN_RA_SVN_CAP_SVNDIFF1
value|"svndiff1"
define|#
directive|define
name|SVN_RA_SVN_CAP_ABSENT_ENTRIES
value|"absent-entries"
comment|/* maps to SVN_RA_CAPABILITY_COMMIT_REVPROPS: */
define|#
directive|define
name|SVN_RA_SVN_CAP_COMMIT_REVPROPS
value|"commit-revprops"
comment|/* maps to SVN_RA_CAPABILITY_MERGEINFO: */
define|#
directive|define
name|SVN_RA_SVN_CAP_MERGEINFO
value|"mergeinfo"
comment|/* maps to SVN_RA_CAPABILITY_DEPTH: */
define|#
directive|define
name|SVN_RA_SVN_CAP_DEPTH
value|"depth"
comment|/* maps to SVN_RA_CAPABILITY_LOG_REVPROPS */
define|#
directive|define
name|SVN_RA_SVN_CAP_LOG_REVPROPS
value|"log-revprops"
comment|/* maps to SVN_RA_CAPABILITY_PARTIAL_REPLAY */
define|#
directive|define
name|SVN_RA_SVN_CAP_PARTIAL_REPLAY
value|"partial-replay"
comment|/* maps to SVN_RA_CAPABILITY_ATOMIC_REVPROPS */
define|#
directive|define
name|SVN_RA_SVN_CAP_ATOMIC_REVPROPS
value|"atomic-revprops"
comment|/* maps to SVN_RA_CAPABILITY_INHERITED_PROPERTIES: */
define|#
directive|define
name|SVN_RA_SVN_CAP_INHERITED_PROPS
value|"inherited-props"
comment|/* maps to SVN_RA_CAPABILITY_EPHEMERAL_TXNPROPS */
define|#
directive|define
name|SVN_RA_SVN_CAP_EPHEMERAL_TXNPROPS
value|"ephemeral-txnprops"
comment|/* maps to SVN_RA_CAPABILITY_GET_FILE_REVS_REVERSE */
define|#
directive|define
name|SVN_RA_SVN_CAP_GET_FILE_REVS_REVERSE
value|"file-revs-reverse"
comment|/** ra_svn passes @c svn_dirent_t fields over the wire as a list of  * words, these are the values used to represent each field.  *  * @defgroup ra_svn_dirent_fields Definitions of ra_svn dirent fields  * @{  */
comment|/** The ra_svn way of saying @c SVN_DIRENT_KIND. */
define|#
directive|define
name|SVN_RA_SVN_DIRENT_KIND
value|"kind"
comment|/** The ra_svn way of saying @c SVN_DIRENT_SIZE. */
define|#
directive|define
name|SVN_RA_SVN_DIRENT_SIZE
value|"size"
comment|/** The ra_svn way of saying @c SVN_DIRENT_HAS_PROPS. */
define|#
directive|define
name|SVN_RA_SVN_DIRENT_HAS_PROPS
value|"has-props"
comment|/** The ra_svn way of saying @c SVN_DIRENT_CREATED_REV. */
define|#
directive|define
name|SVN_RA_SVN_DIRENT_CREATED_REV
value|"created-rev"
comment|/** The ra_svn way of saying @c SVN_DIRENT_TIME. */
define|#
directive|define
name|SVN_RA_SVN_DIRENT_TIME
value|"time"
comment|/** The ra_svn way of saying @c SVN_DIRENT_LAST_AUTHOR. */
define|#
directive|define
name|SVN_RA_SVN_DIRENT_LAST_AUTHOR
value|"last-author"
comment|/** @} */
comment|/** A value used to indicate an optional number element in a tuple that was  * not received.  */
define|#
directive|define
name|SVN_RA_SVN_UNSPECIFIED_NUMBER
value|~((apr_uint64_t) 0)
comment|/** A specialized form of @c SVN_ERR to deal with errors which occur in an  * svn_ra_svn_command_handler().  *  * An error returned with this macro will be passed back to the other side  * of the connection.  Use this macro when performing the requested operation;  * use the regular @c SVN_ERR when performing I/O with the client.  */
define|#
directive|define
name|SVN_CMD_ERR
parameter_list|(
name|expr
parameter_list|)
define|\
value|do {                                                        \     svn_error_t *svn_err__temp = (expr);                      \     if (svn_err__temp)                                        \       return svn_error_create(SVN_ERR_RA_SVN_CMD_ERR,         \                               svn_err__temp, NULL);           \   } while (0)
comment|/** an ra_svn connection. */
typedef|typedef
name|struct
name|svn_ra_svn_conn_st
name|svn_ra_svn_conn_t
typedef|;
comment|/** Command handler, used by svn_ra_svn_handle_commands(). */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra_svn_command_handler
function_decl|)
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_array_header_t
modifier|*
name|params
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/** Command table, used by svn_ra_svn_handle_commands().  */
typedef|typedef
struct|struct
name|svn_ra_svn_cmd_entry_t
block|{
comment|/** Name of the command */
specifier|const
name|char
modifier|*
name|cmdname
decl_stmt|;
comment|/** Handler for the command */
name|svn_ra_svn_command_handler
name|handler
decl_stmt|;
comment|/** Termination flag.  If set, command-handling will cease after    * command is processed. */
name|svn_boolean_t
name|terminate
decl_stmt|;
block|}
name|svn_ra_svn_cmd_entry_t
typedef|;
comment|/** Memory representation of an on-the-wire data item. */
typedef|typedef
struct|struct
name|svn_ra_svn_item_t
block|{
comment|/** Variant indicator. */
enum|enum
block|{
name|SVN_RA_SVN_NUMBER
block|,
name|SVN_RA_SVN_STRING
block|,
name|SVN_RA_SVN_WORD
block|,
name|SVN_RA_SVN_LIST
block|}
name|kind
enum|;
comment|/** Variant data. */
union|union
block|{
name|apr_uint64_t
name|number
decl_stmt|;
name|svn_string_t
modifier|*
name|string
decl_stmt|;
specifier|const
name|char
modifier|*
name|word
decl_stmt|;
comment|/** Contains @c svn_ra_svn_item_t's. */
name|apr_array_header_t
modifier|*
name|list
decl_stmt|;
block|}
name|u
union|;
block|}
name|svn_ra_svn_item_t
typedef|;
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra_svn_edit_callback
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/** Initialize a connection structure for the given socket or  * input/output files.  *  * Either @a sock or @a in_file/@a out_file must be set, not both.  * @a compression_level specifies the desired network data compression  * level (zlib) from 0 (no compression) to 9 (best but slowest).  *  * If @a zero_copy_limit is not 0, cached file contents smaller than the  * given limit may be sent directly to the network socket.  Otherwise,  * it will be copied into a temporary buffer before being forwarded to  * the network stack.  Since the zero-copy code path has to enforce strict  * time-outs, the receiver must be able to process @a zero_copy_limit  * bytes within one second.  Even temporary failure to do so may cause  * the server to cancel the respective operation with a time-out error.  *  * To reduce the overhead of checking for cancellation requests from the  * data receiver, set @a error_check_interval to some non-zero value.  * It defines the number of bytes that must have been sent since the last  * check before the next check will be made.  *  * Allocate the result in @a pool.  *  * @since New in 1.8  */
name|svn_ra_svn_conn_t
modifier|*
name|svn_ra_svn_create_conn3
parameter_list|(
name|apr_socket_t
modifier|*
name|sock
parameter_list|,
name|apr_file_t
modifier|*
name|in_file
parameter_list|,
name|apr_file_t
modifier|*
name|out_file
parameter_list|,
name|int
name|compression_level
parameter_list|,
name|apr_size_t
name|zero_copy_limit
parameter_list|,
name|apr_size_t
name|error_check_interval
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_ra_svn_create_conn3() but disables the zero copy code  * path and sets the error checking interval to 0.  *  * @since New in 1.7.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_ra_svn_conn_t
modifier|*
name|svn_ra_svn_create_conn2
parameter_list|(
name|apr_socket_t
modifier|*
name|sock
parameter_list|,
name|apr_file_t
modifier|*
name|in_file
parameter_list|,
name|apr_file_t
modifier|*
name|out_file
parameter_list|,
name|int
name|compression_level
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_ra_svn_create_conn2() but uses the default  * compression level (#SVN_DELTA_COMPRESSION_LEVEL_DEFAULT) for network  * transmissions.  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_ra_svn_conn_t
modifier|*
name|svn_ra_svn_create_conn
parameter_list|(
name|apr_socket_t
modifier|*
name|sock
parameter_list|,
name|apr_file_t
modifier|*
name|in_file
parameter_list|,
name|apr_file_t
modifier|*
name|out_file
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Add the capabilities in @a list to @a conn's capabilities.  * @a list contains svn_ra_svn_item_t entries (which should be of type  * SVN_RA_SVN_WORD; a malformed data error will result if any are not).  *  * This is idempotent: if a given capability was already set for  * @a conn, it remains set.  */
name|svn_error_t
modifier|*
name|svn_ra_svn_set_capabilities
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/** Return @c TRUE if @a conn has the capability @a capability, or  * @c FALSE if it does not. */
name|svn_boolean_t
name|svn_ra_svn_has_capability
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
specifier|const
name|char
modifier|*
name|capability
parameter_list|)
function_decl|;
comment|/** Return the data compression level to use for network transmissions.  *  * @since New in 1.7.  */
name|int
name|svn_ra_svn_compression_level
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|)
function_decl|;
comment|/** Return the zero-copy data block limit to use for network  * transmissions.  *  * @see http://en.wikipedia.org/wiki/Zero-copy  *  * @since New in 1.8.  */
name|apr_size_t
name|svn_ra_svn_zero_copy_limit
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|)
function_decl|;
comment|/** Returns the remote address of the connection as a string, if known,  *  or NULL if inapplicable. */
specifier|const
name|char
modifier|*
name|svn_ra_svn_conn_remote_host
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|)
function_decl|;
comment|/** Set @a *editor and @a *edit_baton to an editor which will pass editing  * operations over the network, using @a conn and @a pool.  *  * Upon successful completion of the edit, the editor will invoke @a callback  * with @a callback_baton as an argument.  */
name|void
name|svn_ra_svn_get_editor
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_ra_svn_edit_callback
name|callback
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|)
function_decl|;
comment|/** Receive edit commands over the network and use them to drive @a editor  * with @a edit_baton.  On return, @a *aborted will be set if the edit was  * aborted.  The drive can be terminated with a finish-replay command only  * if @a for_replay is TRUE.  *  * @since New in 1.4.  */
name|svn_error_t
modifier|*
name|svn_ra_svn_drive_editor2
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_boolean_t
modifier|*
name|aborted
parameter_list|,
name|svn_boolean_t
name|for_replay
parameter_list|)
function_decl|;
comment|/** Like svn_ra_svn_drive_editor2, but with @a for_replay always FALSE.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_drive_editor
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_boolean_t
modifier|*
name|aborted
parameter_list|)
function_decl|;
comment|/** This function is only intended for use by svnserve.  *  * Perform CRAM-MD5 password authentication.  On success, return  * SVN_NO_ERROR with *user set to the username and *success set to  * TRUE.  On an error which can be reported to the client, report the  * error and return SVN_NO_ERROR with *success set to FALSE.  On  * communications failure, return an error.  */
name|svn_error_t
modifier|*
name|svn_ra_svn_cram_server
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_config_t
modifier|*
name|pwdb
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|user
parameter_list|,
name|svn_boolean_t
modifier|*
name|success
parameter_list|)
function_decl|;
comment|/**  * Get libsvn_ra_svn version information.  * @since New in 1.1.  */
specifier|const
name|svn_version_t
modifier|*
name|svn_ra_svn_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * @defgroup ra_svn_deprecated ra_svn low-level functions  * @{  */
comment|/** Write a number over the net.  *  * Writes will be buffered until the next read or flush.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_number
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_uint64_t
name|number
parameter_list|)
function_decl|;
comment|/** Write a string over the net.  *  * Writes will be buffered until the next read or flush.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_string
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/** Write a cstring over the net.  *  * Writes will be buffered until the next read or flush.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_cstring
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/** Write a word over the net.  *  * Writes will be buffered until the next read or flush.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_word
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|word
parameter_list|)
function_decl|;
comment|/** Write a list of properties over the net.  @a props is allowed to be NULL,  * in which case an empty list will be written out.  *  * @since New in 1.5.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_proplist
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_hash_t
modifier|*
name|props
parameter_list|)
function_decl|;
comment|/** Begin a list.  Writes will be buffered until the next read or flush.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_start_list
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** End a list.  Writes will be buffered until the next read or flush.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_end_list
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Flush the write buffer.  *  * Normally this shouldn't be necessary, since the write buffer is flushed  * when a read is attempted.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_flush
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Write a tuple, using a printf-like interface.  *  * The format string @a fmt may contain:  *  *@verbatim      Spec  Argument type         Item type      ----  --------------------  ---------      n     apr_uint64_t          Number      r     svn_revnum_t          Number      s     const svn_string_t *  String      c     const char *          String      w     const char *          Word      b     svn_boolean_t         Word ("true" or "false")      (                           Begin tuple      )                           End tuple      ?                           Remaining elements optional      ! (at beginning or end)     Suppress opening or closing of tuple   @endverbatim  *  * Inside the optional part of a tuple, 'r' values may be @c  * SVN_INVALID_REVNUM, 'n' values may be  * SVN_RA_SVN_UNSPECIFIED_NUMBER, and 's', 'c', and 'w' values may be  * @c NULL; in these cases no data will be written.  'b' and '(' may  * not appear in the optional part of a tuple.  Either all or none of  * the optional values should be valid.  *  * (If we ever have a need for an optional boolean value, we should  * invent a 'B' specifier which stores a boolean into an int, using -1  * for unspecified.  Right now there is no need for such a thing.)  *  * Use the '!' format specifier to write partial tuples when you have  * to transmit an array or other unusual data.  For example, to write  * a tuple containing a revision, an array of words, and a boolean:  * @code      SVN_ERR(svn_ra_svn_write_tuple(conn, pool, "r(!", rev));      for (i = 0; i< n; i++)        SVN_ERR(svn_ra_svn_write_word(conn, pool, words[i]));      SVN_ERR(svn_ra_svn_write_tuple(conn, pool, "!)b", flag)); @endcode  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_tuple
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Read an item from the network into @a *item.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_read_item
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_ra_svn_item_t
modifier|*
modifier|*
name|item
parameter_list|)
function_decl|;
comment|/** Scan data on @a conn until we find something which looks like the  * beginning of an svn server greeting (an open paren followed by a  * whitespace character).  This function is appropriate for beginning  * a client connection opened in tunnel mode, since people's dotfiles  * sometimes write output to stdout.  It may only be called at the  * beginning of a client connection.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_skip_leading_garbage
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Parse an array of @c svn_sort__item_t structures as a tuple, using a  * printf-like interface.  The format string @a fmt may contain:  *  *@verbatim      Spec  Argument type          Item type      ----  --------------------   ---------      n     apr_uint64_t *         Number      r     svn_revnum_t *         Number      s     svn_string_t **        String      c     const char **          String      w     const char **          Word      b     svn_boolean_t *        Word ("true" or "false")      B     apr_uint64_t *         Word ("true" or "false")      l     apr_array_header_t **  List      (                            Begin tuple      )                            End tuple      ?                            Tuple is allowed to end here   @endverbatim  *  * Note that a tuple is only allowed to end precisely at a '?', or at  * the end of the specification.  So if @a fmt is "c?cc" and @a list  * contains two elements, an error will result.  *  * 'B' is similar to 'b', but may be used in the optional tuple specification.  * It returns TRUE, FALSE, or SVN_RA_SVN_UNSPECIFIED_NUMBER.  *  * If an optional part of a tuple contains no data, 'r' values will be  * set to @c SVN_INVALID_REVNUM, 'n' and 'B' values will be set to  * SVN_RA_SVN_UNSPECIFIED_NUMBER, and 's', 'c', 'w', and 'l' values  * will be set to @c NULL.  'b' may not appear inside an optional  * tuple specification; use 'B' instead.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_parse_tuple
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|list
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Read a tuple from the network and parse it as a tuple, using the  * format string notation from svn_ra_svn_parse_tuple().  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_read_tuple
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Parse an array of @c svn_ra_svn_item_t structures as a list of  * properties, storing the properties in a hash table.  *  * @since New in 1.5.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_parse_proplist
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|list
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|)
function_decl|;
comment|/** Read a command response from the network and parse it as a tuple, using  * the format string notation from svn_ra_svn_parse_tuple().  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_read_cmd_response
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Accept commands over the network and handle them according to @a  * commands.  Command handlers will be passed @a conn, a subpool of @a  * pool (cleared after each command is handled), the parameters of the  * command, and @a baton.  Commands will be accepted until a  * terminating command is received (a command with "terminate" set in  * the command table).  If a command handler returns an error wrapped  * in SVN_RA_SVN_CMD_ERR (see the @c SVN_CMD_ERR macro), the error  * will be reported to the other side of the connection and the  * command loop will continue; any other kind of error (typically a  * network or protocol error) is passed through to the caller.  *  * @since New in 1.6.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_handle_commands2
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_ra_svn_cmd_entry_t
modifier|*
name|commands
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|svn_boolean_t
name|error_on_disconnect
parameter_list|)
function_decl|;
comment|/** Similar to svn_ra_svn_handle_commands2 but @a error_on_disconnect  * is always @c FALSE.  *  * @deprecated Provided for backward compatibility with the 1.5 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_handle_commands
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_ra_svn_cmd_entry_t
modifier|*
name|commands
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/** Write a command over the network, using the same format string notation  * as svn_ra_svn_write_tuple().  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_cmd
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|cmdname
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Write a successful command response over the network, using the  * same format string notation as svn_ra_svn_write_tuple().  Do not use  * partial tuples with this function; if you need to use partial  * tuples, just write out the "success" and argument tuple by hand.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_cmd_response
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Write an unsuccessful command response over the network.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  *             RA_SVN low-level functions are no longer considered public.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_ra_svn_write_cmd_failure
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_error_t
modifier|*
name|err
parameter_list|)
function_decl|;
comment|/**  * @}  */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_RA_SVN_H */
end_comment

end_unit

