begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_xml.h  * @brief XML code shared by various Subversion libraries.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_XML_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_XML_H
end_define

begin_include
include|#
directive|include
file|<apr.h>
end_include

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/** The namespace all Subversion XML uses. */
define|#
directive|define
name|SVN_XML_NAMESPACE
value|"svn:"
comment|/** Used as style argument to svn_xml_make_open_tag() and friends. */
enum|enum
name|svn_xml_open_tag_style
block|{
comment|/**<tag ...> */
name|svn_xml_normal
init|=
literal|1
block|,
comment|/**<tag ...>, no cosmetic newline */
name|svn_xml_protect_pcdata
block|,
comment|/**<tag .../>  */
name|svn_xml_self_closing
block|}
enum|;
comment|/** Determine if a string of character @a data of length @a len is a  * safe bet for use with the svn_xml_escape_* functions found in this  * header.  *  * Return @c TRUE if it is, @c FALSE otherwise.  *  * Essentially, this function exists to determine whether or not  * simply running a string of bytes through the Subversion XML escape  * routines will produce legitimate XML.  It should only be necessary  * for data which might contain bytes that cannot be safely encoded  * into XML (certain control characters, for example).  */
name|svn_boolean_t
name|svn_xml_is_xml_safe
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|apr_size_t
name|len
parameter_list|)
function_decl|;
comment|/** Create or append in @a *outstr an xml-escaped version of @a string,  * suitable for output as character data.  *  * If @a *outstr is @c NULL, set @a *outstr to a new stringbuf allocated  * in @a pool, else append to the existing stringbuf there.  */
name|void
name|svn_xml_escape_cdata_stringbuf
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
specifier|const
name|svn_stringbuf_t
modifier|*
name|string
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as svn_xml_escape_cdata_stringbuf(), but @a string is an  * @c svn_string_t.  */
name|void
name|svn_xml_escape_cdata_string
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|string
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as svn_xml_escape_cdata_stringbuf(), but @a string is a  * NULL-terminated C string.  */
name|void
name|svn_xml_escape_cdata_cstring
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Create or append in @a *outstr an xml-escaped version of @a string,  * suitable for output as an attribute value.  *  * If @a *outstr is @c NULL, set @a *outstr to a new stringbuf allocated  * in @a pool, else append to the existing stringbuf there.  */
name|void
name|svn_xml_escape_attr_stringbuf
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
specifier|const
name|svn_stringbuf_t
modifier|*
name|string
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as svn_xml_escape_attr_stringbuf(), but @a string is an  * @c svn_string_t.  */
name|void
name|svn_xml_escape_attr_string
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|string
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as svn_xml_escape_attr_stringbuf(), but @a string is a  * NULL-terminated C string.  */
name|void
name|svn_xml_escape_attr_cstring
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Return UTF-8 string @a string if it contains no characters that are  * unrepresentable in XML.  Else, return a copy of @a string,  * allocated in @a pool, with each unrepresentable character replaced  * by "?\uuu", where "uuu" is the three-digit unsigned decimal value  * of that character.  *  * Neither the input nor the output need be valid XML; however, the  * output can always be safely XML-escaped.  *  * @note The current implementation treats all Unicode characters as  * representable, except for most ASCII control characters (the  * exceptions being CR, LF, and TAB, which are valid in XML).  There  * may be other UTF-8 characters that are invalid in XML; see  * http://subversion.tigris.org/servlets/ReadMsg?list=dev&msgNo=90591  * and its thread for details.  *  * @since New in 1.2.  */
specifier|const
name|char
modifier|*
name|svn_xml_fuzzy_escape
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/*---------------------------------------------------------------*/
comment|/* Generalized Subversion XML Parsing */
comment|/** A generalized Subversion XML parser object */
typedef|typedef
name|struct
name|svn_xml_parser_t
name|svn_xml_parser_t
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|svn_xml_start_elem
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|atts
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|svn_xml_end_elem
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/* data is not NULL-terminated. */
typedef|typedef
name|void
function_decl|(
modifier|*
name|svn_xml_char_data
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|apr_size_t
name|len
parameter_list|)
function_decl|;
comment|/** Create a general Subversion XML parser */
name|svn_xml_parser_t
modifier|*
name|svn_xml_make_parser
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|svn_xml_start_elem
name|start_handler
parameter_list|,
name|svn_xml_end_elem
name|end_handler
parameter_list|,
name|svn_xml_char_data
name|data_handler
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Free a general Subversion XML parser */
name|void
name|svn_xml_free_parser
parameter_list|(
name|svn_xml_parser_t
modifier|*
name|svn_parser
parameter_list|)
function_decl|;
comment|/** Push @a len bytes of xml data in @a buf at @a svn_parser.  *  * If this is the final push, @a is_final must be set.  *  * An error will be returned if there was a syntax problem in the XML,  * or if any of the callbacks set an error using  * svn_xml_signal_bailout().  *  * If an error is returned, the @c svn_xml_parser_t will have been freed  * automatically, so the caller should not call svn_xml_free_parser().  */
name|svn_error_t
modifier|*
name|svn_xml_parse
parameter_list|(
name|svn_xml_parser_t
modifier|*
name|svn_parser
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|apr_size_t
name|len
parameter_list|,
name|svn_boolean_t
name|is_final
parameter_list|)
function_decl|;
comment|/** The way to officially bail out of xml parsing.  *  * Store @a error in @a svn_parser and set all expat callbacks to @c NULL.  */
name|void
name|svn_xml_signal_bailout
parameter_list|(
name|svn_error_t
modifier|*
name|error
parameter_list|,
name|svn_xml_parser_t
modifier|*
name|svn_parser
parameter_list|)
function_decl|;
comment|/*** Helpers for dealing with the data Expat gives us. ***/
comment|/** Return the value associated with @a name in expat attribute array @a atts,  * else return @c NULL.  *  * (There could never be a @c NULL attribute value in the XML,  * although the empty string is possible.)  *  * @a atts is an array of c-strings: even-numbered indexes are names,  * odd-numbers hold values.  If all is right, it should end on an  * even-numbered index pointing to @c NULL.  */
specifier|const
name|char
modifier|*
name|svn_xml_get_attr_value
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|atts
parameter_list|)
function_decl|;
comment|/* Converting between Expat attribute lists and APR hash tables. */
comment|/** Create an attribute hash from @c va_list @a ap.  *  * The contents of @a ap are alternating<tt>char *</tt> keys and  *<tt>char *</tt> vals, terminated by a final @c NULL falling on an  * even index (zero-based).  */
name|apr_hash_t
modifier|*
name|svn_xml_ap_to_hash
parameter_list|(
name|va_list
name|ap
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Create a hash that corresponds to Expat xml attribute list @a atts.  *  * The hash's keys and values are<tt>char *</tt>'s.  *  * @a atts may be NULL, in which case you just get an empty hash back  * (this makes life more convenient for some callers).  */
name|apr_hash_t
modifier|*
name|svn_xml_make_att_hash
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|atts
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_xml_make_att_hash(), but takes a hash and preserves any  * key/value pairs already in it.  */
name|void
name|svn_xml_hash_atts_preserving
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|atts
parameter_list|,
name|apr_hash_t
modifier|*
name|ht
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_xml_make_att_hash(), but takes a hash and overwrites  * key/value pairs already in it that also appear in @a atts.  */
name|void
name|svn_xml_hash_atts_overlaying
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|atts
parameter_list|,
name|apr_hash_t
modifier|*
name|ht
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Printing XML */
comment|/** Create an XML header and return it in @a *str.  *  * Fully-formed XML documents should start out with a header,  * something like<pre>  *         \<?xml version="1.0" encoding="UTF-8"?\>  *</pre>  *  * This function returns such a header.  @a *str must either be @c NULL, in  * which case a new string is created, or it must point to an existing  * string to be appended to. @a encoding must either be NULL, in which case  * encoding information is omitted from the header, or must be the name of  * the encoding of the XML document, such as "UTF-8".  *  * @since New in 1.7.  */
name|void
name|svn_xml_make_header2
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|str
parameter_list|,
specifier|const
name|char
modifier|*
name|encoding
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_xml_make_header2(), but does not emit encoding information.  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|void
name|svn_xml_make_header
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|str
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Store a new xml tag @a tagname in @a *str.  *  * If @a *str is @c NULL, set @a *str to a new stringbuf allocated  * in @a pool, else append to the existing stringbuf there.  *  * Take the tag's attributes from varargs, a SVN_VA_NULL-terminated list of  * alternating<tt>char *</tt> key and<tt>char *</tt> val.  Do xml-escaping  * on each val.  *  * @a style is one of the enumerated styles in @c svn_xml_open_tag_style.  */
name|void
name|svn_xml_make_open_tag
argument_list|(
name|svn_stringbuf_t
operator|*
operator|*
name|str
argument_list|,
name|apr_pool_t
operator|*
name|pool
argument_list|,
expr|enum
name|svn_xml_open_tag_style
name|style
argument_list|,
specifier|const
name|char
operator|*
name|tagname
argument_list|,
operator|...
argument_list|)
name|SVN_NEEDS_SENTINEL_NULL
decl_stmt|;
comment|/** Like svn_xml_make_open_tag(), but takes a @c va_list instead of being  * variadic.  */
name|void
name|svn_xml_make_open_tag_v
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|str
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|enum
name|svn_xml_open_tag_style
name|style
parameter_list|,
specifier|const
name|char
modifier|*
name|tagname
parameter_list|,
name|va_list
name|ap
parameter_list|)
function_decl|;
comment|/** Like svn_xml_make_open_tag(), but takes a hash table of attributes  * (<tt>char *</tt> keys mapping to<tt>char *</tt> values).  *  * You might ask, why not just provide svn_xml_make_tag_atts()?  *  * The reason is that a hash table is the most natural interface to an  * attribute list; the fact that Expat uses<tt>char **</tt> atts instead is  * certainly a defensible implementation decision, but since we'd have  * to have special code to support such lists throughout Subversion  * anyway, we might as well write that code for the natural interface  * (hashes) and then convert in the few cases where conversion is  * needed.  Someday it might even be nice to change expat-lite to work  * with apr hashes.  *  * See conversion functions svn_xml_make_att_hash() and  * svn_xml_make_att_hash_overlaying().  Callers should use those to  * convert Expat attr lists into hashes when necessary.  */
name|void
name|svn_xml_make_open_tag_hash
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|str
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|enum
name|svn_xml_open_tag_style
name|style
parameter_list|,
specifier|const
name|char
modifier|*
name|tagname
parameter_list|,
name|apr_hash_t
modifier|*
name|attributes
parameter_list|)
function_decl|;
comment|/** Store an xml close tag @a tagname in @a str.  *  * If @a *str is @c NULL, set @a *str to a new stringbuf allocated  * in @a pool, else append to the existing stringbuf there.  */
name|void
name|svn_xml_make_close_tag
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|str
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|tagname
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_XML_H */
end_comment

end_unit

