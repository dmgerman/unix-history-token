begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_subst.h  * @brief Data substitution (keywords and EOL style)  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_SUBST_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_SUBST_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|<apr_time.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_io.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* EOL conversion and keyword expansion. */
comment|/** The EOL used in the Repository for "native" files */
define|#
directive|define
name|SVN_SUBST_NATIVE_EOL_STR
value|"\n"
comment|/** Valid states for 'svn:eol-style' property.  *  * Property nonexistence is equivalent to 'none'.  */
typedef|typedef
enum|enum
name|svn_subst_eol_style
block|{
comment|/** An unrecognized style */
name|svn_subst_eol_style_unknown
block|,
comment|/** EOL translation is "off" or ignored value */
name|svn_subst_eol_style_none
block|,
comment|/** Translation is set to client's native eol */
name|svn_subst_eol_style_native
block|,
comment|/** Translation is set to one of LF, CR, CRLF */
name|svn_subst_eol_style_fixed
block|}
name|svn_subst_eol_style_t
typedef|;
comment|/** Set @a *style to the appropriate @c svn_subst_eol_style_t and @a *eol to  * the appropriate cstring for a given svn:eol-style property value.  *  * Set @a *eol to  *  *    - @c NULL for @c svn_subst_eol_style_none, or  *  *    - a NULL-terminated C string containing the native eol marker  *      for this platform, for @c svn_subst_eol_style_native, or  *  *    - a NULL-terminated C string containing the eol marker indicated  *      by the property value, for @c svn_subst_eol_style_fixed.  *  * If @a *style is NULL, it is ignored.  */
name|void
name|svn_subst_eol_style_from_value
parameter_list|(
name|svn_subst_eol_style_t
modifier|*
name|style
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|eol
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Indicates whether the working copy and normalized versions of a file  * with the given the parameters differ.  If @a force_eol_check is TRUE,  * the routine also accounts for all translations required due to repairing  * fixed eol styles.  *  * @since New in 1.4  *  */
name|svn_boolean_t
name|svn_subst_translation_required
parameter_list|(
name|svn_subst_eol_style_t
name|style
parameter_list|,
specifier|const
name|char
modifier|*
name|eol
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|special
parameter_list|,
name|svn_boolean_t
name|force_eol_check
parameter_list|)
function_decl|;
comment|/** Values used in keyword expansion.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  */
typedef|typedef
struct|struct
name|svn_subst_keywords_t
block|{
comment|/**    * @name svn_subst_keywords_t fields    * String expansion of the like-named keyword, or NULL if the keyword    * was not selected in the svn:keywords property.    * @{    */
specifier|const
name|svn_string_t
modifier|*
name|revision
decl_stmt|;
specifier|const
name|svn_string_t
modifier|*
name|date
decl_stmt|;
specifier|const
name|svn_string_t
modifier|*
name|author
decl_stmt|;
specifier|const
name|svn_string_t
modifier|*
name|url
decl_stmt|;
specifier|const
name|svn_string_t
modifier|*
name|id
decl_stmt|;
comment|/** @} */
block|}
name|svn_subst_keywords_t
typedef|;
comment|/**  * Set @a *kw to a new keywords hash filled with the appropriate contents  * given a @a keywords_string (the contents of the svn:keywords  * property for the file in question), the revision @a rev, the @a url,  * the @a date the file was committed on, the @a author of the last  * commit, and the URL of the repository root @a repos_root_url.  *  * Custom keywords defined in svn:keywords properties are expanded  * using the provided parameters and in accordance with the following  * format substitutions in the @a keywords_string:  *   %a   - The author.  *   %b   - The basename of the URL.  *   %d   - Short format of the date.  *   %D   - Long format of the date.  *   %P   - The file's path, relative to the repository root URL.  *   %r   - The revision.  *   %R   - The URL to the root of the repository.  *   %u   - The URL of the file.  *   %_   - A space (keyword definitions cannot contain a literal space).  *   %%   - A literal '%'.  *   %H   - Equivalent to %P%_%r%_%d%_%a.  *   %I   - Equivalent to %b%_%r%_%d%_%a.  *  * Custom keywords are defined by appending '=' to the keyword name, followed  * by a string containing any combination of the format substitutions.  *  * Any of the inputs @a rev, @a url, @a date, @a author, and @a repos_root_url  * can be @c NULL, or @c 0 for @a date, to indicate that the information is  * not present. Each piece of information that is not present expands to the  * empty string wherever it appears in an expanded keyword value.  (This can  * result in multiple adjacent spaces in the expansion of a multi-valued  * keyword such as "Id".)  *  * Hash keys are of type<tt>const char *</tt>.  * Hash values are of type<tt>svn_string_t *</tt>.  *  * All memory is allocated out of @a pool.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_subst_build_keywords3
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|kw
parameter_list|,
specifier|const
name|char
modifier|*
name|keywords_string
parameter_list|,
specifier|const
name|char
modifier|*
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
name|apr_time_t
name|date
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_subst_build_keywords3() except that it does not accept  * the @a repos_root_url parameter and hence supports less substitutions,  * and also does not support custom keyword definitions.  *  * @since New in 1.3.  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_build_keywords2
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|kw
parameter_list|,
specifier|const
name|char
modifier|*
name|keywords_string
parameter_list|,
specifier|const
name|char
modifier|*
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|apr_time_t
name|date
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_subst_build_keywords2() except that it populates  * an existing structure @a *kw instead of creating a keywords hash.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_build_keywords
parameter_list|(
name|svn_subst_keywords_t
modifier|*
name|kw
parameter_list|,
specifier|const
name|char
modifier|*
name|keywords_string
parameter_list|,
specifier|const
name|char
modifier|*
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|apr_time_t
name|date
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return @c TRUE if @a a and @a b do not hold the same keywords.  *  * @a a and @a b are hashes of the form produced by  * svn_subst_build_keywords2().  *  * @since New in 1.3.  *  * If @a compare_values is @c TRUE, "same" means that the @a a and @a b  * contain exactly the same set of keywords, and the values of corresponding  * keywords match as well.  Else if @a compare_values is @c FALSE, then  * "same" merely means that @a a and @a b hold the same set of keywords,  * although those keywords' values might differ.  *  * @a a and/or @a b may be @c NULL; for purposes of comparison, @c NULL is  * equivalent to holding no keywords.  */
name|svn_boolean_t
name|svn_subst_keywords_differ2
parameter_list|(
name|apr_hash_t
modifier|*
name|a
parameter_list|,
name|apr_hash_t
modifier|*
name|b
parameter_list|,
name|svn_boolean_t
name|compare_values
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_subst_keywords_differ2() except that it compares  * two @c svn_subst_keywords_t structs instead of keyword hashes.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|svn_boolean_t
name|svn_subst_keywords_differ
parameter_list|(
specifier|const
name|svn_subst_keywords_t
modifier|*
name|a
parameter_list|,
specifier|const
name|svn_subst_keywords_t
modifier|*
name|b
parameter_list|,
name|svn_boolean_t
name|compare_values
parameter_list|)
function_decl|;
comment|/**  * Copy and translate the data in @a src_stream into @a dst_stream.  It is  * assumed that @a src_stream is a readable stream and @a dst_stream is a  * writable stream.  *  * If @a eol_str is non-@c NULL, replace whatever bytestring @a src_stream  * uses to denote line endings with @a eol_str in the output.  If  * @a src_stream has an inconsistent line ending style, then: if @a repair  * is @c FALSE, return @c SVN_ERR_IO_INCONSISTENT_EOL, else if @a repair is  * @c TRUE, convert any line ending in @a src_stream to @a eol_str in  * @a dst_stream.  Recognized line endings are: "\n", "\r", and "\r\n".  *  * See svn_subst_stream_translated() for details of the keyword substitution  * which is controlled by the @a expand and @a keywords parameters.  *  * Note that a translation request is *required*:  one of @a eol_str or  * @a keywords must be non-@c NULL.  *  * Notes:  *  * See svn_wc__get_keywords() and svn_wc__get_eol_style() for a  * convenient way to get @a eol_str and @a keywords if in libsvn_wc.  *  * @since New in 1.3.  *  * @deprecated Provided for backward compatibility with the 1.5 API.  *   Callers should use svn_subst_stream_translated() instead.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_translate_stream3
parameter_list|(
name|svn_stream_t
modifier|*
name|src_stream
parameter_list|,
name|svn_stream_t
modifier|*
name|dst_stream
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_subst_translate_stream3() except relies upon a  * @c svn_subst_keywords_t struct instead of a hash for the keywords.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_translate_stream2
parameter_list|(
name|svn_stream_t
modifier|*
name|src_stream
parameter_list|,
name|svn_stream_t
modifier|*
name|dst_stream
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
specifier|const
name|svn_subst_keywords_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_subst_translate_stream2(), but does not take a @a pool  * argument, instead creates a temporary subpool of the global pool, and  * destroys it before returning.  *  * @deprecated Provided for backward compatibility with the 1.1 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_translate_stream
parameter_list|(
name|svn_stream_t
modifier|*
name|src_stream
parameter_list|,
name|svn_stream_t
modifier|*
name|dst_stream
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
specifier|const
name|svn_subst_keywords_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|)
function_decl|;
comment|/** Return a stream which performs eol translation and keyword  * expansion when read from or written to.  The stream @a stream  * is used to read and write all data.  *  * Make sure you call svn_stream_close() on the returned stream to  * ensure all data is flushed and cleaned up (this will also close  * the provided @a stream).  *  * Read operations from and write operations to the stream  * perform the same operation: if @a expand is @c FALSE, both  * contract keywords.  One stream supports both read and write  * operations.  Reads and writes may be mixed.  *  * If @a eol_str is non-@c NULL, replace whatever bytestring the input uses  * to denote line endings with @a eol_str in the output.  If the input has  * an inconsistent line ending style, then: if @a repair is @c FALSE, then a  * subsequent read, write or other operation on the stream will return  * @c SVN_ERR_IO_INCONSISTENT_EOL when the inconsistency is detected, else  * if @a repair is @c TRUE, convert any line ending to @a eol_str.  * Recognized line endings are: "\n", "\r", and "\r\n".  *  * Expand and contract keywords using the contents of @a keywords as the  * new values.  If @a expand is @c TRUE, expand contracted keywords and  * re-expand expanded keywords.  If @a expand is @c FALSE, contract expanded  * keywords and ignore contracted ones.  Keywords not found in the hash are  * ignored (not contracted or expanded).  If the @a keywords hash  * itself is @c NULL, keyword substitution will be altogether ignored.  *  * Detect only keywords that are no longer than @c SVN_KEYWORD_MAX_LEN  * bytes, including the delimiters and the keyword itself.  *  * Recommendation: if @a expand is FALSE, then you don't care about the  * keyword values, so use empty strings as non-NULL signifiers when you  * build the keywords hash.  *  * The stream returned is allocated in @a result_pool.  *  * If the inner stream implements resetting via svn_stream_reset(),  * or marking and seeking via svn_stream_mark() and svn_stream_seek(),  * the translated stream will too.  *  * @since New in 1.4.  */
name|svn_stream_t
modifier|*
name|svn_subst_stream_translated
parameter_list|(
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** Set @a *stream to a stream which performs eol translation and keyword  * expansion when read from or written to.  The stream @a source  * is used to read and write all data.  Make sure you call  * svn_stream_close() on @a stream to make sure all data are flushed  * and cleaned up.  *  * When @a stream is closed, then @a source will be closed.  *  * Read and write operations perform the same transformation:  * all data is translated to normal form.  *  * @see svn_subst_translate_to_normal_form()  *  * @since New in 1.5.  * @deprecated Provided for backward compatibility with the 1.5 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_stream_translated_to_normal_form
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
name|svn_stream_t
modifier|*
name|source
parameter_list|,
name|svn_subst_eol_style_t
name|eol_style
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|always_repair_eols
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *stream to a readable stream containing the "normal form"  * of the special file located at @a path. The stream will be allocated  * in @a result_pool, and any temporary allocations will be made in  * @a scratch_pool.  *  * If the file at @a path is in fact a regular file, just read its content,  * which should be in the "normal form" for a special file.  This enables  * special files to be written and read on platforms that do not treat them  * as special.  *  * @since New in 1.6.  */
name|svn_error_t
modifier|*
name|svn_subst_read_specialfile
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Set @a *stream to a writable stream that accepts content in  * the "normal form" for a special file, to be located at @a path, and  * will create that file when the stream is closed. The stream will be  * allocated in @a result_pool, and any temporary allocations will be  * made in @a scratch_pool.  *  * If the platform does not support the semantics of the special file, write  * a regular file containing the "normal form" text.  This enables special  * files to be written and read on platforms that do not treat them as  * special.  *  * Note: the target file is created in a temporary location, then renamed  *   into position, so the creation can be considered "atomic".  *  * @since New in 1.6.  */
name|svn_error_t
modifier|*
name|svn_subst_create_specialfile
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Set @a *stream to a stream which translates the special file at @a path  * to the internal representation for special files when read from.  When  * written to, it does the reverse: creating a special file when the  * stream is closed.  *  * @since New in 1.5.  *  * @deprecated Provided for backward compatibility with the 1.5 API.  *   Callers should use svn_subst_read_specialfile or  *   svn_subst_create_specialfile as appropriate.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_stream_from_specialfile
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Copy the contents of file-path @a src to file-path @a dst atomically,  * either creating @a dst or overwriting @a dst if it exists, possibly  * performing line ending and keyword translations.  *  * The parameters @a *eol_str, @a repair, @a *keywords and @a expand are  * defined the same as in svn_subst_translate_stream3().  *  * In addition, it will create a special file from normal form or  * translate one to normal form if @a special is @c TRUE.  *  * If anything goes wrong during the copy, attempt to delete @a dst (if  * it exists).  *  * If @a eol_str and @a keywords are @c NULL, behavior is just a byte-for-byte  * copy.  *  * @a cancel_func and @a cancel_baton will be called (if not NULL)  * periodically to check for cancellation.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_subst_copy_and_translate4
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|svn_boolean_t
name|special
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_subst_copy_and_translate4() but without a cancellation  * function and baton.  *  * @since New in 1.3.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_copy_and_translate3
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|svn_boolean_t
name|special
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_subst_copy_and_translate3() except that @a keywords is a  * @c svn_subst_keywords_t struct instead of a keywords hash.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  * @since New in 1.1.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_copy_and_translate2
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
specifier|const
name|svn_subst_keywords_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|svn_boolean_t
name|special
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_subst_copy_and_translate2() except that @a special is  * always set to @c FALSE.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_copy_and_translate
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
specifier|const
name|svn_subst_keywords_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *dst to a copy of the string @a src, possibly performing line  * ending and keyword translations.  *  * This is a variant of svn_subst_translate_stream3() that operates on  * cstrings.  @see svn_subst_stream_translated() for details of the  * translation and of @a eol_str, @a repair, @a keywords and @a expand.  *  * If @a eol_str and @a keywords are @c NULL, behavior is just a byte-for-byte  * copy.  *  * Allocate @a *dst in @a pool.  *  * @since New in 1.3.  */
name|svn_error_t
modifier|*
name|svn_subst_translate_cstring2
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_subst_translate_cstring2() except that @a keywords is a  * @c svn_subst_keywords_t struct instead of a keywords hash.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_translate_cstring
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
specifier|const
name|svn_subst_keywords_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|expand
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Translate the file @a src in working copy form to a file @a dst in  * normal form.  *  * The values specified for @a eol_style, @a *eol_str, @a keywords and  * @a special, should be the ones used to translate the file to its  * working copy form.  Usually, these are the values specified by the  * user in the files' properties.  *  * Inconsistent line endings in the file will be automatically repaired  * (made consistent) for some eol styles.  For all others, an error is  * returned.  By setting @a always_repair_eols to @c TRUE, eols will be  * made consistent even for those styles which don't have it by default.  *  * @note To translate a file FROM normal form, use  *       svn_subst_copy_and_translate3().  *  * @since New in 1.4  * @deprecated Provided for backward compatibility with the 1.5 API  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_translate_to_normal_form
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|dst
parameter_list|,
name|svn_subst_eol_style_t
name|eol_style
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|always_repair_eols
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|special
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *stream_p to a stream that detranslates the file @a src from  * working copy form to normal form, allocated in @a pool.  *  * The values specified for @a eol_style, @a *eol_str, @a keywords and  * @a special, should be the ones used to translate the file to its  * working copy form.  Usually, these are the values specified by the  * user in the files' properties.  *  * Inconsistent line endings in the file will be automatically repaired  * (made consistent) for some eol styles.  For all others, an error is  * returned.  By setting @a always_repair_eols to @c TRUE, eols will be  * made consistent even for those styles which don't have it by default.  *  * @since New in 1.4.  *  * @deprecated Provided for backward compatibility with the 1.5 API.  *   Use svn_subst_stream_from_specialfile if the source is special;  *   otherwise, use svn_subst_stream_translated_to_normal_form.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_stream_detranslated
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream_p
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|svn_subst_eol_style_t
name|eol_style
parameter_list|,
specifier|const
name|char
modifier|*
name|eol_str
parameter_list|,
name|svn_boolean_t
name|always_repair_eols
parameter_list|,
name|apr_hash_t
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
name|special
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* EOL conversion and character encodings */
comment|/** Translate the string @a value from character encoding @a encoding to  * UTF8, and also from its current line-ending style to LF line-endings.  If  * @a encoding is @c NULL, translate from the system-default encoding.  *  * If @a translated_to_utf8 is not @c NULL, then set @a *translated_to_utf8  * to @c TRUE if at least one character of @a value in the source character  * encoding was translated to UTF-8, or to @c FALSE otherwise.  *  * If @a translated_line_endings is not @c NULL, then set @a  * *translated_line_endings to @c TRUE if at least one line ending was  * changed to LF, or to @c FALSE otherwise.  *  * If @a value has an inconsistent line ending style, then: if @a repair  * is @c FALSE, return @c SVN_ERR_IO_INCONSISTENT_EOL, else if @a repair is  * @c TRUE, convert any line ending in @a value to "\n" in  * @a *new_value.  Recognized line endings are: "\n", "\r", and "\r\n".  *  * Set @a *new_value to the translated string, allocated in @a result_pool.  *  * @a scratch_pool is used for temporary allocations.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_subst_translate_string2
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|new_value
parameter_list|,
name|svn_boolean_t
modifier|*
name|translated_to_utf8
parameter_list|,
name|svn_boolean_t
modifier|*
name|translated_line_endings
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
specifier|const
name|char
modifier|*
name|encoding
parameter_list|,
name|svn_boolean_t
name|repair
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_subst_translate_string2(), except that the information about  * whether re-encoding or line ending translation were performed is discarded.  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_subst_translate_string
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|new_value
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
specifier|const
name|char
modifier|*
name|encoding
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Translate the string @a value from UTF8 and LF line-endings into native  * character encoding and native line-endings.  If @a for_output is TRUE,  * translate to the character encoding of the output locale, else to that of  * the default locale.  *  * Set @a *new_value to the translated string, allocated in @a pool.  */
name|svn_error_t
modifier|*
name|svn_subst_detranslate_string
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|new_value
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|svn_boolean_t
name|for_output
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_SUBST_H */
end_comment

end_unit

