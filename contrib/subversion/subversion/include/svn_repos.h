begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_repos.h  * @brief Tools built on top of the filesystem.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_REPOS_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_REPOS_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|<apr_tables.h>
end_include

begin_include
include|#
directive|include
file|<apr_time.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_delta.h"
end_include

begin_include
include|#
directive|include
file|"svn_fs.h"
end_include

begin_include
include|#
directive|include
file|"svn_io.h"
end_include

begin_include
include|#
directive|include
file|"svn_mergeinfo.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* ---------------------------------------------------------------*/
comment|/**  * Get libsvn_repos version information.  *  * @since New in 1.1.  */
specifier|const
name|svn_version_t
modifier|*
name|svn_repos_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Some useful enums.  They need to be declared here for the notification    system to pick them up. */
comment|/** The different "actions" attached to nodes in the dumpfile. */
enum|enum
name|svn_node_action
block|{
name|svn_node_action_change
block|,
name|svn_node_action_add
block|,
name|svn_node_action_delete
block|,
name|svn_node_action_replace
block|}
enum|;
comment|/** The different policies for processing the UUID in the dumpfile. */
enum|enum
name|svn_repos_load_uuid
block|{
comment|/** only update uuid if the repos has no revisions. */
name|svn_repos_load_uuid_default
block|,
comment|/** never update uuid. */
name|svn_repos_load_uuid_ignore
block|,
comment|/** always update uuid. */
name|svn_repos_load_uuid_force
block|}
enum|;
comment|/** Callback type for checking authorization on paths produced by (at  * least) svn_repos_dir_delta2().  *  * Set @a *allowed to TRUE to indicate that some operation is  * authorized for @a path in @a root, or set it to FALSE to indicate  * unauthorized (presumably according to state stored in @a baton).  *  * Do not assume @a pool has any lifetime beyond this call.  *  * The exact operation being authorized depends on the callback  * implementation.  For read authorization, for example, the caller  * would implement an instance that does read checking, and pass it as  * a parameter named [perhaps] 'authz_read_func'.  The receiver of  * that parameter might also take another parameter named  * 'authz_write_func', which although sharing this type, would be a  * different implementation.  *  * @note If someday we want more sophisticated authorization states  * than just yes/no, @a allowed can become an enum type.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_repos_authz_func_t
function_decl|)
parameter_list|(
name|svn_boolean_t
modifier|*
name|allowed
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** An enum defining the kinds of access authz looks up.  *  * @since New in 1.3.  */
typedef|typedef
enum|enum
name|svn_repos_authz_access_t
block|{
comment|/** No access. */
name|svn_authz_none
init|=
literal|0
block|,
comment|/** Path can be read. */
name|svn_authz_read
init|=
literal|1
block|,
comment|/** Path can be altered. */
name|svn_authz_write
init|=
literal|2
block|,
comment|/** The other access credentials are recursive. */
name|svn_authz_recursive
init|=
literal|4
block|}
name|svn_repos_authz_access_t
typedef|;
comment|/** Callback type for checking authorization on paths produced by  * the repository commit editor.  *  * Set @a *allowed to TRUE to indicate that the @a required access on  * @a path in @a root is authorized, or set it to FALSE to indicate  * unauthorized (presumable according to state stored in @a baton).  *  * If @a path is NULL, the callback should perform a global authz  * lookup for the @a required access.  That is, the lookup should  * check if the @a required access is granted for at least one path of  * the repository, and set @a *allowed to TRUE if so.  @a root may  * also be NULL if @a path is NULL.  *  * This callback is very similar to svn_repos_authz_func_t, with the  * exception of the addition of the @a required parameter.  * This is due to historical reasons: when authz was first implemented  * for svn_repos_dir_delta2(), it seemed there would need only checks  * for read and write operations, hence the svn_repos_authz_func_t  * callback prototype and usage scenario.  But it was then realized  * that lookups due to copying needed to be recursive, and that  * brute-force recursive lookups didn't square with the O(1)  * performances a copy operation should have.  *  * So a special way to ask for a recursive lookup was introduced.  The  * commit editor needs this capability to retain acceptable  * performance.  Instead of revving the existing callback, causing  * unnecessary revving of functions that don't actually need the  * extended functionality, this second, more complete callback was  * introduced, for use by the commit editor.  *  * Some day, it would be nice to reunite these two callbacks and do  * the necessary revving anyway, but for the time being, this dual  * callback mechanism will do.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_repos_authz_callback_t
function_decl|)
parameter_list|(
name|svn_repos_authz_access_t
name|required
parameter_list|,
name|svn_boolean_t
modifier|*
name|allowed
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to #svn_file_rev_handler_t, but without the @a  * result_of_merge parameter.  *  * @deprecated Provided for backward compatibility with 1.4 API.  * @since New in 1.1.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_repos_file_rev_handler_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_hash_t
modifier|*
name|rev_props
parameter_list|,
name|svn_txdelta_window_handler_t
modifier|*
name|delta_handler
parameter_list|,
name|void
modifier|*
modifier|*
name|delta_baton
parameter_list|,
name|apr_array_header_t
modifier|*
name|prop_diffs
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Notification system. */
comment|/** The type of action occurring.  *  * @since New in 1.7.  */
typedef|typedef
enum|enum
name|svn_repos_notify_action_t
block|{
comment|/** A warning message is waiting. */
name|svn_repos_notify_warning
init|=
literal|0
block|,
comment|/** A revision has finished being dumped. */
name|svn_repos_notify_dump_rev_end
block|,
comment|/** A revision has finished being verified. */
name|svn_repos_notify_verify_rev_end
block|,
comment|/** All revisions have finished being dumped. */
name|svn_repos_notify_dump_end
block|,
comment|/** All revisions have finished being verified. */
name|svn_repos_notify_verify_end
block|,
comment|/** packing of an FSFS shard has commenced */
name|svn_repos_notify_pack_shard_start
block|,
comment|/** packing of an FSFS shard is completed */
name|svn_repos_notify_pack_shard_end
block|,
comment|/** packing of the shard revprops has commenced */
name|svn_repos_notify_pack_shard_start_revprop
block|,
comment|/** packing of the shard revprops has completed */
name|svn_repos_notify_pack_shard_end_revprop
block|,
comment|/** A revision has begun loading */
name|svn_repos_notify_load_txn_start
block|,
comment|/** A revision has finished loading */
name|svn_repos_notify_load_txn_committed
block|,
comment|/** A node has begun loading */
name|svn_repos_notify_load_node_start
block|,
comment|/** A node has finished loading */
name|svn_repos_notify_load_node_done
block|,
comment|/** A copied node has been encountered */
name|svn_repos_notify_load_copied_node
block|,
comment|/** Mergeinfo has been normalized */
name|svn_repos_notify_load_normalized_mergeinfo
block|,
comment|/** The operation has acquired a mutex for the repo. */
name|svn_repos_notify_mutex_acquired
block|,
comment|/** Recover has started. */
name|svn_repos_notify_recover_start
block|,
comment|/** Upgrade has started. */
name|svn_repos_notify_upgrade_start
block|,
comment|/** A revision was skipped during loading. @since New in 1.8. */
name|svn_repos_notify_load_skipped_rev
block|,
comment|/** The structure of a revision is being verified.  @since New in 1.8. */
name|svn_repos_notify_verify_rev_structure
block|}
name|svn_repos_notify_action_t
typedef|;
comment|/** The type of error occurring.  *  * @since New in 1.7.  */
typedef|typedef
enum|enum
name|svn_repos_notify_warning_t
block|{
comment|/** Referencing copy source data from a revision earlier than the    * first revision dumped. */
name|svn_repos_notify_warning_found_old_reference
block|,
comment|/** An #SVN_PROP_MERGEINFO property's encoded mergeinfo references a    * revision earlier than the first revision dumped. */
name|svn_repos_notify_warning_found_old_mergeinfo
block|,
comment|/** Found an invalid path in the filesystem.    * @see svn_fs.h:"Directory entry names and directory paths" */
comment|/* ### TODO(doxygen): make that a proper doxygen link */
comment|/* See svn_fs__path_valid(). */
name|svn_repos_notify_warning_invalid_fspath
block|}
name|svn_repos_notify_warning_t
typedef|;
comment|/**  * Structure used by #svn_repos_notify_func_t.  *  * The only field guaranteed to be populated is @c action.  Other fields are  * dependent upon the @c action.  (See individual fields for more information.)  *  * @note Callers of notification functions should use  * svn_repos_notify_create() to create structures of this type to allow for  * future extensibility.  *  * @since New in 1.7.  */
typedef|typedef
struct|struct
name|svn_repos_notify_t
block|{
comment|/** Action that describes what happened in the repository. */
name|svn_repos_notify_action_t
name|action
decl_stmt|;
comment|/** For #svn_repos_notify_dump_rev_end and #svn_repos_notify_verify_rev_end,    * the revision which just completed. */
name|svn_revnum_t
name|revision
decl_stmt|;
comment|/** For #svn_repos_notify_warning, the warning object. Must be cleared       by the consumer of the notification. */
specifier|const
name|char
modifier|*
name|warning_str
decl_stmt|;
name|svn_repos_notify_warning_t
name|warning
decl_stmt|;
comment|/** For #svn_repos_notify_pack_shard_start,       #svn_repos_notify_pack_shard_end,       #svn_repos_notify_pack_shard_start_revprop, and       #svn_repos_notify_pack_shard_end_revprop, the shard processed. */
name|apr_int64_t
name|shard
decl_stmt|;
comment|/** For #svn_repos_notify_load_node_done, the revision committed. */
name|svn_revnum_t
name|new_revision
decl_stmt|;
comment|/** For #svn_repos_notify_load_node_done, the source revision, if       different from @a new_revision, otherwise #SVN_INVALID_REVNUM.       For #svn_repos_notify_load_txn_start, the source revision. */
name|svn_revnum_t
name|old_revision
decl_stmt|;
comment|/** For #svn_repos_notify_load_node_start, the action being taken on the       node. */
name|enum
name|svn_node_action
name|node_action
decl_stmt|;
comment|/** For #svn_repos_notify_load_node_start, the path of the node. */
specifier|const
name|char
modifier|*
name|path
decl_stmt|;
comment|/* NOTE: Add new fields at the end to preserve binary compatibility.      Also, if you add fields here, you have to update      svn_repos_notify_create(). */
block|}
name|svn_repos_notify_t
typedef|;
comment|/** Callback for providing notification from the repository.  * Returns @c void.  Justification: success of an operation is not dependent  * upon successful notification of that operation.  *  * @since New in 1.7. */
typedef|typedef
name|void
function_decl|(
modifier|*
name|svn_repos_notify_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|svn_repos_notify_t
modifier|*
name|notify
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/**  * Allocate an #svn_repos_notify_t structure in @a result_pool, initialize  * and return it.  *  * @since New in 1.7.  */
name|svn_repos_notify_t
modifier|*
name|svn_repos_notify_create
parameter_list|(
name|svn_repos_notify_action_t
name|action
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** The repository object. */
typedef|typedef
name|struct
name|svn_repos_t
name|svn_repos_t
typedef|;
comment|/* Opening and creating repositories. */
comment|/** Find the root path of the repository that contains @a path.  *  * If a repository was found, the path to the root of the repository  * is returned, else @c NULL. The pointer to the returned path may be  * equal to @a path.  */
specifier|const
name|char
modifier|*
name|svn_repos_find_root_path
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *repos_p to a repository object for the repository at @a path.  *  * Allocate @a *repos_p in @a pool.  *  * Acquires a shared lock on the repository, and attaches a cleanup  * function to @a pool to remove the lock.  If no lock can be acquired,  * returns error, with undefined effect on @a *repos_p.  If an exclusive  * lock is present, this blocks until it's gone.  @a fs_config will be  * passed to the filesystem initialization function and may be @c NULL.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_open2
parameter_list|(
name|svn_repos_t
modifier|*
modifier|*
name|repos_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_hash_t
modifier|*
name|fs_config
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_repos_open2() with @a fs_config set to NULL.  *  * @deprecated Provided for backward compatibility with 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_open
parameter_list|(
name|svn_repos_t
modifier|*
modifier|*
name|repos_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Create a new Subversion repository at @a path, building the necessary  * directory structure, creating the filesystem, and so on.  * Return the repository object in @a *repos_p, allocated in @a pool.  *  * @a config is a client configuration hash of #svn_config_t * items  * keyed on config category names, and may be NULL.  *  * @a fs_config is passed to the filesystem, and may be NULL.  *  * @a unused_1 and @a unused_2 are not used and should be NULL.  */
name|svn_error_t
modifier|*
name|svn_repos_create
parameter_list|(
name|svn_repos_t
modifier|*
modifier|*
name|repos_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|unused_1
parameter_list|,
specifier|const
name|char
modifier|*
name|unused_2
parameter_list|,
name|apr_hash_t
modifier|*
name|config
parameter_list|,
name|apr_hash_t
modifier|*
name|fs_config
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Upgrade the Subversion repository (and its underlying versioned  * filesystem) located in the directory @a path to the latest version  * supported by this library.  If the requested upgrade is not  * supported due to the current state of the repository or it  * underlying filesystem, return #SVN_ERR_REPOS_UNSUPPORTED_UPGRADE  * or #SVN_ERR_FS_UNSUPPORTED_UPGRADE (respectively) and make no  * changes to the repository or filesystem.  *  * Acquires an exclusive lock on the repository, upgrades the  * repository, and releases the lock.  If an exclusive lock can't be  * acquired, returns error.  *  * If @a nonblocking is TRUE, an error of type EWOULDBLOCK is  * returned if the lock is not immediately available.  *  * If @a start_callback is not NULL, it will be called with @a  * start_callback_baton as argument before the upgrade starts, but  * after the exclusive lock has been acquired.  *  * Use @a pool for necessary allocations.  *  * @note This functionality is provided as a convenience for  * administrators wishing to make use of new Subversion functionality  * without a potentially costly full repository dump/load.  As such,  * the operation performs only the minimum amount of work needed to  * accomplish this while maintaining the integrity of the repository.  * It does *not* guarantee the most optimized repository state as a  * dump and subsequent load would.  *  * @note On some platforms the exclusive lock does not exclude other  * threads in the same process so this function should only be called  * by a single threaded process, or by a multi-threaded process when  * no other threads are accessing the repository.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_upgrade2
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|nonblocking
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_upgrade2(), but with @a start_callback and baton,  * rather than a notify_callback / baton  *  * @since New in 1.5.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_upgrade
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|nonblocking
parameter_list|,
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|start_callback
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|)
parameter_list|,
name|void
modifier|*
name|start_callback_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Destroy the Subversion repository found at @a path, using @a pool for any  * necessary allocations.  */
name|svn_error_t
modifier|*
name|svn_repos_delete
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *has to TRUE if @a repos has @a capability (one of the  * capabilities beginning with @c "SVN_REPOS_CAPABILITY_"), else set  * @a *has to FALSE.  *  * If @a capability isn't recognized, throw #SVN_ERR_UNKNOWN_CAPABILITY,  * with the effect on @a *has undefined.  *  * Use @a pool for all allocation.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_has_capability
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_boolean_t
modifier|*
name|has
parameter_list|,
specifier|const
name|char
modifier|*
name|capability
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @} */
comment|/**  * The capability of doing the right thing with merge-tracking  * information, both storing it and responding to queries about it.  *  * @since New in 1.5.  */
define|#
directive|define
name|SVN_REPOS_CAPABILITY_MERGEINFO
value|"mergeinfo"
comment|/*       *** PLEASE READ THIS IF YOU ADD A NEW CAPABILITY ***  *  * @c SVN_REPOS_CAPABILITY_foo strings should not include colons, to  * be consistent with @c SVN_RA_CAPABILITY_foo strings, which forbid  * colons for their own reasons.  While this RA limitation has no  * direct impact on repository capabilities, there's no reason to be  * gratuitously different either.  *  * If you add a capability, update svn_repos_capabilities().  */
comment|/** Return the filesystem associated with repository object @a repos. */
name|svn_fs_t
modifier|*
name|svn_repos_fs
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|)
function_decl|;
comment|/** Make a hot copy of the Subversion repository found at @a src_path  * to @a dst_path.  *  * Copy a possibly live Subversion repository from @a src_path to  * @a dst_path.  If @a clean_logs is @c TRUE, perform cleanup on the  * source filesystem as part of the copy operation; currently, this  * means deleting copied, unused logfiles for a Berkeley DB source  * repository.  *  * If @a incremental is TRUE, make an effort to not re-copy information  * already present in the destination. If incremental hotcopy is not  * implemented by the filesystem backend, raise SVN_ERR_UNSUPPORTED_FEATURE.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_hotcopy2
parameter_list|(
specifier|const
name|char
modifier|*
name|src_path
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_path
parameter_list|,
name|svn_boolean_t
name|clean_logs
parameter_list|,
name|svn_boolean_t
name|incremental
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Like svn_repos_hotcopy2(), but with @a incremental always passed as  * @c FALSE and without cancellation support.  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_hotcopy
parameter_list|(
specifier|const
name|char
modifier|*
name|src_path
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_path
parameter_list|,
name|svn_boolean_t
name|clean_logs
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Possibly update the repository, @a repos, to use a more efficient  * filesystem representation.  Use @a pool for allocations.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_pack2
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_fs_pack2(), but with a #svn_fs_pack_notify_t instead  * of a #svn_repos_notify_t.  *  * @since New in 1.6.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_fs_pack
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_fs_pack_notify_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Run database recovery procedures on the repository at @a path,  * returning the database to a consistent state.  Use @a pool for all  * allocation.  *  * Acquires an exclusive lock on the repository, recovers the  * database, and releases the lock.  If an exclusive lock can't be  * acquired, returns error.  *  * If @a nonblocking is TRUE, an error of type EWOULDBLOCK is  * returned if the lock is not immediately available.  *  * If @a notify_func is not NULL, it will be called with @a  * notify_baton as argument before the recovery starts, but  * after the exclusive lock has been acquired.  *  * If @a cancel_func is not @c NULL, it is called periodically with  * @a cancel_baton as argument to see if the client wishes to cancel  * the recovery.  *  * @note On some platforms the exclusive lock does not exclude other  * threads in the same process so this function should only be called  * by a single threaded process, or by a multi-threaded process when  * no other threads are accessing the repository.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_recover4
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|nonblocking
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_recover4(), but with @a start callback in place of  * the notify_func / baton.  *  * @since New in 1.5.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_recover3
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|nonblocking
parameter_list|,
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|start_callback
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|)
parameter_list|,
name|void
modifier|*
name|start_callback_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_recover3(), but without cancellation support.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_recover2
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|nonblocking
parameter_list|,
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|start_callback
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|)
parameter_list|,
name|void
modifier|*
name|start_callback_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_recover2(), but with nonblocking set to FALSE, and  * with no callbacks provided.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_recover
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Callback for svn_repos_freeze.  *  * @since New in 1.8.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_repos_freeze_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Take an exclusive lock on each of the repositories in @a paths to  * prevent commits and then while holding all the locks invoke @a  * freeze_func passing @a freeze_baton.  Each repository may be readable by  * Subversion while frozen, or may be unreadable, depending on which  * FS backend the repository uses.  Repositories are locked in the  * order in which they are specified in the array.  *  * @note On some platforms the exclusive lock does not exclude other  * threads in the same process so this function should only be called  * by a single threaded process, or by a multi-threaded process when  * no other threads are accessing the repositories.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_freeze
parameter_list|(
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_repos_freeze_func_t
name|freeze_func
parameter_list|,
name|void
modifier|*
name|freeze_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** This function is a wrapper around svn_fs_berkeley_logfiles(),  * returning log file paths relative to the root of the repository.  *  * @copydoc svn_fs_berkeley_logfiles()  */
name|svn_error_t
modifier|*
name|svn_repos_db_logfiles
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|logfiles
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|only_unused
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Repository Paths */
comment|/** Return the top-level repository path allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_path
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's filesystem directory, allocated in  * @a pool.  */
specifier|const
name|char
modifier|*
name|svn_repos_db_env
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return path to @a repos's config directory, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_conf_dir
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return path to @a repos's svnserve.conf, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_svnserve_conf
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return path to @a repos's lock directory, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_lock_dir
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return path to @a repos's db lockfile, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_db_lockfile
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return path to @a repos's db logs lockfile, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_db_logs_lockfile
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's hook directory, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_hook_dir
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's start-commit hook, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_start_commit_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's pre-commit hook, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_pre_commit_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's post-commit hook, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_post_commit_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's pre-revprop-change hook, allocated in  * @a pool.  */
specifier|const
name|char
modifier|*
name|svn_repos_pre_revprop_change_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's post-revprop-change hook, allocated in  * @a pool.  */
specifier|const
name|char
modifier|*
name|svn_repos_post_revprop_change_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @defgroup svn_repos_lock_hooks Paths to lock hooks  * @{  * @since New in 1.2. */
comment|/** Return the path to @a repos's pre-lock hook, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_pre_lock_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's post-lock hook, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_post_lock_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's pre-unlock hook, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_pre_unlock_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the path to @a repos's post-unlock hook, allocated in @a pool. */
specifier|const
name|char
modifier|*
name|svn_repos_post_unlock_hook
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Specify that Subversion should consult the configuration file  * located at @a hooks_env_path to determine how to setup the  * environment for hook scripts invoked for the repository @a repos.  * As a special case, if @a hooks_env_path is @c NULL, look for the  * file in its default location within the repository disk structure.  * If @a hooks_env_path is not absolute, it specifies a path relative  * to the parent of the file's default location.  *  * Use @a scratch_pool for temporary allocations.  *  * If this function is not called, or if the specified configuration  * file does not define any environment variables, hooks will run in  * an empty environment.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_hooks_setenv
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|hooks_env_path
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** @} */
comment|/* ---------------------------------------------------------------*/
comment|/* Reporting the state of a working copy, for updates. */
comment|/**  * Construct and return a @a report_baton that will be passed to the  * other functions in this section to describe the state of a pre-existing  * tree (typically, a working copy).  When the report is finished,  * @a editor/@a edit_baton will be driven in such a way as to transform the  * existing tree to @a revnum and, if @a tgt_path is non-NULL, switch the  * reported hierarchy to @a tgt_path.  *  * @a fs_base is the absolute path of the node in the filesystem at which  * the comparison should be rooted.  @a target is a single path component,  * used to limit the scope of the report to a single entry of @a fs_base,  * or "" if all of @a fs_base itself is the main subject of the report.  *  * @a tgt_path and @a revnum is the fs path/revision pair that is the  * "target" of the delta.  @a tgt_path should be provided only when  * the source and target paths of the report differ.  That is, @a tgt_path  * should *only* be specified when specifying that the resultant editor  * drive be one that transforms the reported hierarchy into a pristine tree  * of @a tgt_path at revision @a revnum.  A @c NULL value for @a tgt_path  * will indicate that the editor should be driven in such a way as to  * transform the reported hierarchy to revision @a revnum, preserving the  * reported hierarchy.  *  * @a text_deltas instructs the driver of the @a editor to enable  * the generation of text deltas.  *  * @a ignore_ancestry instructs the driver to ignore node ancestry  * when determining how to transmit differences.  *  * @a send_copyfrom_args instructs the driver to send 'copyfrom'  * arguments to the editor's add_file() and add_directory() methods,  * whenever it deems feasible.  *  * Use @a authz_read_func and @a authz_read_baton (if not @c NULL) to  * avoid sending data through @a editor/@a edit_baton which is not  * authorized for transmission.  *  * @a zero_copy_limit controls the maximum size (in bytes) at which  * data blocks may be sent using the zero-copy code path.  On that  * path, a number of in-memory copy operations have been eliminated to  * maximize throughput.  However, until the whole block has been  * pushed to the network stack, other clients block, so be careful  * when using larger values here.  Pass 0 for @a zero_copy_limit to  * disable this optimization altogether.  *  * @a note Never activate this optimization if @a editor might access  * any FSFS data structures (and, hence, caches).  So, it is basically  * safe for networked editors only.  *  * All allocation for the context and collected state will occur in  * @a pool.  *  * @a depth is the requested depth of the editor drive.  *  * If @a depth is #svn_depth_unknown, the editor will affect only the  * paths reported by the individual calls to svn_repos_set_path3() and  * svn_repos_link_path3().  *  * For example, if the reported tree is the @c A subdir of the Greek Tree  * (see Subversion's test suite), at depth #svn_depth_empty, but the  * @c A/B subdir is reported at depth #svn_depth_infinity, then  * repository-side changes to @c A/mu, or underneath @c A/C and @c  * A/D, would not be reflected in the editor drive, but changes  * underneath @c A/B would be.  *  * Additionally, the editor driver will call @c add_directory and  * and @c add_file for directories with an appropriate depth.  For  * example, a directory reported at #svn_depth_files will receive  * file (but not directory) additions.  A directory at #svn_depth_empty  * will receive neither.  *  * If @a depth is #svn_depth_files, #svn_depth_immediates or  * #svn_depth_infinity and @a depth is greater than the reported depth  * of the working copy, then the editor driver will emit editor  * operations so as to upgrade the working copy to this depth.  *  * If @a depth is #svn_depth_empty, #svn_depth_files,  * #svn_depth_immediates and @a depth is lower  * than or equal to the depth of the working copy, then the editor  * operations will affect only paths at or above @a depth.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_begin_report3
parameter_list|(
name|void
modifier|*
modifier|*
name|report_baton
parameter_list|,
name|svn_revnum_t
name|revnum
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|fs_base
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
name|tgt_path
parameter_list|,
name|svn_boolean_t
name|text_deltas
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
name|svn_boolean_t
name|send_copyfrom_args
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_size_t
name|zero_copy_limit
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * The same as svn_repos_begin_report3(), but with @a zero_copy_limit  * always passed as 0.  *  * @since New in 1.5.  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_begin_report2
parameter_list|(
name|void
modifier|*
modifier|*
name|report_baton
parameter_list|,
name|svn_revnum_t
name|revnum
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|fs_base
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
name|tgt_path
parameter_list|,
name|svn_boolean_t
name|text_deltas
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
name|svn_boolean_t
name|send_copyfrom_args
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * The same as svn_repos_begin_report2(), but taking a boolean  * @a recurse flag, and sending FALSE for @a send_copyfrom_args.  *  * If @a recurse is TRUE, the editor driver will drive the editor with  * a depth of #svn_depth_infinity; if FALSE, then with a depth of  * #svn_depth_files.  *  * @note @a username is ignored, and has been removed in a revised  * version of this API.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_begin_report
parameter_list|(
name|void
modifier|*
modifier|*
name|report_baton
parameter_list|,
name|svn_revnum_t
name|revnum
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|fs_base
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
name|tgt_path
parameter_list|,
name|svn_boolean_t
name|text_deltas
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Given a @a report_baton constructed by svn_repos_begin_report3(),  * record the presence of @a path, at @a revision with depth @a depth,  * in the current tree.  *  * @a path is relative to the anchor/target used in the creation of the  * @a report_baton.  *  * @a revision may be SVN_INVALID_REVNUM if (for example) @a path  * represents a locally-added path with no revision number, or @a  * depth is #svn_depth_exclude.  *  * @a path may not be underneath a path on which svn_repos_set_path3()  * was previously called with #svn_depth_exclude in this report.  *  * The first call of this in a given report usually passes an empty  * @a path; this is used to set up the correct root revision for the editor  * drive.  *  * A depth of #svn_depth_unknown is not allowed, and results in an  * error.  *  * If @a start_empty is TRUE and @a path is a directory, then require the  * caller to explicitly provide all the children of @a path - do not assume  * that the tree also contains all the children of @a path at @a revision.  * This is for 'low confidence' client reporting.  *  * If the caller has a lock token for @a path, then @a lock_token should  * be set to that token.  Else, @a lock_token should be NULL.  *  * All temporary allocations are done in @a pool.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_set_path3
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_token
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_set_path3(), but with @a depth set to  * #svn_depth_infinity.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_set_path2
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_token
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_set_path2(), but with @a lock_token set to @c NULL.  *  * @deprecated Provided for backward compatibility with the 1.1 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_set_path
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Given a @a report_baton constructed by svn_repos_begin_report3(),  * record the presence of @a path in the current tree, containing the contents  * of @a link_path at @a revision with depth @a depth.  *  * A depth of #svn_depth_unknown is not allowed, and results in an  * error.  *  * @a path may not be underneath a path on which svn_repos_set_path3()  * was previously called with #svn_depth_exclude in this report.  *  * Note that while @a path is relative to the anchor/target used in the  * creation of the @a report_baton, @a link_path is an absolute filesystem  * path!  *  * If @a start_empty is TRUE and @a path is a directory, then require the  * caller to explicitly provide all the children of @a path - do not assume  * that the tree also contains all the children of @a link_path at  * @a revision.  This is for 'low confidence' client reporting.  *  * If the caller has a lock token for @a link_path, then @a lock_token  * should be set to that token.  Else, @a lock_token should be NULL.  *  * All temporary allocations are done in @a pool.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_link_path3
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|link_path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_token
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_link_path3(), but with @a depth set to  * #svn_depth_infinity.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_link_path2
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|link_path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_token
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_link_path2(), but with @a lock_token set to @c NULL.  *  * @deprecated Provided for backward compatibility with the 1.1 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_link_path
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|link_path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Given a @a report_baton constructed by svn_repos_begin_report3(),  * record the non-existence of @a path in the current tree.  *  * @a path may not be underneath a path on which svn_repos_set_path3()  * was previously called with #svn_depth_exclude in this report.  *  * (This allows the reporter's driver to describe missing pieces of a  * working copy, so that 'svn up' can recreate them.)  *  * All temporary allocations are done in @a pool.  */
name|svn_error_t
modifier|*
name|svn_repos_delete_path
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Given a @a report_baton constructed by svn_repos_begin_report3(),  * finish the report and drive the editor as specified when the report  * baton was constructed.  *  * If an error occurs during the driving of the editor, do NOT abort the  * edit; that responsibility belongs to the caller of this function, if  * it happens at all.  *  * After the call to this function, @a report_baton is no longer valid;  * it should not be passed to any other reporting functions, including  * svn_repos_abort_report(), even if this function returns an error.  */
name|svn_error_t
modifier|*
name|svn_repos_finish_report
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Given a @a report_baton constructed by svn_repos_begin_report3(),  * abort the report.  This function can be called anytime before  * svn_repos_finish_report() is called.  *  * After the call to this function, @a report_baton is no longer valid;  * it should not be passed to any other reporting functions.  */
name|svn_error_t
modifier|*
name|svn_repos_abort_report
parameter_list|(
name|void
modifier|*
name|report_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/* The magical dir_delta update routines. */
comment|/** Use the provided @a editor and @a edit_baton to describe the changes  * necessary for making a given node (and its descendants, if it is a  * directory) under @a src_root look exactly like @a tgt_path under  * @a tgt_root.  @a src_entry is the node to update.  If @a src_entry  * is empty, then compute the difference between the entire tree  * anchored at @a src_parent_dir under @a src_root and @a tgt_path  * under @a tgt_root.  Else, describe the changes needed to update  * only that entry in @a src_parent_dir.  Typically, callers of this  * function will use a @a tgt_path that is the concatenation of @a  * src_parent_dir and @a src_entry.  *  * @a src_root and @a tgt_root can both be either revision or transaction  * roots.  If @a tgt_root is a revision, @a editor's set_target_revision()  * will be called with the @a tgt_root's revision number, else it will  * not be called at all.  *  * If @a authz_read_func is non-NULL, invoke it before any call to  *  *    @a editor->open_root  *    @a editor->add_directory  *    @a editor->open_directory  *    @a editor->add_file  *    @a editor->open_file  *  * passing @a tgt_root, the same path that would be passed to the  * editor function in question, and @a authz_read_baton.  If the  * @a *allowed parameter comes back TRUE, then proceed with the planned  * editor call; else if FALSE, then invoke @a editor->absent_file or  * @a editor->absent_directory as appropriate, except if the planned  * editor call was open_root, throw SVN_ERR_AUTHZ_ROOT_UNREADABLE.  *  * If @a text_deltas is @c FALSE, send a single @c NULL txdelta window to  * the window handler returned by @a editor->apply_textdelta().  *  * If @a depth is #svn_depth_empty, invoke @a editor calls only on  * @a src_entry (or @a src_parent_dir, if @a src_entry is empty).  * If @a depth is #svn_depth_files, also invoke the editor on file  * children, if any; if #svn_depth_immediates, invoke it on  * immediate subdirectories as well as files; if #svn_depth_infinity,  * recurse fully.  *  * If @a entry_props is @c TRUE, accompany each opened/added entry with  * propchange editor calls that relay special "entry props" (this  * is typically used only for working copy updates).  *  * @a ignore_ancestry instructs the function to ignore node ancestry  * when determining how to transmit differences.  *  * Before completing successfully, this function calls @a editor's  * close_edit(), so the caller should expect its @a edit_baton to be  * invalid after its use with this function.  *  * Do any allocation necessary for the delta computation in @a pool.  * This function's maximum memory consumption is at most roughly  * proportional to the greatest depth of the tree under @a tgt_root, not  * the total size of the delta.  *  * ### svn_repos_dir_delta2 is mostly superseded by the reporter  * ### functionality (svn_repos_begin_report3 and friends).  * ### svn_repos_dir_delta2 does allow the roots to be transaction  * ### roots rather than just revision roots, and it has the  * ### entry_props flag.  Almost all of Subversion's own code uses the  * ### reporter instead; there are some stray references to the  * ### svn_repos_dir_delta[2] in comments which should probably  * ### actually refer to the reporter.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_dir_delta2
parameter_list|(
name|svn_fs_root_t
modifier|*
name|src_root
parameter_list|,
specifier|const
name|char
modifier|*
name|src_parent_dir
parameter_list|,
specifier|const
name|char
modifier|*
name|src_entry
parameter_list|,
name|svn_fs_root_t
modifier|*
name|tgt_root
parameter_list|,
specifier|const
name|char
modifier|*
name|tgt_path
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_boolean_t
name|text_deltas
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|entry_props
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_dir_delta2(), but if @a recurse is TRUE, pass  * #svn_depth_infinity for @a depth, and if @a recurse is FALSE,  * pass #svn_depth_files for @a depth.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_dir_delta
parameter_list|(
name|svn_fs_root_t
modifier|*
name|src_root
parameter_list|,
specifier|const
name|char
modifier|*
name|src_parent_dir
parameter_list|,
specifier|const
name|char
modifier|*
name|src_entry
parameter_list|,
name|svn_fs_root_t
modifier|*
name|tgt_root
parameter_list|,
specifier|const
name|char
modifier|*
name|tgt_path
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_boolean_t
name|text_deltas
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
name|svn_boolean_t
name|entry_props
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Use the provided @a editor and @a edit_baton to describe the  * skeletal changes made in a particular filesystem @a root  * (revision or transaction).  *  * Changes will be limited to those within @a base_dir, and if  * @a low_water_mark is set to something other than #SVN_INVALID_REVNUM  * it is assumed that the client has no knowledge of revisions prior to  * @a low_water_mark.  Together, these two arguments define the portion of  * the tree that the client is assumed to have knowledge of, and thus any  * copies of data from outside that part of the tree will be sent in their  * entirety, not as simple copies or deltas against a previous version.  *  * The @a editor passed to this function should be aware of the fact  * that, if @a send_deltas is FALSE, calls to its change_dir_prop(),  * change_file_prop(), and apply_textdelta() functions will not  * contain meaningful data, and merely serve as indications that  * properties or textual contents were changed.  *  * If @a send_deltas is @c TRUE, the text and property deltas for changes  * will be sent, otherwise NULL text deltas and empty prop changes will be  * used.  *  * If @a authz_read_func is non-NULL, it will be used to determine if the  * user has read access to the data being accessed.  Data that the user  * cannot access will be skipped.  *  * @note This editor driver passes SVN_INVALID_REVNUM for all  * revision parameters in the editor interface except the copyfrom  * parameter of the add_file() and add_directory() editor functions.  *  * @since New in 1.4.  */
name|svn_error_t
modifier|*
name|svn_repos_replay2
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|base_dir
parameter_list|,
name|svn_revnum_t
name|low_water_mark
parameter_list|,
name|svn_boolean_t
name|send_deltas
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_replay2(), but with @a base_dir set to @c "",  * @a low_water_mark set to #SVN_INVALID_REVNUM, @a send_deltas  * set to @c FALSE, and @a authz_read_func and @a authz_read_baton  * set to @c NULL.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_replay
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/* Making commits. */
comment|/**  * Return an @a editor and @a edit_baton to commit changes to the  * filesystem of @a repos, beginning at location 'rev:@a base_path',  * where "rev" is the argument given to open_root().  *  * @a repos is a previously opened repository.  @a repos_url is the  * decoded URL to the base of the repository, and is used to check  * copyfrom paths.  copyfrom paths passed to the editor must be full,  * URI-encoded, URLs.  @a txn is a filesystem transaction object to use  * during the commit, or @c NULL to indicate that this function should  * create (and fully manage) a new transaction.  *  * Store the contents of @a revprop_table, a hash mapping<tt>const  * char *</tt> property names to #svn_string_t values, as properties  * of the commit transaction, including author and log message if  * present.  *  * @note #SVN_PROP_REVISION_DATE may be present in @a revprop_table, but  * it will be overwritten when the transaction is committed.  *  * Iff @a authz_callback is provided, check read/write authorizations  * on paths accessed by editor operations.  An operation which fails  * due to authz will return SVN_ERR_AUTHZ_UNREADABLE or  * SVN_ERR_AUTHZ_UNWRITABLE.  *  * Calling @a (*editor)->close_edit completes the commit.  *  * If @a commit_callback is non-NULL, then before @c close_edit returns (but  * after the commit has succeeded) @c close_edit will invoke  * @a commit_callback with a filled-in #svn_commit_info_t *, @a commit_baton,  * and @a pool or some subpool thereof as arguments.  If @a commit_callback  * returns an error, that error will be returned from @c close_edit,  * otherwise if there was a post-commit hook failure, then that error  * will be returned with code SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED.  * (Note that prior to Subversion 1.6, @a commit_callback cannot be NULL; if  * you don't need a callback, pass a dummy function.)  *  * Calling @a (*editor)->abort_edit aborts the commit, and will also  * abort the commit transaction unless @a txn was supplied (not @c  * NULL).  Callers who supply their own transactions are responsible  * for cleaning them up (either by committing them, or aborting them).  *  * @since New in 1.5.  *  * @note Yes, @a repos_url is a<em>decoded</em> URL.  We realize  * that's sorta wonky.  Sorry about that.  */
name|svn_error_t
modifier|*
name|svn_repos_get_commit_editor5
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_path
parameter_list|,
name|apr_hash_t
modifier|*
name|revprop_table
parameter_list|,
name|svn_commit_callback2_t
name|commit_callback
parameter_list|,
name|void
modifier|*
name|commit_baton
parameter_list|,
name|svn_repos_authz_callback_t
name|authz_callback
parameter_list|,
name|void
modifier|*
name|authz_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_commit_editor5(), but with @a revprop_table  * set to a hash containing @a user and @a log_msg as the  * #SVN_PROP_REVISION_AUTHOR and #SVN_PROP_REVISION_LOG properties,  * respectively.  @a user and @a log_msg may both be @c NULL.  *  * @since New in 1.4.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_commit_editor4
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_path
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|log_msg
parameter_list|,
name|svn_commit_callback2_t
name|commit_callback
parameter_list|,
name|void
modifier|*
name|commit_baton
parameter_list|,
name|svn_repos_authz_callback_t
name|authz_callback
parameter_list|,
name|void
modifier|*
name|authz_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_commit_editor4(), but  * uses the svn_commit_callback_t type.  *  * @since New in 1.3.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_commit_editor3
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_path
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|log_msg
parameter_list|,
name|svn_commit_callback_t
name|callback
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|,
name|svn_repos_authz_callback_t
name|authz_callback
parameter_list|,
name|void
modifier|*
name|authz_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_commit_editor3(), but with @a  * authz_callback and @a authz_baton set to @c NULL.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_commit_editor2
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_path
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|log_msg
parameter_list|,
name|svn_commit_callback_t
name|callback
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_commit_editor2(), but with @a txn always  * set to @c NULL.  *  * @deprecated Provided for backward compatibility with the 1.1 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_commit_editor
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_path
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|log_msg
parameter_list|,
name|svn_commit_callback_t
name|callback
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/* Finding particular revisions. */
comment|/** Set @a *revision to the revision number in @a repos's filesystem that was  * youngest at time @a tm.  */
name|svn_error_t
modifier|*
name|svn_repos_dated_revision
parameter_list|(
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_time_t
name|tm
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Given a @a root/@a path within some filesystem, return three pieces of  * information allocated in @a pool:  *  *    - set @a *committed_rev to the revision in which the object was  *      last modified.  (In fs parlance, this is the revision in which  *      the particular node-rev-id was 'created'.)  *  *    - set @a *committed_date to the date of said revision, or @c NULL  *      if not available.  *  *    - set @a *last_author to the author of said revision, or @c NULL  *      if not available.  */
name|svn_error_t
modifier|*
name|svn_repos_get_committed_info
parameter_list|(
name|svn_revnum_t
modifier|*
name|committed_rev
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|committed_date
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|last_author
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *dirent to an #svn_dirent_t associated with @a path in @a  * root.  If @a path does not exist in @a root, set @a *dirent to  * NULL.  Use @a pool for memory allocation.  *  * @since New in 1.2.  */
name|svn_error_t
modifier|*
name|svn_repos_stat
parameter_list|(
name|svn_dirent_t
modifier|*
modifier|*
name|dirent
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Given @a path which exists at revision @a start in @a fs, set  * @a *deleted to the revision @a path was first deleted, within the  * inclusive revision range bounded by @a start and @a end.  If @a path  * does not exist at revision @a start or was not deleted within the  * specified range, then set @a *deleted to SVN_INVALID_REVNUM.  * Use @a pool for memory allocation.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_deleted_rev
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_revnum_t
modifier|*
name|deleted
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Callback type for use with svn_repos_history().  @a path and @a  * revision represent interesting history locations in the lifetime  * of the path passed to svn_repos_history().  @a baton is the same  * baton given to svn_repos_history().  @a pool is provided for the  * convenience of the implementor, who should not expect it to live  * longer than a single callback call.  *  * Signal to callback driver to stop processing/invoking this callback  * by returning the #SVN_ERR_CEASE_INVOCATION error code.  *  * @note SVN_ERR_CEASE_INVOCATION is new in 1.5.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_repos_history_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Call @a history_func (with @a history_baton) for each interesting  * history location in the lifetime of @a path in @a fs, from the  * youngest of @a end and @a start to the oldest.  Stop processing if  * @a history_func returns #SVN_ERR_CEASE_INVOCATION.  Only cross  * filesystem copy history if @a cross_copies is @c TRUE.  And do all  * of this in @a pool.  *  * If @a authz_read_func is non-NULL, then use it (and @a  * authz_read_baton) to verify that @a path in @a end is readable; if  * not, return SVN_ERR_AUTHZ_UNREADABLE.  Also verify the readability  * of every ancestral path/revision pair before pushing them at @a  * history_func.  If a pair is deemed unreadable, then do not send  * them; instead, immediately stop traversing history and return  * SVN_NO_ERROR.  *  * @since New in 1.1.  *  * @note SVN_ERR_CEASE_INVOCATION is new in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_history2
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_repos_history_func_t
name|history_func
parameter_list|,
name|void
modifier|*
name|history_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_boolean_t
name|cross_copies
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_history2(), but with @a authz_read_func  * and @a authz_read_baton always set to NULL.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_history
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_repos_history_func_t
name|history_func
parameter_list|,
name|void
modifier|*
name|history_baton
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_boolean_t
name|cross_copies
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *locations to be a mapping of the revisions to the paths of  * the file @a fs_path present at the repository in revision  * @a peg_revision, where the revisions are taken out of the array  * @a location_revisions.  *  * @a location_revisions is an array of svn_revnum_t's and @a *locations  * maps 'svn_revnum_t *' to 'const char *'.  *  * If optional @a authz_read_func is non-NULL, then use it (and @a  * authz_read_baton) to verify that the peg-object is readable.  If not,  * return SVN_ERR_AUTHZ_UNREADABLE.  Also use the @a authz_read_func  * to check that every path returned in the hash is readable.  If an  * unreadable path is encountered, stop tracing and return  * SVN_NO_ERROR.  *  * @a pool is used for all allocations.  *  * @since New in 1.1.  */
name|svn_error_t
modifier|*
name|svn_repos_trace_node_locations
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|locations
parameter_list|,
specifier|const
name|char
modifier|*
name|fs_path
parameter_list|,
name|svn_revnum_t
name|peg_revision
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|location_revisions
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Call @a receiver and @a receiver_baton to report successive  * location segments in revisions between @a start_rev and @a end_rev  * (inclusive) for the line of history identified by the peg-object @a  * path in @a peg_revision (and in @a repos).  *  * @a end_rev may be #SVN_INVALID_REVNUM to indicate that you want  * to trace the history of the object to its origin.  *  * @a start_rev may be #SVN_INVALID_REVNUM to indicate "the HEAD  * revision".  Otherwise, @a start_rev must be younger than @a end_rev  * (unless @a end_rev is #SVN_INVALID_REVNUM).  *  * @a peg_revision may be #SVN_INVALID_REVNUM to indicate "the HEAD  * revision", and must evaluate to be at least as young as @a start_rev.  *  * If optional @a authz_read_func is not @c NULL, then use it (and @a  * authz_read_baton) to verify that the peg-object is readable.  If  * not, return #SVN_ERR_AUTHZ_UNREADABLE.  Also use the @a  * authz_read_func to check that every path reported in a location  * segment is readable.  If an unreadable path is encountered, report  * a final (possibly truncated) location segment (if any), stop  * tracing history, and return #SVN_NO_ERROR.  *  * @a pool is used for all allocations.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_node_location_segments
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|peg_revision
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|svn_location_segment_receiver_t
name|receiver
parameter_list|,
name|void
modifier|*
name|receiver_baton
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ### other queries we can do someday --       * fetch the last revision created by<user>          (once usernames become revision properties!)      * fetch the last revision where<path> was modified  */
comment|/* ---------------------------------------------------------------*/
comment|/* Retrieving log messages. */
comment|/**  * Invoke @a receiver with @a receiver_baton on each log message from  * @a start to @a end in @a repos's filesystem.  @a start may be greater  * or less than @a end; this just controls whether the log messages are  * processed in descending or ascending revision number order.  *  * If @a start or @a end is #SVN_INVALID_REVNUM, it defaults to youngest.  *  * If @a paths is non-NULL and has one or more elements, then only show  * revisions in which at least one of @a paths was changed (i.e., if  * file, text or props changed; if dir, props or entries changed or any node  * changed below it).  Each path is a<tt>const char *</tt> representing  * an absolute path in the repository.  If @a paths is NULL or empty,  * show all revisions regardless of what paths were changed in those  * revisions.  *  * If @a limit is non-zero then only invoke @a receiver on the first  * @a limit logs.  *  * If @a discover_changed_paths, then each call to @a receiver passes a  * hash mapping paths committed in that revision to information about them  * as the receiver's @a changed_paths argument.  * Otherwise, each call to @a receiver passes NULL for @a changed_paths.  *  * If @a strict_node_history is set, copy history (if any exists) will  * not be traversed while harvesting revision logs for each path.  *  * If @a include_merged_revisions is set, log information for revisions  * which have been merged to @a paths will also be returned, unless these  * revisions are already part of @a start to @a end in @a repos's  * filesystem, as limited by @a paths. In the latter case those revisions  * are skipped and @a receiver is not invoked.  *  * If @a revprops is NULL, retrieve all revision properties; else, retrieve  * only the revision properties named by the (const char *) array elements  * (i.e. retrieve none if the array is empty).  *  * If any invocation of @a receiver returns error, return that error  * immediately and without wrapping it.  *  * If @a start or @a end is a non-existent revision, return the error  * #SVN_ERR_FS_NO_SUCH_REVISION, without ever invoking @a receiver.  *  * If optional @a authz_read_func is non-NULL, then use this function  * (along with optional @a authz_read_baton) to check the readability  * of each changed-path in each revision about to be "pushed" at  * @a receiver.  If a revision has some changed-paths readable and  * others unreadable, unreadable paths are omitted from the  * changed_paths field and only svn:author and svn:date will be  * available in the revprops field.  If a revision has no  * changed-paths readable at all, then all paths are omitted and no  * revprops are available.  *  * See also the documentation for #svn_log_entry_receiver_t.  *  * Use @a pool for temporary allocations.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_get_logs4
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|int
name|limit
parameter_list|,
name|svn_boolean_t
name|discover_changed_paths
parameter_list|,
name|svn_boolean_t
name|strict_node_history
parameter_list|,
name|svn_boolean_t
name|include_merged_revisions
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|revprops
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_log_entry_receiver_t
name|receiver
parameter_list|,
name|void
modifier|*
name|receiver_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_repos_get_logs4(), but with @a receiver being  * #svn_log_message_receiver_t instead of #svn_log_entry_receiver_t.  * Also, @a include_merged_revisions is set to @c FALSE and @a revprops is  * svn:author, svn:date, and svn:log.  If @a paths is empty, nothing  * is returned.  *  * @since New in 1.2.  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_logs3
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|int
name|limit
parameter_list|,
name|svn_boolean_t
name|discover_changed_paths
parameter_list|,
name|svn_boolean_t
name|strict_node_history
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_log_message_receiver_t
name|receiver
parameter_list|,
name|void
modifier|*
name|receiver_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_repos_get_logs3(), but with @a limit always set to 0.  *  * @deprecated Provided for backward compatibility with the 1.1 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_logs2
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_boolean_t
name|discover_changed_paths
parameter_list|,
name|svn_boolean_t
name|strict_node_history
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_log_message_receiver_t
name|receiver
parameter_list|,
name|void
modifier|*
name|receiver_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_repos_get_logs2(), but with @a authz_read_func and  * @a authz_read_baton always set to NULL.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_logs
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_boolean_t
name|discover_changed_paths
parameter_list|,
name|svn_boolean_t
name|strict_node_history
parameter_list|,
name|svn_log_message_receiver_t
name|receiver
parameter_list|,
name|void
modifier|*
name|receiver_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/* Retrieving mergeinfo. */
comment|/**  * Fetch the mergeinfo for @a paths at @a revision in @a repos, and  * set @a *catalog to a catalog of this mergeinfo.  @a *catalog will  * never be @c NULL but may be empty.  *  * The paths in @a paths, and the keys of @a catalog, start with '/'.  *  * @a inherit indicates whether explicit, explicit or inherited, or  * only inherited mergeinfo for @a paths is fetched.  *  * If @a revision is #SVN_INVALID_REVNUM, it defaults to youngest.  *  * If @a include_descendants is TRUE, then additionally return the  * mergeinfo for any descendant of any element of @a paths which has  * the #SVN_PROP_MERGEINFO property explicitly set on it.  (Note  * that inheritance is only taken into account for the elements in @a  * paths; descendants of the elements in @a paths which get their  * mergeinfo via inheritance are not included in @a *catalog.)  *  * If optional @a authz_read_func is non-NULL, then use this function  * (along with optional @a authz_read_baton) to check the readability  * of each path which mergeinfo was requested for (from @a paths).  * Silently omit unreadable paths from the request for mergeinfo.  *  * Use @a pool for all allocations.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_get_mergeinfo
parameter_list|(
name|svn_mergeinfo_catalog_t
modifier|*
name|catalog
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_mergeinfo_inheritance_t
name|inherit
parameter_list|,
name|svn_boolean_t
name|include_descendants
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/* Retrieving multiple revisions of a file. */
comment|/**  * Retrieve a subset of the interesting revisions of a file @a path in  * @a repos as seen in revision @a end.  Invoke @a handler with  * @a handler_baton as its first argument for each such revision.  * @a pool is used for all allocations.  See svn_fs_history_prev() for  * a discussion of interesting revisions.  *  * If optional @a authz_read_func is non-NULL, then use this function  * (along with optional @a authz_read_baton) to check the readability  * of the rev-path in each interesting revision encountered.  *  * Revision discovery happens from @a end to @a start, and if an  * unreadable revision is encountered before @a start is reached, then  * revision discovery stops and only the revisions from @a end to the  * oldest readable revision are returned (So it will appear that @a  * path was added without history in the latter revision).  *  * If there is an interesting revision of the file that is less than or  * equal to start, the iteration will start at that revision.  Else, the  * iteration will start at the first revision of the file in the repository,  * which has to be less than or equal to end.  Note that if the function  * succeeds, @a handler will have been called at least once.  *  * In a series of calls, the file contents for the first interesting revision  * will be provided as a text delta against the empty file.  In the following  * calls, the delta will be against the contents for the previous call.  *  * If @a include_merged_revisions is TRUE, revisions which a included as a  * result of a merge between @a start and @a end will be included.  *  * Since Subversion 1.8 this function has been enabled to support reversion  * the revision range for @a include_merged_revision @c FALSE reporting by  * switching @a start with @a end.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_get_file_revs2
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_boolean_t
name|include_merged_revisions
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_file_rev_handler_t
name|handler
parameter_list|,
name|void
modifier|*
name|handler_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_file_revs2(), with @a include_merged_revisions  * set to FALSE.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  * @since New in 1.1.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_file_revs
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|svn_repos_file_rev_handler_t
name|handler
parameter_list|,
name|void
modifier|*
name|handler_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/**  * @defgroup svn_repos_hook_wrappers Hook-sensitive wrappers for libsvn_fs \  * routines.  * @{  */
comment|/** Like svn_fs_commit_txn(), but invoke the @a repos' pre- and  * post-commit hooks around the commit.  Use @a pool for any necessary  * allocations.  *  * If the pre-commit hook fails, do not attempt to commit the  * transaction and throw the original error to the caller.  *  * A successful commit is indicated by a valid revision value in @a  * *new_rev, not if svn_fs_commit_txn() returns an error, which can  * occur during its post commit FS processing.  If the transaction was  * not committed, then return the associated error and do not execute  * the post-commit hook.  *  * If the commit succeeds the post-commit hook is executed.  If the  * post-commit hook returns an error, always wrap it with  * SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED; this allows the caller to  * find the post-commit hook error in the returned error chain.  If  * both svn_fs_commit_txn() and the post-commit hook return errors,  * then svn_fs_commit_txn()'s error is the parent error and the  * SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED wrapped error is the child  * error.  *  * @a conflict_p, @a new_rev, and @a txn are as in svn_fs_commit_txn().  */
name|svn_error_t
modifier|*
name|svn_repos_fs_commit_txn
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|conflict_p
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
modifier|*
name|new_rev
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_fs_begin_txn(), but use @a revprop_table, a hash mapping  *<tt>const char *</tt> property names to #svn_string_t values, to  * set the properties on transaction @a *txn_p.  @a repos is the  * repository object which contains the filesystem.  @a rev, @a  * *txn_p, and @a pool are as in svn_fs_begin_txn().  *  * Before a txn is created, the repository's start-commit hooks are  * run; if any of them fail, no txn is created, @a *txn_p is unaffected,  * and #SVN_ERR_REPOS_HOOK_FAILURE is returned.  *  * @note @a revprop_table may contain an #SVN_PROP_REVISION_DATE property,  * which will be set on the transaction, but that will be overwritten  * when the transaction is committed.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_begin_txn_for_commit2
parameter_list|(
name|svn_fs_txn_t
modifier|*
modifier|*
name|txn_p
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_hash_t
modifier|*
name|revprop_table
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_repos_fs_begin_txn_for_commit2(), but with @a revprop_table  * set to a hash containing @a author and @a log_msg as the  * #SVN_PROP_REVISION_AUTHOR and #SVN_PROP_REVISION_LOG properties,  * respectively.  @a author and @a log_msg may both be @c NULL.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_fs_begin_txn_for_commit
parameter_list|(
name|svn_fs_txn_t
modifier|*
modifier|*
name|txn_p
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
specifier|const
name|char
modifier|*
name|log_msg
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_fs_begin_txn(), but use @a author to set the corresponding  * property on transaction @a *txn_p.  @a repos is the repository object  * which contains the filesystem.  @a rev, @a *txn_p, and @a pool are as in  * svn_fs_begin_txn().  *  * ### Someday: before a txn is created, some kind of read-hook could  *              be called here.  *  * @note This function was never fully implemented, nor used. Ignore it.  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_fs_begin_txn_for_update
parameter_list|(
name|svn_fs_txn_t
modifier|*
modifier|*
name|txn_p
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @} */
comment|/** @defgroup svn_repos_fs_locks Repository lock wrappers  * @{  */
comment|/** Like svn_fs_lock(), but invoke the @a repos's pre- and  * post-lock hooks before and after the locking action.  Use @a pool  * for any necessary allocations.  *  * If the pre-lock hook or svn_fs_lock() fails, throw the original  * error to caller.  If an error occurs when running the post-lock  * hook, return the original error wrapped with  * SVN_ERR_REPOS_POST_LOCK_HOOK_FAILED.  If the caller sees this  * error, it knows that the lock succeeded anyway.  *  * The pre-lock hook may cause a different token to be used for the  * lock, instead of @a token; see the pre-lock-hook documentation for  * more.  *  * @since New in 1.2.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_lock
parameter_list|(
name|svn_lock_t
modifier|*
modifier|*
name|lock
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|comment
parameter_list|,
name|svn_boolean_t
name|is_dav_comment
parameter_list|,
name|apr_time_t
name|expiration_date
parameter_list|,
name|svn_revnum_t
name|current_rev
parameter_list|,
name|svn_boolean_t
name|steal_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_fs_unlock(), but invoke the @a repos's pre- and  * post-unlock hooks before and after the unlocking action.  Use @a  * pool for any necessary allocations.  *  * If the pre-unlock hook or svn_fs_unlock() fails, throw the original  * error to caller.  If an error occurs when running the post-unlock  * hook, return the original error wrapped with  * SVN_ERR_REPOS_POST_UNLOCK_HOOK_FAILED.  If the caller sees this  * error, it knows that the unlock succeeded anyway.  *  * @since New in 1.2.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_unlock
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
name|svn_boolean_t
name|break_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Look up all the locks in and under @a path in @a repos, setting @a  * *locks to a hash which maps<tt>const char *</tt> paths to the  * #svn_lock_t locks associated with those paths.  Use @a  * authz_read_func and @a authz_read_baton to "screen" all returned  * locks.  That is: do not return any locks on any paths that are  * unreadable in HEAD, just silently omit them.  *  * @a depth limits the returned locks to those associated with paths  * within the specified depth of @a path, and must be one of the  * following values:  #svn_depth_empty, #svn_depth_files,  * #svn_depth_immediates, or #svn_depth_infinity.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_get_locks2
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|locks
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_fs_get_locks2(), but with @a depth always  * passed as svn_depth_infinity.  *  * @since New in 1.2.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_fs_get_locks
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|locks
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @} */
comment|/**  * Like svn_fs_change_rev_prop2(), but validate the name and value of the  * property and invoke the @a repos's pre- and post-revprop-change hooks  * around the change as specified by @a use_pre_revprop_change_hook and  * @a use_post_revprop_change_hook (respectively).  *  * @a rev is the revision whose property to change, @a name is the  * name of the property, and @a new_value is the new value of the  * property.   If @a old_value_p is not @c NULL, then @a *old_value_p  * is the expected current (preexisting) value of the property (or @c NULL  * for "unset").  @a author is the authenticated username of the person  * changing the property value, or NULL if not available.  *  * If @a authz_read_func is non-NULL, then use it (with @a  * authz_read_baton) to validate the changed-paths associated with @a  * rev.  If the revision contains any unreadable changed paths, then  * return #SVN_ERR_AUTHZ_UNREADABLE.  *  * Validate @a name and @a new_value like the same way  * svn_repos_fs_change_node_prop() does.  *  * Use @a pool for temporary allocations.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_change_rev_prop4
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
specifier|const
modifier|*
name|old_value_p
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|new_value
parameter_list|,
name|svn_boolean_t
name|use_pre_revprop_change_hook
parameter_list|,
name|svn_boolean_t
name|use_post_revprop_change_hook
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_fs_change_rev_prop4(), but with @a old_value_p always  * set to @c NULL.  (In other words, it is similar to  * svn_fs_change_rev_prop().)  *  * @deprecated Provided for backward compatibility with the 1.6 API.  * @since New in 1.5.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_fs_change_rev_prop3
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|new_value
parameter_list|,
name|svn_boolean_t
name|use_pre_revprop_change_hook
parameter_list|,
name|svn_boolean_t
name|use_post_revprop_change_hook
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_fs_change_rev_prop3(), but with the @a  * use_pre_revprop_change_hook and @a use_post_revprop_change_hook  * always set to @c TRUE.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_fs_change_rev_prop2
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|new_value
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_fs_change_rev_prop2(), but with the  * @a authz_read_func parameter always NULL.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_fs_change_rev_prop
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|new_value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *value_p to the value of the property named @a propname on  * revision @a rev in the filesystem opened in @a repos.  If @a rev  * has no property by that name, set @a *value_p to zero.  Allocate  * the result in @a pool.  *  * If @a authz_read_func is non-NULL, then use it (with @a  * authz_read_baton) to validate the changed-paths associated with @a  * rev.  If the changed-paths are all unreadable, then set @a *value_p  * to zero unconditionally.  If only some of the changed-paths are  * unreadable, then allow 'svn:author' and 'svn:date' propvalues to be  * fetched, but return 0 for any other property.  *  * @since New in 1.1.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_revision_prop
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|value_p
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *table_p to the entire property list of revision @a rev in  * filesystem opened in @a repos, as a hash table allocated in @a  * pool.  The table maps<tt>char *</tt> property names to  * #svn_string_t * values; the names and values are allocated in @a  * pool.  *  * If @a authz_read_func is non-NULL, then use it (with @a  * authz_read_baton) to validate the changed-paths associated with @a  * rev.  If the changed-paths are all unreadable, then return an empty  * hash. If only some of the changed-paths are unreadable, then return  * an empty hash, except for 'svn:author' and 'svn:date' properties  * (assuming those properties exist).  *  * @since New in 1.1.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_revision_proplist
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|table_p
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/* Prop-changing wrappers for libsvn_fs routines. */
comment|/* NOTE: svn_repos_fs_change_rev_prop() also exists, but is located    above with the hook-related functions. */
comment|/** Validating wrapper for svn_fs_change_node_prop() (which see for  * argument descriptions).  *  * If @a name's kind is not #svn_prop_regular_kind, return  * #SVN_ERR_REPOS_BAD_ARGS.  If @a name is an "svn:" property, validate its  * @a value and return SVN_ERR_BAD_PROPERTY_VALUE if it is invalid for the  * property.  *  * @note Currently, the only properties validated are the "svn:" properties  * #SVN_PROP_REVISION_LOG and #SVN_PROP_REVISION_DATE. This may change  * in future releases.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_change_node_prop
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Validating wrapper for svn_fs_change_txn_prop() (which see for  * argument descriptions).  See svn_repos_fs_change_txn_props() for more  * information.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_change_txn_prop
parameter_list|(
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Validating wrapper for svn_fs_change_txn_props() (which see for  * argument descriptions).  Validate properties and their values the  * same way svn_repos_fs_change_node_prop() does.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_change_txn_props
parameter_list|(
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------*/
comment|/**  * @defgroup svn_repos_inspection Data structures and editor things for \  * repository inspection.  * @{  *  * As it turns out, the svn_repos_replay2(), svn_repos_dir_delta2() and  * svn_repos_begin_report3() interfaces can be extremely useful for  * examining the repository, or more exactly, changes to the repository.  * These drivers allows for differences between two trees to be  * described using an editor.  *  * By using the editor obtained from svn_repos_node_editor() with one of  * the drivers mentioned above, the description of how to transform one  * tree into another can be used to build an in-memory linked-list tree,  * which each node representing a repository node that was changed.  */
comment|/** A node in the repository. */
typedef|typedef
struct|struct
name|svn_repos_node_t
block|{
comment|/** Node type (file, dir, etc.) */
name|svn_node_kind_t
name|kind
decl_stmt|;
comment|/** How this node entered the node tree: 'A'dd, 'D'elete, 'R'eplace */
name|char
name|action
decl_stmt|;
comment|/** Were there any textual mods? (files only) */
name|svn_boolean_t
name|text_mod
decl_stmt|;
comment|/** Where there any property mods? */
name|svn_boolean_t
name|prop_mod
decl_stmt|;
comment|/** The name of this node as it appears in its parent's entries list */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/** The filesystem revision where this was copied from (if any) */
name|svn_revnum_t
name|copyfrom_rev
decl_stmt|;
comment|/** The filesystem path where this was copied from (if any) */
specifier|const
name|char
modifier|*
name|copyfrom_path
decl_stmt|;
comment|/** Pointer to the next sibling of this node */
name|struct
name|svn_repos_node_t
modifier|*
name|sibling
decl_stmt|;
comment|/** Pointer to the first child of this node */
name|struct
name|svn_repos_node_t
modifier|*
name|child
decl_stmt|;
comment|/** Pointer to the parent of this node */
name|struct
name|svn_repos_node_t
modifier|*
name|parent
decl_stmt|;
block|}
name|svn_repos_node_t
typedef|;
comment|/** Set @a *editor and @a *edit_baton to an editor that, when driven by  * a driver such as svn_repos_replay2(), builds an<tt>svn_repos_node_t *</tt>  * tree representing the delta from @a base_root to @a root in @a  * repos's filesystem.  *  * The editor can also be driven by svn_repos_dir_delta2() or  * svn_repos_begin_report3(), but unless you have special needs,  * svn_repos_replay2() is preferred.  *  * Invoke svn_repos_node_from_baton() on @a edit_baton to obtain the root  * node afterwards.  *  * Note that the delta includes "bubbled-up" directories; that is,  * many of the directory nodes will have no prop_mods.  *  * Allocate the tree and its contents in @a node_pool; do all other  * allocation in @a pool.  */
name|svn_error_t
modifier|*
name|svn_repos_node_editor
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_fs_root_t
modifier|*
name|base_root
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
name|apr_pool_t
modifier|*
name|node_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the root node of the linked-list tree generated by driving the  * editor (associated with @a edit_baton) created by svn_repos_node_editor().  * This is only really useful if used *after* the editor drive is completed.  */
name|svn_repos_node_t
modifier|*
name|svn_repos_node_from_baton
parameter_list|(
name|void
modifier|*
name|edit_baton
parameter_list|)
function_decl|;
comment|/** @} */
comment|/* ---------------------------------------------------------------*/
comment|/**  * @defgroup svn_repos_dump_load Dumping and loading filesystem data  * @{  *  * The filesystem 'dump' format contains nothing but the abstract  * structure of the filesystem -- independent of any internal node-id  * schema or database back-end.  All of the data in the dumpfile is  * acquired by public function calls into svn_fs.h.  Similarly, the  * parser which reads the dumpfile is able to reconstruct the  * filesystem using only public svn_fs.h routines.  *  * Thus the dump/load feature's main purpose is for *migrating* data  * from one svn filesystem to another -- presumably two filesystems  * which have different internal implementations.  *  * If you simply want to backup your filesystem, you're probably  * better off using the built-in facilities of the DB backend (using  * Berkeley DB's hot-backup feature, for example.)  *  * For a description of the dumpfile format, see  * /trunk/notes/fs_dumprestore.txt.  */
comment|/* The RFC822-style headers in our dumpfile format. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_MAGIC_HEADER
value|"SVN-fs-dump-format-version"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_FORMAT_VERSION
value|3
define|#
directive|define
name|SVN_REPOS_DUMPFILE_FORMAT_VERSION_DELTAS
value|3
define|#
directive|define
name|SVN_REPOS_DUMPFILE_UUID
value|"UUID"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_CONTENT_LENGTH
value|"Content-length"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_REVISION_NUMBER
value|"Revision-number"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_NODE_PATH
value|"Node-path"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_NODE_KIND
value|"Node-kind"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_NODE_ACTION
value|"Node-action"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_NODE_COPYFROM_PATH
value|"Node-copyfrom-path"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_NODE_COPYFROM_REV
value|"Node-copyfrom-rev"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_MD5
value|"Text-copy-source-md5"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_SHA1
value|"Text-copy-source-sha1"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_CHECKSUM
define|\
value|SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_MD5
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_CONTENT_MD5
value|"Text-content-md5"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_CONTENT_SHA1
value|"Text-content-sha1"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_CONTENT_CHECKSUM
define|\
value|SVN_REPOS_DUMPFILE_TEXT_CONTENT_MD5
define|#
directive|define
name|SVN_REPOS_DUMPFILE_PROP_CONTENT_LENGTH
value|"Prop-content-length"
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_CONTENT_LENGTH
value|"Text-content-length"
comment|/** @since New in 1.1. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_PROP_DELTA
value|"Prop-delta"
comment|/** @since New in 1.1. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_DELTA
value|"Text-delta"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_MD5
value|"Text-delta-base-md5"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_SHA1
value|"Text-delta-base-sha1"
comment|/** @since New in 1.5. */
define|#
directive|define
name|SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_CHECKSUM
define|\
value|SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_MD5
comment|/**  * Verify the contents of the file system in @a repos.  *  * If @a feedback_stream is not @c NULL, write feedback to it (lines of  * the form "* Verified revision %ld\n").  *  * If @a start_rev is #SVN_INVALID_REVNUM, then start verifying at  * revision 0.  If @a end_rev is #SVN_INVALID_REVNUM, then verify  * through the @c HEAD revision.  *  * For every verified revision call @a notify_func with @a rev set to  * the verified revision and @a warning_text @c NULL. For warnings call @a  * notify_func with @a warning_text set.  *  * If @a cancel_func is not @c NULL, call it periodically with @a  * cancel_baton as argument to see if the caller wishes to cancel the  * verification.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_verify_fs2
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_verify_fs2(), but with a feedback_stream instead of  * handling feedback via the notify_func handler  *  * @since New in 1.5.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_verify_fs
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|feedback_stream
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Dump the contents of the filesystem within already-open @a repos into  * writable @a dumpstream.  Begin at revision @a start_rev, and dump every  * revision up through @a end_rev.  Use @a pool for all allocation.  If  * non-@c NULL, send feedback to @a feedback_stream.  If @a dumpstream is  * @c NULL, this is effectively a primitive verify.  It is not complete,  * however; svn_repos_verify_fs2() and svn_fs_verify().  *  * If @a start_rev is #SVN_INVALID_REVNUM, then start dumping at revision  * 0.  If @a end_rev is #SVN_INVALID_REVNUM, then dump through the @c HEAD  * revision.  *  * If @a incremental is @c TRUE, the first revision dumped will be a diff  * against the previous revision (usually it looks like a full dump of  * the tree).  *  * If @a use_deltas is @c TRUE, output only node properties which have  * changed relative to the previous contents, and output text contents  * as svndiff data against the previous contents.  Regardless of how  * this flag is set, the first revision of a non-incremental dump will  * be done with full plain text.  A dump with @a use_deltas set cannot  * be loaded by Subversion 1.0.x.  *  * If @a notify_func is not @c NULL, then for every dumped revision call  * @a notify_func with @a rev set to the dumped revision and @a warning_text  * @c NULL. For warnings call @a notify_func with @a warning_text.  *  * If @a cancel_func is not @c NULL, it is called periodically with  * @a cancel_baton as argument to see if the client wishes to cancel  * the dump.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos_dump_fs3
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|dumpstream
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|svn_boolean_t
name|incremental
parameter_list|,
name|svn_boolean_t
name|use_deltas
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_dump_fs3(), but with a feedback_stream instead of  * handling feedback via the notify_func handler  *  * @since New in 1.1.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_dump_fs2
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|dumpstream
parameter_list|,
name|svn_stream_t
modifier|*
name|feedback_stream
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|svn_boolean_t
name|incremental
parameter_list|,
name|svn_boolean_t
name|use_deltas
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_dump_fs2(), but with the @a use_deltas  * parameter always set to @c FALSE.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_dump_fs
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|dumpstream
parameter_list|,
name|svn_stream_t
modifier|*
name|feedback_stream
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|svn_boolean_t
name|incremental
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Read and parse dumpfile-formatted @a dumpstream, reconstructing  * filesystem revisions in already-open @a repos, handling uuids in  * accordance with @a uuid_action.  Use @a pool for all allocation.  *  * If the dumpstream contains copy history that is unavailable in the  * repository, an error will be thrown.  *  * The repository's UUID will be updated iff  *   the dumpstream contains a UUID and  *   @a uuid_action is not equal to #svn_repos_load_uuid_ignore and  *   either the repository contains no revisions or  *          @a uuid_action is equal to #svn_repos_load_uuid_force.  *  * If the dumpstream contains no UUID, then @a uuid_action is  * ignored and the repository UUID is not touched.  *  * @a start_rev and @a end_rev act as filters, the lower and upper  * (inclusive) range values of revisions in @a dumpstream which will  * be loaded.  Either both of these values are #SVN_INVALID_REVNUM (in  * which case no revision-based filtering occurs at all), or both are  * valid revisions (where @a start_rev is older than or equivalent to  * @a end_rev).  *  * If @a parent_dir is not NULL, then the parser will reparent all the  * loaded nodes, from root to @a parent_dir.  The directory @a parent_dir  * must be an existing directory in the repository.  *  * If @a use_pre_commit_hook is set, call the repository's pre-commit  * hook before committing each loaded revision.  *  * If @a use_post_commit_hook is set, call the repository's  * post-commit hook after committing each loaded revision.  *  * If @a validate_props is set, then validate Subversion revision and  * node properties (those in the svn: namespace) against established  * rules for those things.  *  * If non-NULL, use @a notify_func and @a notify_baton to send notification  * of events to the caller.  *  * If @a cancel_func is not @c NULL, it is called periodically with  * @a cancel_baton as argument to see if the client wishes to cancel  * the load.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_load_fs4
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|dumpstream
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|svn_boolean_t
name|use_pre_commit_hook
parameter_list|,
name|svn_boolean_t
name|use_post_commit_hook
parameter_list|,
name|svn_boolean_t
name|validate_props
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_repos_load_fs4(), but with @a start_rev and @a  * end_rev always passed as #SVN_INVALID_REVNUM.  *  * @since New in 1.7.  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_load_fs3
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|dumpstream
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|svn_boolean_t
name|use_pre_commit_hook
parameter_list|,
name|svn_boolean_t
name|use_post_commit_hook
parameter_list|,
name|svn_boolean_t
name|validate_props
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_load_fs3(), but with @a feedback_stream in  * place of the #svn_repos_notify_func_t and baton and with  * @a validate_props always FALSE.  *  * @since New in 1.2.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_load_fs2
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|dumpstream
parameter_list|,
name|svn_stream_t
modifier|*
name|feedback_stream
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|svn_boolean_t
name|use_pre_commit_hook
parameter_list|,
name|svn_boolean_t
name|use_post_commit_hook
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_load_fs2(), but with @a use_pre_commit_hook and  * @a use_post_commit_hook always @c FALSE.  *  * @deprecated Provided for backward compatibility with the 1.1 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_load_fs
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_stream_t
modifier|*
name|dumpstream
parameter_list|,
name|svn_stream_t
modifier|*
name|feedback_stream
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * A vtable that is driven by svn_repos_parse_dumpstream3().  *  * @since New in 1.8.  */
typedef|typedef
struct|struct
name|svn_repos_parse_fns3_t
block|{
comment|/** The parser has discovered a new "magic header" record within the    * parsing session represented by @a parse_baton.  The dump-format    * version number is @a version.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|magic_header_record
function_decl|)
parameter_list|(
name|int
name|version
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** The parser has discovered a new uuid record within the parsing    * session represented by @a parse_baton.  The uuid's value is    * @a uuid, and it is allocated in @a pool.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|uuid_record
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|uuid
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** The parser has discovered a new revision record within the    * parsing session represented by @a parse_baton.  All the headers are    * placed in @a headers (allocated in @a pool), which maps<tt>const    * char *</tt> header-name ==><tt>const char *</tt> header-value.    * The @a revision_baton received back (also allocated in @a pool)    * represents the revision.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|new_revision_record
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|revision_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|headers
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** The parser has discovered a new node record within the current    * revision represented by @a revision_baton.  All the headers are    * placed in @a headers (as with @c new_revision_record), allocated in    * @a pool.  The @a node_baton received back is allocated in @a pool    * and represents the node.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|new_node_record
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|node_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|headers
parameter_list|,
name|void
modifier|*
name|revision_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** For a given @a revision_baton, set a property @a name to @a value. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_revision_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|revision_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** For a given @a node_baton, set a property @a name to @a value. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_node_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** For a given @a node_baton, delete property @a name. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|delete_node_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/** For a given @a node_baton, remove all properties. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|remove_node_props
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** For a given @a node_baton, receive a writable @a stream capable of    * receiving the node's fulltext.  After writing the fulltext, call    * the stream's close() function.    *    * If a @c NULL is returned instead of a stream, the vtable is    * indicating that no text is desired, and the parser will not    * attempt to send it.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_fulltext
function_decl|)
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** For a given @a node_baton, set @a handler and @a handler_baton    * to a window handler and baton capable of receiving a delta    * against the node's previous contents.  A NULL window will be    * sent to the handler after all the windows are sent.    *    * If a @c NULL is returned instead of a handler, the vtable is    * indicating that no delta is desired, and the parser will not    * attempt to send it.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|apply_textdelta
function_decl|)
parameter_list|(
name|svn_txdelta_window_handler_t
modifier|*
name|handler
parameter_list|,
name|void
modifier|*
modifier|*
name|handler_baton
parameter_list|,
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** The parser has reached the end of the current node represented by    * @a node_baton, it can be freed.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|close_node
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** The parser has reached the end of the current revision    * represented by @a revision_baton.  In other words, there are no more    * changed nodes within the revision.  The baton can be freed.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|close_revision
function_decl|)
parameter_list|(
name|void
modifier|*
name|revision_baton
parameter_list|)
function_decl|;
block|}
name|svn_repos_parse_fns3_t
typedef|;
comment|/**  * Read and parse dumpfile-formatted @a stream, calling callbacks in  * @a parse_fns/@a parse_baton, and using @a pool for allocations.  *  * If @a deltas_are_text is @c TRUE, handle text-deltas with the @a  * set_fulltext callback.  This is useful when manipulating a dump  * stream without loading it.  Otherwise handle text-deltas with the  * @a apply_textdelta callback.  *  * If @a cancel_func is not @c NULL, it is called periodically with  * @a cancel_baton as argument to see if the client wishes to cancel  * the dump.  *  * This parser has built-in knowledge of the dumpfile format, but only  * in a limited sense:  *  *    * it recognizes the "magic" format-version header.  *  *    * it recognizes the UUID header.  *  *    * it recognizes revision and node records by looking for either  *      a REVISION_NUMBER or NODE_PATH headers.  *  *    * it recognizes the CONTENT-LENGTH headers, so it knows if and  *      how to suck up the content body.  *  *    * it knows how to parse a content body into two parts:  props  *      and text, and pass the pieces to the vtable.  *  * This is enough knowledge to make it easy on vtable implementors,  * but still allow expansion of the format: most headers do not have  * to be handled explicitly.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_parse_dumpstream3
parameter_list|(
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
specifier|const
name|svn_repos_parse_fns3_t
modifier|*
name|parse_fns
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|svn_boolean_t
name|deltas_are_text
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *parser and @a *parse_baton to a vtable parser which commits new  * revisions to the fs in @a repos.  The constructed parser will treat  * UUID records in a manner consistent with @a uuid_action.  Use @a pool  * to operate on the fs.  *  * @a start_rev and @a end_rev act as filters, the lower and upper  * (inclusive) range values of revisions in @a dumpstream which will  * be loaded.  Either both of these values are #SVN_INVALID_REVNUM (in  * which case no revision-based filtering occurs at all), or both are  * valid revisions (where @a start_rev is older than or equivalent to  * @a end_rev).  *  * If @a use_history is set, then the parser will require relative  * 'copyfrom' history to exist in the repository when it encounters  * nodes that are added-with-history.  *  * If @a validate_props is set, then validate Subversion revision and  * node properties (those in the svn: namespace) against established  * rules for those things.  *  * If @a parent_dir is not NULL, then the parser will reparent all the  * loaded nodes, from root to @a parent_dir.  The directory @a parent_dir  * must be an existing directory in the repository.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_get_fs_build_parser4
parameter_list|(
specifier|const
name|svn_repos_parse_fns3_t
modifier|*
modifier|*
name|parser
parameter_list|,
name|void
modifier|*
modifier|*
name|parse_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|start_rev
parameter_list|,
name|svn_revnum_t
name|end_rev
parameter_list|,
name|svn_boolean_t
name|use_history
parameter_list|,
name|svn_boolean_t
name|validate_props
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * A vtable that is driven by svn_repos_parse_dumpstream2().  * Similar to #svn_repos_parse_fns3_t except that it lacks  * the delete_node_property and apply_textdelta callbacks.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  */
typedef|typedef
struct|struct
name|svn_repos_parse_fns2_t
block|{
comment|/** Same as #svn_repos_parse_fns3_t.new_revision_record. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|new_revision_record
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|revision_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|headers
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.uuid_record. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|uuid_record
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|uuid
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.new_node_record. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|new_node_record
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|node_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|headers
parameter_list|,
name|void
modifier|*
name|revision_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.set_revision_property. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_revision_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|revision_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.set_node_property. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_node_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.delete_node_property. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|delete_node_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.remove_node_props. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|remove_node_props
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.set_fulltext. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_fulltext
function_decl|)
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.apply_textdelta. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|apply_textdelta
function_decl|)
parameter_list|(
name|svn_txdelta_window_handler_t
modifier|*
name|handler
parameter_list|,
name|void
modifier|*
modifier|*
name|handler_baton
parameter_list|,
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.close_node. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|close_node
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns3_t.close_revision. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|close_revision
function_decl|)
parameter_list|(
name|void
modifier|*
name|revision_baton
parameter_list|)
function_decl|;
block|}
name|svn_repos_parse_fns2_t
typedef|;
comment|/** @deprecated Provided for backward compatibility with the 1.7 API. */
typedef|typedef
name|svn_repos_parse_fns2_t
name|svn_repos_parser_fns2_t
typedef|;
comment|/**  * A vtable that is driven by svn_repos_parse_dumpstream().  * Similar to #svn_repos_parse_fns2_t except that it lacks  * the delete_node_property and apply_textdelta callbacks.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
typedef|typedef
struct|struct
name|svn_repos_parse_fns_t
block|{
comment|/** Same as #svn_repos_parse_fns2_t.new_revision_record. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|new_revision_record
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|revision_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|headers
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.uuid_record. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|uuid_record
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|uuid
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.new_node_record. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|new_node_record
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|node_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|headers
parameter_list|,
name|void
modifier|*
name|revision_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.set_revision_property. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_revision_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|revision_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.set_node_property. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_node_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.remove_node_props. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|remove_node_props
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.set_fulltext. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_fulltext
function_decl|)
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.close_node. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|close_node
function_decl|)
parameter_list|(
name|void
modifier|*
name|node_baton
parameter_list|)
function_decl|;
comment|/** Same as #svn_repos_parse_fns2_t.close_revision. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|close_revision
function_decl|)
parameter_list|(
name|void
modifier|*
name|revision_baton
parameter_list|)
function_decl|;
block|}
name|svn_repos_parser_fns_t
typedef|;
comment|/**  * Similar to svn_repos_parse_dumpstream3(), but uses the more limited  * #svn_repos_parser_fns2_t vtable type.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_parse_dumpstream2
parameter_list|(
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
specifier|const
name|svn_repos_parser_fns2_t
modifier|*
name|parse_fns
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_parse_dumpstream2(), but uses the more limited  * #svn_repos_parser_fns_t vtable type.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_parse_dumpstream
parameter_list|(
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
specifier|const
name|svn_repos_parser_fns_t
modifier|*
name|parse_fns
parameter_list|,
name|void
modifier|*
name|parse_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_fs_build_parser4(), but with @a start_rev  * and @a end_rev always passed as #SVN_INVALID_REVNUM, and yielding  * the more limited svn_repos_parse_fns2_t.  *  * @since New in 1.7.  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_fs_build_parser3
parameter_list|(
specifier|const
name|svn_repos_parse_fns2_t
modifier|*
modifier|*
name|parser
parameter_list|,
name|void
modifier|*
modifier|*
name|parse_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_boolean_t
name|use_history
parameter_list|,
name|svn_boolean_t
name|validate_props
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_fs_build_parser3(), but with @a outstream  * in place if a #svn_repos_notify_func_t and baton and with  * @a validate_props always FALSE.  *  * @since New in 1.1.  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_fs_build_parser2
parameter_list|(
specifier|const
name|svn_repos_parse_fns2_t
modifier|*
modifier|*
name|parser
parameter_list|,
name|void
modifier|*
modifier|*
name|parse_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_boolean_t
name|use_history
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
name|svn_stream_t
modifier|*
name|outstream
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_get_fs_build_parser2(), but yields the more  * limited svn_repos_parser_fns_t vtable type.  *  * @deprecated Provided for backward compatibility with the 1.0 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_get_fs_build_parser
parameter_list|(
specifier|const
name|svn_repos_parser_fns_t
modifier|*
modifier|*
name|parser
parameter_list|,
name|void
modifier|*
modifier|*
name|parse_baton
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_boolean_t
name|use_history
parameter_list|,
name|enum
name|svn_repos_load_uuid
name|uuid_action
parameter_list|,
name|svn_stream_t
modifier|*
name|outstream
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @} */
comment|/** A data type which stores the authz information.  *  * @since New in 1.3.  */
typedef|typedef
name|struct
name|svn_authz_t
name|svn_authz_t
typedef|;
comment|/**  * Read authz configuration data from @a path (a dirent, an absolute file url  * or a registry path) into @a *authz_p, allocated in @a pool.  *  * If @a groups_path (a dirent, an absolute file url, or a registry path) is  * set, use the global groups parsed from it.  *  * If @a path or @a groups_path is not a valid authz rule file, then return  * #SVN_ERR_AUTHZ_INVALID_CONFIG.  The contents of @a *authz_p is then  * undefined.  If @a must_exist is TRUE, a missing authz or groups file  * is also an error other than #SVN_ERR_AUTHZ_INVALID_CONFIG (exact error  * depends on the access type).  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_authz_read2
parameter_list|(
name|svn_authz_t
modifier|*
modifier|*
name|authz_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|groups_path
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Similar to svn_repos_authz_read2(), but with @a groups_path and @a  * repos_root always passed as @c NULL.  *  * @since New in 1.3.  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_repos_authz_read
parameter_list|(
name|svn_authz_t
modifier|*
modifier|*
name|authz_p
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Read authz configuration data from @a stream into @a *authz_p,  * allocated in @a pool.  *  * If @a groups_stream is set, use the global groups parsed from it.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_authz_parse
parameter_list|(
name|svn_authz_t
modifier|*
modifier|*
name|authz_p
parameter_list|,
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
name|svn_stream_t
modifier|*
name|groups_stream
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Check whether @a user can access @a path in the repository @a  * repos_name with the @a required_access.  @a authz lists the ACLs to  * check against.  Set @a *access_granted to indicate if the requested  * access is granted.  *  * If @a path is NULL, then check whether @a user has the @a  * required_access anywhere in the repository.  Set @a *access_granted  * to TRUE if at least one path is accessible with the @a  * required_access.  *  * For compatibility with 1.6, and earlier, @a repos_name can be NULL  * in which case it is equivalent to a @a repos_name of "".  *  * @note Presently, @a repos_name must byte-for-byte match the repos_name  * specified in the authz file; it is treated as an opaque string, and not  * as a dirent.  *  * @since New in 1.3.  */
name|svn_error_t
modifier|*
name|svn_repos_authz_check_access
parameter_list|(
name|svn_authz_t
modifier|*
name|authz
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_name
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
name|svn_repos_authz_access_t
name|required_access
parameter_list|,
name|svn_boolean_t
modifier|*
name|access_granted
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Revision Access Levels  *  * Like most version control systems, access to versioned objects in  * Subversion is determined on primarily path-based system.  Users either  * do or don't have the ability to read a given path.  *  * However, unlike many version control systems where versioned objects  * maintain their own distinct version information (revision numbers,  * authors, log messages, change timestamps, etc.), Subversion binds  * multiple paths changed as part of a single commit operation into a  * set, calls the whole thing a revision, and hangs commit metadata  * (author, date, log message, etc.) off of that revision.  So, commit  * metadata is shared across all the paths changed as part of a given  * commit operation.  *  * It is common (or, at least, we hope it is) for log messages to give  * detailed information about changes made in the commit to which the log  * message is attached.  Such information might include a mention of all  * the files changed, what was changed in them, and so on.  But this  * causes a problem when presenting information to readers who aren't  * authorized to read every path in the repository.  Simply knowing that  * a given path exists may be a security leak, even if the user can't see  * the contents of the data located at that path.  *  * So Subversion does what it reasonably can to prevent the leak of this  * information, and does so via a staged revision access policy.  A  * reader can be said to have one of three levels of access to a given  * revision's metadata, based solely on the reader's access rights to the  * paths changed or copied in that revision:  *  *   'full access' -- Granted when the reader has access to all paths  *      changed or copied in the revision, or when no paths were  *      changed in the revision at all, this access level permits  *      full visibility of all revision property names and values,  *      and the full changed-paths information.  *  *   'no access' -- Granted when the reader does not have access to any  *      paths changed or copied in the revision, this access level  *      denies the reader access to all revision properties and all  *      changed-paths information.  *  *   'partial access' -- Granted when the reader has access to at least  *      one, but not all, of the paths changed or copied in the revision,  *      this access level permits visibility of the svn:date and  *      svn:author revision properties and only the paths of the  *      changed-paths information to which the reader has access.  *  */
comment|/** An enum defining levels of revision access.  *  * @since New in 1.5.  */
typedef|typedef
enum|enum
name|svn_repos_revision_access_level_t
block|{
comment|/** no access allowed to the revision properties and all changed-paths    * information. */
name|svn_repos_revision_access_none
block|,
comment|/** access granted to some (svn:date and svn:author) revision properties and    * changed-paths information on paths the read has access to. */
name|svn_repos_revision_access_partial
block|,
comment|/** access granted to all revision properites and changed-paths    * information. */
name|svn_repos_revision_access_full
block|}
name|svn_repos_revision_access_level_t
typedef|;
comment|/**  * Set @a access to the access level granted for @a revision in @a  * repos, as determined by consulting the @a authz_read_func callback  * function and its associated @a authz_read_baton.  *  * @a authz_read_func may be @c NULL, in which case @a access will be  * set to #svn_repos_revision_access_full.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_check_revision_access
parameter_list|(
name|svn_repos_revision_access_level_t
modifier|*
name|access_level
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Set @a *inherited_values to a depth-first ordered array of  * #svn_prop_inherited_item_t * structures (the path_or_url members of  * which are relative filesystem paths) representing the properties  * inherited by @a path in @a root.  If no properties are inherited,  * then set @a *inherited_values to an empty array.  *  * if @a propname is NULL then retrieve all explicit and/or inherited  * properties.  Otherwise retrieve only the properties named @a propname.  *  * If optional @a authz_read_func is non-NULL, then use this function  * (along with optional @a authz_read_baton) to check the readability  * of each parent path from which properties are inherited. Silently omit  * properties for unreadable parent paths.  *  * Allocate @a *inherited_props in @a result_pool.  Use @a scratch_pool for  * temporary allocations.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_repos_fs_get_inherited_props
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|inherited_props
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Capabilities **/
comment|/**  * Store in @a repos the client-reported capabilities @a capabilities,  * which must be allocated in memory at least as long-lived as @a repos.  *  * The elements of @a capabilities are 'const char *', a subset of  * the constants beginning with @c SVN_RA_CAPABILITY_.  * @a capabilities is not copied, so changing it later will affect  * what is remembered by @a repos.  *  * @note The capabilities are passed along to the start-commit hook;  * see that hook's template for details.  *  * @note As of Subversion 1.5, there are no error conditions defined,  * so this always returns SVN_NO_ERROR.  In future releases it may  * return error, however, so callers should check.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_repos_remember_client_capabilities
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|capabilities
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_REPOS_H */
end_comment

end_unit

