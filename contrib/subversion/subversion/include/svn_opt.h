begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_opt.h  * @brief Option and argument parsing for Subversion command lines  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_OPTS_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_OPTS_H
end_define

begin_include
include|#
directive|include
file|<apr.h>
end_include

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_getopt.h>
end_include

begin_include
include|#
directive|include
file|<apr_tables.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|DOXYGEN_SHOULD_SKIP_THIS
end_ifndef

begin_define
define|#
directive|define
name|APR_WANT_STDIO
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<apr_want.h>
end_include

begin_comment
comment|/* for FILE* */
end_comment

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/**  * All subcommand procedures in Subversion conform to this prototype.  *  * @a os is the apr option state after getopt processing has been run; in  * other words, it still contains the non-option arguments following  * the subcommand.  See @a os->argv and @a os->ind.  *  * @a baton is anything you need it to be.  *  * @a pool is used for allocating errors, and for any other allocation  * unless the instance is explicitly documented to allocate from a  * pool in @a baton.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
name|svn_opt_subcommand_t
function_decl|)
parameter_list|(
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** The maximum number of aliases a subcommand can have. */
define|#
directive|define
name|SVN_OPT_MAX_ALIASES
value|3
comment|/** The maximum number of options that can be accepted by a subcommand. */
define|#
directive|define
name|SVN_OPT_MAX_OPTIONS
value|50
comment|/** Options that have no short option char should use an identifying  * integer equal to or greater than this.  */
define|#
directive|define
name|SVN_OPT_FIRST_LONGOPT_ID
value|256
comment|/** One element of a subcommand dispatch table.  *  * @since New in 1.4.  */
typedef|typedef
struct|struct
name|svn_opt_subcommand_desc2_t
block|{
comment|/** The full name of this command. */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/** The function this command invokes. */
name|svn_opt_subcommand_t
modifier|*
name|cmd_func
decl_stmt|;
comment|/** A list of alias names for this command (e.g., 'up' for 'update'). */
specifier|const
name|char
modifier|*
name|aliases
index|[
name|SVN_OPT_MAX_ALIASES
index|]
decl_stmt|;
comment|/** A brief string describing this command, for usage messages. */
specifier|const
name|char
modifier|*
name|help
decl_stmt|;
comment|/** A list of options accepted by this command.  Each value in the    * array is a unique enum (the 2nd field in apr_getopt_option_t)    */
name|int
name|valid_options
index|[
name|SVN_OPT_MAX_OPTIONS
index|]
decl_stmt|;
comment|/** A list of option help descriptions, keyed by the option unique enum    * (the 2nd field in apr_getopt_option_t), which override the generic    * descriptions given in an apr_getopt_option_t on a per-subcommand basis.    */
struct|struct
block|{
name|int
name|optch
decl_stmt|;
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
block|}
name|desc_overrides
index|[
name|SVN_OPT_MAX_OPTIONS
index|]
struct|;
block|}
name|svn_opt_subcommand_desc2_t
typedef|;
comment|/** One element of a subcommand dispatch table.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  *  * Like #svn_opt_subcommand_desc2_t but lacking the @c desc_overrides  * member.  */
typedef|typedef
struct|struct
name|svn_opt_subcommand_desc_t
block|{
comment|/** The full name of this command. */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/** The function this command invokes. */
name|svn_opt_subcommand_t
modifier|*
name|cmd_func
decl_stmt|;
comment|/** A list of alias names for this command (e.g., 'up' for 'update'). */
specifier|const
name|char
modifier|*
name|aliases
index|[
name|SVN_OPT_MAX_ALIASES
index|]
decl_stmt|;
comment|/** A brief string describing this command, for usage messages. */
specifier|const
name|char
modifier|*
name|help
decl_stmt|;
comment|/** A list of options accepted by this command.  Each value in the    * array is a unique enum (the 2nd field in apr_getopt_option_t)    */
name|int
name|valid_options
index|[
name|SVN_OPT_MAX_OPTIONS
index|]
decl_stmt|;
block|}
name|svn_opt_subcommand_desc_t
typedef|;
comment|/**  * Return the entry in @a table whose name matches @a cmd_name, or @c NULL if  * none.  @a cmd_name may be an alias.  *  * @since New in 1.4.  */
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|svn_opt_get_canonical_subcommand2
parameter_list|(
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|table
parameter_list|,
specifier|const
name|char
modifier|*
name|cmd_name
parameter_list|)
function_decl|;
comment|/**  * Return the entry in @a table whose name matches @a cmd_name, or @c NULL if  * none.  @a cmd_name may be an alias.  *  * Same as svn_opt_get_canonical_subcommand2(), but acts on  * #svn_opt_subcommand_desc_t.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
specifier|const
name|svn_opt_subcommand_desc_t
modifier|*
name|svn_opt_get_canonical_subcommand
parameter_list|(
specifier|const
name|svn_opt_subcommand_desc_t
modifier|*
name|table
parameter_list|,
specifier|const
name|char
modifier|*
name|cmd_name
parameter_list|)
function_decl|;
comment|/**  * Return pointer to an @c apr_getopt_option_t for the option whose  * option code is @a code, or @c NULL if no match.  @a option_table must end  * with an element whose every field is zero.  If @a command is non-NULL,  * then return the subcommand-specific option description instead of the  * generic one, if a specific description is defined.  *  * The returned value may be statically allocated, or allocated in @a pool.  *  * @since New in 1.4.  */
specifier|const
name|apr_getopt_option_t
modifier|*
name|svn_opt_get_option_from_code2
parameter_list|(
name|int
name|code
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|option_table
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|command
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Return the first entry from @a option_table whose option code is @a code,  * or @c NULL if no match.  @a option_table must end with an element whose  * every field is zero.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
specifier|const
name|apr_getopt_option_t
modifier|*
name|svn_opt_get_option_from_code
parameter_list|(
name|int
name|code
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|option_table
parameter_list|)
function_decl|;
comment|/**  * Return @c TRUE iff subcommand @a command supports option @a  * option_code, else return @c FALSE.  If @a global_options is  * non-NULL, it is a zero-terminated array, and all subcommands take  * the options listed in it.  *  * @since New in 1.5.  */
name|svn_boolean_t
name|svn_opt_subcommand_takes_option3
parameter_list|(
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|command
parameter_list|,
name|int
name|option_code
parameter_list|,
specifier|const
name|int
modifier|*
name|global_options
parameter_list|)
function_decl|;
comment|/**  * Same as svn_opt_subcommand_takes_option3(), but with @c NULL for @a  * global_options.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_boolean_t
name|svn_opt_subcommand_takes_option2
parameter_list|(
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|command
parameter_list|,
name|int
name|option_code
parameter_list|)
function_decl|;
comment|/**  * Return @c TRUE iff subcommand @a command supports option @a option_code,  * else return @c FALSE.  *  * Same as svn_opt_subcommand_takes_option2(), but acts on  * #svn_opt_subcommand_desc_t.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_boolean_t
name|svn_opt_subcommand_takes_option
parameter_list|(
specifier|const
name|svn_opt_subcommand_desc_t
modifier|*
name|command
parameter_list|,
name|int
name|option_code
parameter_list|)
function_decl|;
comment|/**  * Print a generic (not command-specific) usage message to @a stream.  *  * ### @todo Why is @a stream a stdio file instead of an svn stream?  *  * If @a header is non-NULL, print @a header followed by a newline.  Then  * loop over @a cmd_table printing the usage for each command (getting  * option usages from @a opt_table).  Then if @a footer is non-NULL, print  * @a footer followed by a newline.  *  * Use @a pool for temporary allocation.  *  * @since New in 1.4.  */
name|void
name|svn_opt_print_generic_help2
parameter_list|(
specifier|const
name|char
modifier|*
name|header
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|cmd_table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|opt_table
parameter_list|,
specifier|const
name|char
modifier|*
name|footer
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|FILE
modifier|*
name|stream
parameter_list|)
function_decl|;
comment|/**  * Same as svn_opt_print_generic_help2(), but acts on  * #svn_opt_subcommand_desc_t.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|void
name|svn_opt_print_generic_help
parameter_list|(
specifier|const
name|char
modifier|*
name|header
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc_t
modifier|*
name|cmd_table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|opt_table
parameter_list|,
specifier|const
name|char
modifier|*
name|footer
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|FILE
modifier|*
name|stream
parameter_list|)
function_decl|;
comment|/**  * Print an option @a opt nicely into a @a string allocated in @a pool.  * If @a doc is set, include the generic documentation string of @a opt,  * localized to the current locale if a translation is available.  */
name|void
name|svn_opt_format_option
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|opt
parameter_list|,
name|svn_boolean_t
name|doc
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Get @a subcommand's usage from @a table, and print it to @c stdout.  * Obtain option usage from @a options_table.  If not @c NULL, @a  * global_options is a zero-terminated list of global options.  Use @a  * pool for temporary allocation.  @a subcommand may be a canonical  * command name or an alias.  ### @todo Why does this only print to  * @c stdout, whereas svn_opt_print_generic_help() gives us a choice?  *  * When printing the description of an option, if the same option code  * appears a second time in @a options_table with a different name, then  * use that second name as an alias for the first name.  This additional  * behaviour is new in 1.7.  *  * @since New in 1.5.  */
name|void
name|svn_opt_subcommand_help3
parameter_list|(
specifier|const
name|char
modifier|*
name|subcommand
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|options_table
parameter_list|,
specifier|const
name|int
modifier|*
name|global_options
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_opt_subcommand_help3(), but with @a global_options  * always NULL.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|void
name|svn_opt_subcommand_help2
parameter_list|(
specifier|const
name|char
modifier|*
name|subcommand
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|options_table
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_opt_subcommand_help2(), but acts on  * #svn_opt_subcommand_desc_t.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|void
name|svn_opt_subcommand_help
parameter_list|(
specifier|const
name|char
modifier|*
name|subcommand
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc_t
modifier|*
name|table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|options_table
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parsing revision and date options. */
comment|/**  * Various ways of specifying revisions.  *  * @note  * In contexts where local mods are relevant, the `working' kind  * refers to the uncommitted "working" revision, which may be modified  * with respect to its base revision.  In other contexts, `working'  * should behave the same as `committed' or `current'.  */
enum|enum
name|svn_opt_revision_kind
block|{
comment|/** No revision information given. */
name|svn_opt_revision_unspecified
block|,
comment|/** revision given as number */
name|svn_opt_revision_number
block|,
comment|/** revision given as date */
name|svn_opt_revision_date
block|,
comment|/** rev of most recent change */
name|svn_opt_revision_committed
block|,
comment|/** (rev of most recent change) - 1 */
name|svn_opt_revision_previous
block|,
comment|/** .svn/entries current revision */
name|svn_opt_revision_base
block|,
comment|/** current, plus local mods */
name|svn_opt_revision_working
block|,
comment|/** repository youngest */
name|svn_opt_revision_head
comment|/* please update svn_opt__revision_to_string() when extending this enum */
block|}
enum|;
comment|/**  * A revision value, which can be specified as a number or a date.  *  * @note This union was formerly an anonymous inline type in  * @c svn_opt_revision_t, and was converted to a named type just to  * make things easier for SWIG.  *  * @since New in 1.3.  */
typedef|typedef
union|union
name|svn_opt_revision_value_t
block|{
comment|/** The revision number */
name|svn_revnum_t
name|number
decl_stmt|;
comment|/** the date of the revision */
name|apr_time_t
name|date
decl_stmt|;
block|}
name|svn_opt_revision_value_t
typedef|;
comment|/** A revision, specified in one of @c svn_opt_revision_kind ways. */
typedef|typedef
struct|struct
name|svn_opt_revision_t
block|{
name|enum
name|svn_opt_revision_kind
name|kind
decl_stmt|;
comment|/**< See svn_opt_revision_kind */
name|svn_opt_revision_value_t
name|value
decl_stmt|;
comment|/**< Extra data qualifying the @c kind */
block|}
name|svn_opt_revision_t
typedef|;
comment|/** A revision range, specified in one of @c svn_opt_revision_kind ways. */
typedef|typedef
struct|struct
name|svn_opt_revision_range_t
block|{
comment|/** The first revision in the range */
name|svn_opt_revision_t
name|start
decl_stmt|;
comment|/** The last revision in the range */
name|svn_opt_revision_t
name|end
decl_stmt|;
block|}
name|svn_opt_revision_range_t
typedef|;
comment|/**  * Set @a *start_revision and/or @a *end_revision according to @a arg,  * where @a arg is "N" or "N:M", like so:  *  *    - If @a arg is "N", set @a *start_revision to represent N, and  *      leave @a *end_revision untouched.  *  *    - If @a arg is "N:M", set @a *start_revision and @a *end_revision  *      to represent N and M respectively.  *  * N and/or M may be one of the special revision descriptors  * recognized by revision_from_word(), or a date in curly braces.  *  * If @a arg is invalid, return -1; else return 0.  * It is invalid to omit a revision (as in, ":", "N:" or ":M").  *  * @note It is typical, though not required, for @a *start_revision and  * @a *end_revision to be @c svn_opt_revision_unspecified kind on entry.  *  * Use @a pool for temporary allocations.  */
name|int
name|svn_opt_parse_revision
parameter_list|(
name|svn_opt_revision_t
modifier|*
name|start_revision
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|end_revision
parameter_list|,
specifier|const
name|char
modifier|*
name|arg
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Parse @a arg, where @a arg is "N" or "N:M", into a  * @c svn_opt_revision_range_t and push that onto @a opt_ranges.  *  *    - If @a arg is "N", set the @c start field of the  *      @c svn_opt_revision_range_t to represent N and the @c end field  *      to @c svn_opt_revision_unspecified.  *  *    - If @a arg is "N:M", set the @c start field of the  *      @c svn_opt_revision_range_t to represent N and the @c end field  *      to represent M.  *  * If @a arg is invalid, return -1; else return 0.  It is invalid to omit  * a revision (as in, ":", "N:" or ":M").  *  * Use @a pool to allocate @c svn_opt_revision_range_t pushed to the array.  *  * @since New in 1.5.  */
name|int
name|svn_opt_parse_revision_to_range
parameter_list|(
name|apr_array_header_t
modifier|*
name|opt_ranges
parameter_list|,
specifier|const
name|char
modifier|*
name|arg
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Resolve peg revisions and operational revisions in the following way:  *  *    - If @a is_url is set and @a peg_rev->kind is  *      @c svn_opt_revision_unspecified, @a peg_rev->kind defaults to  *      @c svn_opt_revision_head.  *  *    - If @a is_url is not set, and @a peg_rev->kind is  *      @c svn_opt_revision_unspecified, @a peg_rev->kind defaults to  *      @c svn_opt_revision_base.  *  *    - If @a op_rev->kind is @c svn_opt_revision_unspecified, @a op_rev  *      defaults to @a peg_rev.  *  * Both @a peg_rev and @a op_rev may be modified as a result of this  * function.  @a is_url should be set if the path the revisions refer to is  * a url, and unset otherwise.  *  * If @a notice_local_mods is set, @c svn_opt_revision_working is used,  * instead of @c svn_opt_revision_base.  *  * Use @a pool for allocations.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_opt_resolve_revisions
parameter_list|(
name|svn_opt_revision_t
modifier|*
name|peg_rev
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|op_rev
parameter_list|,
name|svn_boolean_t
name|is_url
parameter_list|,
name|svn_boolean_t
name|notice_local_mods
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parsing arguments. */
comment|/**  * Pull remaining target arguments from @a os into @a *targets_p,  * converting them to UTF-8, followed by targets from @a known_targets  * (which might come from, for example, the "--targets" command line  * option), which are already in UTF-8.  *  * On each URL target, do some IRI-to-URI encoding and some  * auto-escaping.  On each local path, canonicalize case and path  * separators.  *  * Allocate @a *targets_p and its elements in @a pool.  *  * If a path has the same name as a Subversion working copy  * administrative directory, return SVN_ERR_RESERVED_FILENAME_SPECIFIED;  * if multiple reserved paths are encountered, return a chain of  * errors, all of which are SVN_ERR_RESERVED_FILENAME_SPECIFIED.  Do  * not return this type of error in a chain with any other type of  * error, and if this is the only type of error encountered, complete  * the operation before returning the error(s).  *  * @deprecated Provided for backward compatibility with the 1.5 API.  * @see svn_client_args_to_target_array()  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_opt_args_to_target_array3
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|targets_p
parameter_list|,
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|known_targets
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * This is the same as svn_opt_args_to_target_array3() except that it  * silently ignores paths that have the same name as a working copy  * administrative directory.  *  * @since New in 1.2.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_opt_args_to_target_array2
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|targets_p
parameter_list|,
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|known_targets
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * The same as svn_opt_args_to_target_array2() except that, in  * addition, if @a extract_revisions is set, then look for trailing  * "@rev" syntax on the first two paths.  If the first target in @a  * *targets_p ends in "@rev", replace it with a canonicalized version of  * the part before "@rev" and replace @a *start_revision with the value  * of "rev".  If the second target in @a *targets_p ends in "@rev",  * replace it with a canonicalized version of the part before "@rev"  * and replace @a *end_revision with the value of "rev".  Ignore  * revision specifiers on any further paths.  "rev" can be any form of  * single revision specifier, as accepted by svn_opt_parse_revision().  *  * @deprecated Provided for backward compatibility with the 1.1 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_opt_args_to_target_array
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|targets_p
parameter_list|,
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|known_targets
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|start_revision
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|end_revision
parameter_list|,
name|svn_boolean_t
name|extract_revisions
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Parse revprop key/value pair from @a revprop_spec (name[=value]) into  * @a revprops, making copies of both with @a pool.  If @a revprops is  * @c NULL, allocate a new apr_hash_t in it.  @a revprops maps  * const char * revprop names to svn_string_t * revprop values for use  * with svn_repos_get_commit_editor5 and other get_commit_editor APIs.  *  * @since New in 1.6.  */
name|svn_error_t
modifier|*
name|svn_opt_parse_revprop
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|revprops
parameter_list|,
specifier|const
name|char
modifier|*
name|revprop_spec
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * If no targets exist in @a *targets, add `.' as the lone target.  *  * (Some commands take an implicit "." string argument when invoked  * with no arguments. Those commands make use of this function to  * add "." to the target array if the user passes no args.)  */
name|void
name|svn_opt_push_implicit_dot_target
parameter_list|(
name|apr_array_header_t
modifier|*
name|targets
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Parse @a num_args non-target arguments from the list of arguments in  * @a os->argv, return them as<tt>const char *</tt> in @a *args_p, without  * doing any UTF-8 conversion.  Allocate @a *args_p and its values in @a pool.  */
name|svn_error_t
modifier|*
name|svn_opt_parse_num_args
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|args_p
parameter_list|,
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
name|int
name|num_args
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Parse all remaining arguments from @a os->argv, return them as  *<tt>const char *</tt> in @a *args_p, without doing any UTF-8 conversion.  * Allocate @a *args_p and its values in @a pool.  */
name|svn_error_t
modifier|*
name|svn_opt_parse_all_args
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|args_p
parameter_list|,
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Parse a working-copy path or URL in @a path, extracting any trailing  * revision specifier of the form "@rev" from the last component of  * the path.  *  * Some examples would be:  *  *   - "foo/bar"                      -> "foo/bar",       (unspecified)  *   - "foo/bar@13"                   -> "foo/bar",       (number, 13)  *   - "foo/bar@HEAD"                 -> "foo/bar",       (head)  *   - "foo/bar@{1999-12-31}"         -> "foo/bar",       (date, 1999-12-31)  *   - "http://a/b@27"                -> "http://a/b",    (number, 27)  *   - "http://a/b@COMMITTED"         -> "http://a/b",    (committed) [*]  *   - "http://a/b@{1999-12-31}"      -> "http://a/b",    (date, 1999-12-31)  *   - "http://a/b@%7B1999-12-31%7D"  -> "http://a/b",    (date, 1999-12-31)  *   - "foo/bar@1:2"                  -> error  *   - "foo/bar@baz"                  -> error  *   - "foo/bar@"                     -> "foo/bar",       (unspecified)  *   - "foo/@bar@"                    -> "foo/@bar",      (unspecified)  *   - "foo/bar/@13"                  -> "foo/bar/",      (number, 13)  *   - "foo/bar@@13"                  -> "foo/bar@",      (number, 13)  *   - "foo/@bar@HEAD"                -> "foo/@bar",      (head)  *   - "foo@/bar"                     -> "foo@/bar",      (unspecified)  *   - "foo@HEAD/bar"                 -> "foo@HEAD/bar",  (unspecified)  *   - "@foo/bar"                     -> "@foo/bar",      (unspecified)  *   - "@foo/bar@"                    -> "@foo/bar",      (unspecified)  *  *   [*] Syntactically valid but probably not semantically useful.  *  * If a trailing revision specifier is found, parse it into @a *rev and  * put the rest of the path into @a *truepath, allocating from @a pool;  * or return an @c SVN_ERR_CL_ARG_PARSING_ERROR (with the effect on  * @a *truepath undefined) if the revision specifier is invalid.  * If no trailing revision specifier is found, set @a *truepath to  * @a path and @a rev->kind to @c svn_opt_revision_unspecified.  *  * This function does not require that @a path be in canonical form.  * No canonicalization is done and @a *truepath will only be in  * canonical form if @a path is in canonical form.  *  * @since New in 1.1.  */
name|svn_error_t
modifier|*
name|svn_opt_parse_path
parameter_list|(
name|svn_opt_revision_t
modifier|*
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|truepath
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Central dispatcher function for various kinds of help message.  * Prints one of:  *   * subcommand-specific help (svn_opt_subcommand_help)  *   * generic help (svn_opt_print_generic_help)  *   * version info  *   * simple usage complaint: "Type '@a pgm_name help' for usage."  *  * If @a os is not @c NULL and it contains arguments, then try  * printing help for them as though they are subcommands, using @a  * cmd_table and @a option_table for option information.  If not @c  * NULL, @a global_options is a zero-terminated array of options taken  * by all subcommands.  *  * Else, if @a print_version is TRUE, then print version info, in  * brief form if @a quiet is also TRUE; if @a quiet is FALSE, then if  * @a version_footer is non-NULL, print it following the version  * information. If @a verbose is TRUE, also print information about  * the running system and loaded shared libraries, where available.  *  * Else, if @a os is not @c NULL and does not contain arguments, print  * generic help, via svn_opt_print_generic_help2() with the @a header,  * @a cmd_table, @a option_table, and @a footer arguments.  *  * Else, when @a os is @c NULL, print the simple usage complaint.  *  * Use @a pool for temporary allocations.  *  * Notes: The reason this function handles both version printing and  * general usage help is that a confused user might put both the  * --version flag *and* subcommand arguments on a help command line.  * The logic for handling such a situation should be in one place.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_opt_print_help4
parameter_list|(
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
specifier|const
name|char
modifier|*
name|pgm_name
parameter_list|,
name|svn_boolean_t
name|print_version
parameter_list|,
name|svn_boolean_t
name|quiet
parameter_list|,
name|svn_boolean_t
name|verbose
parameter_list|,
specifier|const
name|char
modifier|*
name|version_footer
parameter_list|,
specifier|const
name|char
modifier|*
name|header
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|cmd_table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|option_table
parameter_list|,
specifier|const
name|int
modifier|*
name|global_options
parameter_list|,
specifier|const
name|char
modifier|*
name|footer
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_opt_print_help4(), but with @a verbose always @c FALSE.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_opt_print_help3
parameter_list|(
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
specifier|const
name|char
modifier|*
name|pgm_name
parameter_list|,
name|svn_boolean_t
name|print_version
parameter_list|,
name|svn_boolean_t
name|quiet
parameter_list|,
specifier|const
name|char
modifier|*
name|version_footer
parameter_list|,
specifier|const
name|char
modifier|*
name|header
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|cmd_table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|option_table
parameter_list|,
specifier|const
name|int
modifier|*
name|global_options
parameter_list|,
specifier|const
name|char
modifier|*
name|footer
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_opt_print_help3(), but with @a global_options always @c  * NULL.  *  * @deprecated Provided for backward compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_opt_print_help2
parameter_list|(
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
specifier|const
name|char
modifier|*
name|pgm_name
parameter_list|,
name|svn_boolean_t
name|print_version
parameter_list|,
name|svn_boolean_t
name|quiet
parameter_list|,
specifier|const
name|char
modifier|*
name|version_footer
parameter_list|,
specifier|const
name|char
modifier|*
name|header
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc2_t
modifier|*
name|cmd_table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|option_table
parameter_list|,
specifier|const
name|char
modifier|*
name|footer
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Same as svn_opt_print_help2(), but acts on #svn_opt_subcommand_desc_t.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_opt_print_help
parameter_list|(
name|apr_getopt_t
modifier|*
name|os
parameter_list|,
specifier|const
name|char
modifier|*
name|pgm_name
parameter_list|,
name|svn_boolean_t
name|print_version
parameter_list|,
name|svn_boolean_t
name|quiet
parameter_list|,
specifier|const
name|char
modifier|*
name|version_footer
parameter_list|,
specifier|const
name|char
modifier|*
name|header
parameter_list|,
specifier|const
name|svn_opt_subcommand_desc_t
modifier|*
name|cmd_table
parameter_list|,
specifier|const
name|apr_getopt_option_t
modifier|*
name|option_table
parameter_list|,
specifier|const
name|char
modifier|*
name|footer
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_OPTS_H */
end_comment

end_unit

