begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_ra_private.h  * @brief The Subversion repository access library - Internal routines  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_RA_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_RA_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_error.h"
end_include

begin_include
include|#
directive|include
file|"svn_ra.h"
end_include

begin_include
include|#
directive|include
file|"svn_delta.h"
end_include

begin_include
include|#
directive|include
file|"svn_editor.h"
end_include

begin_include
include|#
directive|include
file|"svn_io.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/**  * Open a new ra session @a *new_session to the same repository as an existing  * ra session @a old_session, copying the callbacks, auth baton, etc. from the  * old session. This essentially limits the lifetime of the new, duplicated  * session to the lifetime of the old session. If the new session should  * outlive the new session, creating a new session using svn_ra_open4() is  * recommended.  *  * If @a session_url is not NULL, parent the new session at session_url. Note  * that @a session_url MUST BE in the same repository as @a old_session or an  * error will be returned. When @a session_url NULL the same session root  * will be used.  *  * Allocate @a new_session in @a result_pool. Perform temporary allocations  * in @a scratch_pool.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_ra__dup_session
parameter_list|(
name|svn_ra_session_t
modifier|*
modifier|*
name|new_session
parameter_list|,
name|svn_ra_session_t
modifier|*
name|old_session
parameter_list|,
specifier|const
name|char
modifier|*
name|session_url
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Equivalent to svn_ra__assert_capable_server()    for SVN_RA_CAPABILITY_MERGEINFO. */
name|svn_error_t
modifier|*
name|svn_ra__assert_mergeinfo_capable_server
parameter_list|(
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Return an error with code SVN_ERR_UNSUPPORTED_FEATURE, and an error    message referencing PATH_OR_URL, if the "server" pointed to by    RA_SESSION doesn't support CAPABILITY (an SVN_RA_CAPABILITY_* constant).    Perform temporary allocations in POOL. */
name|svn_error_t
modifier|*
name|svn_ra__assert_capable_server
parameter_list|(
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|char
modifier|*
name|capability
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/*** Operational Locks ***/
comment|/** This is a function type which allows svn_ra__get_operational_lock()  * to report lock attempt failures.  If non-NULL, @a locktoken is the  * preexisting lock which prevented lock acquisition.  *  * @since New in 1.7.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra__lock_retry_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|locktoken
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Acquire a lock (of sorts) on the repository associated with the  * given RA @a session, retrying as necessary up to @a num_retries  * times, and set @a *lock_string_p to the value of the acquired lock  * token.  Allocate the returned token from @a pool.  (See this  * function's counterpart svn_ra__release_operational_lock() for your  * lock removal needs.)  *  * @a lock_revprop_name is the name of the revision-0 property used to  * store the lock.  *  * If @a steal_lock is set, then replace any pre-existing lock on the  * repository with our own.  Iff such a theft occurs and  * @a stolen_lock_p is non-NULL, set @a *stolen_lock_p to the token of  * the lock we stole.  *  * Call @a retry_func with @a retry_baton each time the retry loop  * fails to acquire a lock.  *  * Use @a cancel_func and @a cancel_baton to check for early  * cancellation.  *  * @note If the server does not support #SVN_RA_CAPABILITY_ATOMIC_REVPROPS  * (i.e., is a pre-1.7 server), then this function makes a "best effort"  * attempt to obtain the lock, but is susceptible to a race condition; see  * issue #3546.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_ra__get_operational_lock
parameter_list|(
specifier|const
name|svn_string_t
modifier|*
modifier|*
name|lock_string_p
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
modifier|*
name|stolen_lock_p
parameter_list|,
name|svn_ra_session_t
modifier|*
name|session
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_revprop_name
parameter_list|,
name|svn_boolean_t
name|steal_lock
parameter_list|,
name|int
name|num_retries
parameter_list|,
name|svn_ra__lock_retry_func_t
name|retry_func
parameter_list|,
name|void
modifier|*
name|retry_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Release an operational lock (whose value is @a mylocktoken) on the  * repository associated with RA @a session.  (This is the counterpart  * to svn_ra__get_operational_lock().)  *  * @a lock_revprop_name is the name of the revision-0 property used to  * store the lock.  *  * Use @a scratch_pool for temporary allocations.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_ra__release_operational_lock
parameter_list|(
name|svn_ra_session_t
modifier|*
name|session
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_revprop_name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|mylocktoken
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Register CALLBACKS to be used with the Ev2 shims in RA_SESSION. */
name|svn_error_t
modifier|*
name|svn_ra__register_editor_shim_callbacks
parameter_list|(
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_delta_shim_callbacks_t
modifier|*
name|callbacks
parameter_list|)
function_decl|;
comment|/* Using information from BATON, provide the (file's) pristine contents    for REPOS_RELPATH. They are returned in *CONTENTS, and correspond to    *REVISION.     If a pristine is not available (ie. a locally-added node), then set    *CONTENTS to NULL; *REVISION will not be examined in this case.     These are allocated in RESULT_POOL. SCRATCH_POOL can be used    for temporary allocations.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra__provide_base_cb_t
function_decl|)
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|contents
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Using information from BATON, provide the pristine properties for    REPOS_RELPATH. They are returned in *PROPS, and correspond to *REVISION.     If properties are not available (ie. a locally-added node), then set    *PROPS to NULL; *REVISION will not be examined in this case.     The properties are allocated in RESULT_POOL. SCRATCH_POOL can be used    for temporary allocations.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra__provide_props_cb_t
function_decl|)
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Using information from BATON, fetch the kind of REPOS_RELPATH at revision    SRC_REVISION, returning it in *KIND.     If the kind cannot be determined, then set *KIND to svn_node_unknown.     Temporary allocations can be made in SCRATCH_POOL.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra__get_copysrc_kind_cb_t
function_decl|)
parameter_list|(
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_relpath
parameter_list|,
name|svn_revnum_t
name|src_revision
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Return an Ev2-based editor for performing commits.     The editor is associated with the given SESSION, and its implied target    repository.     REVPROPS contains all the revision properties that should be stored onto    the newly-committed revision. SVN_PROP_REVISION_AUTHOR will be set to    the username as determined by the session; overwriting any prior value    that may be present in REVPROPS.     COMMIT_CB/BATON contain the callback to receive post-commit information.     LOCK_TOKENS should contain all lock tokens necessary to modify paths    within the commit. If KEEP_LOCKS is FALSE, then the paths associated    with these tokens will be unlocked.    ### today, LOCK_TOKENS is session_relpath:token_value. in the future,    ### it should be repos_relpath:token_value.     PROVIDE_BASE_CB is a callback to fetch pristine contents, used to send    an svndiff over the wire to the server. This may be NULL, indicating    pristine contents are not available (eg. URL-based operations or import).     PROVIDE_PROPS_CB is a callback to fetch pristine properties, used to    send property deltas over the wire to the server. This may be NULL,    indicating pristine properties are not available (eg. URL-based operations    or an import).     GET_COPYSRC_KIND_CB is a callback to determine the kind of a copy-source.    This is necessary when an Ev2/Ev1 shim is required by the RA provider,    in order to determine whether to use delta->add_directory() or the    delta->add_file() vtable entry to perform the copy.    ### unclear on impact if this is NULL.    ### this callback will disappear when "everything" is running Ev2     CB_BATON is the baton used/shared by the above three callbacks.     Cancellation is handled through the callbacks provided when SESSION    is initially opened.     *EDITOR will be allocated in RESULT_POOL, and all temporary allocations    will be performed in SCRATCH_POOL. */
name|svn_error_t
modifier|*
name|svn_ra__get_commit_ev2
parameter_list|(
name|svn_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|svn_ra_session_t
modifier|*
name|session
parameter_list|,
name|apr_hash_t
modifier|*
name|revprops
parameter_list|,
name|svn_commit_callback2_t
name|commit_cb
parameter_list|,
name|void
modifier|*
name|commit_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|lock_tokens
parameter_list|,
name|svn_boolean_t
name|keep_locks
parameter_list|,
name|svn_ra__provide_base_cb_t
name|provide_base_cb
parameter_list|,
name|svn_ra__provide_props_cb_t
name|provide_props_cb
parameter_list|,
name|svn_ra__get_copysrc_kind_cb_t
name|get_copysrc_kind_cb
parameter_list|,
name|void
modifier|*
name|cb_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Similar to #svn_ra_replay_revstart_callback_t, but with an Ev2 editor. */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra__replay_revstart_ev2_callback_t
function_decl|)
parameter_list|(
name|svn_revnum_t
name|revision
parameter_list|,
name|void
modifier|*
name|replay_baton
parameter_list|,
name|svn_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|apr_hash_t
modifier|*
name|rev_props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Similar to #svn_ra_replay_revfinish_callback_t, but with an Ev2 editor. */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_ra__replay_revfinish_ev2_callback_t
function_decl|)
parameter_list|(
name|svn_revnum_t
name|revision
parameter_list|,
name|void
modifier|*
name|replay_baton
parameter_list|,
name|svn_editor_t
modifier|*
name|editor
parameter_list|,
name|apr_hash_t
modifier|*
name|rev_props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Similar to svn_ra_replay_range(), but uses Ev2 versions of the callback    functions. */
name|svn_error_t
modifier|*
name|svn_ra__replay_range_ev2
parameter_list|(
name|svn_ra_session_t
modifier|*
name|session
parameter_list|,
name|svn_revnum_t
name|start_revision
parameter_list|,
name|svn_revnum_t
name|end_revision
parameter_list|,
name|svn_revnum_t
name|low_water_mark
parameter_list|,
name|svn_boolean_t
name|send_deltas
parameter_list|,
name|svn_ra__replay_revstart_ev2_callback_t
name|revstart_func
parameter_list|,
name|svn_ra__replay_revfinish_ev2_callback_t
name|revfinish_func
parameter_list|,
name|void
modifier|*
name|replay_baton
parameter_list|,
name|svn_ra__provide_base_cb_t
name|provide_base_cb
parameter_list|,
name|svn_ra__provide_props_cb_t
name|provide_props_cb
parameter_list|,
name|svn_ra__get_copysrc_kind_cb_t
name|get_copysrc_kind_cb
parameter_list|,
name|void
modifier|*
name|cb_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Similar to svn_ra_replay(), but with an Ev2 editor. */
name|svn_error_t
modifier|*
name|svn_ra__replay_ev2
parameter_list|(
name|svn_ra_session_t
modifier|*
name|session
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_revnum_t
name|low_water_mark
parameter_list|,
name|svn_boolean_t
name|send_deltas
parameter_list|,
name|svn_editor_t
modifier|*
name|editor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_RA_PRIVATE_H */
end_comment

end_unit

