begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_client_private.h  * @brief Subversion-internal client APIs.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_CLIENT_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_CLIENT_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_ra.h"
end_include

begin_include
include|#
directive|include
file|"svn_client.h"
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* Return true if KIND is a revision kind that is dependent on the working  * copy. Otherwise, return false. */
define|#
directive|define
name|SVN_CLIENT__REVKIND_NEEDS_WC
parameter_list|(
name|kind
parameter_list|)
define|\
value|((kind) == svn_opt_revision_base ||                                      \    (kind) == svn_opt_revision_previous ||                                  \    (kind) == svn_opt_revision_working ||                                   \    (kind) == svn_opt_revision_committed)
block|\
comment|/* Return true if KIND is a revision kind that the WC can supply without  * contacting the repository. Otherwise, return false. */
define|#
directive|define
name|SVN_CLIENT__REVKIND_IS_LOCAL_TO_WC
parameter_list|(
name|kind
parameter_list|)
define|\
value|((kind) == svn_opt_revision_base ||                                      \    (kind) == svn_opt_revision_working ||                                   \    (kind) == svn_opt_revision_committed)
comment|/* A location in a repository. */
typedef|typedef
struct|struct
name|svn_client__pathrev_t
block|{
specifier|const
name|char
modifier|*
name|repos_root_url
decl_stmt|;
specifier|const
name|char
modifier|*
name|repos_uuid
decl_stmt|;
name|svn_revnum_t
name|rev
decl_stmt|;
specifier|const
name|char
modifier|*
name|url
decl_stmt|;
block|}
name|svn_client__pathrev_t
typedef|;
comment|/* Return a new path-rev structure, allocated in RESULT_POOL,  * initialized with deep copies of REPOS_ROOT_URL, REPOS_UUID, REV and URL. */
name|svn_client__pathrev_t
modifier|*
name|svn_client__pathrev_create
parameter_list|(
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_uuid
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Return a new path-rev structure, allocated in RESULT_POOL,  * initialized with deep copies of REPOS_ROOT_URL, REPOS_UUID, and REV,  * and using the repository-relative RELPATH to construct the URL. */
name|svn_client__pathrev_t
modifier|*
name|svn_client__pathrev_create_with_relpath
parameter_list|(
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_uuid
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Set *PATHREV_P to a new path-rev structure, allocated in RESULT_POOL,  * initialized with deep copies of the repository root URL and UUID from  * RA_SESSION, and of REV and URL. */
name|svn_error_t
modifier|*
name|svn_client__pathrev_create_with_session
parameter_list|(
name|svn_client__pathrev_t
modifier|*
modifier|*
name|pathrev_p
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Return a deep copy of PATHREV, allocated in RESULT_POOL. */
name|svn_client__pathrev_t
modifier|*
name|svn_client__pathrev_dup
parameter_list|(
specifier|const
name|svn_client__pathrev_t
modifier|*
name|pathrev
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Return a deep copy of PATHREV, with a URI-encoded representation of  * RELPATH joined on to the URL.  Allocate the result in RESULT_POOL. */
name|svn_client__pathrev_t
modifier|*
name|svn_client__pathrev_join_relpath
parameter_list|(
specifier|const
name|svn_client__pathrev_t
modifier|*
name|pathrev
parameter_list|,
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Return the repository-relative relpath of PATHREV. */
specifier|const
name|char
modifier|*
name|svn_client__pathrev_relpath
parameter_list|(
specifier|const
name|svn_client__pathrev_t
modifier|*
name|pathrev
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Return the repository-relative fspath of PATHREV. */
specifier|const
name|char
modifier|*
name|svn_client__pathrev_fspath
parameter_list|(
specifier|const
name|svn_client__pathrev_t
modifier|*
name|pathrev
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Given PATH_OR_URL, which contains either a working copy path or an    absolute URL, a peg revision PEG_REVISION, and a desired revision    REVISION, create an RA connection to that object as it exists in    that revision, following copy history if necessary.  If REVISION is    younger than PEG_REVISION, then PATH_OR_URL will be checked to see    that it is the same node in both PEG_REVISION and REVISION.  If it    is not, then @c SVN_ERR_CLIENT_UNRELATED_RESOURCES is returned.     BASE_DIR_ABSPATH is the working copy path the ra_session corresponds    to. If provided it will be used to read and dav props. So if provided    this directory MUST match the session anchor.     If PEG_REVISION->kind is 'unspecified', the peg revision is 'head'    for a URL or 'working' for a WC path.  If REVISION->kind is    'unspecified', the operative revision is the peg revision.     Store the resulting ra_session in *RA_SESSION_P.  Store the final    resolved location of the object in *RESOLVED_LOC_P.  RESOLVED_LOC_P    may be NULL if not wanted.     Use authentication baton cached in CTX to authenticate against the    repository.     Use POOL for all allocations. */
name|svn_error_t
modifier|*
name|svn_client__ra_session_from_path2
parameter_list|(
name|svn_ra_session_t
modifier|*
modifier|*
name|ra_session_p
parameter_list|,
name|svn_client__pathrev_t
modifier|*
modifier|*
name|resolved_loc_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_dir_abspath
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|peg_revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Given PATH_OR_URL, which contains either a working copy path or an    absolute URL, a peg revision PEG_REVISION, and a desired revision    REVISION, find the path at which that object exists in REVISION,    following copy history if necessary.  If REVISION is younger than    PEG_REVISION, then check that PATH_OR_URL is the same node in both    PEG_REVISION and REVISION, and return @c    SVN_ERR_CLIENT_UNRELATED_RESOURCES if it is not the same node.     If PEG_REVISION->kind is 'unspecified', the peg revision is 'head'    for a URL or 'working' for a WC path.  If REVISION->kind is    'unspecified', the operative revision is the peg revision.     Store the actual location of the object in *RESOLVED_LOC_P.     RA_SESSION should be an open RA session pointing at the URL of    PATH_OR_URL, or NULL, in which case this function will open its own    temporary session.     Use authentication baton cached in CTX to authenticate against the    repository.     Use POOL for all allocations. */
name|svn_error_t
modifier|*
name|svn_client__resolve_rev_and_url
parameter_list|(
name|svn_client__pathrev_t
modifier|*
modifier|*
name|resolved_loc_p
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|peg_revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return @c SVN_ERR_ILLEGAL_TARGET if TARGETS contains a mixture of  * URLs and paths; otherwise return SVN_NO_ERROR.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_client__assert_homogeneous_target_type
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|targets
parameter_list|)
function_decl|;
comment|/* Create a svn_client_status_t structure *CST for LOCAL_ABSPATH, shallow  * copying data from *STATUS wherever possible and retrieving the other values  * where needed. Perform temporary allocations in SCRATCH_POOL and allocate the  * result in RESULT_POOL  */
name|svn_error_t
modifier|*
name|svn_client__create_status
parameter_list|(
name|svn_client_status_t
modifier|*
modifier|*
name|cst
parameter_list|,
name|svn_wc_context_t
modifier|*
name|wc_ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|svn_wc_status3_t
modifier|*
name|status
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *ANCESTOR_URL and *ANCESTOR_REVISION to the URL and revision,  * respectively, of the youngest common ancestor of the two locations  * PATH_OR_URL1@REV1 and PATH_OR_URL2@REV2.  Set *ANCESTOR_RELPATH to  * NULL and *ANCESTOR_REVISION to SVN_INVALID_REVNUM if they have no  * common ancestor.  This function assumes that PATH_OR_URL1@REV1 and  * PATH_OR_URL2@REV2 both refer to the same repository.  *  * Use the authentication baton cached in CTX to authenticate against  * the repository.  *  * See also svn_client__get_youngest_common_ancestor().  */
name|svn_error_t
modifier|*
name|svn_client__youngest_common_ancestor
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|ancestor_url
parameter_list|,
name|svn_revnum_t
modifier|*
name|ancestor_rev
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url1
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision1
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url2
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision2
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Get the repository location of the base node at LOCAL_ABSPATH.  *  * A pathrev_t wrapper around svn_wc__node_get_base().  *  * Set *BASE_P to the location that this node was checked out at or last  * updated/switched to, regardless of any uncommitted changes (delete,  * replace and/or copy-here/move-here).  *  * If there is no base node at LOCAL_ABSPATH (such as when there is a  * locally added/copied/moved-here node that is not part of a replace),  * set *BASE_P to NULL.  */
name|svn_error_t
modifier|*
name|svn_client__wc_node_get_base
parameter_list|(
name|svn_client__pathrev_t
modifier|*
modifier|*
name|base_p
parameter_list|,
specifier|const
name|char
modifier|*
name|wc_abspath
parameter_list|,
name|svn_wc_context_t
modifier|*
name|wc_ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Get the original location of the WC node at LOCAL_ABSPATH.  *  * A pathrev_t wrapper around svn_wc__node_get_origin().  *  * Set *ORIGIN_P to the origin of the WC node at WC_ABSPATH.  If the node  * is a local copy, give the copy-from location.  If the node is locally  * added or deleted, set *ORIGIN_P to NULL.  */
name|svn_error_t
modifier|*
name|svn_client__wc_node_get_origin
parameter_list|(
name|svn_client__pathrev_t
modifier|*
modifier|*
name|origin_p
parameter_list|,
specifier|const
name|char
modifier|*
name|wc_abspath
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Produce a diff with depth DEPTH between two files or two directories at  * LOCAL_ABSPATH1 and LOCAL_ABSPATH2, using the provided diff callbacks to  * show changes in files. The files and directories involved may be part of  * a working copy or they may be unversioned. For versioned files, show  * property changes, too. */
name|svn_error_t
modifier|*
name|svn_client__arbitrary_nodes_diff
parameter_list|(
specifier|const
name|char
modifier|*
name|local_abspath1
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath2
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
specifier|const
name|svn_wc_diff_callbacks4_t
modifier|*
name|callbacks
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Copy the file or directory on URL in some repository to DST_ABSPATH,  * copying node information and properties. Resolve URL using PEG_REV and  * REVISION.  *  * If URL specifies a directory, create the copy using depth DEPTH.  *  * If MAKE_PARENTS is TRUE and DST_ABSPATH doesn't have an added parent  * create missing parent directories  */
name|svn_error_t
modifier|*
name|svn_client__copy_foreign
parameter_list|(
specifier|const
name|char
modifier|*
name|url
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_abspath
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|peg_revision
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|make_parents
parameter_list|,
name|svn_boolean_t
name|already_locked
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Same as the public svn_client_mergeinfo_log2 API, except for the addition  * of the TARGET_MERGEINFO_CATALOG and RESULT_POOL parameters.  *  * If TARGET_MERGEINFO_CATALOG is NULL then this acts exactly as the public  * API.  If *TARGET_MERGEINFO_CATALOG is NULL, then *TARGET_MERGEINFO_CATALOG  * is set to the a mergeinfo catalog representing the mergeinfo on  * TARGET_PATH_OR_URL@TARGET_PEG_REVISION at DEPTH, (like the public API only  * depths of svn_depth_empty or svn_depth_infinity are supported) allocated in  * RESULT_POOL.  Finally, if *TARGET_MERGEINFO_CATALOG is non-NULL, then it is  * assumed to be a mergeinfo catalog representing the mergeinfo on  * TARGET_PATH_OR_URL@TARGET_PEG_REVISION at DEPTH.  *  * The keys for the subtree mergeinfo are the repository root-relative  * paths of TARGET_PATH_OR_URL and/or its subtrees, regardless of whether  * TARGET_PATH_OR_URL is a URL or WC path.  *  * If RA_SESSION is not NULL, use it to obtain merge information instead of  * opening a new session. The session might be reparented after usage, so  * callers should reparent the session back to their original location if  * needed.  */
name|svn_error_t
modifier|*
name|svn_client__mergeinfo_log
parameter_list|(
name|svn_boolean_t
name|finding_merged
parameter_list|,
specifier|const
name|char
modifier|*
name|target_path_or_url
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|target_peg_revision
parameter_list|,
name|svn_mergeinfo_catalog_t
modifier|*
name|target_mergeinfo_catalog
parameter_list|,
specifier|const
name|char
modifier|*
name|source_path_or_url
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|source_peg_revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|source_start_revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|source_end_revision
parameter_list|,
name|svn_log_entry_receiver_t
name|log_receiver
parameter_list|,
name|void
modifier|*
name|log_receiver_baton
parameter_list|,
name|svn_boolean_t
name|discover_changed_paths
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|revprops
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_CLIENT_PRIVATE_H */
end_comment

end_unit

