begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* svn_sqlite.h  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_SQLITE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_SQLITE_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_checksum.h"
end_include

begin_include
include|#
directive|include
file|"svn_error.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_token.h"
end_include

begin_comment
comment|/* for svn_token_map_t  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* Because the SQLite code can be inlined into libsvn_subre/sqlite.c,    we define accessors to its compile-time and run-time version    numbers here. */
comment|/* Return the value that SQLITE_VERSION had at compile time. */
specifier|const
name|char
modifier|*
name|svn_sqlite__compiled_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Return the value of sqlite3_libversion() at run time. */
specifier|const
name|char
modifier|*
name|svn_sqlite__runtime_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
name|struct
name|svn_sqlite__db_t
name|svn_sqlite__db_t
typedef|;
typedef|typedef
name|struct
name|svn_sqlite__stmt_t
name|svn_sqlite__stmt_t
typedef|;
typedef|typedef
name|struct
name|svn_sqlite__context_t
name|svn_sqlite__context_t
typedef|;
typedef|typedef
name|struct
name|svn_sqlite__value_t
name|svn_sqlite__value_t
typedef|;
typedef|typedef
enum|enum
name|svn_sqlite__mode_e
block|{
name|svn_sqlite__mode_readonly
block|,
comment|/* open the database read-only */
name|svn_sqlite__mode_readwrite
block|,
comment|/* open the database read-write */
name|svn_sqlite__mode_rwcreate
comment|/* open/create the database read-write */
block|}
name|svn_sqlite__mode_t
typedef|;
comment|/* The type used for callback functions. */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_sqlite__func_t
function_decl|)
parameter_list|(
name|svn_sqlite__context_t
modifier|*
name|sctx
parameter_list|,
name|int
name|argc
parameter_list|,
name|svn_sqlite__value_t
modifier|*
name|values
index|[]
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/* Step the given statement; if it returns SQLITE_DONE, reset the statement.    Otherwise, raise an SVN error.  */
name|svn_error_t
modifier|*
name|svn_sqlite__step_done
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|)
function_decl|;
comment|/* Step the given statement; raise an SVN error (and reset the    statement) if it doesn't return SQLITE_ROW. */
name|svn_error_t
modifier|*
name|svn_sqlite__step_row
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|)
function_decl|;
comment|/* Step the given statement; raise an SVN error (and reset the    statement) if it doesn't return SQLITE_DONE or SQLITE_ROW.  Set    *GOT_ROW to true iff it got SQLITE_ROW. */
name|svn_error_t
modifier|*
name|svn_sqlite__step
parameter_list|(
name|svn_boolean_t
modifier|*
name|got_row
parameter_list|,
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|)
function_decl|;
comment|/* Perform an insert as given by the prepared and bound STMT, and set    *ROW_ID to the id of the inserted row if ROW_ID is non-NULL.    STMT will be reset prior to returning. */
name|svn_error_t
modifier|*
name|svn_sqlite__insert
parameter_list|(
name|apr_int64_t
modifier|*
name|row_id
parameter_list|,
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|)
function_decl|;
comment|/* Perform an update/delete and then return the number of affected rows.    If AFFECTED_ROWS is not NULL, then set *AFFECTED_ROWS to the    number of rows changed.    STMT will be reset prior to returning. */
name|svn_error_t
modifier|*
name|svn_sqlite__update
parameter_list|(
name|int
modifier|*
name|affected_rows
parameter_list|,
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|)
function_decl|;
comment|/* Return in *VERSION the version of the schema in DB. Use SCRATCH_POOL    for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_sqlite__read_schema_version
parameter_list|(
name|int
modifier|*
name|version
parameter_list|,
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Open a connection in *DB to the database at PATH. Validate the schema,    creating/upgrading to LATEST_SCHEMA if needed using the instructions    in UPGRADE_SQL. The resulting DB is allocated in RESULT_POOL, and any    temporary allocations are made in SCRATCH_POOL.     STATEMENTS is an array of strings which may eventually be executed, the    last element of which should be NULL.  These strings and the array itself    are not duplicated internally, and should have a lifetime at least as long    as RESULT_POOL.    STATEMENTS itself may be NULL, in which case it has no impact.    See svn_sqlite__get_statement() for how these strings are used.     TIMEOUT defines the SQLite busy timeout, values<= 0 cause a Subversion    default to be used.     The statements will be finalized and the SQLite database will be closed    when RESULT_POOL is cleaned up. */
name|svn_error_t
modifier|*
name|svn_sqlite__open
parameter_list|(
name|svn_sqlite__db_t
modifier|*
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_sqlite__mode_t
name|mode
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
name|statements
index|[]
parameter_list|,
name|int
name|latest_schema
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|upgrade_sql
parameter_list|,
name|apr_int32_t
name|timeout
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Explicitly close the connection in DB. */
name|svn_error_t
modifier|*
name|svn_sqlite__close
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|)
function_decl|;
comment|/* Add a custom function to be used with this database connection.  The data    in BATON should live at least as long as the connection in DB.     Pass TRUE if the result of the function is constant within a statement with    a specific set of argument values and FALSE if not (or when in doubt). When    TRUE newer Sqlite versions use this knowledge for query optimizations. */
name|svn_error_t
modifier|*
name|svn_sqlite__create_scalar_function
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|func_name
parameter_list|,
name|int
name|argc
parameter_list|,
name|svn_boolean_t
name|deterministic
parameter_list|,
name|svn_sqlite__func_t
name|func
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/* Execute the (multiple) statements in the STATEMENTS[STMT_IDX] string.  */
name|svn_error_t
modifier|*
name|svn_sqlite__exec_statements
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|int
name|stmt_idx
parameter_list|)
function_decl|;
comment|/* Return the statement in *STMT which has been prepared from the    STATEMENTS[STMT_IDX] string, where STATEMENTS is the array that was    passed to svn_sqlite__open().  This statement is allocated in the same    pool as the DB, and will be cleaned up when DB is closed. */
name|svn_error_t
modifier|*
name|svn_sqlite__get_statement
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
modifier|*
name|stmt
parameter_list|,
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|int
name|stmt_idx
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------------     BINDING VALUES  */
comment|/* Bind values to SQL parameters in STMT, according to FMT.  FMT may contain:     Spec  Argument type             Item type    ----  -----------------         ---------    n<none, absent>            Column assignment skip    d     int                       Number    L     apr_int64_t               Number    i     apr_int64_t               Number (deprecated format spec)    s     const char *              String    b     const void *              Blob data          apr_size_t                Blob length    r     svn_revnum_t              Revision number    t     const svn_token_map_t *   Token mapping table          int                       Token value    Each character in FMT maps to one SQL parameter, and one or two function   parameters, in the order they appear. */
name|svn_error_t
modifier|*
name|svn_sqlite__bindf
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* Error-handling wrapper around sqlite3_bind_int. */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_int
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
comment|/* Error-handling wrapper around sqlite3_bind_int64. */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_int64
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
name|apr_int64_t
name|val
parameter_list|)
function_decl|;
comment|/* Error-handling wrapper around sqlite3_bind_text. VAL cannot contain    zero bytes; we always pass SQLITE_TRANSIENT. */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_text
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
specifier|const
name|char
modifier|*
name|val
parameter_list|)
function_decl|;
comment|/* Error-handling wrapper around sqlite3_bind_blob. */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_blob
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
specifier|const
name|void
modifier|*
name|val
parameter_list|,
name|apr_size_t
name|len
parameter_list|)
function_decl|;
comment|/* Look up VALUE in MAP, and bind the resulting token word at SLOT.  */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_token
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
specifier|const
name|svn_token_map_t
modifier|*
name|map
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
comment|/* Bind the value to SLOT, unless SVN_IS_VALID_REVNUM(value) is false,    in which case it binds NULL.  */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_revnum
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
name|svn_revnum_t
name|value
parameter_list|)
function_decl|;
comment|/* Bind a set of properties to the given slot. If PROPS is NULL, then no    binding will occur. PROPS will be stored as a serialized skel. */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_properties
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
specifier|const
name|apr_hash_t
modifier|*
name|props
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Bind a set of inherited properties to the given slot. If INHERITED_PROPS    is NULL, then no binding will occur. INHERITED_PROPS will be stored as a    serialized skel. */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_iprops
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|inherited_props
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Bind a checksum's value to the given slot. If CHECKSUM is NULL, then no    binding will occur. */
name|svn_error_t
modifier|*
name|svn_sqlite__bind_checksum
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|slot
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
name|checksum
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------------     FETCHING VALUES  */
comment|/* Wrapper around sqlite3_column_blob and sqlite3_column_bytes. The return    value will be NULL if the column is null.     If RESULT_POOL is not NULL, allocate the return value (if any) in it.    If RESULT_POOL is NULL, the return value will be valid until an    invocation of svn_sqlite__column_* performs a data type conversion (as    described in the SQLite documentation) or the statement is stepped or    reset or finalized. */
specifier|const
name|void
modifier|*
name|svn_sqlite__column_blob
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|,
name|apr_size_t
modifier|*
name|len
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Wrapper around sqlite3_column_text. If the column is null, then the    return value will be NULL.     If RESULT_POOL is not NULL, allocate the return value (if any) in it.    If RESULT_POOL is NULL, the return value will be valid until an    invocation of svn_sqlite__column_* performs a data type conversion (as    described in the SQLite documentation) or the statement is stepped or    reset or finalized. */
specifier|const
name|char
modifier|*
name|svn_sqlite__column_text
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Wrapper around sqlite3_column_int64. If the column is null, then the    return value will be SVN_INVALID_REVNUM. */
name|svn_revnum_t
name|svn_sqlite__column_revnum
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/* Wrapper around sqlite3_column_int64. If the column is null, then the    return value will be FALSE. */
name|svn_boolean_t
name|svn_sqlite__column_boolean
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/* Wrapper around sqlite3_column_int. If the column is null, then the    return value will be 0. */
name|int
name|svn_sqlite__column_int
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/* Wrapper around sqlite3_column_int64. If the column is null, then the    return value will be 0. */
name|apr_int64_t
name|svn_sqlite__column_int64
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/* Fetch the word at COLUMN, look it up in the MAP, and return its value.    MALFUNCTION is thrown if the column is null or contains an unknown word.  */
name|int
name|svn_sqlite__column_token
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|svn_token_map_t
modifier|*
name|map
parameter_list|)
function_decl|;
comment|/* Fetch the word at COLUMN, look it up in the MAP, and return its value.    Returns NULL_VAL if the column is null. MALFUNCTION is thrown if the    column contains an unknown word.  */
name|int
name|svn_sqlite__column_token_null
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|svn_token_map_t
modifier|*
name|map
parameter_list|,
name|int
name|null_val
parameter_list|)
function_decl|;
comment|/* Return the column as a hash of const char * => const svn_string_t *.    If the column is null, then set *PROPS to NULL. The    results will be allocated in RESULT_POOL, and any temporary allocations    will be made in SCRATCH_POOL. */
name|svn_error_t
modifier|*
name|svn_sqlite__column_properties
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Return the column as an array of depth-first ordered array of    svn_prop_inherited_item_t * structures.  If the column is null, then    set *IPROPS to NULL. The results will be allocated in RESULT_POOL,    and any temporary allocations will be made in SCRATCH_POOL. */
name|svn_error_t
modifier|*
name|svn_sqlite__column_iprops
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|iprops
parameter_list|,
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Return the column as a checksum. If the column is null, then NULL will    be stored into *CHECKSUM. The result will be allocated in RESULT_POOL. */
name|svn_error_t
modifier|*
name|svn_sqlite__column_checksum
parameter_list|(
specifier|const
name|svn_checksum_t
modifier|*
modifier|*
name|checksum
parameter_list|,
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Return TRUE if the result of selecting the column is null,    FALSE otherwise */
name|svn_boolean_t
name|svn_sqlite__column_is_null
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/* Return the number of bytes the column uses in a text or blob representation.    0 for NULL columns. */
name|int
name|svn_sqlite__column_bytes
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/* When Subversion is compiled in maintainer mode: enables the sqlite error    logging to SVN_DBG_OUTPUT. */
name|void
name|svn_sqlite__dbg_enable_errorlog
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* --------------------------------------------------------------------- */
define|#
directive|define
name|SVN_SQLITE__INTEGER
value|1
define|#
directive|define
name|SVN_SQLITE__FLOAT
value|2
define|#
directive|define
name|SVN_SQLITE__TEXT
value|3
define|#
directive|define
name|SVN_SQLITE__BLOB
value|4
define|#
directive|define
name|SVN_SQLITE__NULL
value|5
comment|/* */
name|int
name|svn_sqlite__value_type
parameter_list|(
name|svn_sqlite__value_t
modifier|*
name|val
parameter_list|)
function_decl|;
comment|/* */
specifier|const
name|char
modifier|*
name|svn_sqlite__value_text
parameter_list|(
name|svn_sqlite__value_t
modifier|*
name|val
parameter_list|)
function_decl|;
comment|/* --------------------------------------------------------------------- */
comment|/* */
name|void
name|svn_sqlite__result_null
parameter_list|(
name|svn_sqlite__context_t
modifier|*
name|sctx
parameter_list|)
function_decl|;
name|void
name|svn_sqlite__result_int64
parameter_list|(
name|svn_sqlite__context_t
modifier|*
name|sctx
parameter_list|,
name|apr_int64_t
name|val
parameter_list|)
function_decl|;
name|void
name|svn_sqlite__result_error
parameter_list|(
name|svn_sqlite__context_t
modifier|*
name|sctx
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
comment|/* --------------------------------------------------------------------- */
comment|/* Error-handling wrapper around sqlite3_finalize. */
name|svn_error_t
modifier|*
name|svn_sqlite__finalize
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|)
function_decl|;
comment|/* Reset STMT by calling sqlite3_reset(), and also clear any bindings to it.     Note: svn_sqlite__get_statement() calls this function automatically if    the requested statement has been used and has not yet been reset. */
name|svn_error_t
modifier|*
name|svn_sqlite__reset
parameter_list|(
name|svn_sqlite__stmt_t
modifier|*
name|stmt
parameter_list|)
function_decl|;
comment|/* Begin a transaction in DB. */
name|svn_error_t
modifier|*
name|svn_sqlite__begin_transaction
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|)
function_decl|;
comment|/* Like svn_sqlite__begin_transaction(), but takes out a 'RESERVED' lock    immediately, instead of using the default deferred locking scheme. */
name|svn_error_t
modifier|*
name|svn_sqlite__begin_immediate_transaction
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|)
function_decl|;
comment|/* Begin a savepoint in DB. */
name|svn_error_t
modifier|*
name|svn_sqlite__begin_savepoint
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|)
function_decl|;
comment|/* Commit the current transaction in DB if ERR is SVN_NO_ERROR, otherwise  * roll back the transaction.  Return a composition of ERR and any error  * that may occur during the commit or roll-back. */
name|svn_error_t
modifier|*
name|svn_sqlite__finish_transaction
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|svn_error_t
modifier|*
name|err
parameter_list|)
function_decl|;
comment|/* Release the current savepoint in DB if EXPR is SVN_NO_ERROR, otherwise  * roll back to the savepoint and then release it.  Return a composition of  * ERR and any error that may occur during the release or roll-back. */
name|svn_error_t
modifier|*
name|svn_sqlite__finish_savepoint
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|svn_error_t
modifier|*
name|err
parameter_list|)
function_decl|;
comment|/* Evaluate the expression EXPR within a transaction.  *  * Begin a transaction in DB; evaluate the expression EXPR, which would  * typically be a function call that does some work in DB; finally commit  * the transaction if EXPR evaluated to SVN_NO_ERROR, otherwise roll back  * the transaction.  */
define|#
directive|define
name|SVN_SQLITE__WITH_TXN
parameter_list|(
name|expr
parameter_list|,
name|db
parameter_list|)
define|\
value|do {                                                                        \     svn_sqlite__db_t *svn_sqlite__db = (db);                                  \     svn_error_t *svn_sqlite__err;                                             \                                                                               \     SVN_ERR(svn_sqlite__begin_transaction(svn_sqlite__db));                   \     svn_sqlite__err = (expr);                                                 \     SVN_ERR(svn_sqlite__finish_transaction(svn_sqlite__db, svn_sqlite__err)); \   } while (0)
comment|/* Callback function to for use with svn_sqlite__with_transaction(). */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_sqlite__transaction_callback_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Helper function to handle SQLite transactions.  All the work done inside    CB_FUNC will be wrapped in an SQLite transaction, which will be committed    if CB_FUNC does not return an error.  If any error is returned from CB_FUNC,    the transaction will be rolled back.  DB and CB_BATON will be passed to    CB_FUNC. SCRATCH_POOL will be passed to the callback (NULL is valid). */
name|svn_error_t
modifier|*
name|svn_sqlite__with_transaction
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|svn_sqlite__transaction_callback_t
name|cb_func
parameter_list|,
name|void
modifier|*
name|cb_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Like SVN_SQLITE__WITH_TXN(), but takes out a 'RESERVED' lock    immediately, instead of using the default deferred locking scheme. */
define|#
directive|define
name|SVN_SQLITE__WITH_IMMEDIATE_TXN
parameter_list|(
name|expr
parameter_list|,
name|db
parameter_list|)
define|\
value|do {                                                                        \     svn_sqlite__db_t *svn_sqlite__db = (db);                                  \     svn_error_t *svn_sqlite__err;                                             \                                                                               \     SVN_ERR(svn_sqlite__begin_immediate_transaction(svn_sqlite__db));         \     svn_sqlite__err = (expr);                                                 \     SVN_ERR(svn_sqlite__finish_transaction(svn_sqlite__db, svn_sqlite__err)); \   } while (0)
comment|/* Like svn_sqlite__with_transaction(), but takes out a 'RESERVED' lock    immediately, instead of using the default deferred locking scheme. */
name|svn_error_t
modifier|*
name|svn_sqlite__with_immediate_transaction
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|svn_sqlite__transaction_callback_t
name|cb_func
parameter_list|,
name|void
modifier|*
name|cb_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Evaluate the expression EXPR within a 'savepoint'.  Savepoints can be  * nested.  *  * Begin a savepoint in DB; evaluate the expression EXPR, which would  * typically be a function call that does some work in DB; finally release  * the savepoint if EXPR evaluated to SVN_NO_ERROR, otherwise roll back  * to the savepoint and then release it.  */
define|#
directive|define
name|SVN_SQLITE__WITH_LOCK
parameter_list|(
name|expr
parameter_list|,
name|db
parameter_list|)
define|\
value|do {                                                                        \     svn_sqlite__db_t *svn_sqlite__db = (db);                                  \     svn_error_t *svn_sqlite__err;                                             \                                                                               \     SVN_ERR(svn_sqlite__begin_savepoint(svn_sqlite__db));                     \     svn_sqlite__err = (expr);                                                 \     SVN_ERR(svn_sqlite__finish_savepoint(svn_sqlite__db, svn_sqlite__err));   \   } while (0)
comment|/* Evaluate the expression EXPR1..EXPR4 within a 'savepoint'.  Savepoints can  * be nested.  *  * Begin a savepoint in DB; evaluate the expression EXPR1, which would  * typically be a function call that does some work in DB; if no error occurred,  * run EXPR2; if no error occurred EXPR3; ... and finally release  * the savepoint if EXPR evaluated to SVN_NO_ERROR, otherwise roll back  * to the savepoint and then release it.  */
define|#
directive|define
name|SVN_SQLITE__WITH_LOCK4
parameter_list|(
name|expr1
parameter_list|,
name|expr2
parameter_list|,
name|expr3
parameter_list|,
name|expr4
parameter_list|,
name|db
parameter_list|)
define|\
value|do {                                                                        \     svn_sqlite__db_t *svn_sqlite__db = (db);                                  \     svn_error_t *svn_sqlite__err;                                             \                                                                               \     SVN_ERR(svn_sqlite__begin_savepoint(svn_sqlite__db));                     \     svn_sqlite__err = (expr1);                                                \     if (!svn_sqlite__err)                                                     \       svn_sqlite__err = (expr2);                                              \     if (!svn_sqlite__err)                                                     \       svn_sqlite__err = (expr3);                                              \     if (!svn_sqlite__err)                                                     \       svn_sqlite__err = (expr4);                                              \     SVN_ERR(svn_sqlite__finish_savepoint(svn_sqlite__db, svn_sqlite__err));   \   } while (0)
comment|/* Helper function to handle several SQLite operations inside a shared lock.    This callback is similar to svn_sqlite__with_transaction(), but can be    nested (even with a transaction).     Using this function as a wrapper around a group of operations can give a    *huge* performance boost as the shared-read lock will be shared over    multiple statements, instead of being reobtained every time, which may    require disk and/or network io, depending on SQLite's locking strategy.     SCRATCH_POOL will be passed to the callback (NULL is valid).     ### Since we now require SQLite>= 3.6.18, this function has the effect of        always behaving like a deferred transaction.  Can it be combined with        svn_sqlite__with_transaction()?  */
name|svn_error_t
modifier|*
name|svn_sqlite__with_lock
parameter_list|(
name|svn_sqlite__db_t
modifier|*
name|db
parameter_list|,
name|svn_sqlite__transaction_callback_t
name|cb_func
parameter_list|,
name|void
modifier|*
name|cb_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Hotcopy an SQLite database from SRC_PATH to DST_PATH. */
name|svn_error_t
modifier|*
name|svn_sqlite__hotcopy
parameter_list|(
specifier|const
name|char
modifier|*
name|src_path
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_path
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_SQLITE_H */
end_comment

end_unit

