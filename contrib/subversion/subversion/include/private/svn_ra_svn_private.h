begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_ra_svn_private.h  * @brief Functions used by the server - Internal routines  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_RA_SVN_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_RA_SVN_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|"svn_ra_svn.h"
end_include

begin_include
include|#
directive|include
file|"svn_editor.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/**  * Set the shim callbacks to be used by @a conn to @a shim_callbacks.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__set_shim_callbacks
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|svn_delta_shim_callbacks_t
modifier|*
name|shim_callbacks
parameter_list|)
function_decl|;
comment|/**  * Return the memory pool used to allocate @a conn.  */
name|apr_pool_t
modifier|*
name|svn_ra_svn__get_pool
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|)
function_decl|;
comment|/**  * @defgroup ra_svn_deprecated ra_svn low-level functions  * @{  */
comment|/** Write a number over the net.  *  * Writes will be buffered until the next read or flush.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_number
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_uint64_t
name|number
parameter_list|)
function_decl|;
comment|/** Write a string over the net.  *  * Writes will be buffered until the next read or flush.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_string
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/** Write a cstring over the net.  *  * Writes will be buffered until the next read or flush.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cstring
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/** Write a word over the net.  *  * Writes will be buffered until the next read or flush.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_word
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|word
parameter_list|)
function_decl|;
comment|/** Write a boolean over the net.  *  * Writes will be buffered until the next read or flush.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_boolean
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_boolean_t
name|value
parameter_list|)
function_decl|;
comment|/** Write a list of properties over the net.  @a props is allowed to be NULL,  * in which case an empty list will be written out.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_proplist
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_hash_t
modifier|*
name|props
parameter_list|)
function_decl|;
comment|/** Begin a list.  Writes will be buffered until the next read or flush. */
name|svn_error_t
modifier|*
name|svn_ra_svn__start_list
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** End a list.  Writes will be buffered until the next read or flush. */
name|svn_error_t
modifier|*
name|svn_ra_svn__end_list
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Flush the write buffer.  *  * Normally this shouldn't be necessary, since the write buffer is flushed  * when a read is attempted.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__flush
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Write a tuple, using a printf-like interface.  *  * The format string @a fmt may contain:  *  *@verbatim      Spec  Argument type         Item type      ----  --------------------  ---------      n     apr_uint64_t          Number      r     svn_revnum_t          Number      s     const svn_string_t *  String      c     const char *          String      w     const char *          Word      b     svn_boolean_t         Word ("true" or "false")      (                           Begin tuple      )                           End tuple      ?                           Remaining elements optional      ! (at beginning or end)     Suppress opening or closing of tuple   @endverbatim  *  * Inside the optional part of a tuple, 'r' values may be @c  * SVN_INVALID_REVNUM, 'n' values may be  * SVN_RA_SVN_UNSPECIFIED_NUMBER, and 's', 'c', and 'w' values may be  * @c NULL; in these cases no data will be written.  'b' and '(' may  * not appear in the optional part of a tuple.  Either all or none of  * the optional values should be valid.  *  * (If we ever have a need for an optional boolean value, we should  * invent a 'B' specifier which stores a boolean into an int, using -1  * for unspecified.  Right now there is no need for such a thing.)  *  * Use the '!' format specifier to write partial tuples when you have  * to transmit an array or other unusual data.  For example, to write  * a tuple containing a revision, an array of words, and a boolean:  * @code      SVN_ERR(svn_ra_svn_write_tuple(conn, pool, "r(!", rev));      for (i = 0; i< n; i++)        SVN_ERR(svn_ra_svn_write_word(conn, pool, words[i]));      SVN_ERR(svn_ra_svn_write_tuple(conn, pool, "!)b", flag)); @endcode  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_tuple
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Read an item from the network into @a *item. */
name|svn_error_t
modifier|*
name|svn_ra_svn__read_item
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_ra_svn_item_t
modifier|*
modifier|*
name|item
parameter_list|)
function_decl|;
comment|/** Scan data on @a conn until we find something which looks like the  * beginning of an svn server greeting (an open paren followed by a  * whitespace character).  This function is appropriate for beginning  * a client connection opened in tunnel mode, since people's dotfiles  * sometimes write output to stdout.  It may only be called at the  * beginning of a client connection.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__skip_leading_garbage
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Parse an array of @c svn_sort__item_t structures as a tuple, using a  * printf-like interface.  The format string @a fmt may contain:  *  *@verbatim      Spec  Argument type          Item type      ----  --------------------   ---------      n     apr_uint64_t *         Number      r     svn_revnum_t *         Number      s     svn_string_t **        String      c     const char **          String      w     const char **          Word      b     svn_boolean_t *        Word ("true" or "false")      B     apr_uint64_t *         Word ("true" or "false")      3     svn_tristate_t *       Word ("true" or "false")      l     apr_array_header_t **  List      (                            Begin tuple      )                            End tuple      ?                            Tuple is allowed to end here   @endverbatim  *  * Note that a tuple is only allowed to end precisely at a '?', or at  * the end of the specification.  So if @a fmt is "c?cc" and @a list  * contains two elements, an error will result.  *  * '3' is similar to 'b', but may be used in the optional tuple specification.  * It returns #svn_tristate_true, #svn_tristate_false or #svn_tristate_unknown.  *  * 'B' is similar to '3', but it returns @c TRUE, @c FALSE, or  * #SVN_RA_SVN_UNSPECIFIED_NUMBER.  'B' is deprecated; new code should  * use '3' instead.  *  * If an optional part of a tuple contains no data, 'r' values will be  * set to @c SVN_INVALID_REVNUM; 'n' and 'B' values will be set to  * #SVN_RA_SVN_UNSPECIFIED_NUMBER; 's', 'c', 'w', and 'l' values  * will be set to @c NULL; and '3' values will be set to #svn_tristate_unknown  * 'b' may not appear inside an optional tuple specification; use '3' instead.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__parse_tuple
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|list
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Read a tuple from the network and parse it as a tuple, using the  * format string notation from svn_ra_svn_parse_tuple().  */
name|svn_error_t
modifier|*
name|svn_ra_svn__read_tuple
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Parse an array of @c svn_ra_svn_item_t structures as a list of  * properties, storing the properties in a hash table.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__parse_proplist
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|list
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|)
function_decl|;
comment|/** Read a command response from the network and parse it as a tuple, using  * the format string notation from svn_ra_svn_parse_tuple().  */
name|svn_error_t
modifier|*
name|svn_ra_svn__read_cmd_response
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Check the receive buffer and socket of @a conn whether there is some  * unprocessed incoming data without waiting for new data to come in.  * If data is found, set @a *has_command to TRUE.  If the connection does  * not contain any more data and has been closed, set @a *terminated to  * TRUE.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__has_command
parameter_list|(
name|svn_boolean_t
modifier|*
name|has_command
parameter_list|,
name|svn_boolean_t
modifier|*
name|terminated
parameter_list|,
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Accept a single command from @a conn and handle them according  * to @a cmd_hash.  Command handlers will be passed @a conn, @a pool,  * the parameters of the command, and @a baton.  @a *terminate will be  * set if either @a error_on_disconnect is FALSE and the connection got  * closed, or if the command being handled has the "terminate" flag set  * in the command table.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__handle_command
parameter_list|(
name|svn_boolean_t
modifier|*
name|terminate
parameter_list|,
name|apr_hash_t
modifier|*
name|cmd_hash
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|svn_boolean_t
name|error_on_disconnect
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Accept commands over the network and handle them according to @a  * commands.  Command handlers will be passed @a conn, a subpool of @a  * pool (cleared after each command is handled), the parameters of the  * command, and @a baton.  Commands will be accepted until a  * terminating command is received (a command with "terminate" set in  * the command table).  If a command handler returns an error wrapped  * in SVN_RA_SVN_CMD_ERR (see the @c SVN_CMD_ERR macro), the error  * will be reported to the other side of the connection and the  * command loop will continue; any other kind of error (typically a  * network or protocol error) is passed through to the caller.  *  * @since New in 1.6.  *  */
name|svn_error_t
modifier|*
name|svn_ra_svn__handle_commands2
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_ra_svn_cmd_entry_t
modifier|*
name|commands
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|svn_boolean_t
name|error_on_disconnect
parameter_list|)
function_decl|;
comment|/** Write a successful command response over the network, using the  * same format string notation as svn_ra_svn_write_tuple().  Do not use  * partial tuples with this function; if you need to use partial  * tuples, just write out the "success" and argument tuple by hand.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_response
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/** Write an unsuccessful command response over the network.  *  * @note This does not clear @a err. */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_failure
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|svn_error_t
modifier|*
name|err
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup svn_commands sending ra_svn commands  * @{  */
comment|/** Sets the target revision of connection @a conn to @a rev.  Use @a pool  * for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_target_rev
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|)
function_decl|;
comment|/** Send a "open-root" command over connection @a conn.  Open the  * repository root at revision @a rev and associate it with @a token.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_open_root
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|)
function_decl|;
comment|/** Send a "delete-entry" command over connection @a conn.  Delete the  * @a path at optional revision @a rev below @a parent_token.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_delete_entry
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_token
parameter_list|)
function_decl|;
comment|/** Send a "add-dir" command over connection @a conn.  Add a new directory  * node named @a path under the directory identified by @a parent_token.  * Associate the new directory with the given @a token.  * @a copy_path  * and @a copy_rev are optional and describe the copy source.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_add_dir
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_token
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|copy_path
parameter_list|,
name|svn_revnum_t
name|copy_rev
parameter_list|)
function_decl|;
comment|/** Send a "open-dir" command over connection @a conn.  Associate to  * @a token the directory node named @a path under the directory  * identified by @a parent_token in revision @a rev.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_open_dir
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_token
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|)
function_decl|;
comment|/** Send a "change-dir-prop" command over connection @a conn.  Set the  * property @a name to the optional @a value on the directory identified  * to @a token.  Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_change_dir_prop
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Send a "close-dir" command over connection @a conn.  Identify the node  * to close with @a token.  The latter will then no longer be associated  * with that node.  Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_close_dir
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|)
function_decl|;
comment|/** Send a "absent-dir" command over connection @a conn.  Directory node  * named @a path under the directory identified by @a parent_token is  * absent.  Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_absent_dir
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_token
parameter_list|)
function_decl|;
comment|/** Send a "add-file" command over connection @a conn.  Add a new file  * node named @a path under the directory identified by @a parent_token.  * Associate the new file with the given @a token.  * @a copy_path and  * @a copy_rev are optional and describe the copy source.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_add_file
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_token
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|copy_path
parameter_list|,
name|svn_revnum_t
name|copy_rev
parameter_list|)
function_decl|;
comment|/** Send a "open-file" command over connection @a conn.  Associate to  * @a token the file node named @a path under the directory identified by  * @a parent_token in revision @a rev.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_open_file
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_token
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|)
function_decl|;
comment|/** Send a "change-file-prop" command over connection @a conn.  Set the  * property @a name to the optional @a value on the file identified to  * @a token.  Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_change_file_prop
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Send a "close-dir" command over connection @a conn.  Identify the node  * to close with @a token and provide an optional @a check_sum.  The token  * will then no longer be associated with that node.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_close_file
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|text_checksum
parameter_list|)
function_decl|;
comment|/** Send a "absent-file" command over connection @a conn.  File node  * named @a path in the directory identified by @a parent_token is  * absent.  Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_absent_file
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_token
parameter_list|)
function_decl|;
comment|/** Send a "apply-textdelta" command over connection @a conn.  Starts a  * series of text deltas to be applied to the file identified by @a token.  * Optionally, specify the file's current checksum in @a base_checksum.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_apply_textdelta
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|base_checksum
parameter_list|)
function_decl|;
comment|/** Send a "textdelta-chunk" command over connection @a conn.  Apply  * textdelta @a chunk to the file identified by @a token.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_textdelta_chunk
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|chunk
parameter_list|)
function_decl|;
comment|/** Send a "textdelta-end" command over connection @a conn.  Ends the  * series of text deltas to be applied to the file identified by @a token.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_textdelta_end
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|)
function_decl|;
comment|/** Send a "close-edit" command over connection @a conn.  Ends the editor  * drive (successfully).  Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_close_edit
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Send a "abort-edit" command over connection @a conn.  Prematurely ends  * the editor drive, e.g. due to some problem on the other side.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_abort_edit
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Send a "set-path" command over connection @a conn.  * Use @a pool for allocations.  *  * @see set_path() in #svn_ra_reporter3_t for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_set_path
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_token
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|)
function_decl|;
comment|/** Send a "delete-path" command over connection @a conn.  * Use @a pool for allocations.  *  * @see delete_path() in #svn_ra_reporter3_t for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_delete_path
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/** Send a "link-path" command over connection @a conn.  * Use @a pool for allocations.  *  * @see link_path() in #svn_ra_reporter3_t for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_link_path
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|svn_boolean_t
name|start_empty
parameter_list|,
specifier|const
name|char
modifier|*
name|lock_token
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|)
function_decl|;
comment|/** Send a "finish-report" command over connection @a conn.  * Use @a pool for allocations.  *  * @see finish_report() in #svn_ra_reporter3_t for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_finish_report
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Send a "abort-report" command over connection @a conn.  * Use @a pool for allocations.  *  * @see abort_report() in #svn_ra_reporter3_t for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_abort_report
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Send a "reparent" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_reparent for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_reparent
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|)
function_decl|;
comment|/** Send a "get-latest-rev" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_latest_revnum for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_latest_rev
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Send a "get-dated-rev" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_dated_revision for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_dated_rev
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_time_t
name|tm
parameter_list|)
function_decl|;
comment|/** Send a "change-rev-prop2" command over connection @a conn.  * Use @a pool for allocations.  *  * If @a dont_care is false then check that the old value matches  * @a old_value. If @a dont_care is true then do not check the old  * value; in this case @a old_value must be NULL.  *  * @see #svn_ra_change_rev_prop2 for the rest of the description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_change_rev_prop2
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|svn_boolean_t
name|dont_care
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|old_value
parameter_list|)
function_decl|;
comment|/** Send a "change-rev-prop" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_change_rev_prop for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_change_rev_prop
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Send a "rev-proplist" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_rev_proplist for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_rev_proplist
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|)
function_decl|;
comment|/** Send a "rev-prop" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_rev_prop for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_rev_prop
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/** Send a "get-file" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_file for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_file
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|svn_boolean_t
name|props
parameter_list|,
name|svn_boolean_t
name|stream
parameter_list|)
function_decl|;
comment|/** Send a "update" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_do_update3 for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_update
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|send_copyfrom_args
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|)
function_decl|;
comment|/** Send a "switch" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_do_switch3 for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_switch
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
specifier|const
name|char
modifier|*
name|switch_url
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|send_copyfrom_args
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|)
function_decl|;
comment|/** Send a "status" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_do_status2 for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_status
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|)
function_decl|;
comment|/** Send a "diff" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_do_diff3 for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_diff
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|svn_boolean_t
name|recurse
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
specifier|const
name|char
modifier|*
name|versus_url
parameter_list|,
name|svn_boolean_t
name|text_deltas
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|)
function_decl|;
comment|/** Send a "check-path" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_check_path for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_check_path
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|)
function_decl|;
comment|/** Send a "stat" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_stat for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_stat
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|)
function_decl|;
comment|/** Send a "get-file-revs" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_file_revs2 for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_file_revs
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_boolean_t
name|include_merged_revisions
parameter_list|)
function_decl|;
comment|/** Send a "lock" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_lock for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_lock
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|comment
parameter_list|,
name|svn_boolean_t
name|steal_lock
parameter_list|,
name|svn_revnum_t
name|revnum
parameter_list|)
function_decl|;
comment|/** Send a "unlock" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_unlock for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_unlock
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
name|svn_boolean_t
name|break_lock
parameter_list|)
function_decl|;
comment|/** Send a "get-lock" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_lock for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_lock
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/** Send a "get-locks" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_locks2 for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_locks
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|)
function_decl|;
comment|/** Send a "replay" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_replay for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_replay
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|svn_revnum_t
name|low_water_mark
parameter_list|,
name|svn_boolean_t
name|send_deltas
parameter_list|)
function_decl|;
comment|/** Send a "replay-range" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_replay_range for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_replay_range
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|start_revision
parameter_list|,
name|svn_revnum_t
name|end_revision
parameter_list|,
name|svn_revnum_t
name|low_water_mark
parameter_list|,
name|svn_boolean_t
name|send_deltas
parameter_list|)
function_decl|;
comment|/** Send a "get-deleted-rev" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_deleted_rev for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_deleted_rev
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|peg_revision
parameter_list|,
name|svn_revnum_t
name|end_revision
parameter_list|)
function_decl|;
comment|/** Send a "get-iprops" command over connection @a conn.  * Use @a pool for allocations.  *  * @see #svn_ra_get_inherited_props for a description.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_get_iprops
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|)
function_decl|;
comment|/** Send a "finish-replay" command over connection @a conn.  * Use @a pool for allocations.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_cmd_finish_replay
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup svn_send_data sending data structures over ra_svn  * @{  */
comment|/** Send a changed path (as part of transmitting a log entry) over connection  * @a conn.  Use @a pool for allocations.  *  * @see svn_log_changed_path2_t for a description of the other parameters.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_data_log_changed_path
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|char
name|action
parameter_list|,
specifier|const
name|char
modifier|*
name|copyfrom_path
parameter_list|,
name|svn_revnum_t
name|copyfrom_rev
parameter_list|,
name|svn_node_kind_t
name|node_kind
parameter_list|,
name|svn_boolean_t
name|text_modified
parameter_list|,
name|svn_boolean_t
name|props_modified
parameter_list|)
function_decl|;
comment|/** Send a the details of a log entry (as part of transmitting a log entry  * and without revprops and changed paths) over connection @a conn.  * Use @a pool for allocations.  *  * @a author, @a date and @a message have been extracted and removed from  * the revprops to follow.  @a has_children is taken directly from the  * #svn_log_entry_t struct.  @a revision is too, except when it equals  * #SVN_INVALID_REVNUM.  In that case, @a revision must be 0 and  * @a invalid_revnum be set to TRUE.  @a revprop_count is the number of  * revprops that will follow in the revprops list.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__write_data_log_entry
parameter_list|(
name|svn_ra_svn_conn_t
modifier|*
name|conn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|author
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|date
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|message
parameter_list|,
name|svn_boolean_t
name|has_children
parameter_list|,
name|svn_boolean_t
name|invalid_revnum
parameter_list|,
name|unsigned
name|revprop_count
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup svn_read_data reading data structures from ra_svn  * @{  */
comment|/** Take the data tuple ITEMS received over ra_svn and convert it to the  * a changed path (as part of receiving a log entry).  *  * @see svn_log_changed_path2_t for a description of the output parameters.  */
name|svn_error_t
modifier|*
name|svn_ra_svn__read_data_log_changed_entry
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|items
parameter_list|,
name|svn_string_t
modifier|*
modifier|*
name|cpath
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|action
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|copy_path
parameter_list|,
name|svn_revnum_t
modifier|*
name|copy_rev
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|kind_str
parameter_list|,
name|apr_uint64_t
modifier|*
name|text_mods
parameter_list|,
name|apr_uint64_t
modifier|*
name|prop_mods
parameter_list|)
function_decl|;
comment|/**  * @}  */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_RA_SVN_PRIVATE_H */
end_comment

end_unit

