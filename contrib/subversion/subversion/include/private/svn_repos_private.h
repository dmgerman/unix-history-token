begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_repos_private.h  * @brief Subversion-internal repos APIs.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_REPOS_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_REPOS_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_repos.h"
end_include

begin_include
include|#
directive|include
file|"svn_editor.h"
end_include

begin_include
include|#
directive|include
file|"svn_config.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_string_private.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/** Validate that property @a name with @a value is valid (as an addition  * or edit or deletion) in a Subversion repository.  Return an error if not.  *  * If @a value is NULL, return #SVN_NO_ERROR to indicate that any property  * may be deleted, even an invalid one.  Otherwise, if the @a name is not  * of kind #svn_prop_regular_kind (see #svn_prop_kind_t), return  * #SVN_ERR_REPOS_BAD_ARGS.  Otherwise, for some "svn:" properties, also  * perform some validations on the @a value (e.g., for such properties,  * typically the @a value must be in UTF-8 with LF linefeeds), and return  * #SVN_ERR_BAD_PROPERTY_VALUE if it is not valid.  *  * Validations may be added in future releases, for example, for  * newly-added #SVN_PROP_PREFIX properties.  However, user-defined  * (non-#SVN_PROP_PREFIX) properties will never have their @a value  * validated in any way.  *  * Use @a pool for temporary allocations.  *  * @note This function is used to implement server-side validation.  * Consequently, if you make this function stricter in what it accepts, you  * (a) break svnsync'ing of existing repositories that contain now-invalid  * properties, (b) do not preclude such invalid values from entering the  * repository via tools that use the svn_fs_* API directly (possibly  * including svnadmin and svnlook).  This has happened before and there  * are known (documented, but unsupported) upgrade paths in some cases.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_repos__validate_prop
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Given the error @a err from svn_repos_fs_commit_txn(), return an  * string containing either or both of the svn_fs_commit_txn() error  * and the SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED wrapped error from  * the post-commit hook.  Any error tracing placeholders in the error  * chain are skipped over.  *  * This function does not modify @a err.  *  * ### This method should not be necessary, but there are a few  * ### places, e.g. mod_dav_svn, where only a single error message  * ### string is returned to the caller and it is useful to have both  * ### error messages included in the message.  *  * Use @a pool to do any allocations in.  *  * @since New in 1.7.  */
specifier|const
name|char
modifier|*
name|svn_repos__post_commit_error_str
parameter_list|(
name|svn_error_t
modifier|*
name|err
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* A repos version of svn_fs_type */
name|svn_error_t
modifier|*
name|svn_repos__fs_type
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|fs_type
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Create a commit editor for REPOS, based on REVISION.  */
name|svn_error_t
modifier|*
name|svn_repos__get_commit_ev2
parameter_list|(
name|svn_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|svn_authz_t
modifier|*
name|authz
parameter_list|,
specifier|const
name|char
modifier|*
name|authz_repos_name
parameter_list|,
specifier|const
name|char
modifier|*
name|authz_user
parameter_list|,
name|apr_hash_t
modifier|*
name|revprops
parameter_list|,
name|svn_commit_callback2_t
name|commit_cb
parameter_list|,
name|void
modifier|*
name|commit_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_repos__replay_ev2
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|base_dir
parameter_list|,
name|svn_revnum_t
name|low_water_mark
parameter_list|,
name|svn_editor_t
modifier|*
name|editor
parameter_list|,
name|svn_repos_authz_func_t
name|authz_read_func
parameter_list|,
name|void
modifier|*
name|authz_read_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Given a PATH which might be a relative repo URL (^/), an absolute  * local repo URL (file://), an absolute path outside of the repo  * or a location in the Windows registry.  *  * Retrieve the configuration data that PATH points at and parse it into  * CFG_P allocated in POOL.  *  * If PATH cannot be parsed as a config file then an error is returned.  The  * contents of CFG_P is then undefined.  If MUST_EXIST is TRUE, a missing  * authz file is also an error.  The CASE_SENSITIVE controls the lookup  * behavior for section and option names alike.  *  * REPOS_ROOT points at the root of the repos you are  * going to apply the authz against, can be NULL if you are sure that you  * don't have a repos relative URL in PATH. */
name|svn_error_t
modifier|*
name|svn_repos__retrieve_config
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfg_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|svn_boolean_t
name|case_sensitive
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * @defgroup svn_config_pool Configuration object pool API  * @{  */
comment|/* Opaque thread-safe factory and container for configuration objects.  *  * Instances handed out are read-only and may be given to multiple callers  * from multiple threads.  Configuration objects no longer referenced by  * any user may linger for a while before being cleaned up.  */
typedef|typedef
name|struct
name|svn_repos__config_pool_t
name|svn_repos__config_pool_t
typedef|;
comment|/* Create a new configuration pool object with a lifetime determined by  * POOL and return it in *CONFIG_POOL.  *  * The THREAD_SAFE flag indicates whether the pool actually needs to be  * thread-safe and POOL must be also be thread-safe if this flag is set.  */
name|svn_error_t
modifier|*
name|svn_repos__config_pool_create
parameter_list|(
name|svn_repos__config_pool_t
modifier|*
modifier|*
name|config_pool
parameter_list|,
name|svn_boolean_t
name|thread_safe
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Set *CFG to a read-only reference to the current contents of the  * configuration specified by PATH.  If the latter is a URL, we read the  * data from a local repository.  CONFIG_POOL will store the configuration  * and make further callers use the same instance if the content matches.  * If KEY is not NULL, *KEY will be set to a unique ID - if available.  *  * If MUST_EXIST is TRUE, a missing config file is also an error, *CFG  * is otherwise simply NULL.  The CASE_SENSITIVE controls the lookup  * behavior for section and option names alike.  *  * PREFERRED_REPOS is only used if it is not NULL and PATH is a URL.  * If it matches the URL, access the repository through this object  * instead of creating a new repo instance.  Note that this might not  * return the latest content.  *  * POOL determines the minimum lifetime of *CFG (may remain cached after  * release) but must not exceed the lifetime of the pool provided to  * #svn_repos__config_pool_create.  */
name|svn_error_t
modifier|*
name|svn_repos__config_pool_get
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfg
parameter_list|,
name|svn_membuf_t
modifier|*
modifier|*
name|key
parameter_list|,
name|svn_repos__config_pool_t
modifier|*
name|config_pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|svn_boolean_t
name|case_sensitive
parameter_list|,
name|svn_repos_t
modifier|*
name|preferred_repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @} */
comment|/**  * @defgroup svn_authz_pool Authz object pool API  * @{  */
comment|/* Opaque thread-safe factory and container for authorization objects.  *  * Instances handed out are read-only and may be given to multiple callers  * from multiple threads.  Authorization objects no longer referenced by  * any user may linger for a while before being cleaned up.  */
typedef|typedef
name|struct
name|svn_repos__authz_pool_t
name|svn_repos__authz_pool_t
typedef|;
comment|/* Create a new authorization pool object with a lifetime determined by  * POOL and return it in *AUTHZ_POOL.  CONFIG_POOL will be the common  * source for the configuration data underlying the authz objects and must  * remain valid at least until POOL cleanup.  *  * The THREAD_SAFE flag indicates whether the pool actually needs to be  * thread-safe and POOL must be also be thread-safe if this flag is set.  */
name|svn_error_t
modifier|*
name|svn_repos__authz_pool_create
parameter_list|(
name|svn_repos__authz_pool_t
modifier|*
modifier|*
name|authz_pool
parameter_list|,
name|svn_repos__config_pool_t
modifier|*
name|config_pool
parameter_list|,
name|svn_boolean_t
name|thread_safe
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Set *AUTHZ_P to a read-only reference to the current contents of the  * authorization specified by PATH and GROUPS_PATH.  If these are URLs,  * we read the data from a local repository (see #svn_repos_authz_read2).  * AUTHZ_POOL will store the authz data and make further callers use the  * same instance if the content matches.  *  * If MUST_EXIST is TRUE, a missing config file is also an error, *AUTHZ_P  * is otherwise simply NULL.  *  * PREFERRED_REPOS is only used if it is not NULL and PATH is a URL.  * If it matches the URL, access the repository through this object  * instead of creating a new repo instance.  Note that this might not  * return the latest content.  *  * POOL determines the minimum lifetime of *AUTHZ_P (may remain cached  * after release) but must not exceed the lifetime of the pool provided to  * svn_repos__authz_pool_create.  */
name|svn_error_t
modifier|*
name|svn_repos__authz_pool_get
parameter_list|(
name|svn_authz_t
modifier|*
modifier|*
name|authz_p
parameter_list|,
name|svn_repos__authz_pool_t
modifier|*
name|authz_pool
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|groups_path
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|svn_repos_t
modifier|*
name|preferred_repos
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @} */
comment|/* Adjust mergeinfo paths and revisions in ways that are useful when loading  * a dump stream.  *  * Set *NEW_VALUE_P to an adjusted version of the mergeinfo property value  * supplied in OLD_VALUE, with the following adjustments.  *  *   - Normalize line endings: if all CRLF, change to LF; but error if  *     mixed. If this normalization is performed, send a notification type  *     svn_repos_notify_load_normalized_mergeinfo to NOTIFY_FUNC/NOTIFY_BATON.  *  *   - Prefix all the merge source paths with PARENT_DIR, if not null.  *  *   - Adjust any mergeinfo revisions not older than OLDEST_DUMPSTREAM_REV  *     by using REV_MAP which maps (svn_revnum_t) old rev to (svn_revnum_t)  *     new rev.  *  *   - Adjust any mergeinfo revisions older than OLDEST_DUMPSTREAM_REV by  *     (-OLDER_REVS_OFFSET), dropping any revisions that become<= 0.  *  * Allocate *NEW_VALUE_P in RESULT_POOL.  */
name|svn_error_t
modifier|*
name|svn_repos__adjust_mergeinfo_property
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|new_value_p
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|old_value
parameter_list|,
specifier|const
name|char
modifier|*
name|parent_dir
parameter_list|,
name|apr_hash_t
modifier|*
name|rev_map
parameter_list|,
name|svn_revnum_t
name|oldest_dumpstream_rev
parameter_list|,
name|apr_int32_t
name|older_revs_offset
parameter_list|,
name|svn_repos_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* A (nearly) opaque representation of an ordered list of header lines.  */
typedef|typedef
name|struct
name|apr_array_header_t
name|svn_repos__dumpfile_headers_t
typedef|;
comment|/* Create an empty set of headers.  */
name|svn_repos__dumpfile_headers_t
modifier|*
name|svn_repos__dumpfile_headers_create
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Push the header (KEY, VAL) onto HEADERS.  *  * Duplicate the key and value into HEADERS's pool.  */
name|void
name|svn_repos__dumpfile_header_push
parameter_list|(
name|svn_repos__dumpfile_headers_t
modifier|*
name|headers
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|val
parameter_list|)
function_decl|;
comment|/* Push the header (KEY, val = VAL_FMT ...) onto HEADERS.  *  * Duplicate the key and value into HEADERS's pool.  */
name|void
name|svn_repos__dumpfile_header_pushf
parameter_list|(
name|svn_repos__dumpfile_headers_t
modifier|*
name|headers
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|val_fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|3
operator|,
function_decl|4
block|)
end_extern

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* Write to STREAM the headers in HEADERS followed by a blank line.  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_repos__dump_headers
parameter_list|(
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
name|svn_repos__dumpfile_headers_t
modifier|*
name|headers
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Write a revision record to DUMP_STREAM for revision REVISION with revision  * properies REVPROPS, creating appropriate headers.  *  * Include all of the headers in EXTRA_HEADERS (if non-null), ignoring  * the revision number header and the three content length headers (which  * will be recreated as needed). EXTRA_HEADERS maps (char *) key to  * (char *) value.  *  * REVPROPS maps (char *) key to (svn_string_t *) value.  *  * Iff PROPS_SECTION_ALWAYS is true, include a prop content section (and  * corresponding header) even when REVPROPS is empty. This option exists  * to support a historical difference between svndumpfilter and svnadmin  * dump.  *  * Finally write another blank line.  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_repos__dump_revision_record
parameter_list|(
name|svn_stream_t
modifier|*
name|dump_stream
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|apr_hash_t
modifier|*
name|extra_headers
parameter_list|,
name|apr_hash_t
modifier|*
name|revprops
parameter_list|,
name|svn_boolean_t
name|props_section_always
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Output node headers and props.  *  * Output HEADERS, content length headers, blank line, and  * then PROPS_STR (if non-null) to DUMP_STREAM.  *  * HEADERS is an array of headers as struct {const char *key, *val;}.  * Write them all in the given order.  *  * PROPS_STR is the property content block, including a terminating  * 'PROPS_END\n' line. Iff PROPS_STR is non-null, write a  * Prop-content-length header and the prop content block.  *  * Iff HAS_TEXT is true, write a Text-content length, using the value  * TEXT_CONTENT_LENGTH.  *  * Write a Content-length header, its value being the sum of the  * Prop- and Text- content length headers, if props and/or text are present  * or if CONTENT_LENGTH_ALWAYS is true.  */
end_comment

begin_function_decl
name|svn_error_t
modifier|*
name|svn_repos__dump_node_record
parameter_list|(
name|svn_stream_t
modifier|*
name|dump_stream
parameter_list|,
name|svn_repos__dumpfile_headers_t
modifier|*
name|headers
parameter_list|,
name|svn_stringbuf_t
modifier|*
name|props_str
parameter_list|,
name|svn_boolean_t
name|has_text
parameter_list|,
name|svn_filesize_t
name|text_content_length
parameter_list|,
name|svn_boolean_t
name|content_length_always
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_REPOS_PRIVATE_H */
end_comment

end_unit

