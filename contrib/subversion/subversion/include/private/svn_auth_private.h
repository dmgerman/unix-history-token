begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_auth_private.h  * @brief Subversion's authentication system - Internal routines  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_AUTH_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_AUTH_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_error.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/** SSL server authority verification credential type.  *  * The followin auth parameters are available to the providers:  *  * - @c SVN_AUTH_PARAM_SSL_SERVER_FAILURES (@c apr_uint32_t*)  * - @c SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO  *      (@c svn_auth_ssl_server_cert_info_t*)  *  * The following optional auth parameters are relevant to the providers:  *  * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)  *  * @since New in 1.9.  */
define|#
directive|define
name|SVN_AUTH_CRED_SSL_SERVER_AUTHORITY
value|"svn.ssl.server.authority"
comment|/* If you add a password type for a provider which stores  * passwords on disk in encrypted form, remember to update  * svn_auth__simple_save_creds_helper. Otherwise it will be  * assumed that your provider stores passwords in plaintext. */
define|#
directive|define
name|SVN_AUTH__SIMPLE_PASSWORD_TYPE
value|"simple"
define|#
directive|define
name|SVN_AUTH__WINCRYPT_PASSWORD_TYPE
value|"wincrypt"
define|#
directive|define
name|SVN_AUTH__KEYCHAIN_PASSWORD_TYPE
value|"keychain"
define|#
directive|define
name|SVN_AUTH__KWALLET_PASSWORD_TYPE
value|"kwallet"
define|#
directive|define
name|SVN_AUTH__GNOME_KEYRING_PASSWORD_TYPE
value|"gnome-keyring"
define|#
directive|define
name|SVN_AUTH__GPG_AGENT_PASSWORD_TYPE
value|"gpg-agent"
comment|/* A function that stores in *PASSWORD (potentially after decrypting it)    the user's password.  It might be obtained directly from CREDS, or    from an external store, using REALMSTRING and USERNAME as keys.    (The behavior is undefined if REALMSTRING or USERNAME are NULL.)    If NON_INTERACTIVE is set, the user must not be involved in the    retrieval process.  Set *DONE to TRUE if a password was stored    in *PASSWORD, to FALSE otherwise. POOL is used for any necessary    allocation. */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_auth__password_get_t
function_decl|)
parameter_list|(
name|svn_boolean_t
modifier|*
name|done
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|password
parameter_list|,
name|apr_hash_t
modifier|*
name|creds
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
name|svn_boolean_t
name|non_interactive
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* A function that stores PASSWORD (or some encrypted version thereof)    either directly in CREDS, or externally using REALMSTRING and USERNAME    as keys into the external store.  If NON_INTERACTIVE is set, the user    must not be involved in the storage process. Set *DONE to TRUE if the    password was store, to FALSE otherwise. POOL is used for any necessary    allocation. */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_auth__password_set_t
function_decl|)
parameter_list|(
name|svn_boolean_t
modifier|*
name|done
parameter_list|,
name|apr_hash_t
modifier|*
name|creds
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
specifier|const
name|char
modifier|*
name|password
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
name|svn_boolean_t
name|non_interactive
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Use PARAMETERS and REALMSTRING to set *CREDENTIALS to a set of    pre-cached authentication credentials pulled from the simple    credential cache store identified by PASSTYPE.  PASSWORD_GET is    used to obtain the password value.  Allocate *CREDENTIALS from    POOL.     NOTE:  This function is a common implementation of code used by    several of the simple credential providers (the default disk cache    mechanism, Windows CryptoAPI, GNOME Keyring, etc.), typically in    their "first_creds" implementation.  */
name|svn_error_t
modifier|*
name|svn_auth__simple_creds_cache_get
parameter_list|(
name|void
modifier|*
modifier|*
name|credentials
parameter_list|,
name|void
modifier|*
modifier|*
name|iter_baton
parameter_list|,
name|void
modifier|*
name|provider_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
name|svn_auth__password_get_t
name|password_get
parameter_list|,
specifier|const
name|char
modifier|*
name|passtype
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Use PARAMETERS and REALMSTRING to save CREDENTIALS in the simple    credential cache store identified by PASSTYPE.  PASSWORD_SET is    used to do the actual storage.  Use POOL for necessary allocations.    Set *SAVED according to whether or not the credentials were    successfully stored.     NOTE:  This function is a common implementation of code used by    several of the simple credential providers (the default disk cache    mechanism, Windows CryptoAPI, GNOME Keyring, etc.) typically in    their "save_creds" implementation.  */
name|svn_error_t
modifier|*
name|svn_auth__simple_creds_cache_set
parameter_list|(
name|svn_boolean_t
modifier|*
name|saved
parameter_list|,
name|void
modifier|*
name|credentials
parameter_list|,
name|void
modifier|*
name|provider_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
name|svn_auth__password_set_t
name|password_set
parameter_list|,
specifier|const
name|char
modifier|*
name|passtype
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Implementation of svn_auth__password_get_t that retrieves    the plaintext password from CREDS when USERNAME matches the stored    credentials. */
name|svn_error_t
modifier|*
name|svn_auth__simple_password_get
parameter_list|(
name|svn_boolean_t
modifier|*
name|done
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|password
parameter_list|,
name|apr_hash_t
modifier|*
name|creds
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
name|svn_boolean_t
name|non_interactive
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Implementation of svn_auth__password_set_t that stores    the plaintext password in CREDS. */
name|svn_error_t
modifier|*
name|svn_auth__simple_password_set
parameter_list|(
name|svn_boolean_t
modifier|*
name|done
parameter_list|,
name|apr_hash_t
modifier|*
name|creds
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
specifier|const
name|char
modifier|*
name|password
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
name|svn_boolean_t
name|non_interactive
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Use PARAMETERS and REALMSTRING to set *CREDENTIALS to a set of    pre-cached authentication credentials pulled from the SSL client    certificate passphrase credential cache store identified by    PASSTYPE.  PASSPHRASE_GET is used to obtain the passphrase value.    Allocate *CREDENTIALS from POOL.     NOTE:  This function is a common implementation of code used by    several of the ssl client passphrase credential providers (the    default disk cache mechanism, Windows CryptoAPI, GNOME Keyring,    etc.), typically in their "first_creds" implementation.  */
name|svn_error_t
modifier|*
name|svn_auth__ssl_client_cert_pw_cache_get
parameter_list|(
name|void
modifier|*
modifier|*
name|credentials
parameter_list|,
name|void
modifier|*
modifier|*
name|iter_baton
parameter_list|,
name|void
modifier|*
name|provider_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
name|svn_auth__password_get_t
name|passphrase_get
parameter_list|,
specifier|const
name|char
modifier|*
name|passtype
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Use PARAMETERS and REALMSTRING to save CREDENTIALS in the SSL    client certificate passphrase credential cache store identified by    PASSTYPE.  PASSPHRASE_SET is used to do the actual storage.  Use    POOL for necessary allocations.  Set *SAVED according to whether or    not the credentials were successfully stored.     NOTE:  This function is a common implementation of code used by    several of the simple credential providers (the default disk cache    mechanism, Windows CryptoAPI, GNOME Keyring, etc.) typically in    their "save_creds" implementation.  */
name|svn_error_t
modifier|*
name|svn_auth__ssl_client_cert_pw_cache_set
parameter_list|(
name|svn_boolean_t
modifier|*
name|saved
parameter_list|,
name|void
modifier|*
name|credentials
parameter_list|,
name|void
modifier|*
name|provider_baton
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
name|svn_auth__password_set_t
name|passphrase_set
parameter_list|,
specifier|const
name|char
modifier|*
name|passtype
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* This implements the svn_auth__password_get_t interface.    Set **PASSPHRASE to the plaintext passphrase retrieved from CREDS;    ignore other parameters. */
name|svn_error_t
modifier|*
name|svn_auth__ssl_client_cert_pw_get
parameter_list|(
name|svn_boolean_t
modifier|*
name|done
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|passphrase
parameter_list|,
name|apr_hash_t
modifier|*
name|creds
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
name|svn_boolean_t
name|non_interactive
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* This implements the svn_auth__password_set_t interface.    Store PASSPHRASE in CREDS; ignore other parameters. */
name|svn_error_t
modifier|*
name|svn_auth__ssl_client_cert_pw_set
parameter_list|(
name|svn_boolean_t
modifier|*
name|done
parameter_list|,
name|apr_hash_t
modifier|*
name|creds
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
specifier|const
name|char
modifier|*
name|passphrase
parameter_list|,
name|apr_hash_t
modifier|*
name|parameters
parameter_list|,
name|svn_boolean_t
name|non_interactive
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|DOXYGEN
argument_list|)
comment|/**  * Set @a *provider to an authentication provider that implements  * ssl authority verification via the Windows CryptoApi.  *  * This provider automatically validates authority certificates with  * the CryptoApi, like Internet Explorer and the Windows network API do.  * This allows the rollout of root certificates via Windows Domain  * policies, instead of Subversion specific configuration.  *  * @note This function is only available on Windows.  */
name|void
name|svn_auth__get_windows_ssl_server_authority_provider
parameter_list|(
name|svn_auth_provider_object_t
modifier|*
modifier|*
name|provider
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_AUTH_PRIVATE_H */
end_comment

end_unit

