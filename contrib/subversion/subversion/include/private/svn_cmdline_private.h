begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_cmdline_private.h  * @brief Private functions for Subversion cmdline.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_CMDLINE_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_CMDLINE_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_error.h"
end_include

begin_include
include|#
directive|include
file|"svn_io.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/** Write a property as an XML element into @a *outstr.  *  * If @a outstr is NULL, allocate @a *outstr in @a pool; else append to  * @a *outstr, allocating in @a outstr's pool  *  * @a propname is the property name. @a propval is the property value, which  * will be encoded if it contains unsafe bytes.  *  * If @a inherited_prop is TRUE then @a propname is an inherited property,  * otherwise @a propname is an explicit property.  */
name|void
name|svn_cmdline__print_xml_prop
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|svn_string_t
modifier|*
name|propval
parameter_list|,
name|svn_boolean_t
name|inherited_prop
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** An implementation of @c svn_auth_gnome_keyring_unlock_prompt_func_t that  * prompts the user for default GNOME Keyring password.  *  * Expects a @c svn_cmdline_prompt_baton2_t to be passed as @a baton.  *  * @since New in 1.6.  */
name|svn_error_t
modifier|*
name|svn_cmdline__auth_gnome_keyring_unlock_prompt
parameter_list|(
name|char
modifier|*
modifier|*
name|keyring_password
parameter_list|,
specifier|const
name|char
modifier|*
name|keyring_name
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Container for config options parsed with svn_cmdline__parse_config_option  *  * @since New in 1.7.  */
typedef|typedef
struct|struct
name|svn_cmdline__config_argument_t
block|{
specifier|const
name|char
modifier|*
name|file
decl_stmt|;
specifier|const
name|char
modifier|*
name|section
decl_stmt|;
specifier|const
name|char
modifier|*
name|option
decl_stmt|;
specifier|const
name|char
modifier|*
name|value
decl_stmt|;
block|}
name|svn_cmdline__config_argument_t
typedef|;
comment|/** Parser for 'FILE:SECTION:OPTION=[VALUE]'-style option arguments.  *  * Parses @a opt_arg and places its value in @a config_options, an apr array  * containing svn_cmdline__config_argument_t* elements, allocating the option  * data in @a pool  *  * [Since 1.9/1.10:] If the file, section, or option value is not recognized,  * warn to @c stderr, using @a prefix as in svn_handle_warning2().  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_cmdline__parse_config_option
parameter_list|(
name|apr_array_header_t
modifier|*
name|config_options
parameter_list|,
specifier|const
name|char
modifier|*
name|opt_arg
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Sets the config options in @a config_options, an apr array containing  * @c svn_cmdline__config_argument_t* elements, to the configuration in @a cfg,  * a hash mapping of<tt>const char *</tt> configuration file names to  * @c svn_config_t *'s. Write warnings to stderr.  *  * Use @a prefix as prefix and @a argument_name in warning messages.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_cmdline__apply_config_options
parameter_list|(
name|apr_hash_t
modifier|*
name|config
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|config_options
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|argument_name
parameter_list|)
function_decl|;
comment|/* Return a string allocated in POOL that is a copy of STR but with each  * line prefixed with INDENT. A line is all characters up to the first  * CR-LF, LF-CR, CR or LF, or the end of STR if sooner. */
specifier|const
name|char
modifier|*
name|svn_cmdline__indent_string
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
specifier|const
name|char
modifier|*
name|indent
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Print to stdout a hash PROP_HASH that maps property names (char *) to    property values (svn_string_t *).  The names are assumed to be in UTF-8    format; the values are either in UTF-8 (the special Subversion props) or    plain binary values.     If OUT is not NULL, then write to it rather than stdout.     If NAMES_ONLY is true, print just names, else print names and    values. */
name|svn_error_t
modifier|*
name|svn_cmdline__print_prop_hash
parameter_list|(
name|svn_stream_t
modifier|*
name|out
parameter_list|,
name|apr_hash_t
modifier|*
name|prop_hash
parameter_list|,
name|svn_boolean_t
name|names_only
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Similar to svn_cmdline__print_prop_hash(), only output xml to *OUTSTR.    If INHERITED_PROPS is true, then PROP_HASH contains inherited properties,    otherwise PROP_HASH contains explicit properties.  If *OUTSTR is NULL,    allocate it first from POOL, otherwise append to it. */
name|svn_error_t
modifier|*
name|svn_cmdline__print_xml_prop_hash
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|outstr
parameter_list|,
name|apr_hash_t
modifier|*
name|prop_hash
parameter_list|,
name|svn_boolean_t
name|names_only
parameter_list|,
name|svn_boolean_t
name|inherited_props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Search for a text editor command in standard environment variables,    and invoke it to edit PATH.  Use POOL for all allocations.     If EDITOR_CMD is not NULL, it is the name of the external editor    command to use, overriding anything else that might determine the    editor.     CONFIG is a hash of svn_config_t * items keyed on a configuration    category (SVN_CONFIG_CATEGORY_CONFIG et al), and may be NULL.  */
name|svn_error_t
modifier|*
name|svn_cmdline__edit_file_externally
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|editor_cmd
parameter_list|,
name|apr_hash_t
modifier|*
name|config
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Search for a text editor command in standard environment variables,    and invoke it to edit CONTENTS (using a temporary file created in    directory BASE_DIR).  Return the new contents in *EDITED_CONTENTS,    or set *EDITED_CONTENTS to NULL if no edit was performed.     If EDITOR_CMD is not NULL, it is the name of the external editor    command to use, overriding anything else that might determine the    editor.     If TMPFILE_LEFT is NULL, the temporary file will be destroyed.    Else, the file will be left on disk, and its path returned in    *TMPFILE_LEFT.     CONFIG is a hash of svn_config_t * items keyed on a configuration    category (SVN_CONFIG_CATEGORY_CONFIG et al), and may be NULL.     If AS_TEXT is TRUE, recode CONTENTS and convert to native eol-style before    editing and back again afterwards.  In this case, ENCODING determines the    encoding used during editing.  If non-NULL, use the named encoding, else    use the system encoding.  If AS_TEXT is FALSE, don't do any translation.    In that case, ENCODING is ignored.     Use POOL for all allocations.  Use PREFIX as the prefix for the    temporary file used by the editor.     If return error, *EDITED_CONTENTS is not touched. */
name|svn_error_t
modifier|*
name|svn_cmdline__edit_string_externally
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|edited_contents
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|tmpfile_left
parameter_list|,
specifier|const
name|char
modifier|*
name|editor_cmd
parameter_list|,
specifier|const
name|char
modifier|*
name|base_dir
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|contents
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|apr_hash_t
modifier|*
name|config
parameter_list|,
name|svn_boolean_t
name|as_text
parameter_list|,
specifier|const
name|char
modifier|*
name|encoding
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Wrapper for apr_getopt_init(), which see.  *  * @since New in 1.4.  */
name|svn_error_t
modifier|*
name|svn_cmdline__getopt_init
parameter_list|(
name|apr_getopt_t
modifier|*
modifier|*
name|os
parameter_list|,
name|int
name|argc
parameter_list|,
specifier|const
name|char
modifier|*
name|argv
index|[]
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Determine whether interactive mode should be enabled, based on whether  * the user passed the --non-interactive or --force-interactive options.  * If neither option was passed, interactivity is enabled if standard  * input is connected to a terminal device.  *  * @since New in 1.8.  */
name|svn_boolean_t
name|svn_cmdline__be_interactive
parameter_list|(
name|svn_boolean_t
name|non_interactive
parameter_list|,
name|svn_boolean_t
name|force_interactive
parameter_list|)
function_decl|;
comment|/* Parses the argument value of '--trust-server-cert-failures' OPT_ARG into  * the expected booleans for passing to svn_cmdline_create_auth_baton2()  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_cmdline__parse_trust_options
parameter_list|(
name|svn_boolean_t
modifier|*
name|trust_server_cert_unknown_ca
parameter_list|,
name|svn_boolean_t
modifier|*
name|trust_server_cert_cn_mismatch
parameter_list|,
name|svn_boolean_t
modifier|*
name|trust_server_cert_expired
parameter_list|,
name|svn_boolean_t
modifier|*
name|trust_server_cert_not_yet_valid
parameter_list|,
name|svn_boolean_t
modifier|*
name|trust_server_cert_other_failure
parameter_list|,
specifier|const
name|char
modifier|*
name|opt_arg
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_CMDLINE_PRIVATE_H */
end_comment

end_unit

