begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_utf.h  * @brief UTF-8 conversion routines  *  * Whenever a conversion routine cannot convert to or from UTF-8, the  * error returned has code @c APR_EINVAL.  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_UTF_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_UTF_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_xlate.h>
end_include

begin_comment
comment|/* for APR_*_CHARSET */
end_comment

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
define|#
directive|define
name|SVN_APR_LOCALE_CHARSET
value|APR_LOCALE_CHARSET
define|#
directive|define
name|SVN_APR_DEFAULT_CHARSET
value|APR_DEFAULT_CHARSET
comment|/**  * Initialize the UTF-8 encoding/decoding routines.  * Allocate cached translation handles in a subpool of @a pool.  *  * If @a assume_native_utf8 is TRUE, the native character set is  * assumed to be UTF-8, i.e. conversion is a no-op. This is useful  * in contexts where the native character set is ASCII but UTF-8  * should be used regardless (e.g. for mod_dav_svn which runs within  * httpd and always uses the "C" locale).  *  * @note It is optional to call this function, but if it is used, no other  * svn function may be in use in other threads during the call of this  * function or when @a pool is cleared or destroyed.  * Initializing the UTF-8 routines will improve performance.  *  * @since New in 1.8.  */
name|void
name|svn_utf_initialize2
parameter_list|(
name|svn_boolean_t
name|assume_native_utf8
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Like svn_utf_initialize2() but without the ability to force the  * native encoding to UTF-8.  *  * @deprecated Provided for backward compatibility with the 1.7 API.  */
name|SVN_DEPRECATED
name|void
name|svn_utf_initialize
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a utf8-encoded stringbuf from native stringbuf @a src;  * allocate @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_stringbuf_to_utf8
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|svn_stringbuf_t
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a utf8-encoded string from native string @a src; allocate  * @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_string_to_utf8
parameter_list|(
specifier|const
name|svn_string_t
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a utf8-encoded C string from native C string @a src;  * allocate @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_cstring_to_utf8
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a utf8 encoded C string from @a frompage encoded C  * string @a src; allocate @a *dest in @a pool.  *  * @since New in 1.4.  */
name|svn_error_t
modifier|*
name|svn_utf_cstring_to_utf8_ex2
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|frompage
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_utf_cstring_to_utf8_ex2() but with @a convset_key which is  * ignored.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_utf_cstring_to_utf8_ex
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|frompage
parameter_list|,
specifier|const
name|char
modifier|*
name|convset_key
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a natively-encoded stringbuf from utf8 stringbuf @a src;  * allocate @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_stringbuf_from_utf8
parameter_list|(
name|svn_stringbuf_t
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|svn_stringbuf_t
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a natively-encoded string from utf8 string @a src;  * allocate @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_string_from_utf8
parameter_list|(
specifier|const
name|svn_string_t
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a natively-encoded C string from utf8 C string @a src;  * allocate @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_cstring_from_utf8
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a @a topage encoded C string from utf8 encoded C string  * @a src; allocate @a *dest in @a pool.  *  * @since New in 1.4.  */
name|svn_error_t
modifier|*
name|svn_utf_cstring_from_utf8_ex2
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|topage
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_utf_cstring_from_utf8_ex2() but with @a convset_key which is  * ignored.  *  * @deprecated Provided for backward compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_utf_cstring_from_utf8_ex
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
specifier|const
name|char
modifier|*
name|topage
parameter_list|,
specifier|const
name|char
modifier|*
name|convset_key
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return a fuzzily native-encoded C string from utf8 C string @a src,  * allocated in @a pool.  A fuzzy recoding leaves all 7-bit ascii  * characters the same, and substitutes "?\\XXX" for others, where XXX  * is the unsigned decimal code for that character.  *  * This function cannot error; it is guaranteed to return something.  * First it will recode as described above and then attempt to convert  * the (new) 7-bit UTF-8 string to native encoding.  If that fails, it  * will return the raw fuzzily recoded string, which may or may not be  * meaningful in the client's locale, but is (presumably) better than  * nothing.  *  * ### Notes:  *  * Improvement is possible, even imminent.  The original problem was  * that if you converted a UTF-8 string (say, a log message) into a  * locale that couldn't represent all the characters, you'd just get a  * static placeholder saying "[unconvertible log message]".  Then  * Justin Erenkrantz pointed out how on platforms that didn't support  * conversion at all, "svn log" would still fail completely when it  * encountered unconvertible data.  *  * Now for both cases, the caller can at least fall back on this  * function, which converts the message as best it can, substituting  * "?\\XXX" escape codes for the non-ascii characters.  *  * Ultimately, some callers may prefer the iconv "//TRANSLIT" option,  * so when we can detect that at configure time, things will change.  * Also, this should (?) be moved to apr/apu eventually.  *  * See http://subversion.tigris.org/issues/show_bug.cgi?id=807 for  * details.  */
specifier|const
name|char
modifier|*
name|svn_utf_cstring_from_utf8_fuzzy
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a natively-encoded C string from utf8 stringbuf @a src;  * allocate @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_cstring_from_utf8_stringbuf
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|svn_stringbuf_t
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *dest to a natively-encoded C string from utf8 string @a src;  * allocate @a *dest in @a pool.  */
name|svn_error_t
modifier|*
name|svn_utf_cstring_from_utf8_string
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|dest
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Return the display width of UTF-8-encoded C string @a cstr.  * If the string is not printable or invalid UTF-8, return -1.  *  * @since New in 1.8.  */
name|int
name|svn_utf_cstring_utf8_width
parameter_list|(
specifier|const
name|char
modifier|*
name|cstr
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_UTF_H */
end_comment

end_unit

