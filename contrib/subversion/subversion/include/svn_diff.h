begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_diff.h  * @brief Contextual diffing.  *  * This is an internalized library for performing contextual diffs  * between sources of data.  *  * @note This is different than Subversion's binary-diffing engine.  * That API lives in @c svn_delta.h -- see the "text deltas" section.  A  * "text delta" is way of representing precise binary diffs between  * strings of data.  The Subversion client and server send text deltas  * to one another during updates and commits.  *  * This API, however, is (or will be) used for performing *contextual*  * merges between files in the working copy.  During an update or  * merge, 3-way file merging is needed.  And 'svn diff' needs to show  * the differences between 2 files.  *  * The nice thing about this API is that it's very general.  It  * operates on any source of data (a "datasource") and calculates  * contextual differences on "tokens" within the data.  In our  * particular usage, the datasources are files and the tokens are  * lines.  But the possibilities are endless.  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_DIFF_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_DIFF_H
end_define

begin_include
include|#
directive|include
file|<apr.h>
end_include

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_tables.h>
end_include

begin_comment
comment|/* for apr_array_header_t */
end_comment

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_io.h"
end_include

begin_comment
comment|/* for svn_stream_t */
end_comment

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_mergeinfo.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/**  * Get libsvn_diff version information.  *  * @since New in 1.1.  */
specifier|const
name|svn_version_t
modifier|*
name|svn_diff_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Diffs. */
comment|/** An opaque type that represents a difference between either two or  * three datasources.   This object is returned by svn_diff_diff(),  * svn_diff_diff3() and svn_diff_diff4(), and consumed by a number of  * other routines.  */
typedef|typedef
name|struct
name|svn_diff_t
name|svn_diff_t
typedef|;
comment|/**  * There are four types of datasources.  In GNU diff3 terminology,  * the first three types correspond to the phrases "older", "mine",  * and "yours".  */
typedef|typedef
enum|enum
name|svn_diff_datasource_e
block|{
comment|/** The oldest form of the data. */
name|svn_diff_datasource_original
block|,
comment|/** The same data, but potentially changed by the user. */
name|svn_diff_datasource_modified
block|,
comment|/** The latest version of the data, possibly different than the    * user's modified version.    */
name|svn_diff_datasource_latest
block|,
comment|/** The common ancestor of original and modified. */
name|svn_diff_datasource_ancestor
block|}
name|svn_diff_datasource_e
typedef|;
comment|/** A vtable for reading data from the three datasources.  * @since New in 1.7. */
typedef|typedef
struct|struct
name|svn_diff_fns2_t
block|{
comment|/** Open the datasources of type @a datasources. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|datasources_open
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|apr_off_t
modifier|*
name|prefix_lines
parameter_list|,
name|apr_off_t
modifier|*
name|suffix_lines
parameter_list|,
specifier|const
name|svn_diff_datasource_e
modifier|*
name|datasources
parameter_list|,
name|apr_size_t
name|datasources_len
parameter_list|)
function_decl|;
comment|/** Close the datasource of type @a datasource. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|datasource_close
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|svn_diff_datasource_e
name|datasource
parameter_list|)
function_decl|;
comment|/** Get the next "token" from the datasource of type @a datasource.    *  Return a "token" in @a *token.   Return a hash of "token" in @a *hash.    *  Leave @a token and @a hash untouched when the datasource is exhausted.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|datasource_get_next_token
function_decl|)
parameter_list|(
name|apr_uint32_t
modifier|*
name|hash
parameter_list|,
name|void
modifier|*
modifier|*
name|token
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
name|svn_diff_datasource_e
name|datasource
parameter_list|)
function_decl|;
comment|/** A function for ordering the tokens, resembling 'strcmp' in functionality.    * @a compare should contain the return value of the comparison:    * If @a ltoken and @a rtoken are "equal", return 0.  If @a ltoken is    * "less than" @a rtoken, return a number< 0.  If @a ltoken  is    * "greater than" @a rtoken, return a number> 0.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|token_compare
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|void
modifier|*
name|ltoken
parameter_list|,
name|void
modifier|*
name|rtoken
parameter_list|,
name|int
modifier|*
name|compare
parameter_list|)
function_decl|;
comment|/** Free @a token from memory, the diff algorithm is done with it. */
name|void
function_decl|(
modifier|*
name|token_discard
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|void
modifier|*
name|token
parameter_list|)
function_decl|;
comment|/** Free *all* tokens from memory, they're no longer needed. */
name|void
function_decl|(
modifier|*
name|token_discard_all
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|)
function_decl|;
block|}
name|svn_diff_fns2_t
typedef|;
comment|/** Like #svn_diff_fns2_t except with datasource_open() instead of  * datasources_open().  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
typedef|typedef
struct|struct
name|svn_diff_fns_t
block|{
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|datasource_open
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|svn_diff_datasource_e
name|datasource
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|datasource_close
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|svn_diff_datasource_e
name|datasource
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|datasource_get_next_token
function_decl|)
parameter_list|(
name|apr_uint32_t
modifier|*
name|hash
parameter_list|,
name|void
modifier|*
modifier|*
name|token
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
name|svn_diff_datasource_e
name|datasource
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|token_compare
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|void
modifier|*
name|ltoken
parameter_list|,
name|void
modifier|*
name|rtoken
parameter_list|,
name|int
modifier|*
name|compare
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|token_discard
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|,
name|void
modifier|*
name|token
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|token_discard_all
function_decl|)
parameter_list|(
name|void
modifier|*
name|diff_baton
parameter_list|)
function_decl|;
block|}
name|svn_diff_fns_t
typedef|;
comment|/* The Main Events */
comment|/** Given a vtable of @a diff_fns/@a diff_baton for reading datasources,  * return a diff object in @a *diff that represents a difference between  * an "original" and "modified" datasource.  Do all allocation in @a pool.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_diff_diff_2
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
specifier|const
name|svn_diff_fns2_t
modifier|*
name|diff_fns
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_diff_diff_2() but using #svn_diff_fns_t instead of  * #svn_diff_fns2_t.  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_diff
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
specifier|const
name|svn_diff_fns_t
modifier|*
name|diff_fns
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Given a vtable of @a diff_fns/@a diff_baton for reading datasources,  * return a diff object in @a *diff that represents a difference between  * three datasources: "original", "modified", and "latest".  Do all  * allocation in @a pool.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_diff_diff3_2
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
specifier|const
name|svn_diff_fns2_t
modifier|*
name|diff_fns
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_diff_diff3_2() but using #svn_diff_fns_t instead of  * #svn_diff_fns2_t.  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_diff3
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
specifier|const
name|svn_diff_fns_t
modifier|*
name|diff_fns
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Given a vtable of @a diff_fns/@a diff_baton for reading datasources,  * return a diff object in @a *diff that represents a difference between  * two datasources: "original" and "latest", adjusted to become a full  * difference between "original", "modified" and "latest" using "ancestor".  * Do all allocation in @a pool.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_diff_diff4_2
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
specifier|const
name|svn_diff_fns2_t
modifier|*
name|diff_fns
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Like svn_diff_diff4_2() but using #svn_diff_fns_t instead of  * #svn_diff_fns2_t.  *  * @deprecated Provided for backward compatibility with the 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_diff4
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|diff_baton
parameter_list|,
specifier|const
name|svn_diff_fns_t
modifier|*
name|diff_fns
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Utility functions */
comment|/** Determine if a diff object contains conflicts.  If it does, return  * @c TRUE, else return @c FALSE.  */
name|svn_boolean_t
name|svn_diff_contains_conflicts
parameter_list|(
name|svn_diff_t
modifier|*
name|diff
parameter_list|)
function_decl|;
comment|/** Determine if a diff object contains actual differences between the  * datasources.  If so, return @c TRUE, else return @c FALSE.  */
name|svn_boolean_t
name|svn_diff_contains_diffs
parameter_list|(
name|svn_diff_t
modifier|*
name|diff
parameter_list|)
function_decl|;
comment|/* Displaying Diffs */
comment|/** A vtable for displaying (or consuming) differences between datasources.  *  * Differences, similarities, and conflicts are described by lining up  * "ranges" of data.  *  * Any of the function pointers in this vtable may be NULL to ignore the  * corresponding kinds of output.  *  * @note These callbacks describe data ranges in units of "tokens".  * A "token" is whatever you've defined it to be in your datasource  * @c svn_diff_fns_t vtable.  */
typedef|typedef
struct|struct
name|svn_diff_output_fns_t
block|{
comment|/* Two-way and three-way diffs both call the first two output functions: */
comment|/**    * If doing a two-way diff, then an *identical* data range was found    * between the "original" and "modified" datasources.  Specifically,    * the match starts at @a original_start and goes for @a original_length    * tokens in the original data, and at @a modified_start for    * @a modified_length tokens in the modified data.    *    * If doing a three-way diff, then all three datasources have    * matching data ranges.  The range @a latest_start, @a latest_length in    * the "latest" datasource is identical to the range @a original_start,    * @a original_length in the original data, and is also identical to    * the range @a modified_start, @a modified_length in the modified data.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|output_common
function_decl|)
parameter_list|(
name|void
modifier|*
name|output_baton
parameter_list|,
name|apr_off_t
name|original_start
parameter_list|,
name|apr_off_t
name|original_length
parameter_list|,
name|apr_off_t
name|modified_start
parameter_list|,
name|apr_off_t
name|modified_length
parameter_list|,
name|apr_off_t
name|latest_start
parameter_list|,
name|apr_off_t
name|latest_length
parameter_list|)
function_decl|;
comment|/**    * If doing a two-way diff, then an *conflicting* data range was found    * between the "original" and "modified" datasources.  Specifically,    * the conflict starts at @a original_start and goes for @a original_length    * tokens in the original data, and at @a modified_start for    * @a modified_length tokens in the modified data.    *    * If doing a three-way diff, then an identical data range was discovered    * between the "original" and "latest" datasources, but this conflicts with    * a range in the "modified" datasource.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|output_diff_modified
function_decl|)
parameter_list|(
name|void
modifier|*
name|output_baton
parameter_list|,
name|apr_off_t
name|original_start
parameter_list|,
name|apr_off_t
name|original_length
parameter_list|,
name|apr_off_t
name|modified_start
parameter_list|,
name|apr_off_t
name|modified_length
parameter_list|,
name|apr_off_t
name|latest_start
parameter_list|,
name|apr_off_t
name|latest_length
parameter_list|)
function_decl|;
comment|/* ------ The following callbacks are used by three-way diffs only --- */
comment|/** An identical data range was discovered between the "original" and    * "modified" datasources, but this conflicts with a range in the    * "latest" datasource.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|output_diff_latest
function_decl|)
parameter_list|(
name|void
modifier|*
name|output_baton
parameter_list|,
name|apr_off_t
name|original_start
parameter_list|,
name|apr_off_t
name|original_length
parameter_list|,
name|apr_off_t
name|modified_start
parameter_list|,
name|apr_off_t
name|modified_length
parameter_list|,
name|apr_off_t
name|latest_start
parameter_list|,
name|apr_off_t
name|latest_length
parameter_list|)
function_decl|;
comment|/** An identical data range was discovered between the "modified" and    * "latest" datasources, but this conflicts with a range in the    * "original" datasource.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|output_diff_common
function_decl|)
parameter_list|(
name|void
modifier|*
name|output_baton
parameter_list|,
name|apr_off_t
name|original_start
parameter_list|,
name|apr_off_t
name|original_length
parameter_list|,
name|apr_off_t
name|modified_start
parameter_list|,
name|apr_off_t
name|modified_length
parameter_list|,
name|apr_off_t
name|latest_start
parameter_list|,
name|apr_off_t
name|latest_length
parameter_list|)
function_decl|;
comment|/** All three datasources have conflicting data ranges.  The range    * @a latest_start, @a latest_length in the "latest" datasource conflicts    * with the range @a original_start, @a original_length in the "original"    * datasource, and also conflicts with the range @a modified_start,    * @a modified_length in the "modified" datasource.    * If there are common ranges in the "modified" and "latest" datasources    * in this conflicting range, @a resolved_diff will contain a diff    * which can be used to retrieve the common and conflicting ranges.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|output_conflict
function_decl|)
parameter_list|(
name|void
modifier|*
name|output_baton
parameter_list|,
name|apr_off_t
name|original_start
parameter_list|,
name|apr_off_t
name|original_length
parameter_list|,
name|apr_off_t
name|modified_start
parameter_list|,
name|apr_off_t
name|modified_length
parameter_list|,
name|apr_off_t
name|latest_start
parameter_list|,
name|apr_off_t
name|latest_length
parameter_list|,
name|svn_diff_t
modifier|*
name|resolved_diff
parameter_list|)
function_decl|;
block|}
name|svn_diff_output_fns_t
typedef|;
comment|/** Style for displaying conflicts during diff3 output.  *  * @since New in 1.6.  */
typedef|typedef
enum|enum
name|svn_diff_conflict_display_style_t
block|{
comment|/** Display modified and latest, with conflict markers. */
name|svn_diff_conflict_display_modified_latest
block|,
comment|/** Like svn_diff_conflict_display_modified_latest, but with an       extra effort to identify common sequences between modified and       latest. */
name|svn_diff_conflict_display_resolved_modified_latest
block|,
comment|/** Display modified, original, and latest, with conflict       markers. */
name|svn_diff_conflict_display_modified_original_latest
block|,
comment|/** Just display modified, with no markers. */
name|svn_diff_conflict_display_modified
block|,
comment|/** Just display latest, with no markers. */
name|svn_diff_conflict_display_latest
block|,
comment|/** Like svn_diff_conflict_display_modified_original_latest, but       *only* showing conflicts. */
name|svn_diff_conflict_display_only_conflicts
comment|/* IMPORTANT: If you extend this enum note that it is mapped in      tools/diff/diff3.c. */
block|}
name|svn_diff_conflict_display_style_t
typedef|;
comment|/** Given a vtable of @a output_fns/@a output_baton for consuming  * differences, output the differences in @a diff.  *  * If not @c NULL, call @a cancel_func with @a cancel_baton once or multiple  * times while processing larger diffs.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_diff_output2
parameter_list|(
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|output_baton
parameter_list|,
specifier|const
name|svn_diff_output_fns_t
modifier|*
name|output_fns
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_output2(), but without cancel support.  *  * @deprecated Provided for backwards compatibility with the 1.8 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_output
parameter_list|(
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
name|void
modifier|*
name|output_baton
parameter_list|,
specifier|const
name|svn_diff_output_fns_t
modifier|*
name|output_fns
parameter_list|)
function_decl|;
comment|/* Diffs on files */
comment|/** To what extent whitespace should be ignored when comparing lines.  *  * @since New in 1.4.  */
typedef|typedef
enum|enum
name|svn_diff_file_ignore_space_t
block|{
comment|/** Ignore no whitespace. */
name|svn_diff_file_ignore_space_none
block|,
comment|/** Ignore changes in sequences of whitespace characters, treating each    * sequence of whitespace characters as a single space. */
name|svn_diff_file_ignore_space_change
block|,
comment|/** Ignore all whitespace characters. */
name|svn_diff_file_ignore_space_all
block|}
name|svn_diff_file_ignore_space_t
typedef|;
comment|/** Options to control the behaviour of the file diff routines.  *  * @since New in 1.4.  *  * @note This structure may be extended in the future, so to preserve binary  * compatibility, users must not allocate structs of this type themselves.  * @see svn_diff_file_options_create().  *  * @note Although its name suggests otherwise, this structure is used to  *       pass options to file as well as in-memory diff functions.  */
typedef|typedef
struct|struct
name|svn_diff_file_options_t
block|{
comment|/** To what extent whitespace should be ignored when comparing lines.    * The default is @c svn_diff_file_ignore_space_none. */
name|svn_diff_file_ignore_space_t
name|ignore_space
decl_stmt|;
comment|/** Whether to treat all end-of-line markers the same when comparing lines.    * The default is @c FALSE. */
name|svn_boolean_t
name|ignore_eol_style
decl_stmt|;
comment|/** Whether the "@@" lines of the unified diff output should include a prefix     * of the nearest preceding line that starts with a character that might be     * the initial character of a C language identifier.  The default is     * @c FALSE.     * @since New in 1.5.     */
name|svn_boolean_t
name|show_c_function
decl_stmt|;
comment|/** The number of context lines produced above and below modifications, if    * available. The number of context lines must be>= 0.    *    * @since New in 1.9 */
name|int
name|context_size
decl_stmt|;
block|}
name|svn_diff_file_options_t
typedef|;
comment|/** Allocate a @c svn_diff_file_options_t structure in @a pool, initializing  * it with default values.  *  * @since New in 1.4.  */
name|svn_diff_file_options_t
modifier|*
name|svn_diff_file_options_create
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Parse @a args, an array of<tt>const char *</tt> command line switches  * and adjust @a options accordingly.  @a options is assumed to be initialized  * with default values.  @a pool is used for temporary allocation.  *  * @since New in 1.4.  *  * The following options are supported:  * - --ignore-space-change, -b  * - --ignore-all-space, -w  * - --ignore-eol-style  * - --show-c-function, -p @since New in 1.5.  * - --context, -U ARG @since New in 1.9.  * - --unified, -u (for compatibility, does nothing).  */
name|svn_error_t
modifier|*
name|svn_diff_file_options_parse
parameter_list|(
name|svn_diff_file_options_t
modifier|*
name|options
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|args
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** A convenience function to produce a diff between two files.  *  * @since New in 1.4.  *  * Return a diff object in @a *diff (allocated from @a pool) that represents  * the difference between an @a original file and @a modified file.  * (The file arguments must be full paths to the files.)  *  * Compare lines according to the relevant fields of @a options.  */
name|svn_error_t
modifier|*
name|svn_diff_file_diff_2
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original
parameter_list|,
specifier|const
name|char
modifier|*
name|modified
parameter_list|,
specifier|const
name|svn_diff_file_options_t
modifier|*
name|options
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_file_diff_2(), but with @a options set to a struct with  * default options.  *  * @deprecated Provided for backwards compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_diff
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original
parameter_list|,
specifier|const
name|char
modifier|*
name|modified
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** A convenience function to produce a diff between three files.  *  * @since New in 1.4.  *  * Return a diff object in @a *diff (allocated from @a pool) that represents  * the difference between an @a original file, @a modified file, and @a latest  * file.  *  * Compare lines according to the relevant fields of @a options.  */
name|svn_error_t
modifier|*
name|svn_diff_file_diff3_2
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original
parameter_list|,
specifier|const
name|char
modifier|*
name|modified
parameter_list|,
specifier|const
name|char
modifier|*
name|latest
parameter_list|,
specifier|const
name|svn_diff_file_options_t
modifier|*
name|options
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_file_diff3_2(), but with @a options set to a struct  * with default options.  *  * @deprecated Provided for backwards compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_diff3
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original
parameter_list|,
specifier|const
name|char
modifier|*
name|modified
parameter_list|,
specifier|const
name|char
modifier|*
name|latest
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** A convenience function to produce a diff between four files.  *  * @since New in 1.4.  *  * Return a diff object in @a *diff (allocated from @a pool) that represents  * the difference between an @a original file, @a modified file, @a latest  * and @a ancestor file. (The file arguments must be full paths to the files.)  *  * Compare lines according to the relevant fields of @a options.  */
name|svn_error_t
modifier|*
name|svn_diff_file_diff4_2
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original
parameter_list|,
specifier|const
name|char
modifier|*
name|modified
parameter_list|,
specifier|const
name|char
modifier|*
name|latest
parameter_list|,
specifier|const
name|char
modifier|*
name|ancestor
parameter_list|,
specifier|const
name|svn_diff_file_options_t
modifier|*
name|options
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_file_diff4_2(), but with @a options set to a struct with  * default options.  *  * @deprecated Provided for backwards compatibility with the 1.3 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_diff4
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original
parameter_list|,
specifier|const
name|char
modifier|*
name|modified
parameter_list|,
specifier|const
name|char
modifier|*
name|latest
parameter_list|,
specifier|const
name|char
modifier|*
name|ancestor
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** A convenience function to produce unified diff output from the  * diff generated by svn_diff_file_diff().  *  * Output a @a diff between @a original_path and @a modified_path in unified  * context diff format to @a output_stream.  Optionally supply  * @a original_header and/or @a modified_header to be displayed in the header  * of the output.  If @a original_header or @a modified_header is @c NULL, a  * default header will be displayed, consisting of path and last modified time.  * Output all headers and markers in @a header_encoding.  If @a relative_to_dir  * is not @c NULL, the @a original_path and @a modified_path will have the  * @a relative_to_dir stripped from the front of the respective paths.  If  * @a relative_to_dir is @c NULL, paths will be not be modified.  If  * @a relative_to_dir is not @c NULL but @a relative_to_dir is not a parent  * path of the target, an error is returned. Finally, if @a relative_to_dir  * is a URL, an error will be returned.  *  * If @a context_size is not negative, then this number of context lines  * will be used in the generated diff output. Otherwise the legacy compile  * time default will be used.  *  * If not @c NULL, call @a cancel_func with @a cancel_baton once or multiple  * times while processing larger diffs.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_diff_file_output_unified4
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_path
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_path
parameter_list|,
specifier|const
name|char
modifier|*
name|original_header
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_header
parameter_list|,
specifier|const
name|char
modifier|*
name|header_encoding
parameter_list|,
specifier|const
name|char
modifier|*
name|relative_to_dir
parameter_list|,
name|svn_boolean_t
name|show_c_function
parameter_list|,
name|int
name|context_size
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_file_output_unified4(), but without cancel  * support and with @a context_size set to -1.  *  * @since New in 1.5.  * @deprecated Provided for backwards compatibility with the 1.8 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_output_unified3
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_path
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_path
parameter_list|,
specifier|const
name|char
modifier|*
name|original_header
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_header
parameter_list|,
specifier|const
name|char
modifier|*
name|header_encoding
parameter_list|,
specifier|const
name|char
modifier|*
name|relative_to_dir
parameter_list|,
name|svn_boolean_t
name|show_c_function
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_file_output_unified3(), but with @a relative_to_dir  * set to NULL and @a show_c_function to false.  *  * @deprecated Provided for backwards compatibility with the 1.4 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_output_unified2
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_path
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_path
parameter_list|,
specifier|const
name|char
modifier|*
name|original_header
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_header
parameter_list|,
specifier|const
name|char
modifier|*
name|header_encoding
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_file_output_unified2(), but with @a header_encoding  * set to @c APR_LOCALE_CHARSET.  *  * @deprecated Provided for backward compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_output_unified
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_path
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_path
parameter_list|,
specifier|const
name|char
modifier|*
name|original_header
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_header
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** A convenience function to produce diff3 output from the  * diff generated by svn_diff_file_diff3().  *  * Output a @a diff between @a original_path, @a modified_path and  * @a latest_path in merged format to @a output_stream.  Optionally supply  * @a conflict_modified, @a conflict_original, @a conflict_separator and/or  * @a conflict_latest to be displayed as conflict markers in the output.  * If @a conflict_original, @a conflict_modified, @a conflict_latest and/or  * @a conflict_separator is @c NULL, a default marker will be displayed.  * @a conflict_style dictates how conflicts are displayed.   * Uses @a scratch_pool for temporary allocations.  *  * If not @c NULL, call @a cancel_func with @a cancel_baton once or multiple  * times while processing larger diffs.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_diff_file_output_merge3
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_path
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_path
parameter_list|,
specifier|const
name|char
modifier|*
name|latest_path
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_original
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_modified
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_separator
parameter_list|,
name|svn_diff_conflict_display_style_t
name|conflict_style
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_file_output_merge3, but without cancel support.  *  * @since New in 1.6.  *  * @deprecated Provided for backward compatibility with the 1.8 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_output_merge2
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_path
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_path
parameter_list|,
specifier|const
name|char
modifier|*
name|latest_path
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_original
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_modified
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_separator
parameter_list|,
name|svn_diff_conflict_display_style_t
name|conflict_style
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_file_output_merge2, but with @a  * display_original_in_conflict and @a display_resolved_conflicts  * booleans instead of the @a conflict_style enum.  *  * If both booleans are false, acts like  * svn_diff_conflict_display_modified_latest; if @a  * display_original_in_conflict is true, acts like  * svn_diff_conflict_display_modified_original_latest; if @a  * display_resolved_conflicts is true, acts like  * svn_diff_conflict_display_resolved_modified_latest.  The booleans  * may not both be true.  *  * @deprecated Provided for backward compatibility with the 1.5 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_file_output_merge
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_path
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_path
parameter_list|,
specifier|const
name|char
modifier|*
name|latest_path
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_original
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_modified
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_separator
parameter_list|,
name|svn_boolean_t
name|display_original_in_conflict
parameter_list|,
name|svn_boolean_t
name|display_resolved_conflicts
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Creates a git-like binary diff hunk describing the differences between  * @a original and @a latest. It does this by either producing either the  * literal content of both versions in a compressed format, or by describing  * one way transforms.  *  * Either @a original or @a latest may be NULL to describe that the version  * didn't exist.  *  * Writes the output to @a output_stream.  *  * If not @c NULL, call @a cancel_func with @a cancel_baton once or multiple  * times while processing larger diffs.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_diff_output_binary
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_stream_t
modifier|*
name|original
parameter_list|,
name|svn_stream_t
modifier|*
name|latest
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Diffs on in-memory structures */
comment|/** Generate @a diff output from the @a original and @a modified  * in-memory strings.  @a diff will be allocated from @a pool.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_diff_mem_string_diff
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
specifier|const
name|svn_diff_file_options_t
modifier|*
name|options
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Generate @a diff output from the @a original, @a modified and @a latest  * in-memory strings.  @a diff will be allocated in @a pool.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_diff_mem_string_diff3
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|latest
parameter_list|,
specifier|const
name|svn_diff_file_options_t
modifier|*
name|options
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Generate @a diff output from the @a original, @a modified and @a latest  * in-memory strings, using @a ancestor.  @a diff will be allocated in @a pool.  *  * @since New in 1.5.  */
name|svn_error_t
modifier|*
name|svn_diff_mem_string_diff4
parameter_list|(
name|svn_diff_t
modifier|*
modifier|*
name|diff
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|latest
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|ancestor
parameter_list|,
specifier|const
name|svn_diff_file_options_t
modifier|*
name|options
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Outputs the @a diff object generated by svn_diff_mem_string_diff()  * in unified diff format on @a output_stream, using @a original  * and @a modified for the text in the output.  *  * If @a with_diff_header is TRUE, write a diff header ("---" and "+++"  * lines), using @a original_header and @a modified_header to fill the field  * after the "---" and "+++" markers; otherwise @a original_header and  * @a modified_header are ignored and may be NULL.  *  * Outputs the header and hunk delimiters in @a header_encoding.  * A @a hunk_delimiter can optionally be specified.  * If @a hunk_delimiter is NULL, use the default hunk delimiter "@@".  *  * As a special case, if the hunk delimiter is "##", then for an incomplete  * final line use the text "\ No newline at end of property" instead of  * "\ No newline at end of file".  *  * If @a context_size is not negative, then this number of context lines  * will be used in the generated diff output. Otherwise the legacy compile  * time default will be used.  *  * If not @c NULL, call @a cancel_func with @a cancel_baton once or multiple  * times while processing larger diffs.  *  * Uses @a scratch_pool for temporary allocations.  *  * @since New in 1.9  */
name|svn_error_t
modifier|*
name|svn_diff_mem_string_output_unified3
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
name|svn_boolean_t
name|with_diff_header
parameter_list|,
specifier|const
name|char
modifier|*
name|hunk_delimiter
parameter_list|,
specifier|const
name|char
modifier|*
name|original_header
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_header
parameter_list|,
specifier|const
name|char
modifier|*
name|header_encoding
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
name|int
name|context_size
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_mem_string_output_unified3() but without  * cancel support and with @a context_size set to -1.  *  * @since New in 1.7. Hunk delimiter "##" has the special meaning since 1.8.  *  * @deprecated Provided for backwards compatibility with the 1.8 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_mem_string_output_unified2
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
name|svn_boolean_t
name|with_diff_header
parameter_list|,
specifier|const
name|char
modifier|*
name|hunk_delimiter
parameter_list|,
specifier|const
name|char
modifier|*
name|original_header
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_header
parameter_list|,
specifier|const
name|char
modifier|*
name|header_encoding
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_mem_string_output_unified2() but with  * @a with_diff_header always set to TRUE and @a hunk_delimiter always  * set to NULL.  *  * @since New in 1.5.  *  * @deprecated Provided for backwards compatibility with the 1.8 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_mem_string_output_unified
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|char
modifier|*
name|original_header
parameter_list|,
specifier|const
name|char
modifier|*
name|modified_header
parameter_list|,
specifier|const
name|char
modifier|*
name|header_encoding
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Output the @a diff generated by svn_diff_mem_string_diff3() in diff3  * format on @a output_stream, using @a original, @a modified and @a latest  * for content changes.  *  * Use the conflict markers @a conflict_original, @a conflict_modified,  * @a conflict_latest and @a conflict_separator or the default one for  * each of these if @c NULL is passed.  *  * @a conflict_style dictates how conflicts are displayed.  *  * If not @c NULL, call @a cancel_func with @a cancel_baton once or multiple  * times while processing larger diffs.  *  * Uses @a scratch_pool for temporary allocations.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_diff_mem_string_output_merge3
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_original
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_modified
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_separator
parameter_list|,
name|svn_diff_conflict_display_style_t
name|style
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_mem_string_output_merge2(), but without cancel support.  *  * @since New in 1.6.  *  * @deprecated Provided for backwards compatibility with the 1.8 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_mem_string_output_merge2
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_original
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_modified
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_separator
parameter_list|,
name|svn_diff_conflict_display_style_t
name|style
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_diff_mem_string_output_merge2, but with @a  * display_original_in_conflict and @a display_resolved_conflicts  * booleans instead of the @a conflict_style enum.  *  * If both booleans are false, acts like  * svn_diff_conflict_display_modified_latest; if @a  * display_original_in_conflict is true, acts like  * svn_diff_conflict_display_modified_original_latest; if @a  * display_resolved_conflicts is true, acts like  * svn_diff_conflict_display_resolved_modified_latest.  The booleans  * may not both be true.  *  * @deprecated Provided for backward compatibility with the 1.5 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_diff_mem_string_output_merge
parameter_list|(
name|svn_stream_t
modifier|*
name|output_stream
parameter_list|,
name|svn_diff_t
modifier|*
name|diff
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|original
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|modified
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_original
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_modified
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_latest
parameter_list|,
specifier|const
name|char
modifier|*
name|conflict_separator
parameter_list|,
name|svn_boolean_t
name|display_original_in_conflict
parameter_list|,
name|svn_boolean_t
name|display_resolved_conflicts
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Diff parsing. If you want to apply a patch to a working copy  * rather than parse it, see svn_client_patch(). */
comment|/**  * Describes what operation has been performed on a file.  *  * @since New in 1.7.  */
typedef|typedef
enum|enum
name|svn_diff_operation_kind_e
block|{
name|svn_diff_op_unchanged
block|,
name|svn_diff_op_added
block|,
name|svn_diff_op_deleted
block|,
name|svn_diff_op_copied
block|,
name|svn_diff_op_moved
block|,
comment|/* There's no tree changes, just text modifications. */
name|svn_diff_op_modified
block|}
name|svn_diff_operation_kind_t
typedef|;
comment|/**  * A single hunk inside a patch.  *  * The lines of text comprising the hunk can be interpreted in three ways:  *   - diff text       The hunk as it appears in the unidiff patch file,  *                     including the hunk header line ("@@ ... @@")  *   - original text   The text the patch was based on.  *   - modified text   The result of patching the original text.  *  * For example, consider a hunk with the following diff text:  *  * @verbatim      @@ -1,5 +1,5 @@       #include<stdio.h>       int main(int argc, char *argv[]) {      -        printf("Hello World!\n");      +        printf("I like Subversion!\n");       } @endverbatim  *  * The original text of this hunk is:  *  * @verbatim      #include<stdio.h>      int main(int argc, char *argv[]) {              printf("Hello World!\n");      } @endverbatim  *  * And the modified text is:  *  * @verbatim      #include<stdio.h>      int main(int argc, char *argv[]) {              printf("I like Subversion!\n");      } @endverbatim  *  * @see svn_diff_hunk_readline_diff_text()  * @see svn_diff_hunk_readline_original_text()  * @see svn_diff_hunk_readline_modified_text()  *  * @since New in 1.7. */
typedef|typedef
name|struct
name|svn_diff_hunk_t
name|svn_diff_hunk_t
typedef|;
comment|/**  * Allocate @a *stringbuf in @a result_pool, and read into it one line  * of the diff text of @a hunk. The hunk header is not returned only the  * unidiff data lines (starting with '+', '-', or ' ') are returned.  * If the @a hunk is being interpreted in reverse (i.e. the reverse  * parameter of svn_diff_parse_next_patch() was @c TRUE), the diff  * text will be returned in reversed form.  * The line-terminator is detected automatically and stored in @a *eol  * if @a eol is not NULL.  * If EOF is reached, set @a *eof to TRUE, and set @a *eol to NULL if the  * hunk does not end with a newline character and @a eol is not NULL.  * Temporary allocations will be performed in @a scratch_pool.  *  * @note The hunk header information can be retrieved with the following  * functions:  * @see svn_diff_hunk_get_original_start()  * @see svn_diff_hunk_get_original_length()  * @see svn_diff_hunk_get_modified_start()  * @see svn_diff_hunk_get_modified_length()  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_diff_hunk_readline_diff_text
parameter_list|(
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|,
name|svn_stringbuf_t
modifier|*
modifier|*
name|stringbuf
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|eol
parameter_list|,
name|svn_boolean_t
modifier|*
name|eof
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/**  * Allocate @a *stringbuf in @a result_pool, and read into it one line  * of the original text of @a hunk.  * The line-terminator is detected automatically and stored in @a *eol  * if @a eol is not NULL.  * If EOF is reached, set @a *eof to TRUE, and set @a *eol to NULL if the  * hunk text does not end with a newline character and @a eol is not NULL.  * Temporary allocations will be performed in @a scratch_pool.  *  * @see svn_diff_hunk_t  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_diff_hunk_readline_original_text
parameter_list|(
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|,
name|svn_stringbuf_t
modifier|*
modifier|*
name|stringbuf
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|eol
parameter_list|,
name|svn_boolean_t
modifier|*
name|eof
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/**  * Like svn_diff_hunk_readline_original_text(), but it returns lines from  * the modified text of the hunk.  *  * @see svn_diff_hunk_t  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_diff_hunk_readline_modified_text
parameter_list|(
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|,
name|svn_stringbuf_t
modifier|*
modifier|*
name|stringbuf
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|eol
parameter_list|,
name|svn_boolean_t
modifier|*
name|eof
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Reset the diff text of @a hunk so it can be read again from the start.  * @since New in 1.7. */
name|void
name|svn_diff_hunk_reset_diff_text
parameter_list|(
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Reset the original text of @a hunk so it can be read again from the start.  * @since New in 1.7. */
name|void
name|svn_diff_hunk_reset_original_text
parameter_list|(
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Reset the modified text of @a hunk so it can be read again from the start.  * @since New in 1.7. */
name|void
name|svn_diff_hunk_reset_modified_text
parameter_list|(
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Return the line offset of the original hunk text,  * as parsed from the hunk header.  * @since New in 1.7. */
name|svn_linenum_t
name|svn_diff_hunk_get_original_start
parameter_list|(
specifier|const
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Return the number of lines in the original @a hunk text,  * as parsed from the hunk header.  * @since New in 1.7. */
name|svn_linenum_t
name|svn_diff_hunk_get_original_length
parameter_list|(
specifier|const
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Return the line offset of the modified @a hunk text,  * as parsed from the hunk header.  * @since New in 1.7. */
name|svn_linenum_t
name|svn_diff_hunk_get_modified_start
parameter_list|(
specifier|const
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Return the number of lines in the modified @a hunk text,  * as parsed from the hunk header.  * @since New in 1.7. */
name|svn_linenum_t
name|svn_diff_hunk_get_modified_length
parameter_list|(
specifier|const
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Return the number of lines of leading context of @a hunk,  * i.e. the number of lines starting with ' ' before the first line  * that starts with a '+' or '-'.  * @since New in 1.7. */
name|svn_linenum_t
name|svn_diff_hunk_get_leading_context
parameter_list|(
specifier|const
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/** Return the number of lines of trailing context of @a hunk,  * i.e. the number of lines starting with ' ' after the last line  * that starts with a '+' or '-'.  * @since New in 1.7. */
name|svn_linenum_t
name|svn_diff_hunk_get_trailing_context
parameter_list|(
specifier|const
name|svn_diff_hunk_t
modifier|*
name|hunk
parameter_list|)
function_decl|;
comment|/**  * Data type to manage parsing of properties in patches.  * API users should not allocate structures of this type directly.  *  * @since New in 1.7. */
typedef|typedef
struct|struct
name|svn_prop_patch_t
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/** Represents the operation performed on the property */
name|svn_diff_operation_kind_t
name|operation
decl_stmt|;
comment|/**    * An array containing an svn_diff_hunk_t object for each hunk parsed    * from the patch associated with our property name */
name|apr_array_header_t
modifier|*
name|hunks
decl_stmt|;
block|}
name|svn_prop_patch_t
typedef|;
comment|/**  * Data type to manage parsing of patches.  * API users should not allocate structures of this type directly.  *  * @since New in 1.7. */
typedef|typedef
struct|struct
name|svn_patch_t
block|{
comment|/**    * The old and new file names as retrieved from the patch file.    * These paths are UTF-8 encoded and canonicalized, but otherwise    * left unchanged from how they appeared in the patch file. */
specifier|const
name|char
modifier|*
name|old_filename
decl_stmt|;
specifier|const
name|char
modifier|*
name|new_filename
decl_stmt|;
comment|/**    * An array containing an svn_diff_hunk_t * for each hunk parsed    * from the patch. */
name|apr_array_header_t
modifier|*
name|hunks
decl_stmt|;
comment|/**    * A hash table keyed by property names containing svn_prop_patch_t    * object for each property parsed from the patch. */
name|apr_hash_t
modifier|*
name|prop_patches
decl_stmt|;
comment|/**    * Represents the operation performed on the file. */
name|svn_diff_operation_kind_t
name|operation
decl_stmt|;
comment|/**    * Indicates whether the patch is being interpreted in reverse. */
name|svn_boolean_t
name|reverse
decl_stmt|;
comment|/**    * Mergeinfo parsed from svn:mergeinfo diff data, with one entry for    * forward merges and one for reverse merges.    * Either entry can be @c NULL if no such merges are part of the diff.    * @since New in 1.9. */
name|svn_mergeinfo_t
name|mergeinfo
decl_stmt|;
name|svn_mergeinfo_t
name|reverse_mergeinfo
decl_stmt|;
block|}
name|svn_patch_t
typedef|;
comment|/** An opaque type representing an open patch file.  *  * @since New in 1.7. */
typedef|typedef
name|struct
name|svn_patch_file_t
name|svn_patch_file_t
typedef|;
comment|/** Open @a patch_file at @a local_abspath.  * Allocate @a patch_file in @a result_pool.  *  * @since New in 1.7. */
name|svn_error_t
modifier|*
name|svn_diff_open_patch_file
parameter_list|(
name|svn_patch_file_t
modifier|*
modifier|*
name|patch_file
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/**  * Return the next @a *patch in @a patch_file.  * If no patch can be found, set @a *patch to NULL.  * If @a reverse is TRUE, invert the patch while parsing it.  * If @a ignore_whitespace is TRUE, allow patches with no leading  * whitespace to be parsed.  * Allocate results in @a result_pool.  * Use @a scratch_pool for all other allocations.  *  * @since New in 1.7. */
name|svn_error_t
modifier|*
name|svn_diff_parse_next_patch
parameter_list|(
name|svn_patch_t
modifier|*
modifier|*
name|patch
parameter_list|,
name|svn_patch_file_t
modifier|*
name|patch_file
parameter_list|,
name|svn_boolean_t
name|reverse
parameter_list|,
name|svn_boolean_t
name|ignore_whitespace
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/**  * Dispose of @a patch_file.  * Use @a scratch_pool for all temporary allocations.  *  * @since New in 1.7.  */
name|svn_error_t
modifier|*
name|svn_diff_close_patch_file
parameter_list|(
name|svn_patch_file_t
modifier|*
name|patch_file
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_DIFF_H */
end_comment

end_unit

