begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * client.h :  shared stuff internal to the client library.  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_CLIENT_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_CLIENT_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_opt.h"
end_include

begin_include
include|#
directive|include
file|"svn_string.h"
end_include

begin_include
include|#
directive|include
file|"svn_error.h"
end_include

begin_include
include|#
directive|include
file|"svn_ra.h"
end_include

begin_include
include|#
directive|include
file|"svn_client.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_magic.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_client_private.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_diff_tree.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_editor.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* Private client context.  *  * This is what is actually allocated by svn_client_create_context2(),  * which then returns the address of the public_ctx member. */
typedef|typedef
struct|struct
name|svn_client__private_ctx_t
block|{
comment|/* Reserved field, always zero, to detect misuse of the private      context as a public client context. */
name|apr_uint64_t
name|magic_null
decl_stmt|;
comment|/* Reserved field, always set to a known magic number, to identify      this struct as the private client context. */
name|apr_uint64_t
name|magic_id
decl_stmt|;
comment|/* Total number of bytes transferred over network across all RA sessions. */
name|apr_off_t
name|total_progress
decl_stmt|;
comment|/* The public context. */
name|svn_client_ctx_t
name|public_ctx
decl_stmt|;
block|}
name|svn_client__private_ctx_t
typedef|;
comment|/* Given a public client context CTX, return the private context    within which it is allocated. */
name|svn_client__private_ctx_t
modifier|*
name|svn_client__get_private_ctx
parameter_list|(
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* Set *ORIGINAL_REPOS_RELPATH and *ORIGINAL_REVISION to the original location    that served as the source of the copy from which PATH_OR_URL at REVISION was    created, or NULL and SVN_INVALID_REVNUM (respectively) if PATH_OR_URL at    REVISION was not the result of a copy operation.     If RA_SESSION is not NULL it is an existing session to the repository that    might be reparented temporarily to obtain the information.    */
name|svn_error_t
modifier|*
name|svn_client__get_copy_source
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|original_repos_relpath
parameter_list|,
name|svn_revnum_t
modifier|*
name|original_revision
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *START_URL and *START_REVISION (and maybe *END_URL    and *END_REVISION) to the revisions and repository URLs of one    (or two) points of interest along a particular versioned resource's    line of history.  PATH as it exists in "peg revision"    REVISION identifies that line of history, and START and END    specify the point(s) of interest (typically the revisions referred    to as the "operative range" for a given operation) along that history.     START_REVISION and/or END_REVISION may be NULL if not wanted.    END may be NULL or of kind svn_opt_revision_unspecified (in either case    END_URL and END_REVISION are not touched by the function);    START and REVISION may not.     If PATH is a WC path and REVISION is of kind svn_opt_revision_working,    then look at the PATH's copy-from URL instead of its base URL.     RA_SESSION should be an open RA session pointing at the URL of PATH,    or NULL, in which case this function will open its own temporary session.     A NOTE ABOUT FUTURE REPORTING:     If either START or END are greater than REVISION, then do a    sanity check (since we cannot search future history yet): verify    that PATH in the future revision(s) is the "same object" as the    one pegged by REVISION.  In other words, all three objects must    be connected by a single line of history which exactly passes    through PATH at REVISION.  If this sanity check fails, return    SVN_ERR_CLIENT_UNRELATED_RESOURCES.  If PATH doesn't exist in the future    revision, SVN_ERR_FS_NOT_FOUND may also be returned.     CTX is the client context baton.     Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_client__repos_locations
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|start_url
parameter_list|,
name|svn_revnum_t
modifier|*
name|start_revision
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|end_url
parameter_list|,
name|svn_revnum_t
modifier|*
name|end_revision
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|start
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|end
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Trace a line of history of a particular versioned resource back to a  * specific revision.  *  * Set *OP_LOC_P to the location that the object PEG_LOC had in  * revision OP_REVNUM.  *  * RA_SESSION is an open RA session to the correct repository; it may be  * temporarily reparented inside this function. */
name|svn_error_t
modifier|*
name|svn_client__repos_location
parameter_list|(
name|svn_client__pathrev_t
modifier|*
modifier|*
name|op_loc_p
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|svn_client__pathrev_t
modifier|*
name|peg_loc
parameter_list|,
name|svn_revnum_t
name|op_revnum
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Set *SEGMENTS to an array of svn_location_segment_t * objects, each    representing a reposition location segment for the history of URL    in PEG_REVISION    between END_REVISION and START_REVISION, ordered from oldest    segment to youngest.  *SEGMENTS may be empty but it will never    be NULL.     This is basically a thin de-stream-ifying wrapper around the    svn_ra_get_location_segments() interface, which see for the rules    governing PEG_REVISION, START_REVISION, and END_REVISION.     RA_SESSION is an RA session open to the repository of URL; it may be    temporarily reparented within this function.     CTX is the client context baton.     Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_client__repos_location_segments
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|segments
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|svn_revnum_t
name|peg_revision
parameter_list|,
name|svn_revnum_t
name|start_revision
parameter_list|,
name|svn_revnum_t
name|end_revision
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Find the common ancestor of two locations in a repository.    Ancestry is determined by the 'copy-from' relationship and the normal    successor relationship.     Set *ANCESTOR_P to the location of the youngest common ancestor of    LOC1 and LOC2.  If the locations have no common ancestor (including if    they don't have the same repository root URL), set *ANCESTOR_P to NULL.     If SESSION is not NULL, use it for retrieving the common ancestor instead    of creating a new session.     Use the authentication baton cached in CTX to authenticate against    the repository.  Use POOL for all allocations.     See also svn_client__calc_youngest_common_ancestor() to find youngest    common ancestor for already fetched history-as-mergeinfo information.  */
name|svn_error_t
modifier|*
name|svn_client__get_youngest_common_ancestor
parameter_list|(
name|svn_client__pathrev_t
modifier|*
modifier|*
name|ancestor_p
parameter_list|,
specifier|const
name|svn_client__pathrev_t
modifier|*
name|loc1
parameter_list|,
specifier|const
name|svn_client__pathrev_t
modifier|*
name|loc2
parameter_list|,
name|svn_ra_session_t
modifier|*
name|session
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Find the common ancestor of two locations in a repository using already    fetched history-as-mergeinfo information.     Ancestry is determined by the 'copy-from' relationship and the normal    successor relationship.     Set *ANCESTOR_P to the location of the youngest common ancestor of    LOC1 and LOC2.  If the locations have no common ancestor (including if    they don't have the same repository root URL), set *ANCESTOR_P to NULL.     HISTORY1, HAS_REV_ZERO_HISTORY1, HISTORY2, HAS_REV_ZERO_HISTORY2 are    history-as-mergeinfo information as returned by    svn_client__get_history_as_mergeinfo() for LOC1 and LOC2 respectively.     See also svn_client__get_youngest_common_ancestor().  */
name|svn_error_t
modifier|*
name|svn_client__calc_youngest_common_ancestor
parameter_list|(
name|svn_client__pathrev_t
modifier|*
modifier|*
name|ancestor_p
parameter_list|,
specifier|const
name|svn_client__pathrev_t
modifier|*
name|loc1
parameter_list|,
name|apr_hash_t
modifier|*
name|history1
parameter_list|,
name|svn_boolean_t
name|has_rev_zero_history1
parameter_list|,
specifier|const
name|svn_client__pathrev_t
modifier|*
name|loc2
parameter_list|,
name|apr_hash_t
modifier|*
name|history2
parameter_list|,
name|svn_boolean_t
name|has_rev_zero_history2
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Ensure that RA_SESSION's session URL matches SESSION_URL,    reparenting that session if necessary.    Store the previous session URL in *OLD_SESSION_URL (so that if the    reparenting is meant to be temporary, the caller can reparent the    session back to where it was).     If SESSION_URL is NULL, treat this as a magic value meaning "point    the RA session to the root of the repository".     NOTE: The typical usage pattern for this functions is:         const char *old_session_url;        SVN_ERR(svn_client__ensure_ra_session_url(&old_session_url,                                                  ra_session,                                                  new_session_url,                                                  pool);         [...]         SVN_ERR(svn_ra_reparent(ra_session, old_session_url, pool)); */
name|svn_error_t
modifier|*
name|svn_client__ensure_ra_session_url
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|old_session_url
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|char
modifier|*
name|session_url
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------- */
comment|/*** RA callbacks ***/
comment|/* CTX is of type "svn_client_ctx_t *". */
define|#
directive|define
name|SVN_CLIENT__HAS_LOG_MSG_FUNC
parameter_list|(
name|ctx
parameter_list|)
define|\
value|((ctx)->log_msg_func3 || (ctx)->log_msg_func2 || (ctx)->log_msg_func)
comment|/* Open an RA session, returning it in *RA_SESSION or a corrected URL    in *CORRECTED_URL.  (This function mirrors svn_ra_open4(), which    see, regarding the interpretation and handling of these two parameters.)     The root of the session is specified by BASE_URL and BASE_DIR_ABSPATH.     Additional control parameters:        - COMMIT_ITEMS is an array of svn_client_commit_item_t *         structures, present only for working copy commits, NULL otherwise.        - WRITE_DAV_PROPS indicates that the RA layer can clear and write         the DAV properties in the working copy of BASE_DIR_ABSPATH.        - READ_DAV_PROPS indicates that the RA layer should not attempt to         modify the WC props directly, but is still allowed to read them.     BASE_DIR_ABSPATH may be NULL if the RA operation does not correspond to a    working copy (in which case, WRITE_DAV_PROPS and READ_DAV_PROPS must be    FALSE.     If WRITE_DAV_PROPS and READ_DAV_PROPS are both FALSE the working copy may    still be used for locating pristine files via their SHA1.     The calling application's authentication baton is provided in CTX,    and allocations related to this session are performed in POOL.     NOTE: The reason for the _internal suffix of this function's name is to    avoid confusion with the public API svn_client_open_ra_session(). */
name|svn_error_t
modifier|*
name|svn_client__open_ra_session_internal
parameter_list|(
name|svn_ra_session_t
modifier|*
modifier|*
name|ra_session
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|corrected_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_url
parameter_list|,
specifier|const
name|char
modifier|*
name|base_dir_abspath
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|commit_items
parameter_list|,
name|svn_boolean_t
name|write_dav_props
parameter_list|,
name|svn_boolean_t
name|read_dav_props
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_client__ra_provide_base
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|contents
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_client__ra_provide_props
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|props
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_client__ra_get_copysrc_kind
parameter_list|(
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_relpath
parameter_list|,
name|svn_revnum_t
name|src_revision
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
name|void
modifier|*
name|svn_client__ra_make_cb_baton
parameter_list|(
name|svn_wc_context_t
modifier|*
name|wc_ctx
parameter_list|,
name|apr_hash_t
modifier|*
name|relpath_map
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------- */
comment|/*** Add/delete ***/
comment|/* If AUTOPROPS is not null: Then read automatic properties matching PATH    from AUTOPROPS.  AUTOPROPS is is a hash as per    svn_client__get_all_auto_props.  Set *PROPERTIES to a hash containing    propname/value pairs (const char * keys mapping to svn_string_t * values).     If AUTOPROPS is null then set *PROPERTIES to an empty hash.     If *MIMETYPE is null or "application/octet-stream" then check AUTOPROPS    for a matching svn:mime-type.  If AUTOPROPS is null or no match is found    and MAGIC_COOKIE is not NULL, then then try to detect the mime-type with    libmagic.  If a mimetype is found then add it to *PROPERTIES and set    *MIMETYPE to the mimetype value or NULL otherwise.     Allocate the *PROPERTIES and its contents as well as *MIMETYPE, in    RESULT_POOL.  Use SCRATCH_POOL for temporary allocations. */
name|svn_error_t
modifier|*
name|svn_client__get_paths_auto_props
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|properties
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|mimetype
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_magic__cookie_t
modifier|*
name|magic_cookie
parameter_list|,
name|apr_hash_t
modifier|*
name|autoprops
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Gather all auto-props from CTX->config (or none if auto-props are    disabled) and all svn:auto-props explicitly set on or inherited    by PATH_OR_URL.     If PATH_OR_URL is an unversioned WC path then gather the    svn:auto-props inherited by PATH_OR_URL's nearest versioned    parent.     If PATH_OR_URL is a URL ask for the properties @HEAD, if it is a WC    path as sfor the working properties.     Store both types of auto-props in *AUTOPROPS, a hash mapping const    char * file patterns to another hash which maps const char * property    names to const char *property values.     If a given property name exists for the same pattern in both the config    file and in an a svn:auto-props property, the latter overrides the    former.  If a given property name exists for the same pattern in two    different inherited svn:auto-props, then the closer path-wise    property overrides the more distant. svn:auto-props explicitly set    on PATH_OR_URL have the highest precedence and override inherited props    and config file settings.     Allocate *AUTOPROPS in RESULT_POOL.  Use SCRATCH_POOL for temporary    allocations. */
name|svn_error_t
modifier|*
name|svn_client__get_all_auto_props
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|autoprops
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* The main logic for client deletion from a working copy. Deletes PATH    from CTX->WC_CTX.  If PATH (or any item below a directory PATH) is    modified the delete will fail and return an error unless FORCE or KEEP_LOCAL    is TRUE.     If KEEP_LOCAL is TRUE then PATH is only scheduled from deletion from the    repository and a local copy of PATH will be kept in the working copy.     If DRY_RUN is TRUE all the checks are made to ensure that the delete can    occur, but the working copy is not modified.  If NOTIFY_FUNC is not    null, it is called with NOTIFY_BATON for each file or directory deleted. */
name|svn_error_t
modifier|*
name|svn_client__wc_delete
parameter_list|(
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|force
parameter_list|,
name|svn_boolean_t
name|dry_run
parameter_list|,
name|svn_boolean_t
name|keep_local
parameter_list|,
name|svn_wc_notify_func2_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Like svn_client__wc_delete(), but deletes multiple TARGETS efficiently. */
name|svn_error_t
modifier|*
name|svn_client__wc_delete_many
parameter_list|(
specifier|const
name|apr_array_header_t
modifier|*
name|targets
parameter_list|,
name|svn_boolean_t
name|force
parameter_list|,
name|svn_boolean_t
name|dry_run
parameter_list|,
name|svn_boolean_t
name|keep_local
parameter_list|,
name|svn_wc_notify_func2_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Make LOCAL_ABSPATH and add it to the working copy, optionally making all    the intermediate parent directories if MAKE_PARENTS is TRUE. */
name|svn_error_t
modifier|*
name|svn_client__make_local_parents
parameter_list|(
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|make_parents
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------- */
comment|/*** Checkout, update and switch ***/
comment|/* Update a working copy LOCAL_ABSPATH to REVISION, and (if not NULL) set    RESULT_REV to the update revision.     If DEPTH is svn_depth_unknown, then use whatever depth is already    set for LOCAL_ABSPATH, or @c svn_depth_infinity if LOCAL_ABSPATH does    not exist.     Else if DEPTH is svn_depth_infinity, then update fully recursively    (resetting the existing depth of the working copy if necessary).    Else if DEPTH is svn_depth_files, update all files under LOCAL_ABSPATH (if    any), but exclude any subdirectories.  Else if DEPTH is    svn_depth_immediates, update all files and include immediate    subdirectories (at svn_depth_empty).  Else if DEPTH is    svn_depth_empty, just update LOCAL_ABSPATH; if LOCAL_ABSPATH is a    directory, that means touching only its properties not its entries.     If DEPTH_IS_STICKY is set and DEPTH is not svn_depth_unknown, then    in addition to updating LOCAL_ABSPATH, also set its sticky ambient depth    value to DEPTH.     If IGNORE_EXTERNALS is true, do no externals processing.     Set *TIMESTAMP_SLEEP to TRUE if a sleep is required; otherwise do not    change *TIMESTAMP_SLEEP.  The output will be valid even if the function    returns an error.     If ALLOW_UNVER_OBSTRUCTIONS is TRUE, unversioned children of LOCAL_ABSPATH    that obstruct items added from the repos are tolerated; if FALSE,    these obstructions cause the update to fail.     If ADDS_AS_MODIFICATION is TRUE, local additions are handled as    modifications on added nodes.     If INNERUPDATE is true, no anchor check is performed on the update target.     If MAKE_PARENTS is true, allow the update to calculate and checkout    (with depth=empty) any parent directories of the requested update    target which are missing from the working copy.     If RA_SESSION is NOT NULL, it may be used to avoid creating a new    session. The session may point to a different URL after returning.     NOTE:  You may not specify both INNERUPDATE and MAKE_PARENTS as true. */
name|svn_error_t
modifier|*
name|svn_client__update_internal
parameter_list|(
name|svn_revnum_t
modifier|*
name|result_rev
parameter_list|,
name|svn_boolean_t
modifier|*
name|timestamp_sleep
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|depth_is_sticky
parameter_list|,
name|svn_boolean_t
name|ignore_externals
parameter_list|,
name|svn_boolean_t
name|allow_unver_obstructions
parameter_list|,
name|svn_boolean_t
name|adds_as_modification
parameter_list|,
name|svn_boolean_t
name|make_parents
parameter_list|,
name|svn_boolean_t
name|innerupdate
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Checkout into LOCAL_ABSPATH a working copy of URL at REVISION, and (if not    NULL) set RESULT_REV to the checked out revision.     If DEPTH is svn_depth_infinity, then check out fully recursively.    Else if DEPTH is svn_depth_files, checkout all files under LOCAL_ABSPATH (if    any), but not subdirectories.  Else if DEPTH is    svn_depth_immediates, check out all files and include immediate    subdirectories (at svn_depth_empty).  Else if DEPTH is    svn_depth_empty, just check out LOCAL_ABSPATH, with none of its entries.     DEPTH must be a definite depth, not (e.g.) svn_depth_unknown.     If IGNORE_EXTERNALS is true, do no externals processing.     Set *TIMESTAMP_SLEEP to TRUE if a sleep is required; otherwise do not    change *TIMESTAMP_SLEEP.  The output will be valid even if the function    returns an error.     If ALLOW_UNVER_OBSTRUCTIONS is TRUE,    unversioned children of LOCAL_ABSPATH that obstruct items added from    the repos are tolerated; if FALSE, these obstructions cause the checkout    to fail.     If RA_SESSION is NOT NULL, it may be used to avoid creating a new    session. The session may point to a different URL after returning.    */
name|svn_error_t
modifier|*
name|svn_client__checkout_internal
parameter_list|(
name|svn_revnum_t
modifier|*
name|result_rev
parameter_list|,
name|svn_boolean_t
modifier|*
name|timestamp_sleep
parameter_list|,
specifier|const
name|char
modifier|*
name|URL
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|peg_revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|ignore_externals
parameter_list|,
name|svn_boolean_t
name|allow_unver_obstructions
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Switch a working copy PATH to URL@PEG_REVISION at REVISION, and (if not    NULL) set RESULT_REV to the switch revision. A write lock will be    acquired and released if not held. Only switch as deeply as DEPTH    indicates.     Set *TIMESTAMP_SLEEP to TRUE if a sleep is required; otherwise do not    change *TIMESTAMP_SLEEP.  The output will be valid even if the function    returns an error.     If IGNORE_EXTERNALS is true, don't process externals.     If ALLOW_UNVER_OBSTRUCTIONS is TRUE, unversioned children of PATH    that obstruct items added from the repos are tolerated; if FALSE,    these obstructions cause the switch to fail.     DEPTH and DEPTH_IS_STICKY behave as for svn_client__update_internal().     If IGNORE_ANCESTRY is true, don't perform a common ancestry check    between the PATH and URL; otherwise, do, and return    SVN_ERR_CLIENT_UNRELATED_RESOURCES if they aren't related. */
name|svn_error_t
modifier|*
name|svn_client__switch_internal
parameter_list|(
name|svn_revnum_t
modifier|*
name|result_rev
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|peg_revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|depth_is_sticky
parameter_list|,
name|svn_boolean_t
name|ignore_externals
parameter_list|,
name|svn_boolean_t
name|allow_unver_obstructions
parameter_list|,
name|svn_boolean_t
name|ignore_ancestry
parameter_list|,
name|svn_boolean_t
modifier|*
name|timestamp_sleep
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------- */
comment|/*** Inheritable Properties ***/
comment|/* Convert any svn_prop_inherited_item_t elements in INHERITED_PROPS which    have repository root relative path PATH_OR_URL structure members to URLs    using REPOS_ROOT_URL.  Changes to the contents of INHERITED_PROPS are    allocated in RESULT_POOL.  SCRATCH_POOL is used for temporary    allocations. */
name|svn_error_t
modifier|*
name|svn_client__iprop_relpaths_to_urls
parameter_list|(
name|apr_array_header_t
modifier|*
name|inherited_props
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Fetch the inherited properties for the base of LOCAL_ABSPATH as well    as any WC roots under LOCAL_ABSPATH (as limited by DEPTH) using    RA_SESSION.  Store the results in *WCROOT_IPROPS, a hash mapping    const char * absolute working copy paths to depth-first ordered arrays    of svn_prop_inherited_item_t * structures.     Any svn_prop_inherited_item_t->path_or_url members returned in    *WCROOT_IPROPS are repository relative paths.     If LOCAL_ABSPATH has no base then do nothing.     RA_SESSION should be an open RA session pointing at the URL of PATH,    or NULL, in which case this function will use its own temporary session.     Allocate *WCROOT_IPROPS in RESULT_POOL, use SCRATCH_POOL for temporary    allocations.     If one or more of the paths are not available in the repository at the    specified revision, these paths will not be added to the hashtable. */
name|svn_error_t
modifier|*
name|svn_client__get_inheritable_props
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|wcroot_iprops
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------- */
comment|/*** Editor for repository diff ***/
comment|/* Create an editor for a pure repository comparison, i.e. comparing one    repository version against the other.     DIFF_CALLBACKS/DIFF_CMD_BATON represent the callback that implements    the comparison.     DEPTH is the depth to recurse.     RA_SESSION is an RA session through which this editor may fetch    properties, file contents and directory listings of the 'old' side of the    diff. It is a separate RA session from the one through which this editor    is being driven. REVISION is the revision number of the 'old' side of    the diff.     If TEXT_DELTAS is FALSE, then do not expect text deltas from the edit    drive, nor send the 'before' and 'after' texts to the diff callbacks;    instead, send empty files to the diff callbacks if there was a change.    This must be FALSE if the edit producer is not sending text deltas,    otherwise the file content checksum comparisons will fail.     EDITOR/EDIT_BATON return the newly created editor and baton.     @since New in 1.8.    */
name|svn_error_t
modifier|*
name|svn_client__get_diff_editor2
parameter_list|(
specifier|const
name|svn_delta_editor_t
modifier|*
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
modifier|*
name|edit_baton
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|svn_boolean_t
name|text_deltas
parameter_list|,
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------- */
comment|/*** Editor for diff summary ***/
comment|/* Set *DIFF_PROCESSOR to a diff processor that will report a diff summary    to SUMMARIZE_FUNC.     P_ROOT_RELPATH will return a pointer to a string that must be set to    the root of the operation before the processor is called.     ORIGINAL_PATH specifies the original path and will be used with    **ANCHOR_PATH to create paths as the user originally provided them    to the diff function.     SUMMARIZE_FUNC is called with SUMMARIZE_BATON as parameter by the    created callbacks for each changed item. */
name|svn_error_t
modifier|*
name|svn_client__get_diff_summarize_callbacks
parameter_list|(
specifier|const
name|svn_diff_tree_processor_t
modifier|*
modifier|*
name|diff_processor
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
modifier|*
name|p_root_relpath
parameter_list|,
name|svn_client_diff_summarize_func_t
name|summarize_func
parameter_list|,
name|void
modifier|*
name|summarize_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|original_target
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* ---------------------------------------------------------------- */
comment|/*** Copy Stuff ***/
comment|/* This structure is used to associate a specific copy or move SRC with a    specific copy or move destination.  It also contains information which    various helper functions may need.  Not every copy function uses every    field. */
typedef|typedef
struct|struct
name|svn_client__copy_pair_t
block|{
comment|/* The absolute source path or url. */
specifier|const
name|char
modifier|*
name|src_abspath_or_url
decl_stmt|;
comment|/* The base name of the object.  It should be the same for both src        and dst. */
specifier|const
name|char
modifier|*
name|base_name
decl_stmt|;
comment|/* The node kind of the source */
name|svn_node_kind_t
name|src_kind
decl_stmt|;
comment|/* The original source name.  (Used when the source gets overwritten by a        peg revision lookup.) */
specifier|const
name|char
modifier|*
name|src_original
decl_stmt|;
comment|/* The source operational revision. */
name|svn_opt_revision_t
name|src_op_revision
decl_stmt|;
comment|/* The source peg revision. */
name|svn_opt_revision_t
name|src_peg_revision
decl_stmt|;
comment|/* The source revision number. */
name|svn_revnum_t
name|src_revnum
decl_stmt|;
comment|/* The absolute destination path or url */
specifier|const
name|char
modifier|*
name|dst_abspath_or_url
decl_stmt|;
comment|/* The absolute source path or url of the destination's parent. */
specifier|const
name|char
modifier|*
name|dst_parent_abspath
decl_stmt|;
block|}
name|svn_client__copy_pair_t
typedef|;
comment|/* ---------------------------------------------------------------- */
comment|/*** Commit Stuff ***/
comment|/* WARNING: This is all new, untested, un-peer-reviewed conceptual    stuff.     The day that 'svn switch' came into existence, our old commit    crawler (svn_wc_crawl_local_mods) became obsolete.  It relied far    too heavily on the on-disk hierarchy of files and directories, and    simply had no way to support disjoint working copy trees or nest    working copies.  The primary reason for this is that commit    process, in order to guarantee atomicity, is a single drive of a    commit editor which is based not on working copy paths, but on    URLs.  With the completion of 'svn switch', it became all too    likely that the on-disk working copy hierarchy would no longer be    guaranteed to map to a similar in-repository hierarchy.     Aside from this new brokenness of the old system, an unrelated    feature request had cropped up -- the ability to know in advance of    your commit, exactly what would be committed (so that log messages    could be initially populated with this information).  Since the old    crawler discovered commit candidates while in the process of    committing, it was impossible to harvest this information upfront.    As a workaround, svn_wc_statuses() was used to stat the whole    working copy for changes before the commit started...and then the    commit would again stat the whole tree for changes.     Enter the new system.     The primary goal of this system is very straightforward: harvest    all commit candidate information up front, and cache enough info in    the process to use this to drive a URL-sorted commit.     *** END-OF-KNOWLEDGE ***     The prototypes below are still in development.  In general, the    idea is that commit-y processes ('svn mkdir URL', 'svn delete URL',    'svn commit', 'svn copy WC_PATH URL', 'svn copy URL1 URL2', 'svn    move URL1 URL2', others?) generate the cached commit candidate    information, and hand this information off to a consumer which is    responsible for driving the RA layer's commit editor in a    URL-depth-first fashion and reporting back the post-commit    information.  */
comment|/* Structure that contains an apr_hash_t * hash of apr_array_header_t *    arrays of svn_client_commit_item3_t * structures; keyed by the    canonical repository URLs. For faster lookup, it also provides    an hash index keyed by the local absolute path. */
typedef|typedef
struct|struct
name|svn_client__committables_t
block|{
comment|/* apr_array_header_t array of svn_client_commit_item3_t structures      keyed by canonical repository URL */
name|apr_hash_t
modifier|*
name|by_repository
decl_stmt|;
comment|/* svn_client_commit_item3_t structures keyed by local absolute path      (path member in the respective structures).       This member is for fast lookup only, i.e. whether there is an      entry for the given path or not, but it will only allow for one      entry per absolute path (in case of duplicate entries in the      above arrays). The "canonical" data storage containing all item      is by_repository. */
name|apr_hash_t
modifier|*
name|by_path
decl_stmt|;
block|}
name|svn_client__committables_t
typedef|;
comment|/* Callback for the commit harvester to check if a node exists at the specified    url */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_client__check_url_kind_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Recursively crawl a set of working copy paths (BASE_DIR_ABSPATH + each    item in the TARGETS array) looking for commit candidates, locking    working copy directories as the crawl progresses.  For each    candidate found:       - create svn_client_commit_item3_t for the candidate.       - add the structure to an apr_array_header_t array of commit        items that are in the same repository, creating a new array if        necessary.       - add (or update) a reference to this array to the by_repository        hash within COMMITTABLES and update the by_path member as well-       - if the candidate has a lock token, add it to the LOCK_TOKENS hash.       - if the candidate is a directory scheduled for deletion, crawl        the directories children recursively for any lock tokens and        add them to the LOCK_TOKENS array.     At the successful return of this function, COMMITTABLES will point    a new svn_client__committables_t*.  LOCK_TOKENS will point to a hash    table with const char * lock tokens, keyed on const char * URLs.     If DEPTH is specified, descend (or not) into each target in TARGETS    as specified by DEPTH; the behavior is the same as that described    for svn_client_commit4().     If DEPTH_EMPTY_START is>= 0, all targets after index DEPTH_EMPTY_START    in TARGETS are handled as having svn_depth_empty.     If JUST_LOCKED is TRUE, treat unmodified items with lock tokens as    commit candidates.     If CHANGELISTS is non-NULL, it is an array of const char *    changelist names used as a restrictive filter    when harvesting committables; that is, don't add a path to    COMMITTABLES unless it's a member of one of those changelists.     If CTX->CANCEL_FUNC is non-null, it will be called with    CTX->CANCEL_BATON while harvesting to determine if the client has    cancelled the operation. */
name|svn_error_t
modifier|*
name|svn_client__harvest_committables
parameter_list|(
name|svn_client__committables_t
modifier|*
modifier|*
name|committables
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|lock_tokens
parameter_list|,
specifier|const
name|char
modifier|*
name|base_dir_abspath
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|targets
parameter_list|,
name|int
name|depth_empty_start
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_boolean_t
name|just_locked
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|changelists
parameter_list|,
name|svn_client__check_url_kind_t
name|check_url_func
parameter_list|,
name|void
modifier|*
name|check_url_baton
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Recursively crawl each absolute working copy path SRC in COPY_PAIRS,    harvesting commit_items into a COMMITABLES structure as if every entry    at or below the SRC was to be committed as a set of adds (mostly with    history) to a new repository URL (DST in COPY_PAIRS).     If CTX->CANCEL_FUNC is non-null, it will be called with    CTX->CANCEL_BATON while harvesting to determine if the client has    cancelled the operation.  */
name|svn_error_t
modifier|*
name|svn_client__get_copy_committables
parameter_list|(
name|svn_client__committables_t
modifier|*
modifier|*
name|committables
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|copy_pairs
parameter_list|,
name|svn_client__check_url_kind_t
name|check_url_func
parameter_list|,
name|void
modifier|*
name|check_url_baton
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Rewrite the COMMIT_ITEMS array to be sorted by URL.  Also, discover    a common *BASE_URL for the items in the array, and rewrite those    items' URLs to be relative to that *BASE_URL.     COMMIT_ITEMS is an array of (svn_client_commit_item3_t *) items.     Afterwards, some of the items in COMMIT_ITEMS may contain data    allocated in POOL. */
name|svn_error_t
modifier|*
name|svn_client__condense_commit_items
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|base_url
parameter_list|,
name|apr_array_header_t
modifier|*
name|commit_items
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Commit the items in the COMMIT_ITEMS array using EDITOR/EDIT_BATON    to describe the committed local mods.  Prior to this call,    COMMIT_ITEMS should have been run through (and BASE_URL generated    by) svn_client__condense_commit_items().     COMMIT_ITEMS is an array of (svn_client_commit_item3_t *) items.     CTX->NOTIFY_FUNC/CTX->BATON will be called as the commit progresses, as    a way of describing actions to the application layer (if non NULL).     NOTIFY_PATH_PREFIX will be passed to CTX->notify_func2() as the    common absolute path prefix of the committed paths.  It can be NULL.     If SHA1_CHECKSUMS is not NULL, set *SHA1_CHECKSUMS to a hash containing,    for each file transmitted, a mapping from the commit-item's (const    char *) path to the (const svn_checksum_t *) SHA1 checksum of its new text    base.     Use RESULT_POOL for all allocating the resulting hashes and SCRATCH_POOL    for temporary allocations.    */
name|svn_error_t
modifier|*
name|svn_client__do_commit
parameter_list|(
specifier|const
name|char
modifier|*
name|base_url
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|commit_items
parameter_list|,
specifier|const
name|svn_delta_editor_t
modifier|*
name|editor
parameter_list|,
name|void
modifier|*
name|edit_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|notify_path_prefix
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|sha1_checksums
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/*** Externals (Modules) ***/
comment|/* Handle changes to the svn:externals property described by EXTERNALS_NEW,    and AMBIENT_DEPTHS.  The tree's top level directory    is at TARGET_ABSPATH which has a root URL of REPOS_ROOT_URL.    A write lock should be held.     For each changed value of the property, discover the nature of the    change and behave appropriately -- either check a new "external"    subdir, or call svn_wc_remove_from_revision_control() on an    existing one, or both.     TARGET_ABSPATH is the root of the driving operation and    REQUESTED_DEPTH is the requested depth of the driving operation    (e.g., update, switch, etc).  If it is neither svn_depth_infinity    nor svn_depth_unknown, then changes to svn:externals will have no    effect.  If REQUESTED_DEPTH is svn_depth_unknown, then the ambient    depth of each working copy directory holding an svn:externals value    will determine whether that value is interpreted there (the ambient    depth must be svn_depth_infinity).  If REQUESTED_DEPTH is    svn_depth_infinity, then it is presumed to be expanding any    shallower ambient depth, so changes to svn:externals values will be    interpreted.     Pass NOTIFY_FUNC with NOTIFY_BATON along to svn_client_checkout().     Set *TIMESTAMP_SLEEP to TRUE if a sleep is required; otherwise do not    change *TIMESTAMP_SLEEP.  The output will be valid even if the function    returns an error.     If RA_SESSION is NOT NULL, it may be used to avoid creating a new    session. The session may point to a different URL after returning.     Use POOL for temporary allocation. */
name|svn_error_t
modifier|*
name|svn_client__handle_externals
parameter_list|(
name|apr_hash_t
modifier|*
name|externals_new
parameter_list|,
name|apr_hash_t
modifier|*
name|ambient_depths
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
specifier|const
name|char
modifier|*
name|target_abspath
parameter_list|,
name|svn_depth_t
name|requested_depth
parameter_list|,
name|svn_boolean_t
modifier|*
name|timestamp_sleep
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Export externals definitions described by EXTERNALS, a hash of the    form returned by svn_wc_edited_externals() (which see). The external    items will be exported instead of checked out -- they will have no    administrative subdirectories.     The checked out or exported tree's top level directory is at    TO_ABSPATH and corresponds to FROM_URL URL in the repository, which    has a root URL of REPOS_ROOT_URL.     REQUESTED_DEPTH is the requested_depth of the driving operation; it    behaves as for svn_client__handle_externals(), except that ambient    depths are presumed to be svn_depth_infinity.     NATIVE_EOL is the value passed as NATIVE_EOL when exporting.     Use POOL for temporary allocation. */
name|svn_error_t
modifier|*
name|svn_client__export_externals
parameter_list|(
name|apr_hash_t
modifier|*
name|externals
parameter_list|,
specifier|const
name|char
modifier|*
name|from_url
parameter_list|,
specifier|const
name|char
modifier|*
name|to_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
name|svn_depth_t
name|requested_depth
parameter_list|,
specifier|const
name|char
modifier|*
name|native_eol
parameter_list|,
name|svn_boolean_t
name|ignore_keywords
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Baton for svn_client__dirent_fetcher */
struct|struct
name|svn_client__dirent_fetcher_baton_t
block|{
name|svn_ra_session_t
modifier|*
name|ra_session
decl_stmt|;
name|svn_revnum_t
name|target_revision
decl_stmt|;
specifier|const
name|char
modifier|*
name|anchor_url
decl_stmt|;
block|}
struct|;
comment|/* Implements svn_wc_dirents_func_t for update and switch handling. Assumes    a struct svn_client__dirent_fetcher_baton_t * baton */
name|svn_error_t
modifier|*
name|svn_client__dirent_fetcher
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|dirents
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_root_url
parameter_list|,
specifier|const
name|char
modifier|*
name|repos_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Retrieve log messages using the first provided (non-NULL) callback    in the set of *CTX->log_msg_func3, CTX->log_msg_func2, or    CTX->log_msg_func.  Other arguments same as    svn_client_get_commit_log3_t. */
name|svn_error_t
modifier|*
name|svn_client__get_log_msg
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|log_msg
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|tmp_file
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|commit_items
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Return the revision properties stored in REVPROP_TABLE_IN, adding    LOG_MSG as SVN_PROP_REVISION_LOG in *REVPROP_TABLE_OUT, allocated in    POOL.  *REVPROP_TABLE_OUT will map const char * property names to    svn_string_t values.  If REVPROP_TABLE_IN is non-NULL, check that    it doesn't contain any of the standard Subversion properties.  In    that case, return SVN_ERR_CLIENT_PROPERTY_NAME. */
name|svn_error_t
modifier|*
name|svn_client__ensure_revprop_table
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|revprop_table_out
parameter_list|,
specifier|const
name|apr_hash_t
modifier|*
name|revprop_table_in
parameter_list|,
specifier|const
name|char
modifier|*
name|log_msg
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Return a potentially translated version of local file LOCAL_ABSPATH    in NORMAL_STREAM.  REVISION must be one of the following: BASE, COMMITTED,    WORKING.     EXPAND_KEYWORDS operates as per the EXPAND argument to    svn_subst_stream_translated, which see.  If NORMALIZE_EOLS is TRUE and    LOCAL_ABSPATH requires translation, then normalize the line endings in    *NORMAL_STREAM.     Uses SCRATCH_POOL for temporary allocations. */
name|svn_error_t
modifier|*
name|svn_client__get_normalized_stream
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|normal_stream
parameter_list|,
name|svn_wc_context_t
modifier|*
name|wc_ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
name|svn_boolean_t
name|expand_keywords
parameter_list|,
name|svn_boolean_t
name|normalize_eols
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Return a set of callbacks to use with the Ev2 shims. */
name|svn_delta_shim_callbacks_t
modifier|*
name|svn_client__get_shim_callbacks
parameter_list|(
name|svn_wc_context_t
modifier|*
name|wc_ctx
parameter_list|,
name|apr_hash_t
modifier|*
name|relpath_map
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/* Return REVISION unless its kind is 'unspecified' in which case return  * a pointer to a statically allocated revision structure of kind 'head'  * if PATH_OR_URL is a URL or 'base' if it is a WC path. */
specifier|const
name|svn_opt_revision_t
modifier|*
name|svn_cl__rev_default_to_head_or_base
parameter_list|(
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|)
function_decl|;
comment|/* Return REVISION unless its kind is 'unspecified' in which case return  * a pointer to a statically allocated revision structure of kind 'head'  * if PATH_OR_URL is a URL or 'working' if it is a WC path. */
specifier|const
name|svn_opt_revision_t
modifier|*
name|svn_cl__rev_default_to_head_or_working
parameter_list|(
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
name|path_or_url
parameter_list|)
function_decl|;
comment|/* Return REVISION unless its kind is 'unspecified' in which case return  * PEG_REVISION. */
specifier|const
name|svn_opt_revision_t
modifier|*
name|svn_cl__rev_default_to_peg
parameter_list|(
specifier|const
name|svn_opt_revision_t
modifier|*
name|revision
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|peg_revision
parameter_list|)
function_decl|;
comment|/* Call the conflict resolver callback in CTX for each conflict recorded  * in CONFLICTED_PATHS (const char *abspath keys; ignored values).  If  * CONFLICTS_REMAIN is not NULL, then set *CONFLICTS_REMAIN to true if  * there are any conflicts among CONFLICTED_PATHS remaining unresolved  * at the end of this operation, else set it to false.  */
name|svn_error_t
modifier|*
name|svn_client__resolve_conflicts
parameter_list|(
name|svn_boolean_t
modifier|*
name|conflicts_remain
parameter_list|,
name|apr_hash_t
modifier|*
name|conflicted_paths
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Produce a diff with depth DEPTH between two files or two directories at  * LEFT_ABSPATH1 and RIGHT_ABSPATH, using the provided diff callbacks to  * show changes in files. The files and directories involved may be part of  * a working copy or they may be unversioned. For versioned files, show  * property changes, too.  *  * If ANCHOR_ABSPATH is not null, set it to the anchor of the diff before  * the first processor call. (The anchor is LEFT_ABSPATH or an ancestor of it)  */
name|svn_error_t
modifier|*
name|svn_client__arbitrary_nodes_diff
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|root_relpath
parameter_list|,
name|svn_boolean_t
modifier|*
name|root_is_dir
parameter_list|,
specifier|const
name|char
modifier|*
name|left_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|right_abspath
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|diff_processor
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Helper for the remote case of svn_client_propget.  *  * If PROPS is not null, then get the value of property PROPNAME in  * REVNUM, using RA_SESSION.  Store the value ('svn_string_t *') in  * PROPS, under the path key "TARGET_PREFIX/TARGET_RELATIVE"  * ('const char *').  *  * If INHERITED_PROPS is not null, then set *INHERITED_PROPS to a  * depth-first ordered array of svn_prop_inherited_item_t * structures  * representing the PROPNAME properties inherited by the target.  If  * INHERITABLE_PROPS in not null and no inheritable properties are found,  * then set *INHERITED_PROPS to an empty array.  *  * Recurse according to DEPTH, similarly to svn_client_propget3().  *  * KIND is the kind of the node at "TARGET_PREFIX/TARGET_RELATIVE".  * Yes, caller passes this; it makes the recursion more efficient :-).  *  * Allocate PROPS and *INHERITED_PROPS in RESULT_POOL, but do all temporary  * work in SCRATCH_POOL.  The two pools can be the same; recursive  * calls may use a different SCRATCH_POOL, however.  */
name|svn_error_t
modifier|*
name|svn_client__remote_propget
parameter_list|(
name|apr_hash_t
modifier|*
name|props
parameter_list|,
name|apr_array_header_t
modifier|*
modifier|*
name|inherited_props
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
specifier|const
name|char
modifier|*
name|target_prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|target_relative
parameter_list|,
name|svn_node_kind_t
name|kind
parameter_list|,
name|svn_revnum_t
name|revnum
parameter_list|,
name|svn_ra_session_t
modifier|*
name|ra_session
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_CLIENT_H */
end_comment

end_unit

