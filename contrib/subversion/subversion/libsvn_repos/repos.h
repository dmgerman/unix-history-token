begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* repos.h : interface to Subversion repository, private to libsvn_repos  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_REPOS_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_REPOS_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|"svn_fs.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* Repository format number.     Formats 0, 1 and 2 were pre-1.0.     Format 3 was current for 1.0 through to 1.3.     Format 4 was an abortive experiment during the development of the    locking feature in the lead up to 1.2.     Format 5 was new in 1.4, and is the first format which may contain    BDB or FSFS filesystems with a FS format other than 1, since prior    formats are accepted by some versions of Subversion which do not    pay attention to the FS format number. */
define|#
directive|define
name|SVN_REPOS__FORMAT_NUMBER
value|SVN_REPOS__FORMAT_NUMBER_1_4
define|#
directive|define
name|SVN_REPOS__FORMAT_NUMBER_1_4
value|5
define|#
directive|define
name|SVN_REPOS__FORMAT_NUMBER_LEGACY
value|3
comment|/*** Repository layout. ***/
comment|/* The top-level repository dir contains a README and various    subdirectories.  */
define|#
directive|define
name|SVN_REPOS__README
value|"README.txt"
comment|/* Explanation for trespassers. */
define|#
directive|define
name|SVN_REPOS__FORMAT
value|"format"
comment|/* Stores the current version                                                of the repository. */
define|#
directive|define
name|SVN_REPOS__DB_DIR
value|"db"
comment|/* Where Berkeley lives. */
define|#
directive|define
name|SVN_REPOS__DAV_DIR
value|"dav"
comment|/* DAV sandbox, for pre-1.5 */
define|#
directive|define
name|SVN_REPOS__LOCK_DIR
value|"locks"
comment|/* Lock files live here. */
define|#
directive|define
name|SVN_REPOS__HOOK_DIR
value|"hooks"
comment|/* Hook programs. */
define|#
directive|define
name|SVN_REPOS__CONF_DIR
value|"conf"
comment|/* Configuration files. */
comment|/* Things for which we keep lockfiles. */
define|#
directive|define
name|SVN_REPOS__DB_LOCKFILE
value|"db.lock"
comment|/* Our Berkeley lockfile. */
define|#
directive|define
name|SVN_REPOS__DB_LOGS_LOCKFILE
value|"db-logs.lock"
comment|/* BDB logs lockfile. */
comment|/* In the repository hooks directory, look for these files. */
define|#
directive|define
name|SVN_REPOS__HOOK_START_COMMIT
value|"start-commit"
define|#
directive|define
name|SVN_REPOS__HOOK_PRE_COMMIT
value|"pre-commit"
define|#
directive|define
name|SVN_REPOS__HOOK_POST_COMMIT
value|"post-commit"
define|#
directive|define
name|SVN_REPOS__HOOK_READ_SENTINEL
value|"read-sentinels"
define|#
directive|define
name|SVN_REPOS__HOOK_WRITE_SENTINEL
value|"write-sentinels"
define|#
directive|define
name|SVN_REPOS__HOOK_PRE_REVPROP_CHANGE
value|"pre-revprop-change"
define|#
directive|define
name|SVN_REPOS__HOOK_POST_REVPROP_CHANGE
value|"post-revprop-change"
define|#
directive|define
name|SVN_REPOS__HOOK_PRE_LOCK
value|"pre-lock"
define|#
directive|define
name|SVN_REPOS__HOOK_POST_LOCK
value|"post-lock"
define|#
directive|define
name|SVN_REPOS__HOOK_PRE_UNLOCK
value|"pre-unlock"
define|#
directive|define
name|SVN_REPOS__HOOK_POST_UNLOCK
value|"post-unlock"
comment|/* The extension added to the names of example hook scripts. */
define|#
directive|define
name|SVN_REPOS__HOOK_DESC_EXT
value|".tmpl"
comment|/* The file which contains a custom set of environment variables  * passed inherited to hook scripts, in the repository conf directory. */
define|#
directive|define
name|SVN_REPOS__CONF_HOOKS_ENV
value|"hooks-env"
comment|/* The name of the default section in the hooks-env config file. */
define|#
directive|define
name|SVN_REPOS__HOOKS_ENV_DEFAULT_SECTION
value|"default"
comment|/* The configuration file for svnserve, in the repository conf directory. */
define|#
directive|define
name|SVN_REPOS__CONF_SVNSERVE_CONF
value|"svnserve.conf"
comment|/* In the svnserve default configuration, these are the suggested    locations for the passwd, authz and groups files (in the repository    conf directory), and we put example templates there. */
define|#
directive|define
name|SVN_REPOS__CONF_PASSWD
value|"passwd"
define|#
directive|define
name|SVN_REPOS__CONF_AUTHZ
value|"authz"
define|#
directive|define
name|SVN_REPOS__CONF_GROUPS
value|"groups"
comment|/* The Repository object, created by svn_repos_open2() and    svn_repos_create(). */
struct|struct
name|svn_repos_t
block|{
comment|/* A Subversion filesystem object. */
name|svn_fs_t
modifier|*
name|fs
decl_stmt|;
comment|/* The path to the repository's top-level directory. */
name|char
modifier|*
name|path
decl_stmt|;
comment|/* The path to the repository's conf directory. */
name|char
modifier|*
name|conf_path
decl_stmt|;
comment|/* The path to the repository's hooks directory. */
name|char
modifier|*
name|hook_path
decl_stmt|;
comment|/* The path to the repository's locks directory. */
name|char
modifier|*
name|lock_path
decl_stmt|;
comment|/* The path to the Berkeley DB filesystem environment. */
name|char
modifier|*
name|db_path
decl_stmt|;
comment|/* The format number of this repository. */
name|int
name|format
decl_stmt|;
comment|/* The path to the repository's hooks enviroment file. If NULL, hooks run    * in an empty environment. */
specifier|const
name|char
modifier|*
name|hooks_env_path
decl_stmt|;
comment|/* The FS backend in use within this repository. */
specifier|const
name|char
modifier|*
name|fs_type
decl_stmt|;
comment|/* If non-null, a list of all the capabilities the client (on the      current connection) has self-reported.  Each element is a      'const char *', one of SVN_RA_CAPABILITY_*.       Note: it is somewhat counterintuitive that we store the client's      capabilities, which are session-specific, on the repository      object.  You'd think the capabilities here would represent the      *repository's* capabilities, but no, they represent the      client's -- we just don't have any other place to persist them. */
specifier|const
name|apr_array_header_t
modifier|*
name|client_capabilities
decl_stmt|;
comment|/* Maps SVN_REPOS_CAPABILITY_foo keys to "yes" or "no" values.      If a capability is not yet discovered, it is absent from the table.      Most likely the keys and values are constants anyway (and      sufficiently well-informed internal code may just compare against      those constants' addresses, therefore). */
name|apr_hash_t
modifier|*
name|repository_capabilities
decl_stmt|;
comment|/* Pool from which this structure was allocated.  Also used for      auxiliary repository-related data that requires a matching      lifespan.  (As the svn_repos_t structure tends to be relatively      long-lived, please be careful regarding this pool's usage.)  */
name|apr_pool_t
modifier|*
name|pool
decl_stmt|;
block|}
struct|;
comment|/*** Hook-running Functions ***/
comment|/* Set *HOOKS_ENV_P to the parsed contents of the hooks-env file    LOCAL_ABSPATH, allocated in RESULT_POOL.  (This result is suitable    for delivery to the various hook wrapper functions which accept a    'hooks_env' parameter.)  If LOCAL_ABSPATH is NULL, set *HOOKS_ENV_P    to NULL.     Use SCRATCH_POOL for temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_repos__parse_hooks_env
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|hooks_env_p
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Run the start-commit hook for REPOS.  Use POOL for any temporary    allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     USER is the authenticated name of the user starting the commit.     CAPABILITIES is a list of 'const char *' capability names (using    SVN_RA_CAPABILITY_*) that the client has self-reported.  Note that    there is no guarantee the client is telling the truth: the hook    should not make security assumptions based on the capabilities.     TXN_NAME is the name of the commit transaction that's just been    created. */
name|svn_error_t
modifier|*
name|svn_repos__hooks_start_commit
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|capabilities
parameter_list|,
specifier|const
name|char
modifier|*
name|txn_name
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the pre-commit hook for REPOS.  Use POOL for any temporary    allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     TXN_NAME is the name of the transaction that is being committed.  */
name|svn_error_t
modifier|*
name|svn_repos__hooks_pre_commit
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
specifier|const
name|char
modifier|*
name|txn_name
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the post-commit hook for REPOS.  Use POOL for any temporary    allocations.  If the hook fails, run SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     REV is the revision that was created as a result of the commit.  */
name|svn_error_t
modifier|*
name|svn_repos__hooks_post_commit
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|txn_name
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the pre-revprop-change hook for REPOS.  Use POOL for any    temporary allocations.  If the hook fails, return    SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     REV is the revision whose property is being changed.    AUTHOR is the authenticated name of the user changing the prop.    NAME is the name of the property being changed.    NEW_VALUE is the new value of the property.    ACTION is indicates if the property is being 'A'dded, 'M'odified,    or 'D'eleted.     The pre-revprop-change hook will have the new property value    written to its stdin.  If the property is being deleted, no data    will be written. */
name|svn_error_t
modifier|*
name|svn_repos__hooks_pre_revprop_change
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|new_value
parameter_list|,
name|char
name|action
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the pre-revprop-change hook for REPOS.  Use POOL for any    temporary allocations.  If the hook fails, return    SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     REV is the revision whose property was changed.    AUTHOR is the authenticated name of the user who changed the prop.    NAME is the name of the property that was changed, and OLD_VALUE is    that property's value immediately before the change, or null if    none.  ACTION indicates if the property was 'A'dded, 'M'odified,    or 'D'eleted.     The old value will be passed to the post-revprop hook on stdin.  If    the property is being created, no data will be written. */
name|svn_error_t
modifier|*
name|svn_repos__hooks_post_revprop_change
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|author
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|old_value
parameter_list|,
name|char
name|action
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the pre-lock hook for REPOS.  Use POOL for any temporary    allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     PATH is the path being locked, USERNAME is the person doing it,    COMMENT is the comment of the lock, and is treated as an empty    string when NULL is given.  STEAL-LOCK is a flag if the user is    stealing the lock.     If TOKEN is non-null, set *TOKEN to a new lock token generated by    the pre-lock hook, if any (see the pre-lock hook template for more    information).  If TOKEN is non-null but the hook does not return    any token, then set *TOKEN to empty string. */
name|svn_error_t
modifier|*
name|svn_repos__hooks_pre_lock
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
specifier|const
name|char
modifier|*
name|comment
parameter_list|,
name|svn_boolean_t
name|steal_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the post-lock hook for REPOS.  Use POOL for any temporary    allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     PATHS is an array of paths being locked, USERNAME is the person    who did it.  */
name|svn_error_t
modifier|*
name|svn_repos__hooks_post_lock
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the pre-unlock hook for REPOS.  Use POOL for any temporary    allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     PATH is the path being unlocked, USERNAME is the person doing it,    TOKEN is the lock token to be unlocked which should not be NULL,    and BREAK-LOCK is a flag if the user is breaking the lock.  */
name|svn_error_t
modifier|*
name|svn_repos__hooks_pre_unlock
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
name|svn_boolean_t
name|break_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Run the post-unlock hook for REPOS.  Use POOL for any temporary    allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.     HOOKS_ENV is a hash of hook script environment information returned    via svn_repos__parse_hooks_env() (or NULL if no such information is    available).     PATHS is an array of paths being unlocked, USERNAME is the person    who did it.  */
name|svn_error_t
modifier|*
name|svn_repos__hooks_post_unlock
parameter_list|(
name|svn_repos_t
modifier|*
name|repos
parameter_list|,
name|apr_hash_t
modifier|*
name|hooks_env
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
specifier|const
name|char
modifier|*
name|username
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/*** Authz Functions ***/
comment|/* Read authz configuration data from PATH into *AUTHZ_P, allocated    in POOL.  If GROUPS_PATH is set, use the global groups parsed from it.     PATH and GROUPS_PATH may be a dirent or a registry path and iff ACCEPT_URLS    is set it may also be an absolute file url.     If PATH or GROUPS_PATH is not a valid authz rule file, then return    SVN_AUTHZ_INVALID_CONFIG.  The contents of *AUTHZ_P is then    undefined.  If MUST_EXIST is TRUE, a missing authz or global groups file    is also an error. */
name|svn_error_t
modifier|*
name|svn_repos__authz_read
parameter_list|(
name|svn_authz_t
modifier|*
modifier|*
name|authz_p
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|groups_path
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|svn_boolean_t
name|accept_urls
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Walk the configuration in AUTHZ looking for any errors. */
name|svn_error_t
modifier|*
name|svn_repos__authz_validate
parameter_list|(
name|svn_authz_t
modifier|*
name|authz
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/*** Utility Functions ***/
comment|/* Set *CHANGED_P to TRUE if ROOT1/PATH1 and ROOT2/PATH2 have    different contents, FALSE if they have the same contents.    Use POOL for temporary allocation. */
name|svn_error_t
modifier|*
name|svn_repos__compare_files
parameter_list|(
name|svn_boolean_t
modifier|*
name|changed_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root1
parameter_list|,
specifier|const
name|char
modifier|*
name|path1
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root2
parameter_list|,
specifier|const
name|char
modifier|*
name|path2
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Set *PREV_PATH and *PREV_REV to the path and revision which    represent the location at which PATH in FS was located immediately    prior to REVISION iff there was a copy operation (to PATH or one of    its parent directories) between that previous location and    PATH@REVISION, and set *APPEARED_REV to the first revision in which    PATH@REVISION appeared at PATH as a result of that copy operation.     If there was no such copy operation in that portion    of PATH's history, set *PREV_PATH to NULL, and set *PREV_REV and    *APPEARED_REV to SVN_INVALID_REVNUM.     NOTE: Any of PREV_PATH, PREV_REV, and APPEARED_REV may be NULL to    if that information is of no interest to the caller.  */
name|svn_error_t
modifier|*
name|svn_repos__prev_location
parameter_list|(
name|svn_revnum_t
modifier|*
name|appeared_rev
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|prev_path
parameter_list|,
name|svn_revnum_t
modifier|*
name|prev_rev
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_REPOS_H */
end_comment

end_unit

