begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * fs_loader.h:  Declarations for the FS loader library  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|LIBSVN_FS_FS_H
end_ifndef

begin_define
define|#
directive|define
name|LIBSVN_FS_FS_H
end_define

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_fs.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* The FS loader library implements the a front end to "filesystem    abstract providers" (FSAPs), which implement the svn_fs API.     The loader library divides up the FS API into several categories:       - Top-level functions, which operate on paths to an FS      - Functions which operate on an FS object      - Functions which operate on a transaction object      - Functions which operate on a root object      - Functions which operate on a history object      - Functions which operate on a noderev-ID object     Some generic fields of the FS, transaction, root, and history    objects are defined by the loader library; the rest are stored in    the "fsap_data" field which is defined by the FSAP.  Likewise, some    of the very simple svn_fs API functions (such as svn_fs_root_fs)    are defined by the loader library, while the rest are implemented    through vtable calls defined by the FSAP.     If you are considering writing a new database-backed filesystem    implementation, it may be appropriate to add a second, lower-level    abstraction to the libsvn_fs_base library which currently    implements the BDB filesystem type.  Consult the dev list for    details on the "FSP-level" abstraction concept. */
comment|/*** Top-level library vtable type ***/
typedef|typedef
struct|struct
name|fs_library_vtable_t
block|{
comment|/* This field should always remain first in the vtable.      Apart from that, it can be changed however you like, since exact      version equality is required between loader and module.  This policy      was weaker during 1.1.x, but only in ways which do not conflict with      this statement, now that the minor version has increased. */
specifier|const
name|svn_version_t
modifier|*
function_decl|(
modifier|*
name|get_version
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* The open_fs/create/open_fs_for_recovery/upgrade_fs functions are      serialized so that they may use the common_pool parameter to      allocate fs-global objects such as the bdb env cache. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|create
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|open_fs
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
comment|/* open_for_recovery() is like open(), but used to fill in an fs pointer      that will be passed to recover().  We assume that the open() method      might not be immediately appropriate for recovery. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|open_fs_for_recovery
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|upgrade_fs
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|verify_fs
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
name|start
parameter_list|,
name|svn_revnum_t
name|end
parameter_list|,
name|svn_fs_progress_notify_func_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|delete_fs
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|hotcopy
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|src_fs
parameter_list|,
name|svn_fs_t
modifier|*
name|dst_fs
parameter_list|,
specifier|const
name|char
modifier|*
name|src_path
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_path
parameter_list|,
name|svn_boolean_t
name|clean
parameter_list|,
name|svn_boolean_t
name|incremental
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|get_description
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|recover
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|pack_fs
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_fs_pack_notify_t
name|notify_func
parameter_list|,
name|void
modifier|*
name|notify_baton
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
comment|/* Provider-specific functions should go here, even if they could go      in an object vtable, so that they are all kept together. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|bdb_logfiles
function_decl|)
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|logfiles
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_boolean_t
name|only_unused
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* This is to let the base provider implement the deprecated      svn_fs_parse_id, which we've decided doesn't belong in the FS      API.  If we change our minds and decide to add a real      svn_fs_parse_id variant which takes an FS object, it should go      into the FS vtable. */
name|svn_fs_id_t
modifier|*
function_decl|(
modifier|*
name|parse_id
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|apr_size_t
name|len
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Allow an FSAP to call svn_fs_open(), which is in a higher-level library      (libsvn_fs-1.so) and cannot easily be moved to libsvn_fs_util. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_svn_fs_open
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_fs_open_
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|apr_hash_t
modifier|*
parameter_list|,
name|apr_pool_t
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
block|}
name|fs_library_vtable_t
typedef|;
comment|/* This is the type of symbol an FS module defines to fetch the    library vtable. The LOADER_VERSION parameter must remain first in    the list, and the function must use the C calling convention on all    platforms, so that the init functions can safely read the version    parameter.  The COMMON_POOL parameter must be a pool with a greater    lifetime than the fs module so that fs global state can be kept    in it and cleaned up on termination before the fs module is unloaded.    Calls to these functions are globally serialized so that they have    exclusive access to the COMMON_POOL parameter.     ### need to force this to be __cdecl on Windows... how?? */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|fs_init_func_t
function_decl|)
parameter_list|(
specifier|const
name|svn_version_t
modifier|*
name|loader_version
parameter_list|,
name|fs_library_vtable_t
modifier|*
modifier|*
name|vtable
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
comment|/* Here are the declarations for the FS module init functions.  If we    are using DSO loading, they won't actually be linked into    libsvn_fs.  Note that these private functions have a common_pool    parameter that may be used for fs module scoped variables such as    the bdb cache.  This will be the same common_pool that is passed    to the create and open functions and these init functions (as well    as the open and create functions) are globally serialized so that    they have exclusive access to the common_pool. */
name|svn_error_t
modifier|*
name|svn_fs_base__init
parameter_list|(
specifier|const
name|svn_version_t
modifier|*
name|loader_version
parameter_list|,
name|fs_library_vtable_t
modifier|*
modifier|*
name|vtable
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
name|svn_fs_fs__init
parameter_list|(
specifier|const
name|svn_version_t
modifier|*
name|loader_version
parameter_list|,
name|fs_library_vtable_t
modifier|*
modifier|*
name|vtable
parameter_list|,
name|apr_pool_t
modifier|*
name|common_pool
parameter_list|)
function_decl|;
comment|/*** vtable types for the abstract FS objects ***/
typedef|typedef
struct|struct
name|fs_vtable_t
block|{
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|youngest_rev
function_decl|)
parameter_list|(
name|svn_revnum_t
modifier|*
name|youngest_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|revision_prop
function_decl|)
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|value_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|revision_proplist
function_decl|)
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|table_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|change_rev_prop
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
specifier|const
modifier|*
name|old_value_p
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* There is no get_uuid(); see svn_fs_t.uuid docstring. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|set_uuid
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|uuid
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|revision_root
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
modifier|*
name|root_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|begin_txn
function_decl|)
parameter_list|(
name|svn_fs_txn_t
modifier|*
modifier|*
name|txn_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_uint32_t
name|flags
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|open_txn
function_decl|)
parameter_list|(
name|svn_fs_txn_t
modifier|*
modifier|*
name|txn
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|purge_txn
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|txn_id
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|list_transactions
function_decl|)
parameter_list|(
name|apr_array_header_t
modifier|*
modifier|*
name|names_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|deltify
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_revnum_t
name|rev
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|lock
function_decl|)
parameter_list|(
name|svn_lock_t
modifier|*
modifier|*
name|lock
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
specifier|const
name|char
modifier|*
name|comment
parameter_list|,
name|svn_boolean_t
name|is_dav_comment
parameter_list|,
name|apr_time_t
name|expiration_date
parameter_list|,
name|svn_revnum_t
name|current_rev
parameter_list|,
name|svn_boolean_t
name|steal_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|generate_lock_token
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|token
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|unlock
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|token
parameter_list|,
name|svn_boolean_t
name|break_lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|get_lock
function_decl|)
parameter_list|(
name|svn_lock_t
modifier|*
modifier|*
name|lock
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|get_locks
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_depth_t
name|depth
parameter_list|,
name|svn_fs_get_locks_callback_t
name|get_locks_func
parameter_list|,
name|void
modifier|*
name|get_locks_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|verify_root
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|freeze
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|svn_fs_freeze_func_t
name|freeze_func
parameter_list|,
name|void
modifier|*
name|freeze_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|bdb_set_errcall
function_decl|)
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
name|void
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|errpfx
parameter_list|,
name|char
modifier|*
name|msg
parameter_list|)
parameter_list|)
function_decl|;
block|}
name|fs_vtable_t
typedef|;
typedef|typedef
struct|struct
name|txn_vtable_t
block|{
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|commit
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|conflict_p
parameter_list|,
name|svn_revnum_t
modifier|*
name|new_rev
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|abort
function_decl|)
parameter_list|(
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|get_prop
function_decl|)
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|value_p
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|get_proplist
function_decl|)
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|table_p
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|change_prop
function_decl|)
parameter_list|(
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|root
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
modifier|*
name|root_p
parameter_list|,
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|change_props
function_decl|)
parameter_list|(
name|svn_fs_txn_t
modifier|*
name|txn
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|props
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
block|}
name|txn_vtable_t
typedef|;
comment|/* Some of these operations accept multiple root arguments.  Since the    roots may not all have the same vtable, we need a rule to determine    which root's vtable is used.  The rule is: if one of the roots is    named "target", we use that root's vtable; otherwise, we use the    first root argument's vtable.    These callbacks correspond to svn_fs_* functions in include/svn_fs.h,    see there for details.    Note: delete_node() corresponds to svn_fs_delete(). */
typedef|typedef
struct|struct
name|root_vtable_t
block|{
comment|/* Determining what has changed in a root */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|paths_changed
function_decl|)
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|changed_paths_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Generic node operations */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|check_path
function_decl|)
parameter_list|(
name|svn_node_kind_t
modifier|*
name|kind_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_history
function_decl|)
parameter_list|(
name|svn_fs_history_t
modifier|*
modifier|*
name|history_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_id
function_decl|)
parameter_list|(
specifier|const
name|svn_fs_id_t
modifier|*
modifier|*
name|id_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_created_rev
function_decl|)
parameter_list|(
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_origin_rev
function_decl|)
parameter_list|(
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_created_path
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|created_path
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|delete_node
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|copied_from
function_decl|)
parameter_list|(
name|svn_revnum_t
modifier|*
name|rev_p
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|path_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|closest_copy
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
modifier|*
name|root_p
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|path_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Property operations */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_prop
function_decl|)
parameter_list|(
name|svn_string_t
modifier|*
modifier|*
name|value_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_proplist
function_decl|)
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|table_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|change_node_prop
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|props_changed
function_decl|)
parameter_list|(
name|int
modifier|*
name|changed_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root1
parameter_list|,
specifier|const
name|char
modifier|*
name|path1
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root2
parameter_list|,
specifier|const
name|char
modifier|*
name|path2
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Directories */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|dir_entries
function_decl|)
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|entries_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|make_dir
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|copy
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
name|from_root
parameter_list|,
specifier|const
name|char
modifier|*
name|from_path
parameter_list|,
name|svn_fs_root_t
modifier|*
name|to_root
parameter_list|,
specifier|const
name|char
modifier|*
name|to_path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|revision_link
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
name|from_root
parameter_list|,
name|svn_fs_root_t
modifier|*
name|to_root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Files */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_length
function_decl|)
parameter_list|(
name|svn_filesize_t
modifier|*
name|length_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_checksum
function_decl|)
parameter_list|(
name|svn_checksum_t
modifier|*
modifier|*
name|checksum
parameter_list|,
name|svn_checksum_kind_t
name|kind
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_contents
function_decl|)
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|contents
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|try_process_file_contents
function_decl|)
parameter_list|(
name|svn_boolean_t
modifier|*
name|success
parameter_list|,
name|svn_fs_root_t
modifier|*
name|target_root
parameter_list|,
specifier|const
name|char
modifier|*
name|target_path
parameter_list|,
name|svn_fs_process_contents_func_t
name|processor
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|make_file
function_decl|)
parameter_list|(
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|apply_textdelta
function_decl|)
parameter_list|(
name|svn_txdelta_window_handler_t
modifier|*
name|contents_p
parameter_list|,
name|void
modifier|*
modifier|*
name|contents_baton_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_checksum_t
modifier|*
name|base_checksum
parameter_list|,
name|svn_checksum_t
modifier|*
name|result_checksum
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|apply_text
function_decl|)
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|contents_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|svn_checksum_t
modifier|*
name|result_checksum
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|contents_changed
function_decl|)
parameter_list|(
name|int
modifier|*
name|changed_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root1
parameter_list|,
specifier|const
name|char
modifier|*
name|path1
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root2
parameter_list|,
specifier|const
name|char
modifier|*
name|path2
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|get_file_delta_stream
function_decl|)
parameter_list|(
name|svn_txdelta_stream_t
modifier|*
modifier|*
name|stream_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|source_root
parameter_list|,
specifier|const
name|char
modifier|*
name|source_path
parameter_list|,
name|svn_fs_root_t
modifier|*
name|target_root
parameter_list|,
specifier|const
name|char
modifier|*
name|target_path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Merging. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|merge
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|conflict_p
parameter_list|,
name|svn_fs_root_t
modifier|*
name|source_root
parameter_list|,
specifier|const
name|char
modifier|*
name|source_path
parameter_list|,
name|svn_fs_root_t
modifier|*
name|target_root
parameter_list|,
specifier|const
name|char
modifier|*
name|target_path
parameter_list|,
name|svn_fs_root_t
modifier|*
name|ancestor_root
parameter_list|,
specifier|const
name|char
modifier|*
name|ancestor_path
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Mergeinfo. */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|get_mergeinfo
function_decl|)
parameter_list|(
name|svn_mergeinfo_catalog_t
modifier|*
name|catalog
parameter_list|,
name|svn_fs_root_t
modifier|*
name|root
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|paths
parameter_list|,
name|svn_mergeinfo_inheritance_t
name|inherit
parameter_list|,
name|svn_boolean_t
name|include_descendants
parameter_list|,
name|svn_boolean_t
name|adjust_inherited_mergeinfo
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
block|}
name|root_vtable_t
typedef|;
typedef|typedef
struct|struct
name|history_vtable_t
block|{
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|prev
function_decl|)
parameter_list|(
name|svn_fs_history_t
modifier|*
modifier|*
name|prev_history_p
parameter_list|,
name|svn_fs_history_t
modifier|*
name|history
parameter_list|,
name|svn_boolean_t
name|cross_copies
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|location
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|path
parameter_list|,
name|svn_revnum_t
modifier|*
name|revision
parameter_list|,
name|svn_fs_history_t
modifier|*
name|history
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
block|}
name|history_vtable_t
typedef|;
typedef|typedef
struct|struct
name|id_vtable_t
block|{
name|svn_string_t
modifier|*
function_decl|(
modifier|*
name|unparse
function_decl|)
parameter_list|(
specifier|const
name|svn_fs_id_t
modifier|*
name|id
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|compare
function_decl|)
parameter_list|(
specifier|const
name|svn_fs_id_t
modifier|*
name|a
parameter_list|,
specifier|const
name|svn_fs_id_t
modifier|*
name|b
parameter_list|)
function_decl|;
block|}
name|id_vtable_t
typedef|;
comment|/*** Definitions of the abstract FS object types ***/
comment|/* These are transaction properties that correspond to the bitfields    in the 'flags' argument to svn_fs_lock().  */
define|#
directive|define
name|SVN_FS__PROP_TXN_CHECK_LOCKS
value|SVN_PROP_PREFIX "check-locks"
define|#
directive|define
name|SVN_FS__PROP_TXN_CHECK_OOD
value|SVN_PROP_PREFIX "check-ood"
struct|struct
name|svn_fs_t
block|{
comment|/* The pool in which this fs object is allocated */
name|apr_pool_t
modifier|*
name|pool
decl_stmt|;
comment|/* The path to the repository's top-level directory */
name|char
modifier|*
name|path
decl_stmt|;
comment|/* A callback for printing warning messages */
name|svn_fs_warning_callback_t
name|warning
decl_stmt|;
name|void
modifier|*
name|warning_baton
decl_stmt|;
comment|/* The filesystem configuration */
name|apr_hash_t
modifier|*
name|config
decl_stmt|;
comment|/* An access context indicating who's using the fs */
name|svn_fs_access_t
modifier|*
name|access_ctx
decl_stmt|;
comment|/* FSAP-specific vtable and private data */
name|fs_vtable_t
modifier|*
name|vtable
decl_stmt|;
name|void
modifier|*
name|fsap_data
decl_stmt|;
comment|/* UUID, stored by open(), create(), and set_uuid(). */
specifier|const
name|char
modifier|*
name|uuid
decl_stmt|;
block|}
struct|;
struct|struct
name|svn_fs_txn_t
block|{
comment|/* The filesystem to which this transaction belongs */
name|svn_fs_t
modifier|*
name|fs
decl_stmt|;
comment|/* The revision on which this transaction is based, or      SVN_INVALID_REVISION if the transaction is not based on a      revision at all */
name|svn_revnum_t
name|base_rev
decl_stmt|;
comment|/* The ID of this transaction */
specifier|const
name|char
modifier|*
name|id
decl_stmt|;
comment|/* FSAP-specific vtable and private data */
name|txn_vtable_t
modifier|*
name|vtable
decl_stmt|;
name|void
modifier|*
name|fsap_data
decl_stmt|;
block|}
struct|;
struct|struct
name|svn_fs_root_t
block|{
comment|/* A pool managing this root (and only this root!) */
name|apr_pool_t
modifier|*
name|pool
decl_stmt|;
comment|/* The filesystem to which this root belongs */
name|svn_fs_t
modifier|*
name|fs
decl_stmt|;
comment|/* The kind of root this is */
name|svn_boolean_t
name|is_txn_root
decl_stmt|;
comment|/* For transaction roots, the name of the transaction  */
specifier|const
name|char
modifier|*
name|txn
decl_stmt|;
comment|/* For transaction roots, flags describing the txn's behavior. */
name|apr_uint32_t
name|txn_flags
decl_stmt|;
comment|/* For revision roots, the number of the revision; for transaction      roots, the number of the revision on which the transaction is      based. */
name|svn_revnum_t
name|rev
decl_stmt|;
comment|/* FSAP-specific vtable and private data */
name|root_vtable_t
modifier|*
name|vtable
decl_stmt|;
name|void
modifier|*
name|fsap_data
decl_stmt|;
block|}
struct|;
struct|struct
name|svn_fs_history_t
block|{
comment|/* FSAP-specific vtable and private data */
name|history_vtable_t
modifier|*
name|vtable
decl_stmt|;
name|void
modifier|*
name|fsap_data
decl_stmt|;
block|}
struct|;
struct|struct
name|svn_fs_id_t
block|{
comment|/* FSAP-specific vtable and private data */
name|id_vtable_t
modifier|*
name|vtable
decl_stmt|;
name|void
modifier|*
name|fsap_data
decl_stmt|;
block|}
struct|;
struct|struct
name|svn_fs_access_t
block|{
comment|/* An authenticated username using the fs */
specifier|const
name|char
modifier|*
name|username
decl_stmt|;
comment|/* A collection of lock-tokens supplied by the fs caller.      Hash maps (const char *) UUID --> (void *) 1      fs functions should really only be interested whether a UUID      exists as a hash key at all;  the value is irrelevant. */
name|apr_hash_t
modifier|*
name|lock_tokens
decl_stmt|;
block|}
struct|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

