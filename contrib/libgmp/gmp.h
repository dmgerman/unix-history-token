begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* gmp.h -- Definitions for GNU multiple precision functions.  Copyright (C) 1991, 1993, 1994, 1995, 1996 Free Software Foundation, Inc.  This file is part of the GNU MP Library.  The GNU MP Library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  The GNU MP Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details.  You should have received a copy of the GNU Library General Public License along with the GNU MP Library; see the file COPYING.LIB.  If not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GMP_H__
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|__GNU_MP__
end_ifndef

begin_define
define|#
directive|define
name|__GNU_MP__
value|2
end_define

begin_define
define|#
directive|define
name|__need_size_t
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_undef
undef|#
directive|undef
name|__need_size_t
end_undef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_define
define|#
directive|define
name|__gmp_const
value|const
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__gmp_const
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_if

begin_define
define|#
directive|define
name|__gmp_inline
value|__inline__
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__gmp_inline
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_EXTERN_INLINE
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_define
define|#
directive|define
name|_EXTERN_INLINE
value|extern __inline__
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_EXTERN_INLINE
value|static
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_SHORT_LIMB
end_ifdef

begin_typedef
typedef|typedef
name|unsigned
name|int
name|mp_limb_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|mp_limb_signed_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_ifdef
ifdef|#
directive|ifdef
name|_LONG_LONG_LIMB
end_ifdef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|long
name|int
name|mp_limb_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|long
name|int
name|mp_limb_signed_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|unsigned
name|long
name|int
name|mp_limb_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|int
name|mp_limb_signed_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|mp_limb_t
modifier|*
name|mp_ptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__gmp_const
name|mp_limb_t
modifier|*
name|mp_srcptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|int
name|mp_size_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|int
name|mp_exp_t
typedef|;
end_typedef

begin_ifndef
ifndef|#
directive|ifndef
name|__MP_SMALL__
end_ifndef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|_mp_alloc
decl_stmt|;
comment|/* Number of *limbs* allocated and pointed 				   to by the D field.  */
name|int
name|_mp_size
decl_stmt|;
comment|/* abs(SIZE) is the number of limbs 				   the last field points to.  If SIZE 				   is negative this is a negative 				   number.  */
name|mp_limb_t
modifier|*
name|_mp_d
decl_stmt|;
comment|/* Pointer to the limbs.  */
block|}
name|__mpz_struct
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
struct|struct
block|{
name|short
name|int
name|_mp_alloc
decl_stmt|;
comment|/* Number of *limbs* allocated and pointed 				   to by the D field.  */
name|short
name|int
name|_mp_size
decl_stmt|;
comment|/* abs(SIZE) is the number of limbs 				   the last field points to.  If SIZE 				   is negative this is a negative 				   number.  */
name|mp_limb_t
modifier|*
name|_mp_d
decl_stmt|;
comment|/* Pointer to the limbs.  */
block|}
name|__mpz_struct
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GNU_MP__ */
end_comment

begin_comment
comment|/* User-visible types.  */
end_comment

begin_typedef
typedef|typedef
name|__mpz_struct
name|MP_INT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__mpz_struct
name|mpz_t
index|[
literal|1
index|]
typedef|;
end_typedef

begin_comment
comment|/* Structure for rational numbers.  Zero is represented as 0/any, i.e.    the denominator is ignored.  Negative numbers have the sign in    the numerator.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|__mpz_struct
name|_mp_num
decl_stmt|;
name|__mpz_struct
name|_mp_den
decl_stmt|;
if|#
directive|if
literal|0
block|int _mp_num_alloc;
comment|/* Number of limbs allocated 				   for the numerator.  */
block|int _mp_num_size;
comment|/* The absolute value of this field is the 				   length of the numerator; the sign is the 				   sign of the entire rational number.  */
block|mp_ptr _mp_num;
comment|/* Pointer to the numerator limbs.  */
block|int _mp_den_alloc;
comment|/* Number of limbs allocated 				   for the denominator.  */
block|int _mp_den_size;
comment|/* Length of the denominator.  (This field 				   should always be positive.) */
block|mp_ptr _mp_den;
comment|/* Pointer to the denominator limbs.  */
endif|#
directive|endif
block|}
name|__mpq_struct
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__mpq_struct
name|MP_RAT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__mpq_struct
name|mpq_t
index|[
literal|1
index|]
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|_mp_prec
decl_stmt|;
comment|/* Max precision, in number of `mp_limb_t's. 				   Set by mpf_init and modified by 				   mpf_set_prec.  The area pointed to 				   by the `d' field contains `prec' + 1 				   limbs.  */
name|int
name|_mp_size
decl_stmt|;
comment|/* abs(SIZE) is the number of limbs 				   the last field points to.  If SIZE 				   is negative this is a negative 				   number.  */
name|mp_exp_t
name|_mp_exp
decl_stmt|;
comment|/* Exponent, in the base of `mp_limb_t'.  */
name|mp_limb_t
modifier|*
name|_mp_d
decl_stmt|;
comment|/* Pointer to the limbs.  */
block|}
name|__mpf_struct
typedef|;
end_typedef

begin_comment
comment|/* typedef __mpf_struct MP_FLOAT; */
end_comment

begin_typedef
typedef|typedef
name|__mpf_struct
name|mpf_t
index|[
literal|1
index|]
typedef|;
end_typedef

begin_comment
comment|/* Types for function declarations in gmp files.  */
end_comment

begin_comment
comment|/* ??? Should not pollute user name space with these ??? */
end_comment

begin_typedef
typedef|typedef
name|__gmp_const
name|__mpz_struct
modifier|*
name|mpz_srcptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__mpz_struct
modifier|*
name|mpz_ptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__gmp_const
name|__mpf_struct
modifier|*
name|mpf_srcptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__mpf_struct
modifier|*
name|mpf_ptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__gmp_const
name|__mpq_struct
modifier|*
name|mpq_srcptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__mpq_struct
modifier|*
name|mpq_ptr
typedef|;
end_typedef

begin_ifndef
ifndef|#
directive|ifndef
name|_PROTO
end_ifndef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_define
define|#
directive|define
name|_PROTO
parameter_list|(
name|x
parameter_list|)
value|x
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_PROTO
parameter_list|(
name|x
parameter_list|)
value|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__MPN
end_ifndef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_define
define|#
directive|define
name|__MPN
parameter_list|(
name|x
parameter_list|)
value|__mpn_##x
end_define

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_define
define|#
directive|define
name|__MPN
parameter_list|(
name|x
parameter_list|)
value|__CONCAT(__mpn_,x)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|FILE
argument_list|)
operator|||
name|defined
argument_list|(
name|H_STDIO
argument_list|)
operator|||
name|defined
argument_list|(
name|_H_STDIO
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|_STDIO_H
argument_list|)
operator|||
name|defined
argument_list|(
name|_STDIO_H_
argument_list|)
operator|||
name|defined
argument_list|(
name|__STDIO_H__
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|_STDIO_INCLUDED
argument_list|)
end_if

begin_define
define|#
directive|define
name|_GMP_H_HAVE_FILE
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|mp_set_memory_functions
name|_PROTO
argument_list|(
operator|(
name|void
operator|*
call|(
modifier|*
call|)
argument_list|(
name|size_t
argument_list|)
operator|,
name|void
operator|*
call|(
modifier|*
call|)
argument_list|(
name|void
operator|*
argument_list|,
name|size_t
argument_list|,
name|size_t
argument_list|)
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|,
name|size_t
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|__gmp_const
name|int
name|mp_bits_per_limb
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**************** Integer (i.e. Z) routines.  ****************/
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
name|void
modifier|*
name|_mpz_realloc
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_abs
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_add
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_add_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_and
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_array_init
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mp_size_t
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_cdiv_q
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_cdiv_q_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_cdiv_qr
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_cdiv_qr_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_cdiv_r
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_cdiv_r_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_cdiv_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_clear
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_clrbit
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_cmp
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_cmp_si
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|signed
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_cmp_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_com
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_divexact
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_fac_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_fdiv_q
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_fdiv_q_2exp
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_fdiv_q_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_fdiv_qr
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_fdiv_qr_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_fdiv_r
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_fdiv_r_2exp
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_fdiv_r_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_fdiv_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_gcd
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_gcd_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_gcdext
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|double
name|mpz_get_d
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
comment|/* signed */
name|long
name|int
name|mpz_get_si
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|char
modifier|*
name|mpz_get_str
name|_PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_get_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpz_getlimbn
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_hamdist
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_init
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|_GMP_H_HAVE_FILE
name|size_t
name|mpz_inp_binary
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpz_inp_raw
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpz_inp_str
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|void
name|mpz_init_set
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_init_set_d
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|double
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_init_set_si
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|signed
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_init_set_str
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_init_set_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_invert
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_ior
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_jacobi
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_legendre
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_mod
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_mul
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_mul_2exp
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_mul_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_neg
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|_GMP_H_HAVE_FILE
name|size_t
name|mpz_out_binary
name|_PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpz_out_raw
name|_PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpz_out_str
name|_PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|int
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|int
name|mpz_perfect_square_p
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_popcount
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_pow_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_powm
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_powm_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_probab_prime_p
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_random
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_random2
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_scan0
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpz_scan1
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_set
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_set_d
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|double
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_set_f
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_set_q
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_set_si
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|signed
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpz_set_str
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_set_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_setbit
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpz_size
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpz_sizeinbase
name|_PROTO
argument_list|(
operator|(
name|mpz_srcptr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_sqrt
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_sqrtrem
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_sub
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_sub_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_q
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_q_2exp
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_q_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_qr
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_qr_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_r
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_r_2exp
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_tdiv_r_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpz_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpz_ui_pow_ui
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|unsigned
name|long
name|int
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
comment|/**************** Rational (i.e. Q) routines.  ****************/
name|void
name|mpq_init
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_clear
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_set
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_set_ui
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|unsigned
name|long
name|int
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_set_si
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|signed
name|long
name|int
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_set_z
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_add
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpq_srcptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_sub
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpq_srcptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_mul
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpq_srcptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_div
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpq_srcptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_neg
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpq_cmp
name|_PROTO
argument_list|(
operator|(
name|mpq_srcptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpq_cmp_ui
name|_PROTO
argument_list|(
operator|(
name|mpq_srcptr
operator|,
name|unsigned
name|long
name|int
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpq_equal
name|_PROTO
argument_list|(
operator|(
name|mpq_srcptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_inv
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_set_num
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_set_den
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_get_num
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_get_den
name|_PROTO
argument_list|(
operator|(
name|mpz_ptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|double
name|mpq_get_d
name|_PROTO
argument_list|(
operator|(
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpq_canonicalize
name|_PROTO
argument_list|(
operator|(
name|mpq_ptr
operator|)
argument_list|)
decl_stmt|;
comment|/**************** Float (i.e. F) routines.  ****************/
name|void
name|mpf_abs
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_add
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_add_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_clear
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpf_cmp
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpf_cmp_si
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|,
name|signed
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpf_cmp_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_div
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_div_2exp
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_div_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_dump
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpf_eq
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|,
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|double
name|mpf_get_d
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpf_get_prec
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|char
modifier|*
name|mpf_get_str
name|_PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
name|mp_exp_t
operator|*
operator|,
name|int
operator|,
name|size_t
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_init
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_init2
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|_GMP_H_HAVE_FILE
name|size_t
name|mpf_inp_str
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|void
name|mpf_init_set
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_init_set_d
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|double
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_init_set_si
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|signed
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpf_init_set_str
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_init_set_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_mul
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_mul_2exp
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_mul_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_neg
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|_GMP_H_HAVE_FILE
name|size_t
name|mpf_out_str
name|_PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|int
operator|,
name|size_t
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|void
name|mpf_random2
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mp_size_t
operator|,
name|mp_exp_t
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_reldiff
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_d
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|double
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_default_prec
name|_PROTO
argument_list|(
operator|(
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_prec
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_prec_raw
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_q
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpq_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_si
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|signed
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpf_set_str
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_set_z
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpz_srcptr
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpf_size
name|_PROTO
argument_list|(
operator|(
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_sqrt
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_sqrt_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_sub
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_sub_ui
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|mpf_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_ui_div
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpf_ui_sub
name|_PROTO
argument_list|(
operator|(
name|mpf_ptr
operator|,
name|unsigned
name|long
name|int
operator|,
name|mpf_srcptr
operator|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/************ Low level positive-integer (i.e. N) routines.  ************/
end_comment

begin_comment
comment|/* This is ugly, but we need to make usr calls reach the prefixed function.  */
end_comment

begin_define
define|#
directive|define
name|mpn_add
value|__MPN(add)
end_define

begin_define
define|#
directive|define
name|mpn_add_1
value|__MPN(add_1)
end_define

begin_define
define|#
directive|define
name|mpn_add_n
value|__MPN(add_n)
end_define

begin_define
define|#
directive|define
name|mpn_addmul_1
value|__MPN(addmul_1)
end_define

begin_define
define|#
directive|define
name|mpn_bdivmod
value|__MPN(bdivmod)
end_define

begin_define
define|#
directive|define
name|mpn_cmp
value|__MPN(cmp)
end_define

begin_define
define|#
directive|define
name|mpn_divmod_1
value|__MPN(divmod_1)
end_define

begin_define
define|#
directive|define
name|mpn_divrem
value|__MPN(divrem)
end_define

begin_define
define|#
directive|define
name|mpn_divrem_1
value|__MPN(divrem_1)
end_define

begin_define
define|#
directive|define
name|mpn_dump
value|__MPN(dump)
end_define

begin_define
define|#
directive|define
name|mpn_gcd
value|__MPN(gcd)
end_define

begin_define
define|#
directive|define
name|mpn_gcd_1
value|__MPN(gcd_1)
end_define

begin_define
define|#
directive|define
name|mpn_gcdext
value|__MPN(gcdext)
end_define

begin_define
define|#
directive|define
name|mpn_get_str
value|__MPN(get_str)
end_define

begin_define
define|#
directive|define
name|mpn_hamdist
value|__MPN(hamdist)
end_define

begin_define
define|#
directive|define
name|mpn_lshift
value|__MPN(lshift)
end_define

begin_define
define|#
directive|define
name|mpn_mod_1
value|__MPN(mod_1)
end_define

begin_define
define|#
directive|define
name|mpn_mul
value|__MPN(mul)
end_define

begin_define
define|#
directive|define
name|mpn_mul_1
value|__MPN(mul_1)
end_define

begin_define
define|#
directive|define
name|mpn_mul_n
value|__MPN(mul_n)
end_define

begin_define
define|#
directive|define
name|mpn_perfect_square_p
value|__MPN(perfect_square_p)
end_define

begin_define
define|#
directive|define
name|mpn_popcount
value|__MPN(popcount)
end_define

begin_define
define|#
directive|define
name|mpn_preinv_mod_1
value|__MPN(preinv_mod_1)
end_define

begin_define
define|#
directive|define
name|mpn_random2
value|__MPN(random2)
end_define

begin_define
define|#
directive|define
name|mpn_rshift
value|__MPN(rshift)
end_define

begin_define
define|#
directive|define
name|mpn_scan0
value|__MPN(scan0)
end_define

begin_define
define|#
directive|define
name|mpn_scan1
value|__MPN(scan1)
end_define

begin_define
define|#
directive|define
name|mpn_set_str
value|__MPN(set_str)
end_define

begin_define
define|#
directive|define
name|mpn_sqrtrem
value|__MPN(sqrtrem)
end_define

begin_define
define|#
directive|define
name|mpn_sub
value|__MPN(sub)
end_define

begin_define
define|#
directive|define
name|mpn_sub_1
value|__MPN(sub_1)
end_define

begin_define
define|#
directive|define
name|mpn_sub_n
value|__MPN(sub_n)
end_define

begin_define
define|#
directive|define
name|mpn_submul_1
value|__MPN(submul_1)
end_define

begin_define
define|#
directive|define
name|mpn_udiv_w_sdiv
value|__MPN(udiv_w_sdiv)
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
name|mp_limb_t
name|mpn_add
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_add_1
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_add_n
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_addmul_1
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_bdivmod
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_ptr
operator|,
name|mp_size_t
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpn_cmp
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_divmod_1
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_divrem
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_size_t
operator|,
name|mp_ptr
operator|,
name|mp_size_t
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_divrem_1
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_size_t
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpn_dump
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_size_t
name|mpn_gcd
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_ptr
operator|,
name|mp_size_t
operator|,
name|mp_ptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_gcd_1
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|mp_size_t
name|mpn_gcdext
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_ptr
operator|,
name|mp_ptr
operator|,
name|mp_size_t
operator|,
name|mp_ptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|size_t
name|mpn_get_str
name|_PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
name|mp_ptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpn_hamdist
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_lshift
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|unsigned
name|int
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_mod_1
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_mul
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_mul_1
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpn_mul_n
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|int
name|mpn_perfect_square_p
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpn_popcount
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_preinv_mod_1
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|void
name|mpn_random2
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_rshift
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|unsigned
name|int
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpn_scan0
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|int
name|mpn_scan1
name|_PROTO
argument_list|(
operator|(
name|mp_srcptr
operator|,
name|unsigned
name|long
name|int
operator|)
argument_list|)
decl_stmt|;
name|mp_size_t
name|mpn_set_str
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|mp_size_t
name|mpn_sqrtrem
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_sub
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_sub_1
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_sub_n
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|)
argument_list|)
decl_stmt|;
name|mp_limb_t
name|mpn_submul_1
name|_PROTO
argument_list|(
operator|(
name|mp_ptr
operator|,
name|mp_srcptr
operator|,
name|mp_size_t
operator|,
name|mp_limb_t
operator|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|||
name|defined
argument_list|(
name|_FORCE_INLINES
argument_list|)
end_if

begin_function
name|_EXTERN_INLINE
name|mp_limb_t
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
name|mpn_add_1
parameter_list|(
specifier|register
name|mp_ptr
name|res_ptr
parameter_list|,
specifier|register
name|mp_srcptr
name|s1_ptr
parameter_list|,
specifier|register
name|mp_size_t
name|s1_size
parameter_list|,
specifier|register
name|mp_limb_t
name|s2_limb
parameter_list|)
else|#
directive|else
function|mpn_add_1
parameter_list|(
name|res_ptr
parameter_list|,
name|s1_ptr
parameter_list|,
name|s1_size
parameter_list|,
name|s2_limb
parameter_list|)
specifier|register
name|mp_ptr
name|res_ptr
decl_stmt|;
specifier|register
name|mp_srcptr
name|s1_ptr
decl_stmt|;
specifier|register
name|mp_size_t
name|s1_size
decl_stmt|;
specifier|register
name|mp_limb_t
name|s2_limb
decl_stmt|;
endif|#
directive|endif
block|{
specifier|register
name|mp_limb_t
name|x
decl_stmt|;
name|x
operator|=
operator|*
name|s1_ptr
operator|++
expr_stmt|;
name|s2_limb
operator|=
name|x
operator|+
name|s2_limb
expr_stmt|;
operator|*
name|res_ptr
operator|++
operator|=
name|s2_limb
expr_stmt|;
if|if
condition|(
name|s2_limb
operator|<
name|x
condition|)
block|{
while|while
condition|(
operator|--
name|s1_size
operator|!=
literal|0
condition|)
block|{
name|x
operator|=
operator|*
name|s1_ptr
operator|++
operator|+
literal|1
expr_stmt|;
operator|*
name|res_ptr
operator|++
operator|=
name|x
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|0
condition|)
goto|goto
name|fin
goto|;
block|}
return|return
literal|1
return|;
block|}
name|fin
label|:
if|if
condition|(
name|res_ptr
operator|!=
name|s1_ptr
condition|)
block|{
name|mp_size_t
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|s1_size
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|res_ptr
index|[
name|i
index|]
operator|=
name|s1_ptr
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
name|_EXTERN_INLINE
name|mp_limb_t
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
name|mpn_add
parameter_list|(
specifier|register
name|mp_ptr
name|res_ptr
parameter_list|,
specifier|register
name|mp_srcptr
name|s1_ptr
parameter_list|,
specifier|register
name|mp_size_t
name|s1_size
parameter_list|,
specifier|register
name|mp_srcptr
name|s2_ptr
parameter_list|,
specifier|register
name|mp_size_t
name|s2_size
parameter_list|)
else|#
directive|else
function|mpn_add
parameter_list|(
name|res_ptr
parameter_list|,
name|s1_ptr
parameter_list|,
name|s1_size
parameter_list|,
name|s2_ptr
parameter_list|,
name|s2_size
parameter_list|)
specifier|register
name|mp_ptr
name|res_ptr
decl_stmt|;
specifier|register
name|mp_srcptr
name|s1_ptr
decl_stmt|;
specifier|register
name|mp_size_t
name|s1_size
decl_stmt|;
specifier|register
name|mp_srcptr
name|s2_ptr
decl_stmt|;
specifier|register
name|mp_size_t
name|s2_size
decl_stmt|;
endif|#
directive|endif
block|{
name|mp_limb_t
name|cy_limb
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s2_size
operator|!=
literal|0
condition|)
name|cy_limb
operator|=
name|mpn_add_n
argument_list|(
name|res_ptr
argument_list|,
name|s1_ptr
argument_list|,
name|s2_ptr
argument_list|,
name|s2_size
argument_list|)
expr_stmt|;
if|if
condition|(
name|s1_size
operator|-
name|s2_size
operator|!=
literal|0
condition|)
name|cy_limb
operator|=
name|mpn_add_1
argument_list|(
name|res_ptr
operator|+
name|s2_size
argument_list|,
name|s1_ptr
operator|+
name|s2_size
argument_list|,
name|s1_size
operator|-
name|s2_size
argument_list|,
name|cy_limb
argument_list|)
expr_stmt|;
return|return
name|cy_limb
return|;
block|}
end_function

begin_function
name|_EXTERN_INLINE
name|mp_limb_t
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
name|mpn_sub_1
parameter_list|(
specifier|register
name|mp_ptr
name|res_ptr
parameter_list|,
specifier|register
name|mp_srcptr
name|s1_ptr
parameter_list|,
specifier|register
name|mp_size_t
name|s1_size
parameter_list|,
specifier|register
name|mp_limb_t
name|s2_limb
parameter_list|)
else|#
directive|else
function|mpn_sub_1
parameter_list|(
name|res_ptr
parameter_list|,
name|s1_ptr
parameter_list|,
name|s1_size
parameter_list|,
name|s2_limb
parameter_list|)
specifier|register
name|mp_ptr
name|res_ptr
decl_stmt|;
specifier|register
name|mp_srcptr
name|s1_ptr
decl_stmt|;
specifier|register
name|mp_size_t
name|s1_size
decl_stmt|;
specifier|register
name|mp_limb_t
name|s2_limb
decl_stmt|;
endif|#
directive|endif
block|{
specifier|register
name|mp_limb_t
name|x
decl_stmt|;
name|x
operator|=
operator|*
name|s1_ptr
operator|++
expr_stmt|;
name|s2_limb
operator|=
name|x
operator|-
name|s2_limb
expr_stmt|;
operator|*
name|res_ptr
operator|++
operator|=
name|s2_limb
expr_stmt|;
if|if
condition|(
name|s2_limb
operator|>
name|x
condition|)
block|{
while|while
condition|(
operator|--
name|s1_size
operator|!=
literal|0
condition|)
block|{
name|x
operator|=
operator|*
name|s1_ptr
operator|++
expr_stmt|;
operator|*
name|res_ptr
operator|++
operator|=
name|x
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|0
condition|)
goto|goto
name|fin
goto|;
block|}
return|return
literal|1
return|;
block|}
name|fin
label|:
if|if
condition|(
name|res_ptr
operator|!=
name|s1_ptr
condition|)
block|{
name|mp_size_t
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|s1_size
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|res_ptr
index|[
name|i
index|]
operator|=
name|s1_ptr
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
name|_EXTERN_INLINE
name|mp_limb_t
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
name|mpn_sub
parameter_list|(
specifier|register
name|mp_ptr
name|res_ptr
parameter_list|,
specifier|register
name|mp_srcptr
name|s1_ptr
parameter_list|,
specifier|register
name|mp_size_t
name|s1_size
parameter_list|,
specifier|register
name|mp_srcptr
name|s2_ptr
parameter_list|,
specifier|register
name|mp_size_t
name|s2_size
parameter_list|)
else|#
directive|else
function|mpn_sub
parameter_list|(
name|res_ptr
parameter_list|,
name|s1_ptr
parameter_list|,
name|s1_size
parameter_list|,
name|s2_ptr
parameter_list|,
name|s2_size
parameter_list|)
specifier|register
name|mp_ptr
name|res_ptr
decl_stmt|;
specifier|register
name|mp_srcptr
name|s1_ptr
decl_stmt|;
specifier|register
name|mp_size_t
name|s1_size
decl_stmt|;
specifier|register
name|mp_srcptr
name|s2_ptr
decl_stmt|;
specifier|register
name|mp_size_t
name|s2_size
decl_stmt|;
endif|#
directive|endif
block|{
name|mp_limb_t
name|cy_limb
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s2_size
operator|!=
literal|0
condition|)
name|cy_limb
operator|=
name|mpn_sub_n
argument_list|(
name|res_ptr
argument_list|,
name|s1_ptr
argument_list|,
name|s2_ptr
argument_list|,
name|s2_size
argument_list|)
expr_stmt|;
if|if
condition|(
name|s1_size
operator|-
name|s2_size
operator|!=
literal|0
condition|)
name|cy_limb
operator|=
name|mpn_sub_1
argument_list|(
name|res_ptr
operator|+
name|s2_size
argument_list|,
name|s1_ptr
operator|+
name|s2_size
argument_list|,
name|s1_size
operator|-
name|s2_size
argument_list|,
name|cy_limb
argument_list|)
expr_stmt|;
return|return
name|cy_limb
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GNUC__ */
end_comment

begin_comment
comment|/* Allow faster testing for negative, zero, and positive.  */
end_comment

begin_define
define|#
directive|define
name|mpz_sgn
parameter_list|(
name|Z
parameter_list|)
value|((Z)->_mp_size< 0 ? -1 : (Z)->_mp_size> 0)
end_define

begin_define
define|#
directive|define
name|mpf_sgn
parameter_list|(
name|F
parameter_list|)
value|((F)->_mp_size< 0 ? -1 : (F)->_mp_size> 0)
end_define

begin_define
define|#
directive|define
name|mpq_sgn
parameter_list|(
name|Q
parameter_list|)
value|((Q)->_mp_num._mp_size< 0 ? -1 : (Q)->_mp_num._mp_size> 0)
end_define

begin_comment
comment|/* Allow direct user access to numerator and denominator of a mpq_t object.  */
end_comment

begin_define
define|#
directive|define
name|mpq_numref
parameter_list|(
name|Q
parameter_list|)
value|(&((Q)->_mp_num))
end_define

begin_define
define|#
directive|define
name|mpq_denref
parameter_list|(
name|Q
parameter_list|)
value|(&((Q)->_mp_den))
end_define

begin_comment
comment|/* When using GCC, optimize certain common comparisons.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_if

begin_define
define|#
directive|define
name|mpz_cmp_ui
parameter_list|(
name|Z
parameter_list|,
name|UI
parameter_list|)
define|\
value|(__builtin_constant_p (UI)&& (UI) == 0				\    ? mpz_sgn (Z) : mpz_cmp_ui (Z,UI))
end_define

begin_define
define|#
directive|define
name|mpz_cmp_si
parameter_list|(
name|Z
parameter_list|,
name|UI
parameter_list|)
define|\
value|(__builtin_constant_p (UI)&& (UI) == 0 ? mpz_sgn (Z)			\    : __builtin_constant_p (UI)&& (UI)> 0 ? mpz_cmp_ui (Z,UI)		\    : mpz_cmp_si (Z,UI))
end_define

begin_define
define|#
directive|define
name|mpq_cmp_ui
parameter_list|(
name|Q
parameter_list|,
name|NUI
parameter_list|,
name|DUI
parameter_list|)
define|\
value|(__builtin_constant_p (NUI)&& (NUI) == 0				\    ? mpq_sgn (Q) : mpq_cmp_ui (Q,NUI,DUI))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|mpn_divmod
parameter_list|(
name|qp
parameter_list|,
name|np
parameter_list|,
name|nsize
parameter_list|,
name|dp
parameter_list|,
name|dsize
parameter_list|)
value|mpn_divrem (qp,0,np,nsize,dp,dsize)
end_define

begin_if
if|#
directive|if
literal|0
end_if

begin_define
define|#
directive|define
name|mpn_divmod_1
parameter_list|(
name|qp
parameter_list|,
name|np
parameter_list|,
name|nsize
parameter_list|,
name|dlimb
parameter_list|)
value|mpn_divrem_1 (qp,0,np,nsize,dlimb)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Compatibility with GMP 1.  */
end_comment

begin_define
define|#
directive|define
name|mpz_mdiv
value|mpz_fdiv_q
end_define

begin_define
define|#
directive|define
name|mpz_mdivmod
value|mpz_fdiv_qr
end_define

begin_define
define|#
directive|define
name|mpz_mmod
value|mpz_fdiv_r
end_define

begin_define
define|#
directive|define
name|mpz_mdiv_ui
value|mpz_fdiv_q_ui
end_define

begin_define
define|#
directive|define
name|mpz_mdivmod_ui
parameter_list|(
name|q
parameter_list|,
name|r
parameter_list|,
name|n
parameter_list|,
name|d
parameter_list|)
define|\
value|((r == 0) ? mpz_fdiv_q_ui (q,n,d) : mpz_fdiv_qr_ui (q,r,n,d))
end_define

begin_define
define|#
directive|define
name|mpz_mmod_ui
parameter_list|(
name|r
parameter_list|,
name|n
parameter_list|,
name|d
parameter_list|)
define|\
value|((r == 0) ? mpz_fdiv_ui (n,d) : mpz_fdiv_r_ui (r,n,d))
end_define

begin_comment
comment|/* Useful synonyms, but not quite compatible with GMP 1.  */
end_comment

begin_define
define|#
directive|define
name|mpz_div
value|mpz_fdiv_q
end_define

begin_define
define|#
directive|define
name|mpz_divmod
value|mpz_fdiv_qr
end_define

begin_define
define|#
directive|define
name|mpz_div_ui
value|mpz_fdiv_q_ui
end_define

begin_define
define|#
directive|define
name|mpz_divmod_ui
value|mpz_fdiv_qr_ui
end_define

begin_define
define|#
directive|define
name|mpz_mod_ui
value|mpz_fdiv_r_ui
end_define

begin_define
define|#
directive|define
name|mpz_div_2exp
value|mpz_fdiv_q_2exp
end_define

begin_define
define|#
directive|define
name|mpz_mod_2exp
value|mpz_fdiv_r_2exp
end_define

begin_define
define|#
directive|define
name|__GNU_MP_VERSION
value|2
end_define

begin_define
define|#
directive|define
name|__GNU_MP_VERSION_MINOR
value|0
end_define

begin_define
define|#
directive|define
name|__GMP_H__
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GMP_H__ */
end_comment

end_unit

