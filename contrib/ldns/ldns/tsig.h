begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * tsig.h -- defines for TSIG [RFC2845]  *  * Copyright (c) 2005-2008, NLnet Labs. All rights reserved.  *  * See LICENSE for the license.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_TSIG_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_TSIG_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * \file  *  * Defines functions for TSIG usage  */
comment|/**  * Contains credentials for TSIG */
typedef|typedef
struct|struct
name|ldns_tsig_credentials_struct
block|{
name|char
modifier|*
name|algorithm
decl_stmt|;
name|char
modifier|*
name|keyname
decl_stmt|;
name|char
modifier|*
name|keydata
decl_stmt|;
comment|/* XXX More eventually. */
block|}
name|ldns_tsig_credentials
typedef|;
name|char
modifier|*
name|ldns_tsig_algorithm
parameter_list|(
name|ldns_tsig_credentials
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|ldns_tsig_keyname
parameter_list|(
name|ldns_tsig_credentials
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|ldns_tsig_keydata
parameter_list|(
name|ldns_tsig_credentials
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|ldns_tsig_keyname_clone
parameter_list|(
name|ldns_tsig_credentials
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|ldns_tsig_keydata_clone
parameter_list|(
name|ldns_tsig_credentials
modifier|*
parameter_list|)
function_decl|;
comment|/**  * verifies the tsig rr for the given packet and key.  * The wire must be given too because tsig does not sign normalized packets.  * \param[in] pkt the packet to verify  * \param[in] wire needed to verify the mac  * \param[in] wire_size size of wire  * \param[in] key_name the name of the shared key  * \param[in] key_data the key in base 64 format  * \param[in] mac original mac  * \return true if tsig is correct, false if not, or if tsig is not set  */
name|bool
name|ldns_pkt_tsig_verify
parameter_list|(
name|ldns_pkt
modifier|*
name|pkt
parameter_list|,
name|uint8_t
modifier|*
name|wire
parameter_list|,
name|size_t
name|wire_size
parameter_list|,
specifier|const
name|char
modifier|*
name|key_name
parameter_list|,
specifier|const
name|char
modifier|*
name|key_data
parameter_list|,
name|ldns_rdf
modifier|*
name|mac
parameter_list|)
function_decl|;
comment|/**  * verifies the tsig rr for the given packet and key.  * The wire must be given too because tsig does not sign normalized packets.  * \param[in] pkt the packet to verify  * \param[in] wire needed to verify the mac  * \param[in] wire_size size of wire  * \param[in] key_name the name of the shared key  * \param[in] key_data the key in base 64 format  * \param[in] mac original mac  * \param[in] tsig_timers_only must be zero for the first packet and positive for subsequent packets. If zero, all digest    components are used to verify the _mac. If non-zero, only the TSIG timers are used to verify the mac.  * \return true if tsig is correct, false if not, or if tsig is not set  */
name|bool
name|ldns_pkt_tsig_verify_next
parameter_list|(
name|ldns_pkt
modifier|*
name|pkt
parameter_list|,
name|uint8_t
modifier|*
name|wire
parameter_list|,
name|size_t
name|wire_size
parameter_list|,
specifier|const
name|char
modifier|*
name|key_name
parameter_list|,
specifier|const
name|char
modifier|*
name|key_data
parameter_list|,
name|ldns_rdf
modifier|*
name|mac
parameter_list|,
name|int
name|tsig_timers_only
parameter_list|)
function_decl|;
comment|/**  * creates a tsig rr for the given packet and key.  * \param[in] pkt the packet to sign  * \param[in] key_name the name of the shared key  * \param[in] key_data the key in base 64 format  * \param[in] fudge seconds of error permitted in time signed  * \param[in] algorithm_name the name of the algorithm used  * \param[in] query_mac is added to the digest if not NULL (so NULL is for signing queries, not NULL is for signing answers)  * \return status (OK if success)  */
name|ldns_status
name|ldns_pkt_tsig_sign
parameter_list|(
name|ldns_pkt
modifier|*
name|pkt
parameter_list|,
specifier|const
name|char
modifier|*
name|key_name
parameter_list|,
specifier|const
name|char
modifier|*
name|key_data
parameter_list|,
name|uint16_t
name|fudge
parameter_list|,
specifier|const
name|char
modifier|*
name|algorithm_name
parameter_list|,
name|ldns_rdf
modifier|*
name|query_mac
parameter_list|)
function_decl|;
comment|/**  * creates a tsig rr for the given packet and key.  * \param[in] pkt the packet to sign  * \param[in] key_name the name of the shared key  * \param[in] key_data the key in base 64 format  * \param[in] fudge seconds of error permitted in time signed  * \param[in] algorithm_name the name of the algorithm used  * \param[in] query_mac is added to the digest if not NULL (so NULL is for signing queries, not NULL is for signing answers)  * \param[in] tsig_timers_only must be zero for the first packet and positive for subsequent packets. If zero, all digest    components are used to create the query_mac. If non-zero, only the TSIG timers are used to create the query_mac.  * \return status (OK if success)  */
name|ldns_status
name|ldns_pkt_tsig_sign_next
parameter_list|(
name|ldns_pkt
modifier|*
name|pkt
parameter_list|,
specifier|const
name|char
modifier|*
name|key_name
parameter_list|,
specifier|const
name|char
modifier|*
name|key_data
parameter_list|,
name|uint16_t
name|fudge
parameter_list|,
specifier|const
name|char
modifier|*
name|algorithm_name
parameter_list|,
name|ldns_rdf
modifier|*
name|query_mac
parameter_list|,
name|int
name|tsig_timers_only
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LDNS_TSIG_H */
end_comment

end_unit

