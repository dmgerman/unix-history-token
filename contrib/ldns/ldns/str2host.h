begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * str2host.h - conversion from str to the host fmt  *  * a Net::DNS like library for C  *  * (c) NLnet Labs, 2005-2006  *  * See the file LICENSE for the license  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_2HOST_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_2HOST_H
end_define

begin_include
include|#
directive|include
file|<ldns/common.h>
end_include

begin_include
include|#
directive|include
file|<ldns/error.h>
end_include

begin_include
include|#
directive|include
file|<ldns/rr.h>
end_include

begin_include
include|#
directive|include
file|<ldns/rdata.h>
end_include

begin_include
include|#
directive|include
file|<ldns/packet.h>
end_include

begin_include
include|#
directive|include
file|<ldns/buffer.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * \file  *  * Defines functions to convert dns data in presentation format or text files  * to internal structures.  */
comment|/**  * convert a byte into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] bytestr the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_int8
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|bytestr
parameter_list|)
function_decl|;
comment|/**  * convert a string to a int16 in wireformat  * \param[in] rd the rdf where to put the data  * \param[in] shortstr the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_int16
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|shortstr
parameter_list|)
function_decl|;
comment|/**  * convert a strings into a 4 byte int in wireformat  * \param[in] rd the rdf where to put the data  * \param[in] longstr the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_int32
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|longstr
parameter_list|)
function_decl|;
comment|/**  * convert a time string to a time value in wireformat  * \param[in] rd the rdf where to put the data  * \param[in] time the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_time
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|time
parameter_list|)
function_decl|;
comment|/* convert string with NSEC3 salt to wireformat)   * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * return ldns_status  */
name|ldns_status
name|ldns_str2rdf_nsec3_salt
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|nsec3_salt
parameter_list|)
function_decl|;
comment|/* convert a time period (think TTL's) to wireformat)   * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * return ldns_status  */
name|ldns_status
name|ldns_str2rdf_period
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert str with an A record into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_a
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert the str with an AAAA record into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_aaaa
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a string into wireformat (think txt record)  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted (NULL terminated)  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_str
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert str with the apl record into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_apl
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert the string with the b64 data into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_b64
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert the string with the b32 ext hex data into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_b32_ext
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a hex value into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_hex
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert string with nsec into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_nsec
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a rrtype into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_type
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert string with a classname into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_class
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert an certificate algorithm value into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_cert_alg
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert and algorithm value into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_alg
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a string with a unknown RR into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_unknown
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert string with a protocol service into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_service
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a string with a LOC RR into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_loc
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert string with a WKS RR into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_wks
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a str with a NSAP RR into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_nsap
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a str with a ATMA RR into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_atma
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a str with a IPSECKEY RR into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_ipseckey
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert a dname string into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_dname
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert 4 * 16bit hex separated by colons into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_ilnp64
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert 6 hex bytes separated by dashes into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_eui48
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * convert 8 hex bytes separated by dashes into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_eui64
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * Convert a non-zero sequence of US-ASCII letters and numbers into wireformat  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_tag
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * Convert a<character-string> encoding of the value field as specified   * [RFC1035], Section 5.1., encoded as one bug chunk of data.  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_long_str
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**  * Convert a "<algorithm><hit><pk>" encoding of the value field as specified   * in Section 6. of [RFC5205], encoded as wireformat as specified in Section 5.  * of [RFC5205].  * \param[in] rd the rdf where to put the data  * \param[in] str the string to be converted  * \return ldns_status  */
name|ldns_status
name|ldns_str2rdf_hip
parameter_list|(
name|ldns_rdf
modifier|*
modifier|*
name|rd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LDNS_2HOST_H */
end_comment

end_unit

