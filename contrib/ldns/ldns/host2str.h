begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * host2str.h -  txt presentation of RRs  *  * a Net::DNS like library for C  *  * (c) NLnet Labs, 2005-2006  *  * See the file LICENSE for the license  */
end_comment

begin_comment
comment|/**  * \file  *  * Contains functions to translate the main structures to their text  * representation, as well as functions to print them.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_HOST2STR_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_HOST2STR_H
end_define

begin_include
include|#
directive|include
file|<ldns/common.h>
end_include

begin_include
include|#
directive|include
file|<ldns/error.h>
end_include

begin_include
include|#
directive|include
file|<ldns/rr.h>
end_include

begin_include
include|#
directive|include
file|<ldns/rdata.h>
end_include

begin_include
include|#
directive|include
file|<ldns/packet.h>
end_include

begin_include
include|#
directive|include
file|<ldns/buffer.h>
end_include

begin_include
include|#
directive|include
file|<ldns/resolver.h>
end_include

begin_include
include|#
directive|include
file|<ldns/zone.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_include
include|#
directive|include
file|"ldns/util.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|LDNS_APL_IP4
value|1
define|#
directive|define
name|LDNS_APL_IP6
value|2
define|#
directive|define
name|LDNS_APL_MASK
value|0x7f
define|#
directive|define
name|LDNS_APL_NEGATION
value|0x80
comment|/**   * Represent a NULL pointer (instead of a pointer to a ldns_rr as "; (null)"   * as opposed to outputting nothing at all in such a case.  */
comment|/*	Flag Name			Flag Nr.	Has data associated 	---------------------------------------------------------------------*/
define|#
directive|define
name|LDNS_COMMENT_NULLS
value|(1<<  0)
comment|/** Show key id with DNSKEY RR's as comment */
define|#
directive|define
name|LDNS_COMMENT_KEY_ID
value|(1<<  1)
comment|/** Show if a DNSKEY is a ZSK or KSK as comment */
define|#
directive|define
name|LDNS_COMMENT_KEY_TYPE
value|(1<<  2)
comment|/** Show DNSKEY key size as comment */
define|#
directive|define
name|LDNS_COMMENT_KEY_SIZE
value|(1<<  3)
comment|/** Provide bubblebabble representation for DS RR's as comment */
define|#
directive|define
name|LDNS_COMMENT_BUBBLEBABBLE
value|(1<<  4)
comment|/** Show when a NSEC3 RR has the optout flag set as comment */
define|#
directive|define
name|LDNS_COMMENT_FLAGS
value|(1<<  5)
comment|/** Show the unhashed owner and next owner names for NSEC3 RR's as comment */
define|#
directive|define
name|LDNS_COMMENT_NSEC3_CHAIN
value|(1<<  6)
comment|/* yes */
comment|/** Print mark up */
define|#
directive|define
name|LDNS_COMMENT_LAYOUT
value|(1<<  7)
comment|/** Also comment KEY_ID with RRSIGS **/
define|#
directive|define
name|LDNS_COMMENT_RRSIGS
value|(1<<  8)
define|#
directive|define
name|LDNS_FMT_ZEROIZE_RRSIGS
value|(1<<  9)
define|#
directive|define
name|LDNS_FMT_PAD_SOA_SERIAL
value|(1<< 10)
define|#
directive|define
name|LDNS_FMT_RFC3597
value|(1<< 11)
comment|/* yes */
define|#
directive|define
name|LDNS_FMT_FLAGS_WITH_DATA
value|2
comment|/** Show key id, type and size as comment for DNSKEY RR's */
define|#
directive|define
name|LDNS_COMMENT_KEY
value|(LDNS_COMMENT_KEY_ID  \ 					|LDNS_COMMENT_KEY_TYPE\ 					|LDNS_COMMENT_KEY_SIZE)
comment|/**  * Output format specifier  *  * Determines how Packets, Resource Records and Resource record data fiels are  * formatted when printing or converting to string.  * Currently it is only used to specify what aspects of a Resource Record are  * annotated in the comment section of the textual representation the record.  * This is speciefed with flags and potential exra data (such as for example  * a lookup map of hashes to real names for annotation NSEC3 records).  */
struct|struct
name|ldns_struct_output_format
block|{
comment|/** Specification of how RR's should be formatted in text */
name|int
name|flags
decl_stmt|;
comment|/** Potential extra data to be used with formatting RR's in text */
name|void
modifier|*
name|data
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|ldns_struct_output_format
name|ldns_output_format
typedef|;
comment|/**  * Output format struct with additional data for flags that use them.  * This struct may not be initialized directly. Use ldns_output_format_init  * to initialize.  */
struct|struct
name|ldns_struct_output_format_storage
block|{
name|int
name|flags
decl_stmt|;
name|ldns_rbtree_t
modifier|*
name|hashmap
decl_stmt|;
comment|/* for LDNS_COMMENT_NSEC3_CHAIN */
name|ldns_rdf
modifier|*
name|bitmap
decl_stmt|;
comment|/* for LDNS_FMT_RFC3597     */
block|}
struct|;
typedef|typedef
name|struct
name|ldns_struct_output_format_storage
name|ldns_output_format_storage
typedef|;
comment|/**  * Standard output format record that disables commenting in the textual   * representation of Resource Records completely.  */
specifier|extern
specifier|const
name|ldns_output_format
modifier|*
name|ldns_output_format_nocomments
decl_stmt|;
comment|/**  * Standard output format record that annotated only DNSKEY RR's with commenti  * text.  */
specifier|extern
specifier|const
name|ldns_output_format
modifier|*
name|ldns_output_format_onlykeyids
decl_stmt|;
comment|/**  * The default output format record. Same as ldns_output_format_onlykeyids.  */
specifier|extern
specifier|const
name|ldns_output_format
modifier|*
name|ldns_output_format_default
decl_stmt|;
comment|/**  * Standard output format record that shows all DNSKEY related information in  * the comment text, plus the optout flag when set with NSEC3's, plus the  * bubblebabble representation of DS RR's.  */
specifier|extern
specifier|const
name|ldns_output_format
modifier|*
name|ldns_output_format_bubblebabble
decl_stmt|;
comment|/**  * Initialize output format storage to the default value.  * \param[in] fmt A reference to an output_format_ storage struct  * \return The initialized storage struct typecasted to ldns_output_format  */
name|INLINE
name|ldns_output_format
modifier|*
name|ldns_output_format_init
parameter_list|(
name|ldns_output_format_storage
modifier|*
name|fmt
parameter_list|)
block|{
name|fmt
operator|->
name|flags
operator|=
name|ldns_output_format_default
operator|->
name|flags
expr_stmt|;
name|fmt
operator|->
name|hashmap
operator|=
name|NULL
expr_stmt|;
name|fmt
operator|->
name|bitmap
operator|=
name|NULL
expr_stmt|;
return|return
operator|(
name|ldns_output_format
operator|*
operator|)
name|fmt
return|;
block|}
comment|/**  * Set an ouput format flag.  */
name|INLINE
name|void
name|ldns_output_format_set
parameter_list|(
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
name|fmt
operator|->
name|flags
operator||=
name|flag
expr_stmt|;
block|}
comment|/**  * Clear an ouput format flag.  */
name|INLINE
name|void
name|ldns_output_format_clear
parameter_list|(
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
name|fmt
operator|->
name|flags
operator|&=
operator|!
name|flag
expr_stmt|;
block|}
comment|/**  * Makes sure the LDNS_FMT_RFC3597 is set in the output format.  * Marks the type to be printed in RFC3597 format.  * /param[in] fmt the output format to update  * /param[in] the type to be printed in RFC3597 format  * /return LDNS_STATUS_OK on success  */
name|ldns_status
name|ldns_output_format_set_type
parameter_list|(
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_rr_type
name|type
parameter_list|)
function_decl|;
comment|/**  * Makes sure the LDNS_FMT_RFC3597 is set in the output format.  * Marks the type to not be printed in RFC3597 format. When no other types  * have been marked before, all known types (except the given one) will be  * marked for printing in RFC3597 format.  * /param[in] fmt the output format to update  * /param[in] the type not to be printed in RFC3597 format  * /return LDNS_STATUS_OK on success  */
name|ldns_status
name|ldns_output_format_clear_type
parameter_list|(
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_rr_type
name|type
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns packet opcode value to its mnemonic, and adds that  * to the output buffer  * \param[in] *output the buffer to add the data to  * \param[in] opcode to find the string representation of  * \return LDNS_STATUS_OK on success, or a buffer failure mode on error  */
name|ldns_status
name|ldns_pkt_opcode2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
name|ldns_pkt_opcode
name|opcode
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns packet rcode value to its mnemonic, and adds that  * to the output buffer  * \param[in] *output the buffer to add the data to  * \param[in] rcode to find the string representation of  * \return LDNS_STATUS_OK on success, or a buffer failure mode on error  */
name|ldns_status
name|ldns_pkt_rcode2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
name|ldns_pkt_rcode
name|rcode
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns algorithm type to its mnemonic, and adds that  * to the output buffer  * \param[in] *output the buffer to add the data to  * \param[in] algorithm to find the string representation of  * \return LDNS_STATUS_OK on success, or a buffer failure mode on error  */
name|ldns_status
name|ldns_algorithm2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
name|ldns_algorithm
name|algorithm
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns certificate algorithm type to its mnemonic,   * and adds that to the output buffer  * \param[in] *output the buffer to add the data to  * \param[in] cert_algorithm to find the string representation of  * \return LDNS_STATUS_OK on success, or a buffer failure mode on error  */
name|ldns_status
name|ldns_cert_algorithm2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
name|ldns_cert_algorithm
name|cert_algorithm
parameter_list|)
function_decl|;
comment|/**  * Converts a packet opcode to its mnemonic and returns that as  * an allocated null-terminated string.  * Remember to free it.  *  * \param[in] opcode the opcode to convert to text  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_pkt_opcode2str
parameter_list|(
name|ldns_pkt_opcode
name|opcode
parameter_list|)
function_decl|;
comment|/**  * Converts a packet rcode to its mnemonic and returns that as  * an allocated null-terminated string.  * Remember to free it.  *  * \param[in] rcode the rcode to convert to text  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_pkt_rcode2str
parameter_list|(
name|ldns_pkt_rcode
name|rcode
parameter_list|)
function_decl|;
comment|/**  * Converts a signing algorithms to its mnemonic and returns that as  * an allocated null-terminated string.  * Remember to free it.  *  * \param[in] algorithm the algorithm to convert to text  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_pkt_algorithm2str
parameter_list|(
name|ldns_algorithm
name|algorithm
parameter_list|)
function_decl|;
comment|/**  * Converts a cert algorithm to its mnemonic and returns that as  * an allocated null-terminated string.  * Remember to free it.  *  * \param[in] cert_algorithm to convert to text  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_pkt_cert_algorithm2str
parameter_list|(
name|ldns_cert_algorithm
name|cert_algorithm
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_A rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_a
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_AAAA rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_aaaa
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_STR rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_B64 rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_b64
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_B32_EXT rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_b32_ext
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_HEX rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_hex
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_TYPE rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_type
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_CLASS rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_class
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_ALG rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_alg
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns_rr_type value to its string representation,  * and places it in the given buffer  * \param[in] *output The buffer to add the data to  * \param[in] type the ldns_rr_type to convert  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rr_type2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rr_type
name|type
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns_rr_type value to its string representation,  * and returns that string. For unknown types, the string  * "TYPE<id>" is returned. This function allocates data that must be  * freed by the caller  * \param[in] type the ldns_rr_type to convert  * \return a newly allocated string  */
name|char
modifier|*
name|ldns_rr_type2str
parameter_list|(
specifier|const
name|ldns_rr_type
name|type
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns_rr_class value to its string representation,  * and places it in the given buffer  * \param[in] *output The buffer to add the data to  * \param[in] klass the ldns_rr_class to convert  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rr_class2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rr_class
name|klass
parameter_list|)
function_decl|;
comment|/**  * Converts an ldns_rr_class value to its string representation,  * and returns that string. For unknown types, the string  * "CLASS<id>" is returned. This function allocates data that must be  * freed by the caller  * \param[in] klass the ldns_rr_class to convert  * \return a newly allocated string  */
name|char
modifier|*
name|ldns_rr_class2str
parameter_list|(
specifier|const
name|ldns_rr_class
name|klass
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_CERT rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_cert_alg
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_LOC rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_loc
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_UNKNOWN rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_unknown
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_NSAP rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_nsap
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_ATMA rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_atma
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_WKS rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_wks
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_NSEC rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_nsec
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_PERIOD rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_period
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_TSIGTIME rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_tsigtime
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_APL rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_apl
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_INT16_DATA rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_int16_data
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_IPSECKEY rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_ipseckey
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the rdata field to presentation  * format (as char *) and appends it to the given buffer  *  * \param[in] output pointer to the buffer to append the data to  * \param[in] rdf the pointer to the rdafa field containing the data  * \return status  */
name|ldns_status
name|ldns_rdf2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the resource record to presentation  * format (as char *) and appends it to the given buffer.  * The presentation format of DNSKEY record is annotated with comments giving  * the id, type and size of the key.  *  * \param[in] output pointer to the buffer to append the data to  * \param[in] rr the pointer to the rr field to convert  * \return status  */
name|ldns_status
name|ldns_rr2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the resource record to presentation  * format (as char *) and appends it to the given buffer.  * The presentation format is annotated with comments giving  * additional information on the record.  *  * \param[in] output pointer to the buffer to append the data to  * \param[in] fmt how to format the textual representation of the   *            resource record.  * \param[in] rr the pointer to the rr field to convert  * \return status  */
name|ldns_status
name|ldns_rr2buffer_str_fmt
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the DNS packet to presentation  * format (as char *) and appends it to the given buffer  *  * \param[in] output pointer to the buffer to append the data to  * \param[in] pkt the pointer to the packet to convert  * \return status  */
name|ldns_status
name|ldns_pkt2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the DNS packet to presentation  * format (as char *) and appends it to the given buffer  *  * \param[in] output pointer to the buffer to append the data to  * \param[in] fmt how to format the textual representation of the packet  * \param[in] pkt the pointer to the packet to convert  * \return status  */
name|ldns_status
name|ldns_pkt2buffer_str_fmt
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_NSEC3_SALT rdata element to string format and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_nsec3_salt
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the DNS packet to presentation  * format (as char *) and appends it to the given buffer  *  * \param[in] output pointer to the buffer to append the data to  * \param[in] k the pointer to the private key to convert  * \return status  */
name|ldns_status
name|ldns_key2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * Converts an LDNS_RDF_TYPE_INT8 rdata element to string format and adds it to the output buffer  * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_int8
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts an LDNS_RDF_TYPE_INT16 rdata element to string format and adds it to the output buffer  * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_int16
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts an LDNS_RDF_TYPE_INT32 rdata element to string format and adds it to the output buffer  * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_int32
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts an LDNS_RDF_TYPE_TIME rdata element to string format and adds it to the output buffer  * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_time
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_ILNP64 rdata element to 4 hexadecimal numbers  * separated by colons and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_ilnp64
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_EUI48 rdata element to 6 hexadecimal numbers  * separated by dashes and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_eui48
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_EUI64 rdata element to 8 hexadecimal numbers  * separated by dashes and adds it to the output buffer   * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_eui64
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Adds the LDNS_RDF_TYPE_TAG rdata to the output buffer,  * provided it contains only alphanumeric characters.  * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_tag
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Adds the LDNS_RDF_TYPE_LONG_STR rdata to the output buffer, in-between   * double quotes and all non printable characters properly escaped.  * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_long_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**   * Converts an LDNS_RDF_TYPE_HIP rdata element to presentation format for  * the algorithm, HIT and Public Key and adds it the output buffer .  * \param[in] *rdf The rdata to convert  * \param[in] *output The buffer to add the data to  * \return LDNS_STATUS_OK on success, and error status on failure  */
name|ldns_status
name|ldns_rdf2buffer_str_hip
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the rdata field to presentation format and  * returns that as a char *.  * Remember to free it.  *  * \param[in] rdf The rdata field to convert  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_rdf2str
parameter_list|(
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the resource record to presentation format and  * returns that as a char *.  * Remember to free it.  *  * \param[in] rr The rdata field to convert  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_rr2str
parameter_list|(
specifier|const
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the resource record to presentation format and  * returns that as a char *.  * Remember to free it.  *  * \param[in] fmt how to format the resource record  * \param[in] rr The rdata field to convert  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_rr2str_fmt
parameter_list|(
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the DNS packet to presentation format and  * returns that as a char *.  * Remember to free it.  *  * \param[in] pkt The rdata field to convert  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_pkt2str
parameter_list|(
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|)
function_decl|;
comment|/**  * Converts the data in the DNS packet to presentation format and  * returns that as a char *.  * Remember to free it.  *  * \param[in] fmt how to format the packet  * \param[in] pkt The rdata field to convert  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_pkt2str_fmt
parameter_list|(
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|)
function_decl|;
comment|/**  * Converts a private key to the test presentation fmt and  * returns that as a char *.  * Remember to free it.  *  * \param[in] k the key to convert to text  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_key2str
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * Converts a list of resource records to presentation format  * and returns that as a char *.  * Remember to free it.  *  * \param[in] rr_list the rr_list to convert to text  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_rr_list2str
parameter_list|(
specifier|const
name|ldns_rr_list
modifier|*
name|rr_list
parameter_list|)
function_decl|;
comment|/**  * Converts a list of resource records to presentation format  * and returns that as a char *.  * Remember to free it.  *  * \param[in] fmt how to format the list of resource records  * \param[in] rr_list the rr_list to convert to text  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_rr_list2str_fmt
parameter_list|(
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|rr_list
parameter_list|)
function_decl|;
comment|/**  * Returns a copy of the data in the buffer as a null terminated  * char * string. The returned string must be freed by the caller.  * The buffer must be in write modus and may thus not have been flipped.  *  * \param[in] buffer buffer containing char * data  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_buffer2str
parameter_list|(
name|ldns_buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
comment|/**  * Exports and returns the data in the buffer as a null terminated  * char * string. The returned string must be freed by the caller.  * The buffer must be in write modus and may thus not have been flipped.  * The buffer is fixed after this function returns.  *  * \param[in] buffer buffer containing char * data  * \return null terminated char * data, or NULL on error  */
name|char
modifier|*
name|ldns_buffer_export2str
parameter_list|(
name|ldns_buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
comment|/**  * Prints the data in the rdata field to the given file stream  * (in presentation format)  *  * \param[in] output the file stream to print to  * \param[in] rdf the rdata field to print  * \return void  */
name|void
name|ldns_rdf_print
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|rdf
parameter_list|)
function_decl|;
comment|/**  * Prints the data in the resource record to the given file stream  * (in presentation format)  *  * \param[in] output the file stream to print to  * \param[in] rr the resource record to print  * \return void  */
name|void
name|ldns_rr_print
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Prints the data in the resource record to the given file stream  * (in presentation format)  *  * \param[in] output the file stream to print to  * \param[in] fmt format of the textual representation  * \param[in] rr the resource record to print  * \return void  */
name|void
name|ldns_rr_print_fmt
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Prints the data in the DNS packet to the given file stream  * (in presentation format)  *  * \param[in] output the file stream to print to  * \param[in] pkt the packet to print  * \return void  */
name|void
name|ldns_pkt_print
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|)
function_decl|;
comment|/**  * Prints the data in the DNS packet to the given file stream  * (in presentation format)  *  * \param[in] output the file stream to print to  * \param[in] fmt format of the textual representation  * \param[in] pkt the packet to print  * \return void  */
name|void
name|ldns_pkt_print_fmt
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|)
function_decl|;
comment|/**  * Converts a rr_list to presentation format and appends it to  * the output buffer  * \param[in] output the buffer to append output to  * \param[in] list the ldns_rr_list to print  * \return ldns_status  */
name|ldns_status
name|ldns_rr_list2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * Converts a rr_list to presentation format and appends it to  * the output buffer  * \param[in] output the buffer to append output to  * \param[in] fmt format of the textual representation  * \param[in] list the ldns_rr_list to print  * \return ldns_status  */
name|ldns_status
name|ldns_rr_list2buffer_str_fmt
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * Converts the header of a packet to presentation format and appends it to  * the output buffer  * \param[in] output the buffer to append output to  * \param[in] pkt the packet to convert the header of  * \return ldns_status  */
name|ldns_status
name|ldns_pktheader2buffer_str
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|)
function_decl|;
comment|/**  * print a rr_list to output  * \param[in] output the fd to print to  * \param[in] list the rr_list to print  */
name|void
name|ldns_rr_list_print
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * print a rr_list to output  * \param[in] output the fd to print to  * \param[in] fmt format of the textual representation  * \param[in] list the rr_list to print  */
name|void
name|ldns_rr_list_print_fmt
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|list
parameter_list|)
function_decl|;
comment|/**  * Print a resolver (in sofar that is possible) state  * to output.  * \param[in] output the fd to print to  * \param[in] r the resolver to print  */
name|void
name|ldns_resolver_print
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_resolver
modifier|*
name|r
parameter_list|)
function_decl|;
comment|/**  * Print a resolver (in sofar that is possible) state  * to output.  * \param[in] output the fd to print to  * \param[in] fmt format of the textual representation  * \param[in] r the resolver to print  */
name|void
name|ldns_resolver_print_fmt
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_resolver
modifier|*
name|r
parameter_list|)
function_decl|;
comment|/**  * Print a zone structure * to output. Note the SOA record  * is included in this output  * \param[in] output the fd to print to  * \param[in] z the zone to print  */
name|void
name|ldns_zone_print
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_zone
modifier|*
name|z
parameter_list|)
function_decl|;
comment|/**  * Print a zone structure * to output. Note the SOA record  * is included in this output  * \param[in] output the fd to print to  * \param[in] fmt format of the textual representation  * \param[in] z the zone to print  */
name|void
name|ldns_zone_print_fmt
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_zone
modifier|*
name|z
parameter_list|)
function_decl|;
comment|/**  * Print the ldns_rdf containing a dname to the buffer  * \param[in] output the buffer to print to  * \param[in] dname the dname to print  * \return ldns_status message if the printing succeeded  */
name|ldns_status
name|ldns_rdf2buffer_str_dname
parameter_list|(
name|ldns_buffer
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|dname
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LDNS_HOST2STR_H */
end_comment

end_unit

