begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *   * keys.h  *  * priv key definitions  *  * a Net::DNS like library for C  *  * (c) NLnet Labs, 2005-2006  *  * See the file LICENSE for the license  */
end_comment

begin_comment
comment|/**  * \file  *  * Addendum to \ref dnssec.h, this module contains key and algorithm definitions and functions.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_KEYS_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_KEYS_H
end_define

begin_include
include|#
directive|include
file|<ldns/common.h>
end_include

begin_if
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
end_if

begin_include
include|#
directive|include
file|<openssl/ssl.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
end_comment

begin_include
include|#
directive|include
file|<ldns/dnssec.h>
end_include

begin_include
include|#
directive|include
file|<ldns/util.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
specifier|extern
name|ldns_lookup_table
name|ldns_signing_algorithms
index|[]
decl_stmt|;
define|#
directive|define
name|LDNS_KEY_ZONE_KEY
value|0x0100
comment|/* rfc 4034 */
define|#
directive|define
name|LDNS_KEY_SEP_KEY
value|0x0001
comment|/* rfc 4034 */
define|#
directive|define
name|LDNS_KEY_REVOKE_KEY
value|0x0080
comment|/* rfc 5011 */
comment|/**  * Algorithms used in dns  */
enum|enum
name|ldns_enum_algorithm
block|{
name|LDNS_RSAMD5
init|=
literal|1
block|,
comment|/* RFC 4034,4035 */
name|LDNS_DH
init|=
literal|2
block|,
name|LDNS_DSA
init|=
literal|3
block|,
name|LDNS_ECC
init|=
literal|4
block|,
name|LDNS_RSASHA1
init|=
literal|5
block|,
name|LDNS_DSA_NSEC3
init|=
literal|6
block|,
name|LDNS_RSASHA1_NSEC3
init|=
literal|7
block|,
name|LDNS_RSASHA256
init|=
literal|8
block|,
comment|/* RFC 5702 */
name|LDNS_RSASHA512
init|=
literal|10
block|,
comment|/* RFC 5702 */
name|LDNS_ECC_GOST
init|=
literal|12
block|,
comment|/* RFC 5933 */
name|LDNS_ECDSAP256SHA256
init|=
literal|13
block|,
comment|/* RFC 6605 */
name|LDNS_ECDSAP384SHA384
init|=
literal|14
block|,
comment|/* RFC 6605 */
name|LDNS_INDIRECT
init|=
literal|252
block|,
name|LDNS_PRIVATEDNS
init|=
literal|253
block|,
name|LDNS_PRIVATEOID
init|=
literal|254
block|}
enum|;
typedef|typedef
name|enum
name|ldns_enum_algorithm
name|ldns_algorithm
typedef|;
comment|/**  * Hashing algorithms used in the DS record  */
enum|enum
name|ldns_enum_hash
block|{
name|LDNS_SHA1
init|=
literal|1
block|,
comment|/* RFC 4034 */
name|LDNS_SHA256
init|=
literal|2
block|,
comment|/* RFC 4509 */
name|LDNS_HASH_GOST
init|=
literal|3
block|,
comment|/* RFC 5933 */
name|LDNS_SHA384
init|=
literal|4
comment|/* RFC 6605 */
block|}
enum|;
typedef|typedef
name|enum
name|ldns_enum_hash
name|ldns_hash
typedef|;
comment|/**  * Algorithms used in dns for signing  */
enum|enum
name|ldns_enum_signing_algorithm
block|{
name|LDNS_SIGN_RSAMD5
init|=
name|LDNS_RSAMD5
block|,
name|LDNS_SIGN_RSASHA1
init|=
name|LDNS_RSASHA1
block|,
name|LDNS_SIGN_DSA
init|=
name|LDNS_DSA
block|,
name|LDNS_SIGN_RSASHA1_NSEC3
init|=
name|LDNS_RSASHA1_NSEC3
block|,
name|LDNS_SIGN_RSASHA256
init|=
name|LDNS_RSASHA256
block|,
name|LDNS_SIGN_RSASHA512
init|=
name|LDNS_RSASHA512
block|,
name|LDNS_SIGN_DSA_NSEC3
init|=
name|LDNS_DSA_NSEC3
block|,
name|LDNS_SIGN_ECC_GOST
init|=
name|LDNS_ECC_GOST
block|,
name|LDNS_SIGN_ECDSAP256SHA256
init|=
name|LDNS_ECDSAP256SHA256
block|,
name|LDNS_SIGN_ECDSAP384SHA384
init|=
name|LDNS_ECDSAP384SHA384
block|,
name|LDNS_SIGN_HMACMD5
init|=
literal|157
block|,
comment|/* not official! This type is for TSIG, not DNSSEC */
name|LDNS_SIGN_HMACSHA1
init|=
literal|158
block|,
comment|/* not official! This type is for TSIG, not DNSSEC */
name|LDNS_SIGN_HMACSHA256
init|=
literal|159
comment|/* ditto */
block|}
enum|;
typedef|typedef
name|enum
name|ldns_enum_signing_algorithm
name|ldns_signing_algorithm
typedef|;
comment|/**  * General key structure, can contain all types of keys that  * are used in DNSSEC. Mostly used to store private keys, since  * public keys can also be stored in a \ref ldns_rr with type  * \ref LDNS_RR_TYPE_DNSKEY.  *  * This structure can also store some variables that influence the  * signatures generated by signing with this key, for instance the  * inception date.  */
struct|struct
name|ldns_struct_key
block|{
name|ldns_signing_algorithm
name|_alg
decl_stmt|;
comment|/** Whether to use this key when signing */
name|bool
name|_use
decl_stmt|;
comment|/** Storage pointers for the types of keys supported */
comment|/* TODO remove unions? */
struct|struct
block|{
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
ifndef|#
directive|ifndef
name|S_SPLINT_S
comment|/* The key can be an OpenSSL EVP Key 		 */
name|EVP_PKEY
modifier|*
name|key
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
comment|/** 		 * The key can be an HMAC key 		 */
struct|struct
block|{
name|unsigned
name|char
modifier|*
name|key
decl_stmt|;
name|size_t
name|size
decl_stmt|;
block|}
name|hmac
struct|;
comment|/** the key structure can also just point to some external 		 *  key data 		 */
name|void
modifier|*
name|external_key
decl_stmt|;
block|}
name|_key
struct|;
comment|/** Depending on the key we can have extra data */
union|union
block|{
comment|/** Some values that influence generated signatures */
struct|struct
block|{
comment|/** The TTL of the rrset that is currently signed */
name|uint32_t
name|orig_ttl
decl_stmt|;
comment|/** The inception date of signatures made with this key. */
name|uint32_t
name|inception
decl_stmt|;
comment|/** The expiration date of signatures made with this key. */
name|uint32_t
name|expiration
decl_stmt|;
comment|/** The keytag of this key. */
name|uint16_t
name|keytag
decl_stmt|;
comment|/** The dnssec key flags as specified in RFC4035, like ZSK and KSK */
name|uint16_t
name|flags
decl_stmt|;
block|}
name|dnssec
struct|;
block|}
name|_extra
union|;
comment|/** Owner name of the key */
name|ldns_rdf
modifier|*
name|_pubkey_owner
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|ldns_struct_key
name|ldns_key
typedef|;
comment|/**  * Same as rr_list, but now for keys   */
struct|struct
name|ldns_struct_key_list
block|{
name|size_t
name|_key_count
decl_stmt|;
name|ldns_key
modifier|*
modifier|*
name|_keys
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|ldns_struct_key_list
name|ldns_key_list
typedef|;
comment|/**  * Creates a new empty key list  * \return a new ldns_key_list structure pointer  */
name|ldns_key_list
modifier|*
name|ldns_key_list_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**   * Creates a new empty key structure  * \return a new ldns_key * structure  */
name|ldns_key
modifier|*
name|ldns_key_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Creates a new key based on the algorithm  *  * \param[in] a The algorithm to use  * \param[in] size the number of bytes for the keysize  * \return a new ldns_key structure with the key  */
name|ldns_key
modifier|*
name|ldns_key_new_frm_algorithm
parameter_list|(
name|ldns_signing_algorithm
name|a
parameter_list|,
name|uint16_t
name|size
parameter_list|)
function_decl|;
comment|/**  * Creates a new priv key based on the   * contents of the file pointed by fp.  *  * The file should be in Private-key-format v1.x.  *  * \param[out] k the new ldns_key structure  * \param[in] fp the file pointer to use  * \return an error or LDNS_STATUS_OK  */
name|ldns_status
name|ldns_key_new_frm_fp
parameter_list|(
name|ldns_key
modifier|*
modifier|*
name|k
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
comment|/**  * Creates a new private key based on the   * contents of the file pointed by fp  *  * The file should be in Private-key-format v1.x.  *  * \param[out] k the new ldns_key structure  * \param[in] fp the file pointer to use  * \param[in] line_nr pointer to an integer containing the current line number (for debugging purposes)  * \return an error or LDNS_STATUS_OK  */
name|ldns_status
name|ldns_key_new_frm_fp_l
parameter_list|(
name|ldns_key
modifier|*
modifier|*
name|k
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|int
modifier|*
name|line_nr
parameter_list|)
function_decl|;
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * Read the key with the given id from the given engine and store it  * in the given ldns_key structure. The algorithm type is set  */
name|ldns_status
name|ldns_key_new_frm_engine
parameter_list|(
name|ldns_key
modifier|*
modifier|*
name|key
parameter_list|,
name|ENGINE
modifier|*
name|e
parameter_list|,
name|char
modifier|*
name|key_id
parameter_list|,
name|ldns_algorithm
parameter_list|)
function_decl|;
comment|/**  * frm_fp helper function. This function parses the  * remainder of the (RSA) priv. key file generated from bind9  * \param[in] fp the file to parse  * \return NULL on failure otherwise a RSA structure  */
name|RSA
modifier|*
name|ldns_key_new_frm_fp_rsa
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * frm_fp helper function. This function parses the  * remainder of the (RSA) priv. key file generated from bind9  * \param[in] fp the file to parse  * \param[in] line_nr pointer to an integer containing the current line number (for debugging purposes)  * \return NULL on failure otherwise a RSA structure  */
name|RSA
modifier|*
name|ldns_key_new_frm_fp_rsa_l
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|int
modifier|*
name|line_nr
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * frm_fp helper function. This function parses the  * remainder of the (DSA) priv. key file  * \param[in] fp the file to parse  * \return NULL on failure otherwise a RSA structure  */
name|DSA
modifier|*
name|ldns_key_new_frm_fp_dsa
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * frm_fp helper function. This function parses the  * remainder of the (DSA) priv. key file  * \param[in] fp the file to parse  * \param[in] line_nr pointer to an integer containing the current line number (for debugging purposes)  * \return NULL on failure otherwise a RSA structure  */
name|DSA
modifier|*
name|ldns_key_new_frm_fp_dsa_l
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|int
modifier|*
name|line_nr
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * frm_fp helper function. This function parses the  * remainder of the (HMAC-MD5) key file  * This function allocated a buffer that needs to be freed  * \param[in] fp the file to parse  * \param[out] hmac_size the number of bits in the resulting buffer  * \return NULL on failure otherwise a newly allocated char buffer  */
name|unsigned
name|char
modifier|*
name|ldns_key_new_frm_fp_hmac
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|size_t
modifier|*
name|hmac_size
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * frm_fp helper function. This function parses the  * remainder of the (HMAC-MD5) key file  * This function allocated a buffer that needs to be freed  * \param[in] fp the file to parse  * \param[in] line_nr pointer to an integer containing the current line number (for error reporting purposes)  * \param[out] hmac_size the number of bits in the resulting buffer  * \return NULL on failure otherwise a newly allocated char buffer  */
name|unsigned
name|char
modifier|*
name|ldns_key_new_frm_fp_hmac_l
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|int
modifier|*
name|line_nr
parameter_list|,
name|size_t
modifier|*
name|hmac_size
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
comment|/* acces write functions */
comment|/**  * Set the key's algorithm  * \param[in] k the key  * \param[in] l the algorithm  */
name|void
name|ldns_key_set_algorithm
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|ldns_signing_algorithm
name|l
parameter_list|)
function_decl|;
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * Set the key's evp key  * \param[in] k the key  * \param[in] e the evp key  */
name|void
name|ldns_key_set_evp_key
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|EVP_PKEY
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/**  * Set the key's rsa data  * \param[in] k the key  * \param[in] r the rsa data  */
name|void
name|ldns_key_set_rsa_key
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|RSA
modifier|*
name|r
parameter_list|)
function_decl|;
comment|/**  * Set the key's dsa data  * \param[in] k the key  * \param[in] d the dsa data  */
name|void
name|ldns_key_set_dsa_key
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|DSA
modifier|*
name|d
parameter_list|)
function_decl|;
comment|/**   * Get the PKEY id for GOST, loads GOST into openssl as a side effect.  * Only available if GOST is compiled into the library and openssl.  * \return the gost id for EVP_CTX creation.  */
name|int
name|ldns_key_EVP_load_gost_id
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** Release the engine reference held for the GOST engine. */
name|void
name|ldns_key_EVP_unload_gost
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
comment|/**  * Set the key's hmac data  * \param[in] k the key  * \param[in] hmac the raw key data  */
name|void
name|ldns_key_set_hmac_key
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|unsigned
name|char
modifier|*
name|hmac
parameter_list|)
function_decl|;
comment|/**  * Set the key id data. This is used if the key points to  * some externally stored key data  *   * Only the pointer is set, the data there is not copied,  * and must be freed manually; ldns_key_deep_free() does   * *not* free this data  * \param[in] key the key  * \param[in] external_key key id data  */
name|void
name|ldns_key_set_external_key
parameter_list|(
name|ldns_key
modifier|*
name|key
parameter_list|,
name|void
modifier|*
name|external_key
parameter_list|)
function_decl|;
comment|/**  * Set the key's hmac size  * \param[in] k the key  * \param[in] hmac_size the size of the hmac data  */
name|void
name|ldns_key_set_hmac_size
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|size_t
name|hmac_size
parameter_list|)
function_decl|;
comment|/**  * Set the key's original ttl  * \param[in] k the key  * \param[in] t the ttl  */
name|void
name|ldns_key_set_origttl
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|uint32_t
name|t
parameter_list|)
function_decl|;
comment|/**  * Set the key's inception date (seconds after epoch)  * \param[in] k the key  * \param[in] i the inception  */
name|void
name|ldns_key_set_inception
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|uint32_t
name|i
parameter_list|)
function_decl|;
comment|/**  * Set the key's expiration date (seconds after epoch)  * \param[in] k the key  * \param[in] e the expiration  */
name|void
name|ldns_key_set_expiration
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|uint32_t
name|e
parameter_list|)
function_decl|;
comment|/**  * Set the key's pubkey owner  * \param[in] k the key  * \param[in] r the owner  */
name|void
name|ldns_key_set_pubkey_owner
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|ldns_rdf
modifier|*
name|r
parameter_list|)
function_decl|;
comment|/**  * Set the key's key tag  * \param[in] k the key  * \param[in] tag the keytag  */
name|void
name|ldns_key_set_keytag
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|uint16_t
name|tag
parameter_list|)
function_decl|;
comment|/**  * Set the key's flags  * \param[in] k the key  * \param[in] flags the flags  */
name|void
name|ldns_key_set_flags
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|uint16_t
name|flags
parameter_list|)
function_decl|;
comment|/**  * Set the keylist's key count to count  * \param[in] key the key  * \param[in] count the cuont  */
name|void
name|ldns_key_list_set_key_count
parameter_list|(
name|ldns_key_list
modifier|*
name|key
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
comment|/**       * pushes a key to a keylist  * \param[in] key_list the key_list to push to   * \param[in] key the key to push   * \return false on error, otherwise true  */
name|bool
name|ldns_key_list_push_key
parameter_list|(
name|ldns_key_list
modifier|*
name|key_list
parameter_list|,
name|ldns_key
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * returns the number of keys in the key list  * \param[in] key_list the key_list  * \return the numbers of keys in the list  */
name|size_t
name|ldns_key_list_key_count
parameter_list|(
specifier|const
name|ldns_key_list
modifier|*
name|key_list
parameter_list|)
function_decl|;
comment|/**  * returns a pointer to the key in the list at the given position  * \param[in] key the key  * \param[in] nr the position in the list  * \return the key  */
name|ldns_key
modifier|*
name|ldns_key_list_key
parameter_list|(
specifier|const
name|ldns_key_list
modifier|*
name|key
parameter_list|,
name|size_t
name|nr
parameter_list|)
function_decl|;
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * returns the (openssl) RSA struct contained in the key  * \param[in] k the key to look in  * \return the RSA * structure in the key  */
name|RSA
modifier|*
name|ldns_key_rsa_key
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * returns the (openssl) EVP struct contained in the key  * \param[in] k the key to look in  * \return the RSA * structure in the key  */
name|EVP_PKEY
modifier|*
name|ldns_key_evp_key
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
comment|/**  * returns the (openssl) DSA struct contained in the key  */
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
name|DSA
modifier|*
name|ldns_key_dsa_key
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_SSL */
comment|/**  * return the signing alg of the key  * \param[in] k the key  * \return the algorithm  */
name|ldns_signing_algorithm
name|ldns_key_algorithm
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * set the use flag  * \param[in] k the key  * \param[in] v the boolean value to set the _use field to  */
name|void
name|ldns_key_set_use
parameter_list|(
name|ldns_key
modifier|*
name|k
parameter_list|,
name|bool
name|v
parameter_list|)
function_decl|;
comment|/**  * return the use flag  * \param[in] k the key  * \return the boolean value of the _use field  */
name|bool
name|ldns_key_use
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the hmac key data  * \param[in] k the key  * \return the hmac key data  */
name|unsigned
name|char
modifier|*
name|ldns_key_hmac_key
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the key id key data  * \param[in] k the key  * \return the key id data  */
name|void
modifier|*
name|ldns_key_external_key
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the hmac key size  * \param[in] k the key  * \return the hmac key size  */
name|size_t
name|ldns_key_hmac_size
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the original ttl of the key  * \param[in] k the key  * \return the original ttl  */
name|uint32_t
name|ldns_key_origttl
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the key's inception date  * \param[in] k the key  * \return the inception date  */
name|uint32_t
name|ldns_key_inception
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the key's expiration date  * \param[in] k the key  * \return the experiration date  */
name|uint32_t
name|ldns_key_expiration
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the keytag  * \param[in] k the key  * \return the keytag  */
name|uint16_t
name|ldns_key_keytag
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * return the public key's owner  * \param[in] k the key  * \return the owner  */
name|ldns_rdf
modifier|*
name|ldns_key_pubkey_owner
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * Set the 'use' flag for all keys in the list  * \param[in] keys The key_list  * \param[in] v The value to set the use flags to  */
name|void
name|ldns_key_list_set_use
parameter_list|(
name|ldns_key_list
modifier|*
name|keys
parameter_list|,
name|bool
name|v
parameter_list|)
function_decl|;
comment|/**  * return the flag of the key  * \param[in] k the key  * \return the flag  */
name|uint16_t
name|ldns_key_flags
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**       * pops the last rr from a keylist  * \param[in] key_list the rr_list to pop from  * \return NULL if nothing to pop. Otherwise the popped RR  */
name|ldns_key
modifier|*
name|ldns_key_list_pop_key
parameter_list|(
name|ldns_key_list
modifier|*
name|key_list
parameter_list|)
function_decl|;
comment|/**   * converts a ldns_key to a public key rr  * If the key data exists at an external point, the corresponding  * rdata field must still be added with ldns_rr_rdf_push() to the  * result rr of this function  *  * \param[in] k the ldns_key to convert  * \return ldns_rr representation of the key  */
name|ldns_rr
modifier|*
name|ldns_key2rr
parameter_list|(
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * print a private key to the file ouput  *   * \param[in] output the FILE descriptor where to print to  * \param[in] k the ldns_key to print  */
name|void
name|ldns_key_print
parameter_list|(
name|FILE
modifier|*
name|output
parameter_list|,
specifier|const
name|ldns_key
modifier|*
name|k
parameter_list|)
function_decl|;
comment|/**  * frees a key structure, but not its internal data structures  *  * \param[in] key the key object to free  */
name|void
name|ldns_key_free
parameter_list|(
name|ldns_key
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * frees a key structure and all its internal data structures, except  * the data set by ldns_key_set_external_key()  *  * \param[in] key the key object to free  */
name|void
name|ldns_key_deep_free
parameter_list|(
name|ldns_key
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * Frees a key list structure  * \param[in] key_list the key list object to free  */
name|void
name|ldns_key_list_free
parameter_list|(
name|ldns_key_list
modifier|*
name|key_list
parameter_list|)
function_decl|;
comment|/**  * Instantiates a DNSKEY or DS RR from file.  * \param[in] filename the file to read the record from  * \return the corresponding RR, or NULL if the parsing failed  */
name|ldns_rr
modifier|*
name|ldns_read_anchor_file
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
comment|/**  * Returns the 'default base name' for key files;  * IE. K\<zone\>+\<alg\>+\<keytag\>  * (without the .key or .private)  * The memory for this is allocated by this function,  * and should be freed by the caller  *   * \param[in] key the key to get the file name from  * \returns A string containing the file base name  */
name|char
modifier|*
name|ldns_key_get_file_base_name
parameter_list|(
name|ldns_key
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * See if a key algorithm is supported  * \param[in] algo the signing algorithm number.  * \returns true if supported.  */
name|int
name|ldns_key_algo_supported
parameter_list|(
name|int
name|algo
parameter_list|)
function_decl|;
comment|/**  * Get signing algorithm by name.  Comparison is case insensitive.  * \param[in] name string with the name.  * \returns 0 on parse failure or the algorithm number.  */
name|ldns_signing_algorithm
name|ldns_get_signing_algorithm_by_name
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LDNS_KEYS_H */
end_comment

end_unit

