begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * FILE:	sha2.h  * AUTHOR:	Aaron D. Gifford - http://www.aarongifford.com/  *   * Copyright (c) 2000-2001, Aaron D. Gifford  * All rights reserved.  *  * Modified by Jelte Jansen to fit in ldns, and not clash with any  * system-defined SHA code.  * Changes:  *  - Renamed (external) functions and constants to fit ldns style  *  - Removed uintXX vs. u_intXX smartness, since ldns needs uintXX  *    anyway  *  - BYTE ORDER check replaced by simple ifdef as defined or not by  *    configure.ac  *  - Removed _End and _Data functions  *  - Added ldns_shaX(data, len, digest) functions  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the copyright holder nor the names of contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTOR(S) ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTOR(S) BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $Id: sha2.h,v 1.1 2001/11/08 00:02:01 adg Exp adg $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LDNS_SHA2_H__
end_ifndef

begin_define
define|#
directive|define
name|__LDNS_SHA2_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Import u_intXX_t size_t type definitions from system headers.  You  * may need to change this, or define these things yourself in this  * file.  */
include|#
directive|include
file|<sys/types.h>
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_INTTYPES_H
include|#
directive|include
file|<inttypes.h>
endif|#
directive|endif
comment|/* LDNS_BUILD_CONFIG_HAVE_INTTYPES_H */
comment|/*** SHA-256/384/512 Various Length Definitions ***********************/
define|#
directive|define
name|LDNS_SHA256_BLOCK_LENGTH
value|64
define|#
directive|define
name|LDNS_SHA256_DIGEST_LENGTH
value|32
define|#
directive|define
name|LDNS_SHA256_DIGEST_STRING_LENGTH
value|(LDNS_SHA256_DIGEST_LENGTH * 2 + 1)
define|#
directive|define
name|LDNS_SHA384_BLOCK_LENGTH
value|128
define|#
directive|define
name|LDNS_SHA384_DIGEST_LENGTH
value|48
define|#
directive|define
name|LDNS_SHA384_DIGEST_STRING_LENGTH
value|(LDNS_SHA384_DIGEST_LENGTH * 2 + 1)
define|#
directive|define
name|LDNS_SHA512_BLOCK_LENGTH
value|128
define|#
directive|define
name|LDNS_SHA512_DIGEST_LENGTH
value|64
define|#
directive|define
name|LDNS_SHA512_DIGEST_STRING_LENGTH
value|(LDNS_SHA512_DIGEST_LENGTH * 2 + 1)
comment|/*** SHA-256/384/512 Context Structures *******************************/
typedef|typedef
struct|struct
name|_ldns_sha256_CTX
block|{
name|uint32_t
name|state
index|[
literal|8
index|]
decl_stmt|;
name|uint64_t
name|bitcount
decl_stmt|;
name|uint8_t
name|buffer
index|[
name|LDNS_SHA256_BLOCK_LENGTH
index|]
decl_stmt|;
block|}
name|ldns_sha256_CTX
typedef|;
typedef|typedef
struct|struct
name|_ldns_sha512_CTX
block|{
name|uint64_t
name|state
index|[
literal|8
index|]
decl_stmt|;
name|uint64_t
name|bitcount
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|buffer
index|[
name|LDNS_SHA512_BLOCK_LENGTH
index|]
decl_stmt|;
block|}
name|ldns_sha512_CTX
typedef|;
typedef|typedef
name|ldns_sha512_CTX
name|ldns_sha384_CTX
typedef|;
comment|/*** SHA-256/384/512 Function Prototypes ******************************/
name|void
name|ldns_sha256_init
parameter_list|(
name|ldns_sha256_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|ldns_sha256_update
parameter_list|(
name|ldns_sha256_CTX
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|ldns_sha256_final
parameter_list|(
name|uint8_t
index|[
name|LDNS_SHA256_DIGEST_LENGTH
index|]
parameter_list|,
name|ldns_sha256_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|ldns_sha384_init
parameter_list|(
name|ldns_sha384_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|ldns_sha384_update
parameter_list|(
name|ldns_sha384_CTX
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|ldns_sha384_final
parameter_list|(
name|uint8_t
index|[
name|LDNS_SHA384_DIGEST_LENGTH
index|]
parameter_list|,
name|ldns_sha384_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|ldns_sha512_init
parameter_list|(
name|ldns_sha512_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|ldns_sha512_update
parameter_list|(
name|ldns_sha512_CTX
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|ldns_sha512_final
parameter_list|(
name|uint8_t
index|[
name|LDNS_SHA512_DIGEST_LENGTH
index|]
parameter_list|,
name|ldns_sha512_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/**  * Convenience function to digest a fixed block of data at once.  *  * \param[in] data the data to digest  * \param[in] data_len the length of data in bytes  * \param[out] digest the length of data in bytes  *             This pointer MUST have LDNS_SHA256_DIGEST_LENGTH bytes  *             available  * \return the SHA1 digest of the given data  */
name|unsigned
name|char
modifier|*
name|ldns_sha256
parameter_list|(
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|data_len
parameter_list|,
name|unsigned
name|char
modifier|*
name|digest
parameter_list|)
function_decl|;
comment|/**  * Convenience function to digest a fixed block of data at once.  *  * \param[in] data the data to digest  * \param[in] data_len the length of data in bytes  * \param[out] digest the length of data in bytes  *             This pointer MUST have LDNS_SHA384_DIGEST_LENGTH bytes  *             available  * \return the SHA1 digest of the given data  */
name|unsigned
name|char
modifier|*
name|ldns_sha384
parameter_list|(
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|data_len
parameter_list|,
name|unsigned
name|char
modifier|*
name|digest
parameter_list|)
function_decl|;
comment|/**  * Convenience function to digest a fixed block of data at once.  *  * \param[in] data the data to digest  * \param[in] data_len the length of data in bytes  * \param[out] digest the length of data in bytes  *             This pointer MUST have LDNS_SHA512_DIGEST_LENGTH bytes  *             available  * \return the SHA1 digest of the given data  */
name|unsigned
name|char
modifier|*
name|ldns_sha512
parameter_list|(
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|data_len
parameter_list|,
name|unsigned
name|char
modifier|*
name|digest
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __LDNS_SHA2_H__ */
end_comment

end_unit

