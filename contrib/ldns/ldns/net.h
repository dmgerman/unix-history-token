begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * net.h  *  * DNS Resolver definitions  *  * a Net::DNS like library for C  *  * (c) NLnet Labs, 2005-2006  *  * See the file LICENSE for the license  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_NET_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_NET_H
end_define

begin_include
include|#
directive|include
file|<ldns/ldns.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|LDNS_DEFAULT_TIMEOUT_SEC
value|5
define|#
directive|define
name|LDNS_DEFAULT_TIMEOUT_USEC
value|0
comment|/**  * \file  *  * Contains functions to send and receive packets over a network.  */
comment|/**  * Sends a buffer to an ip using udp and return the respons as a ldns_pkt  * \param[in] qbin the ldns_buffer to be send  * \param[in] to the ip addr to send to  * \param[in] tolen length of the ip addr  * \param[in] timeout the timeout value for the network  * \param[out] answersize size of the packet  * \param[out] result packet with the answer  * \return status  */
name|ldns_status
name|ldns_udp_send
parameter_list|(
name|uint8_t
modifier|*
modifier|*
name|result
parameter_list|,
name|ldns_buffer
modifier|*
name|qbin
parameter_list|,
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|socklen_t
name|tolen
parameter_list|,
name|struct
name|timeval
name|timeout
parameter_list|,
name|size_t
modifier|*
name|answersize
parameter_list|)
function_decl|;
comment|/**  * Send an udp query and don't wait for an answer but return  * the socket  * \param[in] qbin the ldns_buffer to be send  * \param[in] to the ip addr to send to  * \param[in] tolen length of the ip addr  * \param[in] timeout *unused*, was the timeout value for the network  * \return the socket used  */
name|int
name|ldns_udp_bgsend
parameter_list|(
name|ldns_buffer
modifier|*
name|qbin
parameter_list|,
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|socklen_t
name|tolen
parameter_list|,
name|struct
name|timeval
name|timeout
parameter_list|)
function_decl|;
comment|/**  * Send an tcp query and don't wait for an answer but return  * the socket  * \param[in] qbin the ldns_buffer to be send  * \param[in] to the ip addr to send to  * \param[in] tolen length of the ip addr  * \param[in] timeout the timeout value for the connect attempt  * \return the socket used  */
name|int
name|ldns_tcp_bgsend
parameter_list|(
name|ldns_buffer
modifier|*
name|qbin
parameter_list|,
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|socklen_t
name|tolen
parameter_list|,
name|struct
name|timeval
name|timeout
parameter_list|)
function_decl|;
comment|/**  * Sends a buffer to an ip using tcp and return the respons as a ldns_pkt  * \param[in] qbin the ldns_buffer to be send  * \param[in] qbin the ldns_buffer to be send  * \param[in] to the ip addr to send to  * \param[in] tolen length of the ip addr  * \param[in] timeout the timeout value for the network  * \param[out] answersize size of the packet  * \param[out] result packet with the answer  * \return status  */
name|ldns_status
name|ldns_tcp_send
parameter_list|(
name|uint8_t
modifier|*
modifier|*
name|result
parameter_list|,
name|ldns_buffer
modifier|*
name|qbin
parameter_list|,
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|socklen_t
name|tolen
parameter_list|,
name|struct
name|timeval
name|timeout
parameter_list|,
name|size_t
modifier|*
name|answersize
parameter_list|)
function_decl|;
comment|/**  * Sends ptk to the nameserver at the resolver object. Returns the data  * as a ldns_pkt  *   * \param[out] pkt packet received from the nameserver  * \param[in] r the resolver to use   * \param[in] query_pkt the query to send  * \return status  */
name|ldns_status
name|ldns_send
parameter_list|(
name|ldns_pkt
modifier|*
modifier|*
name|pkt
parameter_list|,
name|ldns_resolver
modifier|*
name|r
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|query_pkt
parameter_list|)
function_decl|;
comment|/**  * Sends and ldns_buffer (presumably containing a packet to the nameserver at the resolver object. Returns the data  * as a ldns_pkt  *   * \param[out] pkt packet received from the nameserver  * \param[in] r the resolver to use   * \param[in] qb the buffer to send  * \param[in] tsig_mac the tsig MAC to authenticate the response with (NULL to do no TSIG authentication)  * \return status  */
name|ldns_status
name|ldns_send_buffer
parameter_list|(
name|ldns_pkt
modifier|*
modifier|*
name|pkt
parameter_list|,
name|ldns_resolver
modifier|*
name|r
parameter_list|,
name|ldns_buffer
modifier|*
name|qb
parameter_list|,
name|ldns_rdf
modifier|*
name|tsig_mac
parameter_list|)
function_decl|;
comment|/**  * Create a tcp socket to the specified address  * \param[in] to ip and family  * \param[in] tolen length of to  * \param[in] timeout timeout for the connect attempt  * \return a socket descriptor  */
name|int
name|ldns_tcp_connect
parameter_list|(
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|socklen_t
name|tolen
parameter_list|,
name|struct
name|timeval
name|timeout
parameter_list|)
function_decl|;
comment|/**  * Create a udp socket to the specified address  * \param[in] to ip and family  * \param[in] timeout *unused*, was timeout for the socket  * \return a socket descriptor  */
name|int
name|ldns_udp_connect
parameter_list|(
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|struct
name|timeval
name|timeout
parameter_list|)
function_decl|;
comment|/**  * send a query via tcp to a server. Don't want for the answer  *  * \param[in] qbin the buffer to send  * \param[in] sockfd the socket to use  * \param[in] to which ip to send it  * \param[in] tolen socketlen  * \return number of bytes sent  */
name|ssize_t
name|ldns_tcp_send_query
parameter_list|(
name|ldns_buffer
modifier|*
name|qbin
parameter_list|,
name|int
name|sockfd
parameter_list|,
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|socklen_t
name|tolen
parameter_list|)
function_decl|;
comment|/**  * send a query via udp to a server. Don;t want for the answer  *  * \param[in] qbin the buffer to send  * \param[in] sockfd the socket to use  * \param[in] to which ip to send it  * \param[in] tolen socketlen  * \return number of bytes sent  */
name|ssize_t
name|ldns_udp_send_query
parameter_list|(
name|ldns_buffer
modifier|*
name|qbin
parameter_list|,
name|int
name|sockfd
parameter_list|,
specifier|const
name|struct
name|sockaddr_storage
modifier|*
name|to
parameter_list|,
name|socklen_t
name|tolen
parameter_list|)
function_decl|;
comment|/**  * Gives back a raw packet from the wire and reads the header data from the given  * socket. Allocates the data (of size size) itself, so don't forget to free  *  * \param[in] sockfd the socket to read from  * \param[out] size the number of bytes that are read  * \param[in] timeout the time allowed between packets.  * \return the data read  */
name|uint8_t
modifier|*
name|ldns_tcp_read_wire_timeout
parameter_list|(
name|int
name|sockfd
parameter_list|,
name|size_t
modifier|*
name|size
parameter_list|,
name|struct
name|timeval
name|timeout
parameter_list|)
function_decl|;
comment|/**  * This routine may block. Use ldns_tcp_read_wire_timeout, it checks timeouts.  * Gives back a raw packet from the wire and reads the header data from the given  * socket. Allocates the data (of size size) itself, so don't forget to free  *  * \param[in] sockfd the socket to read from  * \param[out] size the number of bytes that are read  * \return the data read  */
name|uint8_t
modifier|*
name|ldns_tcp_read_wire
parameter_list|(
name|int
name|sockfd
parameter_list|,
name|size_t
modifier|*
name|size
parameter_list|)
function_decl|;
comment|/**  * Gives back a raw packet from the wire and reads the header data from the given  * socket. Allocates the data (of size size) itself, so don't forget to free  *  * \param[in] sockfd the socket to read from  * \param[in] fr the address of the client (if applicable)  * \param[in] *frlen the lenght of the client's addr (if applicable)  * \param[out] size the number of bytes that are read  * \return the data read  */
name|uint8_t
modifier|*
name|ldns_udp_read_wire
parameter_list|(
name|int
name|sockfd
parameter_list|,
name|size_t
modifier|*
name|size
parameter_list|,
name|struct
name|sockaddr_storage
modifier|*
name|fr
parameter_list|,
name|socklen_t
modifier|*
name|frlen
parameter_list|)
function_decl|;
comment|/**  * returns the native sockaddr representation from the rdf.  * \param[in] rd the ldns_rdf to operate on  * \param[in] port what port to use. 0 means; use default (53)  * \param[out] size what is the size of the sockaddr_storage  * \return struct sockaddr* the address in the format so other  * functions can use it (sendto)  */
name|struct
name|sockaddr_storage
modifier|*
name|ldns_rdf2native_sockaddr_storage
parameter_list|(
specifier|const
name|ldns_rdf
modifier|*
name|rd
parameter_list|,
name|uint16_t
name|port
parameter_list|,
name|size_t
modifier|*
name|size
parameter_list|)
function_decl|;
comment|/**  * returns an rdf with the sockaddr info. works for ip4 and ip6  * \param[in] sock the struct sockaddr_storage to convert  * \param[in] port what port was used. When NULL this is not set  * \return ldns_rdf* wth the address  */
name|ldns_rdf
modifier|*
name|ldns_sockaddr_storage2rdf
parameter_list|(
name|struct
name|sockaddr_storage
modifier|*
name|sock
parameter_list|,
name|uint16_t
modifier|*
name|port
parameter_list|)
function_decl|;
comment|/**  * Prepares the resolver for an axfr query  * The query is sent and the answers can be read with ldns_axfr_next  * \param[in] resolver the resolver to use  * \param[in] domain the domain to exfr  * \param[in] c the class to use  * \return ldns_status the status of the transfer  */
name|ldns_status
name|ldns_axfr_start
parameter_list|(
name|ldns_resolver
modifier|*
name|resolver
parameter_list|,
name|ldns_rdf
modifier|*
name|domain
parameter_list|,
name|ldns_rr_class
name|c
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LDNS_NET_H */
end_comment

end_unit

