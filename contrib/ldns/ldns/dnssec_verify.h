begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** dnssec_verify */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_DNSSEC_VERIFY_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_DNSSEC_VERIFY_H
end_define

begin_define
define|#
directive|define
name|LDNS_DNSSEC_TRUST_TREE_MAX_PARENTS
value|10
end_define

begin_include
include|#
directive|include
file|<ldns/dnssec.h>
end_include

begin_include
include|#
directive|include
file|<ldns/host2str.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * Chain structure that contains all DNSSEC data needed to  * verify an rrset  */
typedef|typedef
name|struct
name|ldns_dnssec_data_chain_struct
name|ldns_dnssec_data_chain
typedef|;
struct|struct
name|ldns_dnssec_data_chain_struct
block|{
name|ldns_rr_list
modifier|*
name|rrset
decl_stmt|;
name|ldns_rr_list
modifier|*
name|signatures
decl_stmt|;
name|ldns_rr_type
name|parent_type
decl_stmt|;
name|ldns_dnssec_data_chain
modifier|*
name|parent
decl_stmt|;
name|ldns_pkt_rcode
name|packet_rcode
decl_stmt|;
name|ldns_rr_type
name|packet_qtype
decl_stmt|;
name|bool
name|packet_nodata
decl_stmt|;
block|}
struct|;
comment|/**  * Creates a new dnssec_chain structure  * \return ldns_dnssec_data_chain *  */
name|ldns_dnssec_data_chain
modifier|*
name|ldns_dnssec_data_chain_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Frees a dnssec_data_chain structure  *  * \param[in] *chain The chain to free  */
name|void
name|ldns_dnssec_data_chain_free
parameter_list|(
name|ldns_dnssec_data_chain
modifier|*
name|chain
parameter_list|)
function_decl|;
comment|/**  * Frees a dnssec_data_chain structure, and all data  * contained therein  *  * \param[in] *chain The dnssec_data_chain to free  */
name|void
name|ldns_dnssec_data_chain_deep_free
parameter_list|(
name|ldns_dnssec_data_chain
modifier|*
name|chain
parameter_list|)
function_decl|;
comment|/**  * Prints the dnssec_data_chain to the given file stream  *   * \param[in] *out The file stream to print to  * \param[in] *chain The dnssec_data_chain to print  */
name|void
name|ldns_dnssec_data_chain_print
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_dnssec_data_chain
modifier|*
name|chain
parameter_list|)
function_decl|;
comment|/**  * Prints the dnssec_data_chain to the given file stream  *   * \param[in] *out The file stream to print to  * \param[in] *fmt The format of the textual representation  * \param[in] *chain The dnssec_data_chain to print  */
name|void
name|ldns_dnssec_data_chain_print_fmt
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
specifier|const
name|ldns_dnssec_data_chain
modifier|*
name|chain
parameter_list|)
function_decl|;
comment|/**  * Build an ldns_dnssec_data_chain, which contains all  * DNSSEC data that is needed to derive the trust tree later  *  * The data_set will be cloned  *  * \param[in] *res resolver structure for further needed queries  * \param[in] qflags resolution flags  * \param[in] *data_set The original rrset where the chain ends  * \param[in] *pkt optional, can contain the original packet  * (and hence the sigs and maybe the key)  * \param[in] *orig_rr The original Resource Record  *  * \return the DNSSEC data chain  */
name|ldns_dnssec_data_chain
modifier|*
name|ldns_dnssec_build_data_chain
parameter_list|(
name|ldns_resolver
modifier|*
name|res
parameter_list|,
specifier|const
name|uint16_t
name|qflags
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|data_set
parameter_list|,
specifier|const
name|ldns_pkt
modifier|*
name|pkt
parameter_list|,
name|ldns_rr
modifier|*
name|orig_rr
parameter_list|)
function_decl|;
comment|/**  * Tree structure that contains the relation of DNSSEC data,  * and their cryptographic status.  *  * This tree is derived from a data_chain, and can be used  * to look whether there is a connection between an RRSET  * and a trusted key. The tree only contains pointers to the  * data_chain, and therefore one should *never* free() the  * data_chain when there is still a trust tree derived from  * that chain.  *  * Example tree:  *     key   key    key  *       \    |    /  *        \   |   /  *         \  |  /  *            ds  *            |  *           key  *            |  *           key  *            |  *            rr  *  * For each signature there is a parent; if the parent  * pointer is null, it couldn't be found and there was no  * denial; otherwise is a tree which contains either a  * DNSKEY, a DS, or a NSEC rr  */
typedef|typedef
name|struct
name|ldns_dnssec_trust_tree_struct
name|ldns_dnssec_trust_tree
typedef|;
struct|struct
name|ldns_dnssec_trust_tree_struct
block|{
name|ldns_rr
modifier|*
name|rr
decl_stmt|;
comment|/* the complete rrset this rr was in */
name|ldns_rr_list
modifier|*
name|rrset
decl_stmt|;
name|ldns_dnssec_trust_tree
modifier|*
name|parents
index|[
name|LDNS_DNSSEC_TRUST_TREE_MAX_PARENTS
index|]
decl_stmt|;
name|ldns_status
name|parent_status
index|[
name|LDNS_DNSSEC_TRUST_TREE_MAX_PARENTS
index|]
decl_stmt|;
comment|/** for debugging, add signatures too (you might want 	    those if they contain errors) */
name|ldns_rr
modifier|*
name|parent_signature
index|[
name|LDNS_DNSSEC_TRUST_TREE_MAX_PARENTS
index|]
decl_stmt|;
name|size_t
name|parent_count
decl_stmt|;
block|}
struct|;
comment|/**  * Creates a new (empty) dnssec_trust_tree structure  *  * \return ldns_dnssec_trust_tree *  */
name|ldns_dnssec_trust_tree
modifier|*
name|ldns_dnssec_trust_tree_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Frees the dnssec_trust_tree recursively  *  * There is no deep free; all data in the trust tree  * consists of pointers to a data_chain  *  * \param[in] tree The tree to free  */
name|void
name|ldns_dnssec_trust_tree_free
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|tree
parameter_list|)
function_decl|;
comment|/**  * returns the depth of the trust tree  *  * \param[in] tree tree to calculate the depth of  * \return The depth of the tree  */
name|size_t
name|ldns_dnssec_trust_tree_depth
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|tree
parameter_list|)
function_decl|;
comment|/**  * Prints the dnssec_trust_tree structure to the given file  * stream.  *  * If a link status is not LDNS_STATUS_OK; the status and  * relevant signatures are printed too  *  * \param[in] *out The file stream to print to  * \param[in] tree The trust tree to print  * \param[in] tabs Prepend each line with tabs*2 spaces  * \param[in] extended If true, add little explanation lines to the output  */
name|void
name|ldns_dnssec_trust_tree_print
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
name|ldns_dnssec_trust_tree
modifier|*
name|tree
parameter_list|,
name|size_t
name|tabs
parameter_list|,
name|bool
name|extended
parameter_list|)
function_decl|;
comment|/**  * Prints the dnssec_trust_tree structure to the given file  * stream.  *  * If a link status is not LDNS_STATUS_OK; the status and  * relevant signatures are printed too  *  * \param[in] *out The file stream to print to  * \param[in] *fmt The format of the textual representation  * \param[in] tree The trust tree to print  * \param[in] tabs Prepend each line with tabs*2 spaces  * \param[in] extended If true, add little explanation lines to the output  */
name|void
name|ldns_dnssec_trust_tree_print_fmt
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_dnssec_trust_tree
modifier|*
name|tree
parameter_list|,
name|size_t
name|tabs
parameter_list|,
name|bool
name|extended
parameter_list|)
function_decl|;
comment|/**  * Adds a trust tree as a parent for the given trust tree  *  * \param[in] *tree The tree to add the parent to  * \param[in] *parent The parent tree to add  * \param[in] *parent_signature The RRSIG relevant to this parent/child  *                              connection  * \param[in] parent_status The DNSSEC status for this parent, child and RRSIG  * \return LDNS_STATUS_OK if the addition succeeds, error otherwise  */
name|ldns_status
name|ldns_dnssec_trust_tree_add_parent
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|tree
parameter_list|,
specifier|const
name|ldns_dnssec_trust_tree
modifier|*
name|parent
parameter_list|,
specifier|const
name|ldns_rr
modifier|*
name|parent_signature
parameter_list|,
specifier|const
name|ldns_status
name|parent_status
parameter_list|)
function_decl|;
comment|/**  * Generates a dnssec_trust_tree for the given rr from the  * given data_chain  *  * This does not clone the actual data; Don't free the  * data_chain before you are done with this tree  *  * \param[in] *data_chain The chain to derive the trust tree from  * \param[in] *rr The RR this tree will be about  * \return ldns_dnssec_trust_tree *  */
name|ldns_dnssec_trust_tree
modifier|*
name|ldns_dnssec_derive_trust_tree
parameter_list|(
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Generates a dnssec_trust_tree for the given rr from the  * given data_chain  *  * This does not clone the actual data; Don't free the  * data_chain before you are done with this tree  *  * \param[in] *data_chain The chain to derive the trust tree from  * \param[in] *rr The RR this tree will be about  * \param[in] check_time the time for which the validation is performed  * \return ldns_dnssec_trust_tree *  */
name|ldns_dnssec_trust_tree
modifier|*
name|ldns_dnssec_derive_trust_tree_time
parameter_list|(
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|rr
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used for a 'normal' rrset  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] cur_sig_rr The currently relevant signature  */
name|void
name|ldns_dnssec_derive_trust_tree_normal_rrset
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|cur_sig_rr
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used for a 'normal' rrset  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] cur_sig_rr The currently relevant signature  * \param[in] check_time the time for which the validation is performed  */
name|void
name|ldns_dnssec_derive_trust_tree_normal_rrset_time
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|cur_sig_rr
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used for DNSKEY rrsets  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] cur_rr The currently relevant DNSKEY RR  * \param[in] cur_sig_rr The currently relevant signature  */
name|void
name|ldns_dnssec_derive_trust_tree_dnskey_rrset
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|cur_rr
parameter_list|,
name|ldns_rr
modifier|*
name|cur_sig_rr
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used for DNSKEY rrsets  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] cur_rr The currently relevant DNSKEY RR  * \param[in] cur_sig_rr The currently relevant signature  * \param[in] check_time the time for which the validation is performed  */
name|void
name|ldns_dnssec_derive_trust_tree_dnskey_rrset_time
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|cur_rr
parameter_list|,
name|ldns_rr
modifier|*
name|cur_sig_rr
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used for DNSKEY rrsets  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] cur_rr The currently relevant DNSKEY RR  * \param[in] cur_sig_rr The currently relevant signature  * \param[in] check_time the time for which the validation is performed  */
name|void
name|ldns_dnssec_derive_trust_tree_dnskey_rrset_time
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|cur_rr
parameter_list|,
name|ldns_rr
modifier|*
name|cur_sig_rr
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used for DS rrsets  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] cur_rr The currently relevant DS RR  */
name|void
name|ldns_dnssec_derive_trust_tree_ds_rrset
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|cur_rr
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used for DS rrsets  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] cur_rr The currently relevant DS RR  * \param[in] check_time the time for which the validation is performed  */
name|void
name|ldns_dnssec_derive_trust_tree_ds_rrset_time
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|ldns_rr
modifier|*
name|cur_rr
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used when there are no  * signatures  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  */
name|void
name|ldns_dnssec_derive_trust_tree_no_sig
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|)
function_decl|;
comment|/**  * Sub function for derive_trust_tree that is used when there are no  * signatures  *  * \param[in] new_tree The trust tree that we are building  * \param[in] data_chain The data chain containing the data for the trust tree  * \param[in] check_time the time for which the validation is performed  */
name|void
name|ldns_dnssec_derive_trust_tree_no_sig_time
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|new_tree
parameter_list|,
name|ldns_dnssec_data_chain
modifier|*
name|data_chain
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Returns OK if there is a trusted path in the tree to one of   * the DNSKEY or DS RRs in the given list  *  * \param *tree The trust tree so search  * \param *keys A ldns_rr_list of DNSKEY and DS rrs to look for  *  * \return LDNS_STATUS_OK if there is a trusted path to one of  *                        the keys, or the *first* error encountered  *                        if there were no paths  */
name|ldns_status
name|ldns_dnssec_trust_tree_contains_keys
parameter_list|(
name|ldns_dnssec_trust_tree
modifier|*
name|tree
parameter_list|,
name|ldns_rr_list
modifier|*
name|keys
parameter_list|)
function_decl|;
comment|/**  * Verifies a list of signatures for one rrset.  *  * \param[in] rrset the rrset to verify  * \param[in] rrsig a list of signatures to check  * \param[in] keys a list of keys to check with  * \param[out] good_keys  if this is a (initialized) list, the pointer to keys  *                        from keys that validate one of the signatures  *                        are added to it  * \return status LDNS_STATUS_OK if there is at least one correct key  */
name|ldns_status
name|ldns_verify
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsig
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|ldns_rr_list
modifier|*
name|good_keys
parameter_list|)
function_decl|;
comment|/**  * Verifies a list of signatures for one rrset.  *  * \param[in] rrset the rrset to verify  * \param[in] rrsig a list of signatures to check  * \param[in] keys a list of keys to check with  * \param[in] check_time the time for which the validation is performed  * \param[out] good_keys  if this is a (initialized) list, the pointer to keys  *                        from keys that validate one of the signatures  *                        are added to it  * \return status LDNS_STATUS_OK if there is at least one correct key  */
name|ldns_status
name|ldns_verify_time
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsig
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|time_t
name|check_time
parameter_list|,
name|ldns_rr_list
modifier|*
name|good_keys
parameter_list|)
function_decl|;
comment|/**  * Verifies a list of signatures for one rrset, but disregard the time.  * Inception and Expiration are not checked.  *  * \param[in] rrset the rrset to verify  * \param[in] rrsig a list of signatures to check  * \param[in] keys a list of keys to check with  * \param[out] good_keys  if this is a (initialized) list, the pointer to keys  *                        from keys that validate one of the signatures  *                        are added to it  * \return status LDNS_STATUS_OK if there is at least one correct key  */
name|ldns_status
name|ldns_verify_notime
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsig
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|ldns_rr_list
modifier|*
name|good_keys
parameter_list|)
function_decl|;
comment|/**  * Tries to build an authentication chain from the given   * keys down to the queried domain.  *  * If we find a valid trust path, return the valid keys for the domain.  *   * \param[in] res the current resolver  * \param[in] domain the domain we want valid keys for  * \param[in] keys the current set of trusted keys  * \param[out] status pointer to the status variable where the result  *                    code will be stored  * \return the set of trusted keys for the domain, or NULL if no   *         trust path could be built.  */
name|ldns_rr_list
modifier|*
name|ldns_fetch_valid_domain_keys
parameter_list|(
specifier|const
name|ldns_resolver
modifier|*
name|res
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|domain
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|ldns_status
modifier|*
name|status
parameter_list|)
function_decl|;
comment|/**  * Tries to build an authentication chain from the given   * keys down to the queried domain.  *  * If we find a valid trust path, return the valid keys for the domain.  *   * \param[in] res the current resolver  * \param[in] domain the domain we want valid keys for  * \param[in] keys the current set of trusted keys  * \param[in] check_time the time for which the validation is performed  * \param[out] status pointer to the status variable where the result  *                    code will be stored  * \return the set of trusted keys for the domain, or NULL if no   *         trust path could be built.  */
name|ldns_rr_list
modifier|*
name|ldns_fetch_valid_domain_keys_time
parameter_list|(
specifier|const
name|ldns_resolver
modifier|*
name|res
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|domain
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|time_t
name|check_time
parameter_list|,
name|ldns_status
modifier|*
name|status
parameter_list|)
function_decl|;
comment|/**  * Validates the DNSKEY RRset for the given domain using the provided   * trusted keys.  *  * \param[in] res the current resolver  * \param[in] domain the domain we want valid keys for  * \param[in] keys the current set of trusted keys  * \return the set of trusted keys for the domain, or NULL if the RRSET  *         could not be validated  */
name|ldns_rr_list
modifier|*
name|ldns_validate_domain_dnskey
parameter_list|(
specifier|const
name|ldns_resolver
modifier|*
name|res
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|domain
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|)
function_decl|;
comment|/**  * Validates the DNSKEY RRset for the given domain using the provided   * trusted keys.  *  * \param[in] res the current resolver  * \param[in] domain the domain we want valid keys for  * \param[in] keys the current set of trusted keys  * \param[in] check_time the time for which the validation is performed  * \return the set of trusted keys for the domain, or NULL if the RRSET  *         could not be validated  */
name|ldns_rr_list
modifier|*
name|ldns_validate_domain_dnskey_time
parameter_list|(
specifier|const
name|ldns_resolver
modifier|*
name|res
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|domain
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Validates the DS RRset for the given domain using the provided trusted keys.  *  * \param[in] res the current resolver  * \param[in] domain the domain we want valid keys for  * \param[in] keys the current set of trusted keys  * \return the set of trusted keys for the domain, or NULL if the RRSET could not be validated  */
name|ldns_rr_list
modifier|*
name|ldns_validate_domain_ds
parameter_list|(
specifier|const
name|ldns_resolver
modifier|*
name|res
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|domain
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|)
function_decl|;
comment|/**  * Validates the DS RRset for the given domain using the provided trusted keys.  *  * \param[in] res the current resolver  * \param[in] domain the domain we want valid keys for  * \param[in] keys the current set of trusted keys  * \param[in] check_time the time for which the validation is performed  * \return the set of trusted keys for the domain, or NULL if the RRSET could not be validated  */
name|ldns_rr_list
modifier|*
name|ldns_validate_domain_ds_time
parameter_list|(
specifier|const
name|ldns_resolver
modifier|*
name|res
parameter_list|,
specifier|const
name|ldns_rdf
modifier|*
name|domain
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
comment|/**  * Verifies a list of signatures for one RRset using a valid trust path.  *  * \param[in] res the current resolver  * \param[in] rrset the rrset to verify  * \param[in] rrsigs a list of signatures to check  * \param[out] validating_keys  if this is a (initialized) list, the  *                              keys from keys that validate one of  *                              the signatures are added to it  * \return status LDNS_STATUS_OK if there is at least one correct key  */
name|ldns_status
name|ldns_verify_trusted
parameter_list|(
name|ldns_resolver
modifier|*
name|res
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsigs
parameter_list|,
name|ldns_rr_list
modifier|*
name|validating_keys
parameter_list|)
function_decl|;
comment|/**  * Verifies a list of signatures for one RRset using a valid trust path.  *  * \param[in] res the current resolver  * \param[in] rrset the rrset to verify  * \param[in] rrsigs a list of signatures to check  * \param[in] check_time the time for which the validation is performed  * \param[out] validating_keys  if this is a (initialized) list, the  *                              keys from keys that validate one of  *                              the signatures are added to it  * \return status LDNS_STATUS_OK if there is at least one correct key  */
name|ldns_status
name|ldns_verify_trusted_time
parameter_list|(
name|ldns_resolver
modifier|*
name|res
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsigs
parameter_list|,
name|time_t
name|check_time
parameter_list|,
name|ldns_rr_list
modifier|*
name|validating_keys
parameter_list|)
function_decl|;
comment|/**  * denial is not just a river in egypt  *  * \param[in] rr The (query) RR to check the denial of existence for  * \param[in] nsecs The list of NSEC RRs that are supposed to deny the  *                  existence of the RR  * \param[in] rrsigs The RRSIG RR covering the NSEC RRs  * \return LDNS_STATUS_OK if the NSEC RRs deny the existence, error code  *                        containing the reason they do not otherwise  */
name|ldns_status
name|ldns_dnssec_verify_denial
parameter_list|(
name|ldns_rr
modifier|*
name|rr
parameter_list|,
name|ldns_rr_list
modifier|*
name|nsecs
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsigs
parameter_list|)
function_decl|;
comment|/**  * Denial of existence using NSEC3 records  * Since NSEC3 is a bit more complicated than normal denial, some  * context arguments are needed  *  * \param[in] rr The (query) RR to check the denial of existence for  * \param[in] nsecs The list of NSEC3 RRs that are supposed to deny the  *                  existence of the RR  * \param[in] rrsigs The RRSIG rr covering the NSEC RRs  * \param[in] packet_rcode The RCODE value of the packet that provided the  *                         NSEC3 RRs  * \param[in] packet_qtype The original query RR type  * \param[in] packet_nodata True if the providing packet had an empty ANSWER  *                          section  * \return LDNS_STATUS_OK if the NSEC3 RRs deny the existence, error code  *                        containing the reason they do not otherwise  */
name|ldns_status
name|ldns_dnssec_verify_denial_nsec3
parameter_list|(
name|ldns_rr
modifier|*
name|rr
parameter_list|,
name|ldns_rr_list
modifier|*
name|nsecs
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsigs
parameter_list|,
name|ldns_pkt_rcode
name|packet_rcode
parameter_list|,
name|ldns_rr_type
name|packet_qtype
parameter_list|,
name|bool
name|packet_nodata
parameter_list|)
function_decl|;
comment|/**  * Same as ldns_status ldns_dnssec_verify_denial_nsec3 but also returns  * the nsec rr that matched.  *  * \param[in] rr The (query) RR to check the denial of existence for  * \param[in] nsecs The list of NSEC3 RRs that are supposed to deny the  *                  existence of the RR  * \param[in] rrsigs The RRSIG rr covering the NSEC RRs  * \param[in] packet_rcode The RCODE value of the packet that provided the  *                         NSEC3 RRs  * \param[in] packet_qtype The original query RR type  * \param[in] packet_nodata True if the providing packet had an empty ANSWER  *                          section  * \param[in] match On match, the given (reference to a) pointer will be set   *                  to point to the matching nsec resource record.  * \return LDNS_STATUS_OK if the NSEC3 RRs deny the existence, error code  *                        containing the reason they do not otherwise  */
name|ldns_status
name|ldns_dnssec_verify_denial_nsec3_match
parameter_list|(
name|ldns_rr
modifier|*
name|rr
parameter_list|,
name|ldns_rr_list
modifier|*
name|nsecs
parameter_list|,
name|ldns_rr_list
modifier|*
name|rrsigs
parameter_list|,
name|ldns_pkt_rcode
name|packet_rcode
parameter_list|,
name|ldns_rr_type
name|packet_qtype
parameter_list|,
name|bool
name|packet_nodata
parameter_list|,
name|ldns_rr
modifier|*
modifier|*
name|match
parameter_list|)
function_decl|;
comment|/**  * Verifies the already processed data in the buffers  * This function should probably not be used directly.  *  * \param[in] rawsig_buf Buffer containing signature data to use  * \param[in] verify_buf Buffer containing data to verify  * \param[in] key_buf Buffer containing key data to use  * \param[in] algo Signing algorithm  * \return status LDNS_STATUS_OK if the data verifies. Error if not.  */
name|ldns_status
name|ldns_verify_rrsig_buffers
parameter_list|(
name|ldns_buffer
modifier|*
name|rawsig_buf
parameter_list|,
name|ldns_buffer
modifier|*
name|verify_buf
parameter_list|,
name|ldns_buffer
modifier|*
name|key_buf
parameter_list|,
name|uint8_t
name|algo
parameter_list|)
function_decl|;
comment|/**  * Like ldns_verify_rrsig_buffers, but uses raw data.  *  * \param[in] sig signature data to use  * \param[in] siglen length of signature data to use  * \param[in] verify_buf Buffer containing data to verify  * \param[in] key key data to use  * \param[in] keylen length of key data to use  * \param[in] algo Signing algorithm  * \return status LDNS_STATUS_OK if the data verifies. Error if not.  */
name|ldns_status
name|ldns_verify_rrsig_buffers_raw
parameter_list|(
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|size_t
name|siglen
parameter_list|,
name|ldns_buffer
modifier|*
name|verify_buf
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|size_t
name|keylen
parameter_list|,
name|uint8_t
name|algo
parameter_list|)
function_decl|;
comment|/**  * Verifies an rrsig. All keys in the keyset are tried.  * \param[in] rrset the rrset to check  * \param[in] rrsig the signature of the rrset  * \param[in] keys the keys to try  * \param[out] good_keys  if this is a (initialized) list, the pointer to keys  *                        from keys that validate one of the signatures  *                        are added to it  * \return a list of keys which validate the rrsig + rrset. Returns  * status LDNS_STATUS_OK if at least one key matched. Else an error.  */
name|ldns_status
name|ldns_verify_rrsig_keylist
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr
modifier|*
name|rrsig
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|ldns_rr_list
modifier|*
name|good_keys
parameter_list|)
function_decl|;
comment|/**  * Verifies an rrsig. All keys in the keyset are tried.  * \param[in] rrset the rrset to check  * \param[in] rrsig the signature of the rrset  * \param[in] keys the keys to try  * \param[in] check_time the time for which the validation is performed  * \param[out] good_keys  if this is a (initialized) list, the pointer to keys  *                        from keys that validate one of the signatures  *                        are added to it  * \return a list of keys which validate the rrsig + rrset. Returns  * status LDNS_STATUS_OK if at least one key matched. Else an error.  */
name|ldns_status
name|ldns_verify_rrsig_keylist_time
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr
modifier|*
name|rrsig
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|time_t
name|check_time
parameter_list|,
name|ldns_rr_list
modifier|*
name|good_keys
parameter_list|)
function_decl|;
comment|/**  * Verifies an rrsig. All keys in the keyset are tried. Time is not checked.  * \param[in] rrset the rrset to check  * \param[in] rrsig the signature of the rrset  * \param[in] keys the keys to try  * \param[out] good_keys  if this is a (initialized) list, the pointer to keys  *                        from keys that validate one of the signatures  *                        are added to it  * \return a list of keys which validate the rrsig + rrset. Returns  * status LDNS_STATUS_OK if at least one key matched. Else an error.  */
name|ldns_status
name|ldns_verify_rrsig_keylist_notime
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr
modifier|*
name|rrsig
parameter_list|,
specifier|const
name|ldns_rr_list
modifier|*
name|keys
parameter_list|,
name|ldns_rr_list
modifier|*
name|good_keys
parameter_list|)
function_decl|;
comment|/**  * verify an rrsig with 1 key  * \param[in] rrset the rrset  * \param[in] rrsig the rrsig to verify  * \param[in] key the key to use  * \return status message wether verification succeeded.  */
name|ldns_status
name|ldns_verify_rrsig
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr
modifier|*
name|rrsig
parameter_list|,
name|ldns_rr
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * verify an rrsig with 1 key  * \param[in] rrset the rrset  * \param[in] rrsig the rrsig to verify  * \param[in] key the key to use  * \param[in] check_time the time for which the validation is performed  * \return status message wether verification succeeded.  */
name|ldns_status
name|ldns_verify_rrsig_time
parameter_list|(
name|ldns_rr_list
modifier|*
name|rrset
parameter_list|,
name|ldns_rr
modifier|*
name|rrsig
parameter_list|,
name|ldns_rr
modifier|*
name|key
parameter_list|,
name|time_t
name|check_time
parameter_list|)
function_decl|;
if|#
directive|if
name|LDNS_BUILD_CONFIG_HAVE_SSL
comment|/**  * verifies a buffer with signature data for a buffer with rrset data   * with an EVP_PKEY  *  * \param[in] sig the signature data  * \param[in] rrset the rrset data, sorted and processed for verification  * \param[in] key the EVP key structure  * \param[in] digest_type The digest type of the signature  */
name|ldns_status
name|ldns_verify_rrsig_evp
parameter_list|(
name|ldns_buffer
modifier|*
name|sig
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|digest_type
parameter_list|)
function_decl|;
comment|/**  * Like ldns_verify_rrsig_evp, but uses raw signature data.  * \param[in] sig the signature data, wireformat uncompressed  * \param[in] siglen length of the signature data  * \param[in] rrset the rrset data, sorted and processed for verification  * \param[in] key the EVP key structure  * \param[in] digest_type The digest type of the signature  */
name|ldns_status
name|ldns_verify_rrsig_evp_raw
parameter_list|(
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|size_t
name|siglen
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|digest_type
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/**  * verifies a buffer with signature data (DSA) for a buffer with rrset data   * with a buffer with key data.  *  * \param[in] sig the signature data  * \param[in] rrset the rrset data, sorted and processed for verification  * \param[in] key the key data  */
name|ldns_status
name|ldns_verify_rrsig_dsa
parameter_list|(
name|ldns_buffer
modifier|*
name|sig
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|ldns_buffer
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * verifies a buffer with signature data (RSASHA1) for a buffer with rrset data   * with a buffer with key data.  *  * \param[in] sig the signature data  * \param[in] rrset the rrset data, sorted and processed for verification  * \param[in] key the key data  */
name|ldns_status
name|ldns_verify_rrsig_rsasha1
parameter_list|(
name|ldns_buffer
modifier|*
name|sig
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|ldns_buffer
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * verifies a buffer with signature data (RSAMD5) for a buffer with rrset data   * with a buffer with key data.  *  * \param[in] sig the signature data  * \param[in] rrset the rrset data, sorted and processed for verification  * \param[in] key the key data  */
name|ldns_status
name|ldns_verify_rrsig_rsamd5
parameter_list|(
name|ldns_buffer
modifier|*
name|sig
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|ldns_buffer
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**  * Like ldns_verify_rrsig_dsa, but uses raw signature and key data.  * \param[in] sig raw uncompressed wireformat signature data  * \param[in] siglen length of signature data  * \param[in] rrset ldns buffer with prepared rrset data.  * \param[in] key raw uncompressed wireformat key data  * \param[in] keylen length of key data  */
name|ldns_status
name|ldns_verify_rrsig_dsa_raw
parameter_list|(
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|size_t
name|siglen
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|size_t
name|keylen
parameter_list|)
function_decl|;
comment|/**  * Like ldns_verify_rrsig_rsasha1, but uses raw signature and key data.  * \param[in] sig raw uncompressed wireformat signature data  * \param[in] siglen length of signature data  * \param[in] rrset ldns buffer with prepared rrset data.  * \param[in] key raw uncompressed wireformat key data  * \param[in] keylen length of key data  */
name|ldns_status
name|ldns_verify_rrsig_rsasha1_raw
parameter_list|(
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|size_t
name|siglen
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|size_t
name|keylen
parameter_list|)
function_decl|;
comment|/**  * Like ldns_verify_rrsig_rsasha256, but uses raw signature and key data.  * \param[in] sig raw uncompressed wireformat signature data  * \param[in] siglen length of signature data  * \param[in] rrset ldns buffer with prepared rrset data.  * \param[in] key raw uncompressed wireformat key data  * \param[in] keylen length of key data  */
name|ldns_status
name|ldns_verify_rrsig_rsasha256_raw
parameter_list|(
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|size_t
name|siglen
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|size_t
name|keylen
parameter_list|)
function_decl|;
comment|/**  * Like ldns_verify_rrsig_rsasha512, but uses raw signature and key data.  * \param[in] sig raw uncompressed wireformat signature data  * \param[in] siglen length of signature data  * \param[in] rrset ldns buffer with prepared rrset data.  * \param[in] key raw uncompressed wireformat key data  * \param[in] keylen length of key data  */
name|ldns_status
name|ldns_verify_rrsig_rsasha512_raw
parameter_list|(
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|size_t
name|siglen
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|size_t
name|keylen
parameter_list|)
function_decl|;
comment|/**  * Like ldns_verify_rrsig_rsamd5, but uses raw signature and key data.  * \param[in] sig raw uncompressed wireformat signature data  * \param[in] siglen length of signature data  * \param[in] rrset ldns buffer with prepared rrset data.  * \param[in] key raw uncompressed wireformat key data  * \param[in] keylen length of key data  */
name|ldns_status
name|ldns_verify_rrsig_rsamd5_raw
parameter_list|(
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|size_t
name|siglen
parameter_list|,
name|ldns_buffer
modifier|*
name|rrset
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|size_t
name|keylen
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

