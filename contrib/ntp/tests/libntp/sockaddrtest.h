begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|TESTS_SOCKADDRTEST_H
end_ifndef

begin_define
define|#
directive|define
name|TESTS_SOCKADDRTEST_H
end_define

begin_include
include|#
directive|include
file|"libntptest.h"
end_include

begin_extern
extern|extern
literal|"C"
block|{
include|#
directive|include
file|"ntp.h"
block|}
end_extern

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|sockaddrtest
range|:
name|public
name|libntptest
block|{
name|protected
operator|:
operator|::
name|testing
operator|::
name|AssertionResult
name|IsEqual
argument_list|(
argument|const sockaddr_u&expected
argument_list|,
argument|const sockaddr_u&actual
argument_list|)
block|{
if|if
condition|(
name|expected
operator|.
name|sa
operator|.
name|sa_family
operator|!=
name|actual
operator|.
name|sa
operator|.
name|sa_family
condition|)
block|{
return|return
operator|::
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Expected sa_family: "
operator|<<
name|expected
operator|.
name|sa
operator|.
name|sa_family
operator|<<
literal|" but got: "
operator|<<
name|actual
operator|.
name|sa
operator|.
name|sa_family
return|;
block|}
if|if
condition|(
name|actual
operator|.
name|sa
operator|.
name|sa_family
operator|==
name|AF_INET
condition|)
block|{
comment|// IPv4
if|if
condition|(
name|expected
operator|.
name|sa4
operator|.
name|sin_port
operator|==
name|actual
operator|.
name|sa4
operator|.
name|sin_port
operator|&&
name|memcmp
argument_list|(
operator|&
name|expected
operator|.
name|sa4
operator|.
name|sin_addr
argument_list|,
operator|&
name|actual
operator|.
name|sa4
operator|.
name|sin_addr
argument_list|,
sizeof|sizeof
argument_list|(
name|in_addr
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
operator|::
name|testing
operator|::
name|AssertionSuccess
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|::
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"IPv4 comparision failed, expected: "
operator|<<
name|expected
operator|.
name|sa4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|<<
literal|"("
operator|<<
name|socktoa
argument_list|(
operator|&
name|expected
argument_list|)
operator|<<
literal|")"
operator|<<
literal|" but was: "
operator|<<
name|actual
operator|.
name|sa4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|<<
literal|"("
operator|<<
name|socktoa
argument_list|(
operator|&
name|actual
argument_list|)
operator|<<
literal|")"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|actual
operator|.
name|sa
operator|.
name|sa_family
operator|==
name|AF_INET6
condition|)
block|{
comment|//IPv6
if|if
condition|(
name|expected
operator|.
name|sa6
operator|.
name|sin6_port
operator|==
name|actual
operator|.
name|sa6
operator|.
name|sin6_port
operator|&&
name|memcmp
argument_list|(
operator|&
name|expected
operator|.
name|sa6
operator|.
name|sin6_addr
argument_list|,
operator|&
name|actual
operator|.
name|sa6
operator|.
name|sin6_addr
argument_list|,
sizeof|sizeof
argument_list|(
name|in6_addr
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
operator|::
name|testing
operator|::
name|AssertionSuccess
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|::
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"IPv6 comparision failed"
return|;
block|}
block|}
else|else
block|{
comment|// Unknown family
return|return
operator|::
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Unknown sa_family: "
operator|<<
name|actual
operator|.
name|sa
operator|.
name|sa_family
return|;
block|}
block|}
name|sockaddr_u
name|CreateSockaddr4
argument_list|(
argument|const char* address
argument_list|,
argument|unsigned int port
argument_list|)
block|{
name|sockaddr_u
name|s
block|;
name|s
operator|.
name|sa4
operator|.
name|sin_family
operator|=
name|AF_INET
block|;
name|s
operator|.
name|sa4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|=
name|inet_addr
argument_list|(
name|address
argument_list|)
block|;
name|SET_PORT
argument_list|(
operator|&
name|s
argument_list|,
name|port
argument_list|)
block|;
return|return
name|s
return|;
block|}
expr|}
block|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TESTS_SOCKADDRTEST_H
end_comment

end_unit

