begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000-2007 Niels Provos<provos@citi.umich.edu>  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|REGRESS_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|REGRESS_H_INCLUDED_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|"tinytest.h"
include|#
directive|include
file|"tinytest_macros.h"
specifier|extern
name|struct
name|testcase_t
name|main_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|evtag_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|evbuffer_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|finalize_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|bufferevent_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|bufferevent_iocp_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|util_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|signal_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|http_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|dns_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|rpc_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|edgetriggered_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|minheap_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|iocp_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|ssl_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|listener_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|listener_iocp_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|testcase_t
name|thread_testcases
index|[]
decl_stmt|;
specifier|extern
name|struct
name|evutil_weakrand_state
name|test_weakrand_state
decl_stmt|;
define|#
directive|define
name|test_weakrand
parameter_list|()
value|(evutil_weakrand_(&test_weakrand_state))
name|void
name|regress_threads
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|test_bufferevent_zlib
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Helpers to wrap old testcases */
specifier|extern
name|evutil_socket_t
name|pair
index|[
literal|2
index|]
decl_stmt|;
specifier|extern
name|int
name|test_ok
decl_stmt|;
specifier|extern
name|int
name|called
decl_stmt|;
specifier|extern
name|struct
name|event_base
modifier|*
name|global_base
decl_stmt|;
specifier|extern
name|int
name|in_legacy_test_wrapper
decl_stmt|;
name|int
name|regress_make_tmpfile
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|datalen
parameter_list|,
name|char
modifier|*
modifier|*
name|filename_out
parameter_list|)
function_decl|;
struct|struct
name|basic_test_data
block|{
name|struct
name|event_base
modifier|*
name|base
decl_stmt|;
name|evutil_socket_t
name|pair
index|[
literal|2
index|]
decl_stmt|;
name|void
function_decl|(
modifier|*
name|legacy_test_fn
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
modifier|*
name|setup_data
decl_stmt|;
block|}
struct|;
specifier|extern
specifier|const
name|struct
name|testcase_setup_t
name|basic_setup
decl_stmt|;
specifier|extern
specifier|const
name|struct
name|testcase_setup_t
name|legacy_setup
decl_stmt|;
name|void
name|run_legacy_test_fn
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|libevent_tests_running_in_debug_mode
decl_stmt|;
comment|/* A couple of flags that basic/legacy_setup can support. */
define|#
directive|define
name|TT_NEED_SOCKETPAIR
value|TT_FIRST_USER_FLAG
define|#
directive|define
name|TT_NEED_BASE
value|(TT_FIRST_USER_FLAG<<1)
define|#
directive|define
name|TT_NEED_DNS
value|(TT_FIRST_USER_FLAG<<2)
define|#
directive|define
name|TT_LEGACY
value|(TT_FIRST_USER_FLAG<<3)
define|#
directive|define
name|TT_NEED_THREADS
value|(TT_FIRST_USER_FLAG<<4)
define|#
directive|define
name|TT_NO_LOGS
value|(TT_FIRST_USER_FLAG<<5)
define|#
directive|define
name|TT_ENABLE_IOCP_FLAG
value|(TT_FIRST_USER_FLAG<<6)
define|#
directive|define
name|TT_ENABLE_IOCP
value|(TT_ENABLE_IOCP_FLAG|TT_NEED_THREADS)
comment|/* All the flags that a legacy test needs. */
define|#
directive|define
name|TT_ISOLATED
value|TT_FORK|TT_NEED_SOCKETPAIR|TT_NEED_BASE
define|#
directive|define
name|BASIC
parameter_list|(
name|name
parameter_list|,
name|flags
parameter_list|)
define|\
value|{ #name, test_## name, flags,&basic_setup, NULL }
define|#
directive|define
name|LEGACY
parameter_list|(
name|name
parameter_list|,
name|flags
parameter_list|)
define|\
value|{ #name, run_legacy_test_fn, flags|TT_LEGACY,&legacy_setup,	\ 	  test_## name }
struct_decl|struct
name|evutil_addrinfo
struct_decl|;
name|struct
name|evutil_addrinfo
modifier|*
name|ai_find_by_family
parameter_list|(
name|struct
name|evutil_addrinfo
modifier|*
name|ai
parameter_list|,
name|int
name|f
parameter_list|)
function_decl|;
name|struct
name|evutil_addrinfo
modifier|*
name|ai_find_by_protocol
parameter_list|(
name|struct
name|evutil_addrinfo
modifier|*
name|ai
parameter_list|,
name|int
name|p
parameter_list|)
function_decl|;
name|int
name|test_ai_eq_
parameter_list|(
specifier|const
name|struct
name|evutil_addrinfo
modifier|*
name|ai
parameter_list|,
specifier|const
name|char
modifier|*
name|sockaddr_port
parameter_list|,
name|int
name|socktype
parameter_list|,
name|int
name|protocol
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
define|#
directive|define
name|test_ai_eq
parameter_list|(
name|ai
parameter_list|,
name|str
parameter_list|,
name|s
parameter_list|,
name|p
parameter_list|)
value|do {					\ 		if (test_ai_eq_((ai), (str), (s), (p), __LINE__)<0)	\ 			goto end;					\ 	} while (0)
define|#
directive|define
name|test_timeval_diff_leq
parameter_list|(
name|tv1
parameter_list|,
name|tv2
parameter_list|,
name|diff
parameter_list|,
name|tolerance
parameter_list|)
define|\
value|tt_int_op(labs(timeval_msec_diff((tv1), (tv2)) - diff),<=, tolerance)
define|#
directive|define
name|test_timeval_diff_eq
parameter_list|(
name|tv1
parameter_list|,
name|tv2
parameter_list|,
name|diff
parameter_list|)
define|\
value|test_timeval_diff_leq((tv1), (tv2), (diff), 50)
name|long
name|timeval_msec_diff
parameter_list|(
specifier|const
name|struct
name|timeval
modifier|*
name|start
parameter_list|,
specifier|const
name|struct
name|timeval
modifier|*
name|end
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|_WIN32
name|pid_t
name|regress_fork
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* REGRESS_H_INCLUDED_ */
end_comment

end_unit

