begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000-2007 Niels Provos<provos@citi.umich.edu>  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EVENT2_HTTP_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|EVENT2_HTTP_H_INCLUDED_
end_define

begin_comment
comment|/* For int types. */
end_comment

begin_include
include|#
directive|include
file|<event2/util.h>
end_include

begin_include
include|#
directive|include
file|<event2/visibility.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* In case we haven't included the right headers yet. */
struct_decl|struct
name|evbuffer
struct_decl|;
struct_decl|struct
name|event_base
struct_decl|;
struct_decl|struct
name|bufferevent
struct_decl|;
struct_decl|struct
name|evhttp_connection
struct_decl|;
comment|/** @file event2/http.h  *  * Basic support for HTTP serving.  *  * As Libevent is a library for dealing with event notification and most  * interesting applications are networked today, I have often found the  * need to write HTTP code.  The following prototypes and definitions provide  * an application with a minimal interface for making HTTP requests and for  * creating a very simple HTTP server.  */
comment|/* Response codes */
define|#
directive|define
name|HTTP_OK
value|200
comment|/**< request completed ok */
define|#
directive|define
name|HTTP_NOCONTENT
value|204
comment|/**< request does not have content */
define|#
directive|define
name|HTTP_MOVEPERM
value|301
comment|/**< the uri moved permanently */
define|#
directive|define
name|HTTP_MOVETEMP
value|302
comment|/**< the uri moved temporarily */
define|#
directive|define
name|HTTP_NOTMODIFIED
value|304
comment|/**< page was not modified from last */
define|#
directive|define
name|HTTP_BADREQUEST
value|400
comment|/**< invalid http request was made */
define|#
directive|define
name|HTTP_NOTFOUND
value|404
comment|/**< could not find content for uri */
define|#
directive|define
name|HTTP_BADMETHOD
value|405
comment|/**< method not allowed for this uri */
define|#
directive|define
name|HTTP_ENTITYTOOLARGE
value|413
comment|/**<  */
define|#
directive|define
name|HTTP_EXPECTATIONFAILED
value|417
comment|/**< we can't handle this expectation */
define|#
directive|define
name|HTTP_INTERNAL
value|500
comment|/**< internal error */
define|#
directive|define
name|HTTP_NOTIMPLEMENTED
value|501
comment|/**< not implemented */
define|#
directive|define
name|HTTP_SERVUNAVAIL
value|503
comment|/**< the server is not available */
struct_decl|struct
name|evhttp
struct_decl|;
struct_decl|struct
name|evhttp_request
struct_decl|;
struct_decl|struct
name|evkeyvalq
struct_decl|;
struct_decl|struct
name|evhttp_bound_socket
struct_decl|;
struct_decl|struct
name|evconnlistener
struct_decl|;
struct_decl|struct
name|evdns_base
struct_decl|;
comment|/**  * Create a new HTTP server.  *  * @param base (optional) the event base to receive the HTTP events  * @return a pointer to a newly initialized evhttp server structure  * @see evhttp_free()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp
modifier|*
name|evhttp_new
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/**  * Binds an HTTP server on the specified address and port.  *  * Can be called multiple times to bind the same http server  * to multiple different ports.  *  * @param http a pointer to an evhttp object  * @param address a string containing the IP address to listen(2) on  * @param port the port number to listen on  * @return 0 on success, -1 on failure.  * @see evhttp_accept_socket()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_bind_socket
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|char
modifier|*
name|address
parameter_list|,
name|ev_uint16_t
name|port
parameter_list|)
function_decl|;
comment|/**  * Like evhttp_bind_socket(), but returns a handle for referencing the socket.  *  * The returned pointer is not valid after \a http is freed.  *  * @param http a pointer to an evhttp object  * @param address a string containing the IP address to listen(2) on  * @param port the port number to listen on  * @return Handle for the socket on success, NULL on failure.  * @see evhttp_bind_socket(), evhttp_del_accept_socket()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_bound_socket
modifier|*
name|evhttp_bind_socket_with_handle
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|char
modifier|*
name|address
parameter_list|,
name|ev_uint16_t
name|port
parameter_list|)
function_decl|;
comment|/**  * Makes an HTTP server accept connections on the specified socket.  *  * This may be useful to create a socket and then fork multiple instances  * of an http server, or when a socket has been communicated via file  * descriptor passing in situations where an http servers does not have  * permissions to bind to a low-numbered port.  *  * Can be called multiple times to have the http server listen to  * multiple different sockets.  *  * @param http a pointer to an evhttp object  * @param fd a socket fd that is ready for accepting connections  * @return 0 on success, -1 on failure.  * @see evhttp_bind_socket()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_accept_socket
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|evutil_socket_t
name|fd
parameter_list|)
function_decl|;
comment|/**  * Like evhttp_accept_socket(), but returns a handle for referencing the socket.  *  * The returned pointer is not valid after \a http is freed.  *  * @param http a pointer to an evhttp object  * @param fd a socket fd that is ready for accepting connections  * @return Handle for the socket on success, NULL on failure.  * @see evhttp_accept_socket(), evhttp_del_accept_socket()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_bound_socket
modifier|*
name|evhttp_accept_socket_with_handle
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|evutil_socket_t
name|fd
parameter_list|)
function_decl|;
comment|/**  * The most low-level evhttp_bind/accept method: takes an evconnlistener, and  * returns an evhttp_bound_socket.  The listener will be freed when the bound  * socket is freed.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_bound_socket
modifier|*
name|evhttp_bind_listener
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|struct
name|evconnlistener
modifier|*
name|listener
parameter_list|)
function_decl|;
comment|/**  * Return the listener used to implement a bound socket.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evconnlistener
modifier|*
name|evhttp_bound_socket_get_listener
parameter_list|(
name|struct
name|evhttp_bound_socket
modifier|*
name|bound
parameter_list|)
function_decl|;
typedef|typedef
name|void
name|evhttp_bound_socket_foreach_fn
parameter_list|(
name|struct
name|evhttp_bound_socket
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/**  * Applies the function specified in the first argument to all  * evhttp_bound_sockets associated with "http". The user must not  * attempt to free or remove any connections, sockets or listeners  * in the callback "function".  *  * @param http pointer to an evhttp object  * @param function function to apply to every bound socket  * @param argument pointer value passed to function for every socket iterated  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_foreach_bound_socket
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|evhttp_bound_socket_foreach_fn
modifier|*
name|function
parameter_list|,
name|void
modifier|*
name|argument
parameter_list|)
function_decl|;
comment|/**  * Makes an HTTP server stop accepting connections on the specified socket  *  * This may be useful when a socket has been sent via file descriptor passing  * and is no longer needed by the current process.  *  * If you created this bound socket with evhttp_bind_socket_with_handle or  * evhttp_accept_socket_with_handle, this function closes the fd you provided.  * If you created this bound socket with evhttp_bind_listener, this function  * frees the listener you provided.  *  * \a bound_socket is an invalid pointer after this call returns.  *  * @param http a pointer to an evhttp object  * @param bound_socket a handle returned by evhttp_{bind,accept}_socket_with_handle  * @see evhttp_bind_socket_with_handle(), evhttp_accept_socket_with_handle()  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_del_accept_socket
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|struct
name|evhttp_bound_socket
modifier|*
name|bound_socket
parameter_list|)
function_decl|;
comment|/**  * Get the raw file descriptor referenced by an evhttp_bound_socket.  *  * @param bound_socket a handle returned by evhttp_{bind,accept}_socket_with_handle  * @return the file descriptor used by the bound socket  * @see evhttp_bind_socket_with_handle(), evhttp_accept_socket_with_handle()  */
name|EVENT2_EXPORT_SYMBOL
name|evutil_socket_t
name|evhttp_bound_socket_get_fd
parameter_list|(
name|struct
name|evhttp_bound_socket
modifier|*
name|bound_socket
parameter_list|)
function_decl|;
comment|/**  * Free the previously created HTTP server.  *  * Works only if no requests are currently being served.  *  * @param http the evhttp server object to be freed  * @see evhttp_start()  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_free
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|)
function_decl|;
comment|/** XXX Document. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_max_headers_size
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|ev_ssize_t
name|max_headers_size
parameter_list|)
function_decl|;
comment|/** XXX Document. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_max_body_size
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|ev_ssize_t
name|max_body_size
parameter_list|)
function_decl|;
comment|/**   Set the value to use for the Content-Type header when none was provided. If   the content type string is NULL, the Content-Type header will not be   automatically added.    @param http the http server on which to set the default content type   @param content_type the value for the Content-Type header */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_default_content_type
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|char
modifier|*
name|content_type
parameter_list|)
function_decl|;
comment|/**   Sets the what HTTP methods are supported in requests accepted by this   server, and passed to user callbacks.    If not supported they will generate a "405 Method not allowed" response.    By default this includes the following methods: GET, POST, HEAD, PUT, DELETE    @param http the http server on which to set the methods   @param methods bit mask constructed from evhttp_cmd_type values */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_allowed_methods
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|ev_uint16_t
name|methods
parameter_list|)
function_decl|;
comment|/**    Set a callback for a specified URI     @param http the http sever on which to set the callback    @param path the path for which to invoke the callback    @param cb the callback function that gets invoked on requesting path    @param cb_arg an additional context argument for the callback    @return 0 on success, -1 if the callback existed already, -2 on failure */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_set_cb
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
comment|/** Removes the callback for a specified URI */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_del_cb
parameter_list|(
name|struct
name|evhttp
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/**     Set a callback for all requests that are not caught by specific callbacks      Invokes the specified callback for all requests that do not match any of     the previously specified request paths.  This is catchall for requests not     specifically configured with evhttp_set_cb().      @param http the evhttp server object for which to set the callback     @param cb the callback to invoke for any unmatched requests     @param arg an context argument for the callback */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_gencb
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
comment|/**    Set a callback used to create new bufferevents for connections    to a given evhttp object.     You can use this to override the default bufferevent type -- for example,    to make this evhttp object use SSL bufferevents rather than unencrypted    ones.     New bufferevents must be allocated with no fd set on them.     @param http the evhttp server object for which to set the callback    @param cb the callback to invoke for incoming connections    @param arg an context argument for the callback  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_bevcb
argument_list|(
expr|struct
name|evhttp
operator|*
name|http
argument_list|,
expr|struct
name|bufferevent
operator|*
call|(
modifier|*
name|cb
call|)
argument_list|(
expr|struct
name|event_base
operator|*
argument_list|,
name|void
operator|*
argument_list|)
argument_list|,
name|void
operator|*
name|arg
argument_list|)
decl_stmt|;
comment|/**    Adds a virtual host to the http server.     A virtual host is a newly initialized evhttp object that has request    callbacks set on it via evhttp_set_cb() or evhttp_set_gencb().  It    most not have any listing sockets associated with it.     If the virtual host has not been removed by the time that evhttp_free()    is called on the main http server, it will be automatically freed, too.     It is possible to have hierarchical vhosts.  For example: A vhost    with the pattern *.example.com may have other vhosts with patterns    foo.example.com and bar.example.com associated with it.     @param http the evhttp object to which to add a virtual host    @param pattern the glob pattern against which the hostname is matched.      The match is case insensitive and follows otherwise regular shell      matching.    @param vhost the virtual host to add the regular http server.    @return 0 on success, -1 on failure    @see evhttp_remove_virtual_host() */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_add_virtual_host
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|char
modifier|*
name|pattern
parameter_list|,
name|struct
name|evhttp
modifier|*
name|vhost
parameter_list|)
function_decl|;
comment|/**    Removes a virtual host from the http server.     @param http the evhttp object from which to remove the virtual host    @param vhost the virtual host to remove from the regular http server.    @return 0 on success, -1 on failure    @see evhttp_add_virtual_host() */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_remove_virtual_host
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|struct
name|evhttp
modifier|*
name|vhost
parameter_list|)
function_decl|;
comment|/**    Add a server alias to an http object. The http object can be a virtual    host or the main server.     @param http the evhttp object    @param alias the alias to add    @see evhttp_add_remove_alias() */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_add_server_alias
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|char
modifier|*
name|alias
parameter_list|)
function_decl|;
comment|/**    Remove a server alias from an http object.     @param http the evhttp object    @param alias the alias to remove    @see evhttp_add_server_alias() */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_remove_server_alias
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|char
modifier|*
name|alias
parameter_list|)
function_decl|;
comment|/**  * Set the timeout for an HTTP request.  *  * @param http an evhttp object  * @param timeout_in_secs the timeout, in seconds  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_timeout
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
name|int
name|timeout_in_secs
parameter_list|)
function_decl|;
comment|/**  * Set the timeout for an HTTP request.  *  * @param http an evhttp object  * @param tv the timeout, or NULL  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_set_timeout_tv
parameter_list|(
name|struct
name|evhttp
modifier|*
name|http
parameter_list|,
specifier|const
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
comment|/* Request/Response functionality */
comment|/**  * Send an HTML error message to the client.  *  * @param req a request object  * @param error the HTTP error code  * @param reason a brief explanation of the error.  If this is NULL, we'll  *    just use the standard meaning of the error code.  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_send_error
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|,
name|int
name|error
parameter_list|,
specifier|const
name|char
modifier|*
name|reason
parameter_list|)
function_decl|;
comment|/**  * Send an HTML reply to the client.  *  * The body of the reply consists of the data in databuf.  After calling  * evhttp_send_reply() databuf will be empty, but the buffer is still  * owned by the caller and needs to be deallocated by the caller if  * necessary.  *  * @param req a request object  * @param code the HTTP response code to send  * @param reason a brief message to send with the response code  * @param databuf the body of the response  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_send_reply
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|,
name|int
name|code
parameter_list|,
specifier|const
name|char
modifier|*
name|reason
parameter_list|,
name|struct
name|evbuffer
modifier|*
name|databuf
parameter_list|)
function_decl|;
comment|/* Low-level response interface, for streaming/chunked replies */
comment|/**    Initiate a reply that uses Transfer-Encoding chunked.     This allows the caller to stream the reply back to the client and is    useful when either not all of the reply data is immediately available    or when sending very large replies.     The caller needs to supply data chunks with evhttp_send_reply_chunk()    and complete the reply by calling evhttp_send_reply_end().     @param req a request object    @param code the HTTP response code to send    @param reason a brief message to send with the response code */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_send_reply_start
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|,
name|int
name|code
parameter_list|,
specifier|const
name|char
modifier|*
name|reason
parameter_list|)
function_decl|;
comment|/**    Send another data chunk as part of an ongoing chunked reply.     The reply chunk consists of the data in databuf.  After calling    evhttp_send_reply_chunk() databuf will be empty, but the buffer is    still owned by the caller and needs to be deallocated by the caller    if necessary.     @param req a request object    @param databuf the data chunk to send as part of the reply. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_send_reply_chunk
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|,
name|struct
name|evbuffer
modifier|*
name|databuf
parameter_list|)
function_decl|;
comment|/**    Send another data chunk as part of an ongoing chunked reply.     The reply chunk consists of the data in databuf.  After calling    evhttp_send_reply_chunk() databuf will be empty, but the buffer is    still owned by the caller and needs to be deallocated by the caller    if necessary.     @param req a request object    @param databuf the data chunk to send as part of the reply.    @param cb callback funcion    @param call back's argument. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_send_reply_chunk_with_cb
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
comment|/**    Complete a chunked reply, freeing the request as appropriate.     @param req a request object */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_send_reply_end
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/*  * Interfaces for making requests  */
comment|/** The different request types supported by evhttp.  These are as specified  * in RFC2616, except for PATCH which is specified by RFC5789.  *  * By default, only some of these methods are accepted and passed to user  * callbacks; use evhttp_set_allowed_methods() to change which methods  * are allowed.  */
enum|enum
name|evhttp_cmd_type
block|{
name|EVHTTP_REQ_GET
init|=
literal|1
operator|<<
literal|0
block|,
name|EVHTTP_REQ_POST
init|=
literal|1
operator|<<
literal|1
block|,
name|EVHTTP_REQ_HEAD
init|=
literal|1
operator|<<
literal|2
block|,
name|EVHTTP_REQ_PUT
init|=
literal|1
operator|<<
literal|3
block|,
name|EVHTTP_REQ_DELETE
init|=
literal|1
operator|<<
literal|4
block|,
name|EVHTTP_REQ_OPTIONS
init|=
literal|1
operator|<<
literal|5
block|,
name|EVHTTP_REQ_TRACE
init|=
literal|1
operator|<<
literal|6
block|,
name|EVHTTP_REQ_CONNECT
init|=
literal|1
operator|<<
literal|7
block|,
name|EVHTTP_REQ_PATCH
init|=
literal|1
operator|<<
literal|8
block|}
enum|;
comment|/** a request object can represent either a request or a reply */
enum|enum
name|evhttp_request_kind
block|{
name|EVHTTP_REQUEST
block|,
name|EVHTTP_RESPONSE
block|}
enum|;
comment|/**  * Create and return a connection object that can be used to for making HTTP  * requests.  The connection object tries to resolve address and establish the  * connection when it is given an http request object.  *  * @param base the event_base to use for handling the connection  * @param dnsbase the dns_base to use for resolving host names; if not  *     specified host name resolution will block.  * @param bev a bufferevent to use for connecting to the server; if NULL, a  *     socket-based bufferevent will be created.  This buffrevent will be freed  *     when the connection closes.  It must have no fd set on it.  * @param address the address to which to connect  * @param port the port to connect to  * @return an evhttp_connection object that can be used for making requests  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_connection
modifier|*
name|evhttp_connection_base_bufferevent_new
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|,
name|struct
name|evdns_base
modifier|*
name|dnsbase
parameter_list|,
name|struct
name|bufferevent
modifier|*
name|bev
parameter_list|,
specifier|const
name|char
modifier|*
name|address
parameter_list|,
name|unsigned
name|short
name|port
parameter_list|)
function_decl|;
comment|/**  * Return the bufferevent that an evhttp_connection is using.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|bufferevent
modifier|*
name|evhttp_connection_get_bufferevent
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|)
function_decl|;
comment|/**  * Return the HTTP server associated with this connection, or NULL.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp
modifier|*
name|evhttp_connection_get_server
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|)
function_decl|;
comment|/**  * Creates a new request object that needs to be filled in with the request  * parameters.  The callback is executed when the request completed or an  * error occurred.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_request
modifier|*
name|evhttp_request_new
parameter_list|(
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
comment|/**  * Enable delivery of chunks to requestor.  * @param cb will be called after every read of data with the same argument  *           as the completion callback. Will never be called on an empty  *           response. May drain the input buffer; it will be drained  *           automatically on return.  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_request_set_chunked_cb
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/**  * Register callback for additional parsing of request headers.  * @param cb will be called after receiving and parsing the full header.  * It allows analyzing the header and possibly closing the connection  * by returning a value< 0.  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_request_set_header_cb
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/**  * The different error types supported by evhttp  *  * @see evhttp_request_set_error_cb()  */
enum|enum
name|evhttp_request_error
block|{
comment|/**    * Timeout reached, also @see evhttp_connection_set_timeout()    */
name|EVREQ_HTTP_TIMEOUT
block|,
comment|/**    * EOF reached    */
name|EVREQ_HTTP_EOF
block|,
comment|/**    * Error while reading header, or invalid header    */
name|EVREQ_HTTP_INVALID_HEADER
block|,
comment|/**    * Error encountered while reading or writing    */
name|EVREQ_HTTP_BUFFER_ERROR
block|,
comment|/**    * The evhttp_cancel_request() called on this request.    */
name|EVREQ_HTTP_REQUEST_CANCEL
block|,
comment|/**    * Body is greater then evhttp_connection_set_max_body_size()    */
name|EVREQ_HTTP_DATA_TOO_LONG
block|}
enum|;
comment|/**  * Set a callback for errors  * @see evhttp_request_error for error types.  *  * On error, both the error callback and the regular callback will be called,  * error callback is called before the regular callback.  **/
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_request_set_error_cb
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|enum
name|evhttp_request_error
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/**  * Set a callback to be called on request completion of evhttp_send_* function.  *  * The callback function will be called on the completion of the request after  * the output data has been written and before the evhttp_request object  * is destroyed. This can be useful for tracking resources associated with a  * request (ex: timing metrics).  *  * @param req a request object  * @param cb callback function that will be called on request completion  * @param cb_arg an additional context argument for the callback  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_request_set_on_complete_cb
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
comment|/** Frees the request object and removes associated events. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_request_free
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/**  * Create and return a connection object that can be used to for making HTTP  * requests.  The connection object tries to resolve address and establish the  * connection when it is given an http request object.  *  * @param base the event_base to use for handling the connection  * @param dnsbase the dns_base to use for resolving host names; if not  *     specified host name resolution will block.  * @param address the address to which to connect  * @param port the port to connect to  * @return an evhttp_connection object that can be used for making requests  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_connection
modifier|*
name|evhttp_connection_base_new
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|,
name|struct
name|evdns_base
modifier|*
name|dnsbase
parameter_list|,
specifier|const
name|char
modifier|*
name|address
parameter_list|,
name|unsigned
name|short
name|port
parameter_list|)
function_decl|;
comment|/** Takes ownership of the request object  *  * Can be used in a request callback to keep onto the request until  * evhttp_request_free() is explicitly called by the user.  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_request_own
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Returns 1 if the request is owned by the user */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_request_is_owned
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/**  * Returns the connection object associated with the request or NULL  *  * The user needs to either free the request explicitly or call  * evhttp_send_reply_end().  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_connection
modifier|*
name|evhttp_request_get_connection
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/**  * Returns the underlying event_base for this connection  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|event_base
modifier|*
name|evhttp_connection_get_base
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|req
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_max_headers_size
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|ev_ssize_t
name|new_max_headers_size
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_max_body_size
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|ev_ssize_t
name|new_max_body_size
parameter_list|)
function_decl|;
comment|/** Frees an http connection */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_free
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|)
function_decl|;
comment|/** sets the ip address from which http connections are made */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_local_address
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
specifier|const
name|char
modifier|*
name|address
parameter_list|)
function_decl|;
comment|/** sets the local port from which http connections are made */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_local_port
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|ev_uint16_t
name|port
parameter_list|)
function_decl|;
comment|/** Sets the timeout in seconds for events related to this connection */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_timeout
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|int
name|timeout_in_secs
parameter_list|)
function_decl|;
comment|/** Sets the timeout for events related to this connection.  Takes a struct  * timeval. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_timeout_tv
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
specifier|const
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
comment|/** Sets the delay before retrying requests on this connection. This is only  * used if evhttp_connection_set_retries is used to make the number of retries  * at least one. Each retry after the first is twice as long as the one before  * it. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_initial_retry_tv
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
specifier|const
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
comment|/** Sets the retry limit for this connection - -1 repeats indefinitely */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_retries
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|int
name|retry_max
parameter_list|)
function_decl|;
comment|/** Set a callback for connection close. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_set_closecb
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/** Get the remote address and port associated with this connection. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_connection_get_peer
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|char
modifier|*
modifier|*
name|address
parameter_list|,
name|ev_uint16_t
modifier|*
name|port
parameter_list|)
function_decl|;
comment|/** Get the remote address associated with this connection.  * extracted from getpeername().  *  * @return NULL if getpeername() return non success,  * or connection is not connected,  * otherwise it return pointer to struct sockaddr_storage */
name|EVENT2_EXPORT_SYMBOL
specifier|const
expr|struct
name|sockaddr
operator|*
name|evhttp_connection_get_addr
argument_list|(
expr|struct
name|evhttp_connection
operator|*
name|evcon
argument_list|)
expr_stmt|;
comment|/**     Make an HTTP request over the specified connection.      The connection gets ownership of the request.  On failure, the     request object is no longer valid as it has been freed.      @param evcon the evhttp_connection object over which to send the request     @param req the previously created and configured request object     @param type the request type EVHTTP_REQ_GET, EVHTTP_REQ_POST, etc.     @param uri the URI associated with the request     @return 0 on success, -1 on failure     @see evhttp_cancel_request() */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_make_request
parameter_list|(
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|,
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|,
name|enum
name|evhttp_cmd_type
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/**    Cancels a pending HTTP request.     Cancels an ongoing HTTP request.  The callback associated with this request    is not executed and the request object is freed.  If the request is    currently being processed, e.g. it is ongoing, the corresponding    evhttp_connection object is going to get reset.     A request cannot be canceled if its callback has executed already. A request    may be canceled reentrantly from its chunked callback.     @param req the evhttp_request to cancel; req becomes invalid after this call. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_cancel_request
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/**  * A structure to hold a parsed URI or Relative-Ref conforming to RFC3986.  */
struct_decl|struct
name|evhttp_uri
struct_decl|;
comment|/** Returns the request URI */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_request_get_uri
parameter_list|(
specifier|const
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Returns the request URI (parsed) */
name|EVENT2_EXPORT_SYMBOL
specifier|const
expr|struct
name|evhttp_uri
operator|*
name|evhttp_request_get_evhttp_uri
argument_list|(
specifier|const
expr|struct
name|evhttp_request
operator|*
name|req
argument_list|)
expr_stmt|;
comment|/** Returns the request command */
name|EVENT2_EXPORT_SYMBOL
name|enum
name|evhttp_cmd_type
name|evhttp_request_get_command
parameter_list|(
specifier|const
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_request_get_response_code
parameter_list|(
specifier|const
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_request_get_response_code_line
parameter_list|(
specifier|const
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Returns the input headers */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evkeyvalq
modifier|*
name|evhttp_request_get_input_headers
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Returns the output headers */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evkeyvalq
modifier|*
name|evhttp_request_get_output_headers
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Returns the input buffer */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evbuffer
modifier|*
name|evhttp_request_get_input_buffer
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Returns the output buffer */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evbuffer
modifier|*
name|evhttp_request_get_output_buffer
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Returns the host associated with the request. If a client sends an absolute     URI, the host part of that is preferred. Otherwise, the input headers are     searched for a Host: header. NULL is returned if no absolute URI or Host:     header is provided. */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_request_get_host
parameter_list|(
name|struct
name|evhttp_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/* Interfaces for dealing with HTTP headers */
comment|/**    Finds the value belonging to a header.     @param headers the evkeyvalq object in which to find the header    @param key the name of the header to find    @returns a pointer to the value for the header or NULL if the header      could not be found.    @see evhttp_add_header(), evhttp_remove_header() */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_find_header
parameter_list|(
specifier|const
name|struct
name|evkeyvalq
modifier|*
name|headers
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**    Removes a header from a list of existing headers.     @param headers the evkeyvalq object from which to remove a header    @param key the name of the header to remove    @returns 0 if the header was removed, -1  otherwise.    @see evhttp_find_header(), evhttp_add_header() */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_remove_header
parameter_list|(
name|struct
name|evkeyvalq
modifier|*
name|headers
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/**    Adds a header to a list of existing headers.     @param headers the evkeyvalq object to which to add a header    @param key the name of the header    @param value the value belonging to the header    @returns 0 on success, -1  otherwise.    @see evhttp_find_header(), evhttp_clear_headers() */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_add_header
parameter_list|(
name|struct
name|evkeyvalq
modifier|*
name|headers
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/**    Removes all headers from the header list.     @param headers the evkeyvalq object from which to remove all headers */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_clear_headers
parameter_list|(
name|struct
name|evkeyvalq
modifier|*
name|headers
parameter_list|)
function_decl|;
comment|/* Miscellaneous utility functions */
comment|/**    Helper function to encode a string for inclusion in a URI.  All    characters are replaced by their hex-escaped (%22) equivalents,    except for characters explicitly unreserved by RFC3986 -- that is,    ASCII alphanumeric characters, hyphen, dot, underscore, and tilde.     The returned string must be freed by the caller.     @param str an unencoded string    @return a newly allocated URI-encoded string or NULL on failure  */
name|EVENT2_EXPORT_SYMBOL
name|char
modifier|*
name|evhttp_encode_uri
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/**    As evhttp_encode_uri, but if 'size' is nonnegative, treat the string    as being 'size' bytes long.  This allows you to encode strings that    may contain 0-valued bytes.     The returned string must be freed by the caller.     @param str an unencoded string    @param size the length of the string to encode, or -1 if the string       is NUL-terminated    @param space_to_plus if true, space characters in 'str' are encoded       as +, not %20.    @return a newly allocate URI-encoded string, or NULL on failure.  */
name|EVENT2_EXPORT_SYMBOL
name|char
modifier|*
name|evhttp_uriencode
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|ev_ssize_t
name|size
parameter_list|,
name|int
name|space_to_plus
parameter_list|)
function_decl|;
comment|/**   Helper function to sort of decode a URI-encoded string.  Unlike   evhttp_get_decoded_uri, it decodes all plus characters that appear   _after_ the first question mark character, but no plusses that occur   before.  This is not a good way to decode URIs in whole or in part.    The returned string must be freed by the caller    @deprecated  This function is deprecated; you probably want to use      evhttp_get_decoded_uri instead.    @param uri an encoded URI   @return a newly allocated unencoded URI or NULL on failure  */
name|EVENT2_EXPORT_SYMBOL
name|char
modifier|*
name|evhttp_decode_uri
parameter_list|(
specifier|const
name|char
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/**   Helper function to decode a URI-escaped string or HTTP parameter.    If 'decode_plus' is 1, then we decode the string as an HTTP parameter   value, and convert all plus ('+') characters to spaces.  If   'decode_plus' is 0, we leave all plus characters unchanged.    The returned string must be freed by the caller.    @param uri a URI-encode encoded URI   @param decode_plus determines whether we convert '+' to space.   @param size_out if size_out is not NULL, *size_out is set to the size of the      returned string   @return a newly allocated unencoded URI or NULL on failure  */
name|EVENT2_EXPORT_SYMBOL
name|char
modifier|*
name|evhttp_uridecode
parameter_list|(
specifier|const
name|char
modifier|*
name|uri
parameter_list|,
name|int
name|decode_plus
parameter_list|,
name|size_t
modifier|*
name|size_out
parameter_list|)
function_decl|;
comment|/**    Helper function to parse out arguments in a query.     Parsing a URI like        http://foo.com/?q=test&s=some+thing     will result in two entries in the key value queue.     The first entry is: key="q", value="test"    The second entry is: key="s", value="some thing"     @deprecated This function is deprecated as of Libevent 2.0.9.  Use      evhttp_uri_parse and evhttp_parse_query_str instead.     @param uri the request URI    @param headers the head of the evkeyval queue    @return 0 on success, -1 on failure  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_parse_query
parameter_list|(
specifier|const
name|char
modifier|*
name|uri
parameter_list|,
name|struct
name|evkeyvalq
modifier|*
name|headers
parameter_list|)
function_decl|;
comment|/**    Helper function to parse out arguments from the query portion of an    HTTP URI.     Parsing a query string like       q=test&s=some+thing     will result in two entries in the key value queue.     The first entry is: key="q", value="test"    The second entry is: key="s", value="some thing"     @param query_parse the query portion of the URI    @param headers the head of the evkeyval queue    @return 0 on success, -1 on failure  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_parse_query_str
parameter_list|(
specifier|const
name|char
modifier|*
name|uri
parameter_list|,
name|struct
name|evkeyvalq
modifier|*
name|headers
parameter_list|)
function_decl|;
comment|/**  * Escape HTML character entities in a string.  *  * Replaces<,>, ", ' and& with&lt;,&gt;,&quot;,  *&#039; and&amp; correspondingly.  *  * The returned string needs to be freed by the caller.  *  * @param html an unescaped HTML string  * @return an escaped HTML string or NULL on error  */
name|EVENT2_EXPORT_SYMBOL
name|char
modifier|*
name|evhttp_htmlescape
parameter_list|(
specifier|const
name|char
modifier|*
name|html
parameter_list|)
function_decl|;
comment|/**  * Return a new empty evhttp_uri with no fields set.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_uri
modifier|*
name|evhttp_uri_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Changes the flags set on a given URI.  See EVHTTP_URI_* for  * a list of flags.  **/
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_uri_set_flags
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
name|unsigned
name|flags
parameter_list|)
function_decl|;
comment|/** Return the scheme of an evhttp_uri, or NULL if there is no scheme has  * been set and the evhttp_uri contains a Relative-Ref. */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_uri_get_scheme
parameter_list|(
specifier|const
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/**  * Return the userinfo part of an evhttp_uri, or NULL if it has no userinfo  * set.  */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_uri_get_userinfo
parameter_list|(
specifier|const
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/**  * Return the host part of an evhttp_uri, or NULL if it has no host set.  * The host may either be a regular hostname (conforming to the RFC 3986  * "regname" production), or an IPv4 address, or the empty string, or a  * bracketed IPv6 address, or a bracketed 'IP-Future' address.  *  * Note that having a NULL host means that the URI has no authority  * section, but having an empty-string host means that the URI has an  * authority section with no host part.  For example,  * "mailto:user@example.com" has a host of NULL, but "file:///etc/motd"  * has a host of "".  */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_uri_get_host
parameter_list|(
specifier|const
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/** Return the port part of an evhttp_uri, or -1 if there is no port set. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_get_port
parameter_list|(
specifier|const
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/** Return the path part of an evhttp_uri, or NULL if it has no path set */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_uri_get_path
parameter_list|(
specifier|const
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/** Return the query part of an evhttp_uri (excluding the leading "?"), or  * NULL if it has no query set */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_uri_get_query
parameter_list|(
specifier|const
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/** Return the fragment part of an evhttp_uri (excluding the leading "#"),  * or NULL if it has no fragment set */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evhttp_uri_get_fragment
parameter_list|(
specifier|const
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/** Set the scheme of an evhttp_uri, or clear the scheme if scheme==NULL.  * Returns 0 on success, -1 if scheme is not well-formed. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_set_scheme
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
specifier|const
name|char
modifier|*
name|scheme
parameter_list|)
function_decl|;
comment|/** Set the userinfo of an evhttp_uri, or clear the userinfo if userinfo==NULL.  * Returns 0 on success, -1 if userinfo is not well-formed. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_set_userinfo
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
specifier|const
name|char
modifier|*
name|userinfo
parameter_list|)
function_decl|;
comment|/** Set the host of an evhttp_uri, or clear the host if host==NULL.  * Returns 0 on success, -1 if host is not well-formed. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_set_host
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
specifier|const
name|char
modifier|*
name|host
parameter_list|)
function_decl|;
comment|/** Set the port of an evhttp_uri, or clear the port if port==-1.  * Returns 0 on success, -1 if port is not well-formed. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_set_port
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
comment|/** Set the path of an evhttp_uri, or clear the path if path==NULL.  * Returns 0 on success, -1 if path is not well-formed. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_set_path
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/** Set the query of an evhttp_uri, or clear the query if query==NULL.  * The query should not include a leading "?".  * Returns 0 on success, -1 if query is not well-formed. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_set_query
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
specifier|const
name|char
modifier|*
name|query
parameter_list|)
function_decl|;
comment|/** Set the fragment of an evhttp_uri, or clear the fragment if fragment==NULL.  * The fragment should not include a leading "#".  * Returns 0 on success, -1 if fragment is not well-formed. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evhttp_uri_set_fragment
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
specifier|const
name|char
modifier|*
name|fragment
parameter_list|)
function_decl|;
comment|/**  * Helper function to parse a URI-Reference as specified by RFC3986.  *  * This function matches the URI-Reference production from RFC3986,  * which includes both URIs like  *  *    scheme://[[userinfo]@]foo.com[:port]]/[path][?query][#fragment]  *  *  and relative-refs like  *  *    [path][?query][#fragment]  *  * Any optional elements portions not present in the original URI are  * left set to NULL in the resulting evhttp_uri.  If no port is  * specified, the port is set to -1.  *  * Note that no decoding is performed on percent-escaped characters in  * the string; if you want to parse them, use evhttp_uridecode or  * evhttp_parse_query_str as appropriate.  *  * Note also that most URI schemes will have additional constraints that  * this function does not know about, and cannot check.  For example,  * mailto://www.example.com/cgi-bin/fortune.pl is not a reasonable  * mailto url, http://www.example.com:99999/ is not a reasonable HTTP  * URL, and ftp:username@example.com is not a reasonable FTP URL.  * Nevertheless, all of these URLs conform to RFC3986, and this function  * accepts all of them as valid.  *  * @param source_uri the request URI  * @param flags Zero or more EVHTTP_URI_* flags to affect the behavior  *              of the parser.  * @return uri container to hold parsed data, or NULL if there is error  * @see evhttp_uri_free()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_uri
modifier|*
name|evhttp_uri_parse_with_flags
parameter_list|(
specifier|const
name|char
modifier|*
name|source_uri
parameter_list|,
name|unsigned
name|flags
parameter_list|)
function_decl|;
comment|/** Tolerate URIs that do not conform to RFC3986.  *  * Unfortunately, some HTTP clients generate URIs that, according to RFC3986,  * are not conformant URIs.  If you need to support these URIs, you can  * do so by passing this flag to evhttp_uri_parse_with_flags.  *  * Currently, these changes are:  *<ul>  *<li> Nonconformant URIs are allowed to contain otherwise unreasonable  *        characters in their path, query, and fragment components.  *</ul>  */
define|#
directive|define
name|EVHTTP_URI_NONCONFORMANT
value|0x01
comment|/** Alias for evhttp_uri_parse_with_flags(source_uri, 0) */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evhttp_uri
modifier|*
name|evhttp_uri_parse
parameter_list|(
specifier|const
name|char
modifier|*
name|source_uri
parameter_list|)
function_decl|;
comment|/**  * Free all memory allocated for a parsed uri.  Only use this for URIs  * generated by evhttp_uri_parse.  *  * @param uri container with parsed data  * @see evhttp_uri_parse()  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evhttp_uri_free
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|)
function_decl|;
comment|/**  * Join together the uri parts from parsed data to form a URI-Reference.  *  * Note that no escaping of reserved characters is done on the members  * of the evhttp_uri, so the generated string might not be a valid URI  * unless the members of evhttp_uri are themselves valid.  *  * @param uri container with parsed data  * @param buf destination buffer  * @param limit destination buffer size  * @return an joined uri as string or NULL on error  * @see evhttp_uri_parse()  */
name|EVENT2_EXPORT_SYMBOL
name|char
modifier|*
name|evhttp_uri_join
parameter_list|(
name|struct
name|evhttp_uri
modifier|*
name|uri
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|limit
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EVENT2_HTTP_H_INCLUDED_ */
end_comment

end_unit

