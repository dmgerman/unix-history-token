begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000-2007 Niels Provos<provos@citi.umich.edu>  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EVENT2_EVENT_STRUCT_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|EVENT2_EVENT_STRUCT_H_INCLUDED_
end_define

begin_comment
comment|/** @file event2/event_struct.h    Structures used by event.h.  Using these structures directly WILL harm   forward compatibility: be careful.    No field declared in this file should be used directly in user code.  Except   for historical reasons, these fields would not be exposed at all.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<event2/event-config.h>
ifdef|#
directive|ifdef
name|EVENT__HAVE_SYS_TYPES_H
include|#
directive|include
file|<sys/types.h>
endif|#
directive|endif
ifdef|#
directive|ifdef
name|EVENT__HAVE_SYS_TIME_H
include|#
directive|include
file|<sys/time.h>
endif|#
directive|endif
comment|/* For int types. */
include|#
directive|include
file|<event2/util.h>
comment|/* For evkeyvalq */
include|#
directive|include
file|<event2/keyvalq_struct.h>
define|#
directive|define
name|EVLIST_TIMEOUT
value|0x01
define|#
directive|define
name|EVLIST_INSERTED
value|0x02
define|#
directive|define
name|EVLIST_SIGNAL
value|0x04
define|#
directive|define
name|EVLIST_ACTIVE
value|0x08
define|#
directive|define
name|EVLIST_INTERNAL
value|0x10
define|#
directive|define
name|EVLIST_ACTIVE_LATER
value|0x20
define|#
directive|define
name|EVLIST_FINALIZING
value|0x40
define|#
directive|define
name|EVLIST_INIT
value|0x80
define|#
directive|define
name|EVLIST_ALL
value|0xff
comment|/* Fix so that people don't have to run with<sys/queue.h> */
ifndef|#
directive|ifndef
name|TAILQ_ENTRY
define|#
directive|define
name|EVENT_DEFINED_TQENTRY_
define|#
directive|define
name|TAILQ_ENTRY
parameter_list|(
name|type
parameter_list|)
define|\
value|struct {								\ 	struct type *tqe_next;
comment|/* next element */
value|\ 	struct type **tqe_prev;
comment|/* address of previous next element */
value|\ }
endif|#
directive|endif
comment|/* !TAILQ_ENTRY */
ifndef|#
directive|ifndef
name|TAILQ_HEAD
define|#
directive|define
name|EVENT_DEFINED_TQHEAD_
define|#
directive|define
name|TAILQ_HEAD
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|struct name {					\ 	struct type *tqh_first;			\ 	struct type **tqh_last;			\ }
endif|#
directive|endif
comment|/* Fix so that people don't have to run with<sys/queue.h> */
ifndef|#
directive|ifndef
name|LIST_ENTRY
define|#
directive|define
name|EVENT_DEFINED_LISTENTRY_
define|#
directive|define
name|LIST_ENTRY
parameter_list|(
name|type
parameter_list|)
define|\
value|struct {								\ 	struct type *le_next;
comment|/* next element */
value|\ 	struct type **le_prev;
comment|/* address of previous next element */
value|\ }
endif|#
directive|endif
comment|/* !LIST_ENTRY */
ifndef|#
directive|ifndef
name|LIST_HEAD
define|#
directive|define
name|EVENT_DEFINED_LISTHEAD_
define|#
directive|define
name|LIST_HEAD
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|struct name {								\ 	struct type *lh_first;
comment|/* first element */
value|\ 	}
endif|#
directive|endif
comment|/* !LIST_HEAD */
struct_decl|struct
name|event
struct_decl|;
struct|struct
name|event_callback
block|{
name|TAILQ_ENTRY
argument_list|(
argument|event_callback
argument_list|)
name|evcb_active_next
expr_stmt|;
name|short
name|evcb_flags
decl_stmt|;
name|ev_uint8_t
name|evcb_pri
decl_stmt|;
comment|/* smaller numbers are higher priority */
name|ev_uint8_t
name|evcb_closure
decl_stmt|;
comment|/* allows us to adopt for different types of events */
union|union
block|{
name|void
function_decl|(
modifier|*
name|evcb_callback
function_decl|)
parameter_list|(
name|evutil_socket_t
parameter_list|,
name|short
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|evcb_selfcb
function_decl|)
parameter_list|(
name|struct
name|event_callback
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|evcb_evfinalize
function_decl|)
parameter_list|(
name|struct
name|event
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|evcb_cbfinalize
function_decl|)
parameter_list|(
name|struct
name|event_callback
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
name|evcb_cb_union
union|;
name|void
modifier|*
name|evcb_arg
decl_stmt|;
block|}
struct|;
struct_decl|struct
name|event_base
struct_decl|;
struct|struct
name|event
block|{
name|struct
name|event_callback
name|ev_evcallback
decl_stmt|;
comment|/* for managing timeouts */
union|union
block|{
name|TAILQ_ENTRY
argument_list|(
argument|event
argument_list|)
name|ev_next_with_common_timeout
expr_stmt|;
name|int
name|min_heap_idx
decl_stmt|;
block|}
name|ev_timeout_pos
union|;
name|evutil_socket_t
name|ev_fd
decl_stmt|;
name|struct
name|event_base
modifier|*
name|ev_base
decl_stmt|;
union|union
block|{
comment|/* used for io events */
struct|struct
block|{
name|LIST_ENTRY
argument_list|(
argument|event
argument_list|)
name|ev_io_next
expr_stmt|;
name|struct
name|timeval
name|ev_timeout
decl_stmt|;
block|}
name|ev_io
struct|;
comment|/* used by signal events */
struct|struct
block|{
name|LIST_ENTRY
argument_list|(
argument|event
argument_list|)
name|ev_signal_next
expr_stmt|;
name|short
name|ev_ncalls
decl_stmt|;
comment|/* Allows deletes in callback */
name|short
modifier|*
name|ev_pncalls
decl_stmt|;
block|}
name|ev_signal
struct|;
block|}
name|ev_
union|;
name|short
name|ev_events
decl_stmt|;
name|short
name|ev_res
decl_stmt|;
comment|/* result passed to event callback */
name|struct
name|timeval
name|ev_timeout
decl_stmt|;
block|}
struct|;
name|TAILQ_HEAD
argument_list|(
name|event_list
argument_list|,
name|event
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|EVENT_DEFINED_TQENTRY_
undef|#
directive|undef
name|TAILQ_ENTRY
endif|#
directive|endif
ifdef|#
directive|ifdef
name|EVENT_DEFINED_TQHEAD_
undef|#
directive|undef
name|TAILQ_HEAD
endif|#
directive|endif
name|LIST_HEAD
argument_list|(
name|event_dlist
argument_list|,
name|event
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|EVENT_DEFINED_LISTENTRY_
undef|#
directive|undef
name|LIST_ENTRY
endif|#
directive|endif
ifdef|#
directive|ifdef
name|EVENT_DEFINED_LISTHEAD_
undef|#
directive|undef
name|LIST_HEAD
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EVENT2_EVENT_STRUCT_H_INCLUDED_ */
end_comment

end_unit

