begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2006-2007 Niels Provos<provos@citi.umich.edu>  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EVENT2_RPC_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|EVENT2_RPC_H_INCLUDED_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/** @file rpc.h  *  * This header files provides basic support for an RPC server and client.  *  * To support RPCs in a server, every supported RPC command needs to be  * defined and registered.  *  * EVRPC_HEADER(SendCommand, Request, Reply);  *  *  SendCommand is the name of the RPC command.  *  Request is the name of a structure generated by event_rpcgen.py.  *    It contains all parameters relating to the SendCommand RPC.  The  *    server needs to fill in the Reply structure.  *  Reply is the name of a structure generated by event_rpcgen.py.  It  *    contains the answer to the RPC.  *  * To register an RPC with an HTTP server, you need to first create an RPC  * base with:  *  *   struct evrpc_base *base = evrpc_init(http);  *  * A specific RPC can then be registered with  *  * EVRPC_REGISTER(base, SendCommand, Request, Reply,  FunctionCB, arg);  *  * when the server receives an appropriately formatted RPC, the user callback  * is invoked.   The callback needs to fill in the reply structure.  *  * void FunctionCB(EVRPC_STRUCT(SendCommand)* rpc, void *arg);  *  * To send the reply, call EVRPC_REQUEST_DONE(rpc);  *  * See the regression test for an example.  */
comment|/**    Determines if the member has been set in the message     @param msg the message to inspect    @param member the member variable to test for presences    @return 1 if it's present or 0 otherwise. */
define|#
directive|define
name|EVTAG_HAS
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|)
define|\
value|((msg)->member##_set == 1)
ifndef|#
directive|ifndef
name|EVENT2_RPC_COMPAT_H_INCLUDED_
comment|/**    Assigns a value to the member in the message.     @param msg the message to which to assign a value    @param member the name of the member variable    @param value the value to assign */
define|#
directive|define
name|EVTAG_ASSIGN
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|,
name|value
parameter_list|)
define|\
value|(*(msg)->base->member##_assign)((msg), (value))
comment|/**    Assigns a value to the member in the message.     @param msg the message to which to assign a value    @param member the name of the member variable    @param value the value to assign    @param len the length of the value */
define|#
directive|define
name|EVTAG_ASSIGN_WITH_LEN
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|,
name|value
parameter_list|,
name|len
parameter_list|)
define|\
value|(*(msg)->base->member##_assign)((msg), (value), (len))
comment|/**    Returns the value for a member.     @param msg the message from which to get the value    @param member the name of the member variable    @param pvalue a pointer to the variable to hold the value    @return 0 on success, -1 otherwise. */
define|#
directive|define
name|EVTAG_GET
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|,
name|pvalue
parameter_list|)
define|\
value|(*(msg)->base->member##_get)((msg), (pvalue))
comment|/**    Returns the value for a member.     @param msg the message from which to get the value    @param member the name of the member variable    @param pvalue a pointer to the variable to hold the value    @param plen a pointer to the length of the value    @return 0 on success, -1 otherwise. */
define|#
directive|define
name|EVTAG_GET_WITH_LEN
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|,
name|pvalue
parameter_list|,
name|plen
parameter_list|)
define|\
value|(*(msg)->base->member##_get)((msg), (pvalue), (plen))
endif|#
directive|endif
comment|/* EVENT2_RPC_COMPAT_H_INCLUDED_ */
comment|/**    Adds a value to an array. */
define|#
directive|define
name|EVTAG_ARRAY_ADD_VALUE
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|,
name|value
parameter_list|)
define|\
value|(*(msg)->base->member##_add)((msg), (value))
comment|/**    Allocates a new entry in the array and returns it. */
define|#
directive|define
name|EVTAG_ARRAY_ADD
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|)
define|\
value|(*(msg)->base->member##_add)(msg)
comment|/**    Gets a variable at the specified offset from the array. */
define|#
directive|define
name|EVTAG_ARRAY_GET
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|,
name|offset
parameter_list|,
name|pvalue
parameter_list|)
define|\
value|(*(msg)->base->member##_get)((msg), (offset), (pvalue))
comment|/**    Returns the number of entries in the array. */
define|#
directive|define
name|EVTAG_ARRAY_LEN
parameter_list|(
name|msg
parameter_list|,
name|member
parameter_list|)
value|((msg)->member##_length)
struct_decl|struct
name|evbuffer
struct_decl|;
struct_decl|struct
name|event_base
struct_decl|;
struct_decl|struct
name|evrpc_req_generic
struct_decl|;
struct_decl|struct
name|evrpc_request_wrapper
struct_decl|;
struct_decl|struct
name|evrpc
struct_decl|;
comment|/** The type of a specific RPC Message  *  * @param rpcname the name of the RPC message  */
define|#
directive|define
name|EVRPC_STRUCT
parameter_list|(
name|rpcname
parameter_list|)
value|struct evrpc_req__##rpcname
struct_decl|struct
name|evhttp_request
struct_decl|;
struct_decl|struct
name|evrpc_status
struct_decl|;
struct_decl|struct
name|evrpc_hook_meta
struct_decl|;
comment|/** Creates the definitions and prototypes for an RPC  *  * You need to use EVRPC_HEADER to create structures and function prototypes  * needed by the server and client implementation.  The structures have to be  * defined in an .rpc file and converted to source code via event_rpcgen.py  *  * @param rpcname the name of the RPC  * @param reqstruct the name of the RPC request structure  * @param replystruct the name of the RPC reply structure  * @see EVRPC_GENERATE()  */
define|#
directive|define
name|EVRPC_HEADER
parameter_list|(
name|rpcname
parameter_list|,
name|reqstruct
parameter_list|,
name|rplystruct
parameter_list|)
define|\
value|EVRPC_STRUCT(rpcname) {	\ 	struct evrpc_hook_meta *hook_meta; \ 	struct reqstruct* request; \ 	struct rplystruct* reply; \ 	struct evrpc* rpc; \ 	struct evhttp_request* http_req; \ 	struct evbuffer* rpc_data; \ };								     \ int evrpc_send_request_##rpcname(struct evrpc_pool *, \     struct reqstruct *, struct rplystruct *, \     void (*)(struct evrpc_status *, \ 	struct reqstruct *, struct rplystruct *, void *cbarg),	\     void *);
struct_decl|struct
name|evrpc_pool
struct_decl|;
comment|/** use EVRPC_GENERATE instead */
name|struct
name|evrpc_request_wrapper
modifier|*
name|evrpc_make_request_ctx
parameter_list|(
name|struct
name|evrpc_pool
modifier|*
name|pool
parameter_list|,
name|void
modifier|*
name|request
parameter_list|,
name|void
modifier|*
name|reply
parameter_list|,
specifier|const
name|char
modifier|*
name|rpcname
parameter_list|,
name|void
function_decl|(
modifier|*
name|req_marshal
function_decl|)
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|rpl_clear
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|rpl_unmarshal
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|evbuffer
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evrpc_status
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cbarg
parameter_list|)
function_decl|;
comment|/** Creates a context structure that contains rpc specific information.  *  * EVRPC_MAKE_CTX is used to populate a RPC specific context that  * contains information about marshaling the RPC data types.  *  * @param rpcname the name of the RPC  * @param reqstruct the name of the RPC request structure  * @param replystruct the name of the RPC reply structure  * @param pool the evrpc_pool over which to make the request  * @param request a pointer to the RPC request structure object  * @param reply a pointer to the RPC reply structure object  * @param cb the callback function to call when the RPC has completed  * @param cbarg the argument to supply to the callback  */
define|#
directive|define
name|EVRPC_MAKE_CTX
parameter_list|(
name|rpcname
parameter_list|,
name|reqstruct
parameter_list|,
name|rplystruct
parameter_list|, \
name|pool
parameter_list|,
name|request
parameter_list|,
name|reply
parameter_list|,
name|cb
parameter_list|,
name|cbarg
parameter_list|)
define|\
value|evrpc_make_request_ctx(pool, request, reply,			\ 	    #rpcname,							\ 	    (void (*)(struct evbuffer *, void *))reqstruct##_marshal,	\ 	    (void (*)(void *))rplystruct##_clear,			\ 	    (int (*)(void *, struct evbuffer *))rplystruct##_unmarshal, \ 	    (void (*)(struct evrpc_status *, void *, void *, void *))cb, \ 	    cbarg)
comment|/** Generates the code for receiving and sending an RPC message  *  * EVRPC_GENERATE is used to create the code corresponding to sending  * and receiving a particular RPC message  *  * @param rpcname the name of the RPC  * @param reqstruct the name of the RPC request structure  * @param replystruct the name of the RPC reply structure  * @see EVRPC_HEADER()  */
define|#
directive|define
name|EVRPC_GENERATE
parameter_list|(
name|rpcname
parameter_list|,
name|reqstruct
parameter_list|,
name|rplystruct
parameter_list|)
define|\
value|int evrpc_send_request_##rpcname(struct evrpc_pool *pool,	\ 	    struct reqstruct *request, struct rplystruct *reply,	\ 	    void (*cb)(struct evrpc_status *,				\ 		struct reqstruct *, struct rplystruct *, void *cbarg),	\ 	    void *cbarg) {						\ 	return evrpc_send_request_generic(pool, request, reply,	\ 	    (void (*)(struct evrpc_status *, void *, void *, void *))cb, \ 	    cbarg,							\ 	    #rpcname,							\ 	    (void (*)(struct evbuffer *, void *))reqstruct##_marshal,	\ 	    (void (*)(void *))rplystruct##_clear,			\ 	    (int (*)(void *, struct evbuffer *))rplystruct##_unmarshal); \ }
comment|/** Provides access to the HTTP request object underlying an RPC  *  * Access to the underlying http object; can be used to look at headers or  * for getting the remote ip address  *  * @param rpc_req the rpc request structure provided to the server callback  * @return an struct evhttp_request object that can be inspected for  * HTTP headers or sender information.  */
define|#
directive|define
name|EVRPC_REQUEST_HTTP
parameter_list|(
name|rpc_req
parameter_list|)
value|(rpc_req)->http_req
comment|/** completes the server response to an rpc request */
name|void
name|evrpc_request_done
parameter_list|(
name|struct
name|evrpc_req_generic
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** accessors for request and reply */
name|void
modifier|*
name|evrpc_get_request
parameter_list|(
name|struct
name|evrpc_req_generic
modifier|*
name|req
parameter_list|)
function_decl|;
name|void
modifier|*
name|evrpc_get_reply
parameter_list|(
name|struct
name|evrpc_req_generic
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/** Creates the reply to an RPC request  *  * EVRPC_REQUEST_DONE is used to answer a request; the reply is expected  * to have been filled in.  The request and reply pointers become invalid  * after this call has finished.  *  * @param rpc_req the rpc request structure provided to the server callback  */
define|#
directive|define
name|EVRPC_REQUEST_DONE
parameter_list|(
name|rpc_req
parameter_list|)
value|do { \   struct evrpc_req_generic *req_ = (struct evrpc_req_generic *)(rpc_req); \   evrpc_request_done(req_);					\ } while (0)
struct_decl|struct
name|evrpc_base
struct_decl|;
struct_decl|struct
name|evhttp
struct_decl|;
comment|/* functions to start up the rpc system */
comment|/** Creates a new rpc base from which RPC requests can be received  *  * @param server a pointer to an existing HTTP server  * @return a newly allocated evrpc_base struct  * @see evrpc_free()  */
name|struct
name|evrpc_base
modifier|*
name|evrpc_init
parameter_list|(
name|struct
name|evhttp
modifier|*
name|server
parameter_list|)
function_decl|;
comment|/**  * Frees the evrpc base  *  * For now, you are responsible for making sure that no rpcs are ongoing.  *  * @param base the evrpc_base object to be freed  * @see evrpc_init  */
name|void
name|evrpc_free
parameter_list|(
name|struct
name|evrpc_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/** register RPCs with the HTTP Server  *  * registers a new RPC with the HTTP server, each RPC needs to have  * a unique name under which it can be identified.  *  * @param base the evrpc_base structure in which the RPC should be  *   registered.  * @param name the name of the RPC  * @param request the name of the RPC request structure  * @param reply the name of the RPC reply structure  * @param callback the callback that should be invoked when the RPC  * is received.  The callback has the following prototype  *   void (*callback)(EVRPC_STRUCT(Message)* rpc, void *arg)  * @param cbarg an additional parameter that can be passed to the callback.  *   The parameter can be used to carry around state.  */
define|#
directive|define
name|EVRPC_REGISTER
parameter_list|(
name|base
parameter_list|,
name|name
parameter_list|,
name|request
parameter_list|,
name|reply
parameter_list|,
name|callback
parameter_list|,
name|cbarg
parameter_list|)
define|\
value|evrpc_register_generic(base, #name,				\ 	    (void (*)(struct evrpc_req_generic *, void *))callback, cbarg, \ 	    (void *(*)(void *))request##_new, NULL,			\ 	    (void (*)(void *))request##_free,				\ 	    (int (*)(void *, struct evbuffer *))request##_unmarshal,	\ 	    (void *(*)(void *))reply##_new, NULL,			\ 	    (void (*)(void *))reply##_free, \ 	    (int (*)(void *))reply##_complete, \ 	    (void (*)(struct evbuffer *, void *))reply##_marshal)
comment|/**    Low level function for registering an RPC with a server.     Use EVRPC_REGISTER() instead.     @see EVRPC_REGISTER() */
name|int
name|evrpc_register_rpc
parameter_list|(
name|struct
name|evrpc_base
modifier|*
parameter_list|,
name|struct
name|evrpc
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|evrpc_req_generic
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/**  * Unregisters an already registered RPC  *  * @param base the evrpc_base object from which to unregister an RPC  * @param name the name of the rpc to unregister  * @return -1 on error or 0 when successful.  * @see EVRPC_REGISTER()  */
define|#
directive|define
name|EVRPC_UNREGISTER
parameter_list|(
name|base
parameter_list|,
name|name
parameter_list|)
value|evrpc_unregister_rpc((base), #name)
name|int
name|evrpc_unregister_rpc
parameter_list|(
name|struct
name|evrpc_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/*  * Client-side RPC support  */
struct_decl|struct
name|evhttp_connection
struct_decl|;
struct_decl|struct
name|evrpc_status
struct_decl|;
comment|/** launches an RPC and sends it to the server  *  * EVRPC_MAKE_REQUEST() is used by the client to send an RPC to the server.  *  * @param name the name of the RPC  * @param pool the evrpc_pool that contains the connection objects over which  *   the request should be sent.  * @param request a pointer to the RPC request structure - it contains the  *   data to be sent to the server.  * @param reply a pointer to the RPC reply structure.  It is going to be filled  *   if the request was answered successfully  * @param cb the callback to invoke when the RPC request has been answered  * @param cbarg an additional argument to be passed to the client  * @return 0 on success, -1 on failure  */
define|#
directive|define
name|EVRPC_MAKE_REQUEST
parameter_list|(
name|name
parameter_list|,
name|pool
parameter_list|,
name|request
parameter_list|,
name|reply
parameter_list|,
name|cb
parameter_list|,
name|cbarg
parameter_list|)
define|\
value|evrpc_send_request_##name((pool), (request), (reply), (cb), (cbarg))
comment|/**    Makes an RPC request based on the provided context.     This is a low-level function and should not be used directly    unless a custom context object is provided.  Use EVRPC_MAKE_REQUEST()    instead.     @param ctx a context from EVRPC_MAKE_CTX()    @returns 0 on success, -1 otherwise.    @see EVRPC_MAKE_REQUEST(), EVRPC_MAKE_CTX() */
name|int
name|evrpc_make_request
parameter_list|(
name|struct
name|evrpc_request_wrapper
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/** creates an rpc connection pool  *  * a pool has a number of connections associated with it.  * rpc requests are always made via a pool.  *  * @param base a pointer to an struct event_based object; can be left NULL  *   in singled-threaded applications  * @return a newly allocated struct evrpc_pool object  * @see evrpc_pool_free()  */
name|struct
name|evrpc_pool
modifier|*
name|evrpc_pool_new
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/** frees an rpc connection pool  *  * @param pool a pointer to an evrpc_pool allocated via evrpc_pool_new()  * @see evrpc_pool_new()  */
name|void
name|evrpc_pool_free
parameter_list|(
name|struct
name|evrpc_pool
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Adds a connection over which rpc can be dispatched to the pool.  *  * The connection object must have been newly created.  *  * @param pool the pool to which to add the connection  * @param evcon the connection to add to the pool.  */
name|void
name|evrpc_pool_add_connection
parameter_list|(
name|struct
name|evrpc_pool
modifier|*
name|pool
parameter_list|,
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|)
function_decl|;
comment|/**  * Removes a connection from the pool.  *  * The connection object must have been newly created.  *  * @param pool the pool from which to remove the connection  * @param evcon the connection to remove from the pool.  */
name|void
name|evrpc_pool_remove_connection
parameter_list|(
name|struct
name|evrpc_pool
modifier|*
name|pool
parameter_list|,
name|struct
name|evhttp_connection
modifier|*
name|evcon
parameter_list|)
function_decl|;
comment|/**  * Sets the timeout in secs after which a request has to complete.  The  * RPC is completely aborted if it does not complete by then.  Setting  * the timeout to 0 means that it never timeouts and can be used to  * implement callback type RPCs.  *  * Any connection already in the pool will be updated with the new  * timeout.  Connections added to the pool after set_timeout has be  * called receive the pool timeout only if no timeout has been set  * for the connection itself.  *  * @param pool a pointer to a struct evrpc_pool object  * @param timeout_in_secs the number of seconds after which a request should  *   timeout and a failure be returned to the callback.  */
name|void
name|evrpc_pool_set_timeout
parameter_list|(
name|struct
name|evrpc_pool
modifier|*
name|pool
parameter_list|,
name|int
name|timeout_in_secs
parameter_list|)
function_decl|;
comment|/**  * Hooks for changing the input and output of RPCs; this can be used to  * implement compression, authentication, encryption, ...  */
enum|enum
name|EVRPC_HOOK_TYPE
block|{
name|EVRPC_INPUT
block|,
comment|/**< apply the function to an input hook */
name|EVRPC_OUTPUT
comment|/**< apply the function to an output hook */
block|}
enum|;
ifndef|#
directive|ifndef
name|_WIN32
comment|/** Deprecated alias for EVRPC_INPUT.  Not available on windows, where it  * conflicts with platform headers. */
define|#
directive|define
name|INPUT
value|EVRPC_INPUT
comment|/** Deprecated alias for EVRPC_OUTPUT.  Not available on windows, where it  * conflicts with platform headers. */
define|#
directive|define
name|OUTPUT
value|EVRPC_OUTPUT
endif|#
directive|endif
comment|/**  * Return value from hook processing functions  */
enum|enum
name|EVRPC_HOOK_RESULT
block|{
name|EVRPC_TERMINATE
init|=
operator|-
literal|1
block|,
comment|/**< indicates the rpc should be terminated */
name|EVRPC_CONTINUE
init|=
literal|0
block|,
comment|/**< continue processing the rpc */
name|EVRPC_PAUSE
init|=
literal|1
comment|/**< pause processing request until resumed */
block|}
enum|;
comment|/** adds a processing hook to either an rpc base or rpc pool  *  * If a hook returns TERMINATE, the processing is aborted. On CONTINUE,  * the request is immediately processed after the hook returns.  If the  * hook returns PAUSE, request processing stops until evrpc_resume_request()  * has been called.  *  * The add functions return handles that can be used for removing hooks.  *  * @param vbase a pointer to either struct evrpc_base or struct evrpc_pool  * @param hook_type either INPUT or OUTPUT  * @param cb the callback to call when the hook is activated  * @param cb_arg an additional argument for the callback  * @return a handle to the hook so it can be removed later  * @see evrpc_remove_hook()  */
name|void
modifier|*
name|evrpc_add_hook
parameter_list|(
name|void
modifier|*
name|vbase
parameter_list|,
name|enum
name|EVRPC_HOOK_TYPE
name|hook_type
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|evhttp_request
modifier|*
parameter_list|,
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
comment|/** removes a previously added hook  *  * @param vbase a pointer to either struct evrpc_base or struct evrpc_pool  * @param hook_type either INPUT or OUTPUT  * @param handle a handle returned by evrpc_add_hook()  * @return 1 on success or 0 on failure  * @see evrpc_add_hook()  */
name|int
name|evrpc_remove_hook
parameter_list|(
name|void
modifier|*
name|vbase
parameter_list|,
name|enum
name|EVRPC_HOOK_TYPE
name|hook_type
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/** resume a paused request  *  * @param vbase a pointer to either struct evrpc_base or struct evrpc_pool  * @param ctx the context pointer provided to the original hook call  */
name|int
name|evrpc_resume_request
parameter_list|(
name|void
modifier|*
name|vbase
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|,
name|enum
name|EVRPC_HOOK_RESULT
name|res
parameter_list|)
function_decl|;
comment|/** adds meta data to request  *  * evrpc_hook_add_meta() allows hooks to add meta data to a request. for  * a client request, the meta data can be inserted by an outgoing request hook  * and retrieved by the incoming request hook.  *  * @param ctx the context provided to the hook call  * @param key a NUL-terminated c-string  * @param data the data to be associated with the key  * @param data_size the size of the data  */
name|void
name|evrpc_hook_add_meta
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|data_size
parameter_list|)
function_decl|;
comment|/** retrieves meta data previously associated  *  * evrpc_hook_find_meta() can be used to retrieve meta data associated to a  * request by a previous hook.  * @param ctx the context provided to the hook call  * @param key a NUL-terminated c-string  * @param data pointer to a data pointer that will contain the retrieved data  * @param data_size pointer to the size of the data  * @return 0 on success or -1 on failure  */
name|int
name|evrpc_hook_find_meta
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
name|void
modifier|*
modifier|*
name|data
parameter_list|,
name|size_t
modifier|*
name|data_size
parameter_list|)
function_decl|;
comment|/**  * returns the connection object associated with the request  *  * @param ctx the context provided to the hook call  * @return a pointer to the evhttp_connection object  */
name|struct
name|evhttp_connection
modifier|*
name|evrpc_hook_get_connection
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/**    Function for sending a generic RPC request.     Do not call this function directly, use EVRPC_MAKE_REQUEST() instead.     @see EVRPC_MAKE_REQUEST()  */
name|int
name|evrpc_send_request_generic
parameter_list|(
name|struct
name|evrpc_pool
modifier|*
name|pool
parameter_list|,
name|void
modifier|*
name|request
parameter_list|,
name|void
modifier|*
name|reply
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evrpc_status
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|,
specifier|const
name|char
modifier|*
name|rpcname
parameter_list|,
name|void
function_decl|(
modifier|*
name|req_marshal
function_decl|)
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|rpl_clear
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|rpl_unmarshal
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|evbuffer
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/**    Function for registering a generic RPC with the RPC base.     Do not call this function directly, use EVRPC_REGISTER() instead.     @see EVRPC_REGISTER()  */
name|int
name|evrpc_register_generic
parameter_list|(
name|struct
name|evrpc_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|struct
name|evrpc_req_generic
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cbarg
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|req_new
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|req_new_arg
parameter_list|,
name|void
function_decl|(
modifier|*
name|req_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|req_unmarshal
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|evbuffer
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|rpl_new
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|rpl_new_arg
parameter_list|,
name|void
function_decl|(
modifier|*
name|rpl_free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|rpl_complete
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|rpl_marshal
function_decl|)
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/** accessors for obscure and undocumented functionality */
name|struct
name|evrpc_pool
modifier|*
name|evrpc_request_get_pool
parameter_list|(
name|struct
name|evrpc_request_wrapper
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|evrpc_request_set_pool
parameter_list|(
name|struct
name|evrpc_request_wrapper
modifier|*
name|ctx
parameter_list|,
name|struct
name|evrpc_pool
modifier|*
name|pool
parameter_list|)
function_decl|;
name|void
name|evrpc_request_set_cb
parameter_list|(
name|struct
name|evrpc_request_wrapper
modifier|*
name|ctx
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evrpc_status
modifier|*
parameter_list|,
name|void
modifier|*
name|request
parameter_list|,
name|void
modifier|*
name|reply
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EVENT2_RPC_H_INCLUDED_ */
end_comment

end_unit

