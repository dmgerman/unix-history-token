begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000-2007 Niels Provos<provos@citi.umich.edu>  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EVENT2_TAG_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|EVENT2_TAG_H_INCLUDED_
end_define

begin_comment
comment|/** @file event2/tag.h    Helper functions for reading and writing tagged data onto buffers.   */
end_comment

begin_include
include|#
directive|include
file|<event2/visibility.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<event2/event-config.h>
ifdef|#
directive|ifdef
name|EVENT__HAVE_SYS_TYPES_H
include|#
directive|include
file|<sys/types.h>
endif|#
directive|endif
ifdef|#
directive|ifdef
name|EVENT__HAVE_SYS_TIME_H
include|#
directive|include
file|<sys/time.h>
endif|#
directive|endif
comment|/* For int types. */
include|#
directive|include
file|<event2/util.h>
struct_decl|struct
name|evbuffer
struct_decl|;
comment|/*  * Marshaling tagged data - We assume that all tags are inserted in their  * numeric order - so that unknown tags will always be higher than the  * known ones - and we can just ignore the end of an event buffer.  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**    Unmarshals the header and returns the length of the payload     @param evbuf the buffer from which to unmarshal data    @param ptag a pointer in which the tag id is being stored    @returns -1 on failure or the number of bytes in the remaining payload. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_unmarshal_header
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
modifier|*
name|ptag
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_marshal
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|tag
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|ev_uint32_t
name|len
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_marshal_buffer
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|tag
parameter_list|,
name|struct
name|evbuffer
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/**   Encode an integer and store it in an evbuffer.    We encode integers by nybbles; the first nibble contains the number   of significant nibbles - 1;  this allows us to encode up to 64-bit   integers.  This function is byte-order independent.    @param evbuf evbuffer to store the encoded number   @param number a 32-bit integer  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_encode_int
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|number
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_encode_int64
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint64_t
name|number
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_marshal_int
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|tag
parameter_list|,
name|ev_uint32_t
name|integer
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_marshal_int64
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|tag
parameter_list|,
name|ev_uint64_t
name|integer
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_marshal_string
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|buf
parameter_list|,
name|ev_uint32_t
name|tag
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|void
name|evtag_marshal_timeval
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|tag
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_unmarshal
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|src
parameter_list|,
name|ev_uint32_t
modifier|*
name|ptag
parameter_list|,
name|struct
name|evbuffer
modifier|*
name|dst
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_peek
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
modifier|*
name|ptag
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_peek_length
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
modifier|*
name|plength
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_payload_length
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
modifier|*
name|plength
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_consume
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_unmarshal_int
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|need_tag
parameter_list|,
name|ev_uint32_t
modifier|*
name|pinteger
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_unmarshal_int64
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|need_tag
parameter_list|,
name|ev_uint64_t
modifier|*
name|pinteger
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_unmarshal_fixed
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|src
parameter_list|,
name|ev_uint32_t
name|need_tag
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_unmarshal_string
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|need_tag
parameter_list|,
name|char
modifier|*
modifier|*
name|pstring
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evtag_unmarshal_timeval
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|ev_uint32_t
name|need_tag
parameter_list|,
name|struct
name|timeval
modifier|*
name|ptv
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EVENT2_TAG_H_INCLUDED_ */
end_comment

end_unit

