begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2006-2007 Niels Provos<provos@citi.umich.edu>  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * The original DNS code is due to Adam Langley with heavy  * modifications by Nick Mathewson.  Adam put his DNS software in the  * public domain.  You can find his original copyright below.  Please,  * aware that the code as part of Libevent is governed by the 3-clause  * BSD license above.  *  * This software is Public Domain. To view a copy of the public domain dedication,  * visit http://creativecommons.org/licenses/publicdomain/ or send a letter to  * Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.  *  * I ask and expect, but do not require, that all derivative works contain an  * attribution similar to:  *     Parts developed by Adam Langley<agl@imperialviolet.org>  *  * You may wish to replace the word "Parts" with something else depending on  * the amount of original code.  *  * (Derivative works does not include programs which link against, run or include  * the source verbatim in their source distributions)  */
end_comment

begin_comment
comment|/** @file event2/dns.h  *  * Welcome, gentle reader  *  * Async DNS lookups are really a whole lot harder than they should be,  * mostly stemming from the fact that the libc resolver has never been  * very good at them. Before you use this library you should see if libc  * can do the job for you with the modern async call getaddrinfo_a  * (see http://www.imperialviolet.org/page25.html#e498). Otherwise,  * please continue.  *  * The library keeps track of the state of nameservers and will avoid  * them when they go down. Otherwise it will round robin between them.  *  * Quick start guide:  *   #include "evdns.h"  *   void callback(int result, char type, int count, int ttl,  *		 void *addresses, void *arg);  *   evdns_resolv_conf_parse(DNS_OPTIONS_ALL, "/etc/resolv.conf");  *   evdns_resolve("www.hostname.com", 0, callback, NULL);  *  * When the lookup is complete the callback function is called. The  * first argument will be one of the DNS_ERR_* defines in evdns.h.  * Hopefully it will be DNS_ERR_NONE, in which case type will be  * DNS_IPv4_A, count will be the number of IP addresses, ttl is the time  * which the data can be cached for (in seconds), addresses will point  * to an array of uint32_t's and arg will be whatever you passed to  * evdns_resolve.  *  * Searching:  *  * In order for this library to be a good replacement for glibc's resolver it  * supports searching. This involves setting a list of default domains, in  * which names will be queried for. The number of dots in the query name  * determines the order in which this list is used.  *  * Searching appears to be a single lookup from the point of view of the API,  * although many DNS queries may be generated from a single call to  * evdns_resolve. Searching can also drastically slow down the resolution  * of names.  *  * To disable searching:  *   1. Never set it up. If you never call evdns_resolv_conf_parse or  *   evdns_search_add then no searching will occur.  *  *   2. If you do call evdns_resolv_conf_parse then don't pass  *   DNS_OPTION_SEARCH (or DNS_OPTIONS_ALL, which implies it).  *  *   3. When calling evdns_resolve, pass the DNS_QUERY_NO_SEARCH flag.  *  * The order of searches depends on the number of dots in the name. If the  * number is greater than the ndots setting then the names is first tried  * globally. Otherwise each search domain is appended in turn.  *  * The ndots setting can either be set from a resolv.conf, or by calling  * evdns_search_ndots_set.  *  * For example, with ndots set to 1 (the default) and a search domain list of  * ["myhome.net"]:  *  Query: www  *  Order: www.myhome.net, www.  *  *  Query: www.abc  *  Order: www.abc., www.abc.myhome.net  *  * Internals:  *  * Requests are kept in two queues. The first is the inflight queue. In  * this queue requests have an allocated transaction id and nameserver.  * They will soon be transmitted if they haven't already been.  *  * The second is the waiting queue. The size of the inflight ring is  * limited and all other requests wait in waiting queue for space. This  * bounds the number of concurrent requests so that we don't flood the  * nameserver. Several algorithms require a full walk of the inflight  * queue and so bounding its size keeps thing going nicely under huge  * (many thousands of requests) loads.  *  * If a nameserver loses too many requests it is considered down and we  * try not to use it. After a while we send a probe to that nameserver  * (a lookup for google.com) and, if it replies, we consider it working  * again. If the nameserver fails a probe we wait longer to try again  * with the next probe.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EVENT2_DNS_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|EVENT2_DNS_H_INCLUDED_
end_define

begin_include
include|#
directive|include
file|<event2/visibility.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* For integer types. */
include|#
directive|include
file|<event2/util.h>
comment|/** Error codes 0-5 are as described in RFC 1035. */
define|#
directive|define
name|DNS_ERR_NONE
value|0
comment|/** The name server was unable to interpret the query */
define|#
directive|define
name|DNS_ERR_FORMAT
value|1
comment|/** The name server was unable to process this query due to a problem with the  * name server */
define|#
directive|define
name|DNS_ERR_SERVERFAILED
value|2
comment|/** The domain name does not exist */
define|#
directive|define
name|DNS_ERR_NOTEXIST
value|3
comment|/** The name server does not support the requested kind of query */
define|#
directive|define
name|DNS_ERR_NOTIMPL
value|4
comment|/** The name server refuses to reform the specified operation for policy  * reasons */
define|#
directive|define
name|DNS_ERR_REFUSED
value|5
comment|/** The reply was truncated or ill-formatted */
define|#
directive|define
name|DNS_ERR_TRUNCATED
value|65
comment|/** An unknown error occurred */
define|#
directive|define
name|DNS_ERR_UNKNOWN
value|66
comment|/** Communication with the server timed out */
define|#
directive|define
name|DNS_ERR_TIMEOUT
value|67
comment|/** The request was canceled because the DNS subsystem was shut down. */
define|#
directive|define
name|DNS_ERR_SHUTDOWN
value|68
comment|/** The request was canceled via a call to evdns_cancel_request */
define|#
directive|define
name|DNS_ERR_CANCEL
value|69
comment|/** There were no answers and no error condition in the DNS packet.  * This can happen when you ask for an address that exists, but a record  * type that doesn't. */
define|#
directive|define
name|DNS_ERR_NODATA
value|70
define|#
directive|define
name|DNS_IPv4_A
value|1
define|#
directive|define
name|DNS_PTR
value|2
define|#
directive|define
name|DNS_IPv6_AAAA
value|3
define|#
directive|define
name|DNS_QUERY_NO_SEARCH
value|1
define|#
directive|define
name|DNS_OPTION_SEARCH
value|1
define|#
directive|define
name|DNS_OPTION_NAMESERVERS
value|2
define|#
directive|define
name|DNS_OPTION_MISC
value|4
define|#
directive|define
name|DNS_OPTION_HOSTSFILE
value|8
define|#
directive|define
name|DNS_OPTIONS_ALL
value|15
comment|/* Obsolete name for DNS_QUERY_NO_SEARCH */
define|#
directive|define
name|DNS_NO_SEARCH
value|DNS_QUERY_NO_SEARCH
comment|/**  * The callback that contains the results from a lookup.  * - result is one of the DNS_ERR_* values (DNS_ERR_NONE for success)  * - type is either DNS_IPv4_A or DNS_PTR or DNS_IPv6_AAAA  * - count contains the number of addresses of form type  * - ttl is the number of seconds the resolution may be cached for.  * - addresses needs to be cast according to type.  It will be an array of  *   4-byte sequences for ipv4, or an array of 16-byte sequences for ipv6,  *   or a nul-terminated string for PTR.  */
typedef|typedef
name|void
function_decl|(
modifier|*
name|evdns_callback_type
function_decl|)
parameter_list|(
name|int
name|result
parameter_list|,
name|char
name|type
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|ttl
parameter_list|,
name|void
modifier|*
name|addresses
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
struct_decl|struct
name|evdns_base
struct_decl|;
struct_decl|struct
name|event_base
struct_decl|;
comment|/** Flag for evdns_base_new: process resolv.conf.  */
define|#
directive|define
name|EVDNS_BASE_INITIALIZE_NAMESERVERS
value|1
comment|/** Flag for evdns_base_new: Do not prevent the libevent event loop from  * exiting when we have no active dns requests. */
define|#
directive|define
name|EVDNS_BASE_DISABLE_WHEN_INACTIVE
value|0x8000
comment|/**   Initialize the asynchronous DNS library.    This function initializes support for non-blocking name resolution by   calling evdns_resolv_conf_parse() on UNIX and   evdns_config_windows_nameservers() on Windows.    @param event_base the event base to associate the dns client with   @param flags any of EVDNS_BASE_INITIALIZE_NAMESERVERS|     EVDNS_BASE_DISABLE_WHEN_INACTIVE   @return evdns_base object if successful, or NULL if an error occurred.   @see evdns_base_free()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evdns_base
modifier|*
name|evdns_base_new
parameter_list|(
name|struct
name|event_base
modifier|*
name|event_base
parameter_list|,
name|int
name|initialize_nameservers
parameter_list|)
function_decl|;
comment|/**   Shut down the asynchronous DNS resolver and terminate all active requests.    If the 'fail_requests' option is enabled, all active requests will return   an empty result with the error flag set to DNS_ERR_SHUTDOWN. Otherwise,   the requests will be silently discarded.    @param evdns_base the evdns base to free   @param fail_requests if zero, active requests will be aborted; if non-zero, 		active requests will return DNS_ERR_SHUTDOWN.   @see evdns_base_new()  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_base_free
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
name|int
name|fail_requests
parameter_list|)
function_decl|;
comment|/**    Remove all hosts entries that have been loaded into the event_base via    evdns_base_load_hosts or via event_base_resolv_conf_parse.     @param evdns_base the evdns base to remove outdated host addresses from  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_base_clear_host_addresses
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/**   Convert a DNS error code to a string.    @param err the DNS error code   @return a string containing an explanation of the error code */
name|EVENT2_EXPORT_SYMBOL
specifier|const
name|char
modifier|*
name|evdns_err_to_string
parameter_list|(
name|int
name|err
parameter_list|)
function_decl|;
comment|/**   Add a nameserver.    The address should be an IPv4 address in network byte order.   The type of address is chosen so that it matches in_addr.s_addr.    @param base the evdns_base to which to add the name server   @param address an IP address in network byte order   @return 0 if successful, or -1 if an error occurred   @see evdns_base_nameserver_ip_add()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_nameserver_add
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
name|unsigned
name|long
name|int
name|address
parameter_list|)
function_decl|;
comment|/**   Get the number of configured nameservers.    This returns the number of configured nameservers (not necessarily the   number of running nameservers).  This is useful for double-checking   whether our calls to the various nameserver configuration functions   have been successful.    @param base the evdns_base to which to apply this operation   @return the number of configured nameservers   @see evdns_base_nameserver_add()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_count_nameservers
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/**   Remove all configured nameservers, and suspend all pending resolves.    Resolves will not necessarily be re-attempted until evdns_base_resume() is called.    @param base the evdns_base to which to apply this operation   @return 0 if successful, or -1 if an error occurred   @see evdns_base_resume()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_clear_nameservers_and_suspend
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/**   Resume normal operation and continue any suspended resolve requests.    Re-attempt resolves left in limbo after an earlier call to   evdns_base_clear_nameservers_and_suspend().    @param base the evdns_base to which to apply this operation   @return 0 if successful, or -1 if an error occurred   @see evdns_base_clear_nameservers_and_suspend()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_resume
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/**   Add a nameserver by string address.    This function parses a n IPv4 or IPv6 address from a string and adds it as a   nameserver.  It supports the following formats:   - [IPv6Address]:port   - [IPv6Address]   - IPv6Address   - IPv4Address:port   - IPv4Address    If no port is specified, it defaults to 53.    @param base the evdns_base to which to apply this operation   @return 0 if successful, or -1 if an error occurred   @see evdns_base_nameserver_add()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_nameserver_ip_add
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|ip_as_string
parameter_list|)
function_decl|;
comment|/**    Add a nameserver by sockaddr.  **/
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_nameserver_sockaddr_add
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|ev_socklen_t
name|len
parameter_list|,
name|unsigned
name|flags
parameter_list|)
function_decl|;
struct_decl|struct
name|evdns_request
struct_decl|;
comment|/**   Lookup an A record for a given name.    @param base the evdns_base to which to apply this operation   @param name a DNS hostname   @param flags either 0, or DNS_QUERY_NO_SEARCH to disable searching for this query.   @param callback a callback function to invoke when the request is completed   @param ptr an argument to pass to the callback function   @return an evdns_request object if successful, or NULL if an error occurred.   @see evdns_resolve_ipv6(), evdns_resolve_reverse(), evdns_resolve_reverse_ipv6(), evdns_cancel_request()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evdns_request
modifier|*
name|evdns_base_resolve_ipv4
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|flags
parameter_list|,
name|evdns_callback_type
name|callback
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
comment|/**   Lookup an AAAA record for a given name.    @param base the evdns_base to which to apply this operation   @param name a DNS hostname   @param flags either 0, or DNS_QUERY_NO_SEARCH to disable searching for this query.   @param callback a callback function to invoke when the request is completed   @param ptr an argument to pass to the callback function   @return an evdns_request object if successful, or NULL if an error occurred.   @see evdns_resolve_ipv4(), evdns_resolve_reverse(), evdns_resolve_reverse_ipv6(), evdns_cancel_request()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evdns_request
modifier|*
name|evdns_base_resolve_ipv6
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|flags
parameter_list|,
name|evdns_callback_type
name|callback
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
struct_decl|struct
name|in_addr
struct_decl|;
struct_decl|struct
name|in6_addr
struct_decl|;
comment|/**   Lookup a PTR record for a given IP address.    @param base the evdns_base to which to apply this operation   @param in an IPv4 address   @param flags either 0, or DNS_QUERY_NO_SEARCH to disable searching for this query.   @param callback a callback function to invoke when the request is completed   @param ptr an argument to pass to the callback function   @return an evdns_request object if successful, or NULL if an error occurred.   @see evdns_resolve_reverse_ipv6(), evdns_cancel_request()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evdns_request
modifier|*
name|evdns_base_resolve_reverse
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|struct
name|in_addr
modifier|*
name|in
parameter_list|,
name|int
name|flags
parameter_list|,
name|evdns_callback_type
name|callback
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
comment|/**   Lookup a PTR record for a given IPv6 address.    @param base the evdns_base to which to apply this operation   @param in an IPv6 address   @param flags either 0, or DNS_QUERY_NO_SEARCH to disable searching for this query.   @param callback a callback function to invoke when the request is completed   @param ptr an argument to pass to the callback function   @return an evdns_request object if successful, or NULL if an error occurred.   @see evdns_resolve_reverse_ipv6(), evdns_cancel_request()  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evdns_request
modifier|*
name|evdns_base_resolve_reverse_ipv6
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|struct
name|in6_addr
modifier|*
name|in
parameter_list|,
name|int
name|flags
parameter_list|,
name|evdns_callback_type
name|callback
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
comment|/**   Cancels a pending DNS resolution request.    @param base the evdns_base that was used to make the request   @param req the evdns_request that was returned by calling a resolve function   @see evdns_base_resolve_ipv4(), evdns_base_resolve_ipv6, evdns_base_resolve_reverse */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_cancel_request
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
name|struct
name|evdns_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/**   Set the value of a configuration option.    The currently available configuration options are:      ndots, timeout, max-timeouts, max-inflight, attempts, randomize-case,     bind-to, initial-probe-timeout, getaddrinfo-allow-skew.    In versions before Libevent 2.0.3-alpha, the option name needed to end with   a colon.    @param base the evdns_base to which to apply this operation   @param option the name of the configuration option to be modified   @param val the value to be set   @return 0 if successful, or -1 if an error occurred  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_set_option
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|val
parameter_list|)
function_decl|;
comment|/**   Parse a resolv.conf file.    The 'flags' parameter determines what information is parsed from the   resolv.conf file. See the man page for resolv.conf for the format of this   file.    The following directives are not parsed from the file: sortlist, rotate,   no-check-names, inet6, debug.    If this function encounters an error, the possible return values are: 1 =   failed to open file, 2 = failed to stat file, 3 = file too large, 4 = out of   memory, 5 = short read from file, 6 = no nameservers listed in the file    @param base the evdns_base to which to apply this operation   @param flags any of DNS_OPTION_NAMESERVERS|DNS_OPTION_SEARCH|DNS_OPTION_MISC|     DNS_OPTION_HOSTSFILE|DNS_OPTIONS_ALL   @param filename the path to the resolv.conf file   @return 0 if successful, or various positive error codes if an error     occurred (see above)   @see resolv.conf(3), evdns_config_windows_nameservers()  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_resolv_conf_parse
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
name|filename
parameter_list|)
function_decl|;
comment|/**    Load an /etc/hosts-style file from 'hosts_fname' into 'base'.     If hosts_fname is NULL, add minimal entries for localhost, and nothing    else.     Note that only evdns_getaddrinfo uses the /etc/hosts entries.     This function does not replace previously loaded hosts entries; to do that,    call evdns_base_clear_host_addresses first.     Return 0 on success, negative on failure. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_load_hosts
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|hosts_fname
parameter_list|)
function_decl|;
comment|/**   Obtain nameserver information using the Windows API.    Attempt to configure a set of nameservers based on platform settings on   a win32 host.  Preferentially tries to use GetNetworkParams; if that fails,   looks in the registry.    @return 0 if successful, or -1 if an error occurred   @see evdns_resolv_conf_parse()  */
ifdef|#
directive|ifdef
name|_WIN32
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_config_windows_nameservers
parameter_list|(
name|struct
name|evdns_base
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|EVDNS_BASE_CONFIG_WINDOWS_NAMESERVERS_IMPLEMENTED
endif|#
directive|endif
comment|/**   Clear the list of search domains.  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_base_search_clear
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/**   Add a domain to the list of search domains    @param domain the domain to be added to the search list  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_base_search_add
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|char
modifier|*
name|domain
parameter_list|)
function_decl|;
comment|/**   Set the 'ndots' parameter for searches.    Sets the number of dots which, when found in a name, causes   the first query to be without any search domain.    @param ndots the new ndots parameter  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_base_search_ndots_set
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
specifier|const
name|int
name|ndots
parameter_list|)
function_decl|;
comment|/**   A callback that is invoked when a log message is generated    @param is_warning indicates if the log message is a 'warning'   @param msg the content of the log message  */
typedef|typedef
name|void
function_decl|(
modifier|*
name|evdns_debug_log_fn_type
function_decl|)
parameter_list|(
name|int
name|is_warning
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
comment|/**   Set the callback function to handle DNS log messages.  If this   callback is not set, evdns log messages are handled with the regular   Libevent logging system.    @param fn the callback to be invoked when a log message is generated  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_set_log_fn
parameter_list|(
name|evdns_debug_log_fn_type
name|fn
parameter_list|)
function_decl|;
comment|/**    Set a callback that will be invoked to generate transaction IDs.  By    default, we pick transaction IDs based on the current clock time, which    is bad for security.     @param fn the new callback, or NULL to use the default.     NOTE: This function has no effect in Libevent 2.0.4-alpha and later,    since Libevent now provides its own secure RNG.  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_set_transaction_id_fn
parameter_list|(
name|ev_uint16_t
function_decl|(
modifier|*
name|fn
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
comment|/**    Set a callback used to generate random bytes.  By default, we use    the same function as passed to evdns_set_transaction_id_fn to generate    bytes two at a time.  If a function is provided here, it's also used    to generate transaction IDs.     NOTE: This function has no effect in Libevent 2.0.4-alpha and later,    since Libevent now provides its own secure RNG. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_set_random_bytes_fn
parameter_list|(
name|void
function_decl|(
modifier|*
name|fn
function_decl|)
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
parameter_list|)
function_decl|;
comment|/*  * Functions used to implement a DNS server.  */
struct_decl|struct
name|evdns_server_request
struct_decl|;
struct_decl|struct
name|evdns_server_question
struct_decl|;
comment|/**    A callback to implement a DNS server.  The callback function receives a DNS    request.  It should then optionally add a number of answers to the reply    using the evdns_server_request_add_*_reply functions, before calling either    evdns_server_request_respond to send the reply back, or    evdns_server_request_drop to decline to answer the request.     @param req A newly received request    @param user_data A pointer that was passed to       evdns_add_server_port_with_base().  */
typedef|typedef
name|void
function_decl|(
modifier|*
name|evdns_request_callback_fn_type
function_decl|)
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|EVDNS_ANSWER_SECTION
value|0
define|#
directive|define
name|EVDNS_AUTHORITY_SECTION
value|1
define|#
directive|define
name|EVDNS_ADDITIONAL_SECTION
value|2
define|#
directive|define
name|EVDNS_TYPE_A
value|1
define|#
directive|define
name|EVDNS_TYPE_NS
value|2
define|#
directive|define
name|EVDNS_TYPE_CNAME
value|5
define|#
directive|define
name|EVDNS_TYPE_SOA
value|6
define|#
directive|define
name|EVDNS_TYPE_PTR
value|12
define|#
directive|define
name|EVDNS_TYPE_MX
value|15
define|#
directive|define
name|EVDNS_TYPE_TXT
value|16
define|#
directive|define
name|EVDNS_TYPE_AAAA
value|28
define|#
directive|define
name|EVDNS_QTYPE_AXFR
value|252
define|#
directive|define
name|EVDNS_QTYPE_ALL
value|255
define|#
directive|define
name|EVDNS_CLASS_INET
value|1
comment|/* flags that can be set in answers; as part of the err parameter */
define|#
directive|define
name|EVDNS_FLAGS_AA
value|0x400
define|#
directive|define
name|EVDNS_FLAGS_RD
value|0x080
comment|/** Create a new DNS server port.      @param base The event base to handle events for the server port.     @param socket A UDP socket to accept DNS requests.     @param flags Always 0 for now.     @param callback A function to invoke whenever we get a DNS request       on the socket.     @param user_data Data to pass to the callback.     @return an evdns_server_port structure for this server port.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evdns_server_port
modifier|*
name|evdns_add_server_port_with_base
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|,
name|evutil_socket_t
name|socket
parameter_list|,
name|int
name|flags
parameter_list|,
name|evdns_request_callback_fn_type
name|callback
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
comment|/** Close down a DNS server port, and free associated structures. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_close_server_port
parameter_list|(
name|struct
name|evdns_server_port
modifier|*
name|port
parameter_list|)
function_decl|;
comment|/** Sets some flags in a reply we're building.     Allows setting of the AA or RD flags  */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_server_request_set_flags
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
comment|/* Functions to add an answer to an in-progress DNS reply.  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_add_reply
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
name|int
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|dns_class
parameter_list|,
name|int
name|ttl
parameter_list|,
name|int
name|datalen
parameter_list|,
name|int
name|is_name
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_add_a_reply
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|void
modifier|*
name|addrs
parameter_list|,
name|int
name|ttl
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_add_aaaa_reply
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|void
modifier|*
name|addrs
parameter_list|,
name|int
name|ttl
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_add_ptr_reply
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
name|struct
name|in_addr
modifier|*
name|in
parameter_list|,
specifier|const
name|char
modifier|*
name|inaddr_name
parameter_list|,
specifier|const
name|char
modifier|*
name|hostname
parameter_list|,
name|int
name|ttl
parameter_list|)
function_decl|;
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_add_cname_reply
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|cname
parameter_list|,
name|int
name|ttl
parameter_list|)
function_decl|;
comment|/**    Send back a response to a DNS request, and free the request structure. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_respond
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
name|int
name|err
parameter_list|)
function_decl|;
comment|/**    Free a DNS request without sending back a reply. */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_drop
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|)
function_decl|;
struct_decl|struct
name|sockaddr
struct_decl|;
comment|/**     Get the address that made a DNS request.  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_server_request_get_requesting_addr
parameter_list|(
name|struct
name|evdns_server_request
modifier|*
name|req
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|int
name|addr_len
parameter_list|)
function_decl|;
comment|/** Callback for evdns_getaddrinfo. */
typedef|typedef
name|void
function_decl|(
modifier|*
name|evdns_getaddrinfo_cb
function_decl|)
parameter_list|(
name|int
name|result
parameter_list|,
name|struct
name|evutil_addrinfo
modifier|*
name|res
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
struct_decl|struct
name|evdns_base
struct_decl|;
struct_decl|struct
name|evdns_getaddrinfo_request
struct_decl|;
comment|/** Make a non-blocking getaddrinfo request using the dns_base in 'dns_base'.  *  * If we can answer the request immediately (with an error or not!), then we  * invoke cb immediately and return NULL.  Otherwise we return  * an evdns_getaddrinfo_request and invoke cb later.  *  * When the callback is invoked, we pass as its first argument the error code  * that getaddrinfo would return (or 0 for no error).  As its second argument,  * we pass the evutil_addrinfo structures we found (or NULL on error).  We  * pass 'arg' as the third argument.  *  * Limitations:  *  * - The AI_V4MAPPED and AI_ALL flags are not currently implemented.  * - For ai_socktype, we only handle SOCKTYPE_STREAM, SOCKTYPE_UDP, and 0.  * - For ai_protocol, we only handle IPPROTO_TCP, IPPROTO_UDP, and 0.  */
name|EVENT2_EXPORT_SYMBOL
name|struct
name|evdns_getaddrinfo_request
modifier|*
name|evdns_getaddrinfo
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|dns_base
parameter_list|,
specifier|const
name|char
modifier|*
name|nodename
parameter_list|,
specifier|const
name|char
modifier|*
name|servname
parameter_list|,
specifier|const
name|struct
name|evutil_addrinfo
modifier|*
name|hints_in
parameter_list|,
name|evdns_getaddrinfo_cb
name|cb
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
comment|/* Cancel an in-progress evdns_getaddrinfo.  This MUST NOT be called after the  * getaddrinfo's callback has been invoked.  The resolves will be canceled,  * and the callback will be invoked with the error EVUTIL_EAI_CANCEL. */
name|EVENT2_EXPORT_SYMBOL
name|void
name|evdns_getaddrinfo_cancel
parameter_list|(
name|struct
name|evdns_getaddrinfo_request
modifier|*
name|req
parameter_list|)
function_decl|;
comment|/**    Retrieve the address of the 'idx'th configured nameserver.     @param base The evdns_base to examine.    @param idx The index of the nameserver to get the address of.    @param sa A location to receive the server's address.    @param len The number of bytes available at sa.     @return the number of bytes written into sa on success.  On failure, returns      -1 if idx is greater than the number of configured nameservers, or a      value greater than 'len' if len was not high enough.  */
name|EVENT2_EXPORT_SYMBOL
name|int
name|evdns_base_get_nameserver_addr
parameter_list|(
name|struct
name|evdns_base
modifier|*
name|base
parameter_list|,
name|int
name|idx
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|ev_socklen_t
name|len
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !EVENT2_DNS_H_INCLUDED_ */
end_comment

end_unit

