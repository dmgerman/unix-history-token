begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MM_INTERNAL_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|MM_INTERNAL_H_INCLUDED_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|EVENT__DISABLE_MM_REPLACEMENT
comment|/* Internal use only: Memory allocation functions. We give them nice short  * mm_names for our own use, but make sure that the symbols have longer names  * so they don't conflict with other libraries (like, say, libmm). */
comment|/** Allocate uninitialized memory.  *  * @return On success, return a pointer to sz newly allocated bytes.  *     On failure, set errno to ENOMEM and return NULL.  *     If the argument sz is 0, simply return NULL.  */
name|void
modifier|*
name|event_mm_malloc_
parameter_list|(
name|size_t
name|sz
parameter_list|)
function_decl|;
comment|/** Allocate memory initialized to zero.  *  * @return On success, return a pointer to (count * size) newly allocated  *     bytes, initialized to zero.  *     On failure, or if the product would result in an integer overflow,  *     set errno to ENOMEM and return NULL.  *     If either arguments are 0, simply return NULL.  */
name|void
modifier|*
name|event_mm_calloc_
parameter_list|(
name|size_t
name|count
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
comment|/** Duplicate a string.  *  * @return On success, return a pointer to a newly allocated duplicate  *     of a string.  *     Set errno to ENOMEM and return NULL if a memory allocation error  *     occurs (or would occur) in the process.  *     If the argument str is NULL, set errno to EINVAL and return NULL.  */
name|char
modifier|*
name|event_mm_strdup_
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|void
modifier|*
name|event_mm_realloc_
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|size_t
name|sz
parameter_list|)
function_decl|;
name|void
name|event_mm_free_
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
define|#
directive|define
name|mm_malloc
parameter_list|(
name|sz
parameter_list|)
value|event_mm_malloc_(sz)
define|#
directive|define
name|mm_calloc
parameter_list|(
name|count
parameter_list|,
name|size
parameter_list|)
value|event_mm_calloc_((count), (size))
define|#
directive|define
name|mm_strdup
parameter_list|(
name|s
parameter_list|)
value|event_mm_strdup_(s)
define|#
directive|define
name|mm_realloc
parameter_list|(
name|p
parameter_list|,
name|sz
parameter_list|)
value|event_mm_realloc_((p), (sz))
define|#
directive|define
name|mm_free
parameter_list|(
name|p
parameter_list|)
value|event_mm_free_(p)
else|#
directive|else
define|#
directive|define
name|mm_malloc
parameter_list|(
name|sz
parameter_list|)
value|malloc(sz)
define|#
directive|define
name|mm_calloc
parameter_list|(
name|n
parameter_list|,
name|sz
parameter_list|)
value|calloc((n), (sz))
define|#
directive|define
name|mm_strdup
parameter_list|(
name|s
parameter_list|)
value|strdup(s)
define|#
directive|define
name|mm_realloc
parameter_list|(
name|p
parameter_list|,
name|sz
parameter_list|)
value|realloc((p), (sz))
define|#
directive|define
name|mm_free
parameter_list|(
name|p
parameter_list|)
value|free(p)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

