begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2009-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|IOCP_INTERNAL_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|IOCP_INTERNAL_H_INCLUDED_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|event_overlapped
struct_decl|;
struct_decl|struct
name|event_iocp_port
struct_decl|;
struct_decl|struct
name|evbuffer
struct_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|iocp_callback
function_decl|)
parameter_list|(
name|struct
name|event_overlapped
modifier|*
parameter_list|,
name|ev_uintptr_t
parameter_list|,
name|ev_ssize_t
parameter_list|,
name|int
name|success
parameter_list|)
function_decl|;
comment|/* This whole file is actually win32 only. We wrap the structures in a win32  * ifdef so that we can test-compile code that uses these interfaces on  * non-win32 platforms. */
ifdef|#
directive|ifdef
name|_WIN32
comment|/**    Internal use only.  Wraps an OVERLAPPED that we're using for libevent    functionality.  Whenever an event_iocp_port gets an event for a given    OVERLAPPED*, it upcasts the pointer to an event_overlapped, and calls the    iocp_callback function with the event_overlapped, the iocp key, and the    number of bytes transferred as arguments.  */
struct|struct
name|event_overlapped
block|{
name|OVERLAPPED
name|overlapped
decl_stmt|;
name|iocp_callback
name|cb
decl_stmt|;
block|}
struct|;
comment|/* Mingw's headers don't define LPFN_ACCEPTEX. */
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|AcceptExPtr
function_decl|)
parameter_list|(
name|SOCKET
parameter_list|,
name|SOCKET
parameter_list|,
name|PVOID
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|LPDWORD
parameter_list|,
name|LPOVERLAPPED
parameter_list|)
function_decl|;
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|ConnectExPtr
function_decl|)
parameter_list|(
name|SOCKET
parameter_list|,
specifier|const
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|int
parameter_list|,
name|PVOID
parameter_list|,
name|DWORD
parameter_list|,
name|LPDWORD
parameter_list|,
name|LPOVERLAPPED
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
name|WINAPI
modifier|*
name|GetAcceptExSockaddrsPtr
function_decl|)
parameter_list|(
name|PVOID
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|LPSOCKADDR
modifier|*
parameter_list|,
name|LPINT
parameter_list|,
name|LPSOCKADDR
modifier|*
parameter_list|,
name|LPINT
parameter_list|)
function_decl|;
comment|/** Internal use only. Holds pointers to functions that only some versions of     Windows provide.  */
struct|struct
name|win32_extension_fns
block|{
name|AcceptExPtr
name|AcceptEx
decl_stmt|;
name|ConnectExPtr
name|ConnectEx
decl_stmt|;
name|GetAcceptExSockaddrsPtr
name|GetAcceptExSockaddrs
decl_stmt|;
block|}
struct|;
comment|/**     Internal use only. Stores a Windows IO Completion port, along with     related data.  */
struct|struct
name|event_iocp_port
block|{
comment|/** The port itself */
name|HANDLE
name|port
decl_stmt|;
comment|/* A lock to cover internal structures. */
name|CRITICAL_SECTION
name|lock
decl_stmt|;
comment|/** Number of threads ever open on the port. */
name|short
name|n_threads
decl_stmt|;
comment|/** True iff we're shutting down all the threads on this port */
name|short
name|shutdown
decl_stmt|;
comment|/** How often the threads on this port check for shutdown and other 	 * conditions */
name|long
name|ms
decl_stmt|;
comment|/* The threads that are waiting for events. */
name|HANDLE
modifier|*
name|threads
decl_stmt|;
comment|/** Number of threads currently open on this port. */
name|short
name|n_live_threads
decl_stmt|;
comment|/** A semaphore to signal when we are done shutting down. */
name|HANDLE
modifier|*
name|shutdownSemaphore
decl_stmt|;
block|}
struct|;
specifier|const
name|struct
name|win32_extension_fns
modifier|*
name|event_get_win32_extension_fns_
parameter_list|(
name|void
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* Dummy definition so we can test-compile more things on unix. */
struct|struct
name|event_overlapped
block|{
name|iocp_callback
name|cb
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
comment|/** Initialize the fields in an event_overlapped.      @param overlapped The struct event_overlapped to initialize     @param cb The callback that should be invoked once the IO operation has 	finished.  */
name|void
name|event_overlapped_init_
parameter_list|(
name|struct
name|event_overlapped
modifier|*
parameter_list|,
name|iocp_callback
name|cb
parameter_list|)
function_decl|;
comment|/** Allocate and return a new evbuffer that supports overlapped IO on a given     socket.  The socket must be associated with an IO completion port using     event_iocp_port_associate_. */
name|struct
name|evbuffer
modifier|*
name|evbuffer_overlapped_new_
parameter_list|(
name|evutil_socket_t
name|fd
parameter_list|)
function_decl|;
comment|/** XXXX Document (nickm) */
name|evutil_socket_t
name|evbuffer_overlapped_get_fd_
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|buf
parameter_list|)
function_decl|;
name|void
name|evbuffer_overlapped_set_fd_
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|buf
parameter_list|,
name|evutil_socket_t
name|fd
parameter_list|)
function_decl|;
comment|/** Start reading data onto the end of an overlapped evbuffer.      An evbuffer can only have one read pending at a time.  While the read     is in progress, no other data may be added to the end of the buffer.     The buffer must be created with event_overlapped_init_().     evbuffer_commit_read_() must be called in the completion callback.      @param buf The buffer to read onto     @param n The number of bytes to try to read.     @param ol Overlapped object with associated completion callback.     @return 0 on success, -1 on error.  */
name|int
name|evbuffer_launch_read_
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|buf
parameter_list|,
name|size_t
name|n
parameter_list|,
name|struct
name|event_overlapped
modifier|*
name|ol
parameter_list|)
function_decl|;
comment|/** Start writing data from the start of an evbuffer.      An evbuffer can only have one write pending at a time.  While the write is     in progress, no other data may be removed from the front of the buffer.     The buffer must be created with event_overlapped_init_().     evbuffer_commit_write_() must be called in the completion callback.      @param buf The buffer to read onto     @param n The number of bytes to try to read.     @param ol Overlapped object with associated completion callback.     @return 0 on success, -1 on error.  */
name|int
name|evbuffer_launch_write_
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|buf
parameter_list|,
name|ev_ssize_t
name|n
parameter_list|,
name|struct
name|event_overlapped
modifier|*
name|ol
parameter_list|)
function_decl|;
comment|/** XXX document */
name|void
name|evbuffer_commit_read_
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|ev_ssize_t
parameter_list|)
function_decl|;
name|void
name|evbuffer_commit_write_
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|ev_ssize_t
parameter_list|)
function_decl|;
comment|/** Create an IOCP, and launch its worker threads.  Internal use only.      This interface is unstable, and will change.  */
name|struct
name|event_iocp_port
modifier|*
name|event_iocp_port_launch_
parameter_list|(
name|int
name|n_cpus
parameter_list|)
function_decl|;
comment|/** Associate a file descriptor with an iocp, such that overlapped IO on the     fd will happen on one of the iocp's worker threads. */
name|int
name|event_iocp_port_associate_
parameter_list|(
name|struct
name|event_iocp_port
modifier|*
name|port
parameter_list|,
name|evutil_socket_t
name|fd
parameter_list|,
name|ev_uintptr_t
name|key
parameter_list|)
function_decl|;
comment|/** Tell all threads serving an iocp to stop.  Wait for up to waitMsec for all     the threads to finish whatever they're doing.  If waitMsec is -1, wait     as long as required.  If all the threads are done, free the port and return     0. Otherwise, return -1.  If you get a -1 return value, it is safe to call     this function again. */
name|int
name|event_iocp_shutdown_
parameter_list|(
name|struct
name|event_iocp_port
modifier|*
name|port
parameter_list|,
name|long
name|waitMsec
parameter_list|)
function_decl|;
comment|/* FIXME document. */
name|int
name|event_iocp_activate_overlapped_
parameter_list|(
name|struct
name|event_iocp_port
modifier|*
name|port
parameter_list|,
name|struct
name|event_overlapped
modifier|*
name|o
parameter_list|,
name|ev_uintptr_t
name|key
parameter_list|,
name|ev_uint32_t
name|n_bytes
parameter_list|)
function_decl|;
struct_decl|struct
name|event_base
struct_decl|;
comment|/* FIXME document. */
name|struct
name|event_iocp_port
modifier|*
name|event_base_get_iocp_
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/* FIXME document. */
name|int
name|event_base_start_iocp_
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|,
name|int
name|n_cpus
parameter_list|)
function_decl|;
name|void
name|event_base_stop_iocp_
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|)
function_decl|;
comment|/* FIXME document. */
name|struct
name|bufferevent
modifier|*
name|bufferevent_async_new_
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|,
name|evutil_socket_t
name|fd
parameter_list|,
name|int
name|options
parameter_list|)
function_decl|;
comment|/* FIXME document. */
name|void
name|bufferevent_async_set_connected_
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bev
parameter_list|)
function_decl|;
name|int
name|bufferevent_async_can_connect_
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bev
parameter_list|)
function_decl|;
name|int
name|bufferevent_async_connect_
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bev
parameter_list|,
name|evutil_socket_t
name|fd
parameter_list|,
specifier|const
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|int
name|socklen
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

