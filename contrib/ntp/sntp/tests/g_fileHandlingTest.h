begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|FILE_HANDLING_TEST_H
end_ifndef

begin_define
define|#
directive|define
name|FILE_HANDLING_TEST_H
end_define

begin_include
include|#
directive|include
file|"g_sntptest.h"
end_include

begin_include
include|#
directive|include
file|<fstream>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_expr_stmt
name|using
name|std
operator|::
name|ifstream
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|std
operator|::
name|string
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|std
operator|::
name|ios
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|class
name|fileHandlingTest
range|:
name|public
name|sntptest
block|{
name|protected
operator|:
expr|enum
name|DirectoryType
block|{
name|INPUT_DIR
operator|=
literal|0
block|,
name|OUTPUT_DIR
operator|=
literal|1
block|}
block|;
name|std
operator|::
name|string
name|CreatePath
argument_list|(
argument|const char* filename
argument_list|,
argument|DirectoryType argument
argument_list|)
block|{
name|std
operator|::
name|string
name|path
block|;
if|if
condition|(
name|m_params
operator|.
name|size
argument_list|()
operator|>=
name|argument
operator|+
literal|1
condition|)
block|{
name|path
operator|=
name|m_params
index|[
name|argument
index|]
expr_stmt|;
block|}
if|if
condition|(
name|path
index|[
name|path
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|!=
name|DIR_SEP
operator|&&
operator|!
name|path
operator|.
name|empty
argument_list|()
condition|)
block|{
name|path
operator|.
name|append
argument_list|(
literal|1
argument_list|,
name|DIR_SEP
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|append
argument_list|(
name|filename
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
end_decl_stmt

begin_function
name|int
name|GetFileSize
parameter_list|(
name|ifstream
modifier|&
name|file
parameter_list|)
block|{
name|int
name|initial
init|=
name|file
operator|.
name|tellg
argument_list|()
decl_stmt|;
name|file
operator|.
name|seekg
argument_list|(
literal|0
argument_list|,
name|ios
operator|::
name|end
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|file
operator|.
name|tellg
argument_list|()
decl_stmt|;
name|file
operator|.
name|seekg
argument_list|(
name|initial
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
end_function

begin_function
name|void
name|CompareFileContent
parameter_list|(
name|ifstream
modifier|&
name|expected
parameter_list|,
name|ifstream
modifier|&
name|actual
parameter_list|)
block|{
name|int
name|currentLine
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|actual
operator|.
name|good
argument_list|()
operator|&&
name|expected
operator|.
name|good
argument_list|()
condition|)
block|{
name|string
name|actualLine
decl_stmt|,
name|expectedLine
decl_stmt|;
name|getline
argument_list|(
name|actual
argument_list|,
name|actualLine
argument_list|)
expr_stmt|;
name|getline
argument_list|(
name|expected
argument_list|,
name|expectedLine
argument_list|)
expr_stmt|;
name|EXPECT_EQ
argument_list|(
name|expectedLine
argument_list|,
name|actualLine
argument_list|)
operator|<<
literal|"Comparision failed on line "
operator|<<
name|currentLine
expr_stmt|;
name|currentLine
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_decl_stmt
name|void
name|ClearFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|filename
argument_list|)
block|{
name|std
operator|::
name|ofstream
name|clear
argument_list|(
name|filename
operator|.
name|c_str
argument_list|()
argument_list|,
name|ios
operator|::
name|trunc
argument_list|)
expr_stmt|;
name|ASSERT_TRUE
argument_list|(
name|clear
operator|.
name|good
argument_list|()
argument_list|)
expr_stmt|;
name|clear
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|// FILE_HANDLING_TEST_H
end_comment

end_unit

