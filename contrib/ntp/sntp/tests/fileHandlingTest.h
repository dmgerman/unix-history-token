begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|FILE_HANDLING_TEST_H
end_ifndef

begin_define
define|#
directive|define
name|FILE_HANDLING_TEST_H
end_define

begin_include
include|#
directive|include
file|"stdlib.h"
end_include

begin_include
include|#
directive|include
file|"sntptest.h"
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_enum
enum|enum
name|DirectoryType
block|{
name|INPUT_DIR
init|=
literal|0
block|,
name|OUTPUT_DIR
init|=
literal|1
block|}
enum|;
end_enum

begin_function
specifier|const
name|char
modifier|*
name|CreatePath
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|enum
name|DirectoryType
name|argument
parameter_list|)
block|{
name|char
modifier|*
name|path
init|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|*
literal|256
argument_list|)
decl_stmt|;
comment|/* 	if (m_params.size()>= argument + 1) { 		path = m_params[argument]; 	}  	if (path[path.size()-1] != DIR_SEP&& !path.empty()) { 		path.append(1, DIR_SEP); 	} 	*/
comment|//strcpy(path,filename);
comment|//path.append(filename);
comment|//return path;
name|char
name|cwd
index|[
literal|1024
index|]
decl_stmt|;
if|if
condition|(
name|getcwd
argument_list|(
name|cwd
argument_list|,
sizeof|sizeof
argument_list|(
name|cwd
argument_list|)
argument_list|)
operator|!=
name|NULL
condition|)
name|printf
argument_list|(
literal|"Current working dir: %s\n"
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"builddir is<.>\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"abs_srcdir is</deacon/backroom/snaps/ntp-stable/sntp/tests>\n"
argument_list|)
expr_stmt|;
name|strcpy
argument_list|(
name|path
argument_list|,
literal|"/deacon/backroom/snaps/ntp-stable/sntp/tests/data/"
argument_list|)
expr_stmt|;
comment|//strcpy(path,"");
name|strcat
argument_list|(
name|path
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"PATH IS : %s\n"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
end_function

begin_function
name|int
name|GetFileSize
parameter_list|(
name|FILE
modifier|*
name|file
parameter_list|)
block|{
name|fseek
argument_list|(
name|file
argument_list|,
literal|0L
argument_list|,
name|SEEK_END
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|ftell
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fseek
argument_list|(
name|file
argument_list|,
literal|0L
argument_list|,
name|SEEK_SET
argument_list|)
expr_stmt|;
comment|//int initial = file.tellg();
comment|//file.seekg(0, ios::end);
comment|//int length = file.tellg();
comment|//file.seekg(initial);
return|return
name|length
return|;
block|}
end_function

begin_function
name|bool
name|CompareFileContent
parameter_list|(
name|FILE
modifier|*
name|expected
parameter_list|,
name|FILE
modifier|*
name|actual
parameter_list|)
block|{
name|int
name|currentLine
init|=
literal|1
decl_stmt|;
name|char
name|actualLine
index|[
literal|1024
index|]
decl_stmt|;
name|char
name|expectedLine
index|[
literal|1024
index|]
decl_stmt|;
name|size_t
name|lenAct
init|=
sizeof|sizeof
name|actualLine
decl_stmt|;
name|size_t
name|lenExp
init|=
sizeof|sizeof
name|expectedLine
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|fgets
argument_list|(
name|actualLine
argument_list|,
name|lenAct
argument_list|,
name|actual
argument_list|)
operator|)
operator|!=
name|NULL
operator|)
operator|&&
operator|(
operator|(
name|fgets
argument_list|(
name|expectedLine
argument_list|,
name|lenExp
argument_list|,
name|expected
argument_list|)
operator|)
operator|!=
name|NULL
operator|)
condition|)
block|{
comment|//printf("%s",actualLine);
comment|//printf("%s",expectedLine);
if|if
condition|(
name|strcmp
argument_list|(
name|actualLine
argument_list|,
name|expectedLine
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|printf
argument_list|(
literal|"Comparision failed on line %d"
argument_list|,
name|currentLine
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
comment|//I removed this and modified the test kodFile.c, because there shouldn't be any ASSERTs in .h files!
comment|//TEST_ASSERT_EQUAL_STRING(actualLine,expectedLine);//EXPECT_EQ(expectedLine, actualLine)<< "Comparision failed on line "<< currentLine;
name|currentLine
operator|++
expr_stmt|;
block|}
return|return
name|TRUE
return|;
block|}
end_function

begin_function
name|void
name|ClearFile
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
block|{
name|FILE
modifier|*
name|clear
init|=
name|fopen
argument_list|(
name|filename
argument_list|,
literal|"w"
argument_list|)
decl_stmt|;
comment|//ios::trunc); //similar to truncate, I GUESS???!
comment|//I removed this because there shouldn't be any ASSERTs in .h files!
comment|//TEST_ASSERT_TRUE(clear != NULL);
name|fclose
argument_list|(
name|clear
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// FILE_HANDLING_TEST_H
end_comment

end_unit

