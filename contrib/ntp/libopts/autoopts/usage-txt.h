begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*   -*- buffer-read-only: t -*- vi: set ro:  *    *  DO NOT EDIT THIS FILE   (usage-txt.h)  *    *  It has been AutoGen-ed  Saturday May  5, 2007 at 12:02:33 PM PDT  *  From the definitions    usage-txt.def  *  and the template file   usage-txt.tpl  *  *  This file handles all the bookkeeping required for tracking all the little  *  tiny strings used by the AutoOpts library.  There are 113  *  of them.  This is not versioned because it is entirely internal to the  *  library and accessed by client code only in a very well-controlled way:  *  they may substitute translated strings using a procedure that steps through  *  all the string pointers.  *  *  AutoOpts is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public  *  License as published by the Free Software Foundation; either  *  version 2.1 of the License, or (at your option) any later version.  *    *  AutoOpts is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *  Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public  *  License along with AutoOpts.  If not, write to:  *  	The Free Software Foundation, Inc.,  *  	51 Franklin Street, Fifth Floor  *  	Boston, MA  02110-1301, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|AUTOOPTS_USAGE_TXT_H_GUARD
end_ifndef

begin_define
define|#
directive|define
name|AUTOOPTS_USAGE_TXT_H_GUARD
end_define

begin_undef
undef|#
directive|undef
name|cch_t
end_undef

begin_define
define|#
directive|define
name|cch_t
value|char const
end_define

begin_comment
comment|/*  *  One structure to hold all the pointers to all the stringlets.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|field_ct
decl_stmt|;
name|char
modifier|*
name|utpz_GnuBoolArg
decl_stmt|;
name|char
modifier|*
name|utpz_GnuKeyArg
decl_stmt|;
name|char
modifier|*
name|utpz_GnuKeyLArg
decl_stmt|;
name|char
modifier|*
name|utpz_GnuNumArg
decl_stmt|;
name|char
modifier|*
name|utpz_GnuStrArg
decl_stmt|;
name|cch_t
modifier|*
name|apz_str
index|[
literal|108
index|]
decl_stmt|;
block|}
name|usage_text_t
typedef|;
end_typedef

begin_comment
comment|/*  *  Declare the global structure with all the pointers to translated  *  strings.  This is then used by the usage generation procedure.  */
end_comment

begin_decl_stmt
specifier|extern
name|usage_text_t
name|option_usage_text
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|AUTOOPTS_INTERNAL
argument_list|)
end_if

begin_comment
comment|/* DEFINE ALL THE STRINGS = = = = = */
end_comment

begin_comment
comment|/*  *  Provide a mapping from a short name to fields in this structure.  */
end_comment

begin_define
define|#
directive|define
name|zAO_Bad
value|(option_usage_text.apz_str[  0])
end_define

begin_define
define|#
directive|define
name|zAO_Big
value|(option_usage_text.apz_str[  1])
end_define

begin_define
define|#
directive|define
name|zAO_Err
value|(option_usage_text.apz_str[  2])
end_define

begin_define
define|#
directive|define
name|zAO_Sml
value|(option_usage_text.apz_str[  3])
end_define

begin_define
define|#
directive|define
name|zAll
value|(option_usage_text.apz_str[  4])
end_define

begin_define
define|#
directive|define
name|zAlt
value|(option_usage_text.apz_str[  5])
end_define

begin_define
define|#
directive|define
name|zAmbigKey
value|(option_usage_text.apz_str[  6])
end_define

begin_define
define|#
directive|define
name|zAmbiguous
value|(option_usage_text.apz_str[  7])
end_define

begin_define
define|#
directive|define
name|zArgsMust
value|(option_usage_text.apz_str[  8])
end_define

begin_define
define|#
directive|define
name|zAtMost
value|(option_usage_text.apz_str[  9])
end_define

begin_define
define|#
directive|define
name|zAuto
value|(option_usage_text.apz_str[ 10])
end_define

begin_define
define|#
directive|define
name|zBadPipe
value|(option_usage_text.apz_str[ 11])
end_define

begin_define
define|#
directive|define
name|zBadVerArg
value|(option_usage_text.apz_str[ 12])
end_define

begin_define
define|#
directive|define
name|zCantFmt
value|(option_usage_text.apz_str[ 13])
end_define

begin_define
define|#
directive|define
name|zCantSave
value|(option_usage_text.apz_str[ 14])
end_define

begin_define
define|#
directive|define
name|zDefaultOpt
value|(option_usage_text.apz_str[ 15])
end_define

begin_define
define|#
directive|define
name|zDis
value|(option_usage_text.apz_str[ 16])
end_define

begin_define
define|#
directive|define
name|zEnab
value|(option_usage_text.apz_str[ 17])
end_define

begin_define
define|#
directive|define
name|zEquiv
value|(option_usage_text.apz_str[ 18])
end_define

begin_define
define|#
directive|define
name|zErrOnly
value|(option_usage_text.apz_str[ 19])
end_define

begin_define
define|#
directive|define
name|zExamineFmt
value|(option_usage_text.apz_str[ 20])
end_define

begin_define
define|#
directive|define
name|zFiveSpaces
value|(option_usage_text.apz_str[ 21])
end_define

begin_define
define|#
directive|define
name|zFlagOkay
value|(option_usage_text.apz_str[ 22])
end_define

begin_define
define|#
directive|define
name|zFmtFmt
value|(option_usage_text.apz_str[ 23])
end_define

begin_define
define|#
directive|define
name|zForkFail
value|(option_usage_text.apz_str[ 24])
end_define

begin_define
define|#
directive|define
name|zFSErrOptLoad
value|(option_usage_text.apz_str[ 25])
end_define

begin_define
define|#
directive|define
name|zFSErrReadFile
value|(option_usage_text.apz_str[ 26])
end_define

begin_define
define|#
directive|define
name|zGenshell
value|(option_usage_text.apz_str[ 27])
end_define

begin_define
define|#
directive|define
name|zGnuBoolArg
value|(option_usage_text.utpz_GnuBoolArg)
end_define

begin_define
define|#
directive|define
name|zGnuBreak
value|(option_usage_text.apz_str[ 28])
end_define

begin_define
define|#
directive|define
name|zGnuKeyArg
value|(option_usage_text.utpz_GnuKeyArg)
end_define

begin_define
define|#
directive|define
name|zGnuKeyLArg
value|(option_usage_text.utpz_GnuKeyLArg)
end_define

begin_define
define|#
directive|define
name|zGnuNestArg
value|(option_usage_text.apz_str[ 29])
end_define

begin_define
define|#
directive|define
name|zGnuNumArg
value|(option_usage_text.utpz_GnuNumArg)
end_define

begin_define
define|#
directive|define
name|zGnuOptArg
value|(option_usage_text.apz_str[ 30])
end_define

begin_define
define|#
directive|define
name|zGnuOptFmt
value|(option_usage_text.apz_str[ 31])
end_define

begin_define
define|#
directive|define
name|zGnuStrArg
value|(option_usage_text.utpz_GnuStrArg)
end_define

begin_define
define|#
directive|define
name|zIllOptChr
value|(option_usage_text.apz_str[ 32])
end_define

begin_define
define|#
directive|define
name|zIllOptStr
value|(option_usage_text.apz_str[ 33])
end_define

begin_define
define|#
directive|define
name|zIllegal
value|(option_usage_text.apz_str[ 34])
end_define

begin_define
define|#
directive|define
name|zInvalOptDesc
value|(option_usage_text.apz_str[ 35])
end_define

begin_define
define|#
directive|define
name|zKeyWords
value|(option_usage_text.apz_str[ 36])
end_define

begin_define
define|#
directive|define
name|zLoadCooked
value|(option_usage_text.apz_str[ 37])
end_define

begin_define
define|#
directive|define
name|zLoadKeep
value|(option_usage_text.apz_str[ 38])
end_define

begin_define
define|#
directive|define
name|zLoadType
value|(option_usage_text.apz_str[ 39])
end_define

begin_define
define|#
directive|define
name|zLoadUncooked
value|(option_usage_text.apz_str[ 40])
end_define

begin_define
define|#
directive|define
name|zLtypeInteger
value|(option_usage_text.apz_str[ 41])
end_define

begin_define
define|#
directive|define
name|zLtypeNest
value|(option_usage_text.apz_str[ 42])
end_define

begin_define
define|#
directive|define
name|zLtypeString
value|(option_usage_text.apz_str[ 43])
end_define

begin_define
define|#
directive|define
name|zLtypeBool
value|(option_usage_text.apz_str[ 44])
end_define

begin_define
define|#
directive|define
name|zLtypeKeyword
value|(option_usage_text.apz_str[ 45])
end_define

begin_define
define|#
directive|define
name|zLtypeSetMembership
value|(option_usage_text.apz_str[ 46])
end_define

begin_define
define|#
directive|define
name|zMembers
value|(option_usage_text.apz_str[ 47])
end_define

begin_define
define|#
directive|define
name|zMisArg
value|(option_usage_text.apz_str[ 48])
end_define

begin_define
define|#
directive|define
name|zMultiEquiv
value|(option_usage_text.apz_str[ 49])
end_define

begin_define
define|#
directive|define
name|zMust
value|(option_usage_text.apz_str[ 50])
end_define

begin_define
define|#
directive|define
name|zNeedOne
value|(option_usage_text.apz_str[ 51])
end_define

begin_define
define|#
directive|define
name|zNoArg
value|(option_usage_text.apz_str[ 52])
end_define

begin_define
define|#
directive|define
name|zNoArgs
value|(option_usage_text.apz_str[ 53])
end_define

begin_define
define|#
directive|define
name|zNoCreat
value|(option_usage_text.apz_str[ 54])
end_define

begin_define
define|#
directive|define
name|zNoFlags
value|(option_usage_text.apz_str[ 55])
end_define

begin_define
define|#
directive|define
name|zNoKey
value|(option_usage_text.apz_str[ 56])
end_define

begin_define
define|#
directive|define
name|zNoLim
value|(option_usage_text.apz_str[ 57])
end_define

begin_define
define|#
directive|define
name|zNoPreset
value|(option_usage_text.apz_str[ 58])
end_define

begin_define
define|#
directive|define
name|zNoRq_NoShrtTtl
value|(option_usage_text.apz_str[ 59])
end_define

begin_define
define|#
directive|define
name|zNoRq_ShrtTtl
value|(option_usage_text.apz_str[ 60])
end_define

begin_define
define|#
directive|define
name|zNoStat
value|(option_usage_text.apz_str[ 61])
end_define

begin_define
define|#
directive|define
name|zNoState
value|(option_usage_text.apz_str[ 62])
end_define

begin_define
define|#
directive|define
name|zNone
value|(option_usage_text.apz_str[ 63])
end_define

begin_define
define|#
directive|define
name|zNotDef
value|(option_usage_text.apz_str[ 64])
end_define

begin_define
define|#
directive|define
name|zNotEnough
value|(option_usage_text.apz_str[ 65])
end_define

begin_define
define|#
directive|define
name|zNotFile
value|(option_usage_text.apz_str[ 66])
end_define

begin_define
define|#
directive|define
name|zNotNumber
value|(option_usage_text.apz_str[ 67])
end_define

begin_define
define|#
directive|define
name|zNrmOptFmt
value|(option_usage_text.apz_str[ 68])
end_define

begin_define
define|#
directive|define
name|zNumberOpt
value|(option_usage_text.apz_str[ 69])
end_define

begin_define
define|#
directive|define
name|zOneSpace
value|(option_usage_text.apz_str[ 70])
end_define

begin_define
define|#
directive|define
name|zOnlyOne
value|(option_usage_text.apz_str[ 71])
end_define

begin_define
define|#
directive|define
name|zOptsOnly
value|(option_usage_text.apz_str[ 72])
end_define

begin_define
define|#
directive|define
name|zPathFmt
value|(option_usage_text.apz_str[ 73])
end_define

begin_define
define|#
directive|define
name|zPlsSendBugs
value|(option_usage_text.apz_str[ 74])
end_define

begin_define
define|#
directive|define
name|zPreset
value|(option_usage_text.apz_str[ 75])
end_define

begin_define
define|#
directive|define
name|zPresetFile
value|(option_usage_text.apz_str[ 76])
end_define

begin_define
define|#
directive|define
name|zPresetIntro
value|(option_usage_text.apz_str[ 77])
end_define

begin_define
define|#
directive|define
name|zProg
value|(option_usage_text.apz_str[ 78])
end_define

begin_define
define|#
directive|define
name|zProhib
value|(option_usage_text.apz_str[ 79])
end_define

begin_define
define|#
directive|define
name|zReorder
value|(option_usage_text.apz_str[ 80])
end_define

begin_define
define|#
directive|define
name|zReqFmt
value|(option_usage_text.apz_str[ 81])
end_define

begin_define
define|#
directive|define
name|zReqOptFmt
value|(option_usage_text.apz_str[ 82])
end_define

begin_define
define|#
directive|define
name|zReqThese
value|(option_usage_text.apz_str[ 83])
end_define

begin_define
define|#
directive|define
name|zReq_NoShrtTtl
value|(option_usage_text.apz_str[ 84])
end_define

begin_define
define|#
directive|define
name|zReq_ShrtTtl
value|(option_usage_text.apz_str[ 85])
end_define

begin_define
define|#
directive|define
name|zSepChars
value|(option_usage_text.apz_str[ 86])
end_define

begin_define
define|#
directive|define
name|zSetMembers
value|(option_usage_text.apz_str[ 87])
end_define

begin_define
define|#
directive|define
name|zSetMemberSettings
value|(option_usage_text.apz_str[ 88])
end_define

begin_define
define|#
directive|define
name|zShrtGnuOptFmt
value|(option_usage_text.apz_str[ 89])
end_define

begin_define
define|#
directive|define
name|zSixSpaces
value|(option_usage_text.apz_str[ 90])
end_define

begin_define
define|#
directive|define
name|zStdBoolArg
value|(option_usage_text.apz_str[ 91])
end_define

begin_define
define|#
directive|define
name|zStdBreak
value|(option_usage_text.apz_str[ 92])
end_define

begin_define
define|#
directive|define
name|zStdKeyArg
value|(option_usage_text.apz_str[ 93])
end_define

begin_define
define|#
directive|define
name|zStdKeyLArg
value|(option_usage_text.apz_str[ 94])
end_define

begin_define
define|#
directive|define
name|zStdNestArg
value|(option_usage_text.apz_str[ 95])
end_define

begin_define
define|#
directive|define
name|zStdNoArg
value|(option_usage_text.apz_str[ 96])
end_define

begin_define
define|#
directive|define
name|zStdNumArg
value|(option_usage_text.apz_str[ 97])
end_define

begin_define
define|#
directive|define
name|zStdOptArg
value|(option_usage_text.apz_str[ 98])
end_define

begin_define
define|#
directive|define
name|zStdReqArg
value|(option_usage_text.apz_str[ 99])
end_define

begin_define
define|#
directive|define
name|zStdStrArg
value|(option_usage_text.apz_str[100])
end_define

begin_define
define|#
directive|define
name|zTabHyp
value|(option_usage_text.apz_str[101])
end_define

begin_define
define|#
directive|define
name|zTabHypAnd
value|(option_usage_text.apz_str[102])
end_define

begin_define
define|#
directive|define
name|zTabout
value|(option_usage_text.apz_str[103])
end_define

begin_define
define|#
directive|define
name|zThreeSpaces
value|(option_usage_text.apz_str[104])
end_define

begin_define
define|#
directive|define
name|zTwoSpaces
value|(option_usage_text.apz_str[105])
end_define

begin_define
define|#
directive|define
name|zUpTo
value|(option_usage_text.apz_str[106])
end_define

begin_define
define|#
directive|define
name|zValidKeys
value|(option_usage_text.apz_str[107])
end_define

begin_comment
comment|/*    *  First, set up the strings.  Some of these are writable.  These are all in    *  English.  This gets compiled into libopts and is distributed here so that    *  xgettext (or equivalents) can extract these strings for translation.    */
end_comment

begin_decl_stmt
specifier|static
name|char
name|eng_zGnuBoolArg
index|[]
init|=
literal|"=T/F"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char
name|eng_zGnuKeyArg
index|[]
init|=
literal|"=KWd"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char
name|eng_zGnuKeyLArg
index|[]
init|=
literal|"=Mbr"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char
name|eng_zGnuNumArg
index|[]
init|=
literal|"=num"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char
name|eng_zGnuStrArg
index|[]
init|=
literal|"=str"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char
specifier|const
name|usage_txt
index|[
literal|3208
index|]
init|=
literal|"AutoOpts function called without option descriptor\n\0"
literal|"\tThis exceeds the compiled library version:  \0"
literal|"Automated Options Processing Error!\n"
literal|"\t%s called AutoOpts function with structure version %d:%d:%d.\n\0"
literal|"\tThis is less than the minimum library version:  \0"
literal|"all\0"
literal|"\t\t\t\t- an alternate for %s\n\0"
literal|"%s error:  the keyword `%s' is ambiguous for %s\n\0"
literal|"ambiguous\0"
literal|"%s: Command line arguments required\n\0"
literal|"%d %s%s options allowed\n\0"
literal|"version and help options:\0"
literal|"Error %d (%s) from the pipe(2) syscall\n\0"
literal|"ERROR: version option argument '%c' invalid.  Use:\n"
literal|"\t'v' - version only\n"
literal|"\t'c' - version and copyright\n"
literal|"\t'n' - version and copyright notice\n\0"
literal|"ERROR:  %s option conflicts with the %s option\n\0"
literal|"%s(optionSaveState): error: cannot allocate %d bytes\n\0"
literal|"\t\t\t\t- default option for unnamed options\n\0"
literal|"\t\t\t\t- disabled as --%s\n\0"
literal|"\t\t\t\t- enabled by default\n\0"
literal|"-equivalence\0"
literal|"ERROR:  only \0"
literal|" - examining environment variables named %s_*\n\0"
literal|"     \0"
literal|"Options are specified by doubled hyphens and their name\n"
literal|"or by a single hyphen and the flag character.\n\0"
literal|"%%-%ds %%s\n\0"
literal|"fs error %d (%s) on fork - cannot obtain %s usage\n\0"
literal|"File error %d (%s) opening %s for loading options\n\0"
literal|"fs error %d (%s) reading file %s\n\0"
literal|"\n"
literal|"= = = = = = = =\n\n"
literal|"This incarnation of genshell will produce\n"
literal|"a shell script to parse the options for %s:\n\n\0"
literal|"\n"
literal|"%s\n\n\0"
literal|"=Cplx\0"
literal|"[=arg]\0"
literal|"--%2$s%1$s\0"
literal|"%s: illegal option -- %c\n\0"
literal|"%s: %s option -- %s\n\0"
literal|"illegal\0"
literal|"AutoOpts ERROR:  invalid option descriptor for %s\n\0"
literal|"words=\0"
literal|"cooked\0"
literal|"keep\0"
literal|"type=\0"
literal|"uncooked\0"
literal|"integer\0"
literal|"nested\0"
literal|"string\0"
literal|"bool\0"
literal|"keyword\0"
literal|"set\0"
literal|"\t\t\t\t- is a set membership option\n\0"
literal|"%s: option `%s' requires an argument\n\0"
literal|"Equivalenced option '%s' was equivalenced to both\n"
literal|"\t'%s' and '%s'\0"
literal|"\t\t\t\t- must appear between %d and %d times\n\0"
literal|"ERROR:  The %s option is required\n\0"
literal|"%s: option `%s' cannot have an argument\n\0"
literal|"%s: Command line arguments not allowed\n\0"
literal|"error %d (%s) creating %s\n\0"
literal|"Options are specified by single or double hyphens and their name.\n\0"
literal|"%s error:  `%s' does not match any %s keywords\n\0"
literal|"\t\t\t\t- may appear multiple times\n\0"
literal|"\t\t\t\t- may not be preset\n\0"
literal|"   Arg Option-Name    Description\n\0"
literal|"  Flg Arg Option-Name    Description\n\0"
literal|"error %d (%s) stat-ing %s\n\0"
literal|"%s(optionRestore): error: no saved option state\n\0"
literal|"none\0"
literal|"'%s' not defined\n\0"
literal|"ERROR:  The %s option must appear %d times\n\0"
literal|"error:  cannot load options from non-regular file %s\n\0"
literal|"%s error:  `%s' is not a recognizable number\n\0"
literal|" %3s %s\0"
literal|"The '-#<number>' option may omit the hash char\n\0"
literal|" \0"
literal|"one %s%s option allowed\n\0"
literal|"All arguments are named options.\n\0"
literal|" - reading file %s\0"
literal|"\n"
literal|"please send bug reports to:  %s\n\0"
literal|"\t\t\t\t- may NOT appear - preset only\n\0"
literal|"#  preset/initialization file\n"
literal|"#  %s#\n\0"
literal|"\n"
literal|"The following option preset mechanisms are supported:\n\0"
literal|"program\0"
literal|"prohibits these options:\n\0"
literal|"Operands and options may be intermixed.  They will be reordered.\n\0"
literal|"ERROR:  %s option requires the %s option\n\0"
literal|" %3s %-14s %s\0"
literal|"requires these options:\n\0"
literal|"   Arg Option-Name   Req?  Description\n\0"
literal|"  Flg Arg Option-Name   Req?  Description\n\0"
literal|"-_^\0"
literal|"members=\0"
literal|"or you may use a numeric representation.  Preceding these with a '!' will\n"
literal|"clear the bits, specifying 'none' will clear all bits, and 'all' will set them\n"
literal|"all.  Multiple entries may be passed as an option argument list.\n\0"
literal|"%s\0"
literal|"      \0"
literal|"T/F\0"
literal|"\n"
literal|"%s\n\n"
literal|"%s\0"
literal|"KWd\0"
literal|"Mbr\0"
literal|"Cpx\0"
literal|"no \0"
literal|"Num\0"
literal|"opt\0"
literal|"YES\0"
literal|"Str\0"
literal|"\t\t\t\t- \0"
literal|"\t\t\t\t-- and \0"
literal|"\t\t\t\t%s\n\0"
literal|"   \0"
literal|"  \0"
literal|"\t\t\t\t- may appear up to %d times\n\0"
literal|"The valid \"%s\" option keywords are:\n\0"
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*    *  Now, define (and initialize) the structure that contains    *  the pointers to all these strings.    *  Aren't you glad you don't maintain this by hand?    */
end_comment

begin_decl_stmt
name|usage_text_t
name|option_usage_text
init|=
block|{
literal|113
block|,
name|eng_zGnuBoolArg
block|,
name|eng_zGnuKeyArg
block|,
name|eng_zGnuKeyLArg
block|,
name|eng_zGnuNumArg
block|,
name|eng_zGnuStrArg
block|,
block|{
name|usage_txt
operator|+
literal|0
block|,
name|usage_txt
operator|+
literal|52
block|,
name|usage_txt
operator|+
literal|98
block|,
name|usage_txt
operator|+
literal|197
block|,
name|usage_txt
operator|+
literal|247
block|,
name|usage_txt
operator|+
literal|251
block|,
name|usage_txt
operator|+
literal|278
block|,
name|usage_txt
operator|+
literal|327
block|,
name|usage_txt
operator|+
literal|337
block|,
name|usage_txt
operator|+
literal|374
block|,
name|usage_txt
operator|+
literal|399
block|,
name|usage_txt
operator|+
literal|425
block|,
name|usage_txt
operator|+
literal|465
block|,
name|usage_txt
operator|+
literal|602
block|,
name|usage_txt
operator|+
literal|650
block|,
name|usage_txt
operator|+
literal|704
block|,
name|usage_txt
operator|+
literal|746
block|,
name|usage_txt
operator|+
literal|770
block|,
name|usage_txt
operator|+
literal|796
block|,
name|usage_txt
operator|+
literal|809
block|,
name|usage_txt
operator|+
literal|823
block|,
name|usage_txt
operator|+
literal|870
block|,
name|usage_txt
operator|+
literal|876
block|,
name|usage_txt
operator|+
literal|979
block|,
name|usage_txt
operator|+
literal|991
block|,
name|usage_txt
operator|+
literal|1042
block|,
name|usage_txt
operator|+
literal|1093
block|,
name|usage_txt
operator|+
literal|1127
block|,
name|usage_txt
operator|+
literal|1233
block|,
name|usage_txt
operator|+
literal|1239
block|,
name|usage_txt
operator|+
literal|1245
block|,
name|usage_txt
operator|+
literal|1252
block|,
name|usage_txt
operator|+
literal|1263
block|,
name|usage_txt
operator|+
literal|1289
block|,
name|usage_txt
operator|+
literal|1310
block|,
name|usage_txt
operator|+
literal|1318
block|,
name|usage_txt
operator|+
literal|1369
block|,
name|usage_txt
operator|+
literal|1376
block|,
name|usage_txt
operator|+
literal|1383
block|,
name|usage_txt
operator|+
literal|1388
block|,
name|usage_txt
operator|+
literal|1394
block|,
name|usage_txt
operator|+
literal|1403
block|,
name|usage_txt
operator|+
literal|1411
block|,
name|usage_txt
operator|+
literal|1418
block|,
name|usage_txt
operator|+
literal|1425
block|,
name|usage_txt
operator|+
literal|1430
block|,
name|usage_txt
operator|+
literal|1438
block|,
name|usage_txt
operator|+
literal|1442
block|,
name|usage_txt
operator|+
literal|1476
block|,
name|usage_txt
operator|+
literal|1514
block|,
name|usage_txt
operator|+
literal|1579
block|,
name|usage_txt
operator|+
literal|1622
block|,
name|usage_txt
operator|+
literal|1657
block|,
name|usage_txt
operator|+
literal|1698
block|,
name|usage_txt
operator|+
literal|1738
block|,
name|usage_txt
operator|+
literal|1765
block|,
name|usage_txt
operator|+
literal|1832
block|,
name|usage_txt
operator|+
literal|1880
block|,
name|usage_txt
operator|+
literal|1913
block|,
name|usage_txt
operator|+
literal|1938
block|,
name|usage_txt
operator|+
literal|1973
block|,
name|usage_txt
operator|+
literal|2011
block|,
name|usage_txt
operator|+
literal|2038
block|,
name|usage_txt
operator|+
literal|2087
block|,
name|usage_txt
operator|+
literal|2092
block|,
name|usage_txt
operator|+
literal|2110
block|,
name|usage_txt
operator|+
literal|2154
block|,
name|usage_txt
operator|+
literal|2208
block|,
name|usage_txt
operator|+
literal|2254
block|,
name|usage_txt
operator|+
literal|2262
block|,
name|usage_txt
operator|+
literal|2310
block|,
name|usage_txt
operator|+
literal|2312
block|,
name|usage_txt
operator|+
literal|2337
block|,
name|usage_txt
operator|+
literal|2371
block|,
name|usage_txt
operator|+
literal|2390
block|,
name|usage_txt
operator|+
literal|2424
block|,
name|usage_txt
operator|+
literal|2460
block|,
name|usage_txt
operator|+
literal|2498
block|,
name|usage_txt
operator|+
literal|2554
block|,
name|usage_txt
operator|+
literal|2562
block|,
name|usage_txt
operator|+
literal|2588
block|,
name|usage_txt
operator|+
literal|2654
block|,
name|usage_txt
operator|+
literal|2696
block|,
name|usage_txt
operator|+
literal|2710
block|,
name|usage_txt
operator|+
literal|2735
block|,
name|usage_txt
operator|+
literal|2775
block|,
name|usage_txt
operator|+
literal|2818
block|,
name|usage_txt
operator|+
literal|2822
block|,
name|usage_txt
operator|+
literal|2831
block|,
name|usage_txt
operator|+
literal|3050
block|,
name|usage_txt
operator|+
literal|3053
block|,
name|usage_txt
operator|+
literal|3060
block|,
name|usage_txt
operator|+
literal|3064
block|,
name|usage_txt
operator|+
literal|3072
block|,
name|usage_txt
operator|+
literal|3076
block|,
name|usage_txt
operator|+
literal|3080
block|,
name|usage_txt
operator|+
literal|3084
block|,
name|usage_txt
operator|+
literal|3088
block|,
name|usage_txt
operator|+
literal|3092
block|,
name|usage_txt
operator|+
literal|3096
block|,
name|usage_txt
operator|+
literal|3100
block|,
name|usage_txt
operator|+
literal|3104
block|,
name|usage_txt
operator|+
literal|3111
block|,
name|usage_txt
operator|+
literal|3123
block|,
name|usage_txt
operator|+
literal|3131
block|,
name|usage_txt
operator|+
literal|3135
block|,
name|usage_txt
operator|+
literal|3138
block|,
name|usage_txt
operator|+
literal|3171
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DO_TRANSLATIONS */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* AUTOOPTS_USAGE_TXT_H_GUARD */
end_comment

end_unit

