begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009 Joerg  Sonnenberger  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD: head/lib/libarchive/archive_crc32.h 201102 2009-12-28 03:11:36Z kientzle $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBARCHIVE_BUILD
end_ifndef

begin_error
error|#
directive|error
error|This header is only to be used internally to libarchive.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * When zlib is unavailable, we should still be able to validate  * uncompressed zip archives.  That requires us to be able to compute  * the CRC32 check value.  This is a drop-in compatible replacement  * for crc32() from zlib.  It's slower than the zlib implementation,  * but still pretty fast: This runs about 300MB/s on my 3GHz P4  * compared to about 800MB/s for the zlib implementation.  */
end_comment

begin_function
specifier|static
name|unsigned
name|long
name|crc32
parameter_list|(
name|unsigned
name|long
name|crc
parameter_list|,
specifier|const
name|void
modifier|*
name|_p
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|unsigned
name|long
name|crc2
decl_stmt|,
name|b
decl_stmt|,
name|i
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|p
init|=
name|_p
decl_stmt|;
specifier|static
specifier|volatile
name|int
name|crc_tbl_inited
init|=
literal|0
decl_stmt|;
specifier|static
name|unsigned
name|long
name|crc_tbl
index|[
literal|256
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|crc_tbl_inited
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
literal|256
condition|;
operator|++
name|b
control|)
block|{
name|crc2
operator|=
name|b
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|8
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|crc2
operator|&
literal|1
condition|)
name|crc2
operator|=
operator|(
name|crc2
operator|>>
literal|1
operator|)
operator|^
literal|0xedb88320UL
expr_stmt|;
else|else
name|crc2
operator|=
operator|(
name|crc2
operator|>>
literal|1
operator|)
expr_stmt|;
block|}
name|crc_tbl
index|[
name|b
index|]
operator|=
name|crc2
expr_stmt|;
block|}
name|crc_tbl_inited
operator|=
literal|1
expr_stmt|;
block|}
name|crc
operator|=
name|crc
operator|^
literal|0xffffffffUL
expr_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
name|crc
operator|=
name|crc_tbl
index|[
operator|(
name|crc
operator|^
operator|*
name|p
operator|++
operator|)
operator|&
literal|0xff
index|]
operator|^
operator|(
name|crc
operator|>>
literal|8
operator|)
expr_stmt|;
return|return
operator|(
name|crc
operator|^
literal|0xffffffffUL
operator|)
return|;
block|}
end_function

end_unit

