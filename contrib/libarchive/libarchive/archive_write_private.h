begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2007 Tim Kientzle  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBARCHIVE_BUILD
end_ifndef

begin_error
error|#
directive|error
error|This header is only to be used internally to libarchive.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|ARCHIVE_WRITE_PRIVATE_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|ARCHIVE_WRITE_PRIVATE_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|"archive.h"
end_include

begin_include
include|#
directive|include
file|"archive_string.h"
end_include

begin_include
include|#
directive|include
file|"archive_private.h"
end_include

begin_struct_decl
struct_decl|struct
name|archive_write
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|archive_write_filter
block|{
name|int64_t
name|bytes_written
decl_stmt|;
name|struct
name|archive
modifier|*
name|archive
decl_stmt|;
comment|/* Associated archive. */
name|struct
name|archive_write_filter
modifier|*
name|next_filter
decl_stmt|;
comment|/* Who I write to. */
name|int
function_decl|(
modifier|*
name|options
function_decl|)
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|write
function_decl|)
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|data
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|code
decl_stmt|;
name|int
name|bytes_per_block
decl_stmt|;
name|int
name|bytes_in_last_block
decl_stmt|;
block|}
struct|;
end_struct

begin_if
if|#
directive|if
name|ARCHIVE_VERSION
operator|<
literal|4000000
end_if

begin_function_decl
name|void
name|__archive_write_filters_free
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|struct
name|archive_write_filter
modifier|*
name|__archive_write_allocate_filter
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_write_output
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_write_nulls
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_write_filter
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_write_open_filter
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_write_close_filter
parameter_list|(
name|struct
name|archive_write_filter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|archive_write
block|{
name|struct
name|archive
name|archive
decl_stmt|;
comment|/* Dev/ino of the archive being written. */
name|int
name|skip_file_set
decl_stmt|;
name|int64_t
name|skip_file_dev
decl_stmt|;
name|int64_t
name|skip_file_ino
decl_stmt|;
comment|/* Utility:  Pointer to a block of nulls. */
specifier|const
name|unsigned
name|char
modifier|*
name|nulls
decl_stmt|;
name|size_t
name|null_length
decl_stmt|;
comment|/* Callbacks to open/read/write/close archive stream. */
name|archive_open_callback
modifier|*
name|client_opener
decl_stmt|;
name|archive_write_callback
modifier|*
name|client_writer
decl_stmt|;
name|archive_close_callback
modifier|*
name|client_closer
decl_stmt|;
name|void
modifier|*
name|client_data
decl_stmt|;
comment|/* 	 * Blocking information.  Note that bytes_in_last_block is 	 * misleadingly named; I should find a better name.  These 	 * control the final output from all compressors, including 	 * compression_none. 	 */
name|int
name|bytes_per_block
decl_stmt|;
name|int
name|bytes_in_last_block
decl_stmt|;
comment|/* 	 * First and last write filters in the pipeline. 	 */
name|struct
name|archive_write_filter
modifier|*
name|filter_first
decl_stmt|;
name|struct
name|archive_write_filter
modifier|*
name|filter_last
decl_stmt|;
comment|/* 	 * Pointers to format-specific functions for writing.  They're 	 * initialized by archive_write_set_format_XXX() calls. 	 */
name|void
modifier|*
name|format_data
decl_stmt|;
specifier|const
name|char
modifier|*
name|format_name
decl_stmt|;
name|int
function_decl|(
modifier|*
name|format_init
function_decl|)
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_options
function_decl|)
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_finish_entry
function_decl|)
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_write_header
function_decl|)
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|format_write_data
function_decl|)
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
name|buff
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_close
function_decl|)
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_free
function_decl|)
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Utility function to format a USTAR header into a buffer.  If  * "strict" is set, this tries to create the absolutely most portable  * version of a ustar header.  If "strict" is set to 0, then it will  * relax certain requirements.  *  * Generally, format-specific declarations don't belong in this  * header; this is a rare example of a function that is shared by  * two very similar formats (ustar and pax).  */
end_comment

begin_function_decl
name|int
name|__archive_write_format_header_ustar
parameter_list|(
name|struct
name|archive_write
modifier|*
parameter_list|,
name|char
name|buff
index|[
literal|512
index|]
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|tartype
parameter_list|,
name|int
name|strict
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

