begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011 Michihiro NAKAJIMA  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBARCHIVE_BUILD
end_ifndef

begin_error
error|#
directive|error
error|This header is only to be used internally to libarchive.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|ARCHIVE_ENTRY_LOCALE_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|ARCHIVE_ENTRY_LOCALE_H_INCLUDED
end_define

begin_struct_decl
struct_decl|struct
name|archive_entry
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|archive_string_conv
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * Utility functions to set and get entry attributes by translating  * character-set. These are designed for use in format readers and writers.  *  * The return code and interface of these are quite different from other  * functions for archive_entry defined in archive_entry.h.  * Common return code are:  *   Return 0 if the string conversion succeeded.  *   Return -1 if the string conversion failed.  */
end_comment

begin_define
define|#
directive|define
name|archive_entry_gname_l
value|_archive_entry_gname_l
end_define

begin_function_decl
name|int
name|_archive_entry_gname_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_hardlink_l
value|_archive_entry_hardlink_l
end_define

begin_function_decl
name|int
name|_archive_entry_hardlink_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_pathname_l
value|_archive_entry_pathname_l
end_define

begin_function_decl
name|int
name|_archive_entry_pathname_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_symlink_l
value|_archive_entry_symlink_l
end_define

begin_function_decl
name|int
name|_archive_entry_symlink_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_uname_l
value|_archive_entry_uname_l
end_define

begin_function_decl
name|int
name|_archive_entry_uname_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_acl_text_l
value|_archive_entry_acl_text_l
end_define

begin_decl_stmt
name|int
name|_archive_entry_acl_text_l
argument_list|(
expr|struct
name|archive_entry
operator|*
argument_list|,
name|int
argument_list|,
specifier|const
name|char
operator|*
operator|*
argument_list|,
name|size_t
operator|*
argument_list|,
expr|struct
name|archive_string_conv
operator|*
argument_list|)
name|__LA_DEPRECATED
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|archive_entry_acl_to_text_l
value|_archive_entry_acl_to_text_l
end_define

begin_function_decl
name|char
modifier|*
name|_archive_entry_acl_to_text_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|ssize_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_acl_from_text_l
value|_archive_entry_acl_from_text_l
end_define

begin_function_decl
name|int
name|_archive_entry_acl_from_text_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|,
name|int
name|type
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_copy_gname_l
value|_archive_entry_copy_gname_l
end_define

begin_function_decl
name|int
name|_archive_entry_copy_gname_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_copy_hardlink_l
value|_archive_entry_copy_hardlink_l
end_define

begin_function_decl
name|int
name|_archive_entry_copy_hardlink_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_copy_link_l
value|_archive_entry_copy_link_l
end_define

begin_function_decl
name|int
name|_archive_entry_copy_link_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_copy_pathname_l
value|_archive_entry_copy_pathname_l
end_define

begin_function_decl
name|int
name|_archive_entry_copy_pathname_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_copy_symlink_l
value|_archive_entry_copy_symlink_l
end_define

begin_function_decl
name|int
name|_archive_entry_copy_symlink_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|archive_entry_copy_uname_l
value|_archive_entry_copy_uname_l
end_define

begin_function_decl
name|int
name|_archive_entry_copy_uname_l
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|archive_string_conv
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ARCHIVE_ENTRY_LOCALE_H_INCLUDED */
end_comment

end_unit

