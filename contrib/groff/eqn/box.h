begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_struct_decl
struct_decl|struct
name|list_box
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|box
block|{
name|private
label|:
specifier|static
name|int
name|next_uid
decl_stmt|;
name|public
label|:
name|int
name|spacing_type
decl_stmt|;
specifier|const
name|int
name|uid
decl_stmt|;
name|box
argument_list|()
expr_stmt|;
name|virtual
name|void
name|debug_print
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
operator|~
name|box
argument_list|()
expr_stmt|;
name|void
name|top_level
parameter_list|()
function_decl|;
name|virtual
name|int
name|compute_metrics
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|virtual
name|void
name|compute_subscript_kern
parameter_list|()
function_decl|;
name|virtual
name|void
name|compute_skew
parameter_list|()
function_decl|;
name|virtual
name|void
name|output
parameter_list|()
function_decl|;
name|void
name|extra_space
parameter_list|()
function_decl|;
name|virtual
name|list_box
modifier|*
name|to_list_box
parameter_list|()
function_decl|;
name|virtual
name|int
name|is_simple
parameter_list|()
function_decl|;
name|virtual
name|int
name|is_char
parameter_list|()
function_decl|;
name|virtual
name|int
name|left_is_italic
parameter_list|()
function_decl|;
name|virtual
name|int
name|right_is_italic
parameter_list|()
function_decl|;
name|virtual
name|void
name|handle_char_type
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
enum|enum
block|{
name|FOUND_NOTHING
init|=
literal|0
block|,
name|FOUND_MARK
init|=
literal|1
block|,
name|FOUND_LINEUP
init|=
literal|2
block|}
enum|;
name|void
name|set_spacing_type
parameter_list|(
name|char
modifier|*
name|type
parameter_list|)
function_decl|;
name|virtual
name|void
name|hint
parameter_list|(
name|unsigned
parameter_list|)
function_decl|;
name|virtual
name|void
name|check_tabs
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|box_list
block|{
name|private
label|:
name|int
name|maxlen
decl_stmt|;
name|public
label|:
name|box
modifier|*
modifier|*
name|p
decl_stmt|;
name|int
name|len
decl_stmt|;
name|box_list
argument_list|(
name|box
operator|*
argument_list|)
expr_stmt|;
operator|~
name|box_list
argument_list|()
expr_stmt|;
name|void
name|append
parameter_list|(
name|box
modifier|*
parameter_list|)
function_decl|;
name|void
name|list_check_tabs
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|list_debug_print
parameter_list|(
specifier|const
name|char
modifier|*
name|sep
parameter_list|)
function_decl|;
name|friend
name|class
name|list_box
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|list_box
range|:
name|public
name|box
block|{
name|int
name|is_script
block|;
name|box_list
name|list
block|;
name|int
name|sty
block|;
name|public
operator|:
name|list_box
argument_list|(
name|box
operator|*
argument_list|)
block|;
name|void
name|debug_print
argument_list|()
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|compute_subscript_kern
argument_list|()
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|check_tabs
argument_list|(
name|int
argument_list|)
block|;
name|void
name|append
argument_list|(
name|box
operator|*
argument_list|)
block|;
name|list_box
operator|*
name|to_list_box
argument_list|()
block|;
name|void
name|handle_char_type
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|compute_sublist_width
argument_list|(
argument|int n
argument_list|)
block|;
name|friend
name|box
operator|*
name|make_script_box
argument_list|(
name|box
operator|*
argument_list|,
name|box
operator|*
argument_list|,
name|box
operator|*
argument_list|)
block|;
name|friend
name|box
operator|*
name|make_mark_box
argument_list|(
name|box
operator|*
argument_list|)
block|;
name|friend
name|box
operator|*
name|make_lineup_box
argument_list|(
name|box
operator|*
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_enum
enum|enum
name|alignment
block|{
name|LEFT_ALIGN
block|,
name|RIGHT_ALIGN
block|,
name|CENTER_ALIGN
block|}
enum|;
end_enum

begin_decl_stmt
name|class
name|column
range|:
name|public
name|box_list
block|{
name|alignment
name|align
block|;
name|int
name|space
block|;
name|public
operator|:
name|column
argument_list|(
name|box
operator|*
argument_list|)
block|;
name|void
name|set_alignment
argument_list|(
name|alignment
argument_list|)
block|;
name|void
name|set_space
argument_list|(
name|int
argument_list|)
block|;
name|void
name|debug_print
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
block|;
name|friend
name|class
name|matrix_box
block|;
name|friend
name|class
name|pile_box
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|pile_box
range|:
name|public
name|box
block|{
name|column
name|col
block|;
name|public
operator|:
name|pile_box
argument_list|(
name|box
operator|*
argument_list|)
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|;
name|void
name|check_tabs
argument_list|(
name|int
argument_list|)
block|;
name|void
name|set_alignment
argument_list|(
argument|alignment a
argument_list|)
block|{
name|col
operator|.
name|set_alignment
argument_list|(
name|a
argument_list|)
block|; }
name|void
name|set_space
argument_list|(
argument|int n
argument_list|)
block|{
name|col
operator|.
name|set_space
argument_list|(
name|n
argument_list|)
block|; }
name|void
name|append
argument_list|(
argument|box *p
argument_list|)
block|{
name|col
operator|.
name|append
argument_list|(
name|p
argument_list|)
block|; }
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|matrix_box
range|:
name|public
name|box
block|{
name|private
operator|:
name|int
name|len
block|;
name|int
name|maxlen
block|;
name|column
operator|*
operator|*
name|p
block|;
name|public
operator|:
name|matrix_box
argument_list|(
name|column
operator|*
argument_list|)
block|;
operator|~
name|matrix_box
argument_list|()
block|;
name|void
name|append
argument_list|(
name|column
operator|*
argument_list|)
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|check_tabs
argument_list|(
name|int
argument_list|)
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|pointer_box
range|:
name|public
name|box
block|{
name|protected
operator|:
name|box
operator|*
name|p
block|;
name|public
operator|:
name|pointer_box
argument_list|(
name|box
operator|*
argument_list|)
block|;
operator|~
name|pointer_box
argument_list|()
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|compute_subscript_kern
argument_list|()
block|;
name|void
name|compute_skew
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
operator|=
literal|0
block|;
name|void
name|check_tabs
argument_list|(
name|int
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|vcenter_box
range|:
name|public
name|pointer_box
block|{
name|public
operator|:
name|vcenter_box
argument_list|(
name|box
operator|*
argument_list|)
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|simple_box
range|:
name|public
name|box
block|{
name|public
operator|:
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|compute_subscript_kern
argument_list|()
block|;
name|void
name|compute_skew
argument_list|()
block|;
name|void
name|output
argument_list|()
operator|=
literal|0
block|;
name|void
name|debug_print
argument_list|()
operator|=
literal|0
block|;
name|int
name|is_simple
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|quoted_text_box
range|:
name|public
name|simple_box
block|{
name|char
operator|*
name|text
block|;
name|public
operator|:
name|quoted_text_box
argument_list|(
name|char
operator|*
argument_list|)
block|;
operator|~
name|quoted_text_box
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|;
name|void
name|output
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|half_space_box
range|:
name|public
name|simple_box
block|{
name|public
operator|:
name|half_space_box
argument_list|()
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|space_box
range|:
name|public
name|simple_box
block|{
name|public
operator|:
name|space_box
argument_list|()
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|tab_box
range|:
name|public
name|box
block|{
name|int
name|disabled
block|;
name|public
operator|:
name|tab_box
argument_list|()
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|;
name|void
name|check_tabs
argument_list|(
name|int
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|size_box
range|:
name|public
name|pointer_box
block|{
name|private
operator|:
name|char
operator|*
name|size
block|;
name|public
operator|:
name|size_box
argument_list|(
name|char
operator|*
argument_list|,
name|box
operator|*
argument_list|)
block|;
operator|~
name|size_box
argument_list|()
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|font_box
range|:
name|public
name|pointer_box
block|{
name|private
operator|:
name|char
operator|*
name|f
block|;
name|public
operator|:
name|font_box
argument_list|(
name|char
operator|*
argument_list|,
name|box
operator|*
argument_list|)
block|;
operator|~
name|font_box
argument_list|()
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|fat_box
range|:
name|public
name|pointer_box
block|{
name|public
operator|:
name|fat_box
argument_list|(
name|box
operator|*
argument_list|)
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|vmotion_box
range|:
name|public
name|pointer_box
block|{
name|private
operator|:
name|int
name|n
block|;
comment|// up is>= 0
name|public
operator|:
name|vmotion_box
argument_list|(
name|int
argument_list|,
name|box
operator|*
argument_list|)
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|hmotion_box
range|:
name|public
name|pointer_box
block|{
name|int
name|n
block|;
name|public
operator|:
name|hmotion_box
argument_list|(
name|int
argument_list|,
name|box
operator|*
argument_list|)
block|;
name|int
name|compute_metrics
argument_list|(
name|int
argument_list|)
block|;
name|void
name|output
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_function_decl
name|box
modifier|*
name|split_text
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_script_box
parameter_list|(
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_mark_box
parameter_list|(
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_lineup_box
parameter_list|(
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_delim_box
parameter_list|(
name|char
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_sqrt_box
parameter_list|(
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_prime_box
parameter_list|(
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_over_box
parameter_list|(
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_small_over_box
parameter_list|(
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_limit_box
parameter_list|(
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_accent_box
parameter_list|(
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_uaccent_box
parameter_list|(
name|box
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_overline_box
parameter_list|(
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_underline_box
parameter_list|(
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|box
modifier|*
name|make_special_box
parameter_list|(
name|char
modifier|*
parameter_list|,
name|box
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_space
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|set_gsize
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_gfont
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_grfont
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_gbfont
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|get_gfont
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|get_grfont
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|get_gbfont
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|start_string
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|output_string
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|do_text
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|restore_compatibility
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_script_reduction
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_minimum_size
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_param
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_char_type
parameter_list|(
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|ch
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|init_char_table
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|init_extensible
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|define_extensible
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|ext
parameter_list|,
specifier|const
name|char
modifier|*
name|top
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|mid
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|bot
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

end_unit

