begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992, 2001, 2002    Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_include
include|#
directive|include
file|"lib.h"
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|"cset.h"
end_include

begin_include
include|#
directive|include
file|"cmap.h"
end_include

begin_include
include|#
directive|include
file|"stringclass.h"
end_include

begin_include
include|#
directive|include
file|"errarg.h"
end_include

begin_include
include|#
directive|include
file|"error.h"
end_include

begin_struct
struct|struct
name|inc_number
block|{
name|short
name|inc
decl_stmt|;
name|short
name|val
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|entry_modifier
block|{
name|inc_number
name|point_size
decl_stmt|;
name|inc_number
name|vertical_spacing
decl_stmt|;
name|string
name|font
decl_stmt|;
enum|enum
block|{
name|CENTER
block|,
name|TOP
block|,
name|BOTTOM
block|}
name|vertical_alignment
enum|;
name|char
name|zero_width
decl_stmt|;
name|char
name|stagger
decl_stmt|;
name|entry_modifier
argument_list|()
expr_stmt|;
operator|~
name|entry_modifier
argument_list|()
expr_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|format_type
block|{
name|FORMAT_LEFT
block|,
name|FORMAT_CENTER
block|,
name|FORMAT_RIGHT
block|,
name|FORMAT_NUMERIC
block|,
name|FORMAT_ALPHABETIC
block|,
name|FORMAT_SPAN
block|,
name|FORMAT_VSPAN
block|,
name|FORMAT_HLINE
block|,
name|FORMAT_DOUBLE_HLINE
block|}
enum|;
end_enum

begin_decl_stmt
name|struct
name|entry_format
range|:
name|public
name|entry_modifier
block|{
name|format_type
name|type
block|;
name|entry_format
argument_list|(
name|format_type
argument_list|)
block|;
name|entry_format
argument_list|()
block|;
name|void
name|debug_print
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt

begin_struct_decl
struct_decl|struct
name|table_entry
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|horizontal_span
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|stuff
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vertical_rule
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|table
block|{
name|unsigned
name|flags
decl_stmt|;
name|int
name|nrows
decl_stmt|;
name|int
name|ncolumns
decl_stmt|;
name|int
name|linesize
decl_stmt|;
name|char
name|delim
index|[
literal|2
index|]
decl_stmt|;
name|char
name|decimal_point_char
decl_stmt|;
name|vertical_rule
modifier|*
name|vrule_list
decl_stmt|;
name|stuff
modifier|*
name|stuff_list
decl_stmt|;
name|horizontal_span
modifier|*
name|span_list
decl_stmt|;
name|table_entry
modifier|*
name|entry_list
decl_stmt|;
name|table_entry
modifier|*
modifier|*
name|entry_list_tailp
decl_stmt|;
name|table_entry
modifier|*
modifier|*
modifier|*
name|entry
decl_stmt|;
name|char
modifier|*
modifier|*
name|vline
decl_stmt|;
name|char
modifier|*
name|row_is_all_lines
decl_stmt|;
name|string
modifier|*
name|minimum_width
decl_stmt|;
name|int
modifier|*
name|column_separation
decl_stmt|;
name|char
modifier|*
name|equal
decl_stmt|;
name|int
name|left_separation
decl_stmt|;
name|int
name|right_separation
decl_stmt|;
name|int
name|allocated_rows
decl_stmt|;
name|void
name|build_span_list
parameter_list|()
function_decl|;
name|void
name|do_hspan
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
name|void
name|do_vspan
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
name|void
name|allocate
parameter_list|(
name|int
name|r
parameter_list|)
function_decl|;
name|void
name|compute_widths
parameter_list|()
function_decl|;
name|void
name|divide_span
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|sum_columns
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|compute_separation_factor
parameter_list|()
function_decl|;
name|void
name|compute_column_positions
parameter_list|()
function_decl|;
name|void
name|do_row
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|init_output
parameter_list|()
function_decl|;
name|void
name|add_stuff
parameter_list|(
name|stuff
modifier|*
parameter_list|)
function_decl|;
name|void
name|do_top
parameter_list|()
function_decl|;
name|void
name|do_bottom
parameter_list|()
function_decl|;
name|void
name|do_vertical_rules
parameter_list|()
function_decl|;
name|void
name|build_vrule_list
parameter_list|()
function_decl|;
name|void
name|add_vertical_rule
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|define_bottom_macro
parameter_list|()
function_decl|;
name|int
name|vline_spanned
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
name|int
name|row_begins_section
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|row_ends_section
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|make_columns_equal
parameter_list|()
function_decl|;
name|void
name|compute_vrule_top_adjust
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|string
modifier|&
parameter_list|)
function_decl|;
name|void
name|compute_vrule_bot_adjust
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|string
modifier|&
parameter_list|)
function_decl|;
name|void
name|determine_row_type
parameter_list|()
function_decl|;
name|public
label|:
comment|/* used by flags */
enum|enum
block|{
name|CENTER
init|=
literal|01
block|,
name|EXPAND
init|=
literal|02
block|,
name|BOX
init|=
literal|04
block|,
name|ALLBOX
init|=
literal|010
block|,
name|DOUBLEBOX
init|=
literal|020
block|,
name|NOKEEP
init|=
literal|040
block|,
name|NOSPACES
init|=
literal|0100
block|}
enum|;
name|table
argument_list|(
argument|int nc
argument_list|,
argument|unsigned flags
argument_list|,
argument|int linesize
argument_list|,
argument|char decimal_point_char
argument_list|)
empty_stmt|;
operator|~
name|table
argument_list|()
expr_stmt|;
name|void
name|add_text_line
parameter_list|(
name|int
name|r
parameter_list|,
specifier|const
name|string
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|add_single_hline
parameter_list|(
name|int
name|r
parameter_list|)
function_decl|;
name|void
name|add_double_hline
parameter_list|(
name|int
name|r
parameter_list|)
function_decl|;
name|void
name|add_entry
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|,
specifier|const
name|string
modifier|&
parameter_list|,
specifier|const
name|entry_format
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|add_vlines
parameter_list|(
name|int
name|r
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|check
parameter_list|()
function_decl|;
name|void
name|print
parameter_list|()
function_decl|;
name|void
name|set_minimum_width
parameter_list|(
name|int
name|c
parameter_list|,
specifier|const
name|string
modifier|&
name|w
parameter_list|)
function_decl|;
name|void
name|set_column_separation
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|set_equal_column
parameter_list|(
name|int
name|c
parameter_list|)
function_decl|;
name|void
name|set_delim
parameter_list|(
name|char
name|c1
parameter_list|,
name|char
name|c2
parameter_list|)
function_decl|;
name|void
name|print_single_hline
parameter_list|(
name|int
name|r
parameter_list|)
function_decl|;
name|void
name|print_double_hline
parameter_list|(
name|int
name|r
parameter_list|)
function_decl|;
name|int
name|get_nrows
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|set_troff_location
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

end_unit

