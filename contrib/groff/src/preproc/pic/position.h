begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_struct_decl
struct_decl|struct
name|place
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|position
block|{
name|double
name|x
decl_stmt|;
name|double
name|y
decl_stmt|;
name|position
argument_list|(
name|double
argument_list|,
name|double
argument_list|)
expr_stmt|;
name|position
argument_list|()
expr_stmt|;
name|position
argument_list|(
specifier|const
name|place
operator|&
argument_list|)
expr_stmt|;
name|position
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|position
operator|&
operator|)
expr_stmt|;
name|position
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|position
operator|&
operator|)
expr_stmt|;
name|position
operator|&
name|operator
operator|*=
operator|(
name|double
operator|)
expr_stmt|;
name|position
operator|&
name|operator
operator|/=
operator|(
name|double
operator|)
expr_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|position
name|operator
operator|-
operator|(
specifier|const
name|position
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|position
name|operator
operator|+
operator|(
specifier|const
name|position
operator|&
operator|,
specifier|const
name|position
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|position
name|operator
operator|-
operator|(
specifier|const
name|position
operator|&
operator|,
specifier|const
name|position
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|position
name|operator
operator|/
operator|(
specifier|const
name|position
operator|&
operator|,
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|position
name|operator
modifier|*
parameter_list|(
specifier|const
name|position
modifier|&
parameter_list|,
name|double
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// dot product
end_comment

begin_function_decl
name|double
name|operator
modifier|*
parameter_list|(
specifier|const
name|position
modifier|&
parameter_list|,
specifier|const
name|position
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|position
operator|&
operator|,
specifier|const
name|position
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|position
operator|&
operator|,
specifier|const
name|position
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|double
name|hypot
parameter_list|(
specifier|const
name|position
modifier|&
name|a
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|position
name|distance
typedef|;
end_typedef

end_unit

