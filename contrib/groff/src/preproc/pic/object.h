begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992, 2002, 2004    Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin St - Fifth Floor, Boston, MA 02110-1301, USA. */
end_comment

begin_struct_decl
struct_decl|struct
name|place
struct_decl|;
end_struct_decl

begin_enum
enum|enum
name|object_type
block|{
name|OTHER_OBJECT
block|,
name|BOX_OBJECT
block|,
name|CIRCLE_OBJECT
block|,
name|ELLIPSE_OBJECT
block|,
name|ARC_OBJECT
block|,
name|SPLINE_OBJECT
block|,
name|LINE_OBJECT
block|,
name|ARROW_OBJECT
block|,
name|MOVE_OBJECT
block|,
name|TEXT_OBJECT
block|,
name|BLOCK_OBJECT
block|,
name|MARK_OBJECT
block|}
enum|;
end_enum

begin_struct_decl
struct_decl|struct
name|bounding_box
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|object
block|{
name|object
modifier|*
name|prev
decl_stmt|;
name|object
modifier|*
name|next
decl_stmt|;
name|object
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|object
argument_list|()
expr_stmt|;
name|virtual
name|position
name|origin
parameter_list|()
function_decl|;
name|virtual
name|double
name|width
parameter_list|()
function_decl|;
name|virtual
name|double
name|radius
parameter_list|()
function_decl|;
name|virtual
name|double
name|height
parameter_list|()
function_decl|;
name|virtual
name|position
name|north
parameter_list|()
function_decl|;
name|virtual
name|position
name|south
parameter_list|()
function_decl|;
name|virtual
name|position
name|east
parameter_list|()
function_decl|;
name|virtual
name|position
name|west
parameter_list|()
function_decl|;
name|virtual
name|position
name|north_east
parameter_list|()
function_decl|;
name|virtual
name|position
name|north_west
parameter_list|()
function_decl|;
name|virtual
name|position
name|south_east
parameter_list|()
function_decl|;
name|virtual
name|position
name|south_west
parameter_list|()
function_decl|;
name|virtual
name|position
name|start
parameter_list|()
function_decl|;
name|virtual
name|position
name|end
parameter_list|()
function_decl|;
name|virtual
name|position
name|center
parameter_list|()
function_decl|;
name|virtual
name|place
modifier|*
name|find_label
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|move_by
parameter_list|(
specifier|const
name|position
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|int
name|blank
parameter_list|()
function_decl|;
name|virtual
name|void
name|update_bounding_box
parameter_list|(
name|bounding_box
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|object_type
name|type
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|print
parameter_list|()
function_decl|;
name|virtual
name|void
name|print_text
parameter_list|()
function_decl|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|position
argument_list|(
name|object
operator|::
operator|*
name|corner
argument_list|)
argument_list|()
expr_stmt|;
end_typedef

begin_struct
struct|struct
name|place
block|{
name|object
modifier|*
name|obj
decl_stmt|;
name|double
name|x
decl_stmt|,
name|y
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|string_list
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|path
block|{
name|position
name|pos
decl_stmt|;
name|corner
name|crn
decl_stmt|;
name|string_list
modifier|*
name|label_list
decl_stmt|;
name|path
modifier|*
name|ypath
decl_stmt|;
name|int
name|is_position
decl_stmt|;
name|public
label|:
name|path
argument_list|(
name|corner
operator|=
literal|0
argument_list|)
expr_stmt|;
name|path
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|path
argument_list|(
name|char
operator|*
argument_list|,
name|corner
operator|=
literal|0
argument_list|)
expr_stmt|;
operator|~
name|path
argument_list|()
expr_stmt|;
name|void
name|append
parameter_list|(
name|corner
parameter_list|)
function_decl|;
name|void
name|append
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|set_ypath
parameter_list|(
name|path
modifier|*
parameter_list|)
function_decl|;
name|int
name|follow
argument_list|(
specifier|const
name|place
operator|&
argument_list|,
name|place
operator|*
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct
struct|struct
name|object_list
block|{
name|object
modifier|*
name|head
decl_stmt|;
name|object
modifier|*
name|tail
decl_stmt|;
name|object_list
argument_list|()
expr_stmt|;
name|void
name|append
parameter_list|(
name|object
modifier|*
parameter_list|)
function_decl|;
name|void
name|wrap_up_block
parameter_list|(
name|object_list
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_expr_stmt
name|declare_ptable
argument_list|(
name|place
argument_list|)
comment|// these go counterclockwise
expr|enum
name|direction
block|{
name|RIGHT_DIRECTION
block|,
name|UP_DIRECTION
block|,
name|LEFT_DIRECTION
block|,
name|DOWN_DIRECTION
block|}
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|graphics_state
block|{
name|double
name|x
decl_stmt|,
name|y
decl_stmt|;
name|direction
name|dir
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|struct
name|saved_state
range|:
name|public
name|graphics_state
block|{
name|saved_state
operator|*
name|prev
block|;
name|PTABLE
argument_list|(
name|place
argument_list|)
operator|*
name|tbl
block|; }
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|text_item
block|{
name|text_item
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|text
decl_stmt|;
name|adjustment
name|adj
decl_stmt|;
specifier|const
name|char
modifier|*
name|filename
decl_stmt|;
name|int
name|lineno
decl_stmt|;
name|text_item
argument_list|(
name|char
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|)
expr_stmt|;
operator|~
name|text_item
argument_list|()
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_DOTTED
init|=
literal|01
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_DASHED
init|=
literal|02
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_CLOCKWISE
init|=
literal|04
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_INVISIBLE
init|=
literal|020
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_LEFT_ARROW_HEAD
init|=
literal|040
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_RIGHT_ARROW_HEAD
init|=
literal|0100
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_SEGMENT
init|=
literal|0200
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_SAME
init|=
literal|0400
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_FROM
init|=
literal|01000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_AT
init|=
literal|02000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_WITH
init|=
literal|04000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_HEIGHT
init|=
literal|010000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_WIDTH
init|=
literal|020000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_RADIUS
init|=
literal|040000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_TO
init|=
literal|0100000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_CHOPPED
init|=
literal|0200000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_DEFAULT_CHOPPED
init|=
literal|0400000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|HAS_THICKNESS
init|=
literal|01000000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_FILLED
init|=
literal|02000000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_DEFAULT_FILLED
init|=
literal|04000000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_ALIGNED
init|=
literal|010000000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_SHADED
init|=
literal|020000000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|long
name|IS_OUTLINED
init|=
literal|040000000
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|segment
block|{
name|int
name|is_absolute
decl_stmt|;
name|position
name|pos
decl_stmt|;
name|segment
modifier|*
name|next
decl_stmt|;
name|segment
argument_list|(
specifier|const
name|position
operator|&
argument_list|,
name|int
argument_list|,
name|segment
operator|*
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|rectangle_object
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|graphic_object
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|linear_object
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|object_spec
block|{
name|unsigned
name|long
name|flags
decl_stmt|;
name|object_type
name|type
decl_stmt|;
name|object_list
name|oblist
decl_stmt|;
name|PTABLE
argument_list|(
name|place
argument_list|)
operator|*
name|tbl
expr_stmt|;
name|double
name|dash_width
decl_stmt|;
name|position
name|from
decl_stmt|;
name|position
name|to
decl_stmt|;
name|position
name|at
decl_stmt|;
name|position
name|by
decl_stmt|;
name|path
modifier|*
name|with
decl_stmt|;
name|text_item
modifier|*
name|text
decl_stmt|;
name|double
name|height
decl_stmt|;
name|double
name|radius
decl_stmt|;
name|double
name|width
decl_stmt|;
name|double
name|segment_width
decl_stmt|;
name|double
name|segment_height
decl_stmt|;
name|double
name|start_chop
decl_stmt|;
name|double
name|end_chop
decl_stmt|;
name|double
name|thickness
decl_stmt|;
name|double
name|fill
decl_stmt|;
name|char
modifier|*
name|shaded
decl_stmt|;
name|char
modifier|*
name|outlined
decl_stmt|;
name|direction
name|dir
decl_stmt|;
name|segment
modifier|*
name|segment_list
decl_stmt|;
name|position
name|segment_pos
decl_stmt|;
name|int
name|segment_is_absolute
decl_stmt|;
name|object_spec
argument_list|(
name|object_type
argument_list|)
expr_stmt|;
operator|~
name|object_spec
argument_list|()
expr_stmt|;
name|object
modifier|*
name|make_object
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|graphic_object
modifier|*
name|make_box
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|graphic_object
modifier|*
name|make_block
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|graphic_object
modifier|*
name|make_text
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|graphic_object
modifier|*
name|make_ellipse
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|graphic_object
modifier|*
name|make_circle
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|linear_object
modifier|*
name|make_line
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|linear_object
modifier|*
name|make_arc
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|graphic_object
modifier|*
name|make_linear
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|graphic_object
modifier|*
name|make_move
parameter_list|(
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
name|int
name|position_rectangle
parameter_list|(
name|rectangle_object
modifier|*
name|p
parameter_list|,
name|position
modifier|*
name|curpos
parameter_list|,
name|direction
modifier|*
name|dirp
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function_decl
name|object
modifier|*
name|make_object
parameter_list|(
name|object_spec
modifier|*
parameter_list|,
name|position
modifier|*
parameter_list|,
name|direction
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|object
modifier|*
name|make_mark_object
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|object
modifier|*
name|make_command_object
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|lookup_variable
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|double
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|define_variable
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|double
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_picture
parameter_list|(
name|object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

