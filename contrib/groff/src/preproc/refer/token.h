begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin St - Fifth Floor, Boston, MA 02110-1301, USA. */
end_comment

begin_enum
enum|enum
name|token_type
block|{
name|TOKEN_OTHER
block|,
name|TOKEN_UPPER
block|,
name|TOKEN_LOWER
block|,
name|TOKEN_ACCENT
block|,
name|TOKEN_PUNCT
block|,
name|TOKEN_HYPHEN
block|,
name|TOKEN_RANGE_SEP
block|}
enum|;
end_enum

begin_decl_stmt
name|class
name|token_info
block|{
name|private
label|:
name|token_type
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|sort_key
decl_stmt|;
specifier|const
name|char
modifier|*
name|other_case
decl_stmt|;
name|public
label|:
name|token_info
argument_list|()
expr_stmt|;
name|void
name|set
parameter_list|(
name|token_type
parameter_list|,
specifier|const
name|char
modifier|*
name|sk
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|oc
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|lower_case
argument_list|(
specifier|const
name|char
operator|*
name|start
argument_list|,
specifier|const
name|char
operator|*
name|end
argument_list|,
name|string
operator|&
name|result
argument_list|)
decl|const
decl_stmt|;
name|void
name|upper_case
argument_list|(
specifier|const
name|char
operator|*
name|start
argument_list|,
specifier|const
name|char
operator|*
name|end
argument_list|,
name|string
operator|&
name|result
argument_list|)
decl|const
decl_stmt|;
name|void
name|sortify
argument_list|(
specifier|const
name|char
operator|*
name|start
argument_list|,
specifier|const
name|char
operator|*
name|end
argument_list|,
name|string
operator|&
name|result
argument_list|)
decl|const
decl_stmt|;
name|int
name|sortify_non_empty
argument_list|(
specifier|const
name|char
operator|*
name|start
argument_list|,
specifier|const
name|char
operator|*
name|end
argument_list|)
decl|const
decl_stmt|;
name|int
name|is_upper
argument_list|()
specifier|const
expr_stmt|;
name|int
name|is_lower
argument_list|()
specifier|const
expr_stmt|;
name|int
name|is_accent
argument_list|()
specifier|const
expr_stmt|;
name|int
name|is_other
argument_list|()
specifier|const
expr_stmt|;
name|int
name|is_punct
argument_list|()
specifier|const
expr_stmt|;
name|int
name|is_hyphen
argument_list|()
specifier|const
expr_stmt|;
name|int
name|is_range_sep
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
specifier|inline
name|int
name|token_info
operator|::
name|is_upper
argument_list|()
specifier|const
block|{
return|return
name|type
operator|==
name|TOKEN_UPPER
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|token_info
operator|::
name|is_lower
argument_list|()
specifier|const
block|{
return|return
name|type
operator|==
name|TOKEN_LOWER
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|token_info
operator|::
name|is_accent
argument_list|()
specifier|const
block|{
return|return
name|type
operator|==
name|TOKEN_ACCENT
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|token_info
operator|::
name|is_other
argument_list|()
specifier|const
block|{
return|return
name|type
operator|==
name|TOKEN_OTHER
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|token_info
operator|::
name|is_punct
argument_list|()
specifier|const
block|{
return|return
name|type
operator|==
name|TOKEN_PUNCT
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|token_info
operator|::
name|is_hyphen
argument_list|()
specifier|const
block|{
return|return
name|type
operator|==
name|TOKEN_HYPHEN
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|token_info
operator|::
name|is_range_sep
argument_list|()
specifier|const
block|{
return|return
name|type
operator|==
name|TOKEN_RANGE_SEP
return|;
block|}
end_expr_stmt

begin_function_decl
name|int
name|get_token
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|ptr
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|token_info
modifier|*
name|lookup_token
parameter_list|(
specifier|const
name|char
modifier|*
name|start
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|)
function_decl|;
end_function_decl

end_unit

