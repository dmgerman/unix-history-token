begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_struct_decl
struct_decl|struct
name|label_info
struct_decl|;
end_struct_decl

begin_enum
enum|enum
name|label_type
block|{
name|NORMAL_LABEL
block|,
name|SHORT_LABEL
block|}
enum|;
end_enum

begin_decl_stmt
specifier|const
name|int
name|N_LABEL_TYPES
init|=
literal|2
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|substring_position
block|{
name|int
name|start
decl_stmt|;
name|int
name|length
decl_stmt|;
name|substring_position
argument_list|()
operator|:
name|start
argument_list|(
argument|-
literal|1
argument_list|)
block|{ }
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|int_set
block|{
name|string
name|v
decl_stmt|;
name|public
label|:
name|int_set
argument_list|()
block|{ }
name|void
name|set
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|int
name|get
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|reference
block|{
name|private
label|:
name|unsigned
name|h
decl_stmt|;
name|reference_id
name|rid
decl_stmt|;
name|int
name|merged
decl_stmt|;
name|string
name|sort_key
decl_stmt|;
name|int
name|no
decl_stmt|;
name|string
modifier|*
name|field
decl_stmt|;
name|int
name|nfields
decl_stmt|;
name|unsigned
name|char
name|field_index
index|[
literal|256
index|]
decl_stmt|;
enum|enum
block|{
name|NULL_FIELD_INDEX
init|=
literal|255
block|}
enum|;
name|string
name|label
decl_stmt|;
name|substring_position
name|separator_pos
decl_stmt|;
name|string
name|short_label
decl_stmt|;
name|substring_position
name|short_separator_pos
decl_stmt|;
name|label_info
modifier|*
name|label_ptr
decl_stmt|;
name|string
name|authors
decl_stmt|;
name|int
name|computed_authors
decl_stmt|;
name|int
name|last_needed_author
decl_stmt|;
name|int
name|nauthors
decl_stmt|;
name|int_set
name|last_name_unambiguous
decl_stmt|;
name|int
name|contains_field
argument_list|(
name|char
argument_list|)
decl|const
decl_stmt|;
name|void
name|insert_field
parameter_list|(
name|unsigned
name|char
parameter_list|,
name|string
modifier|&
name|s
parameter_list|)
function_decl|;
name|void
name|delete_field
parameter_list|(
name|unsigned
name|char
parameter_list|)
function_decl|;
name|void
name|set_date
parameter_list|(
name|string
modifier|&
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|get_sort_field
argument_list|(
name|int
name|i
argument_list|,
name|int
name|si
argument_list|,
name|int
name|ssi
argument_list|,
specifier|const
name|char
operator|*
operator|*
name|endp
argument_list|)
decl|const
decl_stmt|;
name|int
name|merge_labels_by_parts
parameter_list|(
name|reference
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|label_type
parameter_list|,
name|string
modifier|&
parameter_list|)
function_decl|;
name|int
name|merge_labels_by_number
parameter_list|(
name|reference
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|label_type
parameter_list|,
name|string
modifier|&
parameter_list|)
function_decl|;
name|public
label|:
name|reference
argument_list|(
specifier|const
name|char
operator|*
operator|=
literal|0
argument_list|,
name|int
operator|=
operator|-
literal|1
argument_list|,
name|reference_id
operator|*
operator|=
literal|0
argument_list|)
expr_stmt|;
operator|~
name|reference
argument_list|()
expr_stmt|;
name|void
name|output
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|void
name|print_sort_key_comment
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|void
name|set_number
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|get_number
argument_list|()
specifier|const
block|{
return|return
name|no
return|;
block|}
name|unsigned
name|hash
argument_list|()
specifier|const
block|{
return|return
name|h
return|;
block|}
specifier|const
name|string
modifier|&
name|get_label
argument_list|(
name|label_type
name|type
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|substring_position
modifier|&
name|get_separator_pos
argument_list|(
name|label_type
argument_list|)
decl|const
decl_stmt|;
name|int
name|is_merged
argument_list|()
specifier|const
block|{
return|return
name|merged
return|;
block|}
name|void
name|compute_sort_key
parameter_list|()
function_decl|;
name|void
name|compute_hash_code
parameter_list|()
function_decl|;
name|void
name|pre_compute_label
parameter_list|()
function_decl|;
name|void
name|compute_label
parameter_list|()
function_decl|;
name|void
name|immediate_compute_label
parameter_list|()
function_decl|;
name|int
name|classify
parameter_list|()
function_decl|;
name|void
name|merge
parameter_list|(
name|reference
modifier|&
parameter_list|)
function_decl|;
name|int
name|merge_labels
parameter_list|(
name|reference
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|label_type
parameter_list|,
name|string
modifier|&
parameter_list|)
function_decl|;
name|int
name|get_nauthors
argument_list|()
specifier|const
expr_stmt|;
name|void
name|need_author
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|set_last_name_unambiguous
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|sortify_authors
argument_list|(
name|int
argument_list|,
name|string
operator|&
argument_list|)
decl|const
decl_stmt|;
name|void
name|canonicalize_authors
argument_list|(
name|string
operator|&
argument_list|)
decl|const
decl_stmt|;
name|void
name|sortify_field
argument_list|(
name|unsigned
name|char
argument_list|,
name|int
argument_list|,
name|string
operator|&
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|get_author
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
operator|*
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|get_author_last_name
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
operator|*
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|get_date
argument_list|(
specifier|const
name|char
operator|*
operator|*
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|get_year
argument_list|(
specifier|const
name|char
operator|*
operator|*
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|get_field
argument_list|(
name|unsigned
name|char
argument_list|,
specifier|const
name|char
operator|*
operator|*
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|label_info
operator|*
name|get_label_ptr
argument_list|()
specifier|const
block|{
return|return
name|label_ptr
return|;
block|}
specifier|const
name|char
modifier|*
name|get_authors
argument_list|(
specifier|const
name|char
operator|*
operator|*
argument_list|)
decl|const
decl_stmt|;
comment|// for sorting
name|friend
name|int
name|compare_reference
parameter_list|(
specifier|const
name|reference
modifier|&
name|r1
parameter_list|,
specifier|const
name|reference
modifier|&
name|r2
parameter_list|)
function_decl|;
comment|// for merging
name|friend
name|int
name|same_reference
parameter_list|(
specifier|const
name|reference
modifier|&
parameter_list|,
specifier|const
name|reference
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|same_year
parameter_list|(
specifier|const
name|reference
modifier|&
parameter_list|,
specifier|const
name|reference
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|same_date
parameter_list|(
specifier|const
name|reference
modifier|&
parameter_list|,
specifier|const
name|reference
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|same_author_last_name
parameter_list|(
specifier|const
name|reference
modifier|&
parameter_list|,
specifier|const
name|reference
modifier|&
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|friend
name|int
name|same_author_name
parameter_list|(
specifier|const
name|reference
modifier|&
parameter_list|,
specifier|const
name|reference
modifier|&
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|const
name|char
modifier|*
name|find_year
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|find_last_name
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|nth_field
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|char
modifier|*
name|start
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|endp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|capitalize
parameter_list|(
specifier|const
name|char
modifier|*
name|ptr
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|,
name|string
modifier|&
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|reverse_name
parameter_list|(
specifier|const
name|char
modifier|*
name|ptr
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|,
name|string
modifier|&
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|uppercase
parameter_list|(
specifier|const
name|char
modifier|*
name|ptr
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|,
name|string
modifier|&
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lowercase
parameter_list|(
specifier|const
name|char
modifier|*
name|ptr
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|,
name|string
modifier|&
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|abbreviate_name
parameter_list|(
specifier|const
name|char
modifier|*
name|ptr
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|,
name|string
modifier|&
name|result
parameter_list|)
function_decl|;
end_function_decl

end_unit

