begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/*<groff_src_dir>/src/include/color.h  Last update: 10 Apr 2002  Copyright (C) 2001, 2002 Free Software Foundation, Inc.     Written by Gaius Mulley<gaius@glam.ac.uk>  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_enum
enum|enum
name|color_scheme
block|{
name|DEFAULT
block|,
name|CMY
block|,
name|CMYK
block|,
name|RGB
block|,
name|GRAY
block|}
enum|;
end_enum

begin_decl_stmt
name|class
name|color
block|{
name|private
label|:
name|color_scheme
name|scheme
decl_stmt|;
name|unsigned
name|int
name|components
index|[
literal|4
index|]
decl_stmt|;
name|int
name|read_encoding
parameter_list|(
specifier|const
name|color_scheme
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
parameter_list|,
specifier|const
name|size_t
parameter_list|)
function_decl|;
name|public
label|:
enum|enum
block|{
name|MAX_COLOR_VAL
init|=
literal|0xffff
block|}
enum|;
name|color
argument_list|()
operator|:
name|scheme
argument_list|(
argument|DEFAULT
argument_list|)
block|{}
name|color
argument_list|(
specifier|const
name|color
operator|*
specifier|const
argument_list|)
expr_stmt|;
name|int
name|operator
operator|==
operator|(
specifier|const
name|color
operator|&
name|c
operator|)
specifier|const
expr_stmt|;
name|int
name|operator
operator|!=
operator|(
specifier|const
name|color
operator|&
name|c
operator|)
specifier|const
expr_stmt|;
name|int
name|is_default
parameter_list|()
block|{
return|return
name|scheme
operator|==
name|DEFAULT
return|;
block|}
comment|// set color from given color component values
name|void
name|set_default
parameter_list|()
function_decl|;
name|void
name|set_rgb
parameter_list|(
specifier|const
name|unsigned
name|int
name|r
parameter_list|,
specifier|const
name|unsigned
name|int
name|g
parameter_list|,
specifier|const
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
name|void
name|set_cmy
parameter_list|(
specifier|const
name|unsigned
name|int
name|c
parameter_list|,
specifier|const
name|unsigned
name|int
name|m
parameter_list|,
specifier|const
name|unsigned
name|int
name|y
parameter_list|)
function_decl|;
name|void
name|set_cmyk
parameter_list|(
specifier|const
name|unsigned
name|int
name|c
parameter_list|,
specifier|const
name|unsigned
name|int
name|m
parameter_list|,
specifier|const
name|unsigned
name|int
name|y
parameter_list|,
specifier|const
name|unsigned
name|int
name|k
parameter_list|)
function_decl|;
name|void
name|set_gray
parameter_list|(
specifier|const
name|unsigned
name|int
name|g
parameter_list|)
function_decl|;
comment|// set color from a color string
name|int
name|read_rgb
parameter_list|(
specifier|const
name|char
modifier|*
specifier|const
name|s
parameter_list|)
function_decl|;
name|int
name|read_cmy
parameter_list|(
specifier|const
name|char
modifier|*
specifier|const
name|s
parameter_list|)
function_decl|;
name|int
name|read_cmyk
parameter_list|(
specifier|const
name|char
modifier|*
specifier|const
name|s
parameter_list|)
function_decl|;
name|int
name|read_gray
parameter_list|(
specifier|const
name|char
modifier|*
specifier|const
name|s
parameter_list|)
function_decl|;
comment|// Return the actual color scheme and retrieve the color components
comment|// into a predefined vector (of length at least 4).
name|color_scheme
name|get_components
argument_list|(
name|unsigned
name|int
operator|*
name|c
argument_list|)
decl|const
decl_stmt|;
comment|// retrieve the components of a color
name|void
name|get_rgb
argument_list|(
name|unsigned
name|int
operator|*
name|r
argument_list|,
name|unsigned
name|int
operator|*
name|g
argument_list|,
name|unsigned
name|int
operator|*
name|b
argument_list|)
decl|const
decl_stmt|;
name|void
name|get_cmy
argument_list|(
name|unsigned
name|int
operator|*
name|c
argument_list|,
name|unsigned
name|int
operator|*
name|m
argument_list|,
name|unsigned
name|int
operator|*
name|y
argument_list|)
decl|const
decl_stmt|;
name|void
name|get_cmyk
argument_list|(
name|unsigned
name|int
operator|*
name|c
argument_list|,
name|unsigned
name|int
operator|*
name|m
argument_list|,
name|unsigned
name|int
operator|*
name|y
argument_list|,
name|unsigned
name|int
operator|*
name|k
argument_list|)
decl|const
decl_stmt|;
name|void
name|get_gray
argument_list|(
name|unsigned
name|int
operator|*
name|g
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_define
define|#
directive|define
name|Cyan
value|components[0]
end_define

begin_define
define|#
directive|define
name|Magenta
value|components[1]
end_define

begin_define
define|#
directive|define
name|Yellow
value|components[2]
end_define

begin_define
define|#
directive|define
name|Black
value|components[3]
end_define

begin_define
define|#
directive|define
name|Red
value|components[0]
end_define

begin_define
define|#
directive|define
name|Green
value|components[1]
end_define

begin_define
define|#
directive|define
name|Blue
value|components[2]
end_define

begin_define
define|#
directive|define
name|Gray
value|components[0]
end_define

begin_decl_stmt
specifier|extern
name|color
name|default_color
decl_stmt|;
end_decl_stmt

end_unit

