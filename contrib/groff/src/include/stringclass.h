begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992, 2002 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_comment
comment|// Ensure that the first declaration of functions that are later
end_comment

begin_comment
comment|// declared as inline declares them as inline.
end_comment

begin_decl_stmt
name|class
name|string
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|char
operator|*
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
operator|,
name|char
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
name|char
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|class
name|string
block|{
name|public
label|:
name|string
argument_list|()
expr_stmt|;
name|string
argument_list|(
specifier|const
name|string
operator|&
argument_list|)
expr_stmt|;
name|string
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
expr_stmt|;
name|string
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|)
expr_stmt|;
name|string
argument_list|(
name|char
argument_list|)
expr_stmt|;
operator|~
name|string
argument_list|()
expr_stmt|;
name|string
modifier|&
name|operator
init|=
operator|(
specifier|const
name|string
operator|&
operator|)
decl_stmt|;
name|string
modifier|&
name|operator
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
decl_stmt|;
name|string
modifier|&
name|operator
init|=
operator|(
name|char
operator|)
decl_stmt|;
name|string
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|string
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
operator|)
expr_stmt|;
name|string
operator|&
name|operator
operator|+=
operator|(
name|char
operator|)
expr_stmt|;
name|void
name|append
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|empty
argument_list|()
specifier|const
expr_stmt|;
name|int
name|operator
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
name|string
name|substring
argument_list|(
name|int
name|i
argument_list|,
name|int
name|n
argument_list|)
decl|const
decl_stmt|;
name|char
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|char
name|operator
index|[]
argument_list|(
name|int
argument_list|)
decl|const
decl_stmt|;
name|void
name|set_length
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
specifier|const
name|char
operator|*
name|contents
argument_list|()
specifier|const
expr_stmt|;
name|int
name|search
argument_list|(
name|char
argument_list|)
decl|const
decl_stmt|;
name|char
operator|*
name|extract
argument_list|()
specifier|const
expr_stmt|;
name|void
name|remove_spaces
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|move
parameter_list|(
name|string
modifier|&
parameter_list|)
function_decl|;
name|friend
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|char
operator|*
operator|)
expr_stmt|;
name|friend
name|string
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
operator|,
name|char
operator|)
expr_stmt|;
name|friend
name|string
name|operator
operator|+
operator|(
name|char
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|==
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
specifier|const
name|string
operator|&
operator|,
specifier|const
name|string
operator|&
operator|)
expr_stmt|;
name|private
label|:
name|char
modifier|*
name|ptr
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|sz
decl_stmt|;
name|string
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|)
expr_stmt|;
comment|// for use by operator+
name|void
name|grow1
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
specifier|inline
name|char
operator|&
name|string
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
name|assert
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|len
argument_list|)
block|;
return|return
name|ptr
index|[
name|i
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|char
name|string
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|len
argument_list|)
block|;
return|return
name|ptr
index|[
name|i
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|string
operator|::
name|length
argument_list|()
specifier|const
block|{
return|return
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|string
operator|::
name|empty
argument_list|()
specifier|const
block|{
return|return
name|len
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|string
operator|::
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|char
operator|*
name|string
operator|::
name|contents
argument_list|()
specifier|const
block|{
return|return
name|ptr
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
name|s1
operator|,
specifier|const
name|string
operator|&
name|s2
operator|)
block|{
return|return
name|string
argument_list|(
name|s1
operator|.
name|ptr
argument_list|,
name|s1
operator|.
name|len
argument_list|,
name|s2
operator|.
name|ptr
argument_list|,
name|s2
operator|.
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
name|s1
operator|,
specifier|const
name|char
operator|*
name|s2
operator|)
block|{
ifdef|#
directive|ifdef
name|__GNUG__
if|if
condition|(
name|s2
operator|==
literal|0
condition|)
return|return
name|s1
return|;
else|else
return|return
name|string
argument_list|(
name|s1
operator|.
name|ptr
argument_list|,
name|s1
operator|.
name|len
argument_list|,
name|s2
argument_list|,
name|strlen
argument_list|(
name|s2
argument_list|)
argument_list|)
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_return
return|return
name|s2
operator|==
literal|0
condition|?
name|s1
else|:
name|string
argument_list|(
name|s1
operator|.
name|ptr
argument_list|,
name|s1
operator|.
name|len
argument_list|,
name|s2
argument_list|,
name|strlen
argument_list|(
name|s2
argument_list|)
argument_list|)
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
unit|}  inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|string
operator|&
name|s2
operator|)
block|{
ifdef|#
directive|ifdef
name|__GNUG__
if|if
condition|(
name|s1
operator|==
literal|0
condition|)
return|return
name|s2
return|;
else|else
return|return
name|string
argument_list|(
name|s1
argument_list|,
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|,
name|s2
operator|.
name|ptr
argument_list|,
name|s2
operator|.
name|len
argument_list|)
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_return
return|return
name|s1
operator|==
literal|0
condition|?
name|s2
else|:
name|string
argument_list|(
name|s1
argument_list|,
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|,
name|s2
operator|.
name|ptr
argument_list|,
name|s2
operator|.
name|len
argument_list|)
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
unit|}  inline
name|string
name|operator
operator|+
operator|(
specifier|const
name|string
operator|&
name|s
operator|,
name|char
name|c
operator|)
block|{
return|return
name|string
argument_list|(
name|s
operator|.
name|ptr
argument_list|,
name|s
operator|.
name|len
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|operator
operator|+
operator|(
name|char
name|c
operator|,
specifier|const
name|string
operator|&
name|s
operator|)
block|{
return|return
name|string
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|,
name|s
operator|.
name|ptr
argument_list|,
name|s
operator|.
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|string
operator|&
name|s1
operator|,
specifier|const
name|string
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|s1
operator|.
name|len
operator|==
name|s2
operator|.
name|len
operator|&&
operator|(
name|s1
operator|.
name|len
operator|==
literal|0
operator|||
name|memcmp
argument_list|(
name|s1
operator|.
name|ptr
argument_list|,
name|s2
operator|.
name|ptr
argument_list|,
name|s1
operator|.
name|len
argument_list|)
operator|==
literal|0
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|string
operator|&
name|s1
operator|,
specifier|const
name|string
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|s1
operator|.
name|len
operator|!=
name|s2
operator|.
name|len
operator|||
operator|(
name|s1
operator|.
name|len
operator|!=
literal|0
operator|&&
name|memcmp
argument_list|(
name|s1
operator|.
name|ptr
argument_list|,
name|s2
operator|.
name|ptr
argument_list|,
name|s1
operator|.
name|len
argument_list|)
operator|!=
literal|0
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
name|string
operator|::
name|substring
argument_list|(
argument|int i
argument_list|,
argument|int n
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|+
name|n
operator|<=
name|len
argument_list|)
block|;
return|return
name|string
argument_list|(
name|ptr
operator|+
name|i
argument_list|,
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|string
operator|&
name|string
operator|::
name|operator
operator|+=
operator|(
name|char
name|c
operator|)
block|{
if|if
condition|(
name|len
operator|>=
name|sz
condition|)
name|grow1
argument_list|()
expr_stmt|;
name|ptr
index|[
name|len
operator|++
index|]
operator|=
name|c
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  void
name|put_string
argument_list|(
specifier|const
name|string
operator|&
argument_list|,
name|FILE
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|string
name|as_string
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

end_unit

