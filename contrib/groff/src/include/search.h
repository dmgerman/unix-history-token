begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_struct_decl
struct_decl|struct
name|search_item
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|search_item_iterator
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|search_list
block|{
name|public
label|:
name|search_list
argument_list|()
expr_stmt|;
operator|~
name|search_list
argument_list|()
expr_stmt|;
name|void
name|add_file
parameter_list|(
specifier|const
name|char
modifier|*
name|fn
parameter_list|,
name|int
name|silent
init|=
literal|0
parameter_list|)
function_decl|;
name|int
name|nfiles
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|search_item
modifier|*
name|list
decl_stmt|;
name|int
name|niterators
decl_stmt|;
name|int
name|next_fid
decl_stmt|;
name|friend
name|class
name|search_list_iterator
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct_decl
struct_decl|struct
name|bmpattern
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|linear_searcher
block|{
specifier|const
name|char
modifier|*
name|ignore_fields
decl_stmt|;
name|int
name|truncate_len
decl_stmt|;
name|bmpattern
modifier|*
modifier|*
name|keys
decl_stmt|;
name|int
name|nkeys
decl_stmt|;
specifier|const
name|char
modifier|*
name|search_and_check
argument_list|(
specifier|const
name|bmpattern
operator|*
name|key
argument_list|,
specifier|const
name|char
operator|*
name|buf
argument_list|,
specifier|const
name|char
operator|*
name|bufend
argument_list|,
specifier|const
name|char
operator|*
operator|*
name|start
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|check_match
argument_list|(
specifier|const
name|char
operator|*
name|buf
argument_list|,
specifier|const
name|char
operator|*
name|bufend
argument_list|,
specifier|const
name|char
operator|*
name|match
argument_list|,
name|int
name|matchlen
argument_list|,
specifier|const
name|char
operator|*
operator|*
name|cont
argument_list|,
specifier|const
name|char
operator|*
operator|*
name|start
argument_list|)
decl|const
decl_stmt|;
name|public
label|:
name|linear_searcher
argument_list|(
argument|const char *query
argument_list|,
argument|int query_len
argument_list|,
argument|const char *ign
argument_list|,
argument|int trunc
argument_list|)
empty_stmt|;
operator|~
name|linear_searcher
argument_list|()
expr_stmt|;
name|int
name|search
argument_list|(
specifier|const
name|char
operator|*
name|buf
argument_list|,
specifier|const
name|char
operator|*
name|bufend
argument_list|,
specifier|const
name|char
operator|*
operator|*
name|startp
argument_list|,
name|int
operator|*
name|lengthp
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|search_list_iterator
block|{
name|search_list
modifier|*
name|list
decl_stmt|;
name|search_item
modifier|*
name|ptr
decl_stmt|;
name|search_item_iterator
modifier|*
name|iter
decl_stmt|;
name|char
modifier|*
name|query
decl_stmt|;
name|linear_searcher
name|searcher
decl_stmt|;
name|public
label|:
name|search_list_iterator
argument_list|(
name|search_list
operator|*
argument_list|,
specifier|const
name|char
operator|*
name|query
argument_list|)
expr_stmt|;
operator|~
name|search_list_iterator
argument_list|()
expr_stmt|;
name|int
name|next
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|reference_id
modifier|*
init|=
literal|0
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|search_item
block|{
name|protected
label|:
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|filename_id
decl_stmt|;
name|public
label|:
name|search_item
modifier|*
name|next
decl_stmt|;
name|search_item
argument_list|(
argument|const char *nm
argument_list|,
argument|int fid
argument_list|)
empty_stmt|;
name|virtual
name|search_item_iterator
modifier|*
name|make_search_item_iterator
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
operator|~
name|search_item
argument_list|()
expr_stmt|;
name|int
name|is_named
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|int
name|next_filename_id
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|search_item_iterator
block|{
name|char
name|shut_g_plus_plus_up
decl_stmt|;
name|public
label|:
name|virtual
operator|~
name|search_item_iterator
argument_list|()
expr_stmt|;
name|virtual
name|int
name|next
parameter_list|(
specifier|const
name|linear_searcher
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|ptr
parameter_list|,
name|int
modifier|*
name|lenp
parameter_list|,
name|reference_id
modifier|*
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|search_item
modifier|*
name|make_index_search_item
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|int
name|fid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|search_item
modifier|*
name|make_linear_search_item
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|int
name|fid
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|linear_truncate_len
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|linear_ignore_fields
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|verify_flag
decl_stmt|;
end_decl_stmt

end_unit

