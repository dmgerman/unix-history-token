begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C -*-
end_comment

begin_comment
comment|/* Copyright (C) 1994, 2000, 2001, 2003 Free Software Foundation, Inc.      Written by Francisco Andrés Verdú<pandres@dragonet.es>  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_comment
comment|/*  This file contains a set of utility functions to use canon CAPSL printers  *  (lbp-4 and lbp-8 series printers) */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LBP_H
end_ifndef

begin_define
define|#
directive|define
name|LBP_H
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_decl_stmt
specifier|static
name|FILE
modifier|*
name|lbpoutput
init|=
name|NULL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|FILE
modifier|*
name|vdmoutput
init|=
name|NULL
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpinit
parameter_list|(
name|FILE
modifier|*
name|outfile
parameter_list|)
block|{
name|lbpoutput
operator|=
name|outfile
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
comment|/* Taken from cjet */
name|va_list
name|stuff
decl_stmt|;
name|va_start
argument_list|(
name|stuff
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|vfprintf
argument_list|(
name|lbpoutput
argument_list|,
name|format
argument_list|,
name|stuff
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|stuff
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpputs
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
name|fputs
argument_list|(
name|data
argument_list|,
name|lbpoutput
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpputc
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|fputc
argument_list|(
name|c
argument_list|,
name|lbpoutput
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpsavestatus
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[%d%%y"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbprestorestatus
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[%d%cz"
argument_list|,
name|index
argument_list|,
literal|'%'
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpsavepos
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[1;%d;0x"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbprestorepos
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[0;%d;0x"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbprestoreposx
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[0;%d;1x"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpmoverel
parameter_list|(
name|int
name|despl
parameter_list|,
name|char
name|direction
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[%d%c"
argument_list|,
name|despl
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbplinerel
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|despl
parameter_list|,
name|char
name|direction
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[%d;0;9{\033[%d%c\033[9}"
argument_list|,
name|width
argument_list|,
name|despl
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpmoveabs
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[%d;%df"
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbplineto
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|)
block|{
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[%d;0;9{"
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|lbpmoveabs
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[9}\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|lbpruleabs
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|hsize
parameter_list|,
name|int
name|vsize
parameter_list|)
block|{
name|lbpmoveabs
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[0;9;000s"
argument_list|)
expr_stmt|;
name|lbpmoveabs
argument_list|(
name|x
operator|+
name|hsize
argument_list|,
name|y
operator|+
name|vsize
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|lbpoutput
argument_list|,
literal|"\033[9r"
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|static
specifier|inline
name|void
name|vdmprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|vdmnum
parameter_list|(
name|int
name|num
parameter_list|,
name|char
modifier|*
name|result
parameter_list|)
block|{
name|char
name|b1
decl_stmt|,
name|b2
decl_stmt|,
name|b3
decl_stmt|;
name|char
modifier|*
name|p
init|=
name|result
decl_stmt|;
name|int
name|nm
decl_stmt|;
name|nm
operator|=
name|abs
argument_list|(
name|num
argument_list|)
expr_stmt|;
comment|/* First byte 1024 - 32768 */
name|b1
operator|=
operator|(
operator|(
name|nm
operator|>>
literal|10
operator|)
operator|&
literal|0x3F
operator|)
expr_stmt|;
if|if
condition|(
name|b1
condition|)
operator|*
name|p
operator|++
operator|=
name|b1
operator||
literal|0x40
expr_stmt|;
comment|/* Second Byte 16 - 1024 */
name|b2
operator|=
operator|(
operator|(
name|nm
operator|>>
literal|4
operator|)
operator|&
literal|0x3F
operator|)
expr_stmt|;
if|if
condition|(
name|b1
operator|||
name|b2
condition|)
operator|*
name|p
operator|++
operator|=
name|b2
operator||
literal|0x40
expr_stmt|;
comment|/* Third byte 0 - 15 */
name|b3
operator|=
operator|(
operator|(
name|nm
operator|&
literal|0x0F
operator|)
operator||
literal|32
operator|)
expr_stmt|;
if|if
condition|(
name|num
operator|>=
literal|0
condition|)
name|b3
operator||=
literal|16
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|b3
expr_stmt|;
operator|*
name|p
operator|=
literal|0x00
expr_stmt|;
comment|/* End of the resulting string */
return|return
name|result
return|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmorigin
parameter_list|(
name|int
name|newx
parameter_list|,
name|int
name|newy
parameter_list|)
block|{
name|char
name|nx
index|[
literal|4
index|]
decl_stmt|,
name|ny
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"}\"%s%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|newx
argument_list|,
name|nx
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|newy
argument_list|,
name|ny
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* vdmorigin */
end_comment

begin_function
specifier|static
specifier|inline
name|FILE
modifier|*
name|vdminit
parameter_list|(
name|FILE
modifier|*
name|vdmfile
parameter_list|)
block|{
name|char
name|scale
index|[
literal|4
index|]
decl_stmt|,
name|size
index|[
literal|4
index|]
decl_stmt|,
name|lineend
index|[
literal|4
index|]
decl_stmt|;
comment|/*  vdmoutput = tmpfile();*/
name|vdmoutput
operator|=
name|vdmfile
expr_stmt|;
comment|/* Initialize the VDM mode */
name|vdmprintf
argument_list|(
literal|"\033[0&}#GROLBP\x1e!0%s%s\x1e$\x1e}F%s\x1e"
argument_list|,\
name|vdmnum
argument_list|(
operator|-
literal|3
argument_list|,
name|scale
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|1
argument_list|,
name|lineend
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|vdmoutput
return|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmend
parameter_list|()
block|{
name|vdmprintf
argument_list|(
literal|"}p\x1e"
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
comment|/* Taken from cjet */
name|va_list
name|stuff
decl_stmt|;
if|if
condition|(
name|vdmoutput
operator|==
name|NULL
condition|)
name|vdminit
argument_list|(
name|tmpfile
argument_list|()
argument_list|)
expr_stmt|;
name|va_start
argument_list|(
name|stuff
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|vfprintf
argument_list|(
name|vdmoutput
argument_list|,
name|format
argument_list|,
name|stuff
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|stuff
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmsetfillmode
parameter_list|(
name|int
name|pattern
parameter_list|,
name|int
name|perimeter
parameter_list|,
name|int
name|inverted
parameter_list|)
block|{
name|char
name|patt
index|[
literal|4
index|]
decl_stmt|,
name|perim
index|[
literal|4
index|]
decl_stmt|,
name|rot
index|[
literal|4
index|]
decl_stmt|,
comment|/* rotation */
name|espejo
index|[
literal|4
index|]
decl_stmt|,
comment|/* espejo */
name|inv
index|[
literal|4
index|]
decl_stmt|;
comment|/* Inverted */
name|vdmprintf
argument_list|(
literal|"I%s%s%s%s%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|pattern
argument_list|,
name|patt
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|perimeter
argument_list|,
name|perim
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|0
argument_list|,
name|rot
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|0
argument_list|,
name|espejo
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|inverted
argument_list|,
name|inv
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmcircle
parameter_list|(
name|int
name|centerx
parameter_list|,
name|int
name|centery
parameter_list|,
name|int
name|radius
parameter_list|)
block|{
name|char
name|x
index|[
literal|4
index|]
decl_stmt|,
name|y
index|[
literal|4
index|]
decl_stmt|,
name|rad
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"5%s%s%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|centerx
argument_list|,
name|x
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|centery
argument_list|,
name|y
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|radius
argument_list|,
name|rad
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmaarc
parameter_list|(
name|int
name|centerx
parameter_list|,
name|int
name|centery
parameter_list|,
name|int
name|radius
parameter_list|,
name|int
name|startangle
parameter_list|,
name|int
name|angle
parameter_list|,
name|int
name|style
parameter_list|,
name|int
name|arcopen
parameter_list|)
block|{
name|char
name|x
index|[
literal|4
index|]
decl_stmt|,
name|y
index|[
literal|4
index|]
decl_stmt|,
name|rad
index|[
literal|4
index|]
decl_stmt|,
name|stx
index|[
literal|4
index|]
decl_stmt|,
name|sty
index|[
literal|4
index|]
decl_stmt|,
name|styl
index|[
literal|4
index|]
decl_stmt|,
name|op
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"}6%s%s%s%s%s%s%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|arcopen
argument_list|,
name|op
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|centerx
argument_list|,
name|x
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|centery
argument_list|,
name|y
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|radius
argument_list|,
name|rad
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|startangle
argument_list|,
name|stx
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|angle
argument_list|,
name|sty
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|style
argument_list|,
name|styl
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmvarc
parameter_list|(
name|int
name|centerx
parameter_list|,
name|int
name|centery
parameter_list|,
name|int
name|radius
parameter_list|,
name|int
name|startx
parameter_list|,
name|int
name|starty
parameter_list|,
name|int
name|endx
parameter_list|,
name|int
name|endy
parameter_list|,\
name|int
name|style
parameter_list|,
name|int
name|arcopen
parameter_list|)
block|{
name|char
name|x
index|[
literal|4
index|]
decl_stmt|,
name|y
index|[
literal|4
index|]
decl_stmt|,
name|rad
index|[
literal|4
index|]
decl_stmt|,
name|stx
index|[
literal|4
index|]
decl_stmt|,
name|sty
index|[
literal|4
index|]
decl_stmt|,
name|enx
index|[
literal|4
index|]
decl_stmt|,
name|eny
index|[
literal|4
index|]
decl_stmt|,
name|styl
index|[
literal|4
index|]
decl_stmt|,
name|op
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"}6%s%s%s%s%s%s%s%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|arcopen
argument_list|,
name|op
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|centerx
argument_list|,
name|x
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|centery
argument_list|,
name|y
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|radius
argument_list|,
name|rad
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|startx
argument_list|,
name|stx
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|starty
argument_list|,
name|sty
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|endx
argument_list|,
name|enx
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|endy
argument_list|,
name|eny
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|style
argument_list|,
name|styl
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmellipse
parameter_list|(
name|int
name|centerx
parameter_list|,
name|int
name|centery
parameter_list|,
name|int
name|radiusx
parameter_list|,
name|int
name|radiusy
parameter_list|,
name|int
name|rotation
parameter_list|)
block|{
name|char
name|x
index|[
literal|4
index|]
decl_stmt|,
name|y
index|[
literal|4
index|]
decl_stmt|,
name|radx
index|[
literal|4
index|]
decl_stmt|,
name|rady
index|[
literal|4
index|]
decl_stmt|,
name|rotat
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"}7%s%s%s%s%s\x1e\n"
argument_list|,
name|vdmnum
argument_list|(
name|centerx
argument_list|,
name|x
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|centery
argument_list|,
name|y
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|radiusx
argument_list|,
name|radx
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|radiusy
argument_list|,
name|rady
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|rotation
argument_list|,
name|rotat
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmsetlinetype
parameter_list|(
name|int
name|lintype
parameter_list|)
block|{
name|char
name|ltyp
index|[
literal|4
index|]
decl_stmt|,
name|expfact
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"E1%s%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|lintype
argument_list|,
name|ltyp
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|1
argument_list|,
name|expfact
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmsetlinestyle
parameter_list|(
name|int
name|lintype
parameter_list|,
name|int
name|pattern
parameter_list|,
name|int
name|unionstyle
parameter_list|)
block|{
name|char
name|patt
index|[
literal|4
index|]
decl_stmt|,
name|ltip
index|[
literal|4
index|]
decl_stmt|,
name|rot
index|[
literal|4
index|]
decl_stmt|,
comment|/* rotation */
name|espejo
index|[
literal|4
index|]
decl_stmt|,
comment|/* espejo */
name|in
index|[
literal|4
index|]
decl_stmt|;
comment|/* Inverted */
name|vdmprintf
argument_list|(
literal|"}G%s%s%s%s%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|lintype
argument_list|,
name|ltip
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|pattern
argument_list|,
name|patt
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|0
argument_list|,
name|rot
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|0
argument_list|,
name|espejo
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
literal|0
argument_list|,
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|vdmprintf
argument_list|(
literal|"}F%s"
argument_list|,
name|vdmnum
argument_list|(
name|unionstyle
argument_list|,
name|rot
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmlinewidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|char
name|wh
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"F1%s\x1e"
argument_list|,
name|vdmnum
argument_list|(
name|width
argument_list|,
name|wh
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|static
specifier|inline
name|void
name|vdmrectangle
parameter_list|(
name|int
name|origx
parameter_list|,
name|int
name|origy
parameter_list|,
name|int
name|dstx
parameter_list|,
name|int
name|dsty
parameter_list|)
block|{
name|char
name|xcoord
index|[
literal|4
index|]
decl_stmt|,
name|ycoord
index|[
literal|4
index|]
decl_stmt|,
name|sdstx
index|[
literal|4
index|]
decl_stmt|,
name|sdsty
index|[
literal|4
index|]
decl_stmt|;
name|vdmprintf
argument_list|(
literal|"}:%s%s%s%s\x1e\n"
argument_list|,
name|vdmnum
argument_list|(
name|origx
argument_list|,
name|xcoord
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|dstx
argument_list|,
name|sdstx
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|origy
argument_list|,
name|ycoord
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
name|dsty
argument_list|,
name|sdsty
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* polyline */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|vdmpolyline
parameter_list|(
name|int
name|numpoints
parameter_list|,
name|int
modifier|*
name|points
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
modifier|*
name|p
init|=
name|points
decl_stmt|;
name|char
name|xcoord
index|[
literal|4
index|]
decl_stmt|,
name|ycoord
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|numpoints
operator|<
literal|2
condition|)
return|return;
name|vdmprintf
argument_list|(
literal|"1%s%s"
argument_list|,
name|vdmnum
argument_list|(
operator|*
name|p
argument_list|,
name|xcoord
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
operator|*
operator|(
name|p
operator|+
literal|1
operator|)
argument_list|,
name|ycoord
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|numpoints
condition|;
name|i
operator|++
control|)
block|{
name|vdmprintf
argument_list|(
literal|"%s%s"
argument_list|,
name|vdmnum
argument_list|(
operator|*
name|p
argument_list|,
name|xcoord
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
operator|*
operator|(
name|p
operator|+
literal|1
operator|)
argument_list|,
name|ycoord
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
block|}
empty_stmt|;
comment|/* for */
name|vdmprintf
argument_list|(
literal|"\x1e\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* polyline */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|vdmpolygon
parameter_list|(
name|int
name|numpoints
parameter_list|,
name|int
modifier|*
name|points
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
modifier|*
name|p
init|=
name|points
decl_stmt|;
name|char
name|xcoord
index|[
literal|4
index|]
decl_stmt|,
name|ycoord
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|numpoints
operator|<
literal|2
condition|)
return|return;
name|vdmprintf
argument_list|(
literal|"2%s%s"
argument_list|,
name|vdmnum
argument_list|(
operator|*
name|p
argument_list|,
name|xcoord
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
operator|*
operator|(
name|p
operator|+
literal|1
operator|)
argument_list|,
name|ycoord
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|numpoints
condition|;
name|i
operator|++
control|)
block|{
name|vdmprintf
argument_list|(
literal|"%s%s"
argument_list|,
name|vdmnum
argument_list|(
operator|*
name|p
argument_list|,
name|xcoord
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
operator|*
operator|(
name|p
operator|+
literal|1
operator|)
argument_list|,
name|ycoord
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
block|}
empty_stmt|;
comment|/* for */
name|vdmprintf
argument_list|(
literal|"\x1e\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* vdmpolygon */
end_comment

begin_comment
comment|/************************************************************************  *		Highter level auxiliary functions			*  ************************************************************************/
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|vdminited
parameter_list|()
block|{
return|return
operator|(
name|vdmoutput
operator|!=
name|NULL
operator|)
return|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* vdminited */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|vdmline
parameter_list|(
name|int
name|startx
parameter_list|,
name|int
name|starty
parameter_list|,
name|int
name|sizex
parameter_list|,
name|int
name|sizey
parameter_list|)
block|{
name|int
name|points
index|[
literal|4
index|]
decl_stmt|;
name|points
index|[
literal|0
index|]
operator|=
name|startx
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|starty
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|sizex
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|sizey
expr_stmt|;
name|vdmpolyline
argument_list|(
literal|2
argument_list|,
name|points
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/*#define         THRESHOLD       .05    */
end_comment

begin_comment
comment|/* inch */
end_comment

begin_define
define|#
directive|define
name|THRESHOLD
value|1
end_define

begin_comment
comment|/* points (1/300 inch) */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|splinerel
parameter_list|(
name|double
name|px
parameter_list|,
name|double
name|py
parameter_list|,
name|int
name|flush
parameter_list|)
block|{
specifier|static
name|int
name|lx
init|=
literal|0
decl_stmt|,
name|ly
init|=
literal|0
decl_stmt|;
specifier|static
name|float
name|pend
init|=
literal|0.0
decl_stmt|;
specifier|static
name|int
name|dy
init|=
literal|0
decl_stmt|,
name|despx
init|=
literal|0
decl_stmt|,
name|despy
init|=
literal|0
decl_stmt|,
name|sigpend
init|=
literal|0
decl_stmt|;
name|int
name|dxnew
decl_stmt|,
name|dynew
decl_stmt|,
name|sg
decl_stmt|;
name|char
name|xcoord
index|[
literal|4
index|]
decl_stmt|,
name|ycoord
index|[
literal|4
index|]
decl_stmt|;
name|float
name|npend
decl_stmt|;
if|if
condition|(
name|flush
operator|==
operator|-
literal|1
condition|)
block|{
name|lx
operator|=
operator|(
name|int
operator|)
name|px
expr_stmt|;
name|ly
operator|=
operator|(
name|int
operator|)
name|py
expr_stmt|;
return|return;
block|}
empty_stmt|;
if|if
condition|(
name|flush
operator|==
literal|0
condition|)
block|{
name|dxnew
operator|=
operator|(
name|int
operator|)
name|px
operator|-
name|lx
expr_stmt|;
name|dynew
operator|=
operator|(
name|int
operator|)
name|py
operator|-
name|ly
expr_stmt|;
if|if
condition|(
operator|(
name|dxnew
operator|==
literal|0
operator|)
operator|&&
operator|(
name|dynew
operator|==
literal|0
operator|)
condition|)
return|return;
name|sg
operator|=
operator|(
name|dxnew
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
literal|0
expr_stmt|;
comment|/*  fprintf(stderr,"s (%d,%d) (%d,%d)\n",dxnew,dynew,despx,despy);*/
if|if
condition|(
name|dynew
operator|==
literal|0
condition|)
block|{
name|despx
operator|=
name|dxnew
expr_stmt|;
if|if
condition|(
operator|(
name|sg
operator|==
name|sigpend
operator|)
operator|&&
operator|(
name|dy
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
empty_stmt|;
name|dy
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|dy
operator|=
literal|1
expr_stmt|;
name|npend
operator|=
operator|(
literal|1.0
operator|*
name|dxnew
operator|)
operator|/
name|dynew
expr_stmt|;
if|if
condition|(
operator|(
name|npend
operator|==
name|pend
operator|)
operator|&&
operator|(
name|sigpend
operator|==
name|sg
operator|)
condition|)
block|{
name|despy
operator|=
name|dynew
expr_stmt|;
name|despx
operator|=
name|dxnew
expr_stmt|;
return|return;
block|}
else|else
block|{
name|sigpend
operator|=
name|sg
expr_stmt|;
name|pend
operator|=
name|npend
expr_stmt|;
block|}
empty_stmt|;
comment|/* else (( npend == pend)&& ... */
block|}
empty_stmt|;
comment|/* else (if (dynew == 0)) */
block|}
empty_stmt|;
comment|/* if (!flush ) */
comment|/* if we've changed direction we must draw the line */
comment|/*  fprintf(stderr," (%d) %.2f,%.2f\n",flush,(float)px,(float)py);*/
if|if
condition|(
operator|(
name|despx
operator|!=
literal|0
operator|)
operator|||
operator|(
name|despy
operator|!=
literal|0
operator|)
condition|)
name|vdmprintf
argument_list|(
literal|"%s%s"
argument_list|,
name|vdmnum
argument_list|(
name|despx
argument_list|,
name|xcoord
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|despy
argument_list|,
name|ycoord
argument_list|)
argument_list|)
expr_stmt|;
comment|/*if ((despx != 0) || (despy != 0)) fprintf(stderr,"2    *%d,%d\n",despx,despy);*/
if|if
condition|(
name|flush
condition|)
block|{
name|dxnew
operator|=
name|dy
operator|=
name|despx
operator|=
name|despy
operator|=
literal|0
expr_stmt|;
return|return;
block|}
empty_stmt|;
comment|/* if (flush) */
name|dxnew
operator|-=
name|despx
expr_stmt|;
name|dynew
operator|-=
name|despy
expr_stmt|;
if|if
condition|(
operator|(
name|dxnew
operator|!=
literal|0
operator|)
operator|||
operator|(
name|dynew
operator|!=
literal|0
operator|)
condition|)
name|vdmprintf
argument_list|(
literal|"%s%s"
argument_list|,
name|vdmnum
argument_list|(
name|dxnew
argument_list|,
name|xcoord
argument_list|)
argument_list|,\
name|vdmnum
argument_list|(
name|dynew
argument_list|,
name|ycoord
argument_list|)
argument_list|)
expr_stmt|;
comment|/*  if ((dxnew != 0) || (dynew != 0)) fprintf(stderr,"3  *  %d,%d\n",dxnew,dynew);*/
name|lx
operator|=
operator|(
name|int
operator|)
name|px
expr_stmt|;
name|ly
operator|=
operator|(
name|int
operator|)
name|py
expr_stmt|;
name|dxnew
operator|=
name|dy
operator|=
name|despx
operator|=
name|despy
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* splinerel */
end_comment

begin_comment
comment|/**********************************************************************  *  The following code to draw splines is adapted from the transfig package  */
end_comment

begin_function
specifier|static
name|void
name|quadratic_spline
parameter_list|(
name|double
name|a1
parameter_list|,
name|double
name|b1
parameter_list|,
name|double
name|a2
parameter_list|,
name|double
name|b2
parameter_list|, \
name|double
name|a3
parameter_list|,
name|double
name|b3
parameter_list|,
name|double
name|a4
parameter_list|,
name|double
name|b4
parameter_list|)
block|{
name|double
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x4
decl_stmt|,
name|y4
decl_stmt|;
name|double
name|xmid
decl_stmt|,
name|ymid
decl_stmt|;
name|x1
operator|=
name|a1
expr_stmt|;
name|y1
operator|=
name|b1
expr_stmt|;
name|x4
operator|=
name|a4
expr_stmt|;
name|y4
operator|=
name|b4
expr_stmt|;
name|xmid
operator|=
operator|(
name|a2
operator|+
name|a3
operator|)
operator|/
literal|2.0
expr_stmt|;
name|ymid
operator|=
operator|(
name|b2
operator|+
name|b3
operator|)
operator|/
literal|2.0
expr_stmt|;
if|if
condition|(
operator|(
name|fabs
argument_list|(
name|x1
operator|-
name|xmid
argument_list|)
operator|<
name|THRESHOLD
operator|)
operator|&&
operator|(
name|fabs
argument_list|(
name|y1
operator|-
name|ymid
argument_list|)
operator|<
name|THRESHOLD
operator|)
condition|)
block|{
name|splinerel
argument_list|(
name|xmid
argument_list|,
name|ymid
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*	    fprintf(tfp, "PA%.4f,%.4f;\n", xmid, ymid);*/
block|}
else|else
block|{
name|quadratic_spline
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|(
operator|(
name|x1
operator|+
name|a2
operator|)
operator|/
literal|2.0
operator|)
argument_list|,
operator|(
operator|(
name|y1
operator|+
name|b2
operator|)
operator|/
literal|2.0
operator|)
argument_list|,
operator|(
operator|(
literal|3.0
operator|*
name|a2
operator|+
name|a3
operator|)
operator|/
literal|4.0
operator|)
argument_list|,
operator|(
operator|(
literal|3.0
operator|*
name|b2
operator|+
name|b3
operator|)
operator|/
literal|4.0
operator|)
argument_list|,
name|xmid
argument_list|,
name|ymid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|fabs
argument_list|(
name|xmid
operator|-
name|x4
argument_list|)
operator|<
name|THRESHOLD
operator|)
operator|&&
operator|(
name|fabs
argument_list|(
name|ymid
operator|-
name|y4
argument_list|)
operator|<
name|THRESHOLD
operator|)
condition|)
block|{
name|splinerel
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*	    fprintf(tfp, "PA%.4f,%.4f;\n", x4, y4);*/
block|}
else|else
block|{
name|quadratic_spline
argument_list|(
name|xmid
argument_list|,
name|ymid
argument_list|,
operator|(
operator|(
name|a2
operator|+
literal|3.0
operator|*
name|a3
operator|)
operator|/
literal|4.0
operator|)
argument_list|,
operator|(
operator|(
name|b2
operator|+
literal|3.0
operator|*
name|b3
operator|)
operator|/
literal|4.0
operator|)
argument_list|,
operator|(
operator|(
name|a3
operator|+
name|x4
operator|)
operator|/
literal|2.0
operator|)
argument_list|,
operator|(
operator|(
name|b3
operator|+
name|y4
operator|)
operator|/
literal|2.0
operator|)
argument_list|,
name|x4
argument_list|,
name|y4
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* quadratic_spline */
end_comment

begin_define
define|#
directive|define
name|XCOORD
parameter_list|(
name|i
parameter_list|)
value|numbers[(2*i)]
end_define

begin_define
define|#
directive|define
name|YCOORD
parameter_list|(
name|i
parameter_list|)
value|numbers[(2*i)+1]
end_define

begin_function
specifier|static
name|void
name|vdmspline
parameter_list|(
name|int
name|numpoints
parameter_list|,
name|int
name|ox
parameter_list|,
name|int
name|oy
parameter_list|,
name|int
modifier|*
name|numbers
parameter_list|)
block|{
name|double
name|cx1
decl_stmt|,
name|cy1
decl_stmt|,
name|cx2
decl_stmt|,
name|cy2
decl_stmt|,
name|cx3
decl_stmt|,
name|cy3
decl_stmt|,
name|cx4
decl_stmt|,
name|cy4
decl_stmt|;
name|double
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|;
name|char
name|xcoord
index|[
literal|4
index|]
decl_stmt|,
name|ycoord
index|[
literal|4
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
comment|/*p	 = s->points; 	x1	 = p->x/ppi;*/
name|x1
operator|=
name|ox
expr_stmt|;
name|y1
operator|=
name|oy
expr_stmt|;
comment|/*	p	 = p->next; 	x2	 = p->x/ppi; 	y2	 = p->y/ppi;*/
name|x2
operator|=
name|ox
operator|+
name|XCOORD
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|y2
operator|=
name|oy
operator|+
name|YCOORD
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cx1
operator|=
operator|(
name|x1
operator|+
name|x2
operator|)
operator|/
literal|2.0
expr_stmt|;
name|cy1
operator|=
operator|(
name|y1
operator|+
name|y2
operator|)
operator|/
literal|2.0
expr_stmt|;
name|cx2
operator|=
operator|(
name|x1
operator|+
literal|3.0
operator|*
name|x2
operator|)
operator|/
literal|4.0
expr_stmt|;
name|cy2
operator|=
operator|(
name|y1
operator|+
literal|3.0
operator|*
name|y2
operator|)
operator|/
literal|4.0
expr_stmt|;
comment|/*	fprintf(stderr,"Spline %d (%d,%d)\n",numpoints,(int)x1,(int)y1);*/
name|vdmprintf
argument_list|(
literal|"1%s%s"
argument_list|,
name|vdmnum
argument_list|(
operator|(
name|int
operator|)
name|x1
argument_list|,
name|xcoord
argument_list|)
argument_list|,
name|vdmnum
argument_list|(
operator|(
name|int
operator|)
name|y1
argument_list|,
name|ycoord
argument_list|)
argument_list|)
expr_stmt|;
name|splinerel
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|splinerel
argument_list|(
name|cx1
argument_list|,
name|cy1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*	    fprintf(tfp, "PA%.4f,%.4f;PD%.4f,%.4f;\n", 		    x1, y1, cx1, cy1);*/
comment|/*for (p = p->next; p != NULL; p = p->next) {*/
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
operator|(
name|numpoints
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|x1
operator|=
name|x2
expr_stmt|;
name|y1
operator|=
name|y2
expr_stmt|;
comment|/*	    x2	 = p->x/ppi; 	    y2	 = p->y/ppi;*/
name|x2
operator|=
name|x1
operator|+
name|XCOORD
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|y2
operator|=
name|y1
operator|+
name|YCOORD
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|cx3
operator|=
operator|(
literal|3.0
operator|*
name|x1
operator|+
name|x2
operator|)
operator|/
literal|4.0
expr_stmt|;
name|cy3
operator|=
operator|(
literal|3.0
operator|*
name|y1
operator|+
name|y2
operator|)
operator|/
literal|4.0
expr_stmt|;
name|cx4
operator|=
operator|(
name|x1
operator|+
name|x2
operator|)
operator|/
literal|2.0
expr_stmt|;
name|cy4
operator|=
operator|(
name|y1
operator|+
name|y2
operator|)
operator|/
literal|2.0
expr_stmt|;
comment|/* fprintf(stderr,"Point (%d,%d) - (%d,%d)\n",(int)x1,(int)(y1),(int)x2,(int)y2);*/
name|quadratic_spline
argument_list|(
name|cx1
argument_list|,
name|cy1
argument_list|,
name|cx2
argument_list|,
name|cy2
argument_list|,
name|cx3
argument_list|,
name|cy3
argument_list|,
name|cx4
argument_list|,
name|cy4
argument_list|)
expr_stmt|;
name|cx1
operator|=
name|cx4
expr_stmt|;
name|cy1
operator|=
name|cy4
expr_stmt|;
name|cx2
operator|=
operator|(
name|x1
operator|+
literal|3.0
operator|*
name|x2
operator|)
operator|/
literal|4.0
expr_stmt|;
name|cy2
operator|=
operator|(
name|y1
operator|+
literal|3.0
operator|*
name|y2
operator|)
operator|/
literal|4.0
expr_stmt|;
block|}
name|x1
operator|=
name|x2
expr_stmt|;
name|y1
operator|=
name|y2
expr_stmt|;
comment|/*	p	 = s->points->next; 	x2	 = p->x/ppi; 	y2	 = p->y/ppi;*/
name|x2
operator|=
name|ox
operator|+
name|XCOORD
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|y2
operator|=
name|oy
operator|+
name|YCOORD
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cx3
operator|=
operator|(
literal|3.0
operator|*
name|x1
operator|+
name|x2
operator|)
operator|/
literal|4.0
expr_stmt|;
name|cy3
operator|=
operator|(
literal|3.0
operator|*
name|y1
operator|+
name|y2
operator|)
operator|/
literal|4.0
expr_stmt|;
name|cx4
operator|=
operator|(
name|x1
operator|+
name|x2
operator|)
operator|/
literal|2.0
expr_stmt|;
name|cy4
operator|=
operator|(
name|y1
operator|+
name|y2
operator|)
operator|/
literal|2.0
expr_stmt|;
name|splinerel
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|splinerel
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/*vdmprintf("%s%s",vdmnum((int)(x1-lx),xcoord),\ 			vdmnum((int)(y1-ly),ycoord));*/
name|vdmprintf
argument_list|(
literal|"\x1e\n"
argument_list|)
expr_stmt|;
comment|/*	    fprintf(tfp, "PA%.4f,%.4f;PU;\n", x1, y1);*/
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* vdmspline */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

