begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 2002 Free Software Foundation, Inc.  *  *  Gaius Mulley (gaius@glam.ac.uk) wrote html-table.cc  *  *  html-table.h  *  *  provides the methods necessary to handle indentation and tab  *  positions using html tables.  */
end_comment

begin_comment
comment|/* This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_include
include|#
directive|include
file|"html.h"
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|HTML_TABLE_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|HTML_TABLE_H
end_define

begin_typedef
typedef|typedef
struct|struct
name|tab_position
block|{
name|char
name|alignment
decl_stmt|;
name|int
name|position
decl_stmt|;
name|struct
name|tab_position
modifier|*
name|next
decl_stmt|;
block|}
name|tab_position
typedef|;
end_typedef

begin_decl_stmt
name|class
name|tabs
block|{
name|public
label|:
name|tabs
argument_list|()
expr_stmt|;
operator|~
name|tabs
argument_list|()
expr_stmt|;
name|void
name|clear
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|compatible
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|init
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|find_tab
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|int
name|get_tab_pos
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|char
name|get_tab_align
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|dump_tabs
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|delete_list
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|tab_position
modifier|*
name|tab
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/*  *  define a column  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|cols
block|{
name|int
name|left
decl_stmt|,
name|right
decl_stmt|;
name|int
name|no
decl_stmt|;
name|char
name|alignment
decl_stmt|;
name|struct
name|cols
modifier|*
name|next
decl_stmt|;
block|}
name|cols
typedef|;
end_typedef

begin_decl_stmt
name|class
name|html_table
block|{
name|public
label|:
name|html_table
argument_list|(
argument|simple_output *op
argument_list|,
argument|int linelen
argument_list|)
empty_stmt|;
operator|~
name|html_table
argument_list|(
name|void
argument_list|)
expr_stmt|;
name|int
name|add_column
parameter_list|(
name|int
name|coln
parameter_list|,
name|int
name|hstart
parameter_list|,
name|int
name|hend
parameter_list|,
name|char
name|align
parameter_list|)
function_decl|;
name|cols
modifier|*
name|get_column
parameter_list|(
name|int
name|coln
parameter_list|)
function_decl|;
name|int
name|insert_column
parameter_list|(
name|int
name|coln
parameter_list|,
name|int
name|hstart
parameter_list|,
name|int
name|hend
parameter_list|,
name|char
name|align
parameter_list|)
function_decl|;
name|int
name|modify_column
parameter_list|(
name|cols
modifier|*
name|c
parameter_list|,
name|int
name|hstart
parameter_list|,
name|int
name|hend
parameter_list|,
name|char
name|align
parameter_list|)
function_decl|;
name|int
name|find_tab_column
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|int
name|find_column
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|int
name|get_tab_pos
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|char
name|get_tab_align
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|set_linelength
parameter_list|(
name|int
name|linelen
parameter_list|)
function_decl|;
name|int
name|no_columns
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|no_gaps
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|is_gap
parameter_list|(
name|cols
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|dump_table
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|emit_table_header
parameter_list|(
name|int
name|space
parameter_list|)
function_decl|;
name|void
name|emit_col
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|emit_new_row
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|emit_finish_table
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|get_right
parameter_list|(
name|cols
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|add_indent
parameter_list|(
name|int
name|indent
parameter_list|)
function_decl|;
name|void
name|finish_row
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|get_effective_linelength
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|tabs
modifier|*
name|tab_stops
decl_stmt|;
comment|/* tab stop positions */
name|private
label|:
name|cols
modifier|*
name|columns
decl_stmt|;
comment|/* column entries */
name|simple_output
modifier|*
name|out
decl_stmt|;
name|int
name|linelength
decl_stmt|;
name|cols
modifier|*
name|last_col
decl_stmt|;
comment|/* last column started */
name|int
name|start_space
decl_stmt|;
comment|/* encapsulate with<p></p> */
name|void
name|remove_cols
parameter_list|(
name|cols
modifier|*
name|c
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/*  *  the indentation wrapper.  *  Builds an indentation from a html-table.  *  This table is only emitted if the paragraph is emitted.  */
end_comment

begin_decl_stmt
name|class
name|html_indent
block|{
name|public
label|:
name|html_indent
argument_list|(
argument|simple_output *op
argument_list|,
argument|int ind
argument_list|,
argument|int pageoffset
argument_list|,
argument|int linelength
argument_list|)
empty_stmt|;
operator|~
name|html_indent
argument_list|(
name|void
argument_list|)
expr_stmt|;
name|void
name|begin
parameter_list|(
name|int
name|space
parameter_list|)
function_decl|;
comment|// called if we need to use the indent
name|void
name|get_reg
parameter_list|(
name|int
modifier|*
name|ind
parameter_list|,
name|int
modifier|*
name|pageoffset
parameter_list|,
name|int
modifier|*
name|linelength
parameter_list|)
function_decl|;
comment|// the indent is shutdown when it is deleted
name|private
label|:
name|void
name|end
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|is_used
decl_stmt|;
name|int
name|pg
decl_stmt|;
comment|// values of the registers as passed via initialization
name|int
name|ll
decl_stmt|;
name|int
name|in
decl_stmt|;
name|html_table
modifier|*
name|table
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

