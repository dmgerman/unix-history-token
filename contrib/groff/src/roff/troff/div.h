begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992, 2001 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_decl_stmt
name|class
name|diversion
block|{
name|friend
name|void
name|do_divert
parameter_list|(
name|int
name|append
parameter_list|,
name|int
name|boxing
parameter_list|)
function_decl|;
name|friend
name|void
name|end_diversions
parameter_list|()
function_decl|;
name|diversion
modifier|*
name|prev
decl_stmt|;
name|node
modifier|*
name|saved_line
decl_stmt|;
name|hunits
name|saved_width_total
decl_stmt|;
name|int
name|saved_space_total
decl_stmt|;
name|hunits
name|saved_saved_indent
decl_stmt|;
name|hunits
name|saved_target_text_length
decl_stmt|;
name|int
name|saved_prev_line_interrupted
decl_stmt|;
name|protected
label|:
name|symbol
name|nm
decl_stmt|;
name|vunits
name|vertical_position
decl_stmt|;
name|vunits
name|high_water_mark
decl_stmt|;
name|public
label|:
name|int
name|no_space_mode
decl_stmt|;
name|vunits
name|marked_place
decl_stmt|;
name|diversion
argument_list|(
argument|symbol s = NULL_SYMBOL
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|diversion
argument_list|()
expr_stmt|;
name|virtual
name|void
name|output
parameter_list|(
name|node
modifier|*
name|nd
parameter_list|,
name|int
name|retain_size
parameter_list|,
name|vunits
name|vs
parameter_list|,
name|vunits
name|post_vs
parameter_list|,
name|hunits
name|width
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|transparent_output
parameter_list|(
name|unsigned
name|char
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|transparent_output
parameter_list|(
name|node
modifier|*
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|space
parameter_list|(
name|vunits
name|distance
parameter_list|,
name|int
name|forced
init|=
literal|0
parameter_list|)
init|=
literal|0
function_decl|;
ifdef|#
directive|ifdef
name|COLUMN
name|virtual
name|void
name|vjustify
parameter_list|(
name|symbol
parameter_list|)
init|=
literal|0
function_decl|;
endif|#
directive|endif
comment|/* COLUMN */
name|vunits
name|get_vertical_position
parameter_list|()
block|{
return|return
name|vertical_position
return|;
block|}
name|vunits
name|get_high_water_mark
parameter_list|()
block|{
return|return
name|high_water_mark
return|;
block|}
name|virtual
name|vunits
name|distance_to_next_trap
parameter_list|()
init|=
literal|0
function_decl|;
name|void
name|need
parameter_list|(
name|vunits
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|get_diversion_name
parameter_list|()
block|{
return|return
name|nm
operator|.
name|contents
argument_list|()
return|;
block|}
name|virtual
name|void
name|set_diversion_trap
parameter_list|(
name|symbol
parameter_list|,
name|vunits
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|clear_diversion_trap
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|copy_file
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|macro
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|macro_diversion
range|:
name|public
name|diversion
block|{
name|macro
operator|*
name|mac
block|;
name|hunits
name|max_width
block|;
name|symbol
name|diversion_trap
block|;
name|vunits
name|diversion_trap_pos
block|;
name|public
operator|:
name|macro_diversion
argument_list|(
name|symbol
argument_list|,
name|int
argument_list|)
block|;
operator|~
name|macro_diversion
argument_list|()
block|;
name|void
name|output
argument_list|(
argument|node *nd
argument_list|,
argument|int retain_size
argument_list|,
argument|vunits vs
argument_list|,
argument|vunits post_vs
argument_list|,
argument|hunits width
argument_list|)
block|;
name|void
name|transparent_output
argument_list|(
argument|unsigned char
argument_list|)
block|;
name|void
name|transparent_output
argument_list|(
name|node
operator|*
argument_list|)
block|;
name|void
name|space
argument_list|(
argument|vunits distance
argument_list|,
argument|int forced =
literal|0
argument_list|)
block|;
ifdef|#
directive|ifdef
name|COLUMN
name|void
name|vjustify
argument_list|(
name|symbol
argument_list|)
block|;
endif|#
directive|endif
comment|/* COLUMN */
name|vunits
name|distance_to_next_trap
argument_list|()
block|;
name|void
name|set_diversion_trap
argument_list|(
name|symbol
argument_list|,
name|vunits
argument_list|)
block|;
name|void
name|clear_diversion_trap
argument_list|()
block|;
name|void
name|copy_file
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|trap
block|{
name|trap
modifier|*
name|next
decl_stmt|;
name|vunits
name|position
decl_stmt|;
name|symbol
name|nm
decl_stmt|;
name|trap
argument_list|(
name|symbol
argument_list|,
name|vunits
argument_list|,
name|trap
operator|*
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|output_file
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|top_level_diversion
range|:
name|public
name|diversion
block|{
name|int
name|page_number
block|;
name|int
name|page_count
block|;
name|int
name|last_page_count
block|;
name|vunits
name|page_length
block|;
name|hunits
name|prev_page_offset
block|;
name|hunits
name|page_offset
block|;
name|trap
operator|*
name|page_trap_list
block|;
name|trap
operator|*
name|find_next_trap
argument_list|(
name|vunits
operator|*
argument_list|)
block|;
name|int
name|have_next_page_number
block|;
name|int
name|next_page_number
block|;
name|int
name|ejecting_page
block|;
comment|// Is the current page being ejected?
name|public
operator|:
name|int
name|before_first_page
block|;
name|top_level_diversion
argument_list|()
block|;
name|void
name|output
argument_list|(
argument|node *nd
argument_list|,
argument|int retain_size
argument_list|,
argument|vunits vs
argument_list|,
argument|vunits post_vs
argument_list|,
argument|hunits width
argument_list|)
block|;
name|void
name|transparent_output
argument_list|(
argument|unsigned char
argument_list|)
block|;
name|void
name|transparent_output
argument_list|(
name|node
operator|*
argument_list|)
block|;
name|void
name|space
argument_list|(
argument|vunits distance
argument_list|,
argument|int forced =
literal|0
argument_list|)
block|;
ifdef|#
directive|ifdef
name|COLUMN
name|void
name|vjustify
argument_list|(
name|symbol
argument_list|)
block|;
endif|#
directive|endif
comment|/* COLUMN */
name|hunits
name|get_page_offset
argument_list|()
block|{
return|return
name|page_offset
return|;
block|}
name|vunits
name|get_page_length
argument_list|()
block|{
return|return
name|page_length
return|;
block|}
name|vunits
name|distance_to_next_trap
argument_list|()
block|;
name|void
name|add_trap
argument_list|(
argument|symbol nm
argument_list|,
argument|vunits pos
argument_list|)
block|;
name|void
name|change_trap
argument_list|(
argument|symbol nm
argument_list|,
argument|vunits pos
argument_list|)
block|;
name|void
name|remove_trap
argument_list|(
name|symbol
argument_list|)
block|;
name|void
name|remove_trap_at
argument_list|(
argument|vunits pos
argument_list|)
block|;
name|void
name|print_traps
argument_list|()
block|;
name|int
name|get_page_count
argument_list|()
block|{
return|return
name|page_count
return|;
block|}
name|int
name|get_page_number
argument_list|()
block|{
return|return
name|page_number
return|;
block|}
name|int
name|get_next_page_number
argument_list|()
block|;
name|void
name|set_page_number
argument_list|(
argument|int n
argument_list|)
block|{
name|page_number
operator|=
name|n
block|; }
name|int
name|begin_page
argument_list|()
block|;
name|void
name|set_next_page_number
argument_list|(
name|int
argument_list|)
block|;
name|void
name|set_page_length
argument_list|(
name|vunits
argument_list|)
block|;
name|void
name|copy_file
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|)
block|;
name|int
name|get_ejecting
argument_list|()
block|{
return|return
name|ejecting_page
return|;
block|}
name|void
name|set_ejecting
argument_list|()
block|{
name|ejecting_page
operator|=
literal|1
block|; }
name|friend
name|void
name|page_offset
argument_list|()
block|;
name|void
name|set_diversion_trap
argument_list|(
name|symbol
argument_list|,
name|vunits
argument_list|)
block|;
name|void
name|clear_diversion_trap
argument_list|()
block|;
name|void
name|set_last_page
argument_list|()
block|{
name|last_page_count
operator|=
name|page_count
block|; }
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|top_level_diversion
modifier|*
name|topdiv
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|diversion
modifier|*
name|curdiv
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|exit_started
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|done_end_macro
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|last_page_number
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|seen_last_page_ejector
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|spring_trap
parameter_list|(
name|symbol
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// implemented by input.c
end_comment

begin_decl_stmt
specifier|extern
name|int
name|trap_sprung_flag
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|postpone_traps
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|unpostpone_traps
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|push_page_ejector
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|continue_page_eject
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|handle_first_page_transition
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|blank_line
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|cleanup_and_exit
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

end_unit

