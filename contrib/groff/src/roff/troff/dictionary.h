begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin St - Fifth Floor, Boston, MA 02110-1301, USA. */
end_comment

begin_comment
comment|// there is no distinction between name with no value and name with NULL value
end_comment

begin_comment
comment|// null names are not permitted (they will be ignored).
end_comment

begin_struct
struct|struct
name|association
block|{
name|symbol
name|s
decl_stmt|;
name|void
modifier|*
name|v
decl_stmt|;
name|association
argument_list|()
operator|:
name|v
argument_list|(
literal|0
argument_list|)
block|{}
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|dictionary
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|dictionary_iterator
block|{
name|dictionary
modifier|*
name|dict
decl_stmt|;
name|int
name|i
decl_stmt|;
name|public
label|:
name|dictionary_iterator
argument_list|(
name|dictionary
operator|&
argument_list|)
expr_stmt|;
name|int
name|get
parameter_list|(
name|symbol
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|dictionary
block|{
name|int
name|size
decl_stmt|;
name|int
name|used
decl_stmt|;
name|double
name|threshold
decl_stmt|;
name|double
name|factor
decl_stmt|;
name|association
modifier|*
name|table
decl_stmt|;
name|void
name|rehash
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|public
label|:
name|dictionary
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|void
modifier|*
name|lookup
parameter_list|(
name|symbol
name|s
parameter_list|,
name|void
modifier|*
name|v
init|=
literal|0
parameter_list|)
function_decl|;
comment|// returns value associated with key
name|void
modifier|*
name|lookup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|// if second parameter not NULL, value will be replaced
name|void
modifier|*
name|remove
parameter_list|(
name|symbol
parameter_list|)
function_decl|;
name|friend
name|class
name|dictionary_iterator
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|object
block|{
name|int
name|rcount
decl_stmt|;
name|public
label|:
name|object
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|object
argument_list|()
expr_stmt|;
name|void
name|add_reference
parameter_list|()
function_decl|;
name|void
name|remove_reference
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|object_dictionary
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|object_dictionary_iterator
block|{
name|dictionary_iterator
name|di
decl_stmt|;
name|public
label|:
name|object_dictionary_iterator
argument_list|(
name|object_dictionary
operator|&
argument_list|)
expr_stmt|;
name|int
name|get
parameter_list|(
name|symbol
modifier|*
parameter_list|,
name|object
modifier|*
modifier|*
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|object_dictionary
block|{
name|dictionary
name|d
decl_stmt|;
name|public
label|:
name|object_dictionary
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|object
modifier|*
name|lookup
parameter_list|(
name|symbol
name|nm
parameter_list|)
function_decl|;
name|void
name|define
parameter_list|(
name|symbol
name|nm
parameter_list|,
name|object
modifier|*
name|obj
parameter_list|)
function_decl|;
name|void
name|rename
parameter_list|(
name|symbol
name|oldnm
parameter_list|,
name|symbol
name|newnm
parameter_list|)
function_decl|;
name|void
name|remove
parameter_list|(
name|symbol
name|nm
parameter_list|)
function_decl|;
name|int
name|alias
parameter_list|(
name|symbol
name|newnm
parameter_list|,
name|symbol
name|oldnm
parameter_list|)
function_decl|;
name|friend
name|class
name|object_dictionary_iterator
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
specifier|inline
name|int
name|object_dictionary_iterator
operator|::
name|get
argument_list|(
argument|symbol *sp
argument_list|,
argument|object **op
argument_list|)
block|{
return|return
name|di
operator|.
name|get
argument_list|(
name|sp
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|op
argument_list|)
return|;
block|}
end_expr_stmt

end_unit

