begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 2003, 2004 Free Software Foundation, Inc.  *  *  mtsm.h  *  *    written by Gaius Mulley (gaius@glam.ac.uk)  *  *  provides a minimal troff state machine which is necessary to  *  emit meta tags for the post-grohtml device driver.  */
end_comment

begin_comment
comment|/* This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin St - Fifth Floor, Boston, MA 02110-1301, USA. */
end_comment

begin_struct
struct|struct
name|int_value
block|{
name|int
name|value
decl_stmt|;
name|int
name|is_known
decl_stmt|;
name|int_value
argument_list|()
expr_stmt|;
operator|~
name|int_value
argument_list|()
expr_stmt|;
name|void
name|diff
parameter_list|(
name|FILE
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int_value
parameter_list|)
function_decl|;
name|int
name|differs
parameter_list|(
name|int_value
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|unset
parameter_list|()
function_decl|;
name|void
name|set_if_unknown
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_decl_stmt
name|struct
name|bool_value
range|:
name|public
name|int_value
block|{
name|bool_value
argument_list|()
block|;
operator|~
name|bool_value
argument_list|()
block|;
name|void
name|diff
argument_list|(
name|FILE
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|bool_value
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|units_value
range|:
name|public
name|int_value
block|{
name|units_value
argument_list|()
block|;
operator|~
name|units_value
argument_list|()
block|;
name|void
name|diff
argument_list|(
name|FILE
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|units_value
argument_list|)
block|;
name|int
name|differs
argument_list|(
name|units_value
argument_list|)
block|;
name|void
name|set
argument_list|(
name|hunits
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|string_value
block|{
name|string
name|value
decl_stmt|;
name|int
name|is_known
decl_stmt|;
name|string_value
argument_list|()
expr_stmt|;
operator|~
name|string_value
argument_list|()
expr_stmt|;
name|void
name|diff
parameter_list|(
name|FILE
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|string_value
parameter_list|)
function_decl|;
name|int
name|differs
parameter_list|(
name|string_value
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|string
parameter_list|)
function_decl|;
name|void
name|unset
parameter_list|()
function_decl|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|bool_value_state
block|{
name|MTSM_EOL
block|,
name|MTSM_BR
block|,
name|LAST_BOOL
block|}
enum|;
end_enum

begin_enum
enum|enum
name|int_value_state
block|{
name|MTSM_FI
block|,
name|MTSM_RJ
block|,
name|MTSM_CE
block|,
name|MTSM_SP
block|,
name|LAST_INT
block|}
enum|;
end_enum

begin_enum
enum|enum
name|units_value_state
block|{
name|MTSM_IN
block|,
name|MTSM_LL
block|,
name|MTSM_PO
block|,
name|MTSM_TI
block|,
name|LAST_UNITS
block|}
enum|;
end_enum

begin_enum
enum|enum
name|string_value_state
block|{
name|MTSM_TA
block|,
name|LAST_STRING
block|}
enum|;
end_enum

begin_struct
struct|struct
name|statem
block|{
name|int
name|issue_no
decl_stmt|;
name|bool_value
name|bool_values
index|[
name|LAST_BOOL
index|]
decl_stmt|;
name|int_value
name|int_values
index|[
name|LAST_INT
index|]
decl_stmt|;
name|units_value
name|units_values
index|[
name|LAST_UNITS
index|]
decl_stmt|;
name|string_value
name|string_values
index|[
name|LAST_STRING
index|]
decl_stmt|;
name|statem
argument_list|()
expr_stmt|;
name|statem
argument_list|(
name|statem
operator|*
argument_list|)
expr_stmt|;
operator|~
name|statem
argument_list|()
expr_stmt|;
name|void
name|flush
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|statem
modifier|*
parameter_list|)
function_decl|;
name|int
name|changed
parameter_list|(
name|statem
modifier|*
parameter_list|)
function_decl|;
name|void
name|merge
parameter_list|(
name|statem
modifier|*
parameter_list|,
name|statem
modifier|*
parameter_list|)
function_decl|;
name|void
name|add_tag
parameter_list|(
name|int_value_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|add_tag
parameter_list|(
name|bool_value_state
parameter_list|)
function_decl|;
name|void
name|add_tag
parameter_list|(
name|units_value_state
parameter_list|,
name|hunits
parameter_list|)
function_decl|;
name|void
name|add_tag
parameter_list|(
name|string_value_state
parameter_list|,
name|string
parameter_list|)
function_decl|;
name|void
name|sub_tag_ce
parameter_list|()
function_decl|;
name|void
name|add_tag_if_unknown
parameter_list|(
name|int_value_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|add_tag_ta
parameter_list|()
function_decl|;
name|void
name|display_state
parameter_list|()
function_decl|;
name|void
name|update
parameter_list|(
name|statem
modifier|*
parameter_list|,
name|statem
modifier|*
parameter_list|,
name|int_value_state
parameter_list|)
function_decl|;
name|void
name|update
parameter_list|(
name|statem
modifier|*
parameter_list|,
name|statem
modifier|*
parameter_list|,
name|bool_value_state
parameter_list|)
function_decl|;
name|void
name|update
parameter_list|(
name|statem
modifier|*
parameter_list|,
name|statem
modifier|*
parameter_list|,
name|units_value_state
parameter_list|)
function_decl|;
name|void
name|update
parameter_list|(
name|statem
modifier|*
parameter_list|,
name|statem
modifier|*
parameter_list|,
name|string_value_state
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|stack
block|{
name|stack
modifier|*
name|next
decl_stmt|;
name|statem
modifier|*
name|state
decl_stmt|;
name|stack
argument_list|()
expr_stmt|;
name|stack
argument_list|(
name|statem
operator|*
argument_list|,
name|stack
operator|*
argument_list|)
expr_stmt|;
operator|~
name|stack
argument_list|()
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|mtsm
block|{
name|statem
modifier|*
name|driver
decl_stmt|;
name|stack
modifier|*
name|sp
decl_stmt|;
name|int
name|has_changed
parameter_list|(
name|int_value_state
parameter_list|,
name|statem
modifier|*
parameter_list|)
function_decl|;
name|int
name|has_changed
parameter_list|(
name|bool_value_state
parameter_list|,
name|statem
modifier|*
parameter_list|)
function_decl|;
name|int
name|has_changed
parameter_list|(
name|units_value_state
parameter_list|,
name|statem
modifier|*
parameter_list|)
function_decl|;
name|int
name|has_changed
parameter_list|(
name|string_value_state
parameter_list|,
name|statem
modifier|*
parameter_list|)
function_decl|;
name|void
name|inherit
parameter_list|(
name|statem
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|public
label|:
name|mtsm
argument_list|()
expr_stmt|;
operator|~
name|mtsm
argument_list|()
expr_stmt|;
name|void
name|push_state
parameter_list|(
name|statem
modifier|*
parameter_list|)
function_decl|;
name|void
name|pop_state
parameter_list|()
function_decl|;
name|void
name|flush
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|statem
modifier|*
parameter_list|,
name|string
parameter_list|)
function_decl|;
name|int
name|changed
parameter_list|(
name|statem
modifier|*
parameter_list|)
function_decl|;
name|void
name|add_tag
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|string
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|state_set
block|{
name|int
name|boolset
decl_stmt|;
name|int
name|intset
decl_stmt|;
name|int
name|unitsset
decl_stmt|;
name|int
name|stringset
decl_stmt|;
name|public
label|:
name|state_set
argument_list|()
expr_stmt|;
operator|~
name|state_set
argument_list|()
expr_stmt|;
name|void
name|incl
parameter_list|(
name|bool_value_state
parameter_list|)
function_decl|;
name|void
name|incl
parameter_list|(
name|int_value_state
parameter_list|)
function_decl|;
name|void
name|incl
parameter_list|(
name|units_value_state
parameter_list|)
function_decl|;
name|void
name|incl
parameter_list|(
name|string_value_state
parameter_list|)
function_decl|;
name|void
name|excl
parameter_list|(
name|bool_value_state
parameter_list|)
function_decl|;
name|void
name|excl
parameter_list|(
name|int_value_state
parameter_list|)
function_decl|;
name|void
name|excl
parameter_list|(
name|units_value_state
parameter_list|)
function_decl|;
name|void
name|excl
parameter_list|(
name|string_value_state
parameter_list|)
function_decl|;
name|int
name|is_in
parameter_list|(
name|bool_value_state
parameter_list|)
function_decl|;
name|int
name|is_in
parameter_list|(
name|int_value_state
parameter_list|)
function_decl|;
name|int
name|is_in
parameter_list|(
name|units_value_state
parameter_list|)
function_decl|;
name|int
name|is_in
parameter_list|(
name|string_value_state
parameter_list|)
function_decl|;
name|void
name|add
parameter_list|(
name|units_value_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|units
name|val
parameter_list|(
name|units_value_state
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

