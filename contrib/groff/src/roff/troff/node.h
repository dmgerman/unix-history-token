begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992, 2000, 2001    Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_struct
struct|struct
name|hyphen_list
block|{
name|unsigned
name|char
name|hyphen
decl_stmt|;
name|unsigned
name|char
name|breakable
decl_stmt|;
name|unsigned
name|char
name|hyphenation_code
decl_stmt|;
name|hyphen_list
modifier|*
name|next
decl_stmt|;
name|hyphen_list
argument_list|(
argument|unsigned char code
argument_list|,
argument|hyphen_list *p =
literal|0
argument_list|)
empty_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|hyphenate
parameter_list|(
name|hyphen_list
modifier|*
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|hyphenation_type
block|{
name|HYPHEN_MIDDLE
block|,
name|HYPHEN_BOUNDARY
block|,
name|HYPHEN_INHIBIT
block|}
enum|;
end_enum

begin_decl_stmt
name|class
name|ascii_output_file
decl_stmt|;
end_decl_stmt

begin_struct_decl
struct_decl|struct
name|breakpoint
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vertical_size
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|charinfo
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|macro
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|troff_output_file
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|tfont
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|environment
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|glyph_node
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|diverted_space_node
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|token_node
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|node
block|{
name|node
modifier|*
name|next
decl_stmt|;
name|node
modifier|*
name|last
decl_stmt|;
name|node
argument_list|()
expr_stmt|;
name|node
argument_list|(
name|node
operator|*
name|n
argument_list|)
expr_stmt|;
name|node
modifier|*
name|add_char
parameter_list|(
name|charinfo
modifier|*
name|c
parameter_list|,
name|environment
modifier|*
parameter_list|,
name|hunits
modifier|*
name|widthp
parameter_list|,
name|int
modifier|*
name|spacep
parameter_list|)
function_decl|;
name|virtual
operator|~
name|node
argument_list|()
expr_stmt|;
name|virtual
name|node
modifier|*
name|copy
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|set_unformat_flag
parameter_list|()
function_decl|;
name|virtual
name|int
name|force_tprint
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|hunits
name|width
parameter_list|()
function_decl|;
name|virtual
name|hunits
name|subscript_correction
parameter_list|()
function_decl|;
name|virtual
name|hunits
name|italic_correction
parameter_list|()
function_decl|;
name|virtual
name|hunits
name|left_italic_correction
parameter_list|()
function_decl|;
name|virtual
name|hunits
name|skew
parameter_list|()
function_decl|;
name|virtual
name|int
name|nspaces
parameter_list|()
function_decl|;
name|virtual
name|int
name|merge_space
parameter_list|(
name|hunits
parameter_list|,
name|hunits
parameter_list|,
name|hunits
parameter_list|)
function_decl|;
name|virtual
name|vunits
name|vertical_width
parameter_list|()
function_decl|;
name|virtual
name|node
modifier|*
name|last_char_node
parameter_list|()
function_decl|;
name|virtual
name|void
name|vertical_extent
parameter_list|(
name|vunits
modifier|*
name|min
parameter_list|,
name|vunits
modifier|*
name|max
parameter_list|)
function_decl|;
name|virtual
name|int
name|character_type
parameter_list|()
function_decl|;
name|virtual
name|void
name|set_vertical_size
parameter_list|(
name|vertical_size
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|int
name|ends_sentence
parameter_list|()
function_decl|;
name|virtual
name|node
modifier|*
name|merge_self
parameter_list|(
name|node
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|node
modifier|*
name|add_discretionary_hyphen
parameter_list|()
function_decl|;
name|virtual
name|node
modifier|*
name|add_self
parameter_list|(
name|node
modifier|*
parameter_list|,
name|hyphen_list
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|hyphen_list
modifier|*
name|get_hyphen_list
parameter_list|(
name|hyphen_list
modifier|*
name|s
init|=
literal|0
parameter_list|)
function_decl|;
name|virtual
name|void
name|ascii_print
parameter_list|(
name|ascii_output_file
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|asciify
parameter_list|(
name|macro
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|int
name|discardable
parameter_list|()
function_decl|;
name|virtual
name|void
name|spread_space
parameter_list|(
name|int
modifier|*
parameter_list|,
name|hunits
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|freeze_space
parameter_list|()
function_decl|;
name|virtual
name|void
name|is_escape_colon
parameter_list|()
function_decl|;
name|virtual
name|breakpoint
modifier|*
name|get_breakpoints
parameter_list|(
name|hunits
name|width
parameter_list|,
name|int
name|nspaces
parameter_list|,
name|breakpoint
modifier|*
name|rest
init|=
literal|0
parameter_list|,
name|int
name|is_inner
init|=
literal|0
parameter_list|)
function_decl|;
name|virtual
name|int
name|nbreaks
parameter_list|()
function_decl|;
name|virtual
name|void
name|split
parameter_list|(
name|int
parameter_list|,
name|node
modifier|*
modifier|*
parameter_list|,
name|node
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|hyphenation_type
name|get_hyphenation_type
parameter_list|()
function_decl|;
name|virtual
name|int
name|reread
parameter_list|(
name|int
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|token_node
modifier|*
name|get_token_node
parameter_list|()
function_decl|;
name|virtual
name|int
name|overlaps_vertically
parameter_list|()
function_decl|;
name|virtual
name|int
name|overlaps_horizontally
parameter_list|()
function_decl|;
name|virtual
name|units
name|size
parameter_list|()
function_decl|;
name|virtual
name|int
name|interpret
parameter_list|(
name|macro
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|node
modifier|*
name|merge_glyph_node
parameter_list|(
name|glyph_node
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|tfont
modifier|*
name|get_tfont
parameter_list|()
function_decl|;
name|virtual
name|void
name|tprint
parameter_list|(
name|troff_output_file
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|zero_width_tprint
parameter_list|(
name|troff_output_file
modifier|*
parameter_list|)
function_decl|;
name|node
modifier|*
name|add_italic_correction
parameter_list|(
name|hunits
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|int
name|same
parameter_list|(
name|node
modifier|*
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|char
modifier|*
name|type
parameter_list|()
init|=
literal|0
function_decl|;
block|}
struct|;
end_struct

begin_expr_stmt
specifier|inline
name|node
operator|::
name|node
argument_list|()
operator|:
name|next
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|node
operator|::
name|node
argument_list|(
name|node
operator|*
name|n
argument_list|)
operator|:
name|next
argument_list|(
argument|n
argument_list|)
block|{ }
specifier|inline
name|node
operator|::
operator|~
name|node
argument_list|()
block|{ }
comment|// 0 means it doesn't, 1 means it does, 2 means it's transparent
name|int
name|node_list_ends_sentence
argument_list|(
name|node
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|breakpoint
block|{
name|breakpoint
modifier|*
name|next
decl_stmt|;
name|hunits
name|width
decl_stmt|;
name|int
name|nspaces
decl_stmt|;
name|node
modifier|*
name|nd
decl_stmt|;
name|int
name|index
decl_stmt|;
name|char
name|hyphenated
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|line_start_node
range|:
name|public
name|node
block|{
name|public
operator|:
name|line_start_node
argument_list|()
block|{}
name|node
operator|*
name|copy
argument_list|()
block|{
return|return
name|new
name|line_start_node
return|;
block|}
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
name|int
name|force_tprint
argument_list|()
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|space_node
range|:
name|public
name|node
block|{
name|private
operator|:
if|#
directive|if
literal|0
expr|enum { BLOCK = 1024 };   static space_node *free_list;   void operator delete(void *);
endif|#
directive|endif
name|protected
operator|:
name|hunits
name|n
block|;
name|char
name|set
block|;
name|char
name|was_escape_colon
block|;
name|space_node
argument_list|(
name|hunits
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|node
operator|*
operator|=
literal|0
argument_list|)
block|;
name|public
operator|:
name|space_node
argument_list|(
argument|hunits d
argument_list|,
argument|node *p =
literal|0
argument_list|)
block|;
if|#
directive|if
literal|0
block|~space_node();   void *operator new(size_t);
endif|#
directive|endif
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|nspaces
argument_list|()
block|;
name|hunits
name|width
argument_list|()
block|;
name|int
name|discardable
argument_list|()
block|;
name|int
name|merge_space
argument_list|(
name|hunits
argument_list|,
name|hunits
argument_list|,
name|hunits
argument_list|)
block|;
name|void
name|freeze_space
argument_list|()
block|;
name|void
name|is_escape_colon
argument_list|()
block|;
name|void
name|spread_space
argument_list|(
name|int
operator|*
argument_list|,
name|hunits
operator|*
argument_list|)
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|breakpoint
operator|*
name|get_breakpoints
argument_list|(
argument|hunits width
argument_list|,
argument|int nspaces
argument_list|,
argument|breakpoint *rest =
literal|0
argument_list|,
argument|int is_inner =
literal|0
argument_list|)
block|;
name|int
name|nbreaks
argument_list|()
block|;
name|void
name|split
argument_list|(
name|int
argument_list|,
name|node
operator|*
operator|*
argument_list|,
name|node
operator|*
operator|*
argument_list|)
block|;
name|void
name|ascii_print
argument_list|(
name|ascii_output_file
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|width_list
block|{
name|width_list
modifier|*
name|next
decl_stmt|;
name|hunits
name|width
decl_stmt|;
name|hunits
name|sentence_width
decl_stmt|;
name|width_list
argument_list|(
name|hunits
argument_list|,
name|hunits
argument_list|)
expr_stmt|;
name|width_list
argument_list|(
name|width_list
operator|*
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|word_space_node
range|:
name|public
name|space_node
block|{
name|protected
operator|:
name|width_list
operator|*
name|orig_width
block|;
name|unsigned
name|char
name|unformat
block|;
name|word_space_node
argument_list|(
name|hunits
argument_list|,
name|int
argument_list|,
name|width_list
operator|*
argument_list|,
name|int
argument_list|,
name|node
operator|*
operator|=
literal|0
argument_list|)
block|;
name|public
operator|:
name|word_space_node
argument_list|(
name|hunits
argument_list|,
name|width_list
operator|*
argument_list|,
name|node
operator|*
operator|=
literal|0
argument_list|)
block|;
operator|~
name|word_space_node
argument_list|()
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|reread
argument_list|(
name|int
operator|*
argument_list|)
block|;
name|int
name|set_unformat_flag
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|merge_space
argument_list|(
name|hunits
argument_list|,
name|hunits
argument_list|,
name|hunits
argument_list|)
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|unbreakable_space_node
range|:
name|public
name|word_space_node
block|{
name|unbreakable_space_node
argument_list|(
name|hunits
argument_list|,
name|int
argument_list|,
name|node
operator|*
operator|=
literal|0
argument_list|)
block|;
name|public
operator|:
name|unbreakable_space_node
argument_list|(
name|hunits
argument_list|,
name|node
operator|*
operator|=
literal|0
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|reread
argument_list|(
name|int
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|breakpoint
operator|*
name|get_breakpoints
argument_list|(
argument|hunits width
argument_list|,
argument|int nspaces
argument_list|,
argument|breakpoint *rest =
literal|0
argument_list|,
argument|int is_inner =
literal|0
argument_list|)
block|;
name|int
name|nbreaks
argument_list|()
block|;
name|void
name|split
argument_list|(
name|int
argument_list|,
name|node
operator|*
operator|*
argument_list|,
name|node
operator|*
operator|*
argument_list|)
block|;
name|int
name|merge_space
argument_list|(
name|hunits
argument_list|,
name|hunits
argument_list|,
name|hunits
argument_list|)
block|;
name|node
operator|*
name|add_self
argument_list|(
name|node
operator|*
argument_list|,
name|hyphen_list
operator|*
operator|*
argument_list|)
block|;
name|hyphen_list
operator|*
name|get_hyphen_list
argument_list|(
name|hyphen_list
operator|*
name|ss
operator|=
literal|0
argument_list|)
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|diverted_space_node
range|:
name|public
name|node
block|{
name|public
operator|:
name|vunits
name|n
block|;
name|diverted_space_node
argument_list|(
argument|vunits d
argument_list|,
argument|node *p =
literal|0
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|reread
argument_list|(
name|int
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|diverted_copy_file_node
range|:
name|public
name|node
block|{
name|symbol
name|filename
block|;
name|public
operator|:
name|vunits
name|n
block|;
name|diverted_copy_file_node
argument_list|(
argument|symbol s
argument_list|,
argument|node *p =
literal|0
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|reread
argument_list|(
name|int
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|extra_size_node
range|:
name|public
name|node
block|{
name|vunits
name|n
block|;
name|public
operator|:
name|extra_size_node
argument_list|(
argument|vunits i
argument_list|)
operator|:
name|n
argument_list|(
argument|i
argument_list|)
block|{}
name|void
name|set_vertical_size
argument_list|(
name|vertical_size
operator|*
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|vertical_size_node
range|:
name|public
name|node
block|{
name|vunits
name|n
block|;
name|public
operator|:
name|vertical_size_node
argument_list|(
argument|vunits i
argument_list|)
operator|:
name|n
argument_list|(
argument|i
argument_list|)
block|{}
name|void
name|set_vertical_size
argument_list|(
name|vertical_size
operator|*
argument_list|)
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|set_unformat_flag
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|hmotion_node
range|:
name|public
name|node
block|{
name|protected
operator|:
name|hunits
name|n
block|;
name|unsigned
name|char
name|was_tab
block|;
name|unsigned
name|char
name|unformat
block|;
name|public
operator|:
name|hmotion_node
argument_list|(
argument|hunits i
argument_list|,
argument|node *next =
literal|0
argument_list|)
operator|:
name|node
argument_list|(
name|next
argument_list|)
block|,
name|n
argument_list|(
name|i
argument_list|)
block|,
name|was_tab
argument_list|(
literal|0
argument_list|)
block|,
name|unformat
argument_list|(
literal|0
argument_list|)
block|{}
name|hmotion_node
argument_list|(
argument|hunits i
argument_list|,
argument|int flag1
argument_list|,
argument|int flag2
argument_list|,
argument|node *next =
literal|0
argument_list|)
operator|:
name|node
argument_list|(
name|next
argument_list|)
block|,
name|n
argument_list|(
name|i
argument_list|)
block|,
name|was_tab
argument_list|(
name|flag1
argument_list|)
block|,
name|unformat
argument_list|(
argument|flag2
argument_list|)
block|{}
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|reread
argument_list|(
name|int
operator|*
argument_list|)
block|;
name|int
name|set_unformat_flag
argument_list|()
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|hunits
name|width
argument_list|()
block|;
name|void
name|ascii_print
argument_list|(
name|ascii_output_file
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|node
operator|*
name|add_self
argument_list|(
name|node
operator|*
argument_list|,
name|hyphen_list
operator|*
operator|*
argument_list|)
block|;
name|hyphen_list
operator|*
name|get_hyphen_list
argument_list|(
name|hyphen_list
operator|*
name|ss
operator|=
literal|0
argument_list|)
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|space_char_hmotion_node
range|:
name|public
name|hmotion_node
block|{
name|public
operator|:
name|space_char_hmotion_node
argument_list|(
argument|hunits i
argument_list|,
argument|node *next =
literal|0
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|ascii_print
argument_list|(
name|ascii_output_file
operator|*
argument_list|)
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|node
operator|*
name|add_self
argument_list|(
name|node
operator|*
argument_list|,
name|hyphen_list
operator|*
operator|*
argument_list|)
block|;
name|hyphen_list
operator|*
name|get_hyphen_list
argument_list|(
name|hyphen_list
operator|*
name|ss
operator|=
literal|0
argument_list|)
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|vmotion_node
range|:
name|public
name|node
block|{
name|vunits
name|n
block|;
name|public
operator|:
name|vmotion_node
argument_list|(
argument|vunits i
argument_list|)
operator|:
name|n
argument_list|(
argument|i
argument_list|)
block|{}
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|vunits
name|vertical_width
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|hline_node
range|:
name|public
name|node
block|{
name|hunits
name|x
block|;
name|node
operator|*
name|n
block|;
name|public
operator|:
name|hline_node
argument_list|(
argument|hunits i
argument_list|,
argument|node *c
argument_list|,
argument|node *next =
literal|0
argument_list|)
operator|:
name|node
argument_list|(
name|next
argument_list|)
block|,
name|x
argument_list|(
name|i
argument_list|)
block|,
name|n
argument_list|(
argument|c
argument_list|)
block|{}
operator|~
name|hline_node
argument_list|()
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|hunits
name|width
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|vline_node
range|:
name|public
name|node
block|{
name|vunits
name|x
block|;
name|node
operator|*
name|n
block|;
name|public
operator|:
name|vline_node
argument_list|(
argument|vunits i
argument_list|,
argument|node *c
argument_list|,
argument|node *next=
literal|0
argument_list|)
operator|:
name|node
argument_list|(
name|next
argument_list|)
block|,
name|x
argument_list|(
name|i
argument_list|)
block|,
name|n
argument_list|(
argument|c
argument_list|)
block|{}
operator|~
name|vline_node
argument_list|()
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|hunits
name|width
argument_list|()
block|;
name|vunits
name|vertical_width
argument_list|()
block|;
name|void
name|vertical_extent
argument_list|(
name|vunits
operator|*
argument_list|,
name|vunits
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|dummy_node
range|:
name|public
name|node
block|{
name|public
operator|:
name|dummy_node
argument_list|(
name|node
operator|*
name|nd
operator|=
literal|0
argument_list|)
operator|:
name|node
argument_list|(
argument|nd
argument_list|)
block|{}
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|transparent_dummy_node
range|:
name|public
name|node
block|{
name|public
operator|:
name|transparent_dummy_node
argument_list|(
name|node
operator|*
name|nd
operator|=
literal|0
argument_list|)
operator|:
name|node
argument_list|(
argument|nd
argument_list|)
block|{}
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|int
name|ends_sentence
argument_list|()
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|zero_width_node
range|:
name|public
name|node
block|{
name|node
operator|*
name|n
block|;
name|public
operator|:
name|zero_width_node
argument_list|(
name|node
operator|*
name|gn
argument_list|)
block|;
operator|~
name|zero_width_node
argument_list|()
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|void
name|append
argument_list|(
name|node
operator|*
argument_list|)
block|;
name|int
name|character_type
argument_list|()
block|;
name|void
name|vertical_extent
argument_list|(
name|vunits
operator|*
name|min
argument_list|,
name|vunits
operator|*
name|max
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|left_italic_corrected_node
range|:
name|public
name|node
block|{
name|node
operator|*
name|n
block|;
name|hunits
name|x
block|;
name|public
operator|:
name|left_italic_corrected_node
argument_list|(
name|node
operator|*
operator|=
literal|0
argument_list|)
block|;
operator|~
name|left_italic_corrected_node
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|void
name|ascii_print
argument_list|(
name|ascii_output_file
operator|*
argument_list|)
block|;
name|void
name|asciify
argument_list|(
name|macro
operator|*
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|hunits
name|width
argument_list|()
block|;
name|node
operator|*
name|last_char_node
argument_list|()
block|;
name|void
name|vertical_extent
argument_list|(
name|vunits
operator|*
argument_list|,
name|vunits
operator|*
argument_list|)
block|;
name|int
name|ends_sentence
argument_list|()
block|;
name|int
name|overlaps_horizontally
argument_list|()
block|;
name|int
name|overlaps_vertically
argument_list|()
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|;
name|tfont
operator|*
name|get_tfont
argument_list|()
block|;
name|int
name|character_type
argument_list|()
block|;
name|hunits
name|skew
argument_list|()
block|;
name|hunits
name|italic_correction
argument_list|()
block|;
name|hunits
name|subscript_correction
argument_list|()
block|;
name|hyphen_list
operator|*
name|get_hyphen_list
argument_list|(
name|hyphen_list
operator|*
name|ss
operator|=
literal|0
argument_list|)
block|;
name|node
operator|*
name|add_self
argument_list|(
name|node
operator|*
argument_list|,
name|hyphen_list
operator|*
operator|*
argument_list|)
block|;
name|node
operator|*
name|merge_glyph_node
argument_list|(
name|glyph_node
operator|*
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|overstrike_node
range|:
name|public
name|node
block|{
name|node
operator|*
name|list
block|;
name|hunits
name|max_width
block|;
name|public
operator|:
name|overstrike_node
argument_list|()
block|;
operator|~
name|overstrike_node
argument_list|()
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|void
name|overstrike
argument_list|(
name|node
operator|*
argument_list|)
block|;
comment|// add another node to be overstruck
name|hunits
name|width
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|node
operator|*
name|add_self
argument_list|(
name|node
operator|*
argument_list|,
name|hyphen_list
operator|*
operator|*
argument_list|)
block|;
name|hyphen_list
operator|*
name|get_hyphen_list
argument_list|(
name|hyphen_list
operator|*
name|ss
operator|=
literal|0
argument_list|)
block|;
name|hyphenation_type
name|get_hyphenation_type
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|bracket_node
range|:
name|public
name|node
block|{
name|node
operator|*
name|list
block|;
name|hunits
name|max_width
block|;
name|public
operator|:
name|bracket_node
argument_list|()
block|;
operator|~
name|bracket_node
argument_list|()
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|void
name|bracket
argument_list|(
name|node
operator|*
argument_list|)
block|;
comment|// add another node to be overstruck
name|hunits
name|width
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|special_node
range|:
name|public
name|node
block|{
name|macro
name|mac
block|;
name|tfont
operator|*
name|tf
block|;
name|int
name|no_init_string
block|;
name|void
name|tprint_start
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|void
name|tprint_char
argument_list|(
argument|troff_output_file *
argument_list|,
argument|unsigned char
argument_list|)
block|;
name|void
name|tprint_end
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|public
operator|:
name|special_node
argument_list|(
specifier|const
name|macro
operator|&
argument_list|,
name|int
operator|=
literal|0
argument_list|)
block|;
name|special_node
argument_list|(
specifier|const
name|macro
operator|&
argument_list|,
name|tfont
operator|*
argument_list|,
name|int
operator|=
literal|0
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|int
name|ends_sentence
argument_list|()
block|;
name|tfont
operator|*
name|get_tfont
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|suppress_node
range|:
name|public
name|node
block|{
name|int
name|is_on
block|;
name|int
name|emit_limits
block|;
comment|// must we issue the extent of the area written out?
name|symbol
name|filename
block|;
name|char
name|position
block|;
name|public
operator|:
name|suppress_node
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|suppress_node
argument_list|(
argument|symbol f
argument_list|,
argument|char p
argument_list|)
block|;
name|suppress_node
argument_list|(
argument|int
argument_list|,
argument|int
argument_list|,
argument|symbol f
argument_list|,
argument|char p
argument_list|)
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|hunits
name|width
argument_list|()
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|;
name|private
operator|:
name|void
name|put
argument_list|(
name|troff_output_file
operator|*
name|out
argument_list|,
specifier|const
name|char
operator|*
name|s
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|hvpair
block|{
name|hunits
name|h
decl_stmt|;
name|vunits
name|v
decl_stmt|;
name|hvpair
argument_list|()
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|draw_node
range|:
name|public
name|node
block|{
name|int
name|npoints
block|;
name|font_size
name|sz
block|;
name|char
name|code
block|;
name|hvpair
operator|*
name|point
block|;
name|public
operator|:
name|draw_node
argument_list|(
name|char
argument_list|,
name|hvpair
operator|*
argument_list|,
name|int
argument_list|,
name|font_size
argument_list|)
block|;
operator|~
name|draw_node
argument_list|()
block|;
name|hunits
name|width
argument_list|()
block|;
name|vunits
name|vertical_width
argument_list|()
block|;
name|node
operator|*
name|copy
argument_list|()
block|;
name|void
name|tprint
argument_list|(
name|troff_output_file
operator|*
argument_list|)
block|;
name|int
name|same
argument_list|(
name|node
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|type
argument_list|()
block|;
name|int
name|force_tprint
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|charinfo
decl_stmt|;
end_decl_stmt

begin_function_decl
name|node
modifier|*
name|make_node
parameter_list|(
name|charinfo
modifier|*
name|ci
parameter_list|,
name|environment
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|character_exists
parameter_list|(
name|charinfo
modifier|*
parameter_list|,
name|environment
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|same_node_list
parameter_list|(
name|node
modifier|*
name|n1
parameter_list|,
name|node
modifier|*
name|n2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|node
modifier|*
name|reverse_node_list
parameter_list|(
name|node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|delete_node_list
parameter_list|(
name|node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|node
modifier|*
name|copy_node_list
parameter_list|(
name|node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|get_bold_fontno
parameter_list|(
name|int
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|inline
name|hyphen_list
operator|::
name|hyphen_list
argument_list|(
argument|unsigned char code
argument_list|,
argument|hyphen_list *p
argument_list|)
operator|:
name|hyphen
argument_list|(
literal|0
argument_list|)
operator|,
name|breakable
argument_list|(
literal|0
argument_list|)
operator|,
name|hyphenation_code
argument_list|(
name|code
argument_list|)
operator|,
name|next
argument_list|(
argument|p
argument_list|)
block|{ }
specifier|extern
name|void
name|read_desc
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function_decl
specifier|extern
name|int
name|mount_font
parameter_list|(
name|int
name|n
parameter_list|,
name|symbol
parameter_list|,
name|symbol
init|=
name|NULL_SYMBOL
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mount_style
parameter_list|(
name|int
name|n
parameter_list|,
name|symbol
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|is_good_fontno
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|symbol_fontno
parameter_list|(
name|symbol
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|next_available_font_position
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_size_table
parameter_list|(
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|get_underline_fontno
parameter_list|()
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|output_file
block|{
name|char
name|make_g_plus_plus_shut_up
decl_stmt|;
name|public
label|:
name|output_file
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|output_file
argument_list|()
expr_stmt|;
name|virtual
name|void
name|trailer
parameter_list|(
name|vunits
name|page_length
parameter_list|)
function_decl|;
name|virtual
name|void
name|flush
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|transparent_char
parameter_list|(
name|unsigned
name|char
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|print_line
parameter_list|(
name|hunits
name|x
parameter_list|,
name|vunits
name|y
parameter_list|,
name|node
modifier|*
name|n
parameter_list|,
name|vunits
name|before
parameter_list|,
name|vunits
name|after
parameter_list|,
name|hunits
name|width
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|begin_page
parameter_list|(
name|int
name|pageno
parameter_list|,
name|vunits
name|page_length
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|copy_file
parameter_list|(
name|hunits
name|x
parameter_list|,
name|vunits
name|y
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|int
name|is_printing
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|put_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
name|virtual
name|void
name|on
parameter_list|()
function_decl|;
name|virtual
name|void
name|off
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|COLUMN
name|virtual
name|void
name|vjustify
parameter_list|(
name|vunits
parameter_list|,
name|symbol
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* COLUMN */
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|POPEN_MISSING
end_ifndef

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|pipe_command
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|output_file
modifier|*
name|the_output
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|init_output
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|in_output_page_list
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|font_family
block|{
name|int
modifier|*
name|map
decl_stmt|;
name|int
name|map_size
decl_stmt|;
name|public
label|:
specifier|const
name|symbol
name|nm
decl_stmt|;
name|font_family
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
operator|~
name|font_family
argument_list|()
expr_stmt|;
name|int
name|make_definite
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|static
name|void
name|invalidate_fontno
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|font_family
modifier|*
name|lookup_family
parameter_list|(
name|symbol
parameter_list|)
function_decl|;
end_function_decl

end_unit

