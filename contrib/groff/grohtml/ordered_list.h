begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 1999 Free Software Foundation, Inc.  *  *  Ordered list, a template module for simple ordered list manipulation.  *  *  Gaius Mulley (gaius@glam.ac.uk)  */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|list_element
block|{
name|public
operator|:
name|list_element
operator|<
name|T
operator|>
operator|*
name|right
block|;
name|list_element
operator|<
name|T
operator|>
operator|*
name|left
block|;
name|list_element
argument_list|(
name|T
operator|*
name|in
argument_list|)
block|;
name|T
operator|*
name|data
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ordered_list
block|{
name|private
operator|:
name|list_element
operator|<
name|T
operator|>
operator|*
name|head
block|;
name|list_element
operator|<
name|T
operator|>
operator|*
name|tail
block|;
name|list_element
operator|<
name|T
operator|>
operator|*
name|ptr
block|;
name|public
operator|:
name|ordered_list
argument_list|(
name|void
argument_list|)
block|;
operator|~
name|ordered_list
argument_list|(
name|void
argument_list|)
block|;
name|void
name|add
argument_list|(
name|T
operator|*
name|in
argument_list|)
block|;
name|void
name|sub_move_right
argument_list|(
name|void
argument_list|)
block|;
name|void
name|move_right
argument_list|(
name|void
argument_list|)
block|;
name|void
name|move_left
argument_list|(
name|void
argument_list|)
block|;
name|int
name|is_empty
argument_list|(
name|void
argument_list|)
block|;
name|int
name|is_equal_to_tail
argument_list|(
name|void
argument_list|)
block|;
name|int
name|is_equal_to_head
argument_list|(
name|void
argument_list|)
block|;
name|void
name|start_from_head
argument_list|(
name|void
argument_list|)
block|;
name|void
name|start_from_tail
argument_list|(
name|void
argument_list|)
block|;
name|T
operator|*
name|move_right_get_data
argument_list|(
name|void
argument_list|)
block|;
name|T
operator|*
name|move_left_get_data
argument_list|(
name|void
argument_list|)
block|;
name|T
operator|*
name|get_data
argument_list|(
name|void
argument_list|)
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|ordered_list
argument_list|()
operator|:
name|head
argument_list|(
literal|0
argument_list|)
operator|,
name|tail
argument_list|(
literal|0
argument_list|)
operator|,
name|ptr
argument_list|(
literal|0
argument_list|)
block|{ }
name|template
operator|<
name|class
name|T
operator|>
name|ordered_list
operator|<
name|T
operator|>
operator|::
operator|~
name|ordered_list
argument_list|()
block|{
name|list_element
operator|<
name|T
operator|>
operator|*
name|temp
operator|=
name|head
block|;
do|do
block|{
name|temp
operator|=
name|head
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|0
condition|)
block|{
name|head
operator|=
name|head
operator|->
name|right
expr_stmt|;
name|delete
name|temp
decl_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|} while
operator|(
operator|(
name|head
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|head
operator|!=
name|tail
operator|)
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|list_element
operator|<
name|T
operator|>
operator|::
name|list_element
argument_list|(
name|T
operator|*
name|in
argument_list|)
operator|:
name|right
argument_list|(
literal|0
argument_list|)
operator|,
name|left
argument_list|(
literal|0
argument_list|)
block|{
name|data
operator|=
name|in
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|void
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|add
argument_list|(
argument|T *in
argument_list|)
block|{
name|list_element
operator|<
name|T
operator|>
operator|*
name|t
operator|=
name|new
name|list_element
operator|<
name|T
operator|>
operator|(
name|in
operator|)
block|;
comment|// create a new list element with data field initialized
name|list_element
operator|<
name|T
operator|>
operator|*
name|last
block|;
if|if
condition|(
name|in
operator|==
literal|0
condition|)
block|{
name|fatal
argument_list|(
literal|"cannot add NULL to ordered list"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|head
operator|==
literal|0
condition|)
block|{
name|head
operator|=
name|t
expr_stmt|;
name|tail
operator|=
name|t
expr_stmt|;
name|t
operator|->
name|left
operator|=
name|t
expr_stmt|;
name|t
operator|->
name|right
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|tail
expr_stmt|;
while|while
condition|(
operator|(
name|last
operator|!=
name|head
operator|)
operator|&&
operator|(
name|in
operator|->
name|is_less
argument_list|(
name|in
argument_list|,
name|last
operator|->
name|data
argument_list|)
operator|)
condition|)
block|{
name|last
operator|=
name|last
operator|->
name|left
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|->
name|is_less
argument_list|(
name|in
argument_list|,
name|last
operator|->
name|data
argument_list|)
condition|)
block|{
name|t
operator|->
name|right
operator|=
name|last
expr_stmt|;
name|last
operator|->
name|left
operator|->
name|right
operator|=
name|t
expr_stmt|;
name|t
operator|->
name|left
operator|=
name|last
operator|->
name|left
expr_stmt|;
name|last
operator|->
name|left
operator|=
name|t
expr_stmt|;
comment|// now check for a new head
if|if
condition|(
name|last
operator|==
name|head
condition|)
block|{
name|head
operator|=
name|t
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add t onto beyond last
name|t
operator|->
name|right
operator|=
name|last
operator|->
name|right
expr_stmt|;
name|t
operator|->
name|left
operator|=
name|last
expr_stmt|;
name|last
operator|->
name|right
operator|->
name|left
operator|=
name|t
expr_stmt|;
name|last
operator|->
name|right
operator|=
name|t
expr_stmt|;
comment|// now check for a new tail
if|if
condition|(
name|last
operator|==
name|tail
condition|)
block|{
name|tail
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|sub_move_right
argument_list|(
argument|void
argument_list|)
block|{
name|list_element
operator|<
name|T
operator|>
operator|*
name|t
operator|=
name|ptr
operator|->
name|right
block|;
if|if
condition|(
name|head
operator|==
name|tail
condition|)
block|{
name|head
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|tail
operator|!=
literal|0
condition|)
block|{
name|delete
name|tail
decl_stmt|;
block|}
name|tail
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ptr
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_block
unit|} else
block|{
if|if
condition|(
name|head
operator|==
name|ptr
condition|)
block|{
name|head
operator|=
name|head
operator|->
name|right
expr_stmt|;
block|}
if|if
condition|(
name|tail
operator|==
name|ptr
condition|)
block|{
name|tail
operator|=
name|tail
operator|->
name|left
expr_stmt|;
block|}
name|ptr
operator|->
name|left
operator|->
name|right
operator|=
name|ptr
operator|->
name|right
expr_stmt|;
name|ptr
operator|->
name|right
operator|->
name|left
operator|=
name|ptr
operator|->
name|left
expr_stmt|;
name|ptr
operator|=
name|t
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|start_from_head
argument_list|(
argument|void
argument_list|)
block|{
name|ptr
operator|=
name|head
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|void
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|start_from_tail
argument_list|(
argument|void
argument_list|)
block|{
name|ptr
operator|=
name|tail
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|int
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|is_empty
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|head
operator|==
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|int
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|is_equal_to_tail
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|ptr
operator|==
name|tail
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|int
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|is_equal_to_head
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|ptr
operator|==
name|head
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|move_left
argument_list|(
argument|void
argument_list|)
block|{
name|ptr
operator|=
name|ptr
operator|->
name|left
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|void
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|move_right
argument_list|(
argument|void
argument_list|)
block|{
name|ptr
operator|=
name|ptr
operator|->
name|right
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|T
operator|*
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|get_data
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|ptr
operator|->
name|data
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|T
operator|*
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|move_right_get_data
argument_list|(
argument|void
argument_list|)
block|{
name|ptr
operator|=
name|ptr
operator|->
name|right
block|;
if|if
condition|(
name|ptr
operator|==
name|head
condition|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
return|return
operator|(
name|ptr
operator|->
name|data
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|T
operator|*
name|ordered_list
operator|<
name|T
operator|>
operator|::
name|move_left_get_data
argument_list|(
argument|void
argument_list|)
block|{
name|ptr
operator|=
name|ptr
operator|->
name|left
block|;
if|if
condition|(
name|ptr
operator|==
name|tail
condition|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
return|return
operator|(
name|ptr
operator|->
name|data
operator|)
return|;
block|}
end_else

unit|}
end_unit

