begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  * $Revision: 1.2 $  * $Date: 2001/09/11 06:19:36 $  * $Author: vyzo $  *  * Contents: A streambuf which uses the GNU readline library for line I/O  * (c) 2001 by Dimitris Vyzovitis [vyzo@media.mit.edu]  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public  * License along with this program; if not, write to the Free  * Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,  * MA 02111-1307 USA  *  ******************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_READLINEBUF_H_
end_ifndef

begin_define
define|#
directive|define
name|_READLINEBUF_H_
end_define

begin_include
include|#
directive|include
file|<iostream>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<cstdio>
end_include

begin_include
include|#
directive|include
file|<readline/readline.h>
end_include

begin_include
include|#
directive|include
file|<readline/history.h>
end_include

begin_if
if|#
directive|if
operator|(
name|defined
name|__GNUC__
operator|)
operator|&&
operator|(
name|__GNUC__
operator|<
literal|3
operator|)
end_if

begin_include
include|#
directive|include
file|<streambuf.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<streambuf>
end_include

begin_expr_stmt
name|using
name|std
operator|::
name|streamsize
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|std
operator|::
name|streambuf
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|class
name|readlinebuf
range|:
name|public
name|streambuf
block|{
name|public
operator|:
if|#
directive|if
operator|(
name|defined
name|__GNUC__
operator|)
operator|&&
operator|(
name|__GNUC__
operator|<
literal|3
operator|)
typedef|typedef
name|char
name|char_type
typedef|;
end_decl_stmt

begin_typedef
typedef|typedef
name|int
name|int_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|streampos
name|pos_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|streamoff
name|off_type
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|static
specifier|const
name|int_type
name|eof
init|=
name|EOF
decl_stmt|;
end_decl_stmt

begin_comment
comment|// this is -1
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|int_type
name|not_eof
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|char
modifier|*
name|prompt_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|history_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|line_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|low_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|high_
decl_stmt|;
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|virtual
name|int_type
name|showmanyc
argument_list|()
specifier|const
block|{
return|return
name|high_
operator|-
name|low_
return|;
block|}
end_expr_stmt

begin_function
name|virtual
name|streamsize
name|xsgetn
parameter_list|(
name|char_type
modifier|*
name|buf
parameter_list|,
name|streamsize
name|n
parameter_list|)
block|{
name|int
name|rd
init|=
name|n
operator|>
operator|(
name|high_
operator|-
name|low_
operator|)
condition|?
operator|(
name|high_
operator|-
name|low_
operator|)
else|:
name|n
decl_stmt|;
name|memcpy
argument_list|(
name|buf
argument_list|,
name|line_
argument_list|,
name|rd
argument_list|)
expr_stmt|;
name|low_
operator|+=
name|rd
expr_stmt|;
if|if
condition|(
name|rd
operator|<
name|n
condition|)
block|{
name|low_
operator|=
name|high_
operator|=
literal|0
expr_stmt|;
name|free
argument_list|(
name|line_
argument_list|)
expr_stmt|;
comment|// free( NULL ) is a noop
name|line_
operator|=
name|readline
argument_list|(
name|prompt_
argument_list|)
expr_stmt|;
if|if
condition|(
name|line_
condition|)
block|{
name|high_
operator|=
name|strlen
argument_list|(
name|line_
argument_list|)
expr_stmt|;
if|if
condition|(
name|history_
operator|&&
name|high_
condition|)
name|add_history
argument_list|(
name|line_
argument_list|)
expr_stmt|;
name|rd
operator|+=
name|xsgetn
argument_list|(
name|buf
operator|+
name|rd
argument_list|,
name|n
operator|-
name|rd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rd
return|;
block|}
end_function

begin_function
name|virtual
name|int_type
name|underflow
parameter_list|()
block|{
if|if
condition|(
name|high_
operator|==
name|low_
condition|)
block|{
name|low_
operator|=
name|high_
operator|=
literal|0
expr_stmt|;
name|free
argument_list|(
name|line_
argument_list|)
expr_stmt|;
comment|// free( NULL ) is a noop
name|line_
operator|=
name|readline
argument_list|(
name|prompt_
argument_list|)
expr_stmt|;
if|if
condition|(
name|line_
condition|)
block|{
name|high_
operator|=
name|strlen
argument_list|(
name|line_
argument_list|)
expr_stmt|;
if|if
condition|(
name|history_
operator|&&
name|high_
condition|)
name|add_history
argument_list|(
name|line_
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|low_
operator|<
name|high_
condition|)
return|return
name|line_
index|[
name|low_
index|]
return|;
else|else
return|return
name|eof
return|;
block|}
end_function

begin_function
name|virtual
name|int_type
name|uflow
parameter_list|()
block|{
name|int_type
name|c
init|=
name|underflow
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
name|eof
condition|)
operator|++
name|low_
expr_stmt|;
return|return
name|c
return|;
block|}
end_function

begin_function
name|virtual
name|int_type
name|pbackfail
parameter_list|(
name|int_type
name|c
init|=
name|eof
parameter_list|)
block|{
if|if
condition|(
name|low_
operator|>
literal|0
condition|)
operator|--
name|low_
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|!=
name|eof
condition|)
block|{
if|if
condition|(
name|high_
operator|>
literal|0
condition|)
block|{
name|char
modifier|*
name|nl
init|=
operator|(
name|char
operator|*
operator|)
name|realloc
argument_list|(
name|line_
argument_list|,
name|high_
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
condition|)
block|{
name|line_
operator|=
operator|(
name|char
operator|*
operator|)
name|memcpy
argument_list|(
name|nl
operator|+
literal|1
argument_list|,
name|line_
argument_list|,
name|high_
argument_list|)
expr_stmt|;
name|high_
operator|+=
literal|1
expr_stmt|;
name|line_
index|[
literal|0
index|]
operator|=
name|char
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
return|return
name|eof
return|;
block|}
else|else
block|{
name|assert
argument_list|(
operator|!
name|line_
argument_list|)
expr_stmt|;
name|line_
operator|=
operator|(
name|char
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|line_
operator|=
name|char
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|high_
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
return|return
name|eof
return|;
return|return
name|not_eof
return|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_macro
name|readlinebuf
argument_list|(
argument|const char* prompt = NULL
argument_list|,
argument|bool history = true
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|prompt_
argument_list|(
name|prompt
argument_list|)
operator|,
name|history_
argument_list|(
name|history
argument_list|)
operator|,
name|line_
argument_list|(
name|NULL
argument_list|)
operator|,
name|low_
argument_list|(
literal|0
argument_list|)
operator|,
name|high_
argument_list|(
literal|0
argument_list|)
block|{
name|setbuf
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
block|; 	}
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

end_unit

