begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* rltypedefs.h -- Type declarations for readline functions. */
end_comment

begin_comment
comment|/* Copyright (C) 2000 Free Software Foundation, Inc.     This file is part of the GNU Readline Library, a library for    reading lines of text with interactive input and history editing.     The GNU Readline Library is free software; you can redistribute it    and/or modify it under the terms of the GNU General Public License    as published by the Free Software Foundation; either version 2, or    (at your option) any later version.     The GNU Readline Library is distributed in the hope that it will be    useful, but WITHOUT ANY WARRANTY; without even the implied warranty    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     The GNU General Public License is often shipped with GNU software, and    is generally kept in a file called COPYING or LICENSE.  If you do not    have a copy of the license, write to the Free Software Foundation,    59 Temple Place, Suite 330, Boston, MA 02111 USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_RL_TYPEDEFS_H_
end_ifndef

begin_define
define|#
directive|define
name|_RL_TYPEDEFS_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Old-style */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_FUNCTION_DEF
argument_list|)
define|#
directive|define
name|_FUNCTION_DEF
typedef|typedef
name|int
name|Function
parameter_list|()
function_decl|;
typedef|typedef
name|void
name|VFunction
parameter_list|()
function_decl|;
typedef|typedef
name|char
modifier|*
name|CPFunction
parameter_list|()
function_decl|;
typedef|typedef
name|char
modifier|*
modifier|*
name|CPPFunction
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* _FUNCTION_DEF */
comment|/* New style. */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_RL_FUNCTION_TYPEDEF
argument_list|)
define|#
directive|define
name|_RL_FUNCTION_TYPEDEF
comment|/* Bindable functions */
typedef|typedef
name|int
name|rl_command_func_t
name|PARAMS
typedef|((
name|int
typedef|,
name|int
typedef|));
comment|/* Typedefs for the completion system */
typedef|typedef
name|char
modifier|*
name|rl_compentry_func_t
name|PARAMS
typedef|((const
name|char
modifier|*
typedef|,
name|int
typedef|));
typedef|typedef
name|char
modifier|*
modifier|*
name|rl_completion_func_t
name|PARAMS
typedef|((const
name|char
modifier|*
typedef|,
name|int
typedef|,
name|int
typedef|));
typedef|typedef
name|char
modifier|*
name|rl_quote_func_t
name|PARAMS
typedef|((
name|char
modifier|*
typedef|,
name|int
typedef|,
name|char
modifier|*
typedef|));
typedef|typedef
name|char
modifier|*
name|rl_dequote_func_t
name|PARAMS
typedef|((
name|char
modifier|*
typedef|,
name|int
typedef|));
typedef|typedef
name|int
name|rl_compignore_func_t
name|PARAMS
typedef|((
name|char
modifier|*
modifier|*
typedef|));
typedef|typedef
name|void
name|rl_compdisp_func_t
name|PARAMS
typedef|((
name|char
modifier|*
modifier|*
typedef|,
name|int
typedef|,
name|int
typedef|));
comment|/* Type for input and pre-read hook functions like rl_event_hook */
typedef|typedef
name|int
name|rl_hook_func_t
name|PARAMS
typedef|((
name|void
typedef|));
comment|/* Input function type */
typedef|typedef
name|int
name|rl_getc_func_t
name|PARAMS
typedef|((
name|FILE
modifier|*
typedef|));
comment|/* Generic function that takes a character buffer (which could be the readline    line buffer) and an index into it (which could be rl_point) and returns    an int. */
typedef|typedef
name|int
name|rl_linebuf_func_t
name|PARAMS
typedef|((
name|char
modifier|*
typedef|,
name|int
typedef|));
comment|/* `Generic' function pointer typedefs */
typedef|typedef
name|int
name|rl_intfunc_t
name|PARAMS
typedef|((
name|int
typedef|));
define|#
directive|define
name|rl_ivoidfunc_t
value|rl_hook_func_t
typedef|typedef
name|int
name|rl_icpfunc_t
name|PARAMS
typedef|((
name|char
modifier|*
typedef|));
typedef|typedef
name|int
name|rl_icppfunc_t
name|PARAMS
typedef|((
name|char
modifier|*
modifier|*
typedef|));
typedef|typedef
name|void
name|rl_voidfunc_t
name|PARAMS
typedef|((
name|void
typedef|));
typedef|typedef
name|void
name|rl_vintfunc_t
name|PARAMS
typedef|((
name|int
typedef|));
typedef|typedef
name|void
name|rl_vcpfunc_t
name|PARAMS
typedef|((
name|char
modifier|*
typedef|));
typedef|typedef
name|void
name|rl_vcppfunc_t
name|PARAMS
typedef|((
name|char
modifier|*
modifier|*
typedef|));
endif|#
directive|endif
comment|/* _RL_FUNCTION_TYPEDEF */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _RL_TYPEDEFS_H_ */
end_comment

end_unit

