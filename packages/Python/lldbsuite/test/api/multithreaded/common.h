begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_TEST_API_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|LLDB_TEST_API_COMMON_H
end_define

begin_include
include|#
directive|include
file|<condition_variable>
end_include

begin_include
include|#
directive|include
file|<chrono>
end_include

begin_include
include|#
directive|include
file|<exception>
end_include

begin_include
include|#
directive|include
file|<iostream>
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<queue>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_comment
comment|/// Simple exception class with a message
end_comment

begin_decl_stmt
name|struct
name|Exception
range|:
name|public
name|std
operator|::
name|exception
block|{
name|std
operator|::
name|string
name|s
block|;
name|Exception
argument_list|(
argument|std::string ss
argument_list|)
operator|:
name|s
argument_list|(
argument|ss
argument_list|)
block|{}
name|virtual
operator|~
name|Exception
argument_list|()
name|throw
argument_list|()
block|{ }
specifier|const
name|char
operator|*
name|what
argument_list|()
specifier|const
name|throw
argument_list|()
block|{
return|return
name|s
operator|.
name|c_str
argument_list|()
return|;
block|}
expr|}
block|;
comment|// Synchronized data structure for listener to send events through
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|multithreaded_queue
block|{
name|std
operator|::
name|condition_variable
name|m_condition
block|;
name|std
operator|::
name|mutex
name|m_mutex
block|;
name|std
operator|::
name|queue
operator|<
name|T
operator|>
name|m_data
block|;
name|bool
name|m_notified
block|;
name|public
operator|:
name|void
name|push
argument_list|(
argument|T e
argument_list|)
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|lock
argument_list|(
name|m_mutex
argument_list|)
block|;
name|m_data
operator|.
name|push
argument_list|(
name|e
argument_list|)
block|;
name|m_notified
operator|=
name|true
block|;
name|m_condition
operator|.
name|notify_all
argument_list|()
block|;   }
name|T
name|pop
argument_list|(
argument|int timeout_seconds
argument_list|,
argument|bool&success
argument_list|)
block|{
name|int
name|count
operator|=
literal|0
block|;
while|while
condition|(
name|count
operator|<
name|timeout_seconds
condition|)
block|{
name|std
operator|::
name|unique_lock
operator|<
name|std
operator|::
name|mutex
operator|>
name|lock
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_data
operator|.
name|empty
argument_list|()
condition|)
block|{
name|m_notified
operator|=
name|false
expr_stmt|;
name|T
name|ret
init|=
name|m_data
operator|.
name|front
argument_list|()
decl_stmt|;
name|m_data
operator|.
name|pop
argument_list|()
expr_stmt|;
name|success
operator|=
name|true
expr_stmt|;
return|return
name|ret
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|m_notified
condition|)
name|m_condition
operator|.
name|wait_for
argument_list|(
name|lock
argument_list|,
name|std
operator|::
name|chrono
operator|::
name|seconds
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|success
operator|=
name|false
expr_stmt|;
return|return
name|T
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// Allocates a char buffer with the current working directory
specifier|inline
name|char
operator|*
name|get_working_dir
argument_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|||
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|||
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
return|return
name|getwd
argument_list|(
literal|0
argument_list|)
return|;
else|#
directive|else
return|return
name|get_current_dir_name
argument_list|()
return|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_TEST_API_COMMON_H
end_comment

end_unit

