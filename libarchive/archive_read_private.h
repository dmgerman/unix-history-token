begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2007 Tim Kientzle  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD: head/lib/libarchive/archive_read_private.h 201088 2009-12-28 02:18:55Z kientzle $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBARCHIVE_BUILD
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBARCHIVE_TEST
end_ifndef

begin_error
error|#
directive|error
error|This header is only to be used internally to libarchive.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|ARCHIVE_READ_PRIVATE_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|ARCHIVE_READ_PRIVATE_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|"archive.h"
end_include

begin_include
include|#
directive|include
file|"archive_string.h"
end_include

begin_include
include|#
directive|include
file|"archive_private.h"
end_include

begin_struct_decl
struct_decl|struct
name|archive_read
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|archive_read_filter_bidder
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|archive_read_filter
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * How bidding works for filters:  *   * The bid manager initializes the client-provided reader as the  *     first filter.  *   * It invokes the bidder for each registered filter with the  *     current head filter.  *   * The bidders can use archive_read_filter_ahead() to peek ahead  *     at the incoming data to compose their bids.  *   * The bid manager creates a new filter structure for the winning  *     bidder and gives the winning bidder a chance to initialize it.  *   * The new filter becomes the new top filter and we repeat the  *     process.  * This ends only when no bidder provides a non-zero bid.  Then  * we perform a similar dance with the registered format handlers.  */
end_comment

begin_struct
struct|struct
name|archive_read_filter_bidder
block|{
comment|/* Configuration data for the bidder. */
name|void
modifier|*
name|data
decl_stmt|;
comment|/* Name of the filter */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Taste the upstream filter to see if we handle this. */
name|int
function_decl|(
modifier|*
name|bid
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter_bidder
modifier|*
parameter_list|,
name|struct
name|archive_read_filter
modifier|*
parameter_list|)
function_decl|;
comment|/* Initialize a newly-created filter. */
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
parameter_list|)
function_decl|;
comment|/* Set an option for the filter bidder. */
name|int
function_decl|(
modifier|*
name|options
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter_bidder
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/* Release the bidder's configuration data. */
name|int
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter_bidder
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This structure is allocated within the archive_read core  * and initialized by archive_read and the init() method of the  * corresponding bidder above.  */
end_comment

begin_struct
struct|struct
name|archive_read_filter
block|{
name|int64_t
name|position
decl_stmt|;
comment|/* Essentially all filters will need these values, so 	 * just declare them here. */
name|struct
name|archive_read_filter_bidder
modifier|*
name|bidder
decl_stmt|;
comment|/* My bidder. */
name|struct
name|archive_read_filter
modifier|*
name|upstream
decl_stmt|;
comment|/* Who I read from. */
name|struct
name|archive_read
modifier|*
name|archive
decl_stmt|;
comment|/* Associated archive. */
comment|/* Open a block for reading */
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
name|self
parameter_list|)
function_decl|;
comment|/* Return next block. */
name|ssize_t
function_decl|(
modifier|*
name|read
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Skip forward this many bytes. */
name|int64_t
function_decl|(
modifier|*
name|skip
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
name|self
parameter_list|,
name|int64_t
name|request
parameter_list|)
function_decl|;
comment|/* Seek to an absolute location. */
name|int64_t
function_decl|(
modifier|*
name|seek
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
name|self
parameter_list|,
name|int64_t
name|offset
parameter_list|,
name|int
name|whence
parameter_list|)
function_decl|;
comment|/* Close (just this filter) and free(self). */
name|int
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
name|self
parameter_list|)
function_decl|;
comment|/* Function that handles switching from reading one block to the next/prev */
name|int
function_decl|(
modifier|*
name|sswitch
function_decl|)
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
name|self
parameter_list|,
name|unsigned
name|int
name|iindex
parameter_list|)
function_decl|;
comment|/* My private data. */
name|void
modifier|*
name|data
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|code
decl_stmt|;
comment|/* Used by reblocking logic. */
name|char
modifier|*
name|buffer
decl_stmt|;
name|size_t
name|buffer_size
decl_stmt|;
name|char
modifier|*
name|next
decl_stmt|;
comment|/* Current read location. */
name|size_t
name|avail
decl_stmt|;
comment|/* Bytes in my buffer. */
specifier|const
name|void
modifier|*
name|client_buff
decl_stmt|;
comment|/* Client buffer information. */
name|size_t
name|client_total
decl_stmt|;
specifier|const
name|char
modifier|*
name|client_next
decl_stmt|;
name|size_t
name|client_avail
decl_stmt|;
name|char
name|end_of_file
decl_stmt|;
name|char
name|closed
decl_stmt|;
name|char
name|fatal
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The client looks a lot like a filter, so we just wrap it here.  *  * TODO: Make archive_read_filter and archive_read_client identical so  * that users of the library can easily register their own  * transformation filters.  This will probably break the API/ABI and  * so should be deferred at least until libarchive 3.0.  */
end_comment

begin_struct
struct|struct
name|archive_read_data_node
block|{
name|int64_t
name|begin_position
decl_stmt|;
name|int64_t
name|total_size
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|archive_read_client
block|{
name|archive_open_callback
modifier|*
name|opener
decl_stmt|;
name|archive_read_callback
modifier|*
name|reader
decl_stmt|;
name|archive_skip_callback
modifier|*
name|skipper
decl_stmt|;
name|archive_seek_callback
modifier|*
name|seeker
decl_stmt|;
name|archive_close_callback
modifier|*
name|closer
decl_stmt|;
name|archive_switch_callback
modifier|*
name|switcher
decl_stmt|;
name|unsigned
name|int
name|nodes
decl_stmt|;
name|unsigned
name|int
name|cursor
decl_stmt|;
name|int64_t
name|position
decl_stmt|;
name|struct
name|archive_read_data_node
modifier|*
name|dataset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|archive_read_passphrase
block|{
name|char
modifier|*
name|passphrase
decl_stmt|;
name|struct
name|archive_read_passphrase
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|archive_read_extract
block|{
name|struct
name|archive
modifier|*
name|ad
decl_stmt|;
comment|/* archive_write_disk object */
comment|/* Progress function invoked during extract. */
name|void
function_decl|(
modifier|*
name|extract_progress
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|extract_progress_user_data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|archive_read
block|{
name|struct
name|archive
name|archive
decl_stmt|;
name|struct
name|archive_entry
modifier|*
name|entry
decl_stmt|;
comment|/* Dev/ino of the archive being read/written. */
name|int
name|skip_file_set
decl_stmt|;
name|int64_t
name|skip_file_dev
decl_stmt|;
name|int64_t
name|skip_file_ino
decl_stmt|;
comment|/* Callbacks to open/read/write/close client archive streams. */
name|struct
name|archive_read_client
name|client
decl_stmt|;
comment|/* Registered filter bidders. */
name|struct
name|archive_read_filter_bidder
name|bidders
index|[
literal|16
index|]
decl_stmt|;
comment|/* Last filter in chain */
name|struct
name|archive_read_filter
modifier|*
name|filter
decl_stmt|;
comment|/* Whether to bypass filter bidding process */
name|int
name|bypass_filter_bidding
decl_stmt|;
comment|/* File offset of beginning of most recently-read header. */
name|int64_t
name|header_position
decl_stmt|;
comment|/* Nodes and offsets of compressed data block */
name|unsigned
name|int
name|data_start_node
decl_stmt|;
name|unsigned
name|int
name|data_end_node
decl_stmt|;
comment|/* 	 * Format detection is mostly the same as compression 	 * detection, with one significant difference: The bidders 	 * use the read_ahead calls above to examine the stream rather 	 * than having the supervisor hand them a block of data to 	 * examine. 	 */
struct|struct
name|archive_format_descriptor
block|{
name|void
modifier|*
name|data
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
function_decl|(
modifier|*
name|bid
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|int
name|best_bid
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|options
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_header
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_data
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|int64_t
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_data_skip
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
name|int64_t
function_decl|(
modifier|*
name|seek_data
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|int64_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_capabilties
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|has_encrypted_entries
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
block|}
name|formats
index|[
literal|16
index|]
struct|;
name|struct
name|archive_format_descriptor
modifier|*
name|format
decl_stmt|;
comment|/* Active format. */
comment|/* 	 * Various information needed by archive_extract. 	 */
name|struct
name|archive_read_extract
modifier|*
name|extract
decl_stmt|;
name|int
function_decl|(
modifier|*
name|cleanup_archive_extract
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * Decryption passphrase. 	 */
struct|struct
block|{
name|struct
name|archive_read_passphrase
modifier|*
name|first
decl_stmt|;
name|struct
name|archive_read_passphrase
modifier|*
modifier|*
name|last
decl_stmt|;
name|int
name|candiate
decl_stmt|;
name|archive_passphrase_callback
modifier|*
name|callback
decl_stmt|;
name|void
modifier|*
name|client_data
decl_stmt|;
block|}
name|passphrases
struct|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|__archive_read_register_format
parameter_list|(
name|struct
name|archive_read
modifier|*
name|a
parameter_list|,
name|void
modifier|*
name|format_data
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
function_decl|(
modifier|*
name|bid
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|options
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|read_header
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|read_data
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|int64_t
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|read_data_skip
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
parameter_list|,
name|int64_t
function_decl|(
modifier|*
name|seek_data
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|int64_t
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|format_capabilities
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|has_encrypted_entries
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_read_get_bidder
parameter_list|(
name|struct
name|archive_read
modifier|*
name|a
parameter_list|,
name|struct
name|archive_read_filter_bidder
modifier|*
modifier|*
name|bidder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|__archive_read_ahead
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|ssize_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|__archive_read_filter_ahead
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|ssize_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int64_t
name|__archive_read_seek
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|int64_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int64_t
name|__archive_read_filter_seek
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
parameter_list|,
name|int64_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int64_t
name|__archive_read_consume
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int64_t
name|__archive_read_filter_consume
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_read_program
parameter_list|(
name|struct
name|archive_read_filter
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__archive_read_free_filters
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__archive_read_close_filters
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|archive_read_extract
modifier|*
name|__archive_read_get_extract
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Get a decryption passphrase.  */
end_comment

begin_function_decl
name|void
name|__archive_read_reset_passphrase
parameter_list|(
name|struct
name|archive_read
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|__archive_read_next_passphrase
parameter_list|(
name|struct
name|archive_read
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

