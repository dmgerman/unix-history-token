begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<inttypes.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<strings.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|"../../common.h"
end_include

begin_comment
comment|/* 8! = 40320, evenly divide 1 .. 8 processor workload. */
end_comment

begin_define
define|#
directive|define
name|WORKLOAD
value|(40320 * 2056)
end_define

begin_struct
struct|struct
name|block
block|{
name|unsigned
name|int
name|tid
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|static
name|struct
name|affinity
name|a
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|int
name|ready
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|uint64_t
modifier|*
name|count
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|uint64_t
name|nthr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|uint64_t
name|object
index|[
literal|2
index|]
name|CK_CC_CACHELINE
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|void
modifier|*
name|fairness
parameter_list|(
name|void
modifier|*
name|null
parameter_list|)
block|{
name|struct
name|block
modifier|*
name|context
init|=
name|null
decl_stmt|;
name|unsigned
name|int
name|i
init|=
name|context
operator|->
name|tid
decl_stmt|;
if|if
condition|(
name|aff_iterate
argument_list|(
operator|&
name|a
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"ERROR: Could not affine thread"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|ready
argument_list|)
operator|==
literal|0
condition|)
empty_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|ready
argument_list|)
condition|)
block|{
name|ATOMIC
expr_stmt|;
name|ATOMIC
expr_stmt|;
name|ATOMIC
expr_stmt|;
name|ATOMIC
expr_stmt|;
name|ck_pr_store_64
argument_list|(
name|count
operator|+
name|i
argument_list|,
name|count
index|[
name|i
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_function
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|uint64_t
name|v
decl_stmt|,
name|d
decl_stmt|;
name|unsigned
name|int
name|i
decl_stmt|;
name|pthread_t
modifier|*
name|threads
decl_stmt|;
name|struct
name|block
modifier|*
name|context
decl_stmt|;
if|if
condition|(
name|argc
operator|!=
literal|3
condition|)
block|{
name|ck_error
argument_list|(
literal|"Usage: "
name|ATOMIC_STRING
literal|"<number of threads><affinity delta>\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|nthr
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|nthr
operator|<=
literal|0
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Number of threads must be greater than 0\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|threads
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|pthread_t
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|threads
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate thread structures\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|context
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|block
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate thread contexts\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|delta
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|request
operator|=
literal|0
expr_stmt|;
name|count
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not create acquisition buffer\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|memset
argument_list|(
name|count
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Creating threads (fairness)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
block|{
name|context
index|[
name|i
index|]
operator|.
name|tid
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|pthread_create
argument_list|(
operator|&
name|threads
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|,
name|fairness
argument_list|,
name|context
operator|+
name|i
argument_list|)
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not create thread %d\n"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"done\n"
argument_list|)
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ready
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|common_sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ready
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Waiting for threads to finish acquisition regression..."
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
name|pthread_join
argument_list|(
name|threads
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"done\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|v
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
block|{
name|printf
argument_list|(
literal|"%d %15"
name|PRIu64
literal|"\n"
argument_list|,
name|i
argument_list|,
name|count
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|v
operator|+=
name|count
index|[
name|i
index|]
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n# total       : %15"
name|PRIu64
literal|"\n"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"# throughput  : %15"
name|PRIu64
literal|" a/s\n"
argument_list|,
operator|(
name|v
operator|/=
name|nthr
operator|)
operator|/
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|d
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
name|d
operator|+=
operator|(
name|count
index|[
name|i
index|]
operator|-
name|v
operator|)
operator|*
operator|(
name|count
index|[
name|i
index|]
operator|-
name|v
operator|)
expr_stmt|;
name|printf
argument_list|(
literal|"# average     : %15"
name|PRIu64
literal|"\n"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"# deviation   : %.2f (%.2f%%)\n\n"
argument_list|,
name|sqrt
argument_list|(
name|d
operator|/
name|nthr
argument_list|)
argument_list|,
operator|(
name|sqrt
argument_list|(
name|d
operator|/
name|nthr
argument_list|)
operator|/
name|v
operator|)
operator|*
literal|100.00
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

end_unit

