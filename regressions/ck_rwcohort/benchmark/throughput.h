begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2013-2015 Samy Al Bahra.  * Copyright 2013 Brendon Scheinman.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<ck_cohort.h>
end_include

begin_include
include|#
directive|include
file|<ck_rwcohort.h>
end_include

begin_include
include|#
directive|include
file|<ck_spinlock.h>
end_include

begin_include
include|#
directive|include
file|<inttypes.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|"../../common.h"
end_include

begin_define
define|#
directive|define
name|max
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|(((x)> (y)) ? (x) : (y))
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|STEPS
end_ifndef

begin_define
define|#
directive|define
name|STEPS
value|1000000
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|static
name|unsigned
name|int
name|barrier
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|int
name|flag
name|CK_CC_CACHELINE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|struct
name|affinity
name|affinity
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|int
name|nthr
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|void
name|ck_spinlock_fas_lock_with_context
parameter_list|(
name|ck_spinlock_fas_t
modifier|*
name|lock
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
block|{
operator|(
name|void
operator|)
name|context
expr_stmt|;
name|ck_spinlock_fas_lock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
specifier|static
name|void
name|ck_spinlock_fas_unlock_with_context
parameter_list|(
name|ck_spinlock_fas_t
modifier|*
name|lock
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
block|{
operator|(
name|void
operator|)
name|context
expr_stmt|;
name|ck_spinlock_fas_unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
specifier|static
name|bool
name|ck_spinlock_fas_locked_with_context
parameter_list|(
name|ck_spinlock_fas_t
modifier|*
name|lock
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
block|{
operator|(
name|void
operator|)
name|context
expr_stmt|;
return|return
name|ck_spinlock_fas_locked
argument_list|(
name|lock
argument_list|)
return|;
block|}
end_function

begin_macro
name|CK_COHORT_PROTOTYPE
argument_list|(
argument|fas_fas
argument_list|,
argument|ck_spinlock_fas_lock_with_context
argument_list|,
argument|ck_spinlock_fas_unlock_with_context
argument_list|,
argument|ck_spinlock_fas_locked_with_context
argument_list|,
argument|ck_spinlock_fas_lock_with_context
argument_list|,
argument|ck_spinlock_fas_unlock_with_context
argument_list|,
argument|ck_spinlock_fas_locked_with_context
argument_list|)
end_macro

begin_macro
name|LOCK_PROTOTYPE
argument_list|(
argument|fas_fas
argument_list|)
end_macro

begin_struct
struct|struct
name|cohort_record
block|{
name|CK_COHORT_INSTANCE
argument_list|(
argument|fas_fas
argument_list|)
name|cohort
expr_stmt|;
block|}
name|CK_CC_CACHELINE
struct|;
end_struct

begin_decl_stmt
specifier|static
name|struct
name|cohort_record
modifier|*
name|cohorts
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|ck_spinlock_t
name|global_lock
init|=
name|CK_SPINLOCK_INITIALIZER
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|LOCK_INSTANCE
argument_list|(
argument|fas_fas
argument_list|)
name|rw_cohort
operator|=
name|LOCK_INITIALIZER
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|int
name|n_cohorts
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|block
block|{
name|unsigned
name|int
name|tid
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|void
modifier|*
name|thread_rwlock
parameter_list|(
name|void
modifier|*
name|pun
parameter_list|)
block|{
name|uint64_t
name|s_b
decl_stmt|,
name|e_b
decl_stmt|,
name|a
decl_stmt|,
name|i
decl_stmt|;
name|uint64_t
modifier|*
name|value
init|=
name|pun
decl_stmt|;
name|CK_COHORT_INSTANCE
argument_list|(
name|fas_fas
argument_list|)
operator|*
name|cohort
expr_stmt|;
name|unsigned
name|int
name|core
decl_stmt|;
if|if
condition|(
name|aff_iterate_core
argument_list|(
operator|&
name|affinity
argument_list|,
operator|&
name|core
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|perror
argument_list|(
literal|"ERROR: Could not affine thread"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|cohort
operator|=
operator|&
operator|(
operator|(
name|cohorts
operator|+
operator|(
name|core
operator|/
call|(
name|int
call|)
argument_list|(
name|affinity
operator|.
name|delta
argument_list|)
operator|)
operator|%
name|n_cohorts
operator|)
operator|->
name|cohort
operator|)
expr_stmt|;
name|ck_pr_inc_uint
argument_list|(
operator|&
name|barrier
argument_list|)
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|barrier
argument_list|)
operator|!=
name|nthr
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
operator|,
name|a
operator|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|s_b
operator|=
name|rdtsc
argument_list|()
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_LOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|READ_UNLOCK
argument_list|(
name|fas_fas
argument_list|,
operator|&
name|rw_cohort
argument_list|,
name|cohort
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|e_b
operator|=
name|rdtsc
argument_list|()
expr_stmt|;
name|a
operator|+=
operator|(
name|e_b
operator|-
name|s_b
operator|)
operator|>>
literal|4
expr_stmt|;
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|flag
argument_list|)
operator|==
literal|1
condition|)
break|break;
block|}
name|ck_pr_inc_uint
argument_list|(
operator|&
name|barrier
argument_list|)
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|barrier
argument_list|)
operator|!=
name|nthr
operator|*
literal|2
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
operator|*
name|value
operator|=
operator|(
name|a
operator|/
name|i
operator|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|;
name|pthread_t
modifier|*
name|threads
decl_stmt|;
name|uint64_t
modifier|*
name|latency
decl_stmt|;
name|struct
name|block
modifier|*
name|context
decl_stmt|;
name|ck_spinlock_fas_t
modifier|*
name|local_lock
decl_stmt|;
if|if
condition|(
name|argc
operator|!=
literal|4
condition|)
block|{
name|ck_error
argument_list|(
literal|"Usage: throughput<number of cohorts><threads per cohort><affinity delta>\n"
argument_list|)
expr_stmt|;
block|}
name|n_cohorts
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|n_cohorts
operator|<=
literal|0
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Number of cohorts must be greater than 0\n"
argument_list|)
expr_stmt|;
block|}
name|nthr
operator|=
name|n_cohorts
operator|*
name|atoi
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|nthr
operator|<=
literal|0
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Number of threads must be greater than 0\n"
argument_list|)
expr_stmt|;
block|}
name|threads
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|pthread_t
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|threads
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate thread structures\n"
argument_list|)
expr_stmt|;
block|}
name|cohorts
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|cohort_record
argument_list|)
operator|*
name|n_cohorts
argument_list|)
expr_stmt|;
if|if
condition|(
name|cohorts
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate cohort structures\n"
argument_list|)
expr_stmt|;
block|}
name|context
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|block
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate thread contexts\n"
argument_list|)
expr_stmt|;
block|}
name|affinity
operator|.
name|delta
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|affinity
operator|.
name|request
operator|=
literal|0
expr_stmt|;
name|latency
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|latency
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|latency
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not create latency buffer\n"
argument_list|)
expr_stmt|;
block|}
name|memset
argument_list|(
name|latency
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|latency
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Creating cohorts..."
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n_cohorts
condition|;
name|i
operator|++
control|)
block|{
name|local_lock
operator|=
name|malloc
argument_list|(
name|max
argument_list|(
name|CK_MD_CACHELINE
argument_list|,
sizeof|sizeof
argument_list|(
name|ck_spinlock_fas_t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|local_lock
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate local lock\n"
argument_list|)
expr_stmt|;
block|}
name|CK_COHORT_INIT
argument_list|(
name|fas_fas
argument_list|,
operator|&
operator|(
operator|(
name|cohorts
operator|+
name|i
operator|)
operator|->
name|cohort
operator|)
argument_list|,
operator|&
name|global_lock
argument_list|,
name|local_lock
argument_list|,
name|CK_COHORT_DEFAULT_LOCAL_PASS_LIMIT
argument_list|)
expr_stmt|;
name|local_lock
operator|=
name|NULL
expr_stmt|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"done\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Creating threads (rwlock)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pthread_create
argument_list|(
operator|&
name|threads
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|,
name|thread_rwlock
argument_list|,
name|latency
operator|+
name|i
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not create thread %d\n"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"done\n"
argument_list|)
expr_stmt|;
name|common_sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|flag
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Waiting for threads to finish acquisition regression..."
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
name|pthread_join
argument_list|(
name|threads
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"done\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<=
name|nthr
condition|;
name|i
operator|++
control|)
name|printf
argument_list|(
literal|"%10u %20"
name|PRIu64
literal|"\n"
argument_list|,
name|i
argument_list|,
name|latency
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

end_unit

