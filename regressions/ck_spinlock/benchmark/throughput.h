begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2008-2012 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<inttypes.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<strings.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_spinlock.h>
end_include

begin_include
include|#
directive|include
file|"../../common.h"
end_include

begin_comment
comment|/* 8! = 40320, evenly divide 1 .. 8 processor workload. */
end_comment

begin_define
define|#
directive|define
name|WORKLOAD
value|(40320 * 2056)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|ITERATE
end_ifndef

begin_define
define|#
directive|define
name|ITERATE
value|65536
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|block
block|{
name|unsigned
name|int
name|tid
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|static
name|struct
name|affinity
name|a
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|int
name|ready
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|counters
block|{
name|uint64_t
name|value
decl_stmt|;
block|}
name|CK_CC_CACHELINE
struct|;
end_struct

begin_decl_stmt
specifier|static
name|struct
name|counters
modifier|*
name|count
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|uint64_t
name|nthr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|int
name|barrier
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|critical
name|__attribute__
argument_list|(
operator|(
name|aligned
argument_list|(
literal|64
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LOCK_DEFINE
expr_stmt|;
end_expr_stmt

begin_function
name|CK_CC_USED
specifier|static
name|void
name|gen_lock
parameter_list|(
name|void
parameter_list|)
block|{
name|CK_CC_UNUSED
name|int
name|core
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|LOCK_STATE
name|LOCK_STATE
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|LOCK
name|LOCK
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
name|CK_CC_USED
specifier|static
name|void
name|gen_unlock
parameter_list|(
name|void
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|LOCK_STATE
name|LOCK_STATE
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|UNLOCK
name|UNLOCK
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|void
modifier|*
name|fairness
parameter_list|(
name|void
modifier|*
name|null
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|LOCK_STATE
name|LOCK_STATE
expr_stmt|;
endif|#
directive|endif
name|struct
name|block
modifier|*
name|context
init|=
name|null
decl_stmt|;
name|unsigned
name|int
name|i
init|=
name|context
operator|->
name|tid
decl_stmt|;
specifier|volatile
name|int
name|j
decl_stmt|;
name|long
name|int
name|base
decl_stmt|;
name|unsigned
name|int
name|core
decl_stmt|;
if|if
condition|(
name|aff_iterate_core
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|core
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"ERROR: Could not affine thread"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|ready
argument_list|)
operator|==
literal|0
condition|)
empty_stmt|;
name|ck_pr_inc_uint
argument_list|(
operator|&
name|barrier
argument_list|)
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|barrier
argument_list|)
operator|!=
name|nthr
condition|)
empty_stmt|;
while|while
condition|(
name|ready
condition|)
block|{
name|LOCK
expr_stmt|;
name|count
index|[
name|i
index|]
operator|.
name|value
operator|++
expr_stmt|;
if|if
condition|(
name|critical
condition|)
block|{
name|base
operator|=
name|common_lrand48
argument_list|()
operator|%
name|critical
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|base
condition|;
name|j
operator|++
control|)
empty_stmt|;
block|}
name|UNLOCK
expr_stmt|;
block|}
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_function
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|uint64_t
name|v
decl_stmt|,
name|d
decl_stmt|;
name|unsigned
name|int
name|i
decl_stmt|;
name|pthread_t
modifier|*
name|threads
decl_stmt|;
name|struct
name|block
modifier|*
name|context
decl_stmt|;
if|if
condition|(
name|argc
operator|!=
literal|4
condition|)
block|{
name|ck_error
argument_list|(
literal|"Usage: "
name|LOCK_NAME
literal|"<number of threads><affinity delta><critical section>\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|nthr
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|nthr
operator|<=
literal|0
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Number of threads must be greater than 0\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|LOCK_INIT
name|LOCK_INIT
expr_stmt|;
endif|#
directive|endif
name|critical
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|critical
operator|<
literal|0
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: critical section cannot be negative\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|threads
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|pthread_t
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|threads
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate thread structures\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|context
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|block
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not allocate thread contexts\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|delta
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|request
operator|=
literal|0
expr_stmt|;
name|count
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|count
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|NULL
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not create acquisition buffer\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|memset
argument_list|(
name|count
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|count
argument_list|)
operator|*
name|nthr
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Creating threads (fairness)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
block|{
name|context
index|[
name|i
index|]
operator|.
name|tid
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|pthread_create
argument_list|(
operator|&
name|threads
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|,
name|fairness
argument_list|,
name|context
operator|+
name|i
argument_list|)
condition|)
block|{
name|ck_error
argument_list|(
literal|"ERROR: Could not create thread %d\n"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"done\n"
argument_list|)
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ready
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|common_sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ready
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Waiting for threads to finish acquisition regression..."
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
name|pthread_join
argument_list|(
name|threads
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"done\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|v
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
block|{
name|printf
argument_list|(
literal|"%d %15"
name|PRIu64
literal|"\n"
argument_list|,
name|i
argument_list|,
name|count
index|[
name|i
index|]
operator|.
name|value
argument_list|)
expr_stmt|;
name|v
operator|+=
name|count
index|[
name|i
index|]
operator|.
name|value
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n# total       : %15"
name|PRIu64
literal|"\n"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"# throughput  : %15"
name|PRIu64
literal|" a/s\n"
argument_list|,
operator|(
name|v
operator|/=
name|nthr
operator|)
operator|/
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|d
operator|=
literal|0
init|;
name|i
operator|<
name|nthr
condition|;
name|i
operator|++
control|)
name|d
operator|+=
operator|(
name|count
index|[
name|i
index|]
operator|.
name|value
operator|-
name|v
operator|)
operator|*
operator|(
name|count
index|[
name|i
index|]
operator|.
name|value
operator|-
name|v
operator|)
expr_stmt|;
name|printf
argument_list|(
literal|"# average     : %15"
name|PRIu64
literal|"\n"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"# deviation   : %.2f (%.2f%%)\n\n"
argument_list|,
name|sqrt
argument_list|(
name|d
operator|/
name|nthr
argument_list|)
argument_list|,
operator|(
name|sqrt
argument_list|(
name|d
operator|/
name|nthr
argument_list|)
operator|/
name|v
operator|)
operator|*
literal|100.00
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

end_unit

