begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* CPU data header for iq2000.  THIS FILE IS MACHINE GENERATED WITH CGEN.  Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.  This file is part of the GNU Binutils and/or GDB, the GNU debugger.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|IQ2000_CPU_H
end_ifndef

begin_define
define|#
directive|define
name|IQ2000_CPU_H
end_define

begin_define
define|#
directive|define
name|CGEN_ARCH
value|iq2000
end_define

begin_comment
comment|/* Given symbol S, return iq2000_cgen_<S>.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
operator|||
name|defined
argument_list|(
name|HAVE_STRINGIZE
argument_list|)
end_if

begin_define
define|#
directive|define
name|CGEN_SYM
parameter_list|(
name|s
parameter_list|)
value|iq2000##_cgen_##s
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CGEN_SYM
parameter_list|(
name|s
parameter_list|)
value|iq2000
comment|/**/
value|_cgen_
comment|/**/
value|s
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Selected cpu families.  */
end_comment

begin_define
define|#
directive|define
name|HAVE_CPU_IQ2000BF
end_define

begin_define
define|#
directive|define
name|HAVE_CPU_IQ10BF
end_define

begin_define
define|#
directive|define
name|CGEN_INSN_LSB0_P
value|1
end_define

begin_comment
comment|/* Minimum size of any insn (in bytes).  */
end_comment

begin_define
define|#
directive|define
name|CGEN_MIN_INSN_SIZE
value|3
end_define

begin_comment
comment|/* Maximum size of any insn (in bytes).  */
end_comment

begin_define
define|#
directive|define
name|CGEN_MAX_INSN_SIZE
value|4
end_define

begin_define
define|#
directive|define
name|CGEN_INT_INSN_P
value|1
end_define

begin_comment
comment|/* Maximum number of syntax elements in an instruction.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ACTUAL_MAX_SYNTAX_ELEMENTS
value|19
end_define

begin_comment
comment|/* CGEN_MNEMONIC_OPERANDS is defined if mnemonics have operands.    e.g. In "b,a foo" the ",a" is an operand.  If mnemonics have operands    we can't hash on everything up to the space.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_MNEMONIC_OPERANDS
end_define

begin_comment
comment|/* Maximum number of fields in an instruction.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ACTUAL_MAX_IFMT_OPERANDS
value|8
end_define

begin_comment
comment|/* Enums.  */
end_comment

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|gr_names
block|{
name|H_GR_R0
init|=
literal|0
block|,
name|H_GR__0
init|=
literal|0
block|,
name|H_GR_R1
init|=
literal|1
block|,
name|H_GR__1
init|=
literal|1
block|,
name|H_GR_R2
init|=
literal|2
block|,
name|H_GR__2
init|=
literal|2
block|,
name|H_GR_R3
init|=
literal|3
block|,
name|H_GR__3
init|=
literal|3
block|,
name|H_GR_R4
init|=
literal|4
block|,
name|H_GR__4
init|=
literal|4
block|,
name|H_GR_R5
init|=
literal|5
block|,
name|H_GR__5
init|=
literal|5
block|,
name|H_GR_R6
init|=
literal|6
block|,
name|H_GR__6
init|=
literal|6
block|,
name|H_GR_R7
init|=
literal|7
block|,
name|H_GR__7
init|=
literal|7
block|,
name|H_GR_R8
init|=
literal|8
block|,
name|H_GR__8
init|=
literal|8
block|,
name|H_GR_R9
init|=
literal|9
block|,
name|H_GR__9
init|=
literal|9
block|,
name|H_GR_R10
init|=
literal|10
block|,
name|H_GR__10
init|=
literal|10
block|,
name|H_GR_R11
init|=
literal|11
block|,
name|H_GR__11
init|=
literal|11
block|,
name|H_GR_R12
init|=
literal|12
block|,
name|H_GR__12
init|=
literal|12
block|,
name|H_GR_R13
init|=
literal|13
block|,
name|H_GR__13
init|=
literal|13
block|,
name|H_GR_R14
init|=
literal|14
block|,
name|H_GR__14
init|=
literal|14
block|,
name|H_GR_R15
init|=
literal|15
block|,
name|H_GR__15
init|=
literal|15
block|,
name|H_GR_R16
init|=
literal|16
block|,
name|H_GR__16
init|=
literal|16
block|,
name|H_GR_R17
init|=
literal|17
block|,
name|H_GR__17
init|=
literal|17
block|,
name|H_GR_R18
init|=
literal|18
block|,
name|H_GR__18
init|=
literal|18
block|,
name|H_GR_R19
init|=
literal|19
block|,
name|H_GR__19
init|=
literal|19
block|,
name|H_GR_R20
init|=
literal|20
block|,
name|H_GR__20
init|=
literal|20
block|,
name|H_GR_R21
init|=
literal|21
block|,
name|H_GR__21
init|=
literal|21
block|,
name|H_GR_R22
init|=
literal|22
block|,
name|H_GR__22
init|=
literal|22
block|,
name|H_GR_R23
init|=
literal|23
block|,
name|H_GR__23
init|=
literal|23
block|,
name|H_GR_R24
init|=
literal|24
block|,
name|H_GR__24
init|=
literal|24
block|,
name|H_GR_R25
init|=
literal|25
block|,
name|H_GR__25
init|=
literal|25
block|,
name|H_GR_R26
init|=
literal|26
block|,
name|H_GR__26
init|=
literal|26
block|,
name|H_GR_R27
init|=
literal|27
block|,
name|H_GR__27
init|=
literal|27
block|,
name|H_GR_R28
init|=
literal|28
block|,
name|H_GR__28
init|=
literal|28
block|,
name|H_GR_R29
init|=
literal|29
block|,
name|H_GR__29
init|=
literal|29
block|,
name|H_GR_R30
init|=
literal|30
block|,
name|H_GR__30
init|=
literal|30
block|,
name|H_GR_R31
init|=
literal|31
block|,
name|H_GR__31
init|=
literal|31
block|}
name|GR_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for primary opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|opcodes
block|{
name|OP_SPECIAL
init|=
literal|0
block|,
name|OP_REGIMM
init|=
literal|1
block|,
name|OP_J
init|=
literal|2
block|,
name|OP_JAL
init|=
literal|3
block|,
name|OP_BEQ
init|=
literal|4
block|,
name|OP_BNE
init|=
literal|5
block|,
name|OP_BLEZ
init|=
literal|6
block|,
name|OP_BGTZ
init|=
literal|7
block|,
name|OP_ADDI
init|=
literal|8
block|,
name|OP_ADDIU
init|=
literal|9
block|,
name|OP_SLTI
init|=
literal|10
block|,
name|OP_SLTIU
init|=
literal|11
block|,
name|OP_ANDI
init|=
literal|12
block|,
name|OP_ORI
init|=
literal|13
block|,
name|OP_XORI
init|=
literal|14
block|,
name|OP_LUI
init|=
literal|15
block|,
name|OP_COP0
init|=
literal|16
block|,
name|OP_COP1
init|=
literal|17
block|,
name|OP_COP2
init|=
literal|18
block|,
name|OP_COP3
init|=
literal|19
block|,
name|OP_BEQL
init|=
literal|20
block|,
name|OP_BNEL
init|=
literal|21
block|,
name|OP_BLEZL
init|=
literal|22
block|,
name|OP_BGTZL
init|=
literal|23
block|,
name|OP_BMB0
init|=
literal|24
block|,
name|OP_BMB1
init|=
literal|25
block|,
name|OP_BMB2
init|=
literal|26
block|,
name|OP_BMB3
init|=
literal|27
block|,
name|OP_BBI
init|=
literal|28
block|,
name|OP_BBV
init|=
literal|29
block|,
name|OP_BBIN
init|=
literal|30
block|,
name|OP_BBVN
init|=
literal|31
block|,
name|OP_LB
init|=
literal|32
block|,
name|OP_LH
init|=
literal|33
block|,
name|OP_LW
init|=
literal|35
block|,
name|OP_LBU
init|=
literal|36
block|,
name|OP_LHU
init|=
literal|37
block|,
name|OP_RAM
init|=
literal|39
block|,
name|OP_SB
init|=
literal|40
block|,
name|OP_SH
init|=
literal|41
block|,
name|OP_SW
init|=
literal|43
block|,
name|OP_ANDOI
init|=
literal|44
block|,
name|OP_BMB
init|=
literal|45
block|,
name|OP_ORUI
init|=
literal|47
block|,
name|OP_LDW
init|=
literal|48
block|,
name|OP_SDW
init|=
literal|56
block|,
name|OP_ANDOUI
init|=
literal|63
block|}
name|OPCODES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for iq10-only primary opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|q10_opcodes
block|{
name|OP10_BMB
init|=
literal|6
block|,
name|OP10_ORUI
init|=
literal|15
block|,
name|OP10_BMBL
init|=
literal|22
block|,
name|OP10_ANDOUI
init|=
literal|47
block|,
name|OP10_BBIL
init|=
literal|60
block|,
name|OP10_BBVL
init|=
literal|61
block|,
name|OP10_BBINL
init|=
literal|62
block|,
name|OP10_BBVNL
init|=
literal|63
block|}
name|Q10_OPCODES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for branch sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|regimm_functions
block|{
name|FUNC_BLTZ
init|=
literal|0
block|,
name|FUNC_BGEZ
init|=
literal|1
block|,
name|FUNC_BLTZL
init|=
literal|2
block|,
name|FUNC_BGEZL
init|=
literal|3
block|,
name|FUNC_BLEZ
init|=
literal|4
block|,
name|FUNC_BGTZ
init|=
literal|5
block|,
name|FUNC_BLEZL
init|=
literal|6
block|,
name|FUNC_BGTZL
init|=
literal|7
block|,
name|FUNC_BRI
init|=
literal|8
block|,
name|FUNC_BRV
init|=
literal|9
block|,
name|FUNC_BCTX
init|=
literal|12
block|,
name|FUNC_BLTZAL
init|=
literal|16
block|,
name|FUNC_BGEZAL
init|=
literal|17
block|,
name|FUNC_BLTZALL
init|=
literal|18
block|,
name|FUNC_BGEZALL
init|=
literal|19
block|,
name|FUNC_BLEZAL
init|=
literal|20
block|,
name|FUNC_BGTZAL
init|=
literal|21
block|,
name|FUNC_BLEZALL
init|=
literal|22
block|,
name|FUNC_BGTZALL
init|=
literal|23
block|}
name|REGIMM_FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for function sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|functions
block|{
name|FUNC_SLL
init|=
literal|0
block|,
name|FUNC_SLMV
init|=
literal|1
block|,
name|FUNC_SRL
init|=
literal|2
block|,
name|FUNC_SRA
init|=
literal|3
block|,
name|FUNC_SLLV
init|=
literal|4
block|,
name|FUNC_SRMV
init|=
literal|5
block|,
name|FUNC_SRLV
init|=
literal|6
block|,
name|FUNC_SRAV
init|=
literal|7
block|,
name|FUNC_JR
init|=
literal|8
block|,
name|FUNC_JALR
init|=
literal|9
block|,
name|FUNC_JCR
init|=
literal|10
block|,
name|FUNC_SYSCALL
init|=
literal|12
block|,
name|FUNC_BREAK
init|=
literal|13
block|,
name|FUNC_SLEEP
init|=
literal|14
block|,
name|FUNC_ADD
init|=
literal|32
block|,
name|FUNC_ADDU
init|=
literal|33
block|,
name|FUNC_SUB
init|=
literal|34
block|,
name|FUNC_SUBU
init|=
literal|35
block|,
name|FUNC_AND
init|=
literal|36
block|,
name|FUNC_OR
init|=
literal|37
block|,
name|FUNC_XOR
init|=
literal|38
block|,
name|FUNC_NOR
init|=
literal|39
block|,
name|FUNC_ADO16
init|=
literal|41
block|,
name|FUNC_SLT
init|=
literal|42
block|,
name|FUNC_SLTU
init|=
literal|43
block|,
name|FUNC_MRGB
init|=
literal|45
block|}
name|FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for iq10-only special function sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|q10s_functions
block|{
name|FUNC10_YIELD
init|=
literal|14
block|,
name|FUNC10_CNT1S
init|=
literal|46
block|}
name|Q10S_FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for iq10 function sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cop_functions
block|{
name|FUNC10_CFC
init|=
literal|0
block|,
name|FUNC10_LOCK
init|=
literal|1
block|,
name|FUNC10_CTC
init|=
literal|2
block|,
name|FUNC10_UNLK
init|=
literal|3
block|,
name|FUNC10_SWRD
init|=
literal|4
block|,
name|FUNC10_SWRDL
init|=
literal|5
block|,
name|FUNC10_SWWR
init|=
literal|6
block|,
name|FUNC10_SWWRU
init|=
literal|7
block|,
name|FUNC10_RBA
init|=
literal|8
block|,
name|FUNC10_RBAL
init|=
literal|9
block|,
name|FUNC10_RBAR
init|=
literal|10
block|,
name|FUNC10_DWRD
init|=
literal|12
block|,
name|FUNC10_DWRDL
init|=
literal|13
block|,
name|FUNC10_WBA
init|=
literal|16
block|,
name|FUNC10_WBAU
init|=
literal|17
block|,
name|FUNC10_WBAC
init|=
literal|18
block|,
name|FUNC10_CRC32
init|=
literal|20
block|,
name|FUNC10_CRC32B
init|=
literal|21
block|,
name|FUNC10_MCID
init|=
literal|32
block|,
name|FUNC10_DBD
init|=
literal|33
block|,
name|FUNC10_DBA
init|=
literal|34
block|,
name|FUNC10_DPWT
init|=
literal|35
block|,
name|FUNC10_AVAIL
init|=
literal|36
block|,
name|FUNC10_FREE
init|=
literal|37
block|,
name|FUNC10_CHKHDR
init|=
literal|38
block|,
name|FUNC10_TSTOD
init|=
literal|39
block|,
name|FUNC10_PKRLA
init|=
literal|40
block|,
name|FUNC10_PKRLAU
init|=
literal|41
block|,
name|FUNC10_PKRLAH
init|=
literal|42
block|,
name|FUNC10_PKRLAC
init|=
literal|43
block|,
name|FUNC10_CMPHDR
init|=
literal|44
block|,
name|FUNC10_CM64RS
init|=
literal|0
block|,
name|FUNC10_CM64RD
init|=
literal|1
block|,
name|FUNC10_CM64RI
init|=
literal|4
block|,
name|FUNC10_CM64CLR
init|=
literal|5
block|,
name|FUNC10_CM64SS
init|=
literal|8
block|,
name|FUNC10_CM64SD
init|=
literal|9
block|,
name|FUNC10_CM64SI
init|=
literal|12
block|,
name|FUNC10_CM64RA
init|=
literal|16
block|,
name|FUNC10_CM64RIA2
init|=
literal|20
block|,
name|FUNC10_CM128RIA2
init|=
literal|21
block|,
name|FUNC10_CM64SA
init|=
literal|24
block|,
name|FUNC10_CM64SIA2
init|=
literal|28
block|,
name|FUNC10_CM128SIA2
init|=
literal|29
block|,
name|FUNC10_CM32RS
init|=
literal|32
block|,
name|FUNC10_CM32RD
init|=
literal|33
block|,
name|FUNC10_CM32XOR
init|=
literal|34
block|,
name|FUNC10_CM32ANDN
init|=
literal|35
block|,
name|FUNC10_CM32RI
init|=
literal|36
block|,
name|FUNC10_CM128VSA
init|=
literal|38
block|,
name|FUNC10_CM32SS
init|=
literal|40
block|,
name|FUNC10_CM32SD
init|=
literal|41
block|,
name|FUNC10_CM32OR
init|=
literal|42
block|,
name|FUNC10_CM32AND
init|=
literal|43
block|,
name|FUNC10_CM32SI
init|=
literal|44
block|,
name|FUNC10_CM32RA
init|=
literal|48
block|,
name|FUNC10_CM32SA
init|=
literal|56
block|}
name|COP_FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for iq10 function sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cop_cm128_4functions
block|{
name|FUNC10_CM128RIA3
init|=
literal|4
block|,
name|FUNC10_CM128SIA3
init|=
literal|6
block|}
name|COP_CM128_4FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for iq10 function sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cop_cm128_3functions
block|{
name|FUNC10_CM128RIA4
init|=
literal|6
block|,
name|FUNC10_CM128SIA4
init|=
literal|7
block|}
name|COP_CM128_3FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for iq10 coprocessor sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cop2_functions
block|{
name|FUNC10_PKRLI
init|=
literal|0
block|,
name|FUNC10_PKRLIU
init|=
literal|1
block|,
name|FUNC10_PKRLIH
init|=
literal|2
block|,
name|FUNC10_PKRLIC
init|=
literal|3
block|,
name|FUNC10_RBIR
init|=
literal|1
block|,
name|FUNC10_RBI
init|=
literal|2
block|,
name|FUNC10_RBIL
init|=
literal|3
block|,
name|FUNC10_WBIC
init|=
literal|5
block|,
name|FUNC10_WBI
init|=
literal|6
block|,
name|FUNC10_WBIU
init|=
literal|7
block|}
name|COP2_FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for iq10 coprocessor cam sub-opcodes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cop3_cam_functions
block|{
name|FUNC10_CAM36
init|=
literal|16
block|,
name|FUNC10_CAM72
init|=
literal|17
block|,
name|FUNC10_CAM144
init|=
literal|18
block|,
name|FUNC10_CAM288
init|=
literal|19
block|}
name|COP3_CAM_FUNCTIONS
typedef|;
end_typedef

begin_comment
comment|/* Attributes.  */
end_comment

begin_comment
comment|/* Enum declaration for machine type selection.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|mach_attr
block|{
name|MACH_BASE
block|,
name|MACH_IQ2000
block|,
name|MACH_IQ10
block|,
name|MACH_MAX
block|}
name|MACH_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for instruction set selection.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|isa_attr
block|{
name|ISA_IQ2000
block|,
name|ISA_MAX
block|}
name|ISA_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of architecture variants.  */
end_comment

begin_define
define|#
directive|define
name|MAX_ISAS
value|1
end_define

begin_define
define|#
directive|define
name|MAX_MACHS
value|((int) MACH_MAX)
end_define

begin_comment
comment|/* Ifield support.  */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|cgen_ifld
name|iq2000_cgen_ifld_table
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Ifield attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_ifld attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_ifld_attr
block|{
name|CGEN_IFLD_VIRTUAL
block|,
name|CGEN_IFLD_PCREL_ADDR
block|,
name|CGEN_IFLD_ABS_ADDR
block|,
name|CGEN_IFLD_RESERVED
block|,
name|CGEN_IFLD_SIGN_OPT
block|,
name|CGEN_IFLD_SIGNED
block|,
name|CGEN_IFLD_END_BOOLS
block|,
name|CGEN_IFLD_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_IFLD_MACH
block|,
name|CGEN_IFLD_END_NBOOLS
block|}
name|CGEN_IFLD_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_ifld_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_IFLD_NBOOL_ATTRS
value|(CGEN_IFLD_END_NBOOLS - CGEN_IFLD_START_NBOOLS - 1)
end_define

begin_comment
comment|/* Enum declaration for iq2000 ifield types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|ifield_type
block|{
name|IQ2000_F_NIL
block|,
name|IQ2000_F_ANYOF
block|,
name|IQ2000_F_OPCODE
block|,
name|IQ2000_F_RS
block|,
name|IQ2000_F_RT
block|,
name|IQ2000_F_RD
block|,
name|IQ2000_F_SHAMT
block|,
name|IQ2000_F_CP_OP
block|,
name|IQ2000_F_CP_OP_10
block|,
name|IQ2000_F_CP_GRP
block|,
name|IQ2000_F_FUNC
block|,
name|IQ2000_F_IMM
block|,
name|IQ2000_F_RD_RS
block|,
name|IQ2000_F_RD_RT
block|,
name|IQ2000_F_RT_RS
block|,
name|IQ2000_F_JTARG
block|,
name|IQ2000_F_JTARGQ10
block|,
name|IQ2000_F_OFFSET
block|,
name|IQ2000_F_COUNT
block|,
name|IQ2000_F_BYTECOUNT
block|,
name|IQ2000_F_INDEX
block|,
name|IQ2000_F_MASK
block|,
name|IQ2000_F_MASKQ10
block|,
name|IQ2000_F_MASKL
block|,
name|IQ2000_F_EXCODE
block|,
name|IQ2000_F_RSRVD
block|,
name|IQ2000_F_10_11
block|,
name|IQ2000_F_24_19
block|,
name|IQ2000_F_5
block|,
name|IQ2000_F_10
block|,
name|IQ2000_F_25
block|,
name|IQ2000_F_CAM_Z
block|,
name|IQ2000_F_CAM_Y
block|,
name|IQ2000_F_CM_3FUNC
block|,
name|IQ2000_F_CM_4FUNC
block|,
name|IQ2000_F_CM_3Z
block|,
name|IQ2000_F_CM_4Z
block|,
name|IQ2000_F_MAX
block|}
name|IFIELD_TYPE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|MAX_IFLD
value|((int) IQ2000_F_MAX)
end_define

begin_comment
comment|/* Hardware attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_hw attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_hw_attr
block|{
name|CGEN_HW_VIRTUAL
block|,
name|CGEN_HW_CACHE_ADDR
block|,
name|CGEN_HW_PC
block|,
name|CGEN_HW_PROFILE
block|,
name|CGEN_HW_END_BOOLS
block|,
name|CGEN_HW_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_HW_MACH
block|,
name|CGEN_HW_END_NBOOLS
block|}
name|CGEN_HW_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_hw_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_HW_NBOOL_ATTRS
value|(CGEN_HW_END_NBOOLS - CGEN_HW_START_NBOOLS - 1)
end_define

begin_comment
comment|/* Enum declaration for iq2000 hardware types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_hw_type
block|{
name|HW_H_MEMORY
block|,
name|HW_H_SINT
block|,
name|HW_H_UINT
block|,
name|HW_H_ADDR
block|,
name|HW_H_IADDR
block|,
name|HW_H_PC
block|,
name|HW_H_GR
block|,
name|HW_MAX
block|}
name|CGEN_HW_TYPE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|MAX_HW
value|((int) HW_MAX)
end_define

begin_comment
comment|/* Operand attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_operand attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_operand_attr
block|{
name|CGEN_OPERAND_VIRTUAL
block|,
name|CGEN_OPERAND_PCREL_ADDR
block|,
name|CGEN_OPERAND_ABS_ADDR
block|,
name|CGEN_OPERAND_SIGN_OPT
block|,
name|CGEN_OPERAND_SIGNED
block|,
name|CGEN_OPERAND_NEGATIVE
block|,
name|CGEN_OPERAND_RELAX
block|,
name|CGEN_OPERAND_SEM_ONLY
block|,
name|CGEN_OPERAND_END_BOOLS
block|,
name|CGEN_OPERAND_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_OPERAND_MACH
block|,
name|CGEN_OPERAND_END_NBOOLS
block|}
name|CGEN_OPERAND_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_operand_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_OPERAND_NBOOL_ATTRS
value|(CGEN_OPERAND_END_NBOOLS - CGEN_OPERAND_START_NBOOLS - 1)
end_define

begin_comment
comment|/* Enum declaration for iq2000 operand types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_operand_type
block|{
name|IQ2000_OPERAND_PC
block|,
name|IQ2000_OPERAND_RS
block|,
name|IQ2000_OPERAND_RT
block|,
name|IQ2000_OPERAND_RD
block|,
name|IQ2000_OPERAND_RD_RS
block|,
name|IQ2000_OPERAND_RD_RT
block|,
name|IQ2000_OPERAND_RT_RS
block|,
name|IQ2000_OPERAND_SHAMT
block|,
name|IQ2000_OPERAND_IMM
block|,
name|IQ2000_OPERAND_OFFSET
block|,
name|IQ2000_OPERAND_BASEOFF
block|,
name|IQ2000_OPERAND_JMPTARG
block|,
name|IQ2000_OPERAND_MASK
block|,
name|IQ2000_OPERAND_MASKQ10
block|,
name|IQ2000_OPERAND_MASKL
block|,
name|IQ2000_OPERAND_COUNT
block|,
name|IQ2000_OPERAND_F_INDEX
block|,
name|IQ2000_OPERAND_EXECODE
block|,
name|IQ2000_OPERAND_BYTECOUNT
block|,
name|IQ2000_OPERAND_CAM_Y
block|,
name|IQ2000_OPERAND_CAM_Z
block|,
name|IQ2000_OPERAND_CM_3FUNC
block|,
name|IQ2000_OPERAND_CM_4FUNC
block|,
name|IQ2000_OPERAND_CM_3Z
block|,
name|IQ2000_OPERAND_CM_4Z
block|,
name|IQ2000_OPERAND_BASE
block|,
name|IQ2000_OPERAND_MASKR
block|,
name|IQ2000_OPERAND_BITNUM
block|,
name|IQ2000_OPERAND_HI16
block|,
name|IQ2000_OPERAND_LO16
block|,
name|IQ2000_OPERAND_MLO16
block|,
name|IQ2000_OPERAND_JMPTARGQ10
block|,
name|IQ2000_OPERAND_MAX
block|}
name|CGEN_OPERAND_TYPE
typedef|;
end_typedef

begin_comment
comment|/* Number of operands types.  */
end_comment

begin_define
define|#
directive|define
name|MAX_OPERANDS
value|32
end_define

begin_comment
comment|/* Maximum number of operands referenced by any insn.  */
end_comment

begin_define
define|#
directive|define
name|MAX_OPERAND_INSTANCES
value|8
end_define

begin_comment
comment|/* Insn attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_insn attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_insn_attr
block|{
name|CGEN_INSN_ALIAS
block|,
name|CGEN_INSN_VIRTUAL
block|,
name|CGEN_INSN_UNCOND_CTI
block|,
name|CGEN_INSN_COND_CTI
block|,
name|CGEN_INSN_SKIP_CTI
block|,
name|CGEN_INSN_DELAY_SLOT
block|,
name|CGEN_INSN_RELAXABLE
block|,
name|CGEN_INSN_RELAXED
block|,
name|CGEN_INSN_NO_DIS
block|,
name|CGEN_INSN_PBB
block|,
name|CGEN_INSN_YIELD_INSN
block|,
name|CGEN_INSN_LOAD_DELAY
block|,
name|CGEN_INSN_EVEN_REG_NUM
block|,
name|CGEN_INSN_UNSUPPORTED
block|,
name|CGEN_INSN_USES_RD
block|,
name|CGEN_INSN_USES_RS
block|,
name|CGEN_INSN_USES_RT
block|,
name|CGEN_INSN_USES_R31
block|,
name|CGEN_INSN_END_BOOLS
block|,
name|CGEN_INSN_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_INSN_MACH
block|,
name|CGEN_INSN_END_NBOOLS
block|}
name|CGEN_INSN_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_insn_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_INSN_NBOOL_ATTRS
value|(CGEN_INSN_END_NBOOLS - CGEN_INSN_START_NBOOLS - 1)
end_define

begin_comment
comment|/* cgen.h uses things we just defined.  */
end_comment

begin_include
include|#
directive|include
file|"opcode/cgen.h"
end_include

begin_comment
comment|/* Attributes.  */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|iq2000_cgen_hardware_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|iq2000_cgen_ifield_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|iq2000_cgen_operand_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|iq2000_cgen_insn_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Hardware decls.  */
end_comment

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|iq2000_cgen_opval_gr_names
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* IQ2000_CPU_H */
end_comment

end_unit

