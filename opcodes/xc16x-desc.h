begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* CPU data header for xc16x.  THIS FILE IS MACHINE GENERATED WITH CGEN.  Copyright 1996-2005 Free Software Foundation, Inc.  This file is part of the GNU Binutils and/or GDB, the GNU debugger.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XC16X_CPU_H
end_ifndef

begin_define
define|#
directive|define
name|XC16X_CPU_H
end_define

begin_include
include|#
directive|include
file|"opcode/cgen-bitset.h"
end_include

begin_define
define|#
directive|define
name|CGEN_ARCH
value|xc16x
end_define

begin_comment
comment|/* Given symbol S, return xc16x_cgen_<S>.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
operator|||
name|defined
argument_list|(
name|HAVE_STRINGIZE
argument_list|)
end_if

begin_define
define|#
directive|define
name|CGEN_SYM
parameter_list|(
name|s
parameter_list|)
value|xc16x##_cgen_##s
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CGEN_SYM
parameter_list|(
name|s
parameter_list|)
value|xc16x
comment|/**/
value|_cgen_
comment|/**/
value|s
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Selected cpu families.  */
end_comment

begin_define
define|#
directive|define
name|HAVE_CPU_XC16XBF
end_define

begin_define
define|#
directive|define
name|CGEN_INSN_LSB0_P
value|1
end_define

begin_comment
comment|/* Minimum size of any insn (in bytes).  */
end_comment

begin_define
define|#
directive|define
name|CGEN_MIN_INSN_SIZE
value|2
end_define

begin_comment
comment|/* Maximum size of any insn (in bytes).  */
end_comment

begin_define
define|#
directive|define
name|CGEN_MAX_INSN_SIZE
value|4
end_define

begin_define
define|#
directive|define
name|CGEN_INT_INSN_P
value|1
end_define

begin_comment
comment|/* Maximum number of syntax elements in an instruction.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ACTUAL_MAX_SYNTAX_ELEMENTS
value|15
end_define

begin_comment
comment|/* CGEN_MNEMONIC_OPERANDS is defined if mnemonics have operands.    e.g. In "b,a foo" the ",a" is an operand.  If mnemonics have operands    we can't hash on everything up to the space.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_MNEMONIC_OPERANDS
end_define

begin_comment
comment|/* Maximum number of fields in an instruction.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ACTUAL_MAX_IFMT_OPERANDS
value|8
end_define

begin_comment
comment|/* Enums.  */
end_comment

begin_comment
comment|/* Enum declaration for insn format enums.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|insn_op1
block|{
name|OP1_0
block|,
name|OP1_1
block|,
name|OP1_2
block|,
name|OP1_3
block|,
name|OP1_4
block|,
name|OP1_5
block|,
name|OP1_6
block|,
name|OP1_7
block|,
name|OP1_8
block|,
name|OP1_9
block|,
name|OP1_10
block|,
name|OP1_11
block|,
name|OP1_12
block|,
name|OP1_13
block|,
name|OP1_14
block|,
name|OP1_15
block|}
name|INSN_OP1
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for op2 enums.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|insn_op2
block|{
name|OP2_0
block|,
name|OP2_1
block|,
name|OP2_2
block|,
name|OP2_3
block|,
name|OP2_4
block|,
name|OP2_5
block|,
name|OP2_6
block|,
name|OP2_7
block|,
name|OP2_8
block|,
name|OP2_9
block|,
name|OP2_10
block|,
name|OP2_11
block|,
name|OP2_12
block|,
name|OP2_13
block|,
name|OP2_14
block|,
name|OP2_15
block|}
name|INSN_OP2
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for bit set/clear enums.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|insn_qcond
block|{
name|QBIT_0
block|,
name|QBIT_1
block|,
name|QBIT_2
block|,
name|QBIT_3
block|,
name|QBIT_4
block|,
name|QBIT_5
block|,
name|QBIT_6
block|,
name|QBIT_7
block|,
name|QBIT_8
block|,
name|QBIT_9
block|,
name|QBIT_10
block|,
name|QBIT_11
block|,
name|QBIT_12
block|,
name|QBIT_13
block|,
name|QBIT_14
block|,
name|QBIT_15
block|}
name|INSN_QCOND
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for relative jump condition code op2 enums.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|insn_rcond
block|{
name|COND_UC
init|=
literal|0
block|,
name|COND_NET
init|=
literal|1
block|,
name|COND_Z
init|=
literal|2
block|,
name|COND_NE_NZ
init|=
literal|3
block|,
name|COND_V
init|=
literal|4
block|,
name|COND_NV
init|=
literal|5
block|,
name|COND_N
init|=
literal|6
block|,
name|COND_NN
init|=
literal|7
block|,
name|COND_C
init|=
literal|8
block|,
name|COND_NC
init|=
literal|9
block|,
name|COND_SGT
init|=
literal|10
block|,
name|COND_SLE
init|=
literal|11
block|,
name|COND_SLT
init|=
literal|12
block|,
name|COND_SGE
init|=
literal|13
block|,
name|COND_UGT
init|=
literal|14
block|,
name|COND_ULE
init|=
literal|15
block|,
name|COND_EQ
init|=
literal|2
block|,
name|COND_NE
init|=
literal|3
block|,
name|COND_ULT
init|=
literal|8
block|,
name|COND_UGE
init|=
literal|9
block|}
name|INSN_RCOND
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|gr_names
block|{
name|H_GR_R0
block|,
name|H_GR_R1
block|,
name|H_GR_R2
block|,
name|H_GR_R3
block|,
name|H_GR_R4
block|,
name|H_GR_R5
block|,
name|H_GR_R6
block|,
name|H_GR_R7
block|,
name|H_GR_R8
block|,
name|H_GR_R9
block|,
name|H_GR_R10
block|,
name|H_GR_R11
block|,
name|H_GR_R12
block|,
name|H_GR_R13
block|,
name|H_GR_R14
block|,
name|H_GR_R15
block|}
name|GR_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|ext_names
block|{
name|H_EXT_0X1
init|=
literal|0
block|,
name|H_EXT_0X2
init|=
literal|1
block|,
name|H_EXT_0X3
init|=
literal|2
block|,
name|H_EXT_0X4
init|=
literal|3
block|,
name|H_EXT_1
init|=
literal|0
block|,
name|H_EXT_2
init|=
literal|1
block|,
name|H_EXT_3
init|=
literal|2
block|,
name|H_EXT_4
init|=
literal|3
block|}
name|EXT_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|psw_names
block|{
name|H_PSW_IEN
init|=
literal|136
block|,
name|H_PSW_R0_11
init|=
literal|240
block|,
name|H_PSW_R1_11
init|=
literal|241
block|,
name|H_PSW_R2_11
init|=
literal|242
block|,
name|H_PSW_R3_11
init|=
literal|243
block|,
name|H_PSW_R4_11
init|=
literal|244
block|,
name|H_PSW_R5_11
init|=
literal|245
block|,
name|H_PSW_R6_11
init|=
literal|246
block|,
name|H_PSW_R7_11
init|=
literal|247
block|,
name|H_PSW_R8_11
init|=
literal|248
block|,
name|H_PSW_R9_11
init|=
literal|249
block|,
name|H_PSW_R10_11
init|=
literal|250
block|,
name|H_PSW_R11_11
init|=
literal|251
block|,
name|H_PSW_R12_11
init|=
literal|252
block|,
name|H_PSW_R13_11
init|=
literal|253
block|,
name|H_PSW_R14_11
init|=
literal|254
block|,
name|H_PSW_R15_11
init|=
literal|255
block|}
name|PSW_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|grb_names
block|{
name|H_GRB_RL0
block|,
name|H_GRB_RH0
block|,
name|H_GRB_RL1
block|,
name|H_GRB_RH1
block|,
name|H_GRB_RL2
block|,
name|H_GRB_RH2
block|,
name|H_GRB_RL3
block|,
name|H_GRB_RH3
block|,
name|H_GRB_RL4
block|,
name|H_GRB_RH4
block|,
name|H_GRB_RL5
block|,
name|H_GRB_RH5
block|,
name|H_GRB_RL6
block|,
name|H_GRB_RH6
block|,
name|H_GRB_RL7
block|,
name|H_GRB_RH7
block|}
name|GRB_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|conditioncode_names
block|{
name|H_CC_CC_UC
init|=
literal|0
block|,
name|H_CC_CC_NET
init|=
literal|1
block|,
name|H_CC_CC_Z
init|=
literal|2
block|,
name|H_CC_CC_EQ
init|=
literal|2
block|,
name|H_CC_CC_NZ
init|=
literal|3
block|,
name|H_CC_CC_NE
init|=
literal|3
block|,
name|H_CC_CC_V
init|=
literal|4
block|,
name|H_CC_CC_NV
init|=
literal|5
block|,
name|H_CC_CC_N
init|=
literal|6
block|,
name|H_CC_CC_NN
init|=
literal|7
block|,
name|H_CC_CC_ULT
init|=
literal|8
block|,
name|H_CC_CC_UGE
init|=
literal|9
block|,
name|H_CC_CC_C
init|=
literal|8
block|,
name|H_CC_CC_NC
init|=
literal|9
block|,
name|H_CC_CC_SGT
init|=
literal|10
block|,
name|H_CC_CC_SLE
init|=
literal|11
block|,
name|H_CC_CC_SLT
init|=
literal|12
block|,
name|H_CC_CC_SGE
init|=
literal|13
block|,
name|H_CC_CC_UGT
init|=
literal|14
block|,
name|H_CC_CC_ULE
init|=
literal|15
block|}
name|CONDITIONCODE_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|extconditioncode_names
block|{
name|H_ECC_CC_UC
init|=
literal|0
block|,
name|H_ECC_CC_NET
init|=
literal|2
block|,
name|H_ECC_CC_Z
init|=
literal|4
block|,
name|H_ECC_CC_EQ
init|=
literal|4
block|,
name|H_ECC_CC_NZ
init|=
literal|6
block|,
name|H_ECC_CC_NE
init|=
literal|6
block|,
name|H_ECC_CC_V
init|=
literal|8
block|,
name|H_ECC_CC_NV
init|=
literal|10
block|,
name|H_ECC_CC_N
init|=
literal|12
block|,
name|H_ECC_CC_NN
init|=
literal|14
block|,
name|H_ECC_CC_ULT
init|=
literal|16
block|,
name|H_ECC_CC_UGE
init|=
literal|18
block|,
name|H_ECC_CC_C
init|=
literal|16
block|,
name|H_ECC_CC_NC
init|=
literal|18
block|,
name|H_ECC_CC_SGT
init|=
literal|20
block|,
name|H_ECC_CC_SLE
init|=
literal|22
block|,
name|H_ECC_CC_SLT
init|=
literal|24
block|,
name|H_ECC_CC_SGE
init|=
literal|26
block|,
name|H_ECC_CC_UGT
init|=
literal|28
block|,
name|H_ECC_CC_ULE
init|=
literal|30
block|,
name|H_ECC_CC_NUSR0
init|=
literal|1
block|,
name|H_ECC_CC_NUSR1
init|=
literal|3
block|,
name|H_ECC_CC_USR0
init|=
literal|5
block|,
name|H_ECC_CC_USR1
init|=
literal|7
block|}
name|EXTCONDITIONCODE_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|grb8_names
block|{
name|H_GRB8_DPP0
init|=
literal|0
block|,
name|H_GRB8_DPP1
init|=
literal|1
block|,
name|H_GRB8_DPP2
init|=
literal|2
block|,
name|H_GRB8_DPP3
init|=
literal|3
block|,
name|H_GRB8_PSW
init|=
literal|136
block|,
name|H_GRB8_CP
init|=
literal|8
block|,
name|H_GRB8_MDL
init|=
literal|7
block|,
name|H_GRB8_MDH
init|=
literal|6
block|,
name|H_GRB8_MDC
init|=
literal|135
block|,
name|H_GRB8_SP
init|=
literal|9
block|,
name|H_GRB8_CSP
init|=
literal|4
block|,
name|H_GRB8_VECSEG
init|=
literal|137
block|,
name|H_GRB8_STKOV
init|=
literal|10
block|,
name|H_GRB8_STKUN
init|=
literal|11
block|,
name|H_GRB8_CPUCON1
init|=
literal|12
block|,
name|H_GRB8_CPUCON2
init|=
literal|13
block|,
name|H_GRB8_ZEROS
init|=
literal|142
block|,
name|H_GRB8_ONES
init|=
literal|143
block|,
name|H_GRB8_SPSEG
init|=
literal|134
block|,
name|H_GRB8_TFR
init|=
literal|214
block|,
name|H_GRB8_RL0
init|=
literal|240
block|,
name|H_GRB8_RH0
init|=
literal|241
block|,
name|H_GRB8_RL1
init|=
literal|242
block|,
name|H_GRB8_RH1
init|=
literal|243
block|,
name|H_GRB8_RL2
init|=
literal|244
block|,
name|H_GRB8_RH2
init|=
literal|245
block|,
name|H_GRB8_RL3
init|=
literal|246
block|,
name|H_GRB8_RH3
init|=
literal|247
block|,
name|H_GRB8_RL4
init|=
literal|248
block|,
name|H_GRB8_RH4
init|=
literal|249
block|,
name|H_GRB8_RL5
init|=
literal|250
block|,
name|H_GRB8_RH5
init|=
literal|251
block|,
name|H_GRB8_RL6
init|=
literal|252
block|,
name|H_GRB8_RH6
init|=
literal|253
block|,
name|H_GRB8_RL7
init|=
literal|254
block|,
name|H_GRB8_RH7
init|=
literal|255
block|}
name|GRB8_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|r8_names
block|{
name|H_R8_DPP0
init|=
literal|0
block|,
name|H_R8_DPP1
init|=
literal|1
block|,
name|H_R8_DPP2
init|=
literal|2
block|,
name|H_R8_DPP3
init|=
literal|3
block|,
name|H_R8_PSW
init|=
literal|136
block|,
name|H_R8_CP
init|=
literal|8
block|,
name|H_R8_MDL
init|=
literal|7
block|,
name|H_R8_MDH
init|=
literal|6
block|,
name|H_R8_MDC
init|=
literal|135
block|,
name|H_R8_SP
init|=
literal|9
block|,
name|H_R8_CSP
init|=
literal|4
block|,
name|H_R8_VECSEG
init|=
literal|137
block|,
name|H_R8_STKOV
init|=
literal|10
block|,
name|H_R8_STKUN
init|=
literal|11
block|,
name|H_R8_CPUCON1
init|=
literal|12
block|,
name|H_R8_CPUCON2
init|=
literal|13
block|,
name|H_R8_ZEROS
init|=
literal|142
block|,
name|H_R8_ONES
init|=
literal|143
block|,
name|H_R8_SPSEG
init|=
literal|134
block|,
name|H_R8_TFR
init|=
literal|214
block|,
name|H_R8_R0
init|=
literal|240
block|,
name|H_R8_R1
init|=
literal|241
block|,
name|H_R8_R2
init|=
literal|242
block|,
name|H_R8_R3
init|=
literal|243
block|,
name|H_R8_R4
init|=
literal|244
block|,
name|H_R8_R5
init|=
literal|245
block|,
name|H_R8_R6
init|=
literal|246
block|,
name|H_R8_R7
init|=
literal|247
block|,
name|H_R8_R8
init|=
literal|248
block|,
name|H_R8_R9
init|=
literal|249
block|,
name|H_R8_R10
init|=
literal|250
block|,
name|H_R8_R11
init|=
literal|251
block|,
name|H_R8_R12
init|=
literal|252
block|,
name|H_R8_R13
init|=
literal|253
block|,
name|H_R8_R14
init|=
literal|254
block|,
name|H_R8_R15
init|=
literal|255
block|}
name|R8_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|regmem8_names
block|{
name|H_REGMEM8_DPP0
init|=
literal|0
block|,
name|H_REGMEM8_DPP1
init|=
literal|1
block|,
name|H_REGMEM8_DPP2
init|=
literal|2
block|,
name|H_REGMEM8_DPP3
init|=
literal|3
block|,
name|H_REGMEM8_PSW
init|=
literal|136
block|,
name|H_REGMEM8_CP
init|=
literal|8
block|,
name|H_REGMEM8_MDL
init|=
literal|7
block|,
name|H_REGMEM8_MDH
init|=
literal|6
block|,
name|H_REGMEM8_MDC
init|=
literal|135
block|,
name|H_REGMEM8_SP
init|=
literal|9
block|,
name|H_REGMEM8_CSP
init|=
literal|4
block|,
name|H_REGMEM8_VECSEG
init|=
literal|137
block|,
name|H_REGMEM8_STKOV
init|=
literal|10
block|,
name|H_REGMEM8_STKUN
init|=
literal|11
block|,
name|H_REGMEM8_CPUCON1
init|=
literal|12
block|,
name|H_REGMEM8_CPUCON2
init|=
literal|13
block|,
name|H_REGMEM8_ZEROS
init|=
literal|142
block|,
name|H_REGMEM8_ONES
init|=
literal|143
block|,
name|H_REGMEM8_SPSEG
init|=
literal|134
block|,
name|H_REGMEM8_TFR
init|=
literal|214
block|,
name|H_REGMEM8_R0
init|=
literal|240
block|,
name|H_REGMEM8_R1
init|=
literal|241
block|,
name|H_REGMEM8_R2
init|=
literal|242
block|,
name|H_REGMEM8_R3
init|=
literal|243
block|,
name|H_REGMEM8_R4
init|=
literal|244
block|,
name|H_REGMEM8_R5
init|=
literal|245
block|,
name|H_REGMEM8_R6
init|=
literal|246
block|,
name|H_REGMEM8_R7
init|=
literal|247
block|,
name|H_REGMEM8_R8
init|=
literal|248
block|,
name|H_REGMEM8_R9
init|=
literal|249
block|,
name|H_REGMEM8_R10
init|=
literal|250
block|,
name|H_REGMEM8_R11
init|=
literal|251
block|,
name|H_REGMEM8_R12
init|=
literal|252
block|,
name|H_REGMEM8_R13
init|=
literal|253
block|,
name|H_REGMEM8_R14
init|=
literal|254
block|,
name|H_REGMEM8_R15
init|=
literal|255
block|}
name|REGMEM8_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|regdiv8_names
block|{
name|H_REGDIV8_R0
init|=
literal|0
block|,
name|H_REGDIV8_R1
init|=
literal|17
block|,
name|H_REGDIV8_R2
init|=
literal|34
block|,
name|H_REGDIV8_R3
init|=
literal|51
block|,
name|H_REGDIV8_R4
init|=
literal|68
block|,
name|H_REGDIV8_R5
init|=
literal|85
block|,
name|H_REGDIV8_R6
init|=
literal|102
block|,
name|H_REGDIV8_R7
init|=
literal|119
block|,
name|H_REGDIV8_R8
init|=
literal|136
block|,
name|H_REGDIV8_R9
init|=
literal|153
block|,
name|H_REGDIV8_R10
init|=
literal|170
block|,
name|H_REGDIV8_R11
init|=
literal|187
block|,
name|H_REGDIV8_R12
init|=
literal|204
block|,
name|H_REGDIV8_R13
init|=
literal|221
block|,
name|H_REGDIV8_R14
init|=
literal|238
block|,
name|H_REGDIV8_R15
init|=
literal|255
block|}
name|REGDIV8_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|reg0_name
block|{
name|H_REG0_0X1
init|=
literal|1
block|,
name|H_REG0_0X2
init|=
literal|2
block|,
name|H_REG0_0X3
init|=
literal|3
block|,
name|H_REG0_0X4
init|=
literal|4
block|,
name|H_REG0_0X5
init|=
literal|5
block|,
name|H_REG0_0X6
init|=
literal|6
block|,
name|H_REG0_0X7
init|=
literal|7
block|,
name|H_REG0_0X8
init|=
literal|8
block|,
name|H_REG0_0X9
init|=
literal|9
block|,
name|H_REG0_0XA
init|=
literal|10
block|,
name|H_REG0_0XB
init|=
literal|11
block|,
name|H_REG0_0XC
init|=
literal|12
block|,
name|H_REG0_0XD
init|=
literal|13
block|,
name|H_REG0_0XE
init|=
literal|14
block|,
name|H_REG0_0XF
init|=
literal|15
block|,
name|H_REG0_1
init|=
literal|1
block|,
name|H_REG0_2
init|=
literal|2
block|,
name|H_REG0_3
init|=
literal|3
block|,
name|H_REG0_4
init|=
literal|4
block|,
name|H_REG0_5
init|=
literal|5
block|,
name|H_REG0_6
init|=
literal|6
block|,
name|H_REG0_7
init|=
literal|7
block|,
name|H_REG0_8
init|=
literal|8
block|,
name|H_REG0_9
init|=
literal|9
block|,
name|H_REG0_10
init|=
literal|10
block|,
name|H_REG0_11
init|=
literal|11
block|,
name|H_REG0_12
init|=
literal|12
block|,
name|H_REG0_13
init|=
literal|13
block|,
name|H_REG0_14
init|=
literal|14
block|,
name|H_REG0_15
init|=
literal|15
block|}
name|REG0_NAME
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|reg0_name1
block|{
name|H_REG01_0X1
init|=
literal|1
block|,
name|H_REG01_0X2
init|=
literal|2
block|,
name|H_REG01_0X3
init|=
literal|3
block|,
name|H_REG01_0X4
init|=
literal|4
block|,
name|H_REG01_0X5
init|=
literal|5
block|,
name|H_REG01_0X6
init|=
literal|6
block|,
name|H_REG01_0X7
init|=
literal|7
block|,
name|H_REG01_1
init|=
literal|1
block|,
name|H_REG01_2
init|=
literal|2
block|,
name|H_REG01_3
init|=
literal|3
block|,
name|H_REG01_4
init|=
literal|4
block|,
name|H_REG01_5
init|=
literal|5
block|,
name|H_REG01_6
init|=
literal|6
block|,
name|H_REG01_7
init|=
literal|7
block|}
name|REG0_NAME1
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|regbmem8_names
block|{
name|H_REGBMEM8_DPP0
init|=
literal|0
block|,
name|H_REGBMEM8_DPP1
init|=
literal|1
block|,
name|H_REGBMEM8_DPP2
init|=
literal|2
block|,
name|H_REGBMEM8_DPP3
init|=
literal|3
block|,
name|H_REGBMEM8_PSW
init|=
literal|136
block|,
name|H_REGBMEM8_CP
init|=
literal|8
block|,
name|H_REGBMEM8_MDL
init|=
literal|7
block|,
name|H_REGBMEM8_MDH
init|=
literal|6
block|,
name|H_REGBMEM8_MDC
init|=
literal|135
block|,
name|H_REGBMEM8_SP
init|=
literal|9
block|,
name|H_REGBMEM8_CSP
init|=
literal|4
block|,
name|H_REGBMEM8_VECSEG
init|=
literal|137
block|,
name|H_REGBMEM8_STKOV
init|=
literal|10
block|,
name|H_REGBMEM8_STKUN
init|=
literal|11
block|,
name|H_REGBMEM8_CPUCON1
init|=
literal|12
block|,
name|H_REGBMEM8_CPUCON2
init|=
literal|13
block|,
name|H_REGBMEM8_ZEROS
init|=
literal|142
block|,
name|H_REGBMEM8_ONES
init|=
literal|143
block|,
name|H_REGBMEM8_SPSEG
init|=
literal|134
block|,
name|H_REGBMEM8_TFR
init|=
literal|214
block|,
name|H_REGBMEM8_RL0
init|=
literal|240
block|,
name|H_REGBMEM8_RH0
init|=
literal|241
block|,
name|H_REGBMEM8_RL1
init|=
literal|242
block|,
name|H_REGBMEM8_RH1
init|=
literal|243
block|,
name|H_REGBMEM8_RL2
init|=
literal|244
block|,
name|H_REGBMEM8_RH2
init|=
literal|245
block|,
name|H_REGBMEM8_RL3
init|=
literal|246
block|,
name|H_REGBMEM8_RH3
init|=
literal|247
block|,
name|H_REGBMEM8_RL4
init|=
literal|248
block|,
name|H_REGBMEM8_RH4
init|=
literal|249
block|,
name|H_REGBMEM8_RL5
init|=
literal|250
block|,
name|H_REGBMEM8_RH5
init|=
literal|251
block|,
name|H_REGBMEM8_RL6
init|=
literal|252
block|,
name|H_REGBMEM8_RH6
init|=
literal|253
block|,
name|H_REGBMEM8_RL7
init|=
literal|254
block|,
name|H_REGBMEM8_RH7
init|=
literal|255
block|}
name|REGBMEM8_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for .  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|memgr8_names
block|{
name|H_MEMGR8_DPP0
init|=
literal|65024
block|,
name|H_MEMGR8_DPP1
init|=
literal|65026
block|,
name|H_MEMGR8_DPP2
init|=
literal|65028
block|,
name|H_MEMGR8_DPP3
init|=
literal|65030
block|,
name|H_MEMGR8_PSW
init|=
literal|65296
block|,
name|H_MEMGR8_CP
init|=
literal|65040
block|,
name|H_MEMGR8_MDL
init|=
literal|65038
block|,
name|H_MEMGR8_MDH
init|=
literal|65036
block|,
name|H_MEMGR8_MDC
init|=
literal|65294
block|,
name|H_MEMGR8_SP
init|=
literal|65042
block|,
name|H_MEMGR8_CSP
init|=
literal|65032
block|,
name|H_MEMGR8_VECSEG
init|=
literal|65298
block|,
name|H_MEMGR8_STKOV
init|=
literal|65044
block|,
name|H_MEMGR8_STKUN
init|=
literal|65046
block|,
name|H_MEMGR8_CPUCON1
init|=
literal|65048
block|,
name|H_MEMGR8_CPUCON2
init|=
literal|65050
block|,
name|H_MEMGR8_ZEROS
init|=
literal|65308
block|,
name|H_MEMGR8_ONES
init|=
literal|65310
block|,
name|H_MEMGR8_SPSEG
init|=
literal|65292
block|,
name|H_MEMGR8_TFR
init|=
literal|65452
block|}
name|MEMGR8_NAMES
typedef|;
end_typedef

begin_comment
comment|/* Attributes.  */
end_comment

begin_comment
comment|/* Enum declaration for machine type selection.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|mach_attr
block|{
name|MACH_BASE
block|,
name|MACH_XC16X
block|,
name|MACH_MAX
block|}
name|MACH_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for instruction set selection.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|isa_attr
block|{
name|ISA_XC16X
block|,
name|ISA_MAX
block|}
name|ISA_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Enum declaration for parallel execution pipeline selection.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|pipe_attr
block|{
name|PIPE_NONE
block|,
name|PIPE_OS
block|}
name|PIPE_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of architecture variants.  */
end_comment

begin_define
define|#
directive|define
name|MAX_ISAS
value|1
end_define

begin_define
define|#
directive|define
name|MAX_MACHS
value|((int) MACH_MAX)
end_define

begin_comment
comment|/* Ifield support.  */
end_comment

begin_comment
comment|/* Ifield attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_ifld attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_ifld_attr
block|{
name|CGEN_IFLD_VIRTUAL
block|,
name|CGEN_IFLD_PCREL_ADDR
block|,
name|CGEN_IFLD_ABS_ADDR
block|,
name|CGEN_IFLD_RESERVED
block|,
name|CGEN_IFLD_SIGN_OPT
block|,
name|CGEN_IFLD_SIGNED
block|,
name|CGEN_IFLD_RELOC
block|,
name|CGEN_IFLD_END_BOOLS
block|,
name|CGEN_IFLD_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_IFLD_MACH
block|,
name|CGEN_IFLD_END_NBOOLS
block|}
name|CGEN_IFLD_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_ifld_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_IFLD_NBOOL_ATTRS
value|(CGEN_IFLD_END_NBOOLS - CGEN_IFLD_START_NBOOLS - 1)
end_define

begin_comment
comment|/* cgen_ifld attribute accessor macros.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_MACH_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|((attrs)->nonbool[CGEN_IFLD_MACH-CGEN_IFLD_START_NBOOLS-1].nonbitset)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_VIRTUAL_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_IFLD_VIRTUAL)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_PCREL_ADDR_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_IFLD_PCREL_ADDR)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_ABS_ADDR_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_IFLD_ABS_ADDR)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_RESERVED_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_IFLD_RESERVED)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_SIGN_OPT_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_IFLD_SIGN_OPT)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_SIGNED_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_IFLD_SIGNED)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_IFLD_RELOC_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_IFLD_RELOC)) != 0)
end_define

begin_comment
comment|/* Enum declaration for xc16x ifield types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|ifield_type
block|{
name|XC16X_F_NIL
block|,
name|XC16X_F_ANYOF
block|,
name|XC16X_F_OP1
block|,
name|XC16X_F_OP2
block|,
name|XC16X_F_CONDCODE
block|,
name|XC16X_F_ICONDCODE
block|,
name|XC16X_F_RCOND
block|,
name|XC16X_F_QCOND
block|,
name|XC16X_F_EXTCCODE
block|,
name|XC16X_F_R0
block|,
name|XC16X_F_R1
block|,
name|XC16X_F_R2
block|,
name|XC16X_F_R3
block|,
name|XC16X_F_R4
block|,
name|XC16X_F_UIMM2
block|,
name|XC16X_F_UIMM3
block|,
name|XC16X_F_UIMM4
block|,
name|XC16X_F_UIMM7
block|,
name|XC16X_F_UIMM8
block|,
name|XC16X_F_UIMM16
block|,
name|XC16X_F_MEMORY
block|,
name|XC16X_F_MEMGR8
block|,
name|XC16X_F_REL8
block|,
name|XC16X_F_RELHI8
block|,
name|XC16X_F_REG8
block|,
name|XC16X_F_REGMEM8
block|,
name|XC16X_F_REGOFF8
block|,
name|XC16X_F_REGHI8
block|,
name|XC16X_F_REGB8
block|,
name|XC16X_F_SEG8
block|,
name|XC16X_F_SEGNUM8
block|,
name|XC16X_F_MASK8
block|,
name|XC16X_F_PAGENUM
block|,
name|XC16X_F_DATAHI8
block|,
name|XC16X_F_DATA8
block|,
name|XC16X_F_OFFSET16
block|,
name|XC16X_F_OP_BIT1
block|,
name|XC16X_F_OP_BIT2
block|,
name|XC16X_F_OP_BIT4
block|,
name|XC16X_F_OP_BIT3
block|,
name|XC16X_F_OP_2BIT
block|,
name|XC16X_F_OP_BITONE
block|,
name|XC16X_F_OP_ONEBIT
block|,
name|XC16X_F_OP_1BIT
block|,
name|XC16X_F_OP_LBIT4
block|,
name|XC16X_F_OP_LBIT2
block|,
name|XC16X_F_OP_BIT8
block|,
name|XC16X_F_OP_BIT16
block|,
name|XC16X_F_QBIT
block|,
name|XC16X_F_QLOBIT
block|,
name|XC16X_F_QHIBIT
block|,
name|XC16X_F_QLOBIT2
block|,
name|XC16X_F_POF
block|,
name|XC16X_F_MAX
block|}
name|IFIELD_TYPE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|MAX_IFLD
value|((int) XC16X_F_MAX)
end_define

begin_comment
comment|/* Hardware attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_hw attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_hw_attr
block|{
name|CGEN_HW_VIRTUAL
block|,
name|CGEN_HW_CACHE_ADDR
block|,
name|CGEN_HW_PC
block|,
name|CGEN_HW_PROFILE
block|,
name|CGEN_HW_END_BOOLS
block|,
name|CGEN_HW_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_HW_MACH
block|,
name|CGEN_HW_END_NBOOLS
block|}
name|CGEN_HW_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_hw_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_HW_NBOOL_ATTRS
value|(CGEN_HW_END_NBOOLS - CGEN_HW_START_NBOOLS - 1)
end_define

begin_comment
comment|/* cgen_hw attribute accessor macros.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_HW_MACH_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|((attrs)->nonbool[CGEN_HW_MACH-CGEN_HW_START_NBOOLS-1].nonbitset)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_HW_VIRTUAL_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_HW_VIRTUAL)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_HW_CACHE_ADDR_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_HW_CACHE_ADDR)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_HW_PC_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_HW_PC)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_HW_PROFILE_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_HW_PROFILE)) != 0)
end_define

begin_comment
comment|/* Enum declaration for xc16x hardware types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_hw_type
block|{
name|HW_H_MEMORY
block|,
name|HW_H_SINT
block|,
name|HW_H_UINT
block|,
name|HW_H_ADDR
block|,
name|HW_H_IADDR
block|,
name|HW_H_PC
block|,
name|HW_H_GR
block|,
name|HW_H_EXT
block|,
name|HW_H_PSW
block|,
name|HW_H_GRB
block|,
name|HW_H_CC
block|,
name|HW_H_ECC
block|,
name|HW_H_GRB8
block|,
name|HW_H_R8
block|,
name|HW_H_REGMEM8
block|,
name|HW_H_REGDIV8
block|,
name|HW_H_R0
block|,
name|HW_H_R01
block|,
name|HW_H_REGBMEM8
block|,
name|HW_H_MEMGR8
block|,
name|HW_H_COND
block|,
name|HW_H_CBIT
block|,
name|HW_H_SGTDIS
block|,
name|HW_MAX
block|}
name|CGEN_HW_TYPE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|MAX_HW
value|((int) HW_MAX)
end_define

begin_comment
comment|/* Operand attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_operand attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_operand_attr
block|{
name|CGEN_OPERAND_VIRTUAL
block|,
name|CGEN_OPERAND_PCREL_ADDR
block|,
name|CGEN_OPERAND_ABS_ADDR
block|,
name|CGEN_OPERAND_SIGN_OPT
block|,
name|CGEN_OPERAND_SIGNED
block|,
name|CGEN_OPERAND_NEGATIVE
block|,
name|CGEN_OPERAND_RELAX
block|,
name|CGEN_OPERAND_SEM_ONLY
block|,
name|CGEN_OPERAND_RELOC
block|,
name|CGEN_OPERAND_HASH_PREFIX
block|,
name|CGEN_OPERAND_DOT_PREFIX
block|,
name|CGEN_OPERAND_POF_PREFIX
block|,
name|CGEN_OPERAND_PAG_PREFIX
block|,
name|CGEN_OPERAND_SOF_PREFIX
block|,
name|CGEN_OPERAND_SEG_PREFIX
block|,
name|CGEN_OPERAND_END_BOOLS
block|,
name|CGEN_OPERAND_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_OPERAND_MACH
block|,
name|CGEN_OPERAND_END_NBOOLS
block|}
name|CGEN_OPERAND_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_operand_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_OPERAND_NBOOL_ATTRS
value|(CGEN_OPERAND_END_NBOOLS - CGEN_OPERAND_START_NBOOLS - 1)
end_define

begin_comment
comment|/* cgen_operand attribute accessor macros.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_MACH_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|((attrs)->nonbool[CGEN_OPERAND_MACH-CGEN_OPERAND_START_NBOOLS-1].nonbitset)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_VIRTUAL_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_VIRTUAL)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_PCREL_ADDR_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_PCREL_ADDR)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_ABS_ADDR_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_ABS_ADDR)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_SIGN_OPT_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_SIGN_OPT)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_SIGNED_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_SIGNED)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_NEGATIVE_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_NEGATIVE)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_RELAX_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_RELAX)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_SEM_ONLY_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_SEM_ONLY)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_RELOC_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_RELOC)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_HASH_PREFIX_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_HASH_PREFIX)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_DOT_PREFIX_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_DOT_PREFIX)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_POF_PREFIX_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_POF_PREFIX)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_PAG_PREFIX_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_PAG_PREFIX)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_SOF_PREFIX_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_SOF_PREFIX)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_OPERAND_SEG_PREFIX_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_OPERAND_SEG_PREFIX)) != 0)
end_define

begin_comment
comment|/* Enum declaration for xc16x operand types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_operand_type
block|{
name|XC16X_OPERAND_PC
block|,
name|XC16X_OPERAND_SR
block|,
name|XC16X_OPERAND_DR
block|,
name|XC16X_OPERAND_DRI
block|,
name|XC16X_OPERAND_SRB
block|,
name|XC16X_OPERAND_DRB
block|,
name|XC16X_OPERAND_SR2
block|,
name|XC16X_OPERAND_SRC1
block|,
name|XC16X_OPERAND_SRC2
block|,
name|XC16X_OPERAND_SRDIV
block|,
name|XC16X_OPERAND_REGNAM
block|,
name|XC16X_OPERAND_UIMM2
block|,
name|XC16X_OPERAND_UIMM3
block|,
name|XC16X_OPERAND_UIMM4
block|,
name|XC16X_OPERAND_UIMM7
block|,
name|XC16X_OPERAND_UIMM8
block|,
name|XC16X_OPERAND_UIMM16
block|,
name|XC16X_OPERAND_UPOF16
block|,
name|XC16X_OPERAND_REG8
block|,
name|XC16X_OPERAND_REGMEM8
block|,
name|XC16X_OPERAND_REGBMEM8
block|,
name|XC16X_OPERAND_REGOFF8
block|,
name|XC16X_OPERAND_REGHI8
block|,
name|XC16X_OPERAND_REGB8
block|,
name|XC16X_OPERAND_GENREG
block|,
name|XC16X_OPERAND_SEG
block|,
name|XC16X_OPERAND_SEGHI8
block|,
name|XC16X_OPERAND_CADDR
block|,
name|XC16X_OPERAND_REL
block|,
name|XC16X_OPERAND_RELHI
block|,
name|XC16X_OPERAND_CONDBIT
block|,
name|XC16X_OPERAND_BIT1
block|,
name|XC16X_OPERAND_BIT2
block|,
name|XC16X_OPERAND_BIT4
block|,
name|XC16X_OPERAND_LBIT4
block|,
name|XC16X_OPERAND_LBIT2
block|,
name|XC16X_OPERAND_BIT8
block|,
name|XC16X_OPERAND_U4
block|,
name|XC16X_OPERAND_BITONE
block|,
name|XC16X_OPERAND_BIT01
block|,
name|XC16X_OPERAND_COND
block|,
name|XC16X_OPERAND_ICOND
block|,
name|XC16X_OPERAND_EXTCOND
block|,
name|XC16X_OPERAND_MEMORY
block|,
name|XC16X_OPERAND_MEMGR8
block|,
name|XC16X_OPERAND_CBIT
block|,
name|XC16X_OPERAND_QBIT
block|,
name|XC16X_OPERAND_QLOBIT
block|,
name|XC16X_OPERAND_QHIBIT
block|,
name|XC16X_OPERAND_MASK8
block|,
name|XC16X_OPERAND_MASKLO8
block|,
name|XC16X_OPERAND_PAGENUM
block|,
name|XC16X_OPERAND_DATA8
block|,
name|XC16X_OPERAND_DATAHI8
block|,
name|XC16X_OPERAND_SGTDISBIT
block|,
name|XC16X_OPERAND_UPAG16
block|,
name|XC16X_OPERAND_USEG8
block|,
name|XC16X_OPERAND_USEG16
block|,
name|XC16X_OPERAND_USOF16
block|,
name|XC16X_OPERAND_HASH
block|,
name|XC16X_OPERAND_DOT
block|,
name|XC16X_OPERAND_POF
block|,
name|XC16X_OPERAND_PAG
block|,
name|XC16X_OPERAND_SOF
block|,
name|XC16X_OPERAND_SEGM
block|,
name|XC16X_OPERAND_MAX
block|}
name|CGEN_OPERAND_TYPE
typedef|;
end_typedef

begin_comment
comment|/* Number of operands types.  */
end_comment

begin_define
define|#
directive|define
name|MAX_OPERANDS
value|65
end_define

begin_comment
comment|/* Maximum number of operands referenced by any insn.  */
end_comment

begin_define
define|#
directive|define
name|MAX_OPERAND_INSTANCES
value|8
end_define

begin_comment
comment|/* Insn attribute indices.  */
end_comment

begin_comment
comment|/* Enum declaration for cgen_insn attrs.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_insn_attr
block|{
name|CGEN_INSN_ALIAS
block|,
name|CGEN_INSN_VIRTUAL
block|,
name|CGEN_INSN_UNCOND_CTI
block|,
name|CGEN_INSN_COND_CTI
block|,
name|CGEN_INSN_SKIP_CTI
block|,
name|CGEN_INSN_DELAY_SLOT
block|,
name|CGEN_INSN_RELAXABLE
block|,
name|CGEN_INSN_RELAXED
block|,
name|CGEN_INSN_NO_DIS
block|,
name|CGEN_INSN_PBB
block|,
name|CGEN_INSN_END_BOOLS
block|,
name|CGEN_INSN_START_NBOOLS
init|=
literal|31
block|,
name|CGEN_INSN_MACH
block|,
name|CGEN_INSN_PIPE
block|,
name|CGEN_INSN_END_NBOOLS
block|}
name|CGEN_INSN_ATTR
typedef|;
end_typedef

begin_comment
comment|/* Number of non-boolean elements in cgen_insn_attr.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_INSN_NBOOL_ATTRS
value|(CGEN_INSN_END_NBOOLS - CGEN_INSN_START_NBOOLS - 1)
end_define

begin_comment
comment|/* cgen_insn attribute accessor macros.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_MACH_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|((attrs)->nonbool[CGEN_INSN_MACH-CGEN_INSN_START_NBOOLS-1].nonbitset)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_PIPE_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|((attrs)->nonbool[CGEN_INSN_PIPE-CGEN_INSN_START_NBOOLS-1].nonbitset)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_ALIAS_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_ALIAS)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_VIRTUAL_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_VIRTUAL)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_UNCOND_CTI_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_UNCOND_CTI)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_COND_CTI_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_COND_CTI)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_SKIP_CTI_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_SKIP_CTI)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_DELAY_SLOT_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_DELAY_SLOT)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_RELAXABLE_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_RELAXABLE)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_RELAXED_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_RELAXED)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_NO_DIS_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_NO_DIS)) != 0)
end_define

begin_define
define|#
directive|define
name|CGEN_ATTR_CGEN_INSN_PBB_VALUE
parameter_list|(
name|attrs
parameter_list|)
value|(((attrs)->bool& (1<< CGEN_INSN_PBB)) != 0)
end_define

begin_comment
comment|/* cgen.h uses things we just defined.  */
end_comment

begin_include
include|#
directive|include
file|"opcode/cgen.h"
end_include

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|cgen_ifld
name|xc16x_cgen_ifld_table
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Attributes.  */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|xc16x_cgen_hardware_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|xc16x_cgen_ifield_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|xc16x_cgen_operand_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_ATTR_TABLE
name|xc16x_cgen_insn_attr_table
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Hardware decls.  */
end_comment

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_gr_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_ext_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_psw_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_grb_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_conditioncode_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_extconditioncode_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_grb8_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_r8_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_regmem8_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_regdiv8_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_reg0_name
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_reg0_name1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_regbmem8_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CGEN_KEYWORD
name|xc16x_cgen_opval_memgr8_names
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|CGEN_HW_ENTRY
name|xc16x_cgen_hw_table
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XC16X_CPU_H */
end_comment

end_unit

