begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Instruction opcode header for m32r.  THIS FILE IS MACHINE GENERATED WITH CGEN.  Copyright 1996-2005 Free Software Foundation, Inc.  This file is part of the GNU Binutils and/or GDB, the GNU debugger.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|M32R_OPC_H
end_ifndef

begin_define
define|#
directive|define
name|M32R_OPC_H
end_define

begin_comment
comment|/* -- opc.h */
end_comment

begin_undef
undef|#
directive|undef
name|CGEN_DIS_HASH_SIZE
end_undef

begin_define
define|#
directive|define
name|CGEN_DIS_HASH_SIZE
value|256
end_define

begin_undef
undef|#
directive|undef
name|CGEN_DIS_HASH
end_undef

begin_if
if|#
directive|if
literal|0
end_if

begin_define
define|#
directive|define
name|X
parameter_list|(
name|b
parameter_list|)
value|(((unsigned char *) (b))[0]& 0xf0)
end_define

begin_define
define|#
directive|define
name|CGEN_DIS_HASH
parameter_list|(
name|buffer
parameter_list|,
name|value
parameter_list|)
define|\
value|(X (buffer) | \  (X (buffer) == 0x40 || X (buffer) == 0xe0 || X (buffer) == 0x60 || X (buffer) == 0x50 ? 0 \   : X (buffer) == 0x70 || X (buffer) == 0xf0 ? (((unsigned char *) (buffer))[0]& 0xf) \   : X (buffer) == 0x30 ? ((((unsigned char *) (buffer))[1]& 0x70)>> 4) \   : ((((unsigned char *) (buffer))[1]& 0xf0)>> 4)))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CGEN_DIS_HASH
parameter_list|(
name|buffer
parameter_list|,
name|value
parameter_list|)
value|m32r_cgen_dis_hash (buffer, value)
end_define

begin_function_decl
specifier|extern
name|unsigned
name|int
name|m32r_cgen_dis_hash
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|CGEN_INSN_INT
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* -- */
end_comment

begin_comment
comment|/* Enum declaration for m32r instruction types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cgen_insn_type
block|{
name|M32R_INSN_INVALID
block|,
name|M32R_INSN_ADD
block|,
name|M32R_INSN_ADD3
block|,
name|M32R_INSN_AND
block|,
name|M32R_INSN_AND3
block|,
name|M32R_INSN_OR
block|,
name|M32R_INSN_OR3
block|,
name|M32R_INSN_XOR
block|,
name|M32R_INSN_XOR3
block|,
name|M32R_INSN_ADDI
block|,
name|M32R_INSN_ADDV
block|,
name|M32R_INSN_ADDV3
block|,
name|M32R_INSN_ADDX
block|,
name|M32R_INSN_BC8
block|,
name|M32R_INSN_BC24
block|,
name|M32R_INSN_BEQ
block|,
name|M32R_INSN_BEQZ
block|,
name|M32R_INSN_BGEZ
block|,
name|M32R_INSN_BGTZ
block|,
name|M32R_INSN_BLEZ
block|,
name|M32R_INSN_BLTZ
block|,
name|M32R_INSN_BNEZ
block|,
name|M32R_INSN_BL8
block|,
name|M32R_INSN_BL24
block|,
name|M32R_INSN_BCL8
block|,
name|M32R_INSN_BCL24
block|,
name|M32R_INSN_BNC8
block|,
name|M32R_INSN_BNC24
block|,
name|M32R_INSN_BNE
block|,
name|M32R_INSN_BRA8
block|,
name|M32R_INSN_BRA24
block|,
name|M32R_INSN_BNCL8
block|,
name|M32R_INSN_BNCL24
block|,
name|M32R_INSN_CMP
block|,
name|M32R_INSN_CMPI
block|,
name|M32R_INSN_CMPU
block|,
name|M32R_INSN_CMPUI
block|,
name|M32R_INSN_CMPEQ
block|,
name|M32R_INSN_CMPZ
block|,
name|M32R_INSN_DIV
block|,
name|M32R_INSN_DIVU
block|,
name|M32R_INSN_REM
block|,
name|M32R_INSN_REMU
block|,
name|M32R_INSN_REMH
block|,
name|M32R_INSN_REMUH
block|,
name|M32R_INSN_REMB
block|,
name|M32R_INSN_REMUB
block|,
name|M32R_INSN_DIVUH
block|,
name|M32R_INSN_DIVB
block|,
name|M32R_INSN_DIVUB
block|,
name|M32R_INSN_DIVH
block|,
name|M32R_INSN_JC
block|,
name|M32R_INSN_JNC
block|,
name|M32R_INSN_JL
block|,
name|M32R_INSN_JMP
block|,
name|M32R_INSN_LD
block|,
name|M32R_INSN_LD_D
block|,
name|M32R_INSN_LDB
block|,
name|M32R_INSN_LDB_D
block|,
name|M32R_INSN_LDH
block|,
name|M32R_INSN_LDH_D
block|,
name|M32R_INSN_LDUB
block|,
name|M32R_INSN_LDUB_D
block|,
name|M32R_INSN_LDUH
block|,
name|M32R_INSN_LDUH_D
block|,
name|M32R_INSN_LD_PLUS
block|,
name|M32R_INSN_LD24
block|,
name|M32R_INSN_LDI8
block|,
name|M32R_INSN_LDI16
block|,
name|M32R_INSN_LOCK
block|,
name|M32R_INSN_MACHI
block|,
name|M32R_INSN_MACHI_A
block|,
name|M32R_INSN_MACLO
block|,
name|M32R_INSN_MACLO_A
block|,
name|M32R_INSN_MACWHI
block|,
name|M32R_INSN_MACWHI_A
block|,
name|M32R_INSN_MACWLO
block|,
name|M32R_INSN_MACWLO_A
block|,
name|M32R_INSN_MUL
block|,
name|M32R_INSN_MULHI
block|,
name|M32R_INSN_MULHI_A
block|,
name|M32R_INSN_MULLO
block|,
name|M32R_INSN_MULLO_A
block|,
name|M32R_INSN_MULWHI
block|,
name|M32R_INSN_MULWHI_A
block|,
name|M32R_INSN_MULWLO
block|,
name|M32R_INSN_MULWLO_A
block|,
name|M32R_INSN_MV
block|,
name|M32R_INSN_MVFACHI
block|,
name|M32R_INSN_MVFACHI_A
block|,
name|M32R_INSN_MVFACLO
block|,
name|M32R_INSN_MVFACLO_A
block|,
name|M32R_INSN_MVFACMI
block|,
name|M32R_INSN_MVFACMI_A
block|,
name|M32R_INSN_MVFC
block|,
name|M32R_INSN_MVTACHI
block|,
name|M32R_INSN_MVTACHI_A
block|,
name|M32R_INSN_MVTACLO
block|,
name|M32R_INSN_MVTACLO_A
block|,
name|M32R_INSN_MVTC
block|,
name|M32R_INSN_NEG
block|,
name|M32R_INSN_NOP
block|,
name|M32R_INSN_NOT
block|,
name|M32R_INSN_RAC
block|,
name|M32R_INSN_RAC_DSI
block|,
name|M32R_INSN_RACH
block|,
name|M32R_INSN_RACH_DSI
block|,
name|M32R_INSN_RTE
block|,
name|M32R_INSN_SETH
block|,
name|M32R_INSN_SLL
block|,
name|M32R_INSN_SLL3
block|,
name|M32R_INSN_SLLI
block|,
name|M32R_INSN_SRA
block|,
name|M32R_INSN_SRA3
block|,
name|M32R_INSN_SRAI
block|,
name|M32R_INSN_SRL
block|,
name|M32R_INSN_SRL3
block|,
name|M32R_INSN_SRLI
block|,
name|M32R_INSN_ST
block|,
name|M32R_INSN_ST_D
block|,
name|M32R_INSN_STB
block|,
name|M32R_INSN_STB_D
block|,
name|M32R_INSN_STH
block|,
name|M32R_INSN_STH_D
block|,
name|M32R_INSN_ST_PLUS
block|,
name|M32R_INSN_STH_PLUS
block|,
name|M32R_INSN_STB_PLUS
block|,
name|M32R_INSN_ST_MINUS
block|,
name|M32R_INSN_SUB
block|,
name|M32R_INSN_SUBV
block|,
name|M32R_INSN_SUBX
block|,
name|M32R_INSN_TRAP
block|,
name|M32R_INSN_UNLOCK
block|,
name|M32R_INSN_SATB
block|,
name|M32R_INSN_SATH
block|,
name|M32R_INSN_SAT
block|,
name|M32R_INSN_PCMPBZ
block|,
name|M32R_INSN_SADD
block|,
name|M32R_INSN_MACWU1
block|,
name|M32R_INSN_MSBLO
block|,
name|M32R_INSN_MULWU1
block|,
name|M32R_INSN_MACLH1
block|,
name|M32R_INSN_SC
block|,
name|M32R_INSN_SNC
block|,
name|M32R_INSN_CLRPSW
block|,
name|M32R_INSN_SETPSW
block|,
name|M32R_INSN_BSET
block|,
name|M32R_INSN_BCLR
block|,
name|M32R_INSN_BTST
block|}
name|CGEN_INSN_TYPE
typedef|;
end_typedef

begin_comment
comment|/* Index of `invalid' insn place holder.  */
end_comment

begin_define
define|#
directive|define
name|CGEN_INSN_INVALID
value|M32R_INSN_INVALID
end_define

begin_comment
comment|/* Total number of insns in table.  */
end_comment

begin_define
define|#
directive|define
name|MAX_INSNS
value|((int) M32R_INSN_BTST + 1)
end_define

begin_comment
comment|/* This struct records data prior to insertion or after extraction.  */
end_comment

begin_struct
struct|struct
name|cgen_fields
block|{
name|int
name|length
decl_stmt|;
name|long
name|f_nil
decl_stmt|;
name|long
name|f_anyof
decl_stmt|;
name|long
name|f_op1
decl_stmt|;
name|long
name|f_op2
decl_stmt|;
name|long
name|f_cond
decl_stmt|;
name|long
name|f_r1
decl_stmt|;
name|long
name|f_r2
decl_stmt|;
name|long
name|f_simm8
decl_stmt|;
name|long
name|f_simm16
decl_stmt|;
name|long
name|f_shift_op2
decl_stmt|;
name|long
name|f_uimm3
decl_stmt|;
name|long
name|f_uimm4
decl_stmt|;
name|long
name|f_uimm5
decl_stmt|;
name|long
name|f_uimm8
decl_stmt|;
name|long
name|f_uimm16
decl_stmt|;
name|long
name|f_uimm24
decl_stmt|;
name|long
name|f_hi16
decl_stmt|;
name|long
name|f_disp8
decl_stmt|;
name|long
name|f_disp16
decl_stmt|;
name|long
name|f_disp24
decl_stmt|;
name|long
name|f_op23
decl_stmt|;
name|long
name|f_op3
decl_stmt|;
name|long
name|f_acc
decl_stmt|;
name|long
name|f_accs
decl_stmt|;
name|long
name|f_accd
decl_stmt|;
name|long
name|f_bits67
decl_stmt|;
name|long
name|f_bit4
decl_stmt|;
name|long
name|f_bit14
decl_stmt|;
name|long
name|f_imm1
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CGEN_INIT_PARSE
parameter_list|(
name|od
parameter_list|)
define|\
value|{\ }
end_define

begin_define
define|#
directive|define
name|CGEN_INIT_INSERT
parameter_list|(
name|od
parameter_list|)
define|\
value|{\ }
end_define

begin_define
define|#
directive|define
name|CGEN_INIT_EXTRACT
parameter_list|(
name|od
parameter_list|)
define|\
value|{\ }
end_define

begin_define
define|#
directive|define
name|CGEN_INIT_PRINT
parameter_list|(
name|od
parameter_list|)
define|\
value|{\ }
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* M32R_OPC_H */
end_comment

end_unit

