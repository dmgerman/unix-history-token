begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ** $Id: lauxlib.h,v 1.120.1.1 2013/04/12 18:48:47 roberto Exp $ ** Auxiliary functions for building Lua libraries ** See Copyright Notice in lua.h */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lauxlib_h
end_ifndef

begin_define
define|#
directive|define
name|lauxlib_h
end_define

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_include
include|#
directive|include
file|"lua.h"
end_include

begin_comment
comment|/* extra error code for `luaL_load' */
end_comment

begin_define
define|#
directive|define
name|LUA_ERRFILE
value|(LUA_ERRERR+1)
end_define

begin_typedef
typedef|typedef
struct|struct
name|luaL_Reg
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|lua_CFunction
name|func
decl_stmt|;
block|}
name|luaL_Reg
typedef|;
end_typedef

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_checkversion_
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|lua_Number
name|ver
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|luaL_checkversion
parameter_list|(
name|L
parameter_list|)
value|luaL_checkversion_(L, LUA_VERSION_NUM)
end_define

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_getmetafield
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|obj
parameter_list|,
specifier|const
name|char
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_callmeta
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|obj
parameter_list|,
specifier|const
name|char
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
specifier|const
name|char
modifier|*
function_decl|(
name|luaL_tolstring
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|idx
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_argerror
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|numarg
parameter_list|,
specifier|const
name|char
modifier|*
name|extramsg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
specifier|const
name|char
modifier|*
function_decl|(
name|luaL_checklstring
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|numArg
parameter_list|,
name|size_t
modifier|*
name|l
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
specifier|const
name|char
modifier|*
function_decl|(
name|luaL_optlstring
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|numArg
parameter_list|,
specifier|const
name|char
modifier|*
name|def
parameter_list|,
name|size_t
modifier|*
name|l
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|lua_Number
function_decl|(
name|luaL_checknumber
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|numArg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|lua_Number
function_decl|(
name|luaL_optnumber
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|nArg
parameter_list|,
name|lua_Number
name|def
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|lua_Integer
function_decl|(
name|luaL_checkinteger
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|numArg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|lua_Integer
function_decl|(
name|luaL_optinteger
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|nArg
parameter_list|,
name|lua_Integer
name|def
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|lua_Unsigned
function_decl|(
name|luaL_checkunsigned
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|numArg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|lua_Unsigned
function_decl|(
name|luaL_optunsigned
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|numArg
parameter_list|,
name|lua_Unsigned
name|def
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_checkstack
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|sz
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_checktype
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|narg
parameter_list|,
name|int
name|t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_checkany
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|narg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_newmetatable
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|tname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_setmetatable
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|tname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
modifier|*
function_decl|(
name|luaL_testudata
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|ud
parameter_list|,
specifier|const
name|char
modifier|*
name|tname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
modifier|*
function_decl|(
name|luaL_checkudata
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|ud
parameter_list|,
specifier|const
name|char
modifier|*
name|tname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_where
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|lvl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_error
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_checkoption
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|narg
parameter_list|,
specifier|const
name|char
modifier|*
name|def
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
name|lst
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* pre-defined references */
end_comment

begin_define
define|#
directive|define
name|LUA_NOREF
value|(-2)
end_define

begin_define
define|#
directive|define
name|LUA_REFNIL
value|(-1)
end_define

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_ref
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_unref
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|t
parameter_list|,
name|int
name|ref
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_loadbufferx
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|buff
parameter_list|,
name|size_t
name|sz
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_loadstring
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_len
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
specifier|const
name|char
modifier|*
function_decl|(
name|luaL_gsub
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|p
parameter_list|,
specifier|const
name|char
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_setfuncs
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|luaL_Reg
modifier|*
name|l
parameter_list|,
name|int
name|nup
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|int
function_decl|(
name|luaL_getsubtable
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|int
name|idx
parameter_list|,
specifier|const
name|char
modifier|*
name|fname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_traceback
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|lua_State
modifier|*
name|L1
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_requiref
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|modname
parameter_list|,
name|lua_CFunction
name|openf
parameter_list|,
name|int
name|glb
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ** =============================================================== ** some useful macros ** =============================================================== */
end_comment

begin_define
define|#
directive|define
name|luaL_newlibtable
parameter_list|(
name|L
parameter_list|,
name|l
parameter_list|)
define|\
value|lua_createtable(L, 0, sizeof(l)/sizeof((l)[0]) - 1)
end_define

begin_define
define|#
directive|define
name|luaL_newlib
parameter_list|(
name|L
parameter_list|,
name|l
parameter_list|)
value|(luaL_newlibtable(L,l), luaL_setfuncs(L,l,0))
end_define

begin_define
define|#
directive|define
name|luaL_argcheck
parameter_list|(
name|L
parameter_list|,
name|cond
parameter_list|,
name|numarg
parameter_list|,
name|extramsg
parameter_list|)
define|\
value|((void)((cond) || luaL_argerror(L, (numarg), (extramsg))))
end_define

begin_define
define|#
directive|define
name|luaL_checkstring
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|)
value|(luaL_checklstring(L, (n), NULL))
end_define

begin_define
define|#
directive|define
name|luaL_optstring
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|,
name|d
parameter_list|)
value|(luaL_optlstring(L, (n), (d), NULL))
end_define

begin_define
define|#
directive|define
name|luaL_checkint
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|)
value|((int)luaL_checkinteger(L, (n)))
end_define

begin_define
define|#
directive|define
name|luaL_optint
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|,
name|d
parameter_list|)
value|((int)luaL_optinteger(L, (n), (d)))
end_define

begin_define
define|#
directive|define
name|luaL_checklong
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|)
value|((long)luaL_checkinteger(L, (n)))
end_define

begin_define
define|#
directive|define
name|luaL_optlong
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|,
name|d
parameter_list|)
value|((long)luaL_optinteger(L, (n), (d)))
end_define

begin_define
define|#
directive|define
name|luaL_typename
parameter_list|(
name|L
parameter_list|,
name|i
parameter_list|)
value|lua_typename(L, lua_type(L,(i)))
end_define

begin_define
define|#
directive|define
name|luaL_dofile
parameter_list|(
name|L
parameter_list|,
name|fn
parameter_list|)
define|\
value|(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))
end_define

begin_define
define|#
directive|define
name|luaL_dostring
parameter_list|(
name|L
parameter_list|,
name|s
parameter_list|)
define|\
value|(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))
end_define

begin_define
define|#
directive|define
name|luaL_getmetatable
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|)
value|(lua_getfield(L, LUA_REGISTRYINDEX, (n)))
end_define

begin_define
define|#
directive|define
name|luaL_opt
parameter_list|(
name|L
parameter_list|,
name|f
parameter_list|,
name|n
parameter_list|,
name|d
parameter_list|)
value|(lua_isnoneornil(L,(n)) ? (d) : f(L,(n)))
end_define

begin_define
define|#
directive|define
name|luaL_loadbuffer
parameter_list|(
name|L
parameter_list|,
name|s
parameter_list|,
name|sz
parameter_list|,
name|n
parameter_list|)
value|luaL_loadbufferx(L,s,sz,n,NULL)
end_define

begin_comment
comment|/* ** {====================================================== ** Generic Buffer manipulation ** ======================================================= */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|luaL_Buffer
block|{
name|char
modifier|*
name|b
decl_stmt|;
comment|/* buffer address */
name|size_t
name|size
decl_stmt|;
comment|/* buffer size */
name|size_t
name|n
decl_stmt|;
comment|/* number of characters in buffer */
name|lua_State
modifier|*
name|L
decl_stmt|;
name|char
name|initb
index|[
name|LUAL_BUFFERSIZE
index|]
decl_stmt|;
comment|/* initial buffer */
block|}
name|luaL_Buffer
typedef|;
end_typedef

begin_define
define|#
directive|define
name|luaL_addchar
parameter_list|(
name|B
parameter_list|,
name|c
parameter_list|)
define|\
value|((void)((B)->n< (B)->size || luaL_prepbuffsize((B), 1)), \    ((B)->b[(B)->n++] = (c)))
end_define

begin_define
define|#
directive|define
name|luaL_addsize
parameter_list|(
name|B
parameter_list|,
name|s
parameter_list|)
value|((B)->n += (s))
end_define

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_buffinit
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|luaL_Buffer
modifier|*
name|B
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|char
modifier|*
function_decl|(
name|luaL_prepbuffsize
function_decl|)
parameter_list|(
name|luaL_Buffer
modifier|*
name|B
parameter_list|,
name|size_t
name|sz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_addlstring
function_decl|)
parameter_list|(
name|luaL_Buffer
modifier|*
name|B
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|size_t
name|l
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_addstring
function_decl|)
parameter_list|(
name|luaL_Buffer
modifier|*
name|B
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_addvalue
function_decl|)
parameter_list|(
name|luaL_Buffer
modifier|*
name|B
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_pushresult
function_decl|)
parameter_list|(
name|luaL_Buffer
modifier|*
name|B
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_pushresultsize
function_decl|)
parameter_list|(
name|luaL_Buffer
modifier|*
name|B
parameter_list|,
name|size_t
name|sz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|char
modifier|*
function_decl|(
name|luaL_buffinitsize
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
name|luaL_Buffer
modifier|*
name|B
parameter_list|,
name|size_t
name|sz
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|luaL_prepbuffer
parameter_list|(
name|B
parameter_list|)
value|luaL_prepbuffsize(B, LUAL_BUFFERSIZE)
end_define

begin_comment
comment|/* }====================================================== */
end_comment

begin_comment
comment|/* compatibility with old module system */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|LUA_COMPAT_MODULE
argument_list|)
end_if

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_pushmodule
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|modname
parameter_list|,
name|int
name|sizehint
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUALIB_API
name|void
function_decl|(
name|luaL_openlib
function_decl|)
parameter_list|(
name|lua_State
modifier|*
name|L
parameter_list|,
specifier|const
name|char
modifier|*
name|libname
parameter_list|,
specifier|const
name|luaL_Reg
modifier|*
name|l
parameter_list|,
name|int
name|nup
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|luaL_register
parameter_list|(
name|L
parameter_list|,
name|n
parameter_list|,
name|l
parameter_list|)
value|(luaL_openlib(L,(n),(l),0))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

