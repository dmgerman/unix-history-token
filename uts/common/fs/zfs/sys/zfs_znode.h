begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2012 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_FS_ZFS_ZNODE_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_FS_ZFS_ZNODE_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/isa_defs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types32.h>
end_include

begin_include
include|#
directive|include
file|<sys/attr.h>
end_include

begin_include
include|#
directive|include
file|<sys/list.h>
end_include

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/sa.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_vfsops.h>
end_include

begin_include
include|#
directive|include
file|<sys/rrwlock.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_sa.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_stat.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/zfs_acl.h>
end_include

begin_include
include|#
directive|include
file|<sys/zil.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Additional file level attributes, that are stored  * in the upper half of zp_flags  */
define|#
directive|define
name|ZFS_READONLY
value|0x0000000100000000
define|#
directive|define
name|ZFS_HIDDEN
value|0x0000000200000000
define|#
directive|define
name|ZFS_SYSTEM
value|0x0000000400000000
define|#
directive|define
name|ZFS_ARCHIVE
value|0x0000000800000000
define|#
directive|define
name|ZFS_IMMUTABLE
value|0x0000001000000000
define|#
directive|define
name|ZFS_NOUNLINK
value|0x0000002000000000
define|#
directive|define
name|ZFS_APPENDONLY
value|0x0000004000000000
define|#
directive|define
name|ZFS_NODUMP
value|0x0000008000000000
define|#
directive|define
name|ZFS_OPAQUE
value|0x0000010000000000
define|#
directive|define
name|ZFS_AV_QUARANTINED
value|0x0000020000000000
define|#
directive|define
name|ZFS_AV_MODIFIED
value|0x0000040000000000
define|#
directive|define
name|ZFS_REPARSE
value|0x0000080000000000
define|#
directive|define
name|ZFS_OFFLINE
value|0x0000100000000000
define|#
directive|define
name|ZFS_SPARSE
value|0x0000200000000000
define|#
directive|define
name|ZFS_ATTR_SET
parameter_list|(
name|zp
parameter_list|,
name|attr
parameter_list|,
name|value
parameter_list|,
name|pflags
parameter_list|,
name|tx
parameter_list|)
define|\
value|{ \ 	if (value) \ 		pflags |= attr; \ 	else \ 		pflags&= ~attr; \ 	VERIFY(0 == sa_update(zp->z_sa_hdl, SA_ZPL_FLAGS(zp->z_zfsvfs), \&pflags, sizeof (pflags), tx)); \ }
comment|/*  * Define special zfs pflags  */
define|#
directive|define
name|ZFS_XATTR
value|0x1
comment|/* is an extended attribute */
define|#
directive|define
name|ZFS_INHERIT_ACE
value|0x2
comment|/* ace has inheritable ACEs */
define|#
directive|define
name|ZFS_ACL_TRIVIAL
value|0x4
comment|/* files ACL is trivial */
define|#
directive|define
name|ZFS_ACL_OBJ_ACE
value|0x8
comment|/* ACL has CMPLX Object ACE */
define|#
directive|define
name|ZFS_ACL_PROTECTED
value|0x10
comment|/* ACL protected */
define|#
directive|define
name|ZFS_ACL_DEFAULTED
value|0x20
comment|/* ACL should be defaulted */
define|#
directive|define
name|ZFS_ACL_AUTO_INHERIT
value|0x40
comment|/* ACL should be inherited */
define|#
directive|define
name|ZFS_BONUS_SCANSTAMP
value|0x80
comment|/* Scanstamp in bonus area */
define|#
directive|define
name|ZFS_NO_EXECS_DENIED
value|0x100
comment|/* exec was given to everyone */
define|#
directive|define
name|SA_ZPL_ATIME
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_ATIME]
define|#
directive|define
name|SA_ZPL_MTIME
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_MTIME]
define|#
directive|define
name|SA_ZPL_CTIME
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_CTIME]
define|#
directive|define
name|SA_ZPL_CRTIME
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_CRTIME]
define|#
directive|define
name|SA_ZPL_GEN
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_GEN]
define|#
directive|define
name|SA_ZPL_DACL_ACES
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_DACL_ACES]
define|#
directive|define
name|SA_ZPL_XATTR
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_XATTR]
define|#
directive|define
name|SA_ZPL_SYMLINK
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_SYMLINK]
define|#
directive|define
name|SA_ZPL_RDEV
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_RDEV]
define|#
directive|define
name|SA_ZPL_SCANSTAMP
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_SCANSTAMP]
define|#
directive|define
name|SA_ZPL_UID
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_UID]
define|#
directive|define
name|SA_ZPL_GID
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_GID]
define|#
directive|define
name|SA_ZPL_PARENT
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_PARENT]
define|#
directive|define
name|SA_ZPL_LINKS
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_LINKS]
define|#
directive|define
name|SA_ZPL_MODE
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_MODE]
define|#
directive|define
name|SA_ZPL_DACL_COUNT
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_DACL_COUNT]
define|#
directive|define
name|SA_ZPL_FLAGS
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_FLAGS]
define|#
directive|define
name|SA_ZPL_SIZE
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_SIZE]
define|#
directive|define
name|SA_ZPL_ZNODE_ACL
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_ZNODE_ACL]
define|#
directive|define
name|SA_ZPL_PAD
parameter_list|(
name|z
parameter_list|)
value|z->z_attr_table[ZPL_PAD]
comment|/*  * Is ID ephemeral?  */
define|#
directive|define
name|IS_EPHEMERAL
parameter_list|(
name|x
parameter_list|)
value|(x> MAXUID)
comment|/*  * Should we use FUIDs?  */
define|#
directive|define
name|USE_FUIDS
parameter_list|(
name|version
parameter_list|,
name|os
parameter_list|)
value|(version>= ZPL_VERSION_FUID&& \     spa_version(dmu_objset_spa(os))>= SPA_VERSION_FUID)
define|#
directive|define
name|USE_SA
parameter_list|(
name|version
parameter_list|,
name|os
parameter_list|)
value|(version>= ZPL_VERSION_SA&& \     spa_version(dmu_objset_spa(os))>= SPA_VERSION_SA)
define|#
directive|define
name|MASTER_NODE_OBJ
value|1
comment|/*  * Special attributes for master node.  * "userquota@" and "groupquota@" are also valid (from  * zfs_userquota_prop_prefixes[]).  */
define|#
directive|define
name|ZFS_FSID
value|"FSID"
define|#
directive|define
name|ZFS_UNLINKED_SET
value|"DELETE_QUEUE"
define|#
directive|define
name|ZFS_ROOT_OBJ
value|"ROOT"
define|#
directive|define
name|ZPL_VERSION_STR
value|"VERSION"
define|#
directive|define
name|ZFS_FUID_TABLES
value|"FUID"
define|#
directive|define
name|ZFS_SHARES_DIR
value|"SHARES"
define|#
directive|define
name|ZFS_SA_ATTRS
value|"SA_ATTRS"
define|#
directive|define
name|ZFS_MAX_BLOCKSIZE
value|(SPA_MAXBLOCKSIZE)
comment|/*  * Path component length  *  * The generic fs code uses MAXNAMELEN to represent  * what the largest component length is.  Unfortunately,  * this length includes the terminating NULL.  ZFS needs  * to tell the users via pathconf() and statvfs() what the  * true maximum length of a component is, excluding the NULL.  */
define|#
directive|define
name|ZFS_MAXNAMELEN
value|(MAXNAMELEN - 1)
comment|/*  * Convert mode bits (zp_mode) to BSD-style DT_* values for storing in  * the directory entries.  */
define|#
directive|define
name|IFTODT
parameter_list|(
name|mode
parameter_list|)
value|(((mode)& S_IFMT)>> 12)
comment|/*  * The directory entry has the type (currently unused on Solaris) in the  * top 4 bits, and the object number in the low 48 bits.  The "middle"  * 12 bits are unused.  */
define|#
directive|define
name|ZFS_DIRENT_TYPE
parameter_list|(
name|de
parameter_list|)
value|BF64_GET(de, 60, 4)
define|#
directive|define
name|ZFS_DIRENT_OBJ
parameter_list|(
name|de
parameter_list|)
value|BF64_GET(de, 0, 48)
comment|/*  * Directory entry locks control access to directory entries.  * They are used to protect creates, deletes, and renames.  * Each directory znode has a mutex and a list of locked names.  */
ifdef|#
directive|ifdef
name|_KERNEL
typedef|typedef
struct|struct
name|zfs_dirlock
block|{
name|char
modifier|*
name|dl_name
decl_stmt|;
comment|/* directory entry being locked */
name|uint32_t
name|dl_sharecnt
decl_stmt|;
comment|/* 0 if exclusive,> 0 if shared */
name|uint8_t
name|dl_namelock
decl_stmt|;
comment|/* 1 if z_name_lock is NOT held */
name|uint16_t
name|dl_namesize
decl_stmt|;
comment|/* set if dl_name was allocated */
name|kcondvar_t
name|dl_cv
decl_stmt|;
comment|/* wait for entry to be unlocked */
name|struct
name|znode
modifier|*
name|dl_dzp
decl_stmt|;
comment|/* directory znode */
name|struct
name|zfs_dirlock
modifier|*
name|dl_next
decl_stmt|;
comment|/* next in z_dirlocks list */
block|}
name|zfs_dirlock_t
typedef|;
typedef|typedef
struct|struct
name|znode
block|{
name|struct
name|zfsvfs
modifier|*
name|z_zfsvfs
decl_stmt|;
name|vnode_t
modifier|*
name|z_vnode
decl_stmt|;
name|uint64_t
name|z_id
decl_stmt|;
comment|/* object ID for this znode */
name|kmutex_t
name|z_lock
decl_stmt|;
comment|/* znode modification lock */
name|krwlock_t
name|z_parent_lock
decl_stmt|;
comment|/* parent lock for directories */
name|krwlock_t
name|z_name_lock
decl_stmt|;
comment|/* "master" lock for dirent locks */
name|zfs_dirlock_t
modifier|*
name|z_dirlocks
decl_stmt|;
comment|/* directory entry lock list */
name|kmutex_t
name|z_range_lock
decl_stmt|;
comment|/* protects changes to z_range_avl */
name|avl_tree_t
name|z_range_avl
decl_stmt|;
comment|/* avl tree of file range locks */
name|uint8_t
name|z_unlinked
decl_stmt|;
comment|/* file has been unlinked */
name|uint8_t
name|z_atime_dirty
decl_stmt|;
comment|/* atime needs to be synced */
name|uint8_t
name|z_zn_prefetch
decl_stmt|;
comment|/* Prefetch znodes? */
name|uint8_t
name|z_moved
decl_stmt|;
comment|/* Has this znode been moved? */
name|uint_t
name|z_blksz
decl_stmt|;
comment|/* block size in bytes */
name|uint_t
name|z_seq
decl_stmt|;
comment|/* modification sequence number */
name|uint64_t
name|z_mapcnt
decl_stmt|;
comment|/* number of pages mapped to file */
name|uint64_t
name|z_gen
decl_stmt|;
comment|/* generation (cached) */
name|uint64_t
name|z_size
decl_stmt|;
comment|/* file size (cached) */
name|uint64_t
name|z_atime
index|[
literal|2
index|]
decl_stmt|;
comment|/* atime (cached) */
name|uint64_t
name|z_links
decl_stmt|;
comment|/* file links (cached) */
name|uint64_t
name|z_pflags
decl_stmt|;
comment|/* pflags (cached) */
name|uint64_t
name|z_uid
decl_stmt|;
comment|/* uid fuid (cached) */
name|uint64_t
name|z_gid
decl_stmt|;
comment|/* gid fuid (cached) */
name|mode_t
name|z_mode
decl_stmt|;
comment|/* mode (cached) */
name|uint32_t
name|z_sync_cnt
decl_stmt|;
comment|/* synchronous open count */
name|kmutex_t
name|z_acl_lock
decl_stmt|;
comment|/* acl data lock */
name|zfs_acl_t
modifier|*
name|z_acl_cached
decl_stmt|;
comment|/* cached acl */
name|list_node_t
name|z_link_node
decl_stmt|;
comment|/* all znodes in fs link */
name|sa_handle_t
modifier|*
name|z_sa_hdl
decl_stmt|;
comment|/* handle to sa data */
name|boolean_t
name|z_is_sa
decl_stmt|;
comment|/* are we native sa? */
block|}
name|znode_t
typedef|;
comment|/*  * Range locking rules  * --------------------  * 1. When truncating a file (zfs_create, zfs_setattr, zfs_space) the whole  *    file range needs to be locked as RL_WRITER. Only then can the pages be  *    freed etc and zp_size reset. zp_size must be set within range lock.  * 2. For writes and punching holes (zfs_write& zfs_space) just the range  *    being written or freed needs to be locked as RL_WRITER.  *    Multiple writes at the end of the file must coordinate zp_size updates  *    to ensure data isn't lost. A compare and swap loop is currently used  *    to ensure the file size is at least the offset last written.  * 3. For reads (zfs_read, zfs_get_data& zfs_putapage) just the range being  *    read needs to be locked as RL_READER. A check against zp_size can then  *    be made for reading beyond end of file.  */
comment|/*  * Convert between znode pointers and vnode pointers  */
define|#
directive|define
name|ZTOV
parameter_list|(
name|ZP
parameter_list|)
value|((ZP)->z_vnode)
define|#
directive|define
name|VTOZ
parameter_list|(
name|VP
parameter_list|)
value|((znode_t *)(VP)->v_data)
comment|/* Called on entry to each ZFS vnode and vfs operation  */
define|#
directive|define
name|ZFS_ENTER
parameter_list|(
name|zfsvfs
parameter_list|)
define|\
value|{ \ 		rrm_enter_read(&(zfsvfs)->z_teardown_lock, FTAG); \ 		if ((zfsvfs)->z_unmounted) { \ 			ZFS_EXIT(zfsvfs); \ 			return (EIO); \ 		} \ 	}
comment|/* Must be called before exiting the vop */
define|#
directive|define
name|ZFS_EXIT
parameter_list|(
name|zfsvfs
parameter_list|)
value|rrm_exit(&(zfsvfs)->z_teardown_lock, FTAG)
comment|/* Verifies the znode is valid */
define|#
directive|define
name|ZFS_VERIFY_ZP
parameter_list|(
name|zp
parameter_list|)
define|\
value|if ((zp)->z_sa_hdl == NULL) { \ 		ZFS_EXIT((zp)->z_zfsvfs); \ 		return (EIO); \ 	}
block|\
comment|/*  * Macros for dealing with dmu_buf_hold  */
define|#
directive|define
name|ZFS_OBJ_HASH
parameter_list|(
name|obj_num
parameter_list|)
value|((obj_num)& (ZFS_OBJ_MTX_SZ - 1))
define|#
directive|define
name|ZFS_OBJ_MUTEX
parameter_list|(
name|zfsvfs
parameter_list|,
name|obj_num
parameter_list|)
define|\
value|(&(zfsvfs)->z_hold_mtx[ZFS_OBJ_HASH(obj_num)])
define|#
directive|define
name|ZFS_OBJ_HOLD_ENTER
parameter_list|(
name|zfsvfs
parameter_list|,
name|obj_num
parameter_list|)
define|\
value|mutex_enter(ZFS_OBJ_MUTEX((zfsvfs), (obj_num)))
define|#
directive|define
name|ZFS_OBJ_HOLD_TRYENTER
parameter_list|(
name|zfsvfs
parameter_list|,
name|obj_num
parameter_list|)
define|\
value|mutex_tryenter(ZFS_OBJ_MUTEX((zfsvfs), (obj_num)))
define|#
directive|define
name|ZFS_OBJ_HOLD_EXIT
parameter_list|(
name|zfsvfs
parameter_list|,
name|obj_num
parameter_list|)
define|\
value|mutex_exit(ZFS_OBJ_MUTEX((zfsvfs), (obj_num)))
comment|/* Encode ZFS stored time values from a struct timespec */
define|#
directive|define
name|ZFS_TIME_ENCODE
parameter_list|(
name|tp
parameter_list|,
name|stmp
parameter_list|)
define|\
value|{						\ 	(stmp)[0] = (uint64_t)(tp)->tv_sec;	\ 	(stmp)[1] = (uint64_t)(tp)->tv_nsec;	\ }
comment|/* Decode ZFS stored time values to a struct timespec */
define|#
directive|define
name|ZFS_TIME_DECODE
parameter_list|(
name|tp
parameter_list|,
name|stmp
parameter_list|)
define|\
value|{						\ 	(tp)->tv_sec = (time_t)(stmp)[0];		\ 	(tp)->tv_nsec = (long)(stmp)[1];		\ }
comment|/*  * Timestamp defines  */
define|#
directive|define
name|ACCESSED
value|(AT_ATIME)
define|#
directive|define
name|STATE_CHANGED
value|(AT_CTIME)
define|#
directive|define
name|CONTENT_MODIFIED
value|(AT_MTIME | AT_CTIME)
define|#
directive|define
name|ZFS_ACCESSTIME_STAMP
parameter_list|(
name|zfsvfs
parameter_list|,
name|zp
parameter_list|)
define|\
value|if ((zfsvfs)->z_atime&& !((zfsvfs)->z_vfs->vfs_flag& VFS_RDONLY)) \ 		zfs_tstamp_update_setup(zp, ACCESSED, NULL, NULL, B_FALSE);
specifier|extern
name|int
name|zfs_init_fs
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
name|znode_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_set_dataprop
parameter_list|(
name|objset_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_create_fs
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_tstamp_update_setup
parameter_list|(
name|znode_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
name|uint64_t
index|[
literal|2
index|]
parameter_list|,
name|uint64_t
index|[
literal|2
index|]
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_grow_blocksize
parameter_list|(
name|znode_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_freesp
parameter_list|(
name|znode_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|,
name|int
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_znode_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_znode_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_zget
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|znode_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_rezget
parameter_list|(
name|znode_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_zinactive
parameter_list|(
name|znode_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_znode_delete
parameter_list|(
name|znode_t
modifier|*
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_znode_free
parameter_list|(
name|znode_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_remove_op_tables
parameter_list|()
function_decl|;
specifier|extern
name|int
name|zfs_create_op_tables
parameter_list|()
function_decl|;
specifier|extern
name|int
name|zfs_sync
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|,
name|short
name|flag
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|dev_t
name|zfs_cmpldev
parameter_list|(
name|uint64_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_get_zplprop
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|zfs_prop_t
name|prop
parameter_list|,
name|uint64_t
modifier|*
name|value
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_get_stats
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|nvlist_t
modifier|*
name|nv
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_znode_dmu_fini
parameter_list|(
name|znode_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_create
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|dzp
parameter_list|,
name|znode_t
modifier|*
name|zp
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|vsecattr_t
modifier|*
parameter_list|,
name|zfs_fuid_info_t
modifier|*
parameter_list|,
name|vattr_t
modifier|*
name|vap
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_log_create_txtype
parameter_list|(
name|zil_create_t
parameter_list|,
name|vsecattr_t
modifier|*
name|vsecp
parameter_list|,
name|vattr_t
modifier|*
name|vap
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_remove
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|dzp
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|uint64_t
name|foid
parameter_list|)
function_decl|;
define|#
directive|define
name|ZFS_NO_OBJECT
value|0
comment|/* no object id */
specifier|extern
name|void
name|zfs_log_link
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|dzp
parameter_list|,
name|znode_t
modifier|*
name|zp
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_symlink
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|dzp
parameter_list|,
name|znode_t
modifier|*
name|zp
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|link
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_rename
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|sdzp
parameter_list|,
name|char
modifier|*
name|sname
parameter_list|,
name|znode_t
modifier|*
name|tdzp
parameter_list|,
name|char
modifier|*
name|dname
parameter_list|,
name|znode_t
modifier|*
name|szp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_write
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|int
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|zp
parameter_list|,
name|offset_t
name|off
parameter_list|,
name|ssize_t
name|len
parameter_list|,
name|int
name|ioflag
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_truncate
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|int
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|zp
parameter_list|,
name|uint64_t
name|off
parameter_list|,
name|uint64_t
name|len
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_setattr
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|int
name|txtype
parameter_list|,
name|znode_t
modifier|*
name|zp
parameter_list|,
name|vattr_t
modifier|*
name|vap
parameter_list|,
name|uint_t
name|mask_applied
parameter_list|,
name|zfs_fuid_info_t
modifier|*
name|fuidp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_log_acl
parameter_list|(
name|zilog_t
modifier|*
name|zilog
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|znode_t
modifier|*
name|zp
parameter_list|,
name|vsecattr_t
modifier|*
name|vsecp
parameter_list|,
name|zfs_fuid_info_t
modifier|*
name|fuidp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_xvattr_set
parameter_list|(
name|znode_t
modifier|*
name|zp
parameter_list|,
name|xvattr_t
modifier|*
name|xvap
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_upgrade
parameter_list|(
name|zfsvfs_t
modifier|*
name|zfsvfs
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_create_share_dir
parameter_list|(
name|zfsvfs_t
modifier|*
name|zfsvfs
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
specifier|extern
name|caddr_t
name|zfs_map_page
parameter_list|(
name|page_t
modifier|*
parameter_list|,
name|enum
name|seg_rw
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_unmap_page
parameter_list|(
name|page_t
modifier|*
parameter_list|,
name|caddr_t
parameter_list|)
function_decl|;
specifier|extern
name|zil_get_data_t
name|zfs_get_data
decl_stmt|;
specifier|extern
name|zil_replay_func_t
modifier|*
name|zfs_replay_vector
index|[
name|TX_MAX_TYPE
index|]
decl_stmt|;
specifier|extern
name|int
name|zfsfstype
decl_stmt|;
endif|#
directive|endif
comment|/* _KERNEL */
specifier|extern
name|int
name|zfs_obj_to_path
parameter_list|(
name|objset_t
modifier|*
name|osp
parameter_list|,
name|uint64_t
name|obj
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_FS_ZFS_ZNODE_H */
end_comment

end_unit

