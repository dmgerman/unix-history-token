begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2012, 2014 by Delphix. All rights reserved.  * Copyright (c) 2013 by Saso Kiselkov. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_ARC_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_ARC_H
end_define

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<sys/zio.h>
include|#
directive|include
file|<sys/dmu.h>
include|#
directive|include
file|<sys/spa.h>
comment|/*  * Used by arc_flush() to inform arc_evict_state() that it should evict  * all available buffers from the arc state being passed in.  */
define|#
directive|define
name|ARC_EVICT_ALL
value|-1ULL
typedef|typedef
name|struct
name|arc_buf_hdr
name|arc_buf_hdr_t
typedef|;
typedef|typedef
name|struct
name|arc_buf
name|arc_buf_t
typedef|;
typedef|typedef
name|void
name|arc_done_func_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|void
modifier|*
name|private
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|arc_evict_func_t
parameter_list|(
name|void
modifier|*
name|private
parameter_list|)
function_decl|;
comment|/* generic arc_done_func_t's which you can use */
name|arc_done_func_t
name|arc_bcopy_func
decl_stmt|;
name|arc_done_func_t
name|arc_getbuf_func
decl_stmt|;
typedef|typedef
enum|enum
name|arc_flags
block|{
comment|/* 	 * Public flags that can be passed into the ARC by external consumers. 	 */
name|ARC_FLAG_NONE
init|=
literal|1
operator|<<
literal|0
block|,
comment|/* No flags set */
name|ARC_FLAG_WAIT
init|=
literal|1
operator|<<
literal|1
block|,
comment|/* perform sync I/O */
name|ARC_FLAG_NOWAIT
init|=
literal|1
operator|<<
literal|2
block|,
comment|/* perform async I/O */
name|ARC_FLAG_PREFETCH
init|=
literal|1
operator|<<
literal|3
block|,
comment|/* I/O is a prefetch */
name|ARC_FLAG_CACHED
init|=
literal|1
operator|<<
literal|4
block|,
comment|/* I/O was in cache */
name|ARC_FLAG_L2CACHE
init|=
literal|1
operator|<<
literal|5
block|,
comment|/* cache in L2ARC */
name|ARC_FLAG_L2COMPRESS
init|=
literal|1
operator|<<
literal|6
block|,
comment|/* compress in L2ARC */
comment|/* 	 * Private ARC flags.  These flags are private ARC only flags that 	 * will show up in b_flags in the arc_hdr_buf_t. These flags should 	 * only be set by ARC code. 	 */
name|ARC_FLAG_IN_HASH_TABLE
init|=
literal|1
operator|<<
literal|7
block|,
comment|/* buffer is hashed */
name|ARC_FLAG_IO_IN_PROGRESS
init|=
literal|1
operator|<<
literal|8
block|,
comment|/* I/O in progress */
name|ARC_FLAG_IO_ERROR
init|=
literal|1
operator|<<
literal|9
block|,
comment|/* I/O failed for buf */
name|ARC_FLAG_FREED_IN_READ
init|=
literal|1
operator|<<
literal|10
block|,
comment|/* freed during read */
name|ARC_FLAG_BUF_AVAILABLE
init|=
literal|1
operator|<<
literal|11
block|,
comment|/* block not in use */
name|ARC_FLAG_INDIRECT
init|=
literal|1
operator|<<
literal|12
block|,
comment|/* indirect block */
name|ARC_FLAG_L2_WRITING
init|=
literal|1
operator|<<
literal|13
block|,
comment|/* write in progress */
name|ARC_FLAG_L2_EVICTED
init|=
literal|1
operator|<<
literal|14
block|,
comment|/* evicted during I/O */
name|ARC_FLAG_L2_WRITE_HEAD
init|=
literal|1
operator|<<
literal|15
block|,
comment|/* head of write list */
comment|/* indicates that the buffer contains metadata (otherwise, data) */
name|ARC_FLAG_BUFC_METADATA
init|=
literal|1
operator|<<
literal|16
block|,
comment|/* Flags specifying whether optional hdr struct fields are defined */
name|ARC_FLAG_HAS_L1HDR
init|=
literal|1
operator|<<
literal|17
block|,
name|ARC_FLAG_HAS_L2HDR
init|=
literal|1
operator|<<
literal|18
block|,
comment|/* 	 * The arc buffer's compression mode is stored in the top 7 bits of the 	 * flags field, so these dummy flags are included so that MDB can 	 * interpret the enum properly. 	 */
name|ARC_FLAG_COMPRESS_0
init|=
literal|1
operator|<<
literal|24
block|,
name|ARC_FLAG_COMPRESS_1
init|=
literal|1
operator|<<
literal|25
block|,
name|ARC_FLAG_COMPRESS_2
init|=
literal|1
operator|<<
literal|26
block|,
name|ARC_FLAG_COMPRESS_3
init|=
literal|1
operator|<<
literal|27
block|,
name|ARC_FLAG_COMPRESS_4
init|=
literal|1
operator|<<
literal|28
block|,
name|ARC_FLAG_COMPRESS_5
init|=
literal|1
operator|<<
literal|29
block|,
name|ARC_FLAG_COMPRESS_6
init|=
literal|1
operator|<<
literal|30
block|}
name|arc_flags_t
typedef|;
struct|struct
name|arc_buf
block|{
name|arc_buf_hdr_t
modifier|*
name|b_hdr
decl_stmt|;
name|arc_buf_t
modifier|*
name|b_next
decl_stmt|;
name|kmutex_t
name|b_evict_lock
decl_stmt|;
name|void
modifier|*
name|b_data
decl_stmt|;
name|arc_evict_func_t
modifier|*
name|b_efunc
decl_stmt|;
name|void
modifier|*
name|b_private
decl_stmt|;
block|}
struct|;
typedef|typedef
enum|enum
name|arc_buf_contents
block|{
name|ARC_BUFC_DATA
block|,
comment|/* buffer contains data */
name|ARC_BUFC_METADATA
block|,
comment|/* buffer contains metadata */
name|ARC_BUFC_NUMTYPES
block|}
name|arc_buf_contents_t
typedef|;
comment|/*  * The following breakdows of arc_size exist for kstat only.  */
typedef|typedef
enum|enum
name|arc_space_type
block|{
name|ARC_SPACE_DATA
block|,
name|ARC_SPACE_META
block|,
name|ARC_SPACE_HDRS
block|,
name|ARC_SPACE_L2HDRS
block|,
name|ARC_SPACE_OTHER
block|,
name|ARC_SPACE_NUMTYPES
block|}
name|arc_space_type_t
typedef|;
name|void
name|arc_space_consume
parameter_list|(
name|uint64_t
name|space
parameter_list|,
name|arc_space_type_t
name|type
parameter_list|)
function_decl|;
name|void
name|arc_space_return
parameter_list|(
name|uint64_t
name|space
parameter_list|,
name|arc_space_type_t
name|type
parameter_list|)
function_decl|;
name|arc_buf_t
modifier|*
name|arc_buf_alloc
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|int
name|size
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|arc_buf_contents_t
name|type
parameter_list|)
function_decl|;
name|arc_buf_t
modifier|*
name|arc_loan_buf
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|arc_return_buf
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|void
name|arc_loan_inuse_buf
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|void
name|arc_buf_add_ref
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|boolean_t
name|arc_buf_remove_ref
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|int
name|arc_buf_size
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|)
function_decl|;
name|void
name|arc_release
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|int
name|arc_released
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|)
function_decl|;
name|void
name|arc_buf_freeze
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|)
function_decl|;
name|void
name|arc_buf_thaw
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|)
function_decl|;
name|boolean_t
name|arc_buf_eviction_needed
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|ZFS_DEBUG
name|int
name|arc_referenced
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|arc_read
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|arc_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
name|arc_flags_t
modifier|*
name|arc_flags
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|zb
parameter_list|)
function_decl|;
name|zio_t
modifier|*
name|arc_write
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|boolean_t
name|l2arc
parameter_list|,
name|boolean_t
name|l2arc_compress
parameter_list|,
specifier|const
name|zio_prop_t
modifier|*
name|zp
parameter_list|,
name|arc_done_func_t
modifier|*
name|ready
parameter_list|,
name|arc_done_func_t
modifier|*
name|physdone
parameter_list|,
name|arc_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|int
name|zio_flags
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|zb
parameter_list|)
function_decl|;
name|void
name|arc_freed
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
name|void
name|arc_set_callback
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|,
name|arc_evict_func_t
modifier|*
name|func
parameter_list|,
name|void
modifier|*
name|private
parameter_list|)
function_decl|;
name|boolean_t
name|arc_clear_callback
parameter_list|(
name|arc_buf_t
modifier|*
name|buf
parameter_list|)
function_decl|;
name|void
name|arc_flush
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|boolean_t
name|retry
parameter_list|)
function_decl|;
name|void
name|arc_tempreserve_clear
parameter_list|(
name|uint64_t
name|reserve
parameter_list|)
function_decl|;
name|int
name|arc_tempreserve_space
parameter_list|(
name|uint64_t
name|reserve
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
name|void
name|arc_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|arc_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Level 2 ARC  */
name|void
name|l2arc_add_vdev
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|)
function_decl|;
name|void
name|l2arc_remove_vdev
parameter_list|(
name|vdev_t
modifier|*
name|vd
parameter_list|)
function_decl|;
name|boolean_t
name|l2arc_vdev_present
parameter_list|(
name|vdev_t
modifier|*
name|vd
parameter_list|)
function_decl|;
name|void
name|l2arc_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|l2arc_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|l2arc_start
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|l2arc_stop
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|_KERNEL
specifier|extern
name|boolean_t
name|arc_watch
decl_stmt|;
specifier|extern
name|int
name|arc_procfd
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_ARC_H */
end_comment

end_unit

