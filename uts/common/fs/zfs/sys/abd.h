begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * This file and its contents are supplied under the terms of the  * Common Development and Distribution License ("CDDL"), version 1.0.  * You may only use this file in accordance with the terms of version  * 1.0 of the CDDL.  *  * A full copy of the text of the CDDL should have accompanied this  * source.  A copy of the CDDL is also available via the Internet at  * http://www.illumos.org/license/CDDL.  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2014 by Chunwei Chen. All rights reserved.  * Copyright (c) 2016 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ABD_H
end_ifndef

begin_define
define|#
directive|define
name|_ABD_H
end_define

begin_include
include|#
directive|include
file|<sys/isa_defs.h>
end_include

begin_include
include|#
directive|include
file|<sys/int_types.h>
end_include

begin_include
include|#
directive|include
file|<sys/debug.h>
end_include

begin_include
include|#
directive|include
file|<sys/refcount.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/uio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
enum|enum
name|abd_flags
block|{
name|ABD_FLAG_LINEAR
init|=
literal|1
operator|<<
literal|0
block|,
comment|/* is buffer linear (or scattered)? */
name|ABD_FLAG_OWNER
init|=
literal|1
operator|<<
literal|1
block|,
comment|/* does it own its data buffers? */
name|ABD_FLAG_META
init|=
literal|1
operator|<<
literal|2
comment|/* does this represent FS metadata? */
block|}
name|abd_flags_t
typedef|;
typedef|typedef
struct|struct
name|abd
block|{
name|abd_flags_t
name|abd_flags
decl_stmt|;
name|uint_t
name|abd_size
decl_stmt|;
comment|/* excludes scattered abd_offset */
name|struct
name|abd
modifier|*
name|abd_parent
decl_stmt|;
name|refcount_t
name|abd_children
decl_stmt|;
union|union
block|{
struct|struct
name|abd_scatter
block|{
name|uint_t
name|abd_offset
decl_stmt|;
name|uint_t
name|abd_chunk_size
decl_stmt|;
name|void
modifier|*
name|abd_chunks
index|[]
decl_stmt|;
block|}
name|abd_scatter
struct|;
struct|struct
name|abd_linear
block|{
name|void
modifier|*
name|abd_buf
decl_stmt|;
block|}
name|abd_linear
struct|;
block|}
name|abd_u
union|;
block|}
name|abd_t
typedef|;
typedef|typedef
name|int
name|abd_iter_func_t
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|abd_iter_func2_t
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_abd_scatter_enabled
decl_stmt|;
specifier|inline
name|boolean_t
name|abd_is_linear
parameter_list|(
name|abd_t
modifier|*
name|abd
parameter_list|)
block|{
return|return
operator|(
operator|(
name|abd
operator|->
name|abd_flags
operator|&
name|ABD_FLAG_LINEAR
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
comment|/*  * Allocations and deallocations  */
name|abd_t
modifier|*
name|abd_alloc
parameter_list|(
name|size_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
name|abd_t
modifier|*
name|abd_alloc_linear
parameter_list|(
name|size_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
name|abd_t
modifier|*
name|abd_alloc_for_io
parameter_list|(
name|size_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
name|abd_t
modifier|*
name|abd_alloc_sametype
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_free
parameter_list|(
name|abd_t
modifier|*
parameter_list|)
function_decl|;
name|abd_t
modifier|*
name|abd_get_offset
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|abd_t
modifier|*
name|abd_get_from_buf
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_put
parameter_list|(
name|abd_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Conversion to and from a normal buffer  */
name|void
modifier|*
name|abd_to_buf
parameter_list|(
name|abd_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|abd_borrow_buf
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|abd_borrow_buf_copy
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_return_buf
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_return_buf_copy
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_take_ownership_of_buf
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
name|void
name|abd_release_ownership_of_buf
parameter_list|(
name|abd_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * ABD operations  */
name|int
name|abd_iterate_func
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|abd_iter_func_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|abd_iterate_func2
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|abd_iter_func2_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|abd_copy_off
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_copy_from_buf_off
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_copy_to_buf_off
parameter_list|(
name|void
modifier|*
parameter_list|,
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|abd_cmp
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|abd_cmp_buf_off
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|abd_zero_off
parameter_list|(
name|abd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
comment|/*  * Wrappers for calls with offsets of 0  */
specifier|inline
name|void
name|abd_copy
parameter_list|(
name|abd_t
modifier|*
name|dabd
parameter_list|,
name|abd_t
modifier|*
name|sabd
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|abd_copy_off
argument_list|(
name|dabd
argument_list|,
name|sabd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|abd_copy_from_buf
parameter_list|(
name|abd_t
modifier|*
name|abd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|abd_copy_from_buf_off
argument_list|(
name|abd
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|abd_copy_to_buf
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|abd_t
modifier|*
name|abd
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|abd_copy_to_buf_off
argument_list|(
name|buf
argument_list|,
name|abd
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|int
name|abd_cmp_buf
parameter_list|(
name|abd_t
modifier|*
name|abd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
return|return
operator|(
name|abd_cmp_buf_off
argument_list|(
name|abd
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
operator|)
return|;
block|}
specifier|inline
name|void
name|abd_zero
parameter_list|(
name|abd_t
modifier|*
name|abd
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|abd_zero_off
argument_list|(
name|abd
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/*  * Module lifecycle  */
name|void
name|abd_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|abd_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ABD_H */
end_comment

end_unit

