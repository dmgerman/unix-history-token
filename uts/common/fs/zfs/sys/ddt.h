begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2016 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_DDT_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_DDT_H
end_define

begin_include
include|#
directive|include
file|<sys/sysmacros.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/fs/zfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio.h>
end_include

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|abd
struct_decl|;
comment|/*  * On-disk DDT formats, in the desired search order (newest version first).  */
enum|enum
name|ddt_type
block|{
name|DDT_TYPE_ZAP
init|=
literal|0
block|,
name|DDT_TYPES
block|}
enum|;
comment|/*  * DDT classes, in the desired search order (highest replication level first).  */
enum|enum
name|ddt_class
block|{
name|DDT_CLASS_DITTO
init|=
literal|0
block|,
name|DDT_CLASS_DUPLICATE
block|,
name|DDT_CLASS_UNIQUE
block|,
name|DDT_CLASSES
block|}
enum|;
define|#
directive|define
name|DDT_TYPE_CURRENT
value|0
define|#
directive|define
name|DDT_COMPRESS_BYTEORDER_MASK
value|0x80
define|#
directive|define
name|DDT_COMPRESS_FUNCTION_MASK
value|0x7f
comment|/*  * On-disk ddt entry:  key (name) and physical storage (value).  */
typedef|typedef
struct|struct
name|ddt_key
block|{
name|zio_cksum_t
name|ddk_cksum
decl_stmt|;
comment|/* 256-bit block checksum */
comment|/* 	 * Encoded with logical& physical size, and compression, as follows: 	 *   +-------+-------+-------+-------+-------+-------+-------+-------+ 	 *   |   0   |   0   |   0   | comp  |     PSIZE     |     LSIZE     | 	 *   +-------+-------+-------+-------+-------+-------+-------+-------+ 	 */
name|uint64_t
name|ddk_prop
decl_stmt|;
block|}
name|ddt_key_t
typedef|;
define|#
directive|define
name|DDK_GET_LSIZE
parameter_list|(
name|ddk
parameter_list|)
define|\
value|BF64_GET_SB((ddk)->ddk_prop, 0, 16, SPA_MINBLOCKSHIFT, 1)
define|#
directive|define
name|DDK_SET_LSIZE
parameter_list|(
name|ddk
parameter_list|,
name|x
parameter_list|)
define|\
value|BF64_SET_SB((ddk)->ddk_prop, 0, 16, SPA_MINBLOCKSHIFT, 1, x)
define|#
directive|define
name|DDK_GET_PSIZE
parameter_list|(
name|ddk
parameter_list|)
define|\
value|BF64_GET_SB((ddk)->ddk_prop, 16, 16, SPA_MINBLOCKSHIFT, 1)
define|#
directive|define
name|DDK_SET_PSIZE
parameter_list|(
name|ddk
parameter_list|,
name|x
parameter_list|)
define|\
value|BF64_SET_SB((ddk)->ddk_prop, 16, 16, SPA_MINBLOCKSHIFT, 1, x)
define|#
directive|define
name|DDK_GET_COMPRESS
parameter_list|(
name|ddk
parameter_list|)
value|BF64_GET((ddk)->ddk_prop, 32, 8)
define|#
directive|define
name|DDK_SET_COMPRESS
parameter_list|(
name|ddk
parameter_list|,
name|x
parameter_list|)
value|BF64_SET((ddk)->ddk_prop, 32, 8, x)
define|#
directive|define
name|DDT_KEY_WORDS
value|(sizeof (ddt_key_t) / sizeof (uint64_t))
typedef|typedef
struct|struct
name|ddt_phys
block|{
name|dva_t
name|ddp_dva
index|[
name|SPA_DVAS_PER_BP
index|]
decl_stmt|;
name|uint64_t
name|ddp_refcnt
decl_stmt|;
name|uint64_t
name|ddp_phys_birth
decl_stmt|;
block|}
name|ddt_phys_t
typedef|;
enum|enum
name|ddt_phys_type
block|{
name|DDT_PHYS_DITTO
init|=
literal|0
block|,
name|DDT_PHYS_SINGLE
init|=
literal|1
block|,
name|DDT_PHYS_DOUBLE
init|=
literal|2
block|,
name|DDT_PHYS_TRIPLE
init|=
literal|3
block|,
name|DDT_PHYS_TYPES
block|}
enum|;
comment|/*  * In-core ddt entry  */
struct|struct
name|ddt_entry
block|{
name|ddt_key_t
name|dde_key
decl_stmt|;
name|ddt_phys_t
name|dde_phys
index|[
name|DDT_PHYS_TYPES
index|]
decl_stmt|;
name|zio_t
modifier|*
name|dde_lead_zio
index|[
name|DDT_PHYS_TYPES
index|]
decl_stmt|;
name|struct
name|abd
modifier|*
name|dde_repair_abd
decl_stmt|;
name|enum
name|ddt_type
name|dde_type
decl_stmt|;
name|enum
name|ddt_class
name|dde_class
decl_stmt|;
name|uint8_t
name|dde_loading
decl_stmt|;
name|uint8_t
name|dde_loaded
decl_stmt|;
name|kcondvar_t
name|dde_cv
decl_stmt|;
name|avl_node_t
name|dde_node
decl_stmt|;
block|}
struct|;
comment|/*  * In-core ddt  */
struct|struct
name|ddt
block|{
name|kmutex_t
name|ddt_lock
decl_stmt|;
name|avl_tree_t
name|ddt_tree
decl_stmt|;
name|avl_tree_t
name|ddt_repair_tree
decl_stmt|;
name|enum
name|zio_checksum
name|ddt_checksum
decl_stmt|;
name|spa_t
modifier|*
name|ddt_spa
decl_stmt|;
name|objset_t
modifier|*
name|ddt_os
decl_stmt|;
name|uint64_t
name|ddt_stat_object
decl_stmt|;
name|uint64_t
name|ddt_object
index|[
name|DDT_TYPES
index|]
index|[
name|DDT_CLASSES
index|]
decl_stmt|;
name|ddt_histogram_t
name|ddt_histogram
index|[
name|DDT_TYPES
index|]
index|[
name|DDT_CLASSES
index|]
decl_stmt|;
name|ddt_histogram_t
name|ddt_histogram_cache
index|[
name|DDT_TYPES
index|]
index|[
name|DDT_CLASSES
index|]
decl_stmt|;
name|ddt_object_t
name|ddt_object_stats
index|[
name|DDT_TYPES
index|]
index|[
name|DDT_CLASSES
index|]
decl_stmt|;
name|avl_node_t
name|ddt_node
decl_stmt|;
block|}
struct|;
comment|/*  * In-core and on-disk bookmark for DDT walks  */
typedef|typedef
struct|struct
name|ddt_bookmark
block|{
name|uint64_t
name|ddb_class
decl_stmt|;
name|uint64_t
name|ddb_type
decl_stmt|;
name|uint64_t
name|ddb_checksum
decl_stmt|;
name|uint64_t
name|ddb_cursor
decl_stmt|;
block|}
name|ddt_bookmark_t
typedef|;
comment|/*  * Ops vector to access a specific DDT object type.  */
typedef|typedef
struct|struct
name|ddt_ops
block|{
name|char
name|ddt_op_name
index|[
literal|32
index|]
decl_stmt|;
name|int
function_decl|(
modifier|*
name|ddt_op_create
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
modifier|*
name|object
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|boolean_t
name|prehash
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ddt_op_destroy
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ddt_op_lookup
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ddt_op_prefetch
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ddt_op_update
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ddt_op_remove
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ddt_op_walk
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|,
name|uint64_t
modifier|*
name|walk
parameter_list|)
function_decl|;
name|uint64_t
function_decl|(
modifier|*
name|ddt_op_count
function_decl|)
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|)
function_decl|;
block|}
name|ddt_ops_t
typedef|;
define|#
directive|define
name|DDT_NAMELEN
value|80
specifier|extern
name|void
name|ddt_object_name
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|enum
name|ddt_type
name|type
parameter_list|,
name|enum
name|ddt_class
name|class
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_object_walk
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|enum
name|ddt_type
name|type
parameter_list|,
name|enum
name|ddt_class
name|class
parameter_list|,
name|uint64_t
modifier|*
name|walk
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|ddt_object_count
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|enum
name|ddt_type
name|type
parameter_list|,
name|enum
name|ddt_class
name|class
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_object_info
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|enum
name|ddt_type
name|type
parameter_list|,
name|enum
name|ddt_class
name|class
parameter_list|,
name|dmu_object_info_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|ddt_object_exists
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|enum
name|ddt_type
name|type
parameter_list|,
name|enum
name|ddt_class
name|class
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_bp_fill
parameter_list|(
specifier|const
name|ddt_phys_t
modifier|*
name|ddp
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_bp_create
parameter_list|(
name|enum
name|zio_checksum
name|checksum
parameter_list|,
specifier|const
name|ddt_key_t
modifier|*
name|ddk
parameter_list|,
specifier|const
name|ddt_phys_t
modifier|*
name|ddp
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_key_fill
parameter_list|(
name|ddt_key_t
modifier|*
name|ddk
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_phys_fill
parameter_list|(
name|ddt_phys_t
modifier|*
name|ddp
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_phys_clear
parameter_list|(
name|ddt_phys_t
modifier|*
name|ddp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_phys_addref
parameter_list|(
name|ddt_phys_t
modifier|*
name|ddp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_phys_decref
parameter_list|(
name|ddt_phys_t
modifier|*
name|ddp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_phys_free
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|ddt_key_t
modifier|*
name|ddk
parameter_list|,
name|ddt_phys_t
modifier|*
name|ddp
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
specifier|extern
name|ddt_phys_t
modifier|*
name|ddt_phys_select
parameter_list|(
specifier|const
name|ddt_entry_t
modifier|*
name|dde
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|ddt_phys_total_refcnt
parameter_list|(
specifier|const
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_stat_add
parameter_list|(
name|ddt_stat_t
modifier|*
name|dst
parameter_list|,
specifier|const
name|ddt_stat_t
modifier|*
name|src
parameter_list|,
name|uint64_t
name|neg
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_histogram_add
parameter_list|(
name|ddt_histogram_t
modifier|*
name|dst
parameter_list|,
specifier|const
name|ddt_histogram_t
modifier|*
name|src
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_histogram_stat
parameter_list|(
name|ddt_stat_t
modifier|*
name|dds
parameter_list|,
specifier|const
name|ddt_histogram_t
modifier|*
name|ddh
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|ddt_histogram_empty
parameter_list|(
specifier|const
name|ddt_histogram_t
modifier|*
name|ddh
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_get_dedup_object_stats
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|ddt_object_t
modifier|*
name|ddo
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_get_dedup_histogram
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|ddt_histogram_t
modifier|*
name|ddh
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_get_dedup_stats
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|ddt_stat_t
modifier|*
name|dds_total
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|ddt_get_dedup_dspace
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|ddt_get_pool_dedup_ratio
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_ditto_copies_needed
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|,
name|ddt_phys_t
modifier|*
name|ddp_willref
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_ditto_copies_present
parameter_list|(
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
specifier|extern
name|size_t
name|ddt_compress
parameter_list|(
name|void
modifier|*
name|src
parameter_list|,
name|uchar_t
modifier|*
name|dst
parameter_list|,
name|size_t
name|s_len
parameter_list|,
name|size_t
name|d_len
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_decompress
parameter_list|(
name|uchar_t
modifier|*
name|src
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|s_len
parameter_list|,
name|size_t
name|d_len
parameter_list|)
function_decl|;
specifier|extern
name|ddt_t
modifier|*
name|ddt_select
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_enter
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_exit
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|)
function_decl|;
specifier|extern
name|ddt_entry_t
modifier|*
name|ddt_lookup
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|boolean_t
name|add
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_prefetch
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_remove
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|ddt_class_contains
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|enum
name|ddt_class
name|max_class
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|ddt_entry_t
modifier|*
name|ddt_repair_start
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_repair_done
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_entry_compare
parameter_list|(
specifier|const
name|void
modifier|*
name|x1
parameter_list|,
specifier|const
name|void
modifier|*
name|x2
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_create
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_load
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_unload
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ddt_sync
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_walk
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|ddt_bookmark_t
modifier|*
name|ddb
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddt_object_update
parameter_list|(
name|ddt_t
modifier|*
name|ddt
parameter_list|,
name|enum
name|ddt_type
name|type
parameter_list|,
name|enum
name|ddt_class
name|class
parameter_list|,
name|ddt_entry_t
modifier|*
name|dde
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|ddt_ops_t
name|ddt_zap_ops
decl_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_DDT_H */
end_comment

end_unit

