begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Interface declarations for Skein hashing.  * Source code author: Doug Whiting, 2008.  * This algorithm and source code is released to the public domain.  *  * The following compile-time switches may be defined to control some  * tradeoffs between speed, code size, error checking, and security.  *  * The "default" note explains what happens when the switch is not defined.  *  *  SKEIN_DEBUG            -- make callouts from inside Skein code  *                            to examine/display intermediate values.  *                            [default: no callouts (no overhead)]  *  *  SKEIN_ERR_CHECK        -- how error checking is handled inside Skein  *                            code. If not defined, most error checking  *                            is disabled (for performance). Otherwise,  *                            the switch value is interpreted as:  *                                0: use assert()      to flag errors  *                                1: return SKEIN_FAIL to flag errors  */
end_comment

begin_comment
comment|/* Copyright 2013 Doug Whiting. This code is released to the public domain. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_SKEIN_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_SKEIN_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_comment
comment|/* get size_t definition */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
enum|enum
block|{
name|SKEIN_SUCCESS
init|=
literal|0
block|,
comment|/* return codes from Skein calls */
name|SKEIN_FAIL
init|=
literal|1
block|,
name|SKEIN_BAD_HASHLEN
init|=
literal|2
block|}
enum|;
define|#
directive|define
name|SKEIN_MODIFIER_WORDS
value|(2)
comment|/* number of modifier (tweak) words */
define|#
directive|define
name|SKEIN_256_STATE_WORDS
value|(4)
define|#
directive|define
name|SKEIN_512_STATE_WORDS
value|(8)
define|#
directive|define
name|SKEIN1024_STATE_WORDS
value|(16)
define|#
directive|define
name|SKEIN_MAX_STATE_WORDS
value|(16)
define|#
directive|define
name|SKEIN_256_STATE_BYTES
value|(8 * SKEIN_256_STATE_WORDS)
define|#
directive|define
name|SKEIN_512_STATE_BYTES
value|(8 * SKEIN_512_STATE_WORDS)
define|#
directive|define
name|SKEIN1024_STATE_BYTES
value|(8 * SKEIN1024_STATE_WORDS)
define|#
directive|define
name|SKEIN_256_STATE_BITS
value|(64 * SKEIN_256_STATE_WORDS)
define|#
directive|define
name|SKEIN_512_STATE_BITS
value|(64 * SKEIN_512_STATE_WORDS)
define|#
directive|define
name|SKEIN1024_STATE_BITS
value|(64 * SKEIN1024_STATE_WORDS)
define|#
directive|define
name|SKEIN_256_BLOCK_BYTES
value|(8 * SKEIN_256_STATE_WORDS)
define|#
directive|define
name|SKEIN_512_BLOCK_BYTES
value|(8 * SKEIN_512_STATE_WORDS)
define|#
directive|define
name|SKEIN1024_BLOCK_BYTES
value|(8 * SKEIN1024_STATE_WORDS)
typedef|typedef
struct|struct
block|{
name|size_t
name|hashBitLen
decl_stmt|;
comment|/* size of hash result, in bits */
name|size_t
name|bCnt
decl_stmt|;
comment|/* current byte count in buffer b[] */
comment|/* tweak words: T[0]=byte cnt, T[1]=flags */
name|uint64_t
name|T
index|[
name|SKEIN_MODIFIER_WORDS
index|]
decl_stmt|;
block|}
name|Skein_Ctxt_Hdr_t
typedef|;
typedef|typedef
struct|struct
block|{
comment|/*  256-bit Skein hash context structure */
name|Skein_Ctxt_Hdr_t
name|h
decl_stmt|;
comment|/* common header context variables */
name|uint64_t
name|X
index|[
name|SKEIN_256_STATE_WORDS
index|]
decl_stmt|;
comment|/* chaining variables */
comment|/* partial block buffer (8-byte aligned) */
name|uint8_t
name|b
index|[
name|SKEIN_256_BLOCK_BYTES
index|]
decl_stmt|;
block|}
name|Skein_256_Ctxt_t
typedef|;
typedef|typedef
struct|struct
block|{
comment|/*  512-bit Skein hash context structure */
name|Skein_Ctxt_Hdr_t
name|h
decl_stmt|;
comment|/* common header context variables */
name|uint64_t
name|X
index|[
name|SKEIN_512_STATE_WORDS
index|]
decl_stmt|;
comment|/* chaining variables */
comment|/* partial block buffer (8-byte aligned) */
name|uint8_t
name|b
index|[
name|SKEIN_512_BLOCK_BYTES
index|]
decl_stmt|;
block|}
name|Skein_512_Ctxt_t
typedef|;
typedef|typedef
struct|struct
block|{
comment|/* 1024-bit Skein hash context structure */
name|Skein_Ctxt_Hdr_t
name|h
decl_stmt|;
comment|/* common header context variables */
name|uint64_t
name|X
index|[
name|SKEIN1024_STATE_WORDS
index|]
decl_stmt|;
comment|/* chaining variables */
comment|/* partial block buffer (8-byte aligned) */
name|uint8_t
name|b
index|[
name|SKEIN1024_BLOCK_BYTES
index|]
decl_stmt|;
block|}
name|Skein1024_Ctxt_t
typedef|;
comment|/*   Skein APIs for (incremental) "straight hashing" */
name|int
name|Skein_256_Init
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|)
function_decl|;
name|int
name|Skein_512_Init
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|)
function_decl|;
name|int
name|Skein1024_Init
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|)
function_decl|;
name|int
name|Skein_256_Update
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|msg
parameter_list|,
name|size_t
name|msgByteCnt
parameter_list|)
function_decl|;
name|int
name|Skein_512_Update
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|msg
parameter_list|,
name|size_t
name|msgByteCnt
parameter_list|)
function_decl|;
name|int
name|Skein1024_Update
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|msg
parameter_list|,
name|size_t
name|msgByteCnt
parameter_list|)
function_decl|;
name|int
name|Skein_256_Final
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein_512_Final
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein1024_Final
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
comment|/*  * Skein APIs for "extended" initialization: MAC keys, tree hashing.  * After an InitExt() call, just use Update/Final calls as with Init().  *  * Notes: Same parameters as _Init() calls, plus treeInfo/key/keyBytes.  *          When keyBytes == 0 and treeInfo == SKEIN_SEQUENTIAL,  *              the results of InitExt() are identical to calling Init().  *          The function Init() may be called once to "precompute" the IV for  *              a given hashBitLen value, then by saving a copy of the context  *              the IV computation may be avoided in later calls.  *          Similarly, the function InitExt() may be called once per MAC key  *              to precompute the MAC IV, then a copy of the context saved and  *              reused for each new MAC computation.  */
name|int
name|Skein_256_InitExt
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|,
name|uint64_t
name|treeInfo
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|key
parameter_list|,
name|size_t
name|keyBytes
parameter_list|)
function_decl|;
name|int
name|Skein_512_InitExt
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|,
name|uint64_t
name|treeInfo
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|key
parameter_list|,
name|size_t
name|keyBytes
parameter_list|)
function_decl|;
name|int
name|Skein1024_InitExt
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|,
name|uint64_t
name|treeInfo
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|key
parameter_list|,
name|size_t
name|keyBytes
parameter_list|)
function_decl|;
comment|/*  * Skein APIs for MAC and tree hash:  *	Final_Pad: pad, do final block, but no OUTPUT type  *	Output:    do just the output stage  */
name|int
name|Skein_256_Final_Pad
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein_512_Final_Pad
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein1024_Final_Pad
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|SKEIN_TREE_HASH
define|#
directive|define
name|SKEIN_TREE_HASH
value|(1)
endif|#
directive|endif
if|#
directive|if
name|SKEIN_TREE_HASH
name|int
name|Skein_256_Output
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein_512_Output
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein1024_Output
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * When you initialize a Skein KCF hashing method you can pass this param  * structure in cm_param to fine-tune the algorithm's defaults.  */
typedef|typedef
struct|struct
name|skein_param
block|{
name|size_t
name|sp_digest_bitlen
decl_stmt|;
comment|/* length of digest in bits */
block|}
name|skein_param_t
typedef|;
comment|/* Module definitions */
ifdef|#
directive|ifdef
name|SKEIN_MODULE_IMPL
define|#
directive|define
name|CKM_SKEIN_256
value|"CKM_SKEIN_256"
define|#
directive|define
name|CKM_SKEIN_512
value|"CKM_SKEIN_512"
define|#
directive|define
name|CKM_SKEIN1024
value|"CKM_SKEIN1024"
define|#
directive|define
name|CKM_SKEIN_256_MAC
value|"CKM_SKEIN_256_MAC"
define|#
directive|define
name|CKM_SKEIN_512_MAC
value|"CKM_SKEIN_512_MAC"
define|#
directive|define
name|CKM_SKEIN1024_MAC
value|"CKM_SKEIN1024_MAC"
typedef|typedef
enum|enum
name|skein_mech_type
block|{
name|SKEIN_256_MECH_INFO_TYPE
block|,
name|SKEIN_512_MECH_INFO_TYPE
block|,
name|SKEIN1024_MECH_INFO_TYPE
block|,
name|SKEIN_256_MAC_MECH_INFO_TYPE
block|,
name|SKEIN_512_MAC_MECH_INFO_TYPE
block|,
name|SKEIN1024_MAC_MECH_INFO_TYPE
block|}
name|skein_mech_type_t
typedef|;
define|#
directive|define
name|VALID_SKEIN_DIGEST_MECH
parameter_list|(
name|__mech
parameter_list|)
define|\
value|((int)(__mech)>= SKEIN_256_MECH_INFO_TYPE&&		\ 	(__mech)<= SKEIN1024_MECH_INFO_TYPE)
define|#
directive|define
name|VALID_SKEIN_MAC_MECH
parameter_list|(
name|__mech
parameter_list|)
define|\
value|((int)(__mech)>= SKEIN_256_MAC_MECH_INFO_TYPE&&	\ 	(__mech)<= SKEIN1024_MAC_MECH_INFO_TYPE)
endif|#
directive|endif
comment|/* SKEIN_MODULE_IMPL */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_SKEIN_H_ */
end_comment

end_unit

