begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License, Version 1.0 only  * (the "License").  You may not use this file except in compliance  * with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_comment
comment|/*  * This header file defines the interfaces available from the CTF debugger  * library, libctf, and an equivalent kernel module.  This API can be used by  * a debugger to operate on data in the Compact ANSI-C Type Format (CTF).  * This is NOT a public interface, although it may eventually become one in  * the fullness of time after we gain more experience with the interfaces.  *  * In the meantime, be aware that any program linked with this API in this  * release of Solaris is almost guaranteed to break in the next release.  *  * In short, do not user this header file or the CTF routines for any purpose.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CTF_API_H
end_ifndef

begin_define
define|#
directive|define
name|_CTF_API_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/elf.h>
end_include

begin_include
include|#
directive|include
file|<sys/ctf.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Clients can open one or more CTF containers and obtain a pointer to an  * opaque ctf_file_t.  Types are identified by an opaque ctf_id_t token.  * These opaque definitions allow libctf to evolve without breaking clients.  */
typedef|typedef
name|struct
name|ctf_file
name|ctf_file_t
typedef|;
typedef|typedef
name|long
name|ctf_id_t
typedef|;
comment|/*  * If the debugger needs to provide the CTF library with a set of raw buffers  * for use as the CTF data, symbol table, and string table, it can do so by  * filling in ctf_sect_t structures and passing them to ctf_bufopen():  */
typedef|typedef
struct|struct
name|ctf_sect
block|{
specifier|const
name|char
modifier|*
name|cts_name
decl_stmt|;
comment|/* section name (if any) */
name|ulong_t
name|cts_type
decl_stmt|;
comment|/* section type (ELF SHT_... value) */
name|ulong_t
name|cts_flags
decl_stmt|;
comment|/* section flags (ELF SHF_... value) */
specifier|const
name|void
modifier|*
name|cts_data
decl_stmt|;
comment|/* pointer to section data */
name|size_t
name|cts_size
decl_stmt|;
comment|/* size of data in bytes */
name|size_t
name|cts_entsize
decl_stmt|;
comment|/* size of each section entry (symtab only) */
name|off64_t
name|cts_offset
decl_stmt|;
comment|/* file offset of this section (if any) */
block|}
name|ctf_sect_t
typedef|;
comment|/*  * Encoding information for integers, floating-point values, and certain other  * intrinsics can be obtained by calling ctf_type_encoding(), below.  The flags  * field will contain values appropriate for the type defined in<sys/ctf.h>.  */
typedef|typedef
struct|struct
name|ctf_encoding
block|{
name|uint_t
name|cte_format
decl_stmt|;
comment|/* data format (CTF_INT_* or CTF_FP_* flags) */
name|uint_t
name|cte_offset
decl_stmt|;
comment|/* offset of value in bits */
name|uint_t
name|cte_bits
decl_stmt|;
comment|/* size of storage in bits */
block|}
name|ctf_encoding_t
typedef|;
typedef|typedef
struct|struct
name|ctf_membinfo
block|{
name|ctf_id_t
name|ctm_type
decl_stmt|;
comment|/* type of struct or union member */
name|ulong_t
name|ctm_offset
decl_stmt|;
comment|/* offset of member in bits */
block|}
name|ctf_membinfo_t
typedef|;
typedef|typedef
struct|struct
name|ctf_arinfo
block|{
name|ctf_id_t
name|ctr_contents
decl_stmt|;
comment|/* type of array contents */
name|ctf_id_t
name|ctr_index
decl_stmt|;
comment|/* type of array index */
name|uint_t
name|ctr_nelems
decl_stmt|;
comment|/* number of elements */
block|}
name|ctf_arinfo_t
typedef|;
typedef|typedef
struct|struct
name|ctf_funcinfo
block|{
name|ctf_id_t
name|ctc_return
decl_stmt|;
comment|/* function return type */
name|uint_t
name|ctc_argc
decl_stmt|;
comment|/* number of typed arguments to function */
name|uint_t
name|ctc_flags
decl_stmt|;
comment|/* function attributes (see below) */
block|}
name|ctf_funcinfo_t
typedef|;
typedef|typedef
struct|struct
name|ctf_lblinfo
block|{
name|ctf_id_t
name|ctb_typeidx
decl_stmt|;
comment|/* last type associated with the label */
block|}
name|ctf_lblinfo_t
typedef|;
define|#
directive|define
name|CTF_FUNC_VARARG
value|0x1
comment|/* function arguments end with varargs */
comment|/*  * Functions that return integer status or a ctf_id_t use the following value  * to indicate failure.  ctf_errno() can be used to obtain an error code.  */
define|#
directive|define
name|CTF_ERR
value|(-1L)
comment|/*  * The CTF data model is inferred to be the caller's data model or the data  * model of the given object, unless ctf_setmodel() is explicitly called.  */
define|#
directive|define
name|CTF_MODEL_ILP32
value|1
comment|/* object data model is ILP32 */
define|#
directive|define
name|CTF_MODEL_LP64
value|2
comment|/* object data model is LP64 */
ifdef|#
directive|ifdef
name|_LP64
define|#
directive|define
name|CTF_MODEL_NATIVE
value|CTF_MODEL_LP64
else|#
directive|else
define|#
directive|define
name|CTF_MODEL_NATIVE
value|CTF_MODEL_ILP32
endif|#
directive|endif
comment|/*  * Dynamic CTF containers can be created using ctf_create().  The ctf_add_*  * routines can be used to add new definitions to the dynamic container.  * New types are labeled as root or non-root to determine whether they are  * visible at the top-level program scope when subsequently doing a lookup.  */
define|#
directive|define
name|CTF_ADD_NONROOT
value|0
comment|/* type only visible in nested scope */
define|#
directive|define
name|CTF_ADD_ROOT
value|1
comment|/* type visible at top-level scope */
comment|/*  * These typedefs are used to define the signature for callback functions  * that can be used with the iteration and visit functions below:  */
typedef|typedef
name|int
name|ctf_visit_f
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ulong_t
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|ctf_member_f
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ulong_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|ctf_enum_f
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|ctf_type_f
parameter_list|(
name|ctf_id_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|ctf_label_f
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|ctf_lblinfo_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_file_t
modifier|*
name|ctf_bufopen
parameter_list|(
specifier|const
name|ctf_sect_t
modifier|*
parameter_list|,
specifier|const
name|ctf_sect_t
modifier|*
parameter_list|,
specifier|const
name|ctf_sect_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_file_t
modifier|*
name|ctf_fdopen
parameter_list|(
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_file_t
modifier|*
name|ctf_open
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_file_t
modifier|*
name|ctf_create
parameter_list|(
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ctf_close
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_file_t
modifier|*
name|ctf_parent_file
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|ctf_parent_name
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_import
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_setmodel
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_getmodel
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|ctf_setspecific
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|ctf_getspecific
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_errno
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|ctf_errmsg
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_version
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_func_info
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|,
name|ctf_funcinfo_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_func_args
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|,
name|uint_t
parameter_list|,
name|ctf_id_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_lookup_by_name
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_lookup_by_symbol
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_type_resolve
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ssize_t
name|ctf_type_lname
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
name|ctf_type_name
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|ssize_t
name|ctf_type_size
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ssize_t
name|ctf_type_align
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_type_kind
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_type_reference
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_type_pointer
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_type_encoding
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ctf_encoding_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_type_visit
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ctf_visit_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_type_cmp
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_type_compat
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_member_info
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|ctf_membinfo_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_array_info
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ctf_arinfo_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|ctf_enum_name
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_enum_value
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|ctf_label_topmost
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_label_info
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|ctf_lblinfo_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_member_iter
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ctf_member_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_enum_iter
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|ctf_enum_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_type_iter
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_type_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_label_iter
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_label_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_array
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|ctf_arinfo_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_const
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_enum
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_float
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|ctf_encoding_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_forward
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_function
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|ctf_funcinfo_t
modifier|*
parameter_list|,
specifier|const
name|ctf_id_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_integer
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|ctf_encoding_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_pointer
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_type
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_typedef
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_restrict
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_struct
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_union
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ctf_id_t
name|ctf_add_volatile
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_add_enumerator
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_add_member
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_set_array
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
specifier|const
name|ctf_arinfo_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_update
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_discard
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ctf_write
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|_KERNEL
struct_decl|struct
name|module
struct_decl|;
specifier|extern
name|ctf_file_t
modifier|*
name|ctf_modopen
parameter_list|(
name|struct
name|module
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CTF_API_H */
end_comment

end_unit

