begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// TR1 functional -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2007 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file tr1/functional_hash.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TR1_FUNCTIONAL_HASH_H
end_ifndef

begin_define
define|#
directive|define
name|_TR1_FUNCTIONAL_HASH_H
value|1
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<cmath>
end_include

begin_comment
comment|// for std::frexp
end_comment

begin_decl_stmt
name|namespace
name|std
block|{
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
argument|tr1
argument_list|)
comment|// Definition of default hash function std::tr1::hash<>.  The types for
comment|// which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR.
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|hash
expr_stmt|;
define|#
directive|define
name|_TR1_hashtable_define_trivial_hash
parameter_list|(
name|_Tp
parameter_list|)
define|\
value|template<>                                            \     struct hash<_Tp>                                    \     : public std::unary_function<_Tp, std::size_t>      \     {                                                   \       std::size_t                                       \       operator()(_Tp __val) const                       \       { return static_cast<std::size_t>(__val); }       \     }
name|_TR1_hashtable_define_trivial_hash
argument_list|(
name|bool
argument_list|)
expr_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
name|char
argument_list|)
expr_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
argument|signed char
argument_list|)
empty_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
argument|unsigned char
argument_list|)
empty_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
name|wchar_t
argument_list|)
expr_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
name|short
argument_list|)
expr_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
name|long
argument_list|)
expr_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
argument|long long
argument_list|)
empty_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
argument|unsigned short
argument_list|)
empty_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
argument|unsigned int
argument_list|)
empty_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
argument|unsigned long
argument_list|)
empty_stmt|;
name|_TR1_hashtable_define_trivial_hash
argument_list|(
argument|unsigned long long
argument_list|)
empty_stmt|;
undef|#
directive|undef
name|_TR1_hashtable_define_trivial_hash
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|hash
operator|<
name|_Tp
operator|*
operator|>
operator|:
name|public
name|std
operator|::
name|unary_function
operator|<
name|_Tp
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
operator|(
name|_Tp
operator|*
name|__p
operator|)
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|std
operator|::
name|size_t
operator|>
operator|(
name|__p
operator|)
return|;
block|}
expr|}
block|;
comment|// Fowler / Noll / Vo (FNV) Hash (type FNV-1a)
comment|// (used by the next specializations of std::tr1::hash<>)
comment|// Dummy generic implementation (for sizeof(size_t) != 4, 8).
name|template
operator|<
name|std
operator|::
name|size_t
operator|=
sizeof|sizeof
argument_list|(
name|std
operator|::
name|size_t
argument_list|)
operator|>
expr|struct
name|_Fnv_hash
block|{
specifier|static
name|std
operator|::
name|size_t
name|hash
argument_list|(
argument|const char* __first
argument_list|,
argument|std::size_t __length
argument_list|)
block|{
name|std
operator|::
name|size_t
name|__result
operator|=
literal|0
block|;
for|for
control|(
init|;
name|__length
operator|>
literal|0
condition|;
operator|--
name|__length
control|)
name|__result
operator|=
operator|(
name|__result
operator|*
literal|131
operator|)
operator|+
operator|*
name|__first
operator|++
expr_stmt|;
return|return
name|__result
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|_Fnv_hash
operator|<
literal|4
operator|>
block|{
specifier|static
name|std
operator|::
name|size_t
name|hash
argument_list|(
argument|const char* __first
argument_list|,
argument|std::size_t __length
argument_list|)
block|{
name|std
operator|::
name|size_t
name|__result
operator|=
name|static_cast
operator|<
name|std
operator|::
name|size_t
operator|>
operator|(
literal|2166136261UL
operator|)
block|;
for|for
control|(
init|;
name|__length
operator|>
literal|0
condition|;
operator|--
name|__length
control|)
block|{
name|__result
operator|^=
name|static_cast
operator|<
name|std
operator|::
name|size_t
operator|>
operator|(
operator|*
name|__first
operator|++
operator|)
expr_stmt|;
name|__result
operator|*=
name|static_cast
operator|<
name|std
operator|::
name|size_t
operator|>
operator|(
literal|16777619UL
operator|)
expr_stmt|;
block|}
return|return
name|__result
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|_Fnv_hash
operator|<
literal|8
operator|>
block|{
specifier|static
name|std
operator|::
name|size_t
name|hash
argument_list|(
argument|const char* __first
argument_list|,
argument|std::size_t __length
argument_list|)
block|{
name|std
operator|::
name|size_t
name|__result
operator|=
name|static_cast
operator|<
name|std
operator|::
name|size_t
operator|>
operator|(
literal|14695981039346656037ULL
operator|)
block|;
for|for
control|(
init|;
name|__length
operator|>
literal|0
condition|;
operator|--
name|__length
control|)
block|{
name|__result
operator|^=
name|static_cast
operator|<
name|std
operator|::
name|size_t
operator|>
operator|(
operator|*
name|__first
operator|++
operator|)
expr_stmt|;
name|__result
operator|*=
name|static_cast
operator|<
name|std
operator|::
name|size_t
operator|>
operator|(
literal|1099511628211ULL
operator|)
expr_stmt|;
block|}
return|return
name|__result
return|;
block|}
expr|}
block|;
comment|// XXX String and floating point hashes probably shouldn't be inline
comment|// member functions, since are nontrivial.  Once we have the framework
comment|// for TR1 .cc files, these should go in one.
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|std
operator|::
name|string
operator|>
operator|:
name|public
name|std
operator|::
name|unary_function
operator|<
name|std
operator|::
name|string
block|,
name|std
operator|::
name|size_t
operator|>
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|__s
operator|)
specifier|const
block|{
return|return
name|_Fnv_hash
operator|<
operator|>
operator|::
name|hash
argument_list|(
name|__s
operator|.
name|data
argument_list|()
argument_list|,
name|__s
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
ifdef|#
directive|ifdef
name|_GLIBCXX_USE_WCHAR_T
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|std
operator|::
name|wstring
operator|>
operator|:
name|public
name|std
operator|::
name|unary_function
operator|<
name|std
operator|::
name|wstring
block|,
name|std
operator|::
name|size_t
operator|>
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
operator|(
specifier|const
name|std
operator|::
name|wstring
operator|&
name|__s
operator|)
specifier|const
block|{
return|return
name|_Fnv_hash
operator|<
operator|>
operator|::
name|hash
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|__s
operator|.
name|data
argument_list|()
operator|)
argument_list|,
name|__s
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
return|;
block|}
expr|}
block|;
endif|#
directive|endif
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|float
operator|>
operator|:
name|public
name|std
operator|::
name|unary_function
operator|<
name|float
block|,
name|std
operator|::
name|size_t
operator|>
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
operator|(
name|float
name|__fval
operator|)
specifier|const
block|{
name|std
operator|::
name|size_t
name|__result
operator|=
literal|0
block|;
comment|// 0 and -0 both hash to zero.
if|if
condition|(
name|__fval
operator|!=
literal|0.0f
condition|)
name|__result
operator|=
name|_Fnv_hash
operator|<
operator|>
operator|::
name|hash
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|&
name|__fval
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|__fval
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|__result
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|double
operator|>
operator|:
name|public
name|std
operator|::
name|unary_function
operator|<
name|double
block|,
name|std
operator|::
name|size_t
operator|>
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
operator|(
name|double
name|__dval
operator|)
specifier|const
block|{
name|std
operator|::
name|size_t
name|__result
operator|=
literal|0
block|;
comment|// 0 and -0 both hash to zero.
if|if
condition|(
name|__dval
operator|!=
literal|0.0
condition|)
name|__result
operator|=
name|_Fnv_hash
operator|<
operator|>
operator|::
name|hash
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|&
name|__dval
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|__dval
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|__result
return|;
block|}
expr|}
block|;
comment|// For long double, careful with random padding bits (e.g., on x86,
comment|// 10 bytes -> 12 bytes) and resort to frexp.
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|long
name|double
operator|>
operator|:
name|public
name|std
operator|::
name|unary_function
operator|<
name|long
name|double
block|,
name|std
operator|::
name|size_t
operator|>
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
operator|(
name|long
name|double
name|__ldval
operator|)
specifier|const
block|{
name|std
operator|::
name|size_t
name|__result
operator|=
literal|0
block|;
name|int
name|__exponent
block|;
name|__ldval
operator|=
name|std
operator|::
name|frexp
argument_list|(
name|__ldval
argument_list|,
operator|&
name|__exponent
argument_list|)
block|;
name|__ldval
operator|=
name|__ldval
operator|<
literal|0.0l
condition|?
operator|-
operator|(
name|__ldval
operator|+
literal|0.5l
operator|)
else|:
name|__ldval
block|;
specifier|const
name|long
name|double
name|__mult
operator|=
name|std
operator|::
name|numeric_limits
operator|<
name|std
operator|::
name|size_t
operator|>
operator|::
name|max
argument_list|()
operator|+
literal|1.0l
block|;
name|__ldval
operator|*=
name|__mult
block|;
comment|// Try to use all the bits of the mantissa (really necessary only
comment|// on 32-bit targets, at least for 80-bit floating point formats).
specifier|const
name|std
operator|::
name|size_t
name|__hibits
operator|=
operator|(
name|std
operator|::
name|size_t
operator|)
name|__ldval
block|;
name|__ldval
operator|=
operator|(
name|__ldval
operator|-
operator|(
name|long
name|double
operator|)
name|__hibits
operator|)
operator|*
name|__mult
block|;
specifier|const
name|std
operator|::
name|size_t
name|__coeff
operator|=
operator|(
name|std
operator|::
name|numeric_limits
operator|<
name|std
operator|::
name|size_t
operator|>
operator|::
name|max
argument_list|()
operator|/
name|std
operator|::
name|numeric_limits
operator|<
name|long
name|double
operator|>
operator|::
name|max_exponent
operator|)
block|;
name|__result
operator|=
name|__hibits
operator|+
operator|(
name|std
operator|::
name|size_t
operator|)
name|__ldval
operator|+
name|__coeff
operator|*
name|__exponent
block|;
return|return
name|__result
return|;
block|}
expr|}
block|;
name|_GLIBCXX_END_NAMESPACE
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

