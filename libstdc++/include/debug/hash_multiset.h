begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Debugging hash_multiset implementation -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2003, 2005, 2006
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file debug/hash_multiset.h  *  This file is a GNU debug extension to the Standard C++ Library.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_DEBUG_HASH_MULTISET_H
end_ifndef

begin_define
define|#
directive|define
name|_GLIBCXX_DEBUG_HASH_MULTISET_H
value|1
end_define

begin_include
include|#
directive|include
file|<debug/safe_sequence.h>
end_include

begin_include
include|#
directive|include
file|<debug/safe_iterator.h>
end_include

begin_decl_stmt
name|namespace
name|__gnu_cxx
block|{
name|namespace
name|__debug
block|{
name|template
operator|<
name|typename
name|_Value
operator|,
name|typename
name|_HashFcn
operator|=
name|__gnu_cxx
operator|::
name|hash
operator|<
name|_Value
operator|>
operator|,
name|typename
name|_EqualKey
operator|=
name|std
operator|::
name|equal_to
operator|<
name|_Value
operator|>
operator|,
name|typename
name|_Alloc
operator|=
name|std
operator|::
name|allocator
operator|<
name|_Value
operator|>
expr|>
name|class
name|hash_multiset
operator|:
name|public
name|_GLIBCXX_EXT
operator|::
name|hash_multiset
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|,
name|public
name|__gnu_debug
operator|::
name|_Safe_sequence
operator|<
name|hash_multiset
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
expr|>
block|{
typedef|typedef
name|_GLIBCXX_EXT
operator|::
name|hash_multiset
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|_Base
expr_stmt|;
typedef|typedef
name|__gnu_debug
operator|::
name|_Safe_sequence
operator|<
name|hash_multiset
operator|>
name|_Safe_base
expr_stmt|;
name|public
label|:
typedef|typedef
name|typename
name|_Base
operator|::
name|key_type
name|key_type
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|hasher
name|hasher
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|key_equal
name|key_equal
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|size_type
name|size_type
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|difference_type
name|difference_type
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|pointer
name|pointer
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|const_pointer
name|const_pointer
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|reference
name|reference
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|const_reference
name|const_reference
expr_stmt|;
typedef|typedef
name|__gnu_debug
operator|::
name|_Safe_iterator
operator|<
name|typename
name|_Base
operator|::
name|iterator
operator|,
name|hash_multiset
operator|>
name|iterator
expr_stmt|;
typedef|typedef
name|__gnu_debug
operator|::
name|_Safe_iterator
operator|<
name|typename
name|_Base
operator|::
name|const_iterator
operator|,
name|hash_multiset
operator|>
name|const_iterator
expr_stmt|;
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|using
name|_Base
operator|::
name|hash_funct
expr_stmt|;
name|using
name|_Base
operator|::
name|key_eq
expr_stmt|;
name|using
name|_Base
operator|::
name|get_allocator
expr_stmt|;
name|hash_multiset
argument_list|()
block|{ }
name|explicit
name|hash_multiset
argument_list|(
argument|size_type __n
argument_list|)
block|:
name|_Base
argument_list|(
argument|__n
argument_list|)
block|{ }
name|hash_multiset
argument_list|(
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
block|:
name|_Base
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|)
block|{ }
name|hash_multiset
argument_list|(
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
block|:
name|_Base
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__gnu_debug::__check_valid_range(__f, __l)
argument_list|,
argument|__l
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__gnu_debug::__check_valid_range(__f, __l)
argument_list|,
argument|__l
argument_list|,
argument|__n
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__gnu_debug::__check_valid_range(__f, __l)
argument_list|,
argument|__l
argument_list|,
argument|__n
argument_list|,
argument|__hf
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__gnu_debug::__check_valid_range(__f, __l)
argument_list|,
argument|__l
argument_list|,
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{ }
name|hash_multiset
argument_list|(
specifier|const
name|_Base
operator|&
name|__x
argument_list|)
operator|:
name|_Base
argument_list|(
name|__x
argument_list|)
operator|,
name|_Safe_base
argument_list|()
block|{ }
name|using
name|_Base
operator|::
name|size
expr_stmt|;
name|using
name|_Base
operator|::
name|max_size
expr_stmt|;
name|using
name|_Base
operator|::
name|empty
expr_stmt|;
name|void
name|swap
parameter_list|(
name|hash_multiset
modifier|&
name|__x
parameter_list|)
block|{
name|_Base
operator|::
name|swap
argument_list|(
name|__x
argument_list|)
expr_stmt|;
name|this
operator|->
name|_M_swap
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|_Base
operator|::
name|begin
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|_Base
operator|::
name|end
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
name|iterator
name|insert
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__obj
parameter_list|)
block|{
return|return
name|iterator
argument_list|(
name|_Base
operator|::
name|insert
argument_list|(
name|__obj
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
name|__glibcxx_check_valid_range
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
name|_Base
operator|::
name|insert
argument_list|(
name|__first
operator|.
name|base
argument_list|()
argument_list|,
name|__last
operator|.
name|base
argument_list|()
argument_list|)
block|;       }
name|iterator
name|insert_noresize
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
return|return
name|iterator
argument_list|(
name|_Base
operator|::
name|insert_noresize
argument_list|(
name|__obj
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
name|iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
return|return
name|iterator
argument_list|(
name|_Base
operator|::
name|find
argument_list|(
name|__key
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
name|using
name|_Base
operator|::
name|count
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& __key
argument_list|)
specifier|const
block|{
typedef|typedef
name|typename
name|_Base
operator|::
name|iterator
name|_Base_iterator
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|_Base_iterator
operator|,
name|_Base_iterator
operator|>
name|__res
operator|=
name|_Base
operator|::
name|equal_range
argument_list|(
name|__key
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|iterator
argument_list|(
name|__res
operator|.
name|first
argument_list|,
name|this
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|__res
operator|.
name|second
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
block|}
name|size_type
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__key
parameter_list|)
block|{
name|size_type
name|__count
init|=
literal|0
decl_stmt|;
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|__victims
operator|=
name|this
operator|->
name|equal_range
argument_list|(
name|__key
argument_list|)
expr_stmt|;
while|while
condition|(
name|__victims
operator|.
name|first
operator|!=
name|__victims
operator|.
name|second
condition|)
block|{
name|this
operator|->
name|erase
argument_list|(
name|__victims
operator|++
argument_list|)
expr_stmt|;
operator|++
name|__count
expr_stmt|;
block|}
return|return
name|__count
return|;
block|}
name|void
name|erase
parameter_list|(
name|iterator
name|__it
parameter_list|)
block|{
name|__glibcxx_check_erase
argument_list|(
name|__it
argument_list|)
expr_stmt|;
name|__it
operator|.
name|_M_invalidate
argument_list|()
expr_stmt|;
name|_Base
operator|::
name|erase
argument_list|(
name|__it
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
name|__glibcxx_check_erase_range
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
for|for
control|(
name|iterator
name|__tmp
init|=
name|__first
init|;
name|__tmp
operator|!=
name|__last
condition|;
control|)
block|{
name|iterator
name|__victim
init|=
name|__tmp
operator|++
decl_stmt|;
name|__victim
operator|.
name|_M_invalidate
argument_list|()
expr_stmt|;
block|}
name|_Base
operator|::
name|erase
argument_list|(
name|__first
operator|.
name|base
argument_list|()
argument_list|,
name|__last
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|_Base
operator|::
name|clear
argument_list|()
expr_stmt|;
name|this
operator|->
name|_M_invalidate_all
argument_list|()
expr_stmt|;
block|}
name|using
name|_Base
operator|::
name|resize
expr_stmt|;
name|using
name|_Base
operator|::
name|bucket_count
expr_stmt|;
name|using
name|_Base
operator|::
name|max_bucket_count
expr_stmt|;
name|using
name|_Base
operator|::
name|elems_in_bucket
expr_stmt|;
name|_Base
modifier|&
name|_M_base
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|_Base
operator|&
name|_M_base
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
return|;
block|}
name|private
label|:
name|void
name|_M_invalidate_all
parameter_list|()
block|{
typedef|typedef
name|typename
name|_Base
operator|::
name|const_iterator
name|_Base_const_iterator
expr_stmt|;
typedef|typedef
name|__gnu_debug
operator|::
name|_Not_equal_to
operator|<
name|_Base_const_iterator
operator|>
name|_Not_equal
expr_stmt|;
name|this
operator|->
name|_M_invalidate_if
argument_list|(
name|_Not_equal
argument_list|(
name|_M_base
argument_list|()
operator|.
name|end
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Value
operator|,
name|typename
name|_HashFcn
operator|,
name|typename
name|_EqualKey
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|hash_multiset
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|hash_multiset
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|_M_base
argument_list|()
operator|==
name|__y
operator|.
name|_M_base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Value
operator|,
name|typename
name|_HashFcn
operator|,
name|typename
name|_EqualKey
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|hash_multiset
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|hash_multiset
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|_M_base
argument_list|()
operator|!=
name|__y
operator|.
name|_M_base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Value
operator|,
name|typename
name|_HashFcn
operator|,
name|typename
name|_EqualKey
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|hash_multiset<_Value
argument_list|,
argument|_HashFcn
argument_list|,
argument|_EqualKey
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|hash_multiset<_Value
argument_list|,
argument|_HashFcn
argument_list|,
argument|_EqualKey
argument_list|,
argument|_Alloc>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
end_expr_stmt

begin_comment
unit|}
comment|// namespace __debug
end_comment

begin_comment
unit|}
comment|// namespace __gnu_cxx
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

