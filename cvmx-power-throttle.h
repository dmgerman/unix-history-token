begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Interface to power-throttle control, measurement, and debugging  * facilities.  *  *<hr>$Revision<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_POWER_THROTTLE_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_POWER_THROTTLE_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * a field of the POWTHROTTLE register  */
specifier|static
struct|struct
name|cvmx_power_throttle_rfield_t
block|{
name|char
name|name
index|[
literal|16
index|]
decl_stmt|;
comment|/* the field's name */
name|int32_t
name|pos
decl_stmt|;
comment|/* position of the field's LSb */
name|int32_t
name|len
decl_stmt|;
comment|/* the field's length */
block|}
name|cvmx_power_throttle_rfield
index|[]
init|=
block|{
define|#
directive|define
name|CVMX_PTH_INDEX_MAXPOW
value|0
block|{
literal|"MAXPOW"
block|,
literal|56
block|,
literal|8
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_POWER
value|1
block|{
literal|"POWER"
block|,
literal|48
block|,
literal|8
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_THROTT
value|2
block|{
literal|"THROTT"
block|,
literal|40
block|,
literal|8
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_RESERVED
value|3
block|{
literal|"Reserved"
block|,
literal|28
block|,
literal|12
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_DISTAG
value|4
block|{
literal|"DISTAG"
block|,
literal|27
block|,
literal|1
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_PERIOD
value|5
block|{
literal|"PERIOD"
block|,
literal|24
block|,
literal|3
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_POWLIM
value|6
block|{
literal|"POWLIM"
block|,
literal|16
block|,
literal|8
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_MAXTHR
value|7
block|{
literal|"MAXTHR"
block|,
literal|8
block|,
literal|8
block|}
block|,
define|#
directive|define
name|CVMX_PTH_INDEX_MINTHR
value|8
block|{
literal|"MINTHR"
block|,
literal|0
block|,
literal|8
block|}
define|#
directive|define
name|CVMX_PTH_INDEX_MAX
value|9
block|}
struct|;
define|#
directive|define
name|CVMX_PTH_GET_MASK
parameter_list|(
name|len
parameter_list|,
name|pos
parameter_list|)
define|\
value|((((uint64_t)1<< (len)) - 1)<< (pos))
comment|/**  * Get the i'th field of power-throttle register r.  */
specifier|static
specifier|inline
name|uint64_t
name|cvmx_power_throttle_get_field
parameter_list|(
name|int
name|i
parameter_list|,
name|uint64_t
name|r
parameter_list|)
block|{
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
condition|)
block|{
name|uint64_t
name|m
decl_stmt|;
name|struct
name|cvmx_power_throttle_rfield_t
modifier|*
name|p
decl_stmt|;
name|assert
argument_list|(
operator|(
name|i
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|i
operator|<
name|CVMX_PTH_INDEX_MAX
operator|)
argument_list|)
expr_stmt|;
name|p
operator|=
operator|&
name|cvmx_power_throttle_rfield
index|[
name|i
index|]
expr_stmt|;
name|m
operator|=
name|CVMX_PTH_GET_MASK
argument_list|(
name|p
operator|->
name|len
argument_list|,
name|p
operator|->
name|pos
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|r
operator|&
name|m
operator|)
operator|>>
name|p
operator|->
name|pos
operator|)
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**  * Set the i'th field of power-throttle register r to v.  */
specifier|static
specifier|inline
name|int
name|cvmx_power_throttle_set_field
parameter_list|(
name|int
name|i
parameter_list|,
name|uint64_t
name|r
parameter_list|,
name|uint64_t
name|v
parameter_list|)
block|{
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
condition|)
block|{
name|uint64_t
name|m
decl_stmt|;
name|struct
name|cvmx_power_throttle_rfield_t
modifier|*
name|p
decl_stmt|;
name|assert
argument_list|(
operator|(
name|i
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|i
operator|<
name|CVMX_PTH_INDEX_MAX
operator|)
argument_list|)
expr_stmt|;
name|p
operator|=
operator|&
name|cvmx_power_throttle_rfield
index|[
name|i
index|]
expr_stmt|;
name|m
operator|=
name|CVMX_PTH_GET_MASK
argument_list|(
name|p
operator|->
name|len
argument_list|,
name|p
operator|->
name|pos
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
operator|~
name|m
operator|&
name|r
operator|)
operator||
operator|(
operator|(
name|v
operator|<<
name|p
operator|->
name|pos
operator|)
operator|&
name|m
operator|)
operator|)
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**  * API Function Prototypes  */
specifier|extern
name|int
name|cvmx_power_throttle_self
parameter_list|(
name|uint8_t
name|percentage
parameter_list|)
function_decl|;
specifier|extern
name|int
name|cvmx_power_throttle
parameter_list|(
name|uint8_t
name|percentage
parameter_list|,
name|uint64_t
name|coremask
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_POWER_THROTTLE_H__ */
end_comment

end_unit

