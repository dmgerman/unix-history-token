begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* File : /crypto/engine/vendor_defns/hw_zencod.h */
end_comment

begin_comment
comment|/* ====================================================================  * Written by Donnat Frederic (frederic.donnat@zencod.com) from ZENCOD  * for "zencod" ENGINE integration in OpenSSL project.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_HW_ZENCOD_H_
end_ifndef

begin_define
define|#
directive|define
name|_HW_ZENCOD_H_
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
define|#
directive|define
name|ZENBRIDGE_MAX_KEYSIZE_RSA
value|2048
define|#
directive|define
name|ZENBRIDGE_MAX_KEYSIZE_RSA_CRT
value|1024
define|#
directive|define
name|ZENBRIDGE_MAX_KEYSIZE_DSA_SIGN
value|1024
define|#
directive|define
name|ZENBRIDGE_MAX_KEYSIZE_DSA_VRFY
value|1024
comment|/* Library version computation */
define|#
directive|define
name|ZENBRIDGE_VERSION_MAJOR
parameter_list|(
name|x
parameter_list|)
value|(((x)>> 16) | 0xff)
define|#
directive|define
name|ZENBRIDGE_VERSION_MINOR
parameter_list|(
name|x
parameter_list|)
value|(((x)>>  8) | 0xff)
define|#
directive|define
name|ZENBRIDGE_VERSION_PATCH
parameter_list|(
name|x
parameter_list|)
value|(((x)>>  0) | 0xff)
define|#
directive|define
name|ZENBRIDGE_VERSION
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
value|((x)<< 16 | (y)<< 8 | (z))
comment|/*  * Memory type  */
typedef|typedef
struct|struct
name|zencod_number_s
block|{
name|unsigned
name|long
name|len
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
block|}
name|zen_nb_t
typedef|;
define|#
directive|define
name|KEY
value|zen_nb_t
comment|/*  * Misc  */
typedef|typedef
name|int
name|t_zencod_lib_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_hw_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_test
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_dump_key
parameter_list|(
name|FILE
modifier|*
name|stream
parameter_list|,
name|char
modifier|*
name|msg
parameter_list|,
name|KEY
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/*  * Key management tools  */
typedef|typedef
name|KEY
modifier|*
name|t_zencod_new_number
parameter_list|(
name|unsigned
name|long
name|len
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_init_number
parameter_list|(
name|KEY
modifier|*
name|n
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|unsigned
name|long
name|t_zencod_bytes2bits
parameter_list|(
name|unsigned
name|char
modifier|*
name|n
parameter_list|,
name|unsigned
name|long
name|bytes
parameter_list|)
function_decl|;
typedef|typedef
name|unsigned
name|long
name|t_zencod_bits2bytes
parameter_list|(
name|unsigned
name|long
name|bits
parameter_list|)
function_decl|;
comment|/*  * RSA API  */
comment|/* Compute modular exponential : y = x**e | n */
typedef|typedef
name|int
name|t_zencod_rsa_mod_exp
parameter_list|(
name|KEY
modifier|*
name|y
parameter_list|,
name|KEY
modifier|*
name|x
parameter_list|,
name|KEY
modifier|*
name|n
parameter_list|,
name|KEY
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* Compute modular exponential : y1 = (x | p)**edp | p, y2 = (x | p)**edp | p, y = y2 + (qinv * (y1 - y2) | p) * q */
typedef|typedef
name|int
name|t_zencod_rsa_mod_exp_crt
parameter_list|(
name|KEY
modifier|*
name|y
parameter_list|,
name|KEY
modifier|*
name|x
parameter_list|,
name|KEY
modifier|*
name|p
parameter_list|,
name|KEY
modifier|*
name|q
parameter_list|,
name|KEY
modifier|*
name|edp
parameter_list|,
name|KEY
modifier|*
name|edq
parameter_list|,
name|KEY
modifier|*
name|qinv
parameter_list|)
function_decl|;
comment|/*  * DSA API  */
typedef|typedef
name|int
name|t_zencod_dsa_do_sign
parameter_list|(
name|unsigned
name|int
name|hash
parameter_list|,
name|KEY
modifier|*
name|data
parameter_list|,
name|KEY
modifier|*
name|random
parameter_list|,
name|KEY
modifier|*
name|p
parameter_list|,
name|KEY
modifier|*
name|q
parameter_list|,
name|KEY
modifier|*
name|g
parameter_list|,
name|KEY
modifier|*
name|x
parameter_list|,
name|KEY
modifier|*
name|r
parameter_list|,
name|KEY
modifier|*
name|s
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_dsa_do_verify
parameter_list|(
name|unsigned
name|int
name|hash
parameter_list|,
name|KEY
modifier|*
name|data
parameter_list|,
name|KEY
modifier|*
name|p
parameter_list|,
name|KEY
modifier|*
name|q
parameter_list|,
name|KEY
modifier|*
name|g
parameter_list|,
name|KEY
modifier|*
name|y
parameter_list|,
name|KEY
modifier|*
name|r
parameter_list|,
name|KEY
modifier|*
name|s
parameter_list|,
name|KEY
modifier|*
name|v
parameter_list|)
function_decl|;
comment|/*  * DH API  */
comment|/* Key generation : compute public value y = g**x | n */
typedef|typedef
name|int
name|t_zencod_dh_generate_key
parameter_list|(
name|KEY
modifier|*
name|y
parameter_list|,
name|KEY
modifier|*
name|x
parameter_list|,
name|KEY
modifier|*
name|g
parameter_list|,
name|KEY
modifier|*
name|n
parameter_list|,
name|int
name|gen_x
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_dh_compute_key
parameter_list|(
name|KEY
modifier|*
name|k
parameter_list|,
name|KEY
modifier|*
name|y
parameter_list|,
name|KEY
modifier|*
name|x
parameter_list|,
name|KEY
modifier|*
name|n
parameter_list|)
function_decl|;
comment|/*  * RNG API  */
define|#
directive|define
name|ZENBRIDGE_RNG_DIRECT
value|0
define|#
directive|define
name|ZENBRIDGE_RNG_SHA1
value|1
typedef|typedef
name|int
name|t_zencod_rand_bytes
parameter_list|(
name|KEY
modifier|*
name|rand
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
function_decl|;
comment|/*  * Math API  */
typedef|typedef
name|int
name|t_zencod_math_mod_exp
parameter_list|(
name|KEY
modifier|*
name|r
parameter_list|,
name|KEY
modifier|*
name|a
parameter_list|,
name|KEY
modifier|*
name|e
parameter_list|,
name|KEY
modifier|*
name|n
parameter_list|)
function_decl|;
comment|/*  * Symetric API  */
comment|/* Define a data structure for digests operations */
typedef|typedef
struct|struct
name|ZEN_data_st
block|{
name|unsigned
name|int
name|HashBufferSize
decl_stmt|;
name|unsigned
name|char
modifier|*
name|HashBuffer
decl_stmt|;
block|}
name|ZEN_MD_DATA
typedef|;
comment|/*  * Functions for Digest (MD5, SHA1) stuff  */
comment|/* output : output data buffer */
comment|/* input : input data buffer */
comment|/* algo : hash algorithm, MD5 or SHA1 */
comment|/* typedef int t_zencod_hash ( KEY *output, const KEY *input, int algo ) ;  * typedef int t_zencod_sha_hash ( KEY *output, const KEY *input, int algo ) ;  */
comment|/* For now separate this stuff that mad it easier to test */
typedef|typedef
name|int
name|t_zencod_md5_init
parameter_list|(
name|ZEN_MD_DATA
modifier|*
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_md5_update
parameter_list|(
name|ZEN_MD_DATA
modifier|*
name|data
parameter_list|,
specifier|const
name|KEY
modifier|*
name|input
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_md5_do_final
parameter_list|(
name|ZEN_MD_DATA
modifier|*
name|data
parameter_list|,
name|KEY
modifier|*
name|output
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_sha1_init
parameter_list|(
name|ZEN_MD_DATA
modifier|*
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_sha1_update
parameter_list|(
name|ZEN_MD_DATA
modifier|*
name|data
parameter_list|,
specifier|const
name|KEY
modifier|*
name|input
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|t_zencod_sha1_do_final
parameter_list|(
name|ZEN_MD_DATA
modifier|*
name|data
parameter_list|,
name|KEY
modifier|*
name|output
parameter_list|)
function_decl|;
comment|/*  * Functions for Cipher (RC4, DES, 3DES) stuff  */
comment|/* output : output data buffer */
comment|/* input : input data buffer */
comment|/* key : rc4 key data */
comment|/* index_1 : value of index x from RC4 key structure */
comment|/* index_2 : value of index y from RC4 key structure */
comment|/* Be carefull : RC4 key should be expanded before calling this method (Should we provide an expand function ??) */
typedef|typedef
name|int
name|t_zencod_rc4_cipher
parameter_list|(
name|KEY
modifier|*
name|output
parameter_list|,
specifier|const
name|KEY
modifier|*
name|input
parameter_list|,
specifier|const
name|KEY
modifier|*
name|key
parameter_list|,
name|unsigned
name|char
modifier|*
name|index_1
parameter_list|,
name|unsigned
name|char
modifier|*
name|index_2
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
comment|/* output : output data buffer */
comment|/* input : input data buffer */
comment|/* key_1 : des first key data */
comment|/* key_2 : des second key data */
comment|/* key_3 : des third key data */
comment|/* iv : initial vector */
comment|/* mode : xdes mode (encrypt or decrypt) */
comment|/* Be carefull : In DES mode key_1 = key_2 = key_3 (as far as i can see !!) */
typedef|typedef
name|int
name|t_zencod_xdes_cipher
parameter_list|(
name|KEY
modifier|*
name|output
parameter_list|,
specifier|const
name|KEY
modifier|*
name|input
parameter_list|,
specifier|const
name|KEY
modifier|*
name|key_1
parameter_list|,
specifier|const
name|KEY
modifier|*
name|key_2
parameter_list|,
specifier|const
name|KEY
modifier|*
name|key_3
parameter_list|,
specifier|const
name|KEY
modifier|*
name|iv
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
undef|#
directive|undef
name|KEY
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_HW_ZENCOD_H_ */
end_comment

end_unit

