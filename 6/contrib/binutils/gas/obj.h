begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* obj.h - defines the object dependent hooks for all object    format backends.     Copyright 1987, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1999, 2000, 2002    Free Software Foundation, Inc.     This file is part of GAS, the GNU Assembler.     GAS is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GAS is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GAS; see the file COPYING.  If not, write to the Free    Software Foundation, 59 Temple Place - Suite 330, Boston, MA    02111-1307, USA.  */
end_comment

begin_function_decl
name|char
modifier|*
name|obj_default_output_file_name
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|obj_emit_relocations
parameter_list|(
name|char
modifier|*
modifier|*
name|where
parameter_list|,
name|fixS
modifier|*
name|fixP
parameter_list|,
name|relax_addressT
name|segment_address_in_file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|obj_emit_strings
parameter_list|(
name|char
modifier|*
modifier|*
name|where
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|obj_emit_symbols
parameter_list|(
name|char
modifier|*
modifier|*
name|where
parameter_list|,
name|symbolS
modifier|*
name|symbols
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|obj_read_begin_hook
end_ifndef

begin_function_decl
name|void
name|obj_read_begin_hook
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|BFD_ASSEMBLER
end_ifndef

begin_function_decl
name|void
name|obj_crawl_symbol_chain
parameter_list|(
name|object_headers
modifier|*
name|headers
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|obj_header_append
parameter_list|(
name|char
modifier|*
modifier|*
name|where
parameter_list|,
name|object_headers
modifier|*
name|headers
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|obj_pre_write_hook
end_ifndef

begin_function_decl
name|void
name|obj_pre_write_hook
parameter_list|(
name|object_headers
modifier|*
name|headers
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|obj_symbol_new_hook
end_ifndef

begin_function_decl
name|void
name|obj_symbol_new_hook
parameter_list|(
name|symbolS
modifier|*
name|symbolP
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|obj_symbol_to_chars
parameter_list|(
name|char
modifier|*
modifier|*
name|where
parameter_list|,
name|symbolS
modifier|*
name|symbolP
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
specifier|const
name|pseudo_typeS
name|obj_pseudo_table
index|[]
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|BFD_ASSEMBLER
end_ifdef

begin_struct
struct|struct
name|format_ops
block|{
name|int
name|flavor
decl_stmt|;
name|unsigned
name|dfl_leading_underscore
range|:
literal|1
decl_stmt|;
name|unsigned
name|emit_section_symbols
range|:
literal|1
decl_stmt|;
name|void
function_decl|(
modifier|*
name|begin
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|app_file
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|frob_symbol
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|frob_file
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|frob_file_before_adjust
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|frob_file_before_fix
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|frob_file_after_relocs
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|bfd_vma
function_decl|(
modifier|*
name|s_get_size
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|s_set_size
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
name|bfd_vma
function_decl|(
modifier|*
name|s_get_align
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|s_set_align
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|s_get_other
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|s_set_other
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|s_get_desc
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|s_set_desc
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|s_get_type
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|s_set_type
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|copy_symbol_attributes
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|symbolS
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|generate_asm_lineno
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|process_stab
function_decl|)
parameter_list|(
name|segT
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|separate_stab_sections
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|init_stab_section
function_decl|)
parameter_list|(
name|segT
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sec_sym_ok_for_reloc
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|pop_insert
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* For configurations using ECOFF_DEBUGGING, this callback is used.  */
name|void
function_decl|(
modifier|*
name|ecoff_set_ext
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|,
name|struct
name|ecoff_extr
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|read_begin_hook
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|symbol_new_hook
function_decl|)
parameter_list|(
name|symbolS
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|elf_format_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|ecoff_format_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|coff_format_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|aout_format_ops
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|this_format
end_ifndef

begin_expr_stmt
name|COMMON
specifier|const
expr|struct
name|format_ops
operator|*
name|this_format
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* end of obj.h */
end_comment

end_unit

