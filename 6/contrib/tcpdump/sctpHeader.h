begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* @(#) $Header: /tcpdump/master/tcpdump/sctpHeader.h,v 1.6 2002/12/11 07:14:11 guy Exp $ (LBL) */
end_comment

begin_comment
comment|/* SCTP reference Implementation Copyright (C) 1999 Cisco And Motorola  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * 4. Neither the name of Cisco nor of Motorola may be used  *    to endorse or promote products derived from this software without  *    specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * This file is part of the SCTP reference Implementation  *  *  * Please send any bug reports or fixes you make to one of the following email  * addresses:  *  * rstewar1@email.mot.com  * kmorneau@cisco.com  * qxie1@email.mot.com  *  * Any bugs reported given to us we will try to fix... any fixes shared will  * be incorperated into the next SCTP release.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__sctpHeader_h__
end_ifndef

begin_define
define|#
directive|define
name|__sctpHeader_h__
end_define

begin_include
include|#
directive|include
file|<sctpConstants.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* the sctp common header */
ifdef|#
directive|ifdef
name|TRU64
define|#
directive|define
name|_64BITS
value|1
endif|#
directive|endif
struct|struct
name|sctpHeader
block|{
name|u_int16_t
name|source
decl_stmt|;
name|u_int16_t
name|destination
decl_stmt|;
name|u_int32_t
name|verificationTag
decl_stmt|;
name|u_int32_t
name|adler32
decl_stmt|;
block|}
struct|;
comment|/* various descriptor parsers */
struct|struct
name|sctpChunkDesc
block|{
name|u_int8_t
name|chunkID
decl_stmt|;
name|u_int8_t
name|chunkFlg
decl_stmt|;
name|u_int16_t
name|chunkLength
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpParamDesc
block|{
name|u_int16_t
name|paramType
decl_stmt|;
name|u_int16_t
name|paramLength
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpRelChunkDesc
block|{
name|struct
name|sctpChunkDesc
name|chk
decl_stmt|;
name|u_int32_t
name|serialNumber
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpVendorSpecificParam
block|{
name|struct
name|sctpParamDesc
name|p
decl_stmt|;
comment|/* type must be 0xfffe */
name|u_int32_t
name|vendorId
decl_stmt|;
comment|/* vendor ID from RFC 1700 */
name|u_int16_t
name|vendorSpecificType
decl_stmt|;
name|u_int16_t
name|vendorSpecificLen
decl_stmt|;
block|}
struct|;
comment|/* Structures for the control parts */
comment|/* Sctp association init request/ack */
comment|/* this is used for init ack, too */
struct|struct
name|sctpInitiation
block|{
name|u_int32_t
name|initTag
decl_stmt|;
comment|/* tag of mine */
name|u_int32_t
name|rcvWindowCredit
decl_stmt|;
comment|/* rwnd */
name|u_int16_t
name|NumPreopenStreams
decl_stmt|;
comment|/* OS */
name|u_int16_t
name|MaxInboundStreams
decl_stmt|;
comment|/* MIS */
name|u_int32_t
name|initialTSN
decl_stmt|;
comment|/* optional param's follow in sctpParamDesc form */
block|}
struct|;
struct|struct
name|sctpV4IpAddress
block|{
name|struct
name|sctpParamDesc
name|p
decl_stmt|;
comment|/* type is set to SCTP_IPV4_PARAM_TYPE, len=10 */
name|u_int32_t
name|ipAddress
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpV6IpAddress
block|{
name|struct
name|sctpParamDesc
name|p
decl_stmt|;
comment|/* type is set to SCTP_IPV6_PARAM_TYPE, len=22 */
name|u_int8_t
name|ipAddress
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpDNSName
block|{
name|struct
name|sctpParamDesc
name|param
decl_stmt|;
name|u_int8_t
name|name
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpCookiePreserve
block|{
name|struct
name|sctpParamDesc
name|p
decl_stmt|;
comment|/* type is set to SCTP_COOKIE_PRESERVE, len=8 */
name|u_int32_t
name|extraTime
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpTimeStamp
block|{
name|u_int32_t
name|ts_sec
decl_stmt|;
name|u_int32_t
name|ts_usec
decl_stmt|;
block|}
struct|;
comment|/* wire structure of my cookie */
struct|struct
name|cookieMessage
block|{
name|u_int32_t
name|TieTag_curTag
decl_stmt|;
comment|/* copied from assoc if present */
name|u_int32_t
name|TieTag_hisTag
decl_stmt|;
comment|/* copied from assoc if present */
name|int32_t
name|cookieLife
decl_stmt|;
comment|/* life I will award this cookie */
name|struct
name|sctpTimeStamp
name|timeEnteringState
decl_stmt|;
comment|/* the time I built cookie */
name|struct
name|sctpInitiation
name|initAckISent
decl_stmt|;
comment|/* the INIT-ACK that I sent to my peer */
name|u_int32_t
name|addressWhereISent
index|[
literal|4
index|]
decl_stmt|;
comment|/* I make this 4 ints so I get 128bits for future */
name|int32_t
name|addrtype
decl_stmt|;
comment|/* address type */
name|u_int16_t
name|locScope
decl_stmt|;
comment|/* V6 local scope flag */
name|u_int16_t
name|siteScope
decl_stmt|;
comment|/* V6 site scope flag */
comment|/* at the end is tacked on the INIT chunk sent in    * its entirety and of course our    * signature.    */
block|}
struct|;
comment|/* this guy is for use when  * I have a initiate message gloming the  * things together.   */
struct|struct
name|sctpUnifiedInit
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|struct
name|sctpInitiation
name|initm
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpSendableInit
block|{
name|struct
name|sctpHeader
name|mh
decl_stmt|;
name|struct
name|sctpUnifiedInit
name|msg
decl_stmt|;
block|}
struct|;
comment|/* Selective Acknowledgement  * has the following structure with  * a optional ammount of trailing int's  * on the last part (based on the numberOfDesc  * field).  */
struct|struct
name|sctpSelectiveAck
block|{
name|u_int32_t
name|highestConseqTSN
decl_stmt|;
name|u_int32_t
name|updatedRwnd
decl_stmt|;
name|u_int16_t
name|numberOfdesc
decl_stmt|;
name|u_int16_t
name|numDupTsns
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpSelectiveFrag
block|{
name|u_int16_t
name|fragmentStart
decl_stmt|;
name|u_int16_t
name|fragmentEnd
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpUnifiedSack
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|struct
name|sctpSelectiveAck
name|sack
decl_stmt|;
block|}
struct|;
comment|/* for both RTT request/response the  * following is sent  */
struct|struct
name|sctpHBrequest
block|{
name|u_int32_t
name|time_value_1
decl_stmt|;
name|u_int32_t
name|time_value_2
decl_stmt|;
block|}
struct|;
comment|/* here is what I read and respond with to. */
struct|struct
name|sctpHBunified
block|{
name|struct
name|sctpChunkDesc
name|hdr
decl_stmt|;
name|struct
name|sctpParamDesc
name|hb
decl_stmt|;
block|}
struct|;
comment|/* here is what I send */
struct|struct
name|sctpHBsender
block|{
name|struct
name|sctpChunkDesc
name|hdr
decl_stmt|;
name|struct
name|sctpParamDesc
name|hb
decl_stmt|;
name|struct
name|sctpHBrequest
name|rtt
decl_stmt|;
name|int8_t
name|addrFmt
index|[
name|SCTP_ADDRMAX
index|]
decl_stmt|;
name|u_int16_t
name|userreq
decl_stmt|;
block|}
struct|;
comment|/* for the abort and shutdown ACK  * we must carry the init tag in the common header. Just the  * common header is all that is needed with a chunk descriptor.  */
struct|struct
name|sctpUnifiedAbort
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpUnifiedAbortLight
block|{
name|struct
name|sctpHeader
name|mh
decl_stmt|;
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpUnifiedAbortHeavy
block|{
name|struct
name|sctpHeader
name|mh
decl_stmt|;
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|u_int16_t
name|causeCode
decl_stmt|;
name|u_int16_t
name|causeLen
decl_stmt|;
block|}
struct|;
comment|/* For the graceful shutdown we must carry  * the tag (in common header)  and the highest consequitive acking value  */
struct|struct
name|sctpShutdown
block|{
name|u_int32_t
name|TSN_Seen
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpUnifiedShutdown
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|struct
name|sctpShutdown
name|shut
decl_stmt|;
block|}
struct|;
comment|/* in the unified message we add the trailing  * stream id since it is the only message  * that is defined as a operation error.  */
struct|struct
name|sctpOpErrorCause
block|{
name|u_int16_t
name|cause
decl_stmt|;
name|u_int16_t
name|causeLen
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpUnifiedOpError
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|struct
name|sctpOpErrorCause
name|c
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpUnifiedStreamError
block|{
name|struct
name|sctpHeader
name|mh
decl_stmt|;
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|struct
name|sctpOpErrorCause
name|c
decl_stmt|;
name|u_int16_t
name|strmNum
decl_stmt|;
name|u_int16_t
name|reserved
decl_stmt|;
block|}
struct|;
struct|struct
name|staleCookieMsg
block|{
name|struct
name|sctpHeader
name|mh
decl_stmt|;
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|struct
name|sctpOpErrorCause
name|c
decl_stmt|;
name|u_int32_t
name|moretime
decl_stmt|;
block|}
struct|;
comment|/* the following is used in all sends  * where nothing is needed except the  * chunk/type i.e. shutdownAck Abort */
struct|struct
name|sctpUnifiedSingleMsg
block|{
name|struct
name|sctpHeader
name|mh
decl_stmt|;
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpDataPart
block|{
name|u_int32_t
name|TSN
decl_stmt|;
name|u_int16_t
name|streamId
decl_stmt|;
name|u_int16_t
name|sequence
decl_stmt|;
name|u_int32_t
name|payloadtype
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpUnifiedDatagram
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|struct
name|sctpDataPart
name|dp
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpECN_echo
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|u_int32_t
name|Lowest_TSN
decl_stmt|;
block|}
struct|;
struct|struct
name|sctpCWR
block|{
name|struct
name|sctpChunkDesc
name|uh
decl_stmt|;
name|u_int32_t
name|TSN_reduced_at
decl_stmt|;
block|}
struct|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

