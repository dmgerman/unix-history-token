begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Output streams -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 27.6.2  Output streams
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file ostream  *  This is a Standard C++ Library header.  You should @c #include this header  *  in your programs, rather than any of the "st[dl]_*.h" implementation files.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_OSTREAM
end_ifndef

begin_define
define|#
directive|define
name|_GLIBCXX_OSTREAM
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<ios>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
comment|// [27.6.2.1] Template class basic_ostream
comment|/**    *  @brief  Controlling output.    *    *  This is the base class for all output streams.  It provides text    *  formatting of all builtin types, and communicates with any class    *  derived from basic_streambuf to do the actual output.   */
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_ostream
operator|:
name|virtual
name|public
name|basic_ios
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
block|{
name|public
operator|:
comment|// Types (inherited from basic_ios (27.4.4)):
typedef|typedef
name|_CharT
name|char_type
typedef|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|int_type
name|int_type
expr_stmt|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|pos_type
name|pos_type
expr_stmt|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|off_type
name|off_type
expr_stmt|;
typedef|typedef
name|_Traits
name|traits_type
typedef|;
comment|// Non-standard Types:
typedef|typedef
name|basic_streambuf
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__streambuf_type
expr_stmt|;
typedef|typedef
name|basic_ios
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__ios_type
expr_stmt|;
typedef|typedef
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__ostream_type
expr_stmt|;
typedef|typedef
name|num_put
operator|<
name|_CharT
operator|,
name|ostreambuf_iterator
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
expr|>
name|__num_put_type
expr_stmt|;
typedef|typedef
name|ctype
operator|<
name|_CharT
operator|>
name|__ctype_type
expr_stmt|;
name|template
operator|<
name|typename
name|_CharT2
operator|,
name|typename
name|_Traits2
operator|>
name|friend
name|basic_ostream
operator|<
name|_CharT2
operator|,
name|_Traits2
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT2
operator|,
name|_Traits2
operator|>
operator|&
operator|,
name|_CharT2
operator|)
expr_stmt|;
name|template
operator|<
name|typename
name|_Traits2
operator|>
name|friend
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits2
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits2
operator|>
operator|&
operator|,
name|char
operator|)
expr_stmt|;
name|template
operator|<
name|typename
name|_CharT2
operator|,
name|typename
name|_Traits2
operator|>
name|friend
name|basic_ostream
operator|<
name|_CharT2
operator|,
name|_Traits2
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT2
operator|,
name|_Traits2
operator|>
operator|&
operator|,
specifier|const
name|_CharT2
operator|*
operator|)
expr_stmt|;
name|template
operator|<
name|typename
name|_Traits2
operator|>
name|friend
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits2
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits2
operator|>
operator|&
operator|,
specifier|const
name|char
operator|*
operator|)
expr_stmt|;
name|template
operator|<
name|typename
name|_CharT2
operator|,
name|typename
name|_Traits2
operator|>
name|friend
name|basic_ostream
operator|<
name|_CharT2
operator|,
name|_Traits2
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT2
operator|,
name|_Traits2
operator|>
operator|&
operator|,
specifier|const
name|char
operator|*
operator|)
expr_stmt|;
comment|// [27.6.2.2] constructor/destructor
comment|/**        *  @brief  Base constructor.        *        *  This ctor is almost never called by the user directly, rather from        *  derived classes' initialization lists, which pass a pointer to        *  their own stream buffer.       */
name|explicit
name|basic_ostream
parameter_list|(
name|__streambuf_type
modifier|*
name|__sb
parameter_list|)
block|{
name|this
operator|->
name|init
argument_list|(
name|__sb
argument_list|)
expr_stmt|;
block|}
comment|/**        *  @brief  Base destructor.        *        *  This does very little apart from providing a virtual base dtor.       */
name|virtual
operator|~
name|basic_ostream
argument_list|()
block|{ }
comment|// [27.6.2.3] prefix/suffix
name|class
name|sentry
expr_stmt|;
name|friend
name|class
name|sentry
decl_stmt|;
comment|// [27.6.2.5] formatted output
comment|// [27.6.2.5.3]  basic_ostream::operator<<
comment|//@{
comment|/**        *  @brief  Interface for manipulators.        *        *  Manuipulators such as @c std::endl and @c std::hex use these        *  functions in constructs like "std::cout<< std::endl".  For more        *  information, see the iomanip header.       */
specifier|inline
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|__ostream_type
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|__ostream_type
operator|&
argument_list|)
operator|)
expr_stmt|;
specifier|inline
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|__ios_type
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|__ios_type
operator|&
argument_list|)
operator|)
expr_stmt|;
specifier|inline
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|ios_base
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|ios_base
operator|&
argument_list|)
operator|)
expr_stmt|;
comment|//@}
comment|// [27.6.2.5.2] arithmetic inserters
comment|/**        *  @name Arithmetic Inserters        *        *  All the @c operator<< functions (aka<em>formatted output        *  functions</em>) have some common behavior.  Each starts by        *  constructing a temporary object of type std::basic_ostream::sentry.        *  This can have several effects, concluding with the setting of a        *  status flag; see the sentry documentation for more.        *        *  If the sentry status is good, the function tries to generate        *  whatever data is appropriate for the type of the argument.        *        *  If an exception is thrown during insertion, ios_base::badbit        *  will be turned on in the stream's error state without causing an        *  ios_base::failure to be thrown.  The original exception will then        *  be rethrown.       */
comment|//@{
comment|/**        *  @brief  Basic arithmetic inserters        *  @param  A variable of builtin type.        *  @return  @c *this if successful        *        *  These functions use the stream's current locale (specifically, the        *  @c num_get facet) to perform numeric formatting.       */
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|long
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|bool
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|short
name|__n
operator|)
block|{
name|ios_base
operator|::
name|fmtflags
name|__fmt
operator|=
name|this
operator|->
name|flags
argument_list|()
operator|&
name|ios_base
operator|::
name|basefield
block|;
if|if
condition|(
name|__fmt
operator|&
name|ios_base
operator|::
name|oct
operator|||
name|__fmt
operator|&
name|ios_base
operator|::
name|hex
condition|)
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|__n
operator|)
operator|)
operator|)
return|;
else|else
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|short
name|__n
operator|)
block|{
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|int
name|__n
operator|)
block|{
name|ios_base
operator|::
name|fmtflags
name|__fmt
operator|=
name|this
operator|->
name|flags
argument_list|()
operator|&
name|ios_base
operator|::
name|basefield
block|;
if|if
condition|(
name|__fmt
operator|&
name|ios_base
operator|::
name|oct
operator|||
name|__fmt
operator|&
name|ios_base
operator|::
name|hex
condition|)
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|__n
operator|)
operator|)
operator|)
return|;
else|else
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|int
name|__n
operator|)
block|{
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
ifdef|#
directive|ifdef
name|_GLIBCXX_USE_LONG_LONG
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|long
name|long
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|long
name|__n
operator|)
expr_stmt|;
endif|#
directive|endif
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|double
name|__f
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|float
name|__f
operator|)
block|{
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__f
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|long
name|double
name|__f
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|void
operator|*
name|__p
operator|)
expr_stmt|;
comment|/**        *  @brief  Extracting from another streambuf.        *  @param  sb  A pointer to a streambuf        *        *  This function behaves like one of the basic arithmetic extractors,        *  in that it also constructs a sentry object and has the same error        *  handling behavior.        *        *  If @a sb is NULL, the stream will set failbit in its error state.        *        *  Characters are extracted from @a sb and inserted into @c *this        *  until one of the following occurs:        *        *  - the input stream reaches end-of-file,        *  - insertion into the output sequence fails (in this case, the        *    character that would have been inserted is not extracted), or        *  - an exception occurs while getting a character from @a sb, which        *    sets failbit in the error state        *        *  If the function inserts no characters, failbit is set.       */
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|__streambuf_type
operator|*
name|__sb
operator|)
expr_stmt|;
comment|//@}
comment|// [27.6.2.6] unformatted output functions
comment|/**        *  @name Unformatted Output Functions        *        *  All the unformatted output functions have some common behavior.        *  Each starts by constructing a temporary object of type        *  std::basic_ostream::sentry.  This has several effects, concluding        *  with the setting of a status flag; see the sentry documentation        *  for more.        *        *  If the sentry status is good, the function tries to generate        *  whatever data is appropriate for the type of the argument.        *        *  If an exception is thrown during insertion, ios_base::badbit        *  will be turned on in the stream's error state.  If badbit is on in        *  the stream's exceptions mask, the exception will be rethrown        *  without completing its actions.       */
comment|//@{
comment|/**        *  @brief  Simple insertion.        *  @param  c  The character to insert.        *  @return  *this        *        *  Tries to insert @a c.        *        *  @note  This function is not overloaded on signed char and        *         unsigned char.       */
name|__ostream_type
modifier|&
name|put
parameter_list|(
name|char_type
name|__c
parameter_list|)
function_decl|;
comment|// Core write functionality, without sentry.
name|void
name|_M_write
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
name|streamsize
name|__put
init|=
name|this
operator|->
name|rdbuf
argument_list|()
operator|->
name|sputn
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|)
decl_stmt|;
if|if
condition|(
name|__put
operator|!=
name|__n
condition|)
name|this
operator|->
name|setstate
argument_list|(
name|ios_base
operator|::
name|badbit
argument_list|)
expr_stmt|;
block|}
comment|/**        *  @brief  Character string insertion.        *  @param  s  The array to insert.        *  @param  n  Maximum number of characters to insert.        *  @return  *this        *        *  Characters are copied from @a s and inserted into the stream until        *  one of the following happens:        *        *  - @a n characters are inserted        *  - inserting into the output sequence fails (in this case, badbit        *    will be set in the stream's error state)        *        *  @note  This function is not overloaded on signed char and        *         unsigned char.       */
name|__ostream_type
modifier|&
name|write
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
comment|//@}
comment|/**        *  @brief  Synchronizing the stream buffer.        *  @return  *this        *        *  If @c rdbuf() is a null pointer, changes nothing.        *        *  Otherwise, calls @c rdbuf()->pubsync(), and if that returns -1,        *  sets badbit.       */
name|__ostream_type
modifier|&
name|flush
parameter_list|()
function_decl|;
comment|// [27.6.2.4] seek members
comment|/**        *  @brief  Getting the current write position.        *  @return  A file position object.        *        *  If @c fail() is not false, returns @c pos_type(-1) to indicate        *  failure.  Otherwise returns @c rdbuf()->pubseekoff(0,cur,out).       */
name|pos_type
name|tellp
parameter_list|()
function_decl|;
comment|/**        *  @brief  Changing the current write position.        *  @param  pos  A file position object.        *  @return  *this        *        *  If @c fail() is not true, calls @c rdbuf()->pubseekpos(pos).  If        *  that function fails, sets failbit.       */
name|__ostream_type
modifier|&
name|seekp
parameter_list|(
name|pos_type
parameter_list|)
function_decl|;
comment|/**        *  @brief  Changing the current write position.        *  @param  off  A file offset object.        *  @param  dir  The direction in which to seek.        *  @return  *this        *        *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).        *  If that function fails, sets failbit.       */
name|__ostream_type
modifier|&
name|seekp
argument_list|(
name|off_type
argument_list|,
name|ios_base
operator|::
name|seekdir
argument_list|)
decl_stmt|;
name|protected
label|:
name|explicit
name|basic_ostream
parameter_list|()
block|{ }
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/**    *  @brief  Performs setup work for output streams.    *    *  Objects of this class are created before all of the standard    *  inserters are run.  It is responsible for "exception-safe prefix and    *  suffix operations."  Additional actions may be added by the    *  implementation, and we list them in    *  http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#5    *  under [27.6] notes.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|::
name|sentry
block|{
comment|// Data Members:
name|bool
name|_M_ok
block|;
name|basic_ostream
operator|<
name|_CharT
block|,
name|_Traits
operator|>
operator|&
name|_M_os
block|;
name|public
operator|:
comment|/**        *  @brief  The constructor performs preparatory work.        *  @param  os  The output stream to guard.        *        *  If the stream state is good (@a os.good() is true), then if the        *  stream is tied to another output stream, @c is.tie()->flush()        *  is called to synchronize the output sequences.        *        *  If the stream state is still good, then the sentry state becomes        *  true ("okay").       */
name|explicit
name|sentry
argument_list|(
name|basic_ostream
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|&
name|__os
argument_list|)
block|;
comment|/**        *  @brief  Possibly flushes the stream.        *        *  If @c ios_base::unitbuf is set in @c os.flags(), and        *  @c std::uncaught_exception() is true, the sentry destructor calls        *  @c flush() on the output stream.       */
operator|~
name|sentry
argument_list|()
block|{
comment|// XXX MT
if|if
condition|(
name|_M_os
operator|.
name|flags
argument_list|()
operator|&
name|ios_base
operator|::
name|unitbuf
operator|&&
operator|!
name|uncaught_exception
argument_list|()
condition|)
block|{
comment|// Can't call flush directly or else will get into recursive lock.
if|if
condition|(
name|_M_os
operator|.
name|rdbuf
argument_list|()
operator|&&
name|_M_os
operator|.
name|rdbuf
argument_list|()
operator|->
name|pubsync
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|_M_os
operator|.
name|setstate
argument_list|(
name|ios_base
operator|::
name|badbit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        *  @brief  Quick status checking.        *  @return  The sentry state.        *        *  For ease of use, sentries may be converted to booleans.  The        *  return value is that of the sentry state (true == okay).       */
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|_M_ok
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|// [27.6.2.5.4] character insertion templates
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|/**    *  @brief  Character inserters    *  @param  out  An output stream.    *  @param  c  A character.    *  @return  out    *    *  Behaves like one of the formatted arithmetic inserters described in    *  std::basic_ostream.  After constructing a sentry object with good    *  status, this function inserts a single character and any required    *  padding (as determined by [22.2.2.2.2]).  @c out.width(0) is then    *  called.    *    *  If @a c is of type @c char and the character type of the stream is not    *  @c char, the character is widened before insertion.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|_CharT
name|__c
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|char
name|__c
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|__out
operator|.
name|widen
argument_list|(
name|__c
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Specialization
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|char
name|__c
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Signed and unsigned
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|signed
name|char
name|__c
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|static_cast
operator|<
name|char
operator|>
operator|(
name|__c
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|unsigned
name|char
name|__c
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|static_cast
operator|<
name|char
operator|>
operator|(
name|__c
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|/**    *  @brief  String inserters    *  @param  out  An output stream.    *  @param  s  A character string.    *  @return  out    *  @pre  @a s must be a non-NULL pointer    *    *  Behaves like one of the formatted arithmetic inserters described in    *  std::basic_ostream.  After constructing a sentry object with good    *  status, this function inserts @c traits::length(s) characters starting    *  at @a s, widened if necessary, followed by any required padding (as    *  determined by [22.2.2.2.2]).  @c out.width(0) is then called.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|_CharT
operator|*
name|__s
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|char
operator|*
name|__s
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Partial specializationss
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|char
operator|*
name|__s
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Signed and unsigned
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|signed
name|char
operator|*
name|__s
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|__s
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|unsigned
name|char
operator|*
name|__s
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|__s
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|// [27.6.2.7] standard basic_ostream manipulators
end_comment

begin_comment
comment|/**    *  @brief  Write a newline and flush the stream.    *    *  This manipulator is often mistakenly used when a simple newline is    *  desired, leading to poor buffering performance.  See    *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#2 for more    *  on this subject.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|endl
argument_list|(
argument|basic_ostream<_CharT
argument_list|,
argument|_Traits>& __os
argument_list|)
block|{
return|return
name|flush
argument_list|(
name|__os
operator|.
name|put
argument_list|(
name|__os
operator|.
name|widen
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  @brief  Write a null character into the output sequence.    *    *  "Null character" is @c CharT() by definition.  For CharT of @c char,    *  this correctly writes the ASCII @c NUL character string terminator.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|ends
argument_list|(
argument|basic_ostream<_CharT
argument_list|,
argument|_Traits>& __os
argument_list|)
block|{
return|return
name|__os
operator|.
name|put
argument_list|(
name|_CharT
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  @brief  Flushes the output stream.    *    *  This manipulator simply calls the stream's @c flush() member function.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|flush
argument_list|(
argument|basic_ostream<_CharT
argument_list|,
argument|_Traits>& __os
argument_list|)
block|{
return|return
name|__os
operator|.
name|flush
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_EXPORT_TEMPLATE
end_ifndef

begin_include
include|#
directive|include
file|<bits/ostream.tcc>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GLIBCXX_OSTREAM */
end_comment

end_unit

