begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Stream buffer classes -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 27.5  Stream buffers
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file streambuf  *  This is a Standard C++ Library header.  You should @c #include this header  *  in your programs, rather than any of the "st[dl]_*.h" implementation files.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CLIBXX_STREAMBUF
end_ifndef

begin_define
define|#
directive|define
name|_CLIBXX_STREAMBUF
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<bits/c++config.h>
end_include

begin_include
include|#
directive|include
file|<iosfwd>
end_include

begin_include
include|#
directive|include
file|<bits/localefwd.h>
end_include

begin_include
include|#
directive|include
file|<bits/ios_base.h>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
comment|/**    *  @if maint    *  Does stuff.    *  @endif   */
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|streamsize
name|__copy_streambufs
argument_list|(
name|basic_streambuf
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|*
name|__sbin
argument_list|,
name|basic_streambuf
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|*
name|__sbout
argument_list|)
expr_stmt|;
comment|/**    *  @brief  The actual work of input and output (interface).    *    *  This is a base class.  Derived stream buffers each control a    *  pair of character sequences:  one for input, and one for output.    *    *  Section [27.5.1] of the standard describes the requirements and    *  behavior of stream buffer classes.  That section (three paragraphs)    *  is reproduced here, for simplicity and accuracy.    *    *  -# Stream buffers can impose various constraints on the sequences    *     they control.  Some constraints are:    *     - The controlled input sequence can be not readable.    *     - The controlled output sequence can be not writable.    *     - The controlled sequences can be associated with the contents of    *       other representations for character sequences, such as external    *       files.    *     - The controlled sequences can support operations @e directly to or    *       from associated sequences.    *     - The controlled sequences can impose limitations on how the    *       program can read characters from a sequence, write characters to    *       a sequence, put characters back into an input sequence, or alter    *       the stream position.    *     .    *  -# Each sequence is characterized by three pointers which, if non-null,    *     all point into the same @c charT array object.  The array object    *     represents, at any moment, a (sub)sequence of characters from the    *     sequence.  Operations performed on a sequence alter the values    *     stored in these pointers, perform reads and writes directly to or    *     from associated sequences, and alter "the stream position" and    *     conversion state as needed to maintain this subsequence relationship.    *     The three pointers are:    *     - the<em>beginning pointer</em>, or lowest element address in the    *       array (called @e xbeg here);    *     - the<em>next pointer</em>, or next element address that is a    *       current candidate for reading or writing (called @e xnext here);    *     - the<em>end pointer</em>, or first element address beyond the    *       end of the array (called @e xend here).    *     .    *  -# The following semantic constraints shall always apply for any set    *     of three pointers for a sequence, using the pointer names given    *     immediately above:    *     - If @e xnext is not a null pointer, then @e xbeg and @e xend shall    *       also be non-null pointers into the same @c charT array, as    *       described above; otherwise, @e xbeg and @e xend shall also be null.    *     - If @e xnext is not a null pointer and @e xnext< @e xend for an    *       output sequence, then a<em>write position</em> is available.    *       In this case, @e *xnext shall be assignable as the next element    *       to write (to put, or to store a character value, into the sequence).    *     - If @e xnext is not a null pointer and @e xbeg< @e xnext for an    *       input sequence, then a<em>putback position</em> is available.    *       In this case, @e xnext[-1] shall have a defined value and is the    *       next (preceding) element to store a character that is put back    *       into the input sequence.    *     - If @e xnext is not a null pointer and @e xnext< @e xend for an    *       input sequence, then a<em>read position</em> is available.    *       In this case, @e *xnext shall have a defined value and is the    *       next element to read (to get, or to obtain a character value,    *       from the sequence).   */
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_streambuf
block|{
name|public
operator|:
comment|//@{
comment|/**        *  These are standard types.  They permit a standardized way of        *  referring to names of (or names dependant on) the template        *  parameters, which are specific to the implementation.       */
typedef|typedef
name|_CharT
name|char_type
typedef|;
typedef|typedef
name|_Traits
name|traits_type
typedef|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|int_type
name|int_type
expr_stmt|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|pos_type
name|pos_type
expr_stmt|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|off_type
name|off_type
expr_stmt|;
comment|//@}
comment|//@{
comment|/**        *  @if maint        *  This is a non-standard type.        *  @endif       */
typedef|typedef
name|basic_streambuf
operator|<
name|char_type
operator|,
name|traits_type
operator|>
name|__streambuf_type
expr_stmt|;
comment|//@}
name|friend
name|class
name|basic_ios
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|basic_istream
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|basic_ostream
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|istreambuf_iterator
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|ostreambuf_iterator
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|streamsize
name|__copy_streambufs
operator|<
operator|>
operator|(
name|__streambuf_type
operator|*
name|__sbin
operator|,
name|__streambuf_type
operator|*
name|__sbout
operator|)
expr_stmt|;
name|protected
label|:
comment|//@{
comment|/**        *  @if maint        *  This is based on _IO_FILE, just reordered to be more consistent,        *  and is intended to be the most minimal abstraction for an        *  internal buffer.        *  -  get == input == read        *  -  put == output == write        *  @endif       */
name|char_type
modifier|*
name|_M_in_beg
decl_stmt|;
comment|// Start of get area.
name|char_type
modifier|*
name|_M_in_cur
decl_stmt|;
comment|// Current read area.
name|char_type
modifier|*
name|_M_in_end
decl_stmt|;
comment|// End of get area.
name|char_type
modifier|*
name|_M_out_beg
decl_stmt|;
comment|// Start of put area.
name|char_type
modifier|*
name|_M_out_cur
decl_stmt|;
comment|// Current put area.
name|char_type
modifier|*
name|_M_out_end
decl_stmt|;
comment|// End of put area.
comment|/**        *  @if maint        *  Current locale setting.        *  @endif       */
name|locale
name|_M_buf_locale
decl_stmt|;
name|public
label|:
comment|/// Destructor deallocates no buffer space.
name|virtual
operator|~
name|basic_streambuf
argument_list|()
block|{ }
comment|// [27.5.2.2.1] locales
comment|/**        *  @brief  Entry point for imbue().        *  @param  loc  The new locale.        *  @return  The previous locale.        *        *  Calls the derived imbue(loc).       */
name|locale
name|pubimbue
argument_list|(
argument|const locale&__loc
argument_list|)
block|{
name|locale
name|__tmp
argument_list|(
name|this
operator|->
name|getloc
argument_list|()
argument_list|)
block|;
name|this
operator|->
name|imbue
argument_list|(
name|__loc
argument_list|)
block|;
name|_M_buf_locale
operator|=
name|__loc
block|;
return|return
name|__tmp
return|;
block|}
comment|/**        *  @brief  Locale access.        *  @return  The current locale in effect.        *        *  If pubimbue(loc) has been called, then the most recent @c loc        *  is returned.  Otherwise the global locale in effect at the time        *  of construction is returned.       */
name|locale
name|getloc
argument_list|()
specifier|const
block|{
return|return
name|_M_buf_locale
return|;
block|}
comment|// [27.5.2.2.2] buffer management and positioning
comment|//@{
comment|/**        *  @brief  Entry points for derived buffer functions.        *        *  The public versions of @c pubfoo dispatch to the protected        *  derived @c foo member functions, passing the arguments (if any)        *  and returning the result unchanged.       */
name|__streambuf_type
modifier|*
name|pubsetbuf
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|setbuf
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|)
return|;
block|}
name|pos_type
name|pubseekoff
argument_list|(
name|off_type
name|__off
argument_list|,
name|ios_base
operator|::
name|seekdir
name|__way
argument_list|,
name|ios_base
operator|::
name|openmode
name|__mode
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|this
operator|->
name|seekoff
argument_list|(
name|__off
argument_list|,
name|__way
argument_list|,
name|__mode
argument_list|)
return|;
block|}
name|pos_type
name|pubseekpos
argument_list|(
name|pos_type
name|__sp
argument_list|,
name|ios_base
operator|::
name|openmode
name|__mode
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|this
operator|->
name|seekpos
argument_list|(
name|__sp
argument_list|,
name|__mode
argument_list|)
return|;
block|}
name|int
name|pubsync
parameter_list|()
block|{
return|return
name|this
operator|->
name|sync
argument_list|()
return|;
block|}
comment|//@}
comment|// [27.5.2.2.3] get area
comment|/**        *  @brief  Looking ahead into the stream.        *  @return  The number of characters available.        *        *  If a read position is available, returns the number of characters        *  available for reading before the buffer must be refilled.        *  Otherwise returns the derived @c showmanyc().       */
name|streamsize
name|in_avail
parameter_list|()
block|{
specifier|const
name|streamsize
name|__ret
init|=
name|this
operator|->
name|egptr
argument_list|()
operator|-
name|this
operator|->
name|gptr
argument_list|()
decl_stmt|;
return|return
name|__ret
condition|?
name|__ret
else|:
name|this
operator|->
name|showmanyc
argument_list|()
return|;
block|}
comment|/**        *  @brief  Getting the next character.        *  @return  The next character, or eof.        *        *  Calls @c sbumpc(), and if that function returns        *  @c traits::eof(), so does this function.  Otherwise, @c sgetc().       */
name|int_type
name|snextc
parameter_list|()
block|{
name|int_type
name|__ret
init|=
name|traits_type
operator|::
name|eof
argument_list|()
decl_stmt|;
if|if
condition|(
name|__builtin_expect
argument_list|(
operator|!
name|traits_type
operator|::
name|eq_int_type
argument_list|(
name|this
operator|->
name|sbumpc
argument_list|()
argument_list|,
name|__ret
argument_list|)
argument_list|,
name|true
argument_list|)
condition|)
name|__ret
operator|=
name|this
operator|->
name|sgetc
argument_list|()
expr_stmt|;
return|return
name|__ret
return|;
block|}
comment|/**        *  @brief  Getting the next character.        *  @return  The next character, or eof.        *        *  If the input read position is available, returns that character        *  and increments the read pointer, otherwise calls and returns        *  @c uflow().       */
name|int_type
name|sbumpc
parameter_list|()
block|{
name|int_type
name|__ret
decl_stmt|;
if|if
condition|(
name|__builtin_expect
argument_list|(
name|this
operator|->
name|gptr
argument_list|()
operator|<
name|this
operator|->
name|egptr
argument_list|()
argument_list|,
name|true
argument_list|)
condition|)
block|{
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
operator|*
name|this
operator|->
name|gptr
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|->
name|gbump
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
name|__ret
operator|=
name|this
operator|->
name|uflow
argument_list|()
expr_stmt|;
return|return
name|__ret
return|;
block|}
comment|/**        *  @brief  Getting the next character.        *  @return  The next character, or eof.        *        *  If the input read position is available, returns that character,        *  otherwise calls and returns @c underflow().  Does not move the         *  read position after fetching the character.       */
name|int_type
name|sgetc
parameter_list|()
block|{
name|int_type
name|__ret
decl_stmt|;
if|if
condition|(
name|__builtin_expect
argument_list|(
name|this
operator|->
name|gptr
argument_list|()
operator|<
name|this
operator|->
name|egptr
argument_list|()
argument_list|,
name|true
argument_list|)
condition|)
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
operator|*
name|this
operator|->
name|gptr
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|__ret
operator|=
name|this
operator|->
name|underflow
argument_list|()
expr_stmt|;
return|return
name|__ret
return|;
block|}
comment|/**        *  @brief  Entry point for xsgetn.        *  @param  s  A buffer area.        *  @param  n  A count.        *        *  Returns xsgetn(s,n).  The effect is to fill @a s[0] through        *  @a s[n-1] with characters from the input sequence, if possible.       */
name|streamsize
name|sgetn
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|xsgetn
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|)
return|;
block|}
comment|// [27.5.2.2.4] putback
comment|/**        *  @brief  Pushing characters back into the input stream.        *  @param  c  The character to push back.        *  @return  The previous character, if possible.        *        *  Similar to sungetc(), but @a c is pushed onto the stream instead        *  of "the previous character".  If successful, the next character        *  fetched from the input stream will be @a c.       */
name|int_type
name|sputbackc
parameter_list|(
name|char_type
name|__c
parameter_list|)
block|{
name|int_type
name|__ret
decl_stmt|;
specifier|const
name|bool
name|__testpos
init|=
name|this
operator|->
name|eback
argument_list|()
operator|<
name|this
operator|->
name|gptr
argument_list|()
decl_stmt|;
if|if
condition|(
name|__builtin_expect
argument_list|(
operator|!
name|__testpos
operator|||
operator|!
name|traits_type
operator|::
name|eq
argument_list|(
name|__c
argument_list|,
name|this
operator|->
name|gptr
argument_list|()
index|[
operator|-
literal|1
index|]
argument_list|)
argument_list|,
name|false
argument_list|)
condition|)
name|__ret
operator|=
name|this
operator|->
name|pbackfail
argument_list|(
name|traits_type
operator|::
name|to_int_type
argument_list|(
name|__c
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|this
operator|->
name|gbump
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
operator|*
name|this
operator|->
name|gptr
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|__ret
return|;
block|}
comment|/**        *  @brief  Moving backwards in the input stream.        *  @return  The previous character, if possible.        *        *  If a putback position is available, this function decrements the        *  input pointer and returns that character.  Otherwise, calls and        *  returns pbackfail().  The effect is to "unget" the last character        *  "gotten".       */
name|int_type
name|sungetc
parameter_list|()
block|{
name|int_type
name|__ret
decl_stmt|;
if|if
condition|(
name|__builtin_expect
argument_list|(
name|this
operator|->
name|eback
argument_list|()
operator|<
name|this
operator|->
name|gptr
argument_list|()
argument_list|,
name|true
argument_list|)
condition|)
block|{
name|this
operator|->
name|gbump
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
operator|*
name|this
operator|->
name|gptr
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|__ret
operator|=
name|this
operator|->
name|pbackfail
argument_list|()
expr_stmt|;
return|return
name|__ret
return|;
block|}
comment|// [27.5.2.2.5] put area
comment|/**        *  @brief  Entry point for all single-character output functions.        *  @param  c  A character to output.        *  @return  @a c, if possible.        *        *  One of two public output functions.        *        *  If a write position is available for the output sequence (i.e.,        *  the buffer is not full), stores @a c in that position, increments        *  the position, and returns @c traits::to_int_type(c).  If a write        *  position is not available, returns @c overflow(c).       */
name|int_type
name|sputc
parameter_list|(
name|char_type
name|__c
parameter_list|)
block|{
name|int_type
name|__ret
decl_stmt|;
if|if
condition|(
name|__builtin_expect
argument_list|(
name|this
operator|->
name|pptr
argument_list|()
operator|<
name|this
operator|->
name|epptr
argument_list|()
argument_list|,
name|true
argument_list|)
condition|)
block|{
operator|*
name|this
operator|->
name|pptr
argument_list|()
operator|=
name|__c
expr_stmt|;
name|this
operator|->
name|pbump
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
name|__c
argument_list|)
expr_stmt|;
block|}
else|else
name|__ret
operator|=
name|this
operator|->
name|overflow
argument_list|(
name|traits_type
operator|::
name|to_int_type
argument_list|(
name|__c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|__ret
return|;
block|}
comment|/**        *  @brief  Entry point for all single-character output functions.        *  @param  s  A buffer read area.        *  @param  n  A count.        *        *  One of two public output functions.        *        *        *  Returns xsputn(s,n).  The effect is to write @a s[0] through        *  @a s[n-1] to the output sequence, if possible.       */
name|streamsize
name|sputn
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|xsputn
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|)
return|;
block|}
name|protected
label|:
comment|/**        *  @brief  Base constructor.        *        *  Only called from derived constructors, and sets up all the        *  buffer data to zero, including the pointers described in the        *  basic_streambuf class description.  Note that, as a result,        *  - the class starts with no read nor write positions available,        *  - this is not an error       */
name|basic_streambuf
argument_list|()
operator|:
name|_M_in_beg
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_in_cur
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_in_end
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_out_beg
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_out_cur
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_out_end
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_buf_locale
argument_list|(
argument|locale()
argument_list|)
block|{ }
comment|// [27.5.2.3.1] get area access
comment|//@{
comment|/**        *  @brief  Access to the get area.        *        *  These functions are only available to other protected functions,        *  including derived classes.        *        *  - eback() returns the beginning pointer for the input sequence        *  - gptr() returns the next pointer for the input sequence        *  - egptr() returns the end pointer for the input sequence       */
name|char_type
operator|*
name|eback
argument_list|()
specifier|const
block|{
return|return
name|_M_in_beg
return|;
block|}
name|char_type
operator|*
name|gptr
argument_list|()
specifier|const
block|{
return|return
name|_M_in_cur
return|;
block|}
name|char_type
operator|*
name|egptr
argument_list|()
specifier|const
block|{
return|return
name|_M_in_end
return|;
block|}
comment|//@}
comment|/**        *  @brief  Moving the read position.        *  @param  n  The delta by which to move.        *        *  This just advances the read position without returning any data.       */
name|void
name|gbump
parameter_list|(
name|int
name|__n
parameter_list|)
block|{
name|_M_in_cur
operator|+=
name|__n
expr_stmt|;
block|}
comment|/**        *  @brief  Setting the three read area pointers.        *  @param  gbeg  A pointer.        *  @param  gnext  A pointer.        *  @param  gend  A pointer.        *  @post  @a gbeg == @c eback(), @a gnext == @c gptr(), and        *         @a gend == @c egptr()       */
name|void
name|setg
parameter_list|(
name|char_type
modifier|*
name|__gbeg
parameter_list|,
name|char_type
modifier|*
name|__gnext
parameter_list|,
name|char_type
modifier|*
name|__gend
parameter_list|)
block|{
name|_M_in_beg
operator|=
name|__gbeg
expr_stmt|;
name|_M_in_cur
operator|=
name|__gnext
expr_stmt|;
name|_M_in_end
operator|=
name|__gend
expr_stmt|;
block|}
comment|// [27.5.2.3.2] put area access
comment|//@{
comment|/**        *  @brief  Access to the put area.        *        *  These functions are only available to other protected functions,        *  including derived classes.        *        *  - pbase() returns the beginning pointer for the output sequence        *  - pptr() returns the next pointer for the output sequence        *  - epptr() returns the end pointer for the output sequence       */
name|char_type
operator|*
name|pbase
argument_list|()
specifier|const
block|{
return|return
name|_M_out_beg
return|;
block|}
name|char_type
operator|*
name|pptr
argument_list|()
specifier|const
block|{
return|return
name|_M_out_cur
return|;
block|}
name|char_type
operator|*
name|epptr
argument_list|()
specifier|const
block|{
return|return
name|_M_out_end
return|;
block|}
comment|//@}
comment|/**        *  @brief  Moving the write position.        *  @param  n  The delta by which to move.        *        *  This just advances the write position without returning any data.       */
name|void
name|pbump
parameter_list|(
name|int
name|__n
parameter_list|)
block|{
name|_M_out_cur
operator|+=
name|__n
expr_stmt|;
block|}
comment|/**        *  @brief  Setting the three write area pointers.        *  @param  pbeg  A pointer.        *  @param  pend  A pointer.        *  @post  @a pbeg == @c pbase(), @a pbeg == @c pptr(), and        *         @a pend == @c epptr()       */
name|void
name|setp
parameter_list|(
name|char_type
modifier|*
name|__pbeg
parameter_list|,
name|char_type
modifier|*
name|__pend
parameter_list|)
block|{
name|_M_out_beg
operator|=
name|_M_out_cur
operator|=
name|__pbeg
expr_stmt|;
name|_M_out_end
operator|=
name|__pend
expr_stmt|;
block|}
comment|// [27.5.2.4] virtual functions
comment|// [27.5.2.4.1] locales
comment|/**        *  @brief  Changes translations.        *  @param  loc  A new locale.        *        *  Translations done during I/O which depend on the current locale        *  are changed by this call.  The standard adds, "Between invocations        *  of this function a class derived from streambuf can safely cache        *  results of calls to locale functions and to members of facets        *  so obtained."        *        *  @note  Base class version does nothing.       */
name|virtual
name|void
name|imbue
parameter_list|(
specifier|const
name|locale
modifier|&
parameter_list|)
block|{ }
comment|// [27.5.2.4.2] buffer management and positioning
comment|/**        *  @brief  Maniuplates the buffer.        *        *  Each derived class provides its own appropriate behavior.  See        *  the next-to-last paragraph of         *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#2 for        *  more on this function.        *        *  @note  Base class version does nothing, returns @c this.       */
name|virtual
name|basic_streambuf
operator|<
name|char_type
operator|,
name|_Traits
operator|>
operator|*
name|setbuf
argument_list|(
argument|char_type*
argument_list|,
argument|streamsize
argument_list|)
block|{
return|return
name|this
return|;
block|}
comment|/**        *  @brief  Alters the stream positions.        *        *  Each derived class provides its own appropriate behavior.        *  @note  Base class version does nothing, returns a @c pos_type        *         that represents an invalid stream position.       */
name|virtual
name|pos_type
name|seekoff
argument_list|(
name|off_type
argument_list|,
name|ios_base
operator|::
name|seekdir
argument_list|,
name|ios_base
operator|::
name|openmode
comment|/*__mode*/
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|pos_type
argument_list|(
name|off_type
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
comment|/**        *  @brief  Alters the stream positions.        *        *  Each derived class provides its own appropriate behavior.        *  @note  Base class version does nothing, returns a @c pos_type        *         that represents an invalid stream position.       */
name|virtual
name|pos_type
name|seekpos
argument_list|(
name|pos_type
argument_list|,
name|ios_base
operator|::
name|openmode
comment|/*__mode*/
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|pos_type
argument_list|(
name|off_type
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
comment|/**        *  @brief  Synchronizes the buffer arrays with the controlled sequences.        *  @return  -1 on failure.        *        *  Each derived class provides its own appropriate behavior,        *  including the definition of "failure".        *  @note  Base class version does nothing, returns zero.       */
name|virtual
name|int
name|sync
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|// [27.5.2.4.3] get area
comment|/**        *  @brief  Investigating the data available.        *  @return  An estimate of the number of characters available in the        *           input sequence, or -1.        *        *  "If it returns a positive value, then successive calls to        *  @c underflow() will not return @c traits::eof() until at least that        *  number of characters have been supplied.  If @c showmanyc()        *  returns -1, then calls to @c underflow() or @c uflow() will fail."        *  [27.5.2.4.3]/1        *        *  @note  Base class version does nothing, returns zero.        *  @note  The standard adds that "the intention is not only that the        *         calls [to underflow or uflow] will not return @c eof() but        *         that they will return "immediately".        *  @note  The standard adds that "the morphemes of @c showmanyc are        *         "es-how-many-see", not "show-manic".       */
name|virtual
name|streamsize
name|showmanyc
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**        *  @brief  Multiple character extraction.        *  @param  s  A buffer area.        *  @param  n  Maximum number of characters to assign.        *  @return  The number of characters assigned.        *        *  Fills @a s[0] through @a s[n-1] with characters from the input        *  sequence, as if by @c sbumpc().  Stops when either @a n characters        *  have been copied, or when @c traits::eof() would be copied.        *        *  It is expected that derived classes provide a more efficient        *  implementation by overriding this definition.       */
name|virtual
name|streamsize
name|xsgetn
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
comment|/**        *  @brief  Fetches more data from the controlled sequence.        *  @return  The first character from the<em>pending sequence</em>.        *        *  Informally, this function is called when the input buffer is        *  exhausted (or does not exist, as buffering need not actually be        *  done).  If a buffer exists, it is "refilled".  In either case, the        *  next available character is returned, or @c traits::eof() to        *  indicate a null pending sequence.        *        *  For a formal definiton of the pending sequence, see a good text        *  such as Langer& Kreft, or [27.5.2.4.3]/7-14.        *        *  A functioning input streambuf can be created by overriding only        *  this function (no buffer area will be used).  For an example, see        *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#6        *        *  @note  Base class version does nothing, returns eof().       */
name|virtual
name|int_type
name|underflow
parameter_list|()
block|{
return|return
name|traits_type
operator|::
name|eof
argument_list|()
return|;
block|}
comment|/**        *  @brief  Fetches more data from the controlled sequence.        *  @return  The first character from the<em>pending sequence</em>.        *        *  Informally, this function does the same thing as @c underflow(),        *  and in fact is required to call that function.  It also returns        *  the new character, like @c underflow() does.  However, this        *  function also moves the read position forward by one.       */
name|virtual
name|int_type
name|uflow
parameter_list|()
block|{
name|int_type
name|__ret
init|=
name|traits_type
operator|::
name|eof
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|__testeof
init|=
name|traits_type
operator|::
name|eq_int_type
argument_list|(
name|this
operator|->
name|underflow
argument_list|()
argument_list|,
name|__ret
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|__testeof
condition|)
block|{
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
operator|*
name|this
operator|->
name|gptr
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|->
name|gbump
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|__ret
return|;
block|}
comment|// [27.5.2.4.4] putback
comment|/**        *  @brief  Tries to back up the input sequence.        *  @param  c  The character to be inserted back into the sequence.        *  @return  eof() on failure, "some other value" on success        *  @post  The constraints of @c gptr(), @c eback(), and @c pptr()        *         are the same as for @c underflow().        *        *  @note  Base class version does nothing, returns eof().       */
name|virtual
name|int_type
name|pbackfail
parameter_list|(
name|int_type
comment|/* __c */
init|=
name|traits_type
operator|::
name|eof
argument_list|()
parameter_list|)
block|{
return|return
name|traits_type
operator|::
name|eof
argument_list|()
return|;
block|}
comment|// Put area:
comment|/**        *  @brief  Multiple character insertion.        *  @param  s  A buffer area.        *  @param  n  Maximum number of characters to write.        *  @return  The number of characters written.        *        *  Writes @a s[0] through @a s[n-1] to the output sequence, as if        *  by @c sputc().  Stops when either @a n characters have been        *  copied, or when @c sputc() would return @c traits::eof().        *        *  It is expected that derived classes provide a more efficient        *  implementation by overriding this definition.       */
name|virtual
name|streamsize
name|xsputn
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
comment|/**        *  @brief  Consumes data from the buffer; writes to the        *          controlled sequence.        *  @param  c  An additional character to consume.        *  @return  eof() to indicate failure, something else (usually        *           @a c, or not_eof())        *        *  Informally, this function is called when the output buffer is full        *  (or does not exist, as buffering need not actually be done).  If a        *  buffer exists, it is "consumed", with "some effect" on the        *  controlled sequence.  (Typically, the buffer is written out to the        *  sequence verbatim.)  In either case, the character @a c is also        *  written out, if @a c is not @c eof().        *        *  For a formal definiton of this function, see a good text        *  such as Langer& Kreft, or [27.5.2.4.5]/3-7.        *        *  A functioning output streambuf can be created by overriding only        *  this function (no buffer area will be used).        *        *  @note  Base class version does nothing, returns eof().       */
name|virtual
name|int_type
name|overflow
parameter_list|(
name|int_type
comment|/* __c */
init|=
name|traits_type
operator|::
name|eof
argument_list|()
parameter_list|)
block|{
return|return
name|traits_type
operator|::
name|eof
argument_list|()
return|;
block|}
ifdef|#
directive|ifdef
name|_GLIBCXX_DEPRECATED
comment|// Annex D.6
name|public
label|:
comment|/**        *  @brief  Tosses a character.        *        *  Advances the read pointer, ignoring the character that would have        *  been read.        *        *  See http://gcc.gnu.org/ml/libstdc++/2002-05/msg00168.html        *        *  @note  This function has been deprecated by the standard.  You        *         must define @c _GLIBCXX_DEPRECATED to make this visible; see        *         c++config.h.       */
name|void
name|stossc
parameter_list|()
block|{
if|if
condition|(
name|this
operator|->
name|gptr
argument_list|()
operator|<
name|this
operator|->
name|egptr
argument_list|()
condition|)
name|this
operator|->
name|gbump
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|this
operator|->
name|uflow
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|private
label|:
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
comment|// Side effect of DR 50.
name|basic_streambuf
argument_list|(
specifier|const
name|__streambuf_type
operator|&
name|__sb
argument_list|)
operator|:
name|_M_in_beg
argument_list|(
name|__sb
operator|.
name|_M_in_beg
argument_list|)
operator|,
name|_M_in_cur
argument_list|(
name|__sb
operator|.
name|_M_in_cur
argument_list|)
operator|,
name|_M_in_end
argument_list|(
name|__sb
operator|.
name|_M_in_end
argument_list|)
operator|,
name|_M_out_beg
argument_list|(
name|__sb
operator|.
name|_M_out_beg
argument_list|)
operator|,
name|_M_out_cur
argument_list|(
name|__sb
operator|.
name|_M_out_cur
argument_list|)
operator|,
name|_M_out_end
argument_list|(
name|__sb
operator|.
name|_M_out_cur
argument_list|)
operator|,
name|_M_buf_locale
argument_list|(
argument|__sb._M_buf_locale
argument_list|)
block|{ }
name|__streambuf_type
operator|&
name|operator
operator|=
operator|(
specifier|const
name|__streambuf_type
operator|&
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_EXPORT_TEMPLATE
end_ifndef

begin_include
include|#
directive|include
file|<bits/streambuf.tcc>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GLIBCXX_STREAMBUF */
end_comment

end_unit

