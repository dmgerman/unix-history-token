begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Iostreams wrapper for stdio FILE* -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2003, 2004 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file ext/stdiostream.h  *  This file is a GNU extension to the Standard C++ Library.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_STDIO_SYNC_FILEBUF_H
end_ifndef

begin_define
define|#
directive|define
name|_STDIO_SYNC_FILEBUF_H
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<streambuf>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<cstdio>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCXX_USE_WCHAR_T
end_ifdef

begin_include
include|#
directive|include
file|<cwchar>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|__gnu_cxx
block|{
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|=
name|std
operator|::
name|char_traits
operator|<
name|_CharT
operator|>
expr|>
name|class
name|stdio_sync_filebuf
operator|:
name|public
name|std
operator|::
name|basic_streambuf
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
block|{
name|public
operator|:
comment|// Types:
typedef|typedef
name|_CharT
name|char_type
typedef|;
typedef|typedef
name|_Traits
name|traits_type
typedef|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|int_type
name|int_type
expr_stmt|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|pos_type
name|pos_type
expr_stmt|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|off_type
name|off_type
expr_stmt|;
name|private
label|:
comment|// Underlying stdio FILE
name|std
operator|::
name|__c_file
operator|*
specifier|const
name|_M_file
expr_stmt|;
comment|// Last character gotten. This is used when pbackfail is
comment|// called from basic_streambuf::sungetc()
name|int_type
name|_M_unget_buf
decl_stmt|;
name|public
label|:
name|explicit
name|stdio_sync_filebuf
argument_list|(
name|std
operator|::
name|__c_file
operator|*
name|__f
argument_list|)
range|:
name|_M_file
argument_list|(
name|__f
argument_list|)
decl_stmt|,
name|_M_unget_buf
argument_list|(
name|traits_type
operator|::
name|eof
argument_list|()
argument_list|)
block|{ }
comment|/**        *  @return  The underlying FILE*.        *        *  This function can be used to access the underlying "C" file pointer.        *  Note that there is no way for the library to track what you do        *  with the file, so be careful.        */
name|std
operator|::
name|__c_file
operator|*
specifier|const
name|file
argument_list|()
block|{
return|return
name|this
operator|->
name|_M_file
return|;
block|}
name|protected
label|:
name|int_type
name|syncgetc
parameter_list|()
function_decl|;
name|int_type
name|syncungetc
parameter_list|(
name|int_type
name|__c
parameter_list|)
function_decl|;
name|int_type
name|syncputc
parameter_list|(
name|int_type
name|__c
parameter_list|)
function_decl|;
name|virtual
name|int_type
name|underflow
parameter_list|()
block|{
name|int_type
name|__c
init|=
name|this
operator|->
name|syncgetc
argument_list|()
decl_stmt|;
return|return
name|this
operator|->
name|syncungetc
argument_list|(
name|__c
argument_list|)
return|;
block|}
name|virtual
name|int_type
name|uflow
parameter_list|()
block|{
comment|// Store the gotten character in case we need to unget it.
name|_M_unget_buf
operator|=
name|this
operator|->
name|syncgetc
argument_list|()
expr_stmt|;
return|return
name|_M_unget_buf
return|;
block|}
name|virtual
name|int_type
name|pbackfail
parameter_list|(
name|int_type
name|__c
init|=
name|traits_type
operator|::
name|eof
argument_list|()
parameter_list|)
block|{
name|int_type
name|__ret
decl_stmt|;
specifier|const
name|int_type
name|__eof
init|=
name|traits_type
operator|::
name|eof
argument_list|()
decl_stmt|;
comment|// Check if the unget or putback was requested
if|if
condition|(
name|traits_type
operator|::
name|eq_int_type
argument_list|(
name|__c
argument_list|,
name|__eof
argument_list|)
condition|)
comment|// unget
block|{
if|if
condition|(
operator|!
name|traits_type
operator|::
name|eq_int_type
argument_list|(
name|_M_unget_buf
argument_list|,
name|__eof
argument_list|)
condition|)
name|__ret
operator|=
name|this
operator|->
name|syncungetc
argument_list|(
name|_M_unget_buf
argument_list|)
expr_stmt|;
else|else
comment|// buffer invalid, fail.
name|__ret
operator|=
name|__eof
expr_stmt|;
block|}
else|else
comment|// putback
name|__ret
operator|=
name|this
operator|->
name|syncungetc
argument_list|(
name|__c
argument_list|)
expr_stmt|;
comment|// The buffered character is no longer valid, discard it.
name|_M_unget_buf
operator|=
name|__eof
expr_stmt|;
return|return
name|__ret
return|;
block|}
name|virtual
name|std
operator|::
name|streamsize
name|xsgetn
argument_list|(
argument|char_type* __s
argument_list|,
argument|std::streamsize __n
argument_list|)
expr_stmt|;
name|virtual
name|int_type
name|overflow
parameter_list|(
name|int_type
name|__c
init|=
name|traits_type
operator|::
name|eof
argument_list|()
parameter_list|)
block|{
name|int_type
name|__ret
decl_stmt|;
if|if
condition|(
name|traits_type
operator|::
name|eq_int_type
argument_list|(
name|__c
argument_list|,
name|traits_type
operator|::
name|eof
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|std
operator|::
name|fflush
argument_list|(
name|_M_file
argument_list|)
condition|)
name|__ret
operator|=
name|traits_type
operator|::
name|eof
argument_list|()
expr_stmt|;
else|else
name|__ret
operator|=
name|traits_type
operator|::
name|not_eof
argument_list|(
name|__c
argument_list|)
expr_stmt|;
block|}
else|else
name|__ret
operator|=
name|this
operator|->
name|syncputc
argument_list|(
name|__c
argument_list|)
expr_stmt|;
return|return
name|__ret
return|;
block|}
name|virtual
name|std
operator|::
name|streamsize
name|xsputn
argument_list|(
argument|const char_type* __s
argument_list|,
argument|std::streamsize __n
argument_list|)
expr_stmt|;
name|virtual
name|int
name|sync
parameter_list|()
block|{
return|return
name|std
operator|::
name|fflush
argument_list|(
name|_M_file
argument_list|)
return|;
block|}
name|virtual
name|std
operator|::
name|streampos
name|seekoff
argument_list|(
argument|std::streamoff __off
argument_list|,
argument|std::ios_base::seekdir __dir
argument_list|,
argument|std::ios_base::openmode = std::ios_base::in | std::ios_base::out
argument_list|)
block|{
name|std
operator|::
name|streampos
name|__ret
argument_list|(
name|std
operator|::
name|streamoff
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
block|;
name|int
name|__whence
block|;
if|if
condition|(
name|__dir
operator|==
name|std
operator|::
name|ios_base
operator|::
name|beg
condition|)
name|__whence
operator|=
name|SEEK_SET
expr_stmt|;
elseif|else
if|if
condition|(
name|__dir
operator|==
name|std
operator|::
name|ios_base
operator|::
name|cur
condition|)
name|__whence
operator|=
name|SEEK_CUR
expr_stmt|;
else|else
name|__whence
operator|=
name|SEEK_END
expr_stmt|;
ifdef|#
directive|ifdef
name|_GLIBCXX_USE_LFS
if|if
condition|(
operator|!
name|fseeko64
argument_list|(
name|_M_file
argument_list|,
name|__off
argument_list|,
name|__whence
argument_list|)
condition|)
name|__ret
operator|=
name|std
operator|::
name|streampos
argument_list|(
name|ftello64
argument_list|(
name|_M_file
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
operator|!
name|fseek
argument_list|(
name|_M_file
argument_list|,
name|__off
argument_list|,
name|__whence
argument_list|)
condition|)
name|__ret
operator|=
name|std
operator|::
name|streampos
argument_list|(
name|std
operator|::
name|ftell
argument_list|(
name|_M_file
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|__ret
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|virtual
name|std
operator|::
name|streampos
name|seekpos
argument_list|(
argument|std::streampos __pos
argument_list|,
argument|std::ios_base::openmode __mode = 	      std::ios_base::in | std::ios_base::out
argument_list|)
block|{
return|return
name|seekoff
argument_list|(
name|std
operator|::
name|streamoff
argument_list|(
name|__pos
argument_list|)
argument_list|,
name|std
operator|::
name|ios_base
operator|::
name|beg
argument_list|,
name|__mode
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
specifier|inline
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|int_type
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|syncgetc
argument_list|()
block|{
return|return
name|std
operator|::
name|getc
argument_list|(
name|_M_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|int_type
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|syncungetc
argument_list|(
argument|int_type __c
argument_list|)
block|{
return|return
name|std
operator|::
name|ungetc
argument_list|(
name|__c
argument_list|,
name|_M_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|int_type
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|syncputc
argument_list|(
argument|int_type __c
argument_list|)
block|{
return|return
name|std
operator|::
name|putc
argument_list|(
name|__c
argument_list|,
name|_M_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|std
operator|::
name|streamsize
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|xsgetn
argument_list|(
argument|char* __s
argument_list|,
argument|std::streamsize __n
argument_list|)
block|{
name|std
operator|::
name|streamsize
name|__ret
operator|=
name|std
operator|::
name|fread
argument_list|(
name|__s
argument_list|,
literal|1
argument_list|,
name|__n
argument_list|,
name|_M_file
argument_list|)
block|;
if|if
condition|(
name|__ret
operator|>
literal|0
condition|)
name|_M_unget_buf
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
name|__s
index|[
name|__ret
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
else|else
name|_M_unget_buf
operator|=
name|traits_type
operator|::
name|eof
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__ret
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
operator|>
specifier|inline
name|std
operator|::
name|streamsize
name|stdio_sync_filebuf
operator|<
name|char
operator|>
operator|::
name|xsputn
argument_list|(
argument|const char* __s
argument_list|,
argument|std::streamsize __n
argument_list|)
block|{
return|return
name|std
operator|::
name|fwrite
argument_list|(
name|__s
argument_list|,
literal|1
argument_list|,
name|__n
argument_list|,
name|_M_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCXX_USE_WCHAR_T
end_ifdef

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|int_type
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|syncgetc
argument_list|()
block|{
return|return
name|std
operator|::
name|getwc
argument_list|(
name|_M_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|int_type
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|syncungetc
argument_list|(
argument|int_type __c
argument_list|)
block|{
return|return
name|std
operator|::
name|ungetwc
argument_list|(
name|__c
argument_list|,
name|_M_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|int_type
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|syncputc
argument_list|(
argument|int_type __c
argument_list|)
block|{
return|return
name|std
operator|::
name|putwc
argument_list|(
name|__c
argument_list|,
name|_M_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|std
operator|::
name|streamsize
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|xsgetn
argument_list|(
argument|wchar_t* __s
argument_list|,
argument|std::streamsize __n
argument_list|)
block|{
name|std
operator|::
name|streamsize
name|__ret
operator|=
literal|0
block|;
specifier|const
name|int_type
name|__eof
operator|=
name|traits_type
operator|::
name|eof
argument_list|()
block|;
while|while
condition|(
name|__n
operator|--
condition|)
block|{
name|int_type
name|__c
init|=
name|this
operator|->
name|syncgetc
argument_list|()
decl_stmt|;
if|if
condition|(
name|traits_type
operator|::
name|eq_int_type
argument_list|(
name|__c
argument_list|,
name|__eof
argument_list|)
condition|)
break|break;
name|__s
index|[
name|__ret
index|]
operator|=
name|traits_type
operator|::
name|to_char_type
argument_list|(
name|__c
argument_list|)
expr_stmt|;
operator|++
name|__ret
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__ret
operator|>
literal|0
condition|)
name|_M_unget_buf
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
name|__s
index|[
name|__ret
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
else|else
name|_M_unget_buf
operator|=
name|traits_type
operator|::
name|eof
argument_list|()
expr_stmt|;
end_if

begin_return
return|return
name|__ret
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
operator|>
specifier|inline
name|std
operator|::
name|streamsize
name|stdio_sync_filebuf
operator|<
name|wchar_t
operator|>
operator|::
name|xsputn
argument_list|(
argument|const wchar_t* __s
argument_list|,
argument|std::streamsize __n
argument_list|)
block|{
name|std
operator|::
name|streamsize
name|__ret
operator|=
literal|0
block|;
specifier|const
name|int_type
name|__eof
operator|=
name|traits_type
operator|::
name|eof
argument_list|()
block|;
while|while
condition|(
name|__n
operator|--
condition|)
block|{
if|if
condition|(
name|traits_type
operator|::
name|eq_int_type
argument_list|(
name|this
operator|->
name|syncputc
argument_list|(
operator|*
name|__s
operator|++
argument_list|)
argument_list|,
name|__eof
argument_list|)
condition|)
break|break;
operator|++
name|__ret
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__ret
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|_GLIBCXX_EXTERN_TEMPLATE
end_if

begin_expr_stmt
unit|extern
name|template
name|class
name|stdio_sync_filebuf
operator|<
name|char
operator|>
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCXX_USE_WCHAR_T
end_ifdef

begin_extern
extern|extern template class stdio_sync_filebuf<wchar_t>;
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
unit|}
comment|// namespace __gnu_cxx
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

