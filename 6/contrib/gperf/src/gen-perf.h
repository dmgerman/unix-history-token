begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* This may look like C code, but it is really -*- C++ -*- */
end_comment

begin_comment
comment|/* Provides high-level routines to manipulate the keyword list    structures the code generation output.     Copyright (C) 1989-1998, 2000 Free Software Foundation, Inc.    written by Douglas C. Schmidt (schmidt@ics.uci.edu)  This file is part of GNU GPERF.  GNU GPERF is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version.  GNU GPERF is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GNU GPERF; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|gen_perf_h
end_ifndef

begin_define
define|#
directive|define
name|gen_perf_h
value|1
end_define

begin_include
include|#
directive|include
file|"key-list.h"
end_include

begin_include
include|#
directive|include
file|"bool-array.h"
end_include

begin_decl_stmt
name|class
name|Gen_Perf
range|:
name|private
name|Key_List
decl_stmt|,
name|private
name|Bool_Array
block|{
name|private
label|:
name|int
name|max_hash_value
decl_stmt|;
comment|/* Maximum possible hash value. */
name|int
name|fewest_collisions
decl_stmt|;
comment|/* Records fewest # of collisions for asso value. */
name|int
name|num_done
decl_stmt|;
comment|/* Number of keywords processed without a collision. */
name|void
name|change
parameter_list|(
name|List_Node
modifier|*
name|prior
parameter_list|,
name|List_Node
modifier|*
name|curr
parameter_list|)
function_decl|;
name|int
name|affects_prev
parameter_list|(
name|char
name|c
parameter_list|,
name|List_Node
modifier|*
name|curr
parameter_list|)
function_decl|;
specifier|static
name|int
name|hash
parameter_list|(
name|List_Node
modifier|*
name|key_node
parameter_list|)
function_decl|;
specifier|static
name|int
name|compute_disjoint_union
parameter_list|(
specifier|const
name|char
modifier|*
name|set_1
parameter_list|,
name|int
name|size_1
parameter_list|,
specifier|const
name|char
modifier|*
name|set_2
parameter_list|,
name|int
name|size_2
parameter_list|,
name|char
modifier|*
name|set_3
parameter_list|)
function_decl|;
specifier|static
name|void
name|sort_set
parameter_list|(
name|char
modifier|*
name|union_set
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|public
label|:
name|Gen_Perf
argument_list|(
name|void
argument_list|)
expr_stmt|;
operator|~
name|Gen_Perf
argument_list|(
name|void
argument_list|)
expr_stmt|;
name|int
name|operator
argument_list|()
argument_list|(
name|void
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

