begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Manages interpreters for GDB, the GNU debugger.     Copyright 2000, 2002, 2003 Free Software Foundation, Inc.     Written by Jim Ingham<jingham@apple.com> of Apple Computer, Inc.     This file is part of GDB.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|INTERPS_H
end_ifndef

begin_define
define|#
directive|define
name|INTERPS_H
end_define

begin_struct_decl
struct_decl|struct
name|ui_out
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|interp
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|int
name|interp_resume
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|interp_suspend
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|interp_prompt_p
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|interp_exec_p
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|interp_exec
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|,
specifier|const
name|char
modifier|*
name|command
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|interp_quiet_p
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
modifier|*
function_decl|(
name|interp_init_ftype
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|interp_resume_ftype
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|interp_suspend_ftype
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|interp_prompt_p_ftype
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|interp_exec_ftype
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
specifier|const
name|char
modifier|*
name|command
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|interp_command_loop_ftype
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|interp_procs
block|{
name|interp_init_ftype
modifier|*
name|init_proc
decl_stmt|;
name|interp_resume_ftype
modifier|*
name|resume_proc
decl_stmt|;
name|interp_suspend_ftype
modifier|*
name|suspend_proc
decl_stmt|;
name|interp_exec_ftype
modifier|*
name|exec_proc
decl_stmt|;
name|interp_prompt_p_ftype
modifier|*
name|prompt_proc_p
decl_stmt|;
name|interp_command_loop_ftype
modifier|*
name|command_loop_proc
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|struct
name|interp
modifier|*
name|interp_new
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|struct
name|interp_procs
modifier|*
name|procs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|interp_add
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|interp_set
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|interp
modifier|*
name|interp_lookup
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|ui_out
modifier|*
name|interp_ui_out
parameter_list|(
name|struct
name|interp
modifier|*
name|interp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|current_interp_named_p
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|current_interp_display_prompt_p
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|current_interp_command_loop
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|clear_interpreter_hooks
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* well-known interpreters */
end_comment

begin_define
define|#
directive|define
name|INTERP_CONSOLE
value|"console"
end_define

begin_define
define|#
directive|define
name|INTERP_MI1
value|"mi1"
end_define

begin_define
define|#
directive|define
name|INTERP_MI2
value|"mi2"
end_define

begin_define
define|#
directive|define
name|INTERP_MI3
value|"mi3"
end_define

begin_define
define|#
directive|define
name|INTERP_MI
value|"mi"
end_define

begin_define
define|#
directive|define
name|INTERP_TUI
value|"tui"
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

