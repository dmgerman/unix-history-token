begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  * hypercall.h  *   * Linux-specific hypervisor handling.  *   * Copyright (c) 2002-2004, K A Fraser  *   * 64-bit updates:  *   Benjamin Liu<benjamin.liu@intel.com>  *   Jun Nakajima<jun.nakajima@intel.com>  *   * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU General Public License version 2  * as published by the Free Software Foundation; or, when distributed  * separately from the Linux kernel or incorporated into other  * software packages, subject to the following license:  *   * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this source file (the "Software"), to deal in the Software without  * restriction, including without limitation the rights to use, copy, modify,  * merge, publish, distribute, sublicense, and/or sell copies of the Software,  * and to permit persons to whom the Software is furnished to do so, subject to  * the following conditions:  *   * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS  * IN THE SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__HYPERCALL_H__
end_ifndef

begin_define
define|#
directive|define
name|__HYPERCALL_H__
end_define

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__HYPERVISOR_H__
end_ifndef

begin_error
error|#
directive|error
literal|"please don't include this file directly"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|__STR
parameter_list|(
name|x
parameter_list|)
value|#x
end_define

begin_define
define|#
directive|define
name|STR
parameter_list|(
name|x
parameter_list|)
value|__STR(x)
end_define

begin_define
define|#
directive|define
name|ENOXENSYS
value|38
end_define

begin_define
define|#
directive|define
name|CONFIG_XEN_COMPAT
value|0x030002
end_define

begin_define
define|#
directive|define
name|__must_check
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|XEN
end_ifdef

begin_define
define|#
directive|define
name|HYPERCALL_STR
parameter_list|(
name|name
parameter_list|)
define|\
value|"call hypercall_page + ("STR(__HYPERVISOR_##name)" * 32)"
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|HYPERCALL_STR
parameter_list|(
name|name
parameter_list|)
define|\
value|"mov $("STR(__HYPERVISOR_##name)" * 32),%%eax; "\ 	"add hypercall_stubs(%%rip),%%rax; "			\ 	"call *%%rax"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_hypercall0
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
define|\
value|({						\ 	type __res;				\ 	__asm__ volatile (				\ 		HYPERCALL_STR(name)		\ 		: "=a" (__res)			\ 		:				\ 		: "memory" );			\ 	__res;					\ })
end_define

begin_define
define|#
directive|define
name|_hypercall1
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|)
define|\
value|({								\ 	type __res;						\ 	long __ign1;						\ 	__asm__ volatile (						\ 		HYPERCALL_STR(name)				\ 		: "=a" (__res), "=D" (__ign1)			\ 		: "1" ((long)(a1))				\ 		: "memory" );					\ 	__res;							\ })
end_define

begin_define
define|#
directive|define
name|_hypercall2
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|)
define|\
value|({								\ 	type __res;						\ 	long __ign1, __ign2;					\ 	__asm__ volatile (						\ 		HYPERCALL_STR(name)				\ 		: "=a" (__res), "=D" (__ign1), "=S" (__ign2)	\ 		: "1" ((long)(a1)), "2" ((long)(a2))		\ 		: "memory" );					\ 	__res;							\ })
end_define

begin_define
define|#
directive|define
name|_hypercall3
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|)
define|\
value|({								\ 	type __res;						\ 	long __ign1, __ign2, __ign3;				\ 	__asm__ volatile (						\ 		HYPERCALL_STR(name)				\ 		: "=a" (__res), "=D" (__ign1), "=S" (__ign2), 	\ 		"=d" (__ign3)					\ 		: "1" ((long)(a1)), "2" ((long)(a2)),		\ 		"3" ((long)(a3))				\ 		: "memory" );					\ 	__res;							\ })
end_define

begin_define
define|#
directive|define
name|_hypercall4
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|,
name|a4
parameter_list|)
define|\
value|({								\ 	type __res;						\ 	long __ign1, __ign2, __ign3;				\ 	register long __arg4 __asm__("r10") = (long)(a4);		\ 	__asm__ volatile (						\ 		HYPERCALL_STR(name)				\ 		: "=a" (__res), "=D" (__ign1), "=S" (__ign2),	\ 		  "=d" (__ign3), "+r" (__arg4)			\ 		: "1" ((long)(a1)), "2" ((long)(a2)),		\ 		  "3" ((long)(a3))				\ 		: "memory" );					\ 	__res;							\ })
end_define

begin_define
define|#
directive|define
name|_hypercall5
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|,
name|a4
parameter_list|,
name|a5
parameter_list|)
define|\
value|({								\ 	type __res;						\ 	long __ign1, __ign2, __ign3;				\ 	register long __arg4 __asm__("r10") = (long)(a4);		\ 	register long __arg5 __asm__("r8") = (long)(a5);		\ 	__asm__ volatile (						\ 		HYPERCALL_STR(name)				\ 		: "=a" (__res), "=D" (__ign1), "=S" (__ign2),	\ 		  "=d" (__ign3), "+r" (__arg4), "+r" (__arg5)	\ 		: "1" ((long)(a1)), "2" ((long)(a2)),		\ 		  "3" ((long)(a3))				\ 		: "memory" );					\ 	__res;							\ })
end_define

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_set_trap_table
parameter_list|(
specifier|const
name|trap_info_t
modifier|*
name|table
parameter_list|)
block|{
return|return
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|set_trap_table
argument_list|,
name|table
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_mmu_update
parameter_list|(
name|mmu_update_t
modifier|*
name|req
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|unsigned
name|int
modifier|*
name|success_count
parameter_list|,
name|domid_t
name|domid
parameter_list|)
block|{
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|mmu_update
argument_list|,
name|req
argument_list|,
name|count
argument_list|,
name|success_count
argument_list|,
name|domid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_mmuext_op
parameter_list|(
name|struct
name|mmuext_op
modifier|*
name|op
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|unsigned
name|int
modifier|*
name|success_count
parameter_list|,
name|domid_t
name|domid
parameter_list|)
block|{
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|mmuext_op
argument_list|,
name|op
argument_list|,
name|count
argument_list|,
name|success_count
argument_list|,
name|domid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_set_gdt
parameter_list|(
name|unsigned
name|long
modifier|*
name|frame_list
parameter_list|,
name|unsigned
name|int
name|entries
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|set_gdt
argument_list|,
name|frame_list
argument_list|,
name|entries
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_stack_switch
parameter_list|(
name|unsigned
name|long
name|ss
parameter_list|,
name|unsigned
name|long
name|esp
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|stack_switch
argument_list|,
name|ss
argument_list|,
name|esp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_set_callbacks
parameter_list|(
name|unsigned
name|long
name|event_address
parameter_list|,
name|unsigned
name|long
name|failsafe_address
parameter_list|,
name|unsigned
name|long
name|syscall_address
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|set_callbacks
argument_list|,
name|event_address
argument_list|,
name|failsafe_address
argument_list|,
name|syscall_address
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_fpu_taskswitch
parameter_list|(
name|int
name|set
parameter_list|)
block|{
return|return
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|fpu_taskswitch
argument_list|,
name|set
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_sched_op_compat
parameter_list|(
name|int
name|cmd
parameter_list|,
name|unsigned
name|long
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|sched_op_compat
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_sched_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|sched_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|__must_check
name|HYPERVISOR_set_timer_op
parameter_list|(
name|uint64_t
name|timeout
parameter_list|)
block|{
return|return
name|_hypercall1
argument_list|(
name|long
argument_list|,
name|set_timer_op
argument_list|,
name|timeout
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_platform_op
parameter_list|(
name|struct
name|xen_platform_op
modifier|*
name|platform_op
parameter_list|)
block|{
name|platform_op
operator|->
name|interface_version
operator|=
name|XENPF_INTERFACE_VERSION
expr_stmt|;
return|return
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|platform_op
argument_list|,
name|platform_op
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_set_debugreg
parameter_list|(
name|unsigned
name|int
name|reg
parameter_list|,
name|unsigned
name|long
name|value
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|set_debugreg
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|__must_check
name|HYPERVISOR_get_debugreg
parameter_list|(
name|unsigned
name|int
name|reg
parameter_list|)
block|{
return|return
name|_hypercall1
argument_list|(
argument|unsigned long
argument_list|,
argument|get_debugreg
argument_list|,
argument|reg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_update_descriptor
parameter_list|(
name|unsigned
name|long
name|ma
parameter_list|,
name|unsigned
name|long
name|word
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|update_descriptor
argument_list|,
name|ma
argument_list|,
name|word
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_memory_op
parameter_list|(
name|unsigned
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|memory_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_multicall
parameter_list|(
name|multicall_entry_t
modifier|*
name|call_list
parameter_list|,
name|unsigned
name|int
name|nr_calls
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|multicall
argument_list|,
name|call_list
argument_list|,
name|nr_calls
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_update_va_mapping
parameter_list|(
name|unsigned
name|long
name|va
parameter_list|,
name|uint64_t
name|new_val
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|update_va_mapping
argument_list|,
name|va
argument_list|,
name|new_val
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_event_channel_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|int
name|rc
init|=
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|event_channel_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|unlikely
argument_list|(
name|rc
operator|==
operator|-
name|ENOXENSYS
argument_list|)
condition|)
block|{
name|struct
name|evtchn_op
name|op
decl_stmt|;
name|op
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|op
operator|.
name|u
argument_list|,
name|arg
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|=
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|event_channel_op_compat
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|arg
argument_list|,
operator|&
name|op
operator|.
name|u
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|rc
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_xen_version
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|xen_version
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_console_io
parameter_list|(
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|console_io
argument_list|,
name|cmd
argument_list|,
name|count
argument_list|,
name|str
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_physdev_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|int
name|rc
init|=
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|physdev_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|unlikely
argument_list|(
name|rc
operator|==
operator|-
name|ENOXENSYS
argument_list|)
condition|)
block|{
name|struct
name|physdev_op
name|op
decl_stmt|;
name|op
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|op
operator|.
name|u
argument_list|,
name|arg
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|=
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|physdev_op_compat
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|arg
argument_list|,
operator|&
name|op
operator|.
name|u
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|rc
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_grant_table_op
parameter_list|(
name|unsigned
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|uop
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|grant_table_op
argument_list|,
name|cmd
argument_list|,
name|uop
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_update_va_mapping_otherdomain
parameter_list|(
name|unsigned
name|long
name|va
parameter_list|,
name|uint64_t
name|new_val
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|,
name|domid_t
name|domid
parameter_list|)
block|{
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|update_va_mapping_otherdomain
argument_list|,
name|va
argument_list|,
name|new_val
argument_list|,
name|flags
argument_list|,
name|domid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_vm_assist
parameter_list|(
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|type
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|vm_assist
argument_list|,
name|cmd
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_vcpu_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|vcpuid
parameter_list|,
name|void
modifier|*
name|extra_args
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|vcpu_op
argument_list|,
name|cmd
argument_list|,
name|vcpuid
argument_list|,
name|extra_args
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_set_segment_base
parameter_list|(
name|int
name|reg
parameter_list|,
name|unsigned
name|long
name|value
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|set_segment_base
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_suspend
parameter_list|(
name|unsigned
name|long
name|srec
parameter_list|)
block|{
name|struct
name|sched_shutdown
name|sched_shutdown
init|=
block|{
operator|.
name|reason
operator|=
name|SHUTDOWN_suspend
block|}
decl_stmt|;
name|int
name|rc
init|=
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|sched_op
argument_list|,
name|SCHEDOP_shutdown
argument_list|,
operator|&
name|sched_shutdown
argument_list|,
name|srec
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|rc
operator|==
operator|-
name|ENOXENSYS
condition|)
name|rc
operator|=
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|sched_op_compat
argument_list|,
name|SCHEDOP_shutdown
argument_list|,
name|SHUTDOWN_suspend
argument_list|,
name|srec
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|rc
return|;
block|}
end_function

begin_if
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
end_if

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_nmi_op
parameter_list|(
name|unsigned
name|long
name|op
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|nmi_op
argument_list|,
name|op
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_XEN
end_ifndef

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|__must_check
name|HYPERVISOR_hvm_op
parameter_list|(
name|int
name|op
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
argument|unsigned long
argument_list|,
argument|hvm_op
argument_list|,
argument|op
argument_list|,
argument|arg
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_callback_op
parameter_list|(
name|int
name|cmd
parameter_list|,
specifier|const
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|callback_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_xenoprof_op
parameter_list|(
name|int
name|op
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|xenoprof_op
argument_list|,
name|op
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|HYPERVISOR_kexec_op
parameter_list|(
name|unsigned
name|long
name|op
parameter_list|,
name|void
modifier|*
name|args
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|kexec_op
argument_list|,
name|op
argument_list|,
name|args
argument_list|)
return|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|__must_check
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HYPERCALL_H__ */
end_comment

end_unit

