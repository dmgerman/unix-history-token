begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004 Doug Rabson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	$FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NET_FIREWIRE_H_
end_ifndef

begin_define
define|#
directive|define
name|_NET_FIREWIRE_H_
end_define

begin_define
define|#
directive|define
name|FW_ENCAP_UNFRAG
value|0
end_define

begin_define
define|#
directive|define
name|FW_ENCAP_FIRST
value|1
end_define

begin_define
define|#
directive|define
name|FW_ENCAP_LAST
value|2
end_define

begin_define
define|#
directive|define
name|FW_ENCAP_NEXT
value|3
end_define

begin_union
union|union
name|fw_encap
block|{
name|uint32_t
name|ul
index|[
literal|2
index|]
decl_stmt|;
struct|struct
block|{
if|#
directive|if
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
name|uint32_t
name|lf
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved
range|:
literal|14
decl_stmt|;
name|uint32_t
name|ether_type
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|ether_type
range|:
literal|16
decl_stmt|;
name|uint32_t
name|reserved
range|:
literal|14
decl_stmt|;
name|uint32_t
name|lf
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|unfrag
struct|;
struct|struct
block|{
if|#
directive|if
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
name|uint32_t
name|lf
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|datagram_size
range|:
literal|12
decl_stmt|;
name|uint32_t
name|ether_type
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dgl
range|:
literal|16
decl_stmt|;
name|uint32_t
name|reserved2
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|ether_type
range|:
literal|16
decl_stmt|;
name|uint32_t
name|datagram_size
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|lf
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved2
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dgl
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|firstfrag
struct|;
struct|struct
block|{
if|#
directive|if
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
name|uint32_t
name|lf
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|datagram_size
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved2
range|:
literal|4
decl_stmt|;
name|uint32_t
name|fragment_offset
range|:
literal|12
decl_stmt|;
name|uint32_t
name|dgl
range|:
literal|16
decl_stmt|;
name|uint32_t
name|reserved3
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|fragment_offset
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved2
range|:
literal|4
decl_stmt|;
name|uint32_t
name|datagram_size
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|lf
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved3
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dgl
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|nextfrag
struct|;
block|}
union|;
end_union

begin_define
define|#
directive|define
name|MTAG_FIREWIRE
value|1394
end_define

begin_define
define|#
directive|define
name|MTAG_FIREWIRE_HWADDR
value|0
end_define

begin_define
define|#
directive|define
name|MTAG_FIREWIRE_SENDER_EUID
value|1
end_define

begin_struct
struct|struct
name|fw_hwaddr
block|{
name|uint32_t
name|sender_unique_ID_hi
decl_stmt|;
name|uint32_t
name|sender_unique_ID_lo
decl_stmt|;
name|uint8_t
name|sender_max_rec
decl_stmt|;
name|uint8_t
name|sspd
decl_stmt|;
name|uint16_t
name|sender_unicast_FIFO_hi
decl_stmt|;
name|uint32_t
name|sender_unicast_FIFO_lo
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * BPF wants to see one of these.  */
end_comment

begin_struct
struct|struct
name|fw_bpfhdr
block|{
name|uint8_t
name|firewire_dhost
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|firewire_shost
index|[
literal|8
index|]
decl_stmt|;
name|uint16_t
name|firewire_type
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_comment
comment|/*  * A structure to track the reassembly of a link-level fragmented  * datagram.  */
end_comment

begin_struct
struct|struct
name|fw_reass
block|{
name|STAILQ_ENTRY
argument_list|(
argument|fw_reass
argument_list|)
name|fr_link
expr_stmt|;
name|uint32_t
name|fr_id
decl_stmt|;
comment|/* host+dgl */
name|struct
name|mbuf
modifier|*
name|fr_frags
decl_stmt|;
comment|/* chain of frags */
block|}
struct|;
end_struct

begin_expr_stmt
name|STAILQ_HEAD
argument_list|(
name|fw_reass_list
argument_list|,
name|fw_reass
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|fw_com
block|{
name|struct
name|ifnet
modifier|*
name|fc_ifp
decl_stmt|;
name|struct
name|fw_hwaddr
name|fc_hwaddr
decl_stmt|;
name|struct
name|firewire_comm
modifier|*
name|fc_fc
decl_stmt|;
name|uint8_t
name|fc_broadcast_channel
decl_stmt|;
name|uint8_t
name|fc_speed
decl_stmt|;
comment|/* our speed */
name|uint16_t
name|fc_node
decl_stmt|;
comment|/* our nodeid */
name|struct
name|fw_reass_list
name|fc_frags
decl_stmt|;
comment|/* partial datagrams */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IFP2FWC
parameter_list|(
name|ifp
parameter_list|)
value|((struct fw_com *)(ifp)->if_l2com)
end_define

begin_function_decl
specifier|extern
name|void
name|firewire_input
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|uint16_t
name|src
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|firewire_ifattach
parameter_list|(
name|struct
name|ifnet
modifier|*
parameter_list|,
name|struct
name|fw_hwaddr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|firewire_ifdetach
parameter_list|(
name|struct
name|ifnet
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|firewire_busreset
parameter_list|(
name|struct
name|ifnet
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|firewire_ioctl
parameter_list|(
name|struct
name|ifnet
modifier|*
parameter_list|,
name|int
parameter_list|,
name|caddr_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_NET_FIREWIRE_H_ */
end_comment

end_unit

