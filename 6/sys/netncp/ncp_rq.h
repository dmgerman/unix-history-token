begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1999, 2000, 2001 Boris Popov  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    This product includes software developed by Boris Popov.  * 4. Neither the name of the author nor the names of any co-contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NETNCP_NCP_RQ_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETNCP_NCP_RQ_H_
end_define

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_define
define|#
directive|define
name|getb
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(((const u_int8_t *)(buf))[ofs])
end_define

begin_define
define|#
directive|define
name|setb
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|(((u_int8_t*)(buf))[ofs])=val
end_define

begin_define
define|#
directive|define
name|getbw
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|((u_int16_t)(getb(buf,ofs)))
end_define

begin_define
define|#
directive|define
name|getwle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(le16toh(*((u_int16_t*)(&((u_int8_t*)(buf))[ofs]))))
end_define

begin_define
define|#
directive|define
name|getdle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(le32toh(*((u_int32_t*)(&((u_int8_t*)(buf))[ofs]))))
end_define

begin_define
define|#
directive|define
name|getwbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(be16toh(*((u_int16_t*)(&((u_int8_t*)(buf))[ofs]))))
end_define

begin_define
define|#
directive|define
name|getdbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(be32toh(*((u_int32_t*)(&((u_int8_t*)(buf))[ofs]))))
end_define

begin_define
define|#
directive|define
name|setwle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
define|\
value|(*((u_int16_t*)(&((u_int8_t*)(buf))[ofs])))=htole16(val)
end_define

begin_define
define|#
directive|define
name|setdle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
define|\
value|(*((u_int32_t*)(&((u_int8_t*)(buf))[ofs])))=htole32(val)
end_define

begin_define
define|#
directive|define
name|setwbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
define|\
value|(*((u_int16_t*)(&((u_int8_t*)(buf))[ofs])))=htobe16(val)
end_define

begin_define
define|#
directive|define
name|setdbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
define|\
value|(*((u_int32_t*)(&((u_int8_t*)(buf))[ofs])))=htobe32(val)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/mchain.h>
end_include

begin_define
define|#
directive|define
name|NCPR_ALLOCED
value|0x0001
end_define

begin_comment
comment|/* request structure was allocated */
end_comment

begin_define
define|#
directive|define
name|NCPR_DONTFREEONERR
value|0x0002
end_define

begin_comment
comment|/* do not free structure on error */
end_comment

begin_comment
comment|/*   * Structure to prepare ncp request and receive reply   */
end_comment

begin_struct
struct|struct
name|ncp_rq
block|{
name|int
name|nr_flags
decl_stmt|;
name|struct
name|mbchain
name|rq
decl_stmt|;
name|struct
name|mdchain
name|rp
decl_stmt|;
name|int
name|nr_minrplen
decl_stmt|;
comment|/* minimal rp size (-1 if not known) */
name|int
name|nr_rpsize
decl_stmt|;
comment|/* reply size minus ncp header */
name|int
name|nr_cc
decl_stmt|;
comment|/* completion code */
name|int
name|nr_cs
decl_stmt|;
comment|/* connection state */
name|struct
name|thread
modifier|*
name|nr_td
decl_stmt|;
comment|/* thread that did rq */
name|struct
name|ucred
modifier|*
name|nr_cred
decl_stmt|;
comment|/* user that did rq */
name|int
name|rexmit
decl_stmt|;
name|struct
name|ncp_conn
modifier|*
name|nr_conn
decl_stmt|;
comment|/* back link */
block|}
struct|;
end_struct

begin_function_decl
name|int
name|ncp_rq_alloc
parameter_list|(
name|u_int8_t
name|fn
parameter_list|,
name|struct
name|ncp_conn
modifier|*
name|ncp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|,
name|struct
name|ncp_rq
modifier|*
modifier|*
name|rqpp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ncp_rq_alloc_any
parameter_list|(
name|u_int32_t
name|ptype
parameter_list|,
name|u_int8_t
name|fn
parameter_list|,
name|struct
name|ncp_conn
modifier|*
name|ncp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|,
name|struct
name|ncp_rq
modifier|*
modifier|*
name|rqpp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ncp_rq_alloc_subfn
parameter_list|(
name|u_int8_t
name|fn
parameter_list|,
name|u_int8_t
name|subfn
parameter_list|,
name|struct
name|ncp_conn
modifier|*
name|ncp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|,
name|struct
name|ncp_rq
modifier|*
modifier|*
name|rqpp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ncp_rq_init_any
parameter_list|(
name|struct
name|ncp_rq
modifier|*
name|rqp
parameter_list|,
name|u_int32_t
name|ptype
parameter_list|,
name|u_int8_t
name|fn
parameter_list|,
name|struct
name|ncp_conn
modifier|*
name|ncp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_rq_done
parameter_list|(
name|struct
name|ncp_rq
modifier|*
name|rqp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ncp_request
parameter_list|(
name|struct
name|ncp_rq
modifier|*
name|rqp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ncp_request_int
parameter_list|(
name|struct
name|ncp_rq
modifier|*
name|rqp
parameter_list|)
function_decl|;
end_function_decl

begin_struct_decl
struct_decl|struct
name|ncp_nlstables
struct_decl|;
end_struct_decl

begin_function_decl
name|int
name|ncp_rq_pathstring
parameter_list|(
name|struct
name|ncp_rq
modifier|*
name|rqp
parameter_list|,
name|int
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|ncp_nlstables
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ncp_rq_dbase_path
parameter_list|(
name|struct
name|ncp_rq
modifier|*
parameter_list|,
name|u_int8_t
name|vol_num
parameter_list|,
name|u_int32_t
name|dir_base
parameter_list|,
name|int
name|namelen
parameter_list|,
name|u_char
modifier|*
name|name
parameter_list|,
name|struct
name|ncp_nlstables
modifier|*
name|nt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ncp_rq_pstring
parameter_list|(
name|struct
name|ncp_rq
modifier|*
name|rqp
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_sign_init
parameter_list|(
specifier|const
name|char
modifier|*
name|logindata
parameter_list|,
name|char
modifier|*
name|sign_root
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* ifdef _KERNEL */
end_comment

begin_define
define|#
directive|define
name|DECLARE_RQ
value|struct ncp_buf conn1, *conn=&conn1
end_define

begin_define
define|#
directive|define
name|ncp_add_byte
parameter_list|(
name|conn
parameter_list|,
name|x
parameter_list|)
value|(conn)->packet[(conn)->rqsize++]=x
end_define

begin_struct_decl
struct_decl|struct
name|ncp_buf
struct_decl|;
end_struct_decl

begin_function_decl
name|__BEGIN_DECLS
name|void
name|ncp_init_request
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_init_request_s
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_word_lh
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_dword_lh
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_word_hl
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_dword_hl
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_mem
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_mem_nls
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_pstring
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ncp_add_handle_path
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|nuint32
parameter_list|,
name|nuint32
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|ncp_reply_data
parameter_list|(
name|conn
parameter_list|,
name|offset
parameter_list|)
value|((conn)->packet+offset)
end_define

begin_define
define|#
directive|define
name|ncp_reply_byte
parameter_list|(
name|conn
parameter_list|,
name|offset
parameter_list|)
value|(*(u_int8_t*)(ncp_reply_data(conn, offset)))
end_define

begin_function_decl
name|u_int16_t
name|ncp_reply_word_hl
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int16_t
name|ncp_reply_word_lh
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|ncp_reply_dword_hl
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|ncp_reply_dword_lh
parameter_list|(
name|struct
name|ncp_buf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|ConvertToNWfromDWORD
parameter_list|(
name|u_int32_t
name|sfd
parameter_list|,
name|ncp_fh
modifier|*
name|fh
parameter_list|)
block|{
name|fh
operator|->
name|val1
operator|=
operator|(
name|fh
operator|->
name|val
operator|.
name|val32
operator|=
name|sfd
operator|)
expr_stmt|;
return|return;
block|}
end_function

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ifdef _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_NETNCP_NCP_RQ_H_ */
end_comment

end_unit

