begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GDB_GDB_INT_H_
end_ifndef

begin_define
define|#
directive|define
name|_GDB_GDB_INT_H_
end_define

begin_decl_stmt
specifier|extern
name|struct
name|gdb_dbgport
modifier|*
name|gdb_cur
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|gdb_rxp
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|size_t
name|gdb_rxsz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|gdb_txp
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|gdb_rx_begin
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|gdb_rx_equal
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|gdb_rx_mem
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|gdb_rx_varhex
parameter_list|(
name|uintmax_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|gdb_rx_char
parameter_list|(
name|void
parameter_list|)
block|{
name|int
name|c
decl_stmt|;
if|if
condition|(
name|gdb_rxsz
operator|>
literal|0
condition|)
block|{
name|c
operator|=
operator|*
name|gdb_rxp
operator|++
expr_stmt|;
name|gdb_rxsz
operator|--
expr_stmt|;
block|}
else|else
name|c
operator|=
operator|-
literal|1
expr_stmt|;
return|return
operator|(
name|c
operator|)
return|;
block|}
end_function

begin_function_decl
name|void
name|gdb_tx_begin
parameter_list|(
name|char
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|gdb_tx_end
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|gdb_tx_mem
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|gdb_tx_reg
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|gdb_tx_char
parameter_list|(
name|char
name|c
parameter_list|)
block|{
operator|*
name|gdb_txp
operator|++
operator|=
name|c
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|gdb_tx_empty
parameter_list|(
name|void
parameter_list|)
block|{
name|gdb_tx_begin
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
return|return
operator|(
name|gdb_tx_end
argument_list|()
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|gdb_tx_hex
parameter_list|(
name|uintmax_t
name|n
parameter_list|,
name|int
name|sz
parameter_list|)
block|{
name|gdb_txp
operator|+=
name|sprintf
argument_list|(
name|gdb_txp
argument_list|,
literal|"%0*jx"
argument_list|,
name|sz
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|gdb_tx_err
parameter_list|(
name|int
name|err
parameter_list|)
block|{
name|gdb_tx_begin
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|gdb_tx_hex
argument_list|(
name|err
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
operator|(
name|gdb_tx_end
argument_list|()
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|gdb_tx_ok
parameter_list|(
name|void
parameter_list|)
block|{
name|gdb_tx_begin
argument_list|(
literal|'O'
argument_list|)
expr_stmt|;
name|gdb_tx_char
argument_list|(
literal|'K'
argument_list|)
expr_stmt|;
return|return
operator|(
name|gdb_tx_end
argument_list|()
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|gdb_tx_str
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
while|while
condition|(
operator|*
name|s
condition|)
operator|*
name|gdb_txp
operator|++
operator|=
operator|*
name|s
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|gdb_tx_varhex
parameter_list|(
name|uintmax_t
name|n
parameter_list|)
block|{
name|gdb_txp
operator|+=
name|sprintf
argument_list|(
name|gdb_txp
argument_list|,
literal|"%jx"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_GDB_GDB_INT_H_ */
end_comment

end_unit

