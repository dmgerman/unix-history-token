begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  * hypervisor.h   *   * Linux-specific hypervisor handling.  *   * Copyright (c) 2002, K A Fraser  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__HYPERVISOR_H__
end_ifndef

begin_define
define|#
directive|define
name|__HYPERVISOR_H__
end_define

begin_define
define|#
directive|define
name|is_running_on_xen
parameter_list|()
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|PAE
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_X86_PAE
end_ifndef

begin_define
define|#
directive|define
name|CONFIG_X86_PAE
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<machine/xen/xen-os.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/xen.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/platform.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/event_channel.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/physdev.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/sched.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/callback.h>
end_include

begin_include
include|#
directive|include
file|<machine/xen/hypercall.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__amd64__
argument_list|)
end_if

begin_define
define|#
directive|define
name|MULTI_UVMFLAGS_INDEX
value|2
end_define

begin_define
define|#
directive|define
name|MULTI_UVMDOMID_INDEX
value|3
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|MULTI_UVMFLAGS_INDEX
value|3
end_define

begin_define
define|#
directive|define
name|MULTI_UVMDOMID_INDEX
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_XEN_PRIVILEGED_GUEST
end_ifdef

begin_define
define|#
directive|define
name|is_initial_xendomain
parameter_list|()
value|(xen_start_info->flags& SIF_INITDOMAIN)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|is_initial_xendomain
parameter_list|()
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|start_info_t
modifier|*
name|xen_start_info
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|uint64_t
name|get_system_time
parameter_list|(
name|int
name|ticks
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_console_write
parameter_list|(
name|char
modifier|*
name|str
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|HYPERVISOR_console_io
argument_list|(
name|CONSOLEIO_write
argument_list|,
name|count
argument_list|,
name|str
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|static
specifier|inline
name|void
name|HYPERVISOR_crash
argument_list|(
name|void
argument_list|)
name|__dead2
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_yield
parameter_list|(
name|void
parameter_list|)
block|{
name|int
name|rc
init|=
name|HYPERVISOR_sched_op
argument_list|(
name|SCHEDOP_yield
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|rc
operator|==
operator|-
name|ENOXENSYS
condition|)
name|rc
operator|=
name|HYPERVISOR_sched_op_compat
argument_list|(
name|SCHEDOP_yield
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|rc
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_block
parameter_list|(
name|void
parameter_list|)
block|{
name|int
name|rc
init|=
name|HYPERVISOR_sched_op
argument_list|(
name|SCHEDOP_block
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|rc
operator|==
operator|-
name|ENOXENSYS
condition|)
name|rc
operator|=
name|HYPERVISOR_sched_op_compat
argument_list|(
name|SCHEDOP_block
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|rc
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|HYPERVISOR_shutdown
parameter_list|(
name|unsigned
name|int
name|reason
parameter_list|)
block|{
name|struct
name|sched_shutdown
name|sched_shutdown
init|=
block|{
operator|.
name|reason
operator|=
name|reason
block|}
decl_stmt|;
name|HYPERVISOR_sched_op
argument_list|(
name|SCHEDOP_shutdown
argument_list|,
operator|&
name|sched_shutdown
argument_list|)
expr_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
name|HYPERVISOR_sched_op_compat
argument_list|(
name|SCHEDOP_shutdown
argument_list|,
name|reason
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|HYPERVISOR_crash
parameter_list|(
name|void
parameter_list|)
block|{
name|HYPERVISOR_shutdown
argument_list|(
name|SHUTDOWN_crash
argument_list|)
expr_stmt|;
comment|/* NEVER REACHED */
for|for
control|(
init|;
condition|;
control|)
empty_stmt|;
comment|/* eliminate noreturn error */
block|}
end_function

begin_comment
comment|/* Transfer control to hypervisor until an event is detected on one */
end_comment

begin_comment
comment|/* of the specified ports or the specified number of ticks elapse */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_poll
parameter_list|(
name|evtchn_port_t
modifier|*
name|ports
parameter_list|,
name|unsigned
name|int
name|nr_ports
parameter_list|,
name|int
name|ticks
parameter_list|)
block|{
name|int
name|rc
decl_stmt|;
name|struct
name|sched_poll
name|sched_poll
init|=
block|{
operator|.
name|nr_ports
operator|=
name|nr_ports
block|,
operator|.
name|timeout
operator|=
name|get_system_time
argument_list|(
argument|ticks
argument_list|)
block|}
decl_stmt|;
name|set_xen_guest_handle
argument_list|(
name|sched_poll
operator|.
name|ports
argument_list|,
name|ports
argument_list|)
expr_stmt|;
name|rc
operator|=
name|HYPERVISOR_sched_op
argument_list|(
name|SCHEDOP_poll
argument_list|,
operator|&
name|sched_poll
argument_list|)
expr_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|rc
operator|==
operator|-
name|ENOXENSYS
condition|)
name|rc
operator|=
name|HYPERVISOR_sched_op_compat
argument_list|(
name|SCHEDOP_yield
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|rc
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|MULTI_update_va_mapping
parameter_list|(
name|multicall_entry_t
modifier|*
name|mcl
parameter_list|,
name|unsigned
name|long
name|va
parameter_list|,
name|uint64_t
name|new_val
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
block|{
name|mcl
operator|->
name|op
operator|=
name|__HYPERVISOR_update_va_mapping
expr_stmt|;
name|mcl
operator|->
name|args
index|[
literal|0
index|]
operator|=
name|va
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__amd64__
argument_list|)
name|mcl
operator|->
name|args
index|[
literal|1
index|]
operator|=
name|new_val
operator|.
name|pte
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|PAE
argument_list|)
name|mcl
operator|->
name|args
index|[
literal|1
index|]
operator|=
call|(
name|uint32_t
call|)
argument_list|(
name|new_val
operator|&
literal|0xffffffff
argument_list|)
expr_stmt|;
name|mcl
operator|->
name|args
index|[
literal|2
index|]
operator|=
call|(
name|uint32_t
call|)
argument_list|(
name|new_val
operator|>>
literal|32
argument_list|)
expr_stmt|;
else|#
directive|else
name|mcl
operator|->
name|args
index|[
literal|1
index|]
operator|=
name|new_val
expr_stmt|;
name|mcl
operator|->
name|args
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|mcl
operator|->
name|args
index|[
name|MULTI_UVMFLAGS_INDEX
index|]
operator|=
name|flags
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HYPERVISOR_H__ */
end_comment

end_unit

