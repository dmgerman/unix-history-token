begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_GNU_EXT2FS_EXT2_BITOPS_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_GNU_EXT2FS_EXT2_BITOPS_H_
end_define

begin_define
define|#
directive|define
name|find_first_zero_bit
parameter_list|(
name|data
parameter_list|,
name|sz
parameter_list|)
value|find_next_zero_bit(data, sz, 0)
end_define

begin_function
specifier|static
name|__inline
name|int
name|clear_bit
parameter_list|(
name|int
name|no
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|uint32_t
modifier|*
name|p
decl_stmt|;
name|uint32_t
name|mask
decl_stmt|,
name|new
decl_stmt|,
name|old
decl_stmt|;
name|p
operator|=
operator|(
name|uint32_t
operator|*
operator|)
name|data
operator|+
operator|(
name|no
operator|>>
literal|5
operator|)
expr_stmt|;
name|mask
operator|=
operator|(
literal|1U
operator|<<
operator|(
name|no
operator|&
literal|31
operator|)
operator|)
expr_stmt|;
do|do
block|{
name|old
operator|=
operator|*
name|p
expr_stmt|;
name|new
operator|=
name|old
operator|&
operator|~
name|mask
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_32
argument_list|(
name|p
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
condition|)
do|;
return|return
operator|(
name|old
operator|&
name|mask
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|set_bit
parameter_list|(
name|int
name|no
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|uint32_t
modifier|*
name|p
decl_stmt|;
name|uint32_t
name|mask
decl_stmt|,
name|new
decl_stmt|,
name|old
decl_stmt|;
name|p
operator|=
operator|(
name|uint32_t
operator|*
operator|)
name|data
operator|+
operator|(
name|no
operator|>>
literal|5
operator|)
expr_stmt|;
name|mask
operator|=
operator|(
literal|1U
operator|<<
operator|(
name|no
operator|&
literal|31
operator|)
operator|)
expr_stmt|;
do|do
block|{
name|old
operator|=
operator|*
name|p
expr_stmt|;
name|new
operator|=
name|old
operator||
name|mask
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_32
argument_list|(
name|p
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
condition|)
do|;
return|return
operator|(
name|old
operator|&
name|mask
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|test_bit
parameter_list|(
name|int
name|no
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|uint32_t
modifier|*
name|p
decl_stmt|;
name|uint32_t
name|mask
decl_stmt|;
name|p
operator|=
operator|(
name|uint32_t
operator|*
operator|)
name|data
operator|+
operator|(
name|no
operator|>>
literal|5
operator|)
expr_stmt|;
name|mask
operator|=
operator|(
literal|1U
operator|<<
operator|(
name|no
operator|&
literal|31
operator|)
operator|)
expr_stmt|;
return|return
operator|(
operator|*
name|p
operator|&
name|mask
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|size_t
name|find_next_zero_bit
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|sz
parameter_list|,
name|size_t
name|ofs
parameter_list|)
block|{
name|uint32_t
modifier|*
name|p
decl_stmt|;
name|uint32_t
name|mask
decl_stmt|;
name|int
name|bit
decl_stmt|;
name|p
operator|=
operator|(
name|uint32_t
operator|*
operator|)
name|data
operator|+
operator|(
name|ofs
operator|>>
literal|5
operator|)
expr_stmt|;
if|if
condition|(
name|ofs
operator|&
literal|31
condition|)
block|{
name|mask
operator|=
operator|~
literal|0U
operator|<<
operator|(
name|ofs
operator|&
literal|31
operator|)
expr_stmt|;
name|bit
operator|=
operator|*
name|p
operator||
operator|~
name|mask
expr_stmt|;
if|if
condition|(
name|bit
operator|!=
operator|~
literal|0U
condition|)
return|return
operator|(
name|ffs
argument_list|(
operator|~
name|bit
argument_list|)
operator|+
name|ofs
operator|-
literal|1
operator|)
return|;
name|p
operator|++
expr_stmt|;
name|ofs
operator|=
operator|(
name|ofs
operator|+
literal|31U
operator|)
operator|&
operator|~
literal|31U
expr_stmt|;
block|}
while|while
condition|(
name|ofs
operator|<
name|sz
operator|&&
operator|*
name|p
operator|==
operator|~
literal|0U
condition|)
block|{
name|p
operator|++
expr_stmt|;
name|ofs
operator|+=
literal|32
expr_stmt|;
block|}
if|if
condition|(
name|ofs
operator|==
name|sz
condition|)
return|return
operator|(
name|ofs
operator|)
return|;
name|bit
operator|=
operator|*
name|p
expr_stmt|;
return|return
operator|(
name|ffs
argument_list|(
operator|~
name|bit
argument_list|)
operator|+
name|ofs
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|memscan
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|int
name|c
parameter_list|,
name|size_t
name|sz
parameter_list|)
block|{
name|uint8_t
modifier|*
name|p
decl_stmt|;
name|p
operator|=
name|data
expr_stmt|;
while|while
condition|(
name|sz
operator|&&
operator|*
name|p
operator|!=
name|c
condition|)
block|{
name|p
operator|++
expr_stmt|;
name|sz
operator|--
expr_stmt|;
block|}
return|return
operator|(
name|p
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_GNU_EXT2FS_EXT2_BITOPS_H_ */
end_comment

end_unit

