begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003 Jake Burkholder<jake@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Neither the name of the author nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ATOMIC_OPS_H_
end_ifndef

begin_define
define|#
directive|define
name|_ATOMIC_OPS_H_
end_define

begin_include
include|#
directive|include
file|<machine/atomic.h>
end_include

begin_comment
comment|/*  * Atomic swap:  *   Atomic (tmp = *dst, *dst = val), then *res = tmp  *  * void atomic_swap_long(long *dst, long val, long *res);  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|atomic_swap_long
parameter_list|(
name|long
modifier|*
name|dst
parameter_list|,
name|long
name|val
parameter_list|,
name|long
modifier|*
name|res
parameter_list|)
block|{
name|long
name|tmp
decl_stmt|;
name|long
name|r
decl_stmt|;
name|tmp
operator|=
operator|*
name|dst
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|r
operator|=
name|atomic_cas_64
argument_list|(
name|dst
argument_list|,
name|tmp
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|tmp
condition|)
break|break;
name|tmp
operator|=
name|r
expr_stmt|;
block|}
operator|*
name|res
operator|=
name|tmp
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|atomic_swap_int
parameter_list|(
name|int
modifier|*
name|dst
parameter_list|,
name|int
name|val
parameter_list|,
name|int
modifier|*
name|res
parameter_list|)
block|{
name|int
name|tmp
decl_stmt|;
name|int
name|r
decl_stmt|;
name|tmp
operator|=
operator|*
name|dst
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|r
operator|=
name|atomic_cas_32
argument_list|(
name|dst
argument_list|,
name|tmp
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|tmp
condition|)
break|break;
name|tmp
operator|=
name|r
expr_stmt|;
block|}
operator|*
name|res
operator|=
name|tmp
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|atomic_swap_ptr
parameter_list|(
name|dst
parameter_list|,
name|val
parameter_list|,
name|res
parameter_list|)
define|\
value|atomic_swap_long((long *)dst, (long)val, (long *)res)
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

