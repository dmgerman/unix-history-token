begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*	$KAME: altq_classq.h,v 1.6 2003/01/07 07:33:38 kjc Exp $	*/
end_comment

begin_comment
comment|/*  * Copyright (c) 1991-1997 Regents of the University of California.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 4. Neither the name of the University nor of the Laboratory may be used  *    to endorse or promote products derived from this software without  *    specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * class queue definitions extracted from rm_class.h.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ALTQ_ALTQ_CLASSQ_H_
end_ifndef

begin_define
define|#
directive|define
name|_ALTQ_ALTQ_CLASSQ_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Packet Queue types: RED or DROPHEAD.  */
define|#
directive|define
name|Q_DROPHEAD
value|0x00
define|#
directive|define
name|Q_RED
value|0x01
define|#
directive|define
name|Q_RIO
value|0x02
define|#
directive|define
name|Q_DROPTAIL
value|0x03
ifdef|#
directive|ifdef
name|_KERNEL
comment|/*  * Packet Queue structures and macros to manipulate them.  */
struct|struct
name|_class_queue_
block|{
name|struct
name|mbuf
modifier|*
name|tail_
decl_stmt|;
comment|/* Tail of packet queue */
name|int
name|qlen_
decl_stmt|;
comment|/* Queue length (in number of packets) */
name|int
name|qlim_
decl_stmt|;
comment|/* Queue limit (in number of packets*) */
name|int
name|qtype_
decl_stmt|;
comment|/* Queue type */
block|}
struct|;
typedef|typedef
name|struct
name|_class_queue_
name|class_queue_t
typedef|;
define|#
directive|define
name|qtype
parameter_list|(
name|q
parameter_list|)
value|(q)->qtype_
comment|/* Get queue type */
define|#
directive|define
name|qlimit
parameter_list|(
name|q
parameter_list|)
value|(q)->qlim_
comment|/* Max packets to be queued */
define|#
directive|define
name|qlen
parameter_list|(
name|q
parameter_list|)
value|(q)->qlen_
comment|/* Current queue length. */
define|#
directive|define
name|qtail
parameter_list|(
name|q
parameter_list|)
value|(q)->tail_
comment|/* Tail of the queue */
define|#
directive|define
name|qhead
parameter_list|(
name|q
parameter_list|)
value|((q)->tail_ ? (q)->tail_->m_nextpkt : NULL)
define|#
directive|define
name|qempty
parameter_list|(
name|q
parameter_list|)
value|((q)->qlen_ == 0)
comment|/* Is the queue empty?? */
define|#
directive|define
name|q_is_red
parameter_list|(
name|q
parameter_list|)
value|((q)->qtype_ == Q_RED)
comment|/* Is the queue a red queue */
define|#
directive|define
name|q_is_rio
parameter_list|(
name|q
parameter_list|)
value|((q)->qtype_ == Q_RIO)
comment|/* Is the queue a rio queue */
define|#
directive|define
name|q_is_red_or_rio
parameter_list|(
name|q
parameter_list|)
value|((q)->qtype_ == Q_RED || (q)->qtype_ == Q_RIO)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALTQ_DEBUG
argument_list|)
specifier|extern
name|void
name|_addq
parameter_list|(
name|class_queue_t
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|mbuf
modifier|*
name|_getq
parameter_list|(
name|class_queue_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|mbuf
modifier|*
name|_getq_tail
parameter_list|(
name|class_queue_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|mbuf
modifier|*
name|_getq_random
parameter_list|(
name|class_queue_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_removeq
parameter_list|(
name|class_queue_t
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_flushq
parameter_list|(
name|class_queue_t
modifier|*
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* __GNUC__&& !ALTQ_DEBUG */
comment|/*  * inlined versions  */
specifier|static
name|__inline
name|void
name|_addq
parameter_list|(
name|class_queue_t
modifier|*
name|q
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|m0
decl_stmt|;
if|if
condition|(
operator|(
name|m0
operator|=
name|qtail
argument_list|(
name|q
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
name|m
operator|->
name|m_nextpkt
operator|=
name|m0
operator|->
name|m_nextpkt
expr_stmt|;
else|else
name|m0
operator|=
name|m
expr_stmt|;
name|m0
operator|->
name|m_nextpkt
operator|=
name|m
expr_stmt|;
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|m
expr_stmt|;
name|qlen
argument_list|(
name|q
argument_list|)
operator|++
expr_stmt|;
block|}
specifier|static
name|__inline
expr|struct
name|mbuf
operator|*
name|_getq
argument_list|(
argument|class_queue_t *q
argument_list|)
block|{ 	struct
name|mbuf
operator|*
name|m
block|,
operator|*
name|m0
block|;
if|if
condition|(
operator|(
name|m
operator|=
name|qtail
argument_list|(
name|q
argument_list|)
operator|)
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
if|if
condition|(
operator|(
name|m0
operator|=
name|m
operator|->
name|m_nextpkt
operator|)
operator|!=
name|m
condition|)
name|m
operator|->
name|m_nextpkt
operator|=
name|m0
operator|->
name|m_nextpkt
expr_stmt|;
else|else
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|NULL
expr_stmt|;
name|qlen
argument_list|(
name|q
argument_list|)
operator|--
expr_stmt|;
name|m0
operator|->
name|m_nextpkt
operator|=
name|NULL
expr_stmt|;
return|return
operator|(
name|m0
operator|)
return|;
block|}
end_extern

begin_comment
comment|/* drop a packet at the tail of the queue */
end_comment

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mbuf
operator|*
name|_getq_tail
argument_list|(
argument|class_queue_t *q
argument_list|)
block|{ 	struct
name|mbuf
operator|*
name|m
block|,
operator|*
name|m0
block|,
operator|*
name|prev
block|;
if|if
condition|(
operator|(
name|m
operator|=
name|m0
operator|=
name|qtail
argument_list|(
name|q
argument_list|)
operator|)
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
end_expr_stmt

begin_do
do|do
block|{
name|prev
operator|=
name|m0
expr_stmt|;
name|m0
operator|=
name|m0
operator|->
name|m_nextpkt
expr_stmt|;
block|}
do|while
condition|(
name|m0
operator|!=
name|m
condition|)
do|;
end_do

begin_expr_stmt
name|prev
operator|->
name|m_nextpkt
operator|=
name|m
operator|->
name|m_nextpkt
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|prev
operator|==
name|m
condition|)
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|NULL
expr_stmt|;
else|else
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|prev
expr_stmt|;
end_if

begin_expr_stmt
name|qlen
argument_list|(
name|q
argument_list|)
operator|--
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|m
operator|->
name|m_nextpkt
operator|=
name|NULL
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|m
operator|)
return|;
end_return

begin_comment
unit|}
comment|/* randomly select a packet in the queue */
end_comment

begin_function
unit|static
name|__inline
name|struct
name|mbuf
modifier|*
name|_getq_random
parameter_list|(
name|class_queue_t
modifier|*
name|q
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|int
name|i
decl_stmt|,
name|n
decl_stmt|;
if|if
condition|(
operator|(
name|m
operator|=
name|qtail
argument_list|(
name|q
argument_list|)
operator|)
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
if|if
condition|(
name|m
operator|->
name|m_nextpkt
operator|==
name|m
condition|)
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|NULL
expr_stmt|;
else|else
block|{
name|struct
name|mbuf
modifier|*
name|prev
init|=
name|NULL
decl_stmt|;
name|n
operator|=
name|random
argument_list|()
operator|%
name|qlen
argument_list|(
name|q
argument_list|)
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|prev
operator|=
name|m
expr_stmt|;
name|m
operator|=
name|m
operator|->
name|m_nextpkt
expr_stmt|;
block|}
name|prev
operator|->
name|m_nextpkt
operator|=
name|m
operator|->
name|m_nextpkt
expr_stmt|;
if|if
condition|(
name|m
operator|==
name|qtail
argument_list|(
name|q
argument_list|)
condition|)
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|prev
expr_stmt|;
block|}
name|qlen
argument_list|(
name|q
argument_list|)
operator|--
expr_stmt|;
name|m
operator|->
name|m_nextpkt
operator|=
name|NULL
expr_stmt|;
return|return
operator|(
name|m
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_removeq
parameter_list|(
name|class_queue_t
modifier|*
name|q
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|m0
decl_stmt|,
modifier|*
name|prev
decl_stmt|;
name|m0
operator|=
name|qtail
argument_list|(
name|q
argument_list|)
expr_stmt|;
do|do
block|{
name|prev
operator|=
name|m0
expr_stmt|;
name|m0
operator|=
name|m0
operator|->
name|m_nextpkt
expr_stmt|;
block|}
do|while
condition|(
name|m0
operator|!=
name|m
condition|)
do|;
name|prev
operator|->
name|m_nextpkt
operator|=
name|m
operator|->
name|m_nextpkt
expr_stmt|;
if|if
condition|(
name|prev
operator|==
name|m
condition|)
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|NULL
expr_stmt|;
elseif|else
if|if
condition|(
name|qtail
argument_list|(
name|q
argument_list|)
operator|==
name|m
condition|)
name|qtail
argument_list|(
name|q
argument_list|)
operator|=
name|prev
expr_stmt|;
name|qlen
argument_list|(
name|q
argument_list|)
operator|--
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_flushq
parameter_list|(
name|class_queue_t
modifier|*
name|q
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
while|while
condition|(
operator|(
name|m
operator|=
name|_getq
argument_list|(
name|q
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
name|m_freem
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GNUC__&& !ALTQ_DEBUG */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ALTQ_ALTQ_CLASSQ_H_ */
end_comment

end_unit

