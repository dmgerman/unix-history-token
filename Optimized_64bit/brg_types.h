begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  ---------------------------------------------------------------------------  Copyright (c) 1998-2006, Brian Gladman, Worcester, UK. All rights reserved.   LICENSE TERMS   The free distribution and use of this software in both source and binary  form is allowed (with or without changes) provided that:     1. distributions of this source code include the above copyright       notice, this list of conditions and the following disclaimer;     2. distributions in binary form include the above copyright       notice, this list of conditions and the following disclaimer       in the documentation and/or other associated materials;     3. the copyright holder's name is not used to endorse products       built using this software without specific written permission.   ALTERNATIVELY, provided that this notice is retained in full, this product  may be distributed under the terms of the GNU General Public License (GPL),  in which case the provisions of the GPL apply INSTEAD OF those given above.   DISCLAIMER   This software is provided 'as is' with no explicit or implied warranties  in respect of its properties, including, but not limited to, correctness  and/or fitness for purpose.  ---------------------------------------------------------------------------  Issue 09/09/2006   The unsigned integer types defined here are of the form uint_<nn>t where<nn> is the length of the type; for example, the unsigned 32-bit type is  'uint_32t'.  These are NOT the same as the 'C99 integer types' that are  defined in the inttypes.h and stdint.h headers since attempts to use these  types have shown that support for them is still highly variable.  However,  since the latter are of the form uint<nn>_t, a regular expression search  and replace (in VC++ search on 'uint_{:z}t' and replace with 'uint\1_t')  can be used to convert the types used here to the C99 standard types. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|BRG_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|BRG_TYPES_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<limits.h>
ifndef|#
directive|ifndef
name|BRG_UI8
define|#
directive|define
name|BRG_UI8
if|#
directive|if
name|UCHAR_MAX
operator|==
literal|255u
typedef|typedef
name|unsigned
name|char
name|uint_8t
typedef|;
else|#
directive|else
error|#
directive|error
error|Please define uint_8t as an 8-bit unsigned integer type in brg_types.h
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|BRG_UI16
define|#
directive|define
name|BRG_UI16
if|#
directive|if
name|USHRT_MAX
operator|==
literal|65535u
typedef|typedef
name|unsigned
name|short
name|uint_16t
typedef|;
else|#
directive|else
error|#
directive|error
error|Please define uint_16t as a 16-bit unsigned short type in brg_types.h
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|BRG_UI32
define|#
directive|define
name|BRG_UI32
if|#
directive|if
name|UINT_MAX
operator|==
literal|4294967295u
define|#
directive|define
name|li_32
parameter_list|(
name|h
parameter_list|)
value|0x##h##u
typedef|typedef
name|unsigned
name|int
name|uint_32t
typedef|;
elif|#
directive|elif
name|ULONG_MAX
operator|==
literal|4294967295u
define|#
directive|define
name|li_32
parameter_list|(
name|h
parameter_list|)
value|0x##h##ul
typedef|typedef
name|unsigned
name|long
name|uint_32t
typedef|;
elif|#
directive|elif
name|defined
argument_list|(
name|_CRAY
argument_list|)
error|#
directive|error
error|This code needs 32-bit data types, which Cray machines do not provide
else|#
directive|else
error|#
directive|error
error|Please define uint_32t as a 32-bit unsigned integer type in brg_types.h
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|BRG_UI64
if|#
directive|if
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__MSDOS__
argument_list|)
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##ui64
typedef|typedef
name|unsigned
name|__int64
name|uint_64t
typedef|;
elif|#
directive|elif
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
operator|(
name|_MSC_VER
operator|<
literal|1300
operator|)
comment|/* 1300 == VC++ 7.0 */
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##ui64
typedef|typedef
name|unsigned
name|__int64
name|uint_64t
typedef|;
elif|#
directive|elif
name|defined
argument_list|(
name|__sun
argument_list|)
operator|&&
name|defined
argument_list|(
name|ULONG_MAX
argument_list|)
operator|&&
name|ULONG_MAX
operator|==
literal|0xfffffffful
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##ull
typedef|typedef
name|unsigned
name|long
name|long
name|uint_64t
typedef|;
elif|#
directive|elif
name|defined
argument_list|(
name|UINT_MAX
argument_list|)
operator|&&
name|UINT_MAX
operator|>
literal|4294967295u
if|#
directive|if
name|UINT_MAX
operator|==
literal|18446744073709551615u
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##u
typedef|typedef
name|unsigned
name|int
name|uint_64t
typedef|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|ULONG_MAX
argument_list|)
operator|&&
name|ULONG_MAX
operator|>
literal|4294967295u
if|#
directive|if
name|ULONG_MAX
operator|==
literal|18446744073709551615ul
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##ul
typedef|typedef
name|unsigned
name|long
name|uint_64t
typedef|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|ULLONG_MAX
argument_list|)
operator|&&
name|ULLONG_MAX
operator|>
literal|4294967295u
if|#
directive|if
name|ULLONG_MAX
operator|==
literal|18446744073709551615ull
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##ull
typedef|typedef
name|unsigned
name|long
name|long
name|uint_64t
typedef|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|ULONG_LONG_MAX
argument_list|)
operator|&&
name|ULONG_LONG_MAX
operator|>
literal|4294967295u
if|#
directive|if
name|ULONG_LONG_MAX
operator|==
literal|18446744073709551615ull
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##ull
typedef|typedef
name|unsigned
name|long
name|long
name|uint_64t
typedef|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
comment|/* DLW: avoid mingw problem with -ansi */
define|#
directive|define
name|BRG_UI64
define|#
directive|define
name|li_64
parameter_list|(
name|h
parameter_list|)
value|0x##h##ull
typedef|typedef
name|unsigned
name|long
name|long
name|uint_64t
typedef|;
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|NEED_UINT_64T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|BRG_UI64
argument_list|)
error|#
directive|error
error|Please define uint_64t as an unsigned 64 bit type in brg_types.h
endif|#
directive|endif
ifndef|#
directive|ifndef
name|RETURN_VALUES
define|#
directive|define
name|RETURN_VALUES
if|#
directive|if
name|defined
argument_list|(
name|DLL_EXPORT
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|||
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
define|#
directive|define
name|VOID_RETURN
value|__declspec( dllexport ) void __stdcall
define|#
directive|define
name|INT_RETURN
value|__declspec( dllexport ) int  __stdcall
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
define|#
directive|define
name|VOID_RETURN
value|__declspec( __dllexport__ ) void
define|#
directive|define
name|INT_RETURN
value|__declspec( __dllexport__ ) int
else|#
directive|else
error|#
directive|error
error|Use of the DLL is only available on the Microsoft, Intel and GCC compilers
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|DLL_IMPORT
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|||
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
define|#
directive|define
name|VOID_RETURN
value|__declspec( dllimport ) void __stdcall
define|#
directive|define
name|INT_RETURN
value|__declspec( dllimport ) int  __stdcall
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
define|#
directive|define
name|VOID_RETURN
value|__declspec( __dllimport__ ) void
define|#
directive|define
name|INT_RETURN
value|__declspec( __dllimport__ ) int
else|#
directive|else
error|#
directive|error
error|Use of the DLL is only available on the Microsoft, Intel and GCC compilers
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|__WATCOMC__
argument_list|)
define|#
directive|define
name|VOID_RETURN
value|void __cdecl
define|#
directive|define
name|INT_RETURN
value|int  __cdecl
else|#
directive|else
define|#
directive|define
name|VOID_RETURN
value|void
define|#
directive|define
name|INT_RETURN
value|int
endif|#
directive|endif
endif|#
directive|endif
comment|/*  These defines are used to declare buffers in a way that allows     faster operations on longer variables to be used.  In all these     defines 'size' must be a power of 2 and>= 8      dec_unit_type(size,x)       declares a variable 'x' of length                                  'size' bits      dec_bufr_type(size,bsize,x) declares a buffer 'x' of length 'bsize'                                  bytes defined as an array of variables                                 each of 'size' bits (bsize must be a                                  multiple of size / 8)      ptr_cast(x,size)            casts a pointer to a pointer to a                                  varaiable of length 'size' bits */
define|#
directive|define
name|ui_type
parameter_list|(
name|size
parameter_list|)
value|uint_##size##t
define|#
directive|define
name|dec_unit_type
parameter_list|(
name|size
parameter_list|,
name|x
parameter_list|)
value|typedef ui_type(size) x
define|#
directive|define
name|dec_bufr_type
parameter_list|(
name|size
parameter_list|,
name|bsize
parameter_list|,
name|x
parameter_list|)
value|typedef ui_type(size) x[bsize / (size>> 3)]
define|#
directive|define
name|ptr_cast
parameter_list|(
name|x
parameter_list|,
name|size
parameter_list|)
value|((ui_type(size)*)(x))
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

