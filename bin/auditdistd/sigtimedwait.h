begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Pawel Jakub Dawidek under sponsorship from  * the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $P4: //depot/projects/trustedbsd/openbsm/bin/auditdistd/sigtimedwait.h#1 $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SIGTIMEDWAIT_H_
end_ifndef

begin_define
define|#
directive|define
name|_SIGTIMEDWAIT_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<signal.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<pjdlog.h>
end_include

begin_function
specifier|static
name|int
name|sigtimedwait
parameter_list|(
specifier|const
name|sigset_t
modifier|*
name|set
parameter_list|,
name|siginfo_t
modifier|*
name|info
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout
parameter_list|)
block|{
name|struct
name|itimerval
name|it
decl_stmt|;
name|sigset_t
name|mask
decl_stmt|;
name|int
name|error
decl_stmt|,
name|signo
decl_stmt|;
name|PJDLOG_ASSERT
argument_list|(
name|info
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigemptyset
argument_list|(
operator|&
name|mask
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigaddset
argument_list|(
operator|&
name|mask
argument_list|,
name|SIGALRM
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigprocmask
argument_list|(
name|SIG_BLOCK
argument_list|,
operator|&
name|mask
argument_list|,
name|NULL
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|timerclear
argument_list|(
operator|&
name|it
operator|.
name|it_interval
argument_list|)
expr_stmt|;
name|it
operator|.
name|it_value
operator|.
name|tv_sec
operator|=
name|timeout
operator|->
name|tv_sec
expr_stmt|;
name|it
operator|.
name|it_value
operator|.
name|tv_usec
operator|=
name|timeout
operator|->
name|tv_nsec
operator|/
literal|1000
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|it_value
operator|.
name|tv_sec
operator|==
literal|0
operator|&&
name|it
operator|.
name|it_value
operator|.
name|tv_usec
operator|==
literal|0
condition|)
name|it
operator|.
name|it_value
operator|.
name|tv_usec
operator|=
literal|1
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|setitimer
argument_list|(
name|ITIMER_REAL
argument_list|,
operator|&
name|it
argument_list|,
name|NULL
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|set
argument_list|,
operator|&
name|mask
argument_list|,
sizeof|sizeof
argument_list|(
name|mask
argument_list|)
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigaddset
argument_list|(
operator|&
name|mask
argument_list|,
name|SIGALRM
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigwait
argument_list|(
operator|&
name|mask
argument_list|,
operator|&
name|signo
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|error
operator|=
name|errno
expr_stmt|;
name|timerclear
argument_list|(
operator|&
name|it
operator|.
name|it_interval
argument_list|)
expr_stmt|;
name|timerclear
argument_list|(
operator|&
name|it
operator|.
name|it_value
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|setitimer
argument_list|(
name|ITIMER_REAL
argument_list|,
operator|&
name|it
argument_list|,
name|NULL
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigemptyset
argument_list|(
operator|&
name|mask
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigaddset
argument_list|(
operator|&
name|mask
argument_list|,
name|SIGALRM
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|PJDLOG_VERIFY
argument_list|(
name|sigprocmask
argument_list|(
name|SIG_UNBLOCK
argument_list|,
operator|&
name|mask
argument_list|,
name|NULL
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|signo
operator|==
name|SIGALRM
condition|)
block|{
name|errno
operator|=
name|EAGAIN
expr_stmt|;
name|signo
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|errno
operator|=
name|error
expr_stmt|;
block|}
return|return
operator|(
name|signo
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_SIGTIMEDWAIT_H_ */
end_comment

end_unit

