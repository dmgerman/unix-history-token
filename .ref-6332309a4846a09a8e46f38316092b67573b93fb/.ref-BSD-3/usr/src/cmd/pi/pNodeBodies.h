begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_union
union|union
name|pNodeBodies
block|{
struct|struct
name|IntNode
block|{
name|long
name|IntValue
decl_stmt|;
block|}
struct|;
struct|struct
name|RealNode
block|{
name|float
name|RealValue
decl_stmt|;
block|}
struct|;
comment|/* 	 *	these are actually allocated by 	 *	pNewNode( StringTAG , strlen( string ) + 1 ) 	 */
struct|struct
name|StringNode
block|{
name|char
name|StringValue
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|ListNode
block|{
name|pPointer
name|ListUp
decl_stmt|;
name|pPointer
name|ListDown
decl_stmt|;
name|pPointer
name|ListItem
decl_stmt|;
block|}
struct|;
struct|struct
name|ThreadNode
block|{
name|pPointer
name|ThreadPointer
decl_stmt|;
block|}
struct|;
comment|/* 	 *	note that the first several GlobNodes fields are 	 *	one pPointer off from PorFNodes. 	 *	this so the simple-minded code in fdec works, 	 *	attaching the program to GlobProg as a PorFPFs 	 */
struct|struct
name|GlobNode
block|{
name|pPointer
name|GlobaAlign
decl_stmt|;
name|pPointer
name|GlobbAlign
decl_stmt|;
name|pPointer
name|GlobConsts
decl_stmt|;
name|pPointer
name|GlobTypes
decl_stmt|;
name|pPointer
name|GlobVars
decl_stmt|;
name|pPointer
name|GlobPFs
decl_stmt|;
name|pPointer
name|GlobProg
decl_stmt|;
block|}
struct|;
struct|struct
name|PorFNode
block|{
name|pPointer
name|PorFName
decl_stmt|;
name|pPointer
name|PorFParams
decl_stmt|;
name|pPointer
name|PorFLabels
decl_stmt|;
name|pPointer
name|PorFConsts
decl_stmt|;
name|pPointer
name|PorFTypes
decl_stmt|;
name|pPointer
name|PorFVars
decl_stmt|;
name|pPointer
name|PorFPFs
decl_stmt|;
name|pPointer
name|PorFBody
decl_stmt|;
name|pPointer
name|PorFReturns
decl_stmt|;
name|short
name|PorFForward
decl_stmt|;
block|}
struct|;
struct|struct
name|BConstNode
block|{
name|pPointer
name|BConstName
decl_stmt|;
block|}
struct|;
struct|struct
name|BTypeNode
block|{
name|pPointer
name|BTypeName
decl_stmt|;
block|}
struct|;
struct|struct
name|BVarNode
block|{
name|pPointer
name|BVarName
decl_stmt|;
block|}
struct|;
struct|struct
name|BFuncNode
block|{
name|pPointer
name|BFuncName
decl_stmt|;
block|}
struct|;
struct|struct
name|BProcNode
block|{
name|pPointer
name|BProcName
decl_stmt|;
block|}
struct|;
struct|struct
name|LabelDNode
block|{
name|pPointer
name|LabelDName
decl_stmt|;
block|}
struct|;
struct|struct
name|ConstDNode
block|{
name|pPointer
name|ConstDName
decl_stmt|;
name|pPointer
name|ConstDValue
decl_stmt|;
block|}
struct|;
comment|/* 	 * used to head lists of identically typed names: e.g. vars and fields. 	 * also for overlays with TypeDNodes, VarDNodes, FieldDNodes, etc. 	 */
struct|struct
name|TypedNode
block|{
name|pPointer
name|TypedNames
decl_stmt|;
name|pPointer
name|TypedType
decl_stmt|;
block|}
struct|;
struct|struct
name|TypeDNode
block|{
name|pPointer
name|TypeDName
decl_stmt|;
name|pPointer
name|TypeDType
decl_stmt|;
block|}
struct|;
struct|struct
name|EnumTNode
block|{
name|pPointer
name|EnumTScalars
decl_stmt|;
block|}
struct|;
struct|struct
name|ScalDNode
block|{
name|pPointer
name|ScalDName
decl_stmt|;
block|}
struct|;
struct|struct
name|RangeTNode
block|{
name|pPointer
name|RangeTLower
decl_stmt|;
name|pPointer
name|RangeTUpper
decl_stmt|;
block|}
struct|;
struct|struct
name|SetTNode
block|{
name|pPointer
name|SetTType
decl_stmt|;
block|}
struct|;
struct|struct
name|FileTNode
block|{
name|pPointer
name|FileTType
decl_stmt|;
block|}
struct|;
struct|struct
name|PtrTNode
block|{
name|pPointer
name|PtrTType
decl_stmt|;
block|}
struct|;
struct|struct
name|PackTNode
block|{
name|pPointer
name|PackTType
decl_stmt|;
block|}
struct|;
struct|struct
name|ArrayTNode
block|{
name|pPointer
name|ArrayTDims
decl_stmt|;
name|pPointer
name|ArrayTType
decl_stmt|;
block|}
struct|;
struct|struct
name|RecTNode
block|{
name|pPointer
name|RecTFldlst
decl_stmt|;
block|}
struct|;
struct|struct
name|FldlstNode
block|{
name|pPointer
name|FldlstFixed
decl_stmt|;
name|pPointer
name|FldlstVariants
decl_stmt|;
block|}
struct|;
struct|struct
name|FieldDNode
block|{
name|pPointer
name|FieldDName
decl_stmt|;
name|pPointer
name|FieldDType
decl_stmt|;
block|}
struct|;
struct|struct
name|VarntNode
block|{
name|pPointer
name|VarntTag
decl_stmt|;
name|pPointer
name|VarntCases
decl_stmt|;
block|}
struct|;
struct|struct
name|VCaseNode
block|{
name|pPointer
name|VCaseConst
decl_stmt|;
name|pPointer
name|VCaseRec
decl_stmt|;
block|}
struct|;
struct|struct
name|VarDNode
block|{
name|pPointer
name|VarDName
decl_stmt|;
name|pPointer
name|VarDType
decl_stmt|;
block|}
struct|;
comment|/* 	 *	not really in the tree, 	 *	used as an overlay for ValPNodes and VarPNodes in ParamCopy 	 */
struct|struct
name|ParamDNode
block|{
name|pPointer
name|ParamDName
decl_stmt|;
name|pPointer
name|ParamDType
decl_stmt|;
block|}
struct|;
struct|struct
name|ValPNode
block|{
name|pPointer
name|ValPName
decl_stmt|;
name|pPointer
name|ValPType
decl_stmt|;
block|}
struct|;
struct|struct
name|VarPNode
block|{
name|pPointer
name|VarPName
decl_stmt|;
name|pPointer
name|VarPType
decl_stmt|;
block|}
struct|;
struct|struct
name|AssignNode
block|{
name|pPointer
name|AssignVar
decl_stmt|;
name|pPointer
name|AssignExpr
decl_stmt|;
block|}
struct|;
struct|struct
name|PCallNode
block|{
name|pPointer
name|PCallId
decl_stmt|;
name|pPointer
name|PCallActuals
decl_stmt|;
block|}
struct|;
struct|struct
name|IfNode
block|{
name|pPointer
name|IfCond
decl_stmt|;
name|pPointer
name|IfThen
decl_stmt|;
name|pPointer
name|IfElse
decl_stmt|;
block|}
struct|;
struct|struct
name|WhileNode
block|{
name|pPointer
name|WhileExpr
decl_stmt|;
name|pPointer
name|WhileStat
decl_stmt|;
block|}
struct|;
struct|struct
name|RepeatNode
block|{
name|pPointer
name|RepeatStat
decl_stmt|;
name|pPointer
name|RepeatExpr
decl_stmt|;
block|}
struct|;
struct|struct
name|ForUNode
block|{
name|pPointer
name|ForUAssign
decl_stmt|;
name|pPointer
name|ForUExpr
decl_stmt|;
name|pPointer
name|ForUStat
decl_stmt|;
block|}
struct|;
struct|struct
name|ForDNode
block|{
name|pPointer
name|ForDAssign
decl_stmt|;
name|pPointer
name|ForDExpr
decl_stmt|;
name|pPointer
name|ForDStat
decl_stmt|;
block|}
struct|;
struct|struct
name|CaseSNode
block|{
name|pPointer
name|CaseSExpr
decl_stmt|;
name|pPointer
name|CaseSStat
decl_stmt|;
block|}
struct|;
struct|struct
name|CasedNode
block|{
name|pPointer
name|CasedLabel
decl_stmt|;
name|pPointer
name|CasedStat
decl_stmt|;
block|}
struct|;
struct|struct
name|GotoNode
block|{
name|pPointer
name|GotoLabel
decl_stmt|;
block|}
struct|;
struct|struct
name|LabelNode
block|{
name|pPointer
name|LabelLabel
decl_stmt|;
block|}
struct|;
struct|struct
name|WithNode
block|{
name|pPointer
name|WithVars
decl_stmt|;
name|pPointer
name|WithStat
decl_stmt|;
block|}
struct|;
struct|struct
name|AssertNode
block|{
name|pPointer
name|AssertExpr
decl_stmt|;
block|}
struct|;
comment|/* 	 * not actually in the tree, 	 * for use as overlay with binary operator pNodes 	 */
struct|struct
name|BinOpNode
block|{
name|pPointer
name|BinOpLeft
decl_stmt|;
name|pPointer
name|BinOpRight
decl_stmt|;
block|}
struct|;
struct|struct
name|AndNode
block|{
name|pPointer
name|AndLeft
decl_stmt|;
name|pPointer
name|AndRight
decl_stmt|;
block|}
struct|;
struct|struct
name|OrNode
block|{
name|pPointer
name|OrLeft
decl_stmt|;
name|pPointer
name|OrRight
decl_stmt|;
block|}
struct|;
struct|struct
name|EqNode
block|{
name|pPointer
name|EqLeft
decl_stmt|;
name|pPointer
name|EqRight
decl_stmt|;
block|}
struct|;
struct|struct
name|NeNode
block|{
name|pPointer
name|NeLeft
decl_stmt|;
name|pPointer
name|NeRight
decl_stmt|;
block|}
struct|;
struct|struct
name|LtNode
block|{
name|pPointer
name|LtLeft
decl_stmt|;
name|pPointer
name|LtRight
decl_stmt|;
block|}
struct|;
struct|struct
name|GtNode
block|{
name|pPointer
name|GtLeft
decl_stmt|;
name|pPointer
name|GtRight
decl_stmt|;
block|}
struct|;
struct|struct
name|LeNode
block|{
name|pPointer
name|LeLeft
decl_stmt|;
name|pPointer
name|LeRight
decl_stmt|;
block|}
struct|;
struct|struct
name|GeNode
block|{
name|pPointer
name|GeLeft
decl_stmt|;
name|pPointer
name|GeRight
decl_stmt|;
block|}
struct|;
struct|struct
name|InNode
block|{
name|pPointer
name|InLeft
decl_stmt|;
name|pPointer
name|InRight
decl_stmt|;
block|}
struct|;
struct|struct
name|AddNode
block|{
name|pPointer
name|AddLeft
decl_stmt|;
name|pPointer
name|AddRight
decl_stmt|;
block|}
struct|;
struct|struct
name|SubNode
block|{
name|pPointer
name|SubLeft
decl_stmt|;
name|pPointer
name|SubRight
decl_stmt|;
block|}
struct|;
struct|struct
name|MultNode
block|{
name|pPointer
name|MultLeft
decl_stmt|;
name|pPointer
name|MultRight
decl_stmt|;
block|}
struct|;
struct|struct
name|DivdNode
block|{
name|pPointer
name|DivdLeft
decl_stmt|;
name|pPointer
name|DivdRight
decl_stmt|;
block|}
struct|;
struct|struct
name|DivNode
block|{
name|pPointer
name|DivLeft
decl_stmt|;
name|pPointer
name|DivRight
decl_stmt|;
block|}
struct|;
struct|struct
name|ModNode
block|{
name|pPointer
name|ModLeft
decl_stmt|;
name|pPointer
name|ModRight
decl_stmt|;
block|}
struct|;
comment|/*      * not actually in the tree,      * for use as overlay with unary operator pNodes      */
struct|struct
name|UnOpNode
block|{
name|pPointer
name|UnOpExpr
decl_stmt|;
block|}
struct|;
struct|struct
name|PlusNode
block|{
name|pPointer
name|PlusExpr
decl_stmt|;
block|}
struct|;
struct|struct
name|MinusNode
block|{
name|pPointer
name|MinusExpr
decl_stmt|;
block|}
struct|;
struct|struct
name|NotNode
block|{
name|pPointer
name|NotExpr
decl_stmt|;
block|}
struct|;
struct|struct
name|FCallNode
block|{
name|pPointer
name|FCallId
decl_stmt|;
name|pPointer
name|FCallActuals
decl_stmt|;
block|}
struct|;
struct|struct
name|SetNode
block|{
name|pPointer
name|SetElements
decl_stmt|;
block|}
struct|;
struct|struct
name|RangeNode
block|{
name|pPointer
name|RangeLower
decl_stmt|;
name|pPointer
name|RangeUpper
decl_stmt|;
block|}
struct|;
struct|struct
name|VarNode
block|{
name|pPointer
name|VarId
decl_stmt|;
name|pPointer
name|VarQuals
decl_stmt|;
block|}
struct|;
comment|/* 	 *	one of these indicates pointer indirection. 	 *	they are actually allocated by pNewNode( PtrTAG , 0 ) 	 */
struct|struct
name|PtrNode
block|{
name|char
name|PtrPrescence
decl_stmt|;
block|}
struct|;
struct|struct
name|SubscNode
block|{
name|pPointer
name|SubscSubsc
decl_stmt|;
block|}
struct|;
struct|struct
name|SelNode
block|{
name|pPointer
name|SelField
decl_stmt|;
block|}
struct|;
comment|/* 	 *	one of these indicates the value NIL 	 *	they are actually allocated by pNewNode( NilTAG , 0 ) 	 */
struct|struct
name|NilNode
block|{
name|char
name|NilValue
decl_stmt|;
block|}
struct|;
struct|struct
name|WidthNode
block|{
name|pPointer
name|WidthExpr
decl_stmt|;
name|pPointer
name|WidthWidth
decl_stmt|;
name|pPointer
name|WidthPlaces
decl_stmt|;
name|pPointer
name|WidthRadix
decl_stmt|;
block|}
struct|;
comment|/* 	 *	one of these indicates octal radix conversion 	 *	they are actually allocated by pNewNode( OctTAG , 0 ) 	 */
struct|struct
name|OctNode
block|{
name|char
name|OctRadix
decl_stmt|;
block|}
struct|;
comment|/* 	 *	one of these indicates hexadecimal radix conversion 	 *	they are actually allocated by pNewNode( HexTAG , 0 ) 	 */
struct|struct
name|HexNode
block|{
name|char
name|HexRadix
decl_stmt|;
block|}
struct|;
block|}
union|;
end_union

end_unit

