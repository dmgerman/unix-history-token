begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1991, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)extern.h	8.1 (Berkeley) 6/6/93  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|WR
parameter_list|(
name|p
parameter_list|,
name|size
parameter_list|)
value|do { \ 	if (write(STDOUT_FILENO, p, size) != (ssize_t)size) \ 		oerr(); \ 	} while(0)
end_define

begin_define
define|#
directive|define
name|TAILMAPLEN
value|(4<<20)
end_define

begin_struct
struct|struct
name|mapinfo
block|{
name|off_t
name|mapoff
decl_stmt|;
name|off_t
name|maxoff
decl_stmt|;
name|size_t
name|maplen
decl_stmt|;
name|char
modifier|*
name|start
decl_stmt|;
name|int
name|fd
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|STYLE
block|{
name|NOTSET
init|=
literal|0
block|,
name|FBYTES
block|,
name|FLINES
block|,
name|RBYTES
block|,
name|RLINES
block|,
name|REVERSE
block|}
enum|;
end_enum

begin_decl_stmt
name|void
name|forward
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|enum
name|STYLE
operator|,
name|off_t
operator|,
expr|struct
name|stat
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|reverse
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|enum
name|STYLE
operator|,
name|off_t
operator|,
expr|struct
name|stat
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|bytes
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|off_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|lines
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|off_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|ierr
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|oerr
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|mapprint
name|__P
argument_list|(
operator|(
expr|struct
name|mapinfo
operator|*
operator|,
name|off_t
operator|,
name|off_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|maparound
name|__P
argument_list|(
operator|(
expr|struct
name|mapinfo
operator|*
operator|,
name|off_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|Fflag
decl_stmt|,
name|fflag
decl_stmt|,
name|rflag
decl_stmt|,
name|rval
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|fname
decl_stmt|;
end_decl_stmt

end_unit

