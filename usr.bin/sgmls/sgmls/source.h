begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* SOURCE.H: Entity and source control block structures and definitions. */
end_comment

begin_define
define|#
directive|define
name|ENTHASH
value|503
end_define

begin_comment
comment|/* Size of entity hash table.  Must be prime. */
end_comment

begin_comment
comment|/* Entity storage class values for estore member of entity structure. */
end_comment

begin_define
define|#
directive|define
name|EST
value|1
end_define

begin_comment
comment|/* String: Tag (usually a fixed STARTGI). */
end_comment

begin_comment
comment|/*<MDENTITY sets these:> */
end_comment

begin_define
define|#
directive|define
name|ESMD
value|2
end_define

begin_comment
comment|/* String: Markup declaration. */
end_comment

begin_define
define|#
directive|define
name|ESMS
value|3
end_define

begin_comment
comment|/* String: Marked section. */
end_comment

begin_define
define|#
directive|define
name|ESM
value|4
end_define

begin_comment
comment|/* String: ordinary text. */
end_comment

begin_comment
comment|/*<ENTOPEN treats these specially:> */
end_comment

begin_define
define|#
directive|define
name|ESS
value|5
end_define

begin_comment
comment|/* ETD: Start-tag. */
end_comment

begin_define
define|#
directive|define
name|ESE
value|6
end_define

begin_comment
comment|/* ETD: End-tag. */
end_comment

begin_define
define|#
directive|define
name|ESI
value|7
end_define

begin_comment
comment|/* String: PI. */
end_comment

begin_define
define|#
directive|define
name|ESX
value|8
end_define

begin_comment
comment|/* String: SDATA general entity. */
end_comment

begin_define
define|#
directive|define
name|ESC
value|9
end_define

begin_comment
comment|/* String: CDATA general entity. */
end_comment

begin_comment
comment|/*</MDENTITY><MDEXTID sets these:> */
end_comment

begin_define
define|#
directive|define
name|ESFM
value|10
end_define

begin_comment
comment|/* LPU: minimum external (file) storage class. */
end_comment

begin_define
define|#
directive|define
name|ESN
value|10
end_define

begin_comment
comment|/* XCB: N/C/SDATA or SUBDOC control block. */
end_comment

begin_comment
comment|/*</ENTOPEN> */
end_comment

begin_define
define|#
directive|define
name|ESF
value|11
end_define

begin_comment
comment|/* LPU: General entity. */
end_comment

begin_define
define|#
directive|define
name|ESP
value|12
end_define

begin_comment
comment|/* LPU: Parameter entity. */
end_comment

begin_define
define|#
directive|define
name|ESD
value|13
end_define

begin_comment
comment|/* LPU: Document type definition. */
end_comment

begin_define
define|#
directive|define
name|ESL
value|14
end_define

begin_comment
comment|/* LPU: Link process definition. */
end_comment

begin_define
define|#
directive|define
name|ESK
value|15
end_define

begin_comment
comment|/* LPU: Data content notation. */
end_comment

begin_comment
comment|/*</MDEXTID> */
end_comment

begin_union
union|union
name|etext
block|{
comment|/* Entity text. */
name|UNIV
name|x
decl_stmt|;
comment|/* External ID generated by system. */
name|UNCH
modifier|*
name|c
decl_stmt|;
comment|/* Character string. */
name|struct
name|ne
modifier|*
name|n
decl_stmt|;
comment|/* N/C/SDATA or SUBDOC entity control block. */
block|}
union|;
end_union

begin_define
define|#
directive|define
name|ETEXTSZ
value|sizeof(union etext)
end_define

begin_struct
struct|struct
name|entity
block|{
comment|/* Entity control block. */
name|struct
name|entity
modifier|*
name|enext
decl_stmt|;
comment|/* Next entity in chain. */
name|UNCH
modifier|*
name|ename
decl_stmt|;
comment|/* Entity name with length and EOS. */
name|UNCH
name|estore
decl_stmt|;
comment|/* Storage class (see values above). */
name|UNCH
name|dflt
decl_stmt|;
comment|/* Declared as default entity. */
name|UNCH
name|mark
decl_stmt|;
comment|/* For use by for sgmlment. */
name|union
name|etext
name|etx
decl_stmt|;
comment|/* Entity text. */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ENTSZ
value|sizeof(struct entity)
end_define

begin_typedef
typedef|typedef
name|struct
name|entity
modifier|*
name|PECB
typedef|;
end_typedef

begin_comment
comment|/* Ptr to entity control block. */
end_comment

begin_typedef
typedef|typedef
name|struct
name|entity
modifier|*
modifier|*
name|TECB
typedef|;
end_typedef

begin_comment
comment|/* Table of entity control blocks. */
end_comment

begin_struct
struct|struct
name|source
block|{
comment|/* Source control block. */
name|struct
name|entity
name|ecb
decl_stmt|;
comment|/* Entity control block. */
name|unsigned
name|long
name|rcnt
decl_stmt|;
comment|/* Source record number. */
name|int
name|ccnt
decl_stmt|;
comment|/* Source record chars since last RS. */
name|int
name|curoff
decl_stmt|;
comment|/* Offset of curchar (chars read in this block).*/
name|UNCH
name|curchar
decl_stmt|;
comment|/* Current character. */
name|UNCH
name|nextchar
decl_stmt|;
comment|/* If curchar was DELNONCH, next character. */
name|UNIV
name|fcb
decl_stmt|;
comment|/* SGMLIO fcb ptr returned by OPEN. */
name|UNCH
modifier|*
name|fbuf
decl_stmt|;
comment|/* 1st char in buffer (0=PEND) or entity text. */
name|UNCH
modifier|*
name|fpos
decl_stmt|;
comment|/* Current char in buffer or entity text. */
name|UNCH
name|pushback
decl_stmt|;
comment|/* Character before pend position */
name|char
name|copied
decl_stmt|;
comment|/* Is this a copy of the internal entity? */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SCBSZ
value|sizeof(struct source)
end_define

begin_typedef
typedef|typedef
name|struct
name|source
modifier|*
name|PSCB
typedef|;
end_typedef

begin_comment
comment|/* Ptr to source control block. */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|es
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Index of current source in stack. */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|source
modifier|*
name|scbs
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Stack of open sources ("SCB stack"). */
end_comment

begin_comment
comment|/* Member definitions for source and entity control blocks. */
end_comment

begin_define
define|#
directive|define
name|SCB
value|(scbs[es])
end_define

begin_comment
comment|/* Ptr to current source control block. */
end_comment

begin_define
define|#
directive|define
name|ECB
value|SCB.ecb
end_define

begin_comment
comment|/* Pointer to current entity control block. */
end_comment

begin_define
define|#
directive|define
name|FBUF
value|SCB.fbuf
end_define

begin_comment
comment|/* Pointer to start of entity buffer. */
end_comment

begin_define
define|#
directive|define
name|FPOS
value|SCB.fpos
end_define

begin_comment
comment|/* Pointer to current char of current source. */
end_comment

begin_define
define|#
directive|define
name|RSCC
value|SCB.ccnt
end_define

begin_comment
comment|/* CCNT at start of block (across EOB/EOS/EOF). */
end_comment

begin_define
define|#
directive|define
name|CCO
value|SCB.curoff
end_define

begin_comment
comment|/* Offset in read buffer of current char. */
end_comment

begin_define
define|#
directive|define
name|CC
value|SCB.curchar
end_define

begin_comment
comment|/* Current character of current source entity. */
end_comment

begin_define
define|#
directive|define
name|NEXTC
value|SCB.nextchar
end_define

begin_comment
comment|/* Next character in current source entity. */
end_comment

begin_define
define|#
directive|define
name|CCNT
value|(SCB.ccnt+CCO)
end_define

begin_comment
comment|/* Position of CC in current record (RS=0). */
end_comment

begin_define
define|#
directive|define
name|RCNT
value|SCB.rcnt
end_define

begin_comment
comment|/* Position of record in entity (origin=1). */
end_comment

begin_define
define|#
directive|define
name|SCBFCB
value|SCB.fcb
end_define

begin_comment
comment|/* Current file control block (if FILESW). */
end_comment

begin_define
define|#
directive|define
name|ECBPTR
value|((ECB.enext))
end_define

begin_comment
comment|/* Pointer to this entity's ECB. */
end_comment

begin_define
define|#
directive|define
name|ENTITY
value|((ECB.ename))
end_define

begin_comment
comment|/* Current entity name. */
end_comment

begin_define
define|#
directive|define
name|FILESW
value|(ECB.estore>=ESFM)
end_define

begin_comment
comment|/* 1=Entity is external file; 0=internal. */
end_comment

begin_define
define|#
directive|define
name|NEWCC
value|(++FPOS)
end_define

begin_comment
comment|/* Get next current character. */
end_comment

begin_define
define|#
directive|define
name|REPEATCC
value|(--FPOS)
end_define

begin_comment
comment|/* Repeat previous current character. */
end_comment

begin_define
define|#
directive|define
name|COPIEDSW
value|SCB.copied
end_define

begin_comment
comment|/* Non-zero means entity was copied. */
end_comment

begin_struct
struct|struct
name|srh
block|{
comment|/* Short reference map header. */
name|struct
name|srh
modifier|*
name|enext
decl_stmt|;
comment|/* Next short reference map in chain. */
name|UNCH
modifier|*
name|ename
decl_stmt|;
comment|/* Short reference map name. */
name|TECB
name|srhsrm
decl_stmt|;
comment|/* Ptr to short reference map. */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SRHSZ
value|(sizeof(struct srh))
end_define

begin_typedef
typedef|typedef
name|struct
name|srh
modifier|*
name|PSRH
typedef|;
end_typedef

begin_comment
comment|/* Ptr to short reference map header. */
end_comment

begin_define
define|#
directive|define
name|SRMNULL
value|(&dumpecb)
end_define

begin_comment
comment|/* Dummy ptr to empty short reference map. */
end_comment

begin_comment
comment|/* Definitions for ENTOPEN/ENTREF return codes. */
end_comment

begin_define
define|#
directive|define
name|ENTUNDEF
value|-1
end_define

begin_comment
comment|/* Callers of ENTOPEN: entity undefined. */
end_comment

begin_define
define|#
directive|define
name|ENTLOOP
value|-2
end_define

begin_comment
comment|/* ENTOPEN: endless loop entity. */
end_comment

begin_define
define|#
directive|define
name|ENTMAX
value|-3
end_define

begin_comment
comment|/* ENTOPEN: too many open entities. */
end_comment

begin_define
define|#
directive|define
name|ENTFILE
value|-4
end_define

begin_comment
comment|/* ENTOPEN: file I/O error. */
end_comment

begin_define
define|#
directive|define
name|ENTDATA
value|-5
end_define

begin_comment
comment|/* ENTOPEN: CDATA or SDATA entity. */
end_comment

begin_define
define|#
directive|define
name|ENTPI
value|-6
end_define

begin_comment
comment|/* ENTOPEN: PI entity. */
end_comment

begin_comment
comment|/* Definitions for ENTDATA switches set in contersw. */
end_comment

begin_define
define|#
directive|define
name|CDECONT
value|2
end_define

begin_comment
comment|/* 0010 CDATA entity referenced. */
end_comment

begin_define
define|#
directive|define
name|SDECONT
value|4
end_define

begin_comment
comment|/* 0100 SDATA entity referenced. */
end_comment

begin_define
define|#
directive|define
name|NDECONT
value|8
end_define

begin_comment
comment|/* 1000 NDATA entity referenced. */
end_comment

begin_comment
comment|/* Definitions for manipulating signed source character counters. */
end_comment

begin_define
define|#
directive|define
name|CTRSET
parameter_list|(
name|CTR
parameter_list|)
value|(CTR = (int) -(FPOS+1-FBUF))
end_define

begin_comment
comment|/* Init source char ctr. */
end_comment

begin_define
define|#
directive|define
name|CTRGET
parameter_list|(
name|CTR
parameter_list|)
value|(CTR + (int)  (FPOS+1-FBUF))
end_define

begin_comment
comment|/* Read source char ctr. */
end_comment

end_unit

