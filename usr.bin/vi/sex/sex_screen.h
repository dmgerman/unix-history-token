begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1993, 1994  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)sex_screen.h	8.20 (Berkeley) 8/8/94  */
end_comment

begin_define
define|#
directive|define
name|SEX_NORAW
parameter_list|(
name|t
parameter_list|)
define|\
value|tcsetattr(STDIN_FILENO, TCSADRAIN | TCSASOFT,&(t))
end_define

begin_define
define|#
directive|define
name|SEX_RAW
parameter_list|(
name|t
parameter_list|)
value|{							\ 	struct termios __rawt;						\ 	if (tcgetattr(STDIN_FILENO,&(t)))				\ 		return (1);						\ 	__rawt = (t);							\ 	__rawt.c_iflag&= ~(IGNBRK|BRKINT|PARMRK|INLCR|IGNCR|ICRNL);	\ 	__rawt.c_lflag&= ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);		\ 	__rawt.c_oflag |= OPOST | ONLCR;				\ 	__rawt.c_cc[VMIN] = 1;						\ 	__rawt.c_cc[VTIME] = 0;						\ 	if (tcsetattr(STDIN_FILENO, TCSADRAIN | TCSASOFT,&__rawt))	\ 		return (1);						\ }
end_define

begin_typedef
typedef|typedef
struct|struct
name|_sex_private
block|{
comment|/* INITIALIZED AT SCREEN CREATE. */
name|int
name|__unused
decl_stmt|;
comment|/* Make sure it's not empty. */
comment|/* PARTIALLY OR COMPLETELY COPIED FROM PREVIOUS SCREEN. */
ifndef|#
directive|ifndef
name|SYSV_CURSES
name|char
modifier|*
name|SE
decl_stmt|,
modifier|*
name|SO
decl_stmt|;
comment|/* Inverse video termcap strings. */
endif|#
directive|endif
block|}
name|SEX_PRIVATE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|SXP
parameter_list|(
name|sp
parameter_list|)
value|((SEX_PRIVATE *)((sp)->sex_private))
end_define

begin_decl_stmt
name|void
name|sex_bell
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|sex_busy
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|char
specifier|const
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|confirm
name|sex_confirm
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|EXF
operator|*
operator|,
name|MARK
operator|*
operator|,
name|MARK
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|input
name|sex_get
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|EXF
operator|*
operator|,
name|TEXTH
operator|*
operator|,
name|ARG_CHAR_T
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|input
name|sex_key_read
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|int
operator|*
operator|,
expr|struct
name|timeval
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sex_optchange
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sex_refresh
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|EXF
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sex_screen_copy
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|SCR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sex_screen_edit
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|EXF
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sex_screen_end
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sex_suspend
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sex_window
name|__P
argument_list|(
operator|(
name|SCR
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

