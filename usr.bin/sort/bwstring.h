begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (C) 2009 Gabor Kovesdan<gabor@FreeBSD.org>  * Copyright (C) 2012 Oleg Moskalenko<mom040267@gmail.com>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__BWSTRING_H__
argument_list|)
end_if

begin_define
define|#
directive|define
name|__BWSTRING_H__
end_define

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<sysexits.h>
end_include

begin_include
include|#
directive|include
file|<wchar.h>
end_include

begin_include
include|#
directive|include
file|"mem.h"
end_include

begin_decl_stmt
specifier|extern
name|bool
name|byte_sort
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* wchar_t is of 4 bytes: */
end_comment

begin_define
define|#
directive|define
name|SIZEOF_WCHAR_STRING
parameter_list|(
name|LEN
parameter_list|)
value|((LEN)*sizeof(wchar_t))
end_define

begin_comment
comment|/*  * Binary "wide" string  */
end_comment

begin_struct
struct|struct
name|bwstring
block|{
name|size_t
name|len
decl_stmt|;
union|union
block|{
name|wchar_t
name|wstr
index|[
literal|0
index|]
decl_stmt|;
name|unsigned
name|char
name|cstr
index|[
literal|0
index|]
decl_stmt|;
block|}
name|data
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|reader_buffer
block|{
name|wchar_t
modifier|*
name|fgetwln_z_buffer
decl_stmt|;
name|size_t
name|fgetwln_z_buffer_size
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|void
modifier|*
name|bwstring_iterator
typedef|;
end_typedef

begin_define
define|#
directive|define
name|BWSLEN
parameter_list|(
name|s
parameter_list|)
value|((s)->len)
end_define

begin_function_decl
name|struct
name|bwstring
modifier|*
name|bwsalloc
parameter_list|(
name|size_t
name|sz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|bwsrawlen
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|bws
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|bwsrawdata
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|bws
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bws_setlen
parameter_list|(
name|struct
name|bwstring
modifier|*
name|bws
parameter_list|,
name|size_t
name|newlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|bws_memsize
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|bws
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|bwstod
parameter_list|(
name|struct
name|bwstring
modifier|*
name|s0
parameter_list|,
name|bool
modifier|*
name|empty
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bws_month_score
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|s0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|ignore_leading_blanks
parameter_list|(
name|struct
name|bwstring
modifier|*
name|str
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|ignore_nonprinting
parameter_list|(
name|struct
name|bwstring
modifier|*
name|str
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|dictionary_order
parameter_list|(
name|struct
name|bwstring
modifier|*
name|str
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|ignore_case
parameter_list|(
name|struct
name|bwstring
modifier|*
name|str
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bwsprintf
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|struct
name|bwstring
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|suffix
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bws_disorder_warnx
parameter_list|(
name|struct
name|bwstring
modifier|*
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|fn
parameter_list|,
name|size_t
name|pos
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|bwsdup
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|bwssbdup
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|str
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|bwscsbdup
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|str
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bwsfree
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|bwscpy
parameter_list|(
name|struct
name|bwstring
modifier|*
name|dst
parameter_list|,
specifier|const
name|struct
name|bwstring
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|bwsncpy
parameter_list|(
name|struct
name|bwstring
modifier|*
name|dst
parameter_list|,
specifier|const
name|struct
name|bwstring
modifier|*
name|src
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|bwsnocpy
parameter_list|(
name|struct
name|bwstring
modifier|*
name|dst
parameter_list|,
specifier|const
name|struct
name|bwstring
modifier|*
name|src
parameter_list|,
name|size_t
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bwscmp
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|bws1
parameter_list|,
specifier|const
name|struct
name|bwstring
modifier|*
name|bws2
parameter_list|,
name|size_t
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bwsncmp
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|bws1
parameter_list|,
specifier|const
name|struct
name|bwstring
modifier|*
name|bws2
parameter_list|,
name|size_t
name|offset
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bwscoll
parameter_list|(
specifier|const
name|struct
name|bwstring
modifier|*
name|bws1
parameter_list|,
specifier|const
name|struct
name|bwstring
modifier|*
name|bws2
parameter_list|,
name|size_t
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|bwsfwrite
parameter_list|(
name|struct
name|bwstring
modifier|*
name|bws
parameter_list|,
name|FILE
modifier|*
name|f
parameter_list|,
name|bool
name|zero_ended
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bwstring
modifier|*
name|bwsfgetln
parameter_list|(
name|FILE
modifier|*
name|file
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|bool
name|zero_ended
parameter_list|,
name|struct
name|reader_buffer
modifier|*
name|rb
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|bwstring_iterator
name|bws_begin
parameter_list|(
name|struct
name|bwstring
modifier|*
name|bws
parameter_list|)
block|{
return|return
call|(
name|bwstring_iterator
call|)
argument_list|(
operator|&
operator|(
name|bws
operator|->
name|data
operator|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bwstring_iterator
name|bws_end
parameter_list|(
name|struct
name|bwstring
modifier|*
name|bws
parameter_list|)
block|{
return|return
operator|(
operator|(
name|MB_CUR_MAX
operator|==
literal|1
operator|)
condition|?
call|(
name|bwstring_iterator
call|)
argument_list|(
name|bws
operator|->
name|data
operator|.
name|cstr
operator|+
name|bws
operator|->
name|len
argument_list|)
else|:
call|(
name|bwstring_iterator
call|)
argument_list|(
name|bws
operator|->
name|data
operator|.
name|wstr
operator|+
name|bws
operator|->
name|len
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bwstring_iterator
name|bws_iterator_inc
parameter_list|(
name|bwstring_iterator
name|iter
parameter_list|,
name|size_t
name|pos
parameter_list|)
block|{
if|if
condition|(
name|MB_CUR_MAX
operator|==
literal|1
condition|)
return|return
operator|(
operator|(
name|unsigned
name|char
operator|*
operator|)
name|iter
operator|)
operator|+
name|pos
return|;
else|else
return|return
operator|(
operator|(
name|wchar_t
operator|*
operator|)
name|iter
operator|)
operator|+
name|pos
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|wchar_t
name|bws_get_iter_value
parameter_list|(
name|bwstring_iterator
name|iter
parameter_list|)
block|{
if|if
condition|(
name|MB_CUR_MAX
operator|==
literal|1
condition|)
return|return
operator|*
operator|(
operator|(
name|unsigned
name|char
operator|*
operator|)
name|iter
operator|)
return|;
else|else
return|return
operator|*
operator|(
operator|(
name|wchar_t
operator|*
operator|)
name|iter
operator|)
return|;
block|}
end_function

begin_function_decl
name|int
name|bws_iterator_cmp
parameter_list|(
name|bwstring_iterator
name|iter1
parameter_list|,
name|bwstring_iterator
name|iter2
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|BWS_GET
parameter_list|(
name|bws
parameter_list|,
name|pos
parameter_list|)
value|((MB_CUR_MAX == 1) ? ((bws)->data.cstr[(pos)]) : (bws)->data.wstr[(pos)])
end_define

begin_function_decl
name|void
name|initialise_months
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __BWSTRING_H__ */
end_comment

end_unit

