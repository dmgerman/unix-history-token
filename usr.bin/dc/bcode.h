begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$						*/
end_comment

begin_comment
comment|/*	$OpenBSD: bcode.h,v 1.5 2006/01/16 08:09:25 otto Exp $	*/
end_comment

begin_comment
comment|/*  * Copyright (c) 2003, Otto Moerbeek<otto@drijf.net>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_struct
struct|struct
name|number
block|{
name|BIGNUM
modifier|*
name|number
decl_stmt|;
name|u_int
name|scale
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|stacktype
block|{
name|BCODE_NONE
block|,
name|BCODE_NUMBER
block|,
name|BCODE_STRING
block|}
enum|;
end_enum

begin_enum
enum|enum
name|bcode_compare
block|{
name|BCODE_EQUAL
block|,
name|BCODE_NOT_EQUAL
block|,
name|BCODE_LESS
block|,
name|BCODE_NOT_LESS
block|,
name|BCODE_GREATER
block|,
name|BCODE_NOT_GREATER
block|}
enum|;
end_enum

begin_struct_decl
struct_decl|struct
name|array
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|value
block|{
union|union
block|{
name|struct
name|number
modifier|*
name|num
decl_stmt|;
name|char
modifier|*
name|string
decl_stmt|;
block|}
name|u
union|;
name|struct
name|array
modifier|*
name|array
decl_stmt|;
name|enum
name|stacktype
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|array
block|{
name|struct
name|value
modifier|*
name|data
decl_stmt|;
name|size_t
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|stack
block|{
name|struct
name|value
modifier|*
name|stack
decl_stmt|;
name|ssize_t
name|size
decl_stmt|;
name|ssize_t
name|sp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|source
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|vtable
block|{
name|int
function_decl|(
modifier|*
name|readchar
function_decl|)
parameter_list|(
name|struct
name|source
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|unreadchar
function_decl|)
parameter_list|(
name|struct
name|source
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
function_decl|(
modifier|*
name|readline
function_decl|)
parameter_list|(
name|struct
name|source
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|struct
name|source
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|source
block|{
union|union
block|{
struct|struct
block|{
name|u_char
modifier|*
name|buf
decl_stmt|;
name|size_t
name|pos
decl_stmt|;
block|}
name|string
struct|;
name|FILE
modifier|*
name|stream
decl_stmt|;
block|}
name|u
union|;
name|struct
name|vtable
modifier|*
name|vtable
decl_stmt|;
name|int
name|lastchar
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|init_bmachine
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|reset_bmachine
parameter_list|(
name|struct
name|source
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int
name|bmachine_scale
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scale_number
parameter_list|(
name|BIGNUM
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|normalize
parameter_list|(
name|struct
name|number
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eval
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|struct
name|number
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pbn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|negate
parameter_list|(
name|struct
name|number
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|split_number
parameter_list|(
specifier|const
name|struct
name|number
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bmul_number
parameter_list|(
name|struct
name|number
modifier|*
parameter_list|,
name|struct
name|number
modifier|*
parameter_list|,
name|struct
name|number
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

end_unit

