begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * See i386-fbsd.c for copyright and license terms.  *  * System call arguments come in several flavours:  * Hex -- values that should be printed in hex (addresses)  * Octal -- Same as above, but octal  * Int -- normal integer values (file descriptors, for example)  * LongHex -- long value that should be printed in hex  * Name -- pointer to a NULL-terminated string.  * BinString -- pointer to an array of chars, printed via strvisx().  * Ptr -- pointer to some unspecified structure.  Just print as hex for now.  * Stat -- a pointer to a stat buffer.  Prints a couple fields.  * StatFs -- a pointer to a statfs buffer.  Prints a few fields.  * Ioctl -- an ioctl command.  Woefully limited.  * Quad -- a double-word value.  e.g., lseek(int, offset_t, int)  * Signal -- a signal number.  Prints the signal name (SIGxxx)  * Sockaddr -- a pointer to a struct sockaddr.  Prints symbolic AF, and IP:Port  * StringArray -- a pointer to an array of string pointers.  * Timespec -- a pointer to a struct timespec.  Prints both elements.  * Timeval -- a pointer to a struct timeval.  Prints both elements.  * Timeval2 -- a pointer to two struct timevals.  Prints both elements of both.  * Itimerval -- a pointer to a struct itimerval.  Prints all elements.  * Pollfd -- a pointer to an array of struct pollfd.  Prints .fd and .events.  * Fd_set -- a pointer to an array of fd_set.  Prints the fds that are set.  * Sigaction -- a pointer to a struct sigaction.  Prints all elements.  * Sigset -- a pointer to a sigset_t.  Prints the signals that are set.  * Sigprocmask -- the first argument to sigprocmask().  Prints the name.  * Kevent -- a pointer to an array of struct kevents.  Prints all elements.  * Pathconf -- the 2nd argument of pathconf().  * Utrace -- utrace(2) buffer.  *  * In addition, the pointer types (String, Ptr) may have OUT masked in --  * this means that the data is set on *return* from the system call -- or  * IN (meaning that the data is passed *into* the system call).  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  */
end_comment

begin_enum
enum|enum
name|Argtype
block|{
name|None
init|=
literal|1
block|,
name|Hex
block|,
name|Octal
block|,
name|Int
block|,
name|UInt
block|,
name|LongHex
block|,
name|Name
block|,
name|Ptr
block|,
name|Stat
block|,
name|Ioctl
block|,
name|Quad
block|,
name|Signal
block|,
name|Sockaddr
block|,
name|StringArray
block|,
name|Timespec
block|,
name|Timeval
block|,
name|Itimerval
block|,
name|Pollfd
block|,
name|Fd_set
block|,
name|Sigaction
block|,
name|Fcntl
block|,
name|Mprot
block|,
name|Mmapflags
block|,
name|Whence
block|,
name|Readlinkres
block|,
name|Sigset
block|,
name|Sigprocmask
block|,
name|StatFs
block|,
name|Kevent
block|,
name|Sockdomain
block|,
name|Socktype
block|,
name|Open
block|,
name|Fcntlflag
block|,
name|Rusage
block|,
name|BinString
block|,
name|Shutdown
block|,
name|Resource
block|,
name|Rlimit
block|,
name|Timeval2
block|,
name|Pathconf
block|,
name|Rforkflags
block|,
name|ExitStatus
block|,
name|Waitoptions
block|,
name|Idtype
block|,
name|Procctl
block|,
name|LinuxSockArgs
block|,
name|Umtxop
block|,
name|Atfd
block|,
name|Atflags
block|,
name|Timespec2
block|,
name|Accessmode
block|,
name|Long
block|,
name|Sysarch
block|,
name|ExecArgs
block|,
name|ExecEnv
block|,
name|PipeFds
block|,
name|QuadHex
block|,
name|Utrace
block|,
name|IntArray
block|,
name|Pipe2
block|,
name|CapFcntlRights
block|,
name|Fadvice
block|,
name|FileFlags
block|,
name|Flockop
block|,
name|Getfsstatmode
block|,
name|Kldsymcmd
block|,
name|Kldunloadflags
block|,
name|CloudABIAdvice
block|,
name|CloudABIClockID
block|,
name|ClouduABIFDSFlags
block|,
name|CloudABIFDStat
block|,
name|CloudABIFileStat
block|,
name|CloudABIFileType
block|,
name|CloudABIFSFlags
block|,
name|CloudABILookup
block|,
name|CloudABIMFlags
block|,
name|CloudABIMProt
block|,
name|CloudABIMSFlags
block|,
name|CloudABIOFlags
block|,
name|CloudABISDFlags
block|,
name|CloudABISignal
block|,
name|CloudABISockStat
block|,
name|CloudABISSFlags
block|,
name|CloudABITimestamp
block|,
name|CloudABIULFlags
block|,
name|CloudABIWhence
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|ARG_MASK
value|0xff
end_define

begin_define
define|#
directive|define
name|OUT
value|0x100
end_define

begin_define
define|#
directive|define
name|IN
comment|/*0x20*/
value|0
end_define

begin_struct
struct|struct
name|syscall_args
block|{
name|enum
name|Argtype
name|type
decl_stmt|;
name|int
name|offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|syscall
block|{
name|STAILQ_ENTRY
argument_list|(
argument|syscall
argument_list|)
name|entries
expr_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|u_int
name|ret_type
decl_stmt|;
comment|/* 0, 1, or 2 return values */
name|u_int
name|nargs
decl_stmt|;
comment|/* actual number of meaningful arguments */
comment|/* Hopefully, no syscalls with> 10 args */
name|struct
name|syscall_args
name|args
index|[
literal|10
index|]
decl_stmt|;
name|struct
name|timespec
name|time
decl_stmt|;
comment|/* Time spent for this call */
name|int
name|ncalls
decl_stmt|;
comment|/* Number of calls */
name|int
name|nerror
decl_stmt|;
comment|/* Number of calls that returned with error */
name|bool
name|unknown
decl_stmt|;
comment|/* Unknown system call */
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|syscall
modifier|*
name|get_syscall
parameter_list|(
name|struct
name|threadinfo
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|print_arg
parameter_list|(
name|struct
name|syscall_args
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|,
name|long
modifier|*
parameter_list|,
name|struct
name|trussinfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Linux Socket defines  */
end_comment

begin_define
define|#
directive|define
name|LINUX_SOCKET
value|1
end_define

begin_define
define|#
directive|define
name|LINUX_BIND
value|2
end_define

begin_define
define|#
directive|define
name|LINUX_CONNECT
value|3
end_define

begin_define
define|#
directive|define
name|LINUX_LISTEN
value|4
end_define

begin_define
define|#
directive|define
name|LINUX_ACCEPT
value|5
end_define

begin_define
define|#
directive|define
name|LINUX_GETSOCKNAME
value|6
end_define

begin_define
define|#
directive|define
name|LINUX_GETPEERNAME
value|7
end_define

begin_define
define|#
directive|define
name|LINUX_SOCKETPAIR
value|8
end_define

begin_define
define|#
directive|define
name|LINUX_SEND
value|9
end_define

begin_define
define|#
directive|define
name|LINUX_RECV
value|10
end_define

begin_define
define|#
directive|define
name|LINUX_SENDTO
value|11
end_define

begin_define
define|#
directive|define
name|LINUX_RECVFROM
value|12
end_define

begin_define
define|#
directive|define
name|LINUX_SHUTDOWN
value|13
end_define

begin_define
define|#
directive|define
name|LINUX_SETSOCKOPT
value|14
end_define

begin_define
define|#
directive|define
name|LINUX_GETSOCKOPT
value|15
end_define

begin_define
define|#
directive|define
name|LINUX_SENDMSG
value|16
end_define

begin_define
define|#
directive|define
name|LINUX_RECVMSG
value|17
end_define

begin_define
define|#
directive|define
name|PAD_
parameter_list|(
name|t
parameter_list|)
value|(sizeof(register_t)<= sizeof(t) ? \     0 : sizeof(register_t) - sizeof(t))
end_define

begin_if
if|#
directive|if
name|BYTE_ORDER
operator|==
name|LITTLE_ENDIAN
end_if

begin_define
define|#
directive|define
name|PADL_
parameter_list|(
name|t
parameter_list|)
value|0
end_define

begin_define
define|#
directive|define
name|PADR_
parameter_list|(
name|t
parameter_list|)
value|PAD_(t)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|PADL_
parameter_list|(
name|t
parameter_list|)
value|PAD_(t)
end_define

begin_define
define|#
directive|define
name|PADR_
parameter_list|(
name|t
parameter_list|)
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|int
name|l_int
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|l_ulong
typedef|;
end_typedef

begin_struct
struct|struct
name|linux_socketcall_args
block|{
name|char
name|what_l_
index|[
name|PADL_
argument_list|(
name|l_int
argument_list|)
index|]
decl_stmt|;
name|l_int
name|what
decl_stmt|;
name|char
name|what_r_
index|[
name|PADR_
argument_list|(
name|l_int
argument_list|)
index|]
decl_stmt|;
name|char
name|args_l_
index|[
name|PADL_
argument_list|(
name|l_ulong
argument_list|)
index|]
decl_stmt|;
name|l_ulong
name|args
decl_stmt|;
name|char
name|args_r_
index|[
name|PADR_
argument_list|(
name|l_ulong
argument_list|)
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|init_syscalls
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_syscall
parameter_list|(
name|struct
name|trussinfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_syscall_ret
parameter_list|(
name|struct
name|trussinfo
modifier|*
parameter_list|,
name|int
parameter_list|,
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_summary
parameter_list|(
name|struct
name|trussinfo
modifier|*
name|trussinfo
parameter_list|)
function_decl|;
end_function_decl

end_unit

