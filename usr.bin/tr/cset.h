begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004 Tim J. Robbins.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CSET_H
end_ifndef

begin_define
define|#
directive|define
name|CSET_H
end_define

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<wctype.h>
end_include

begin_struct
struct|struct
name|csnode
block|{
name|wchar_t
name|csn_min
decl_stmt|;
name|wchar_t
name|csn_max
decl_stmt|;
name|struct
name|csnode
modifier|*
name|csn_left
decl_stmt|;
name|struct
name|csnode
modifier|*
name|csn_right
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|csclass
block|{
name|wctype_t
name|csc_type
decl_stmt|;
name|bool
name|csc_invert
decl_stmt|;
name|struct
name|csclass
modifier|*
name|csc_next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cset
block|{
define|#
directive|define
name|CS_CACHE_SIZE
value|256
name|bool
name|cs_cache
index|[
name|CS_CACHE_SIZE
index|]
decl_stmt|;
name|bool
name|cs_havecache
decl_stmt|;
name|struct
name|csclass
modifier|*
name|cs_classes
decl_stmt|;
name|struct
name|csnode
modifier|*
name|cs_root
decl_stmt|;
name|bool
name|cs_invert
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|bool
name|cset_addclass
parameter_list|(
name|struct
name|cset
modifier|*
parameter_list|,
name|wctype_t
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cset
modifier|*
name|cset_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|cset_add
parameter_list|(
name|struct
name|cset
modifier|*
parameter_list|,
name|wchar_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cset_invert
parameter_list|(
name|struct
name|cset
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|cset_in_hard
parameter_list|(
name|struct
name|cset
modifier|*
parameter_list|,
name|wchar_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cset_cache
parameter_list|(
name|struct
name|cset
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|bool
name|cset_in
parameter_list|(
name|struct
name|cset
modifier|*
name|cs
parameter_list|,
name|wchar_t
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|<
name|CS_CACHE_SIZE
operator|&&
name|cs
operator|->
name|cs_havecache
condition|)
return|return
operator|(
name|cs
operator|->
name|cs_cache
index|[
name|ch
index|]
operator|)
return|;
return|return
operator|(
name|cset_in_hard
argument_list|(
name|cs
argument_list|,
name|ch
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CSET_H */
end_comment

end_unit

