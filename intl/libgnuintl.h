begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Message catalogs for internationalization.    Copyright (C) 1995-1997, 2000-2003 Free Software Foundation, Inc.     This program is free software; you can redistribute it and/or modify it    under the terms of the GNU Library General Public License as published    by the Free Software Foundation; either version 2, or (at your option)    any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    Library General Public License for more details.     You should have received a copy of the GNU Library General Public    License along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301,    USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBINTL_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBINTL_H
value|1
end_define

begin_include
include|#
directive|include
file|<locale.h>
end_include

begin_comment
comment|/* The LC_MESSAGES locale category is the category used by the functions    gettext() and dgettext().  It is specified in POSIX, but not in ANSI C.    On systems that don't define it, use an arbitrary value instead.    On Solaris,<locale.h> defines __LOCALE_H (or _LOCALE_H in Solaris 2.5)    then includes<libintl.h> (i.e. this file!) and then only defines    LC_MESSAGES.  To avoid a redefinition warning, don't define LC_MESSAGES    in this case.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
name|LC_MESSAGES
operator|&&
operator|!
operator|(
name|defined
name|__LOCALE_H
operator|||
operator|(
name|defined
name|_LOCALE_H
operator|&&
name|defined
name|__sun
operator|)
operator|)
end_if

begin_define
define|#
directive|define
name|LC_MESSAGES
value|1729
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* We define an additional symbol to signal that we use the GNU    implementation of gettext.  */
end_comment

begin_define
define|#
directive|define
name|__USE_GNU_GETTEXT
value|1
end_define

begin_comment
comment|/* Provide information about the supported file formats.  Returns the    maximum minor revision number supported for a given major revision.  */
end_comment

begin_define
define|#
directive|define
name|__GNU_GETTEXT_SUPPORTED_REVISION
parameter_list|(
name|major
parameter_list|)
define|\
value|((major) == 0 ? 1 : -1)
end_define

begin_comment
comment|/* Resolve a platform specific conflict on DJGPP.  GNU gettext takes    precedence over _conio_gettext.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__DJGPP__
end_ifdef

begin_undef
undef|#
directive|undef
name|gettext
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Use _INTL_PARAMS, not PARAMS, in order to avoid clashes with identifiers    used by programs.  Similarly, test __PROTOTYPES, not PROTOTYPES.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_INTL_PARAMS
end_ifndef

begin_if
if|#
directive|if
name|__STDC__
operator|||
name|defined
name|__GNUC__
operator|||
name|defined
name|__SUNPRO_C
operator|||
name|defined
name|__cplusplus
operator|||
name|__PROTOTYPES
end_if

begin_define
define|#
directive|define
name|_INTL_PARAMS
parameter_list|(
name|args
parameter_list|)
value|args
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_INTL_PARAMS
parameter_list|(
name|args
parameter_list|)
value|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* We redirect the functions to those prefixed with "libintl_".  This is    necessary, because some systems define gettext/textdomain/... in the C    library (namely, Solaris 2.4 and newer, and GNU libc 2.0 and newer).    If we used the unprefixed names, there would be cases where the    definition in the C library would override the one in the libintl.so    shared library.  Recall that on ELF systems, the symbols are looked    up in the following order:      1. in the executable,      2. in the shared libraries specified on the link command line, in order,      3. in the dependencies of the shared libraries specified on the link         command line,      4. in the dlopen()ed shared libraries, in the order in which they were         dlopen()ed.    The definition in the C library would override the one in libintl.so if    either      * -lc is given on the link command line and -lintl isn't, or      * -lc is given on the link command line before -lintl, or      * libintl.so is a dependency of a dlopen()ed shared library but not        linked to the executable at link time.    Since Solaris gettext() behaves differently than GNU gettext(), this    would be unacceptable.     The redirection happens by default through macros in C, so that&gettext    is independent of the compilation unit, but through inline functions in    C++, in order not to interfere with the name mangling of class fields or    class methods called 'gettext'.  */
comment|/* The user can define _INTL_REDIRECT_INLINE or _INTL_REDIRECT_MACROS.    If he doesn't, we choose the method.  A third possible method is    _INTL_REDIRECT_ASM, supported only by GCC.  */
if|#
directive|if
operator|!
operator|(
name|defined
name|_INTL_REDIRECT_INLINE
operator|||
name|defined
name|_INTL_REDIRECT_MACROS
operator|)
if|#
directive|if
name|__GNUC__
operator|>=
literal|2
operator|&&
operator|!
name|defined
name|__APPLE_CC__
operator|&&
operator|(
name|defined
name|__STDC__
operator|||
name|defined
name|__cplusplus
operator|)
define|#
directive|define
name|_INTL_REDIRECT_ASM
else|#
directive|else
ifdef|#
directive|ifdef
name|__cplusplus
define|#
directive|define
name|_INTL_REDIRECT_INLINE
else|#
directive|else
define|#
directive|define
name|_INTL_REDIRECT_MACROS
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
comment|/* Auxiliary macros.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_ASM
define|#
directive|define
name|_INTL_ASM
parameter_list|(
name|cname
parameter_list|)
value|__asm__ (_INTL_ASMNAME (__USER_LABEL_PREFIX__, #cname))
define|#
directive|define
name|_INTL_ASMNAME
parameter_list|(
name|prefix
parameter_list|,
name|cnamestring
parameter_list|)
value|_INTL_STRINGIFY (prefix) cnamestring
define|#
directive|define
name|_INTL_STRINGIFY
parameter_list|(
name|prefix
parameter_list|)
value|#prefix
else|#
directive|else
define|#
directive|define
name|_INTL_ASM
parameter_list|(
name|cname
parameter_list|)
endif|#
directive|endif
comment|/* Look up MSGID in the current default message catalog for the current    LC_MESSAGES locale.  If not found, returns MSGID itself (the default    text).  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_gettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__msgid
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|gettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__msgid
parameter_list|)
block|{
return|return
name|libintl_gettext
argument_list|(
name|__msgid
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|gettext
value|libintl_gettext
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|gettext
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__msgid
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_gettext
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Look up MSGID in the DOMAINNAME message catalog for the current    LC_MESSAGES locale.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_dgettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|dgettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid
parameter_list|)
block|{
return|return
name|libintl_dgettext
argument_list|(
name|__domainname
argument_list|,
name|__msgid
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|dgettext
value|libintl_dgettext
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|dgettext
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_dgettext
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY    locale.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_dcgettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid
parameter_list|,
name|int
name|__category
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|dcgettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid
parameter_list|,
name|int
name|__category
parameter_list|)
block|{
return|return
name|libintl_dcgettext
argument_list|(
name|__domainname
argument_list|,
name|__msgid
argument_list|,
name|__category
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|dcgettext
value|libintl_dcgettext
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|dcgettext
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid
operator|,
name|int
name|__category
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_dcgettext
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Similar to `gettext' but select the plural form corresponding to the    number N.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_ngettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__msgid1
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid2
parameter_list|,
name|unsigned
name|long
name|int
name|__n
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|ngettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__msgid1
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid2
parameter_list|,
name|unsigned
name|long
name|int
name|__n
parameter_list|)
block|{
return|return
name|libintl_ngettext
argument_list|(
name|__msgid1
argument_list|,
name|__msgid2
argument_list|,
name|__n
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|ngettext
value|libintl_ngettext
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|ngettext
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__msgid1
operator|,
specifier|const
name|char
operator|*
name|__msgid2
operator|,
name|unsigned
name|long
name|int
name|__n
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_ngettext
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Similar to `dgettext' but select the plural form corresponding to the    number N.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_dngettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid1
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid2
parameter_list|,
name|unsigned
name|long
name|int
name|__n
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|dngettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid1
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid2
parameter_list|,
name|unsigned
name|long
name|int
name|__n
parameter_list|)
block|{
return|return
name|libintl_dngettext
argument_list|(
name|__domainname
argument_list|,
name|__msgid1
argument_list|,
name|__msgid2
argument_list|,
name|__n
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|dngettext
value|libintl_dngettext
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|dngettext
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid1
operator|,
specifier|const
name|char
operator|*
name|__msgid2
operator|,
name|unsigned
name|long
name|int
name|__n
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_dngettext
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Similar to `dcgettext' but select the plural form corresponding to the    number N.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_dcngettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid1
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid2
parameter_list|,
name|unsigned
name|long
name|int
name|__n
parameter_list|,
name|int
name|__category
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|dcngettext
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid1
parameter_list|,
specifier|const
name|char
modifier|*
name|__msgid2
parameter_list|,
name|unsigned
name|long
name|int
name|__n
parameter_list|,
name|int
name|__category
parameter_list|)
block|{
return|return
name|libintl_dcngettext
argument_list|(
name|__domainname
argument_list|,
name|__msgid1
argument_list|,
name|__msgid2
argument_list|,
name|__n
argument_list|,
name|__category
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|dcngettext
value|libintl_dcngettext
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|dcngettext
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid1
operator|,
specifier|const
name|char
operator|*
name|__msgid2
operator|,
name|unsigned
name|long
name|int
name|__n
operator|,
name|int
name|__category
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_dcngettext
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Set the current default message catalog to DOMAINNAME.    If DOMAINNAME is null, return the current default.    If DOMAINNAME is "", reset to the default of "messages".  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_textdomain
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|textdomain
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|)
block|{
return|return
name|libintl_textdomain
argument_list|(
name|__domainname
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|textdomain
value|libintl_textdomain
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|textdomain
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_textdomain
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Specify that the DOMAINNAME message catalog will be found    in DIRNAME rather than in the system locale data base.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_bindtextdomain
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__dirname
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|bindtextdomain
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__dirname
parameter_list|)
block|{
return|return
name|libintl_bindtextdomain
argument_list|(
name|__domainname
argument_list|,
name|__dirname
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|bindtextdomain
value|libintl_bindtextdomain
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|bindtextdomain
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__dirname
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_bindtextdomain
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Specify the character encoding in which the messages from the    DOMAINNAME message catalog will be returned.  */
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_INLINE
specifier|extern
name|char
modifier|*
name|libintl_bind_textdomain_codeset
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__codeset
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|char
modifier|*
name|bind_textdomain_codeset
parameter_list|(
specifier|const
name|char
modifier|*
name|__domainname
parameter_list|,
specifier|const
name|char
modifier|*
name|__codeset
parameter_list|)
block|{
return|return
name|libintl_bind_textdomain_codeset
argument_list|(
name|__domainname
argument_list|,
name|__codeset
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|_INTL_REDIRECT_MACROS
define|#
directive|define
name|bind_textdomain_codeset
value|libintl_bind_textdomain_codeset
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|bind_textdomain_codeset
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__codeset
operator|)
argument_list|)
name|_INTL_ASM
argument_list|(
name|libintl_bind_textdomain_codeset
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Support for relocatable packages.  */
comment|/* Sets the original and the current installation prefix of the package.    Relocation simply replaces a pathname starting with the original prefix    by the corresponding pathname with the current prefix instead.  Both    prefixes should be directory names without trailing slash (i.e. use ""    instead of "/").  */
define|#
directive|define
name|libintl_set_relocation_prefix
value|libintl_set_relocation_prefix
specifier|extern
name|void
name|libintl_set_relocation_prefix
name|_INTL_PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|orig_prefix
operator|,
specifier|const
name|char
operator|*
name|curr_prefix
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* libintl.h */
end_comment

end_unit

