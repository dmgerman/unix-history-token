begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * $Id: krb_db.h,v 1.15 1996/12/17 20:34:32 assar Exp $   * $FreeBSD$   *  * Copyright 1987, 1988 by the Massachusetts Institute of Technology.   *  * For copying and distribution information, please see the file  *<mit-copyright.h>.   *  * spm		Project Athena  8/85   *  * This file defines data structures for the kerberos  * authentication/authorization database.   *  * They MUST correspond to those defined in *.rel   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|KRB_DB_DEFS
end_ifndef

begin_define
define|#
directive|define
name|KRB_DB_DEFS
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_define
define|#
directive|define
name|KERB_M_NAME
value|"K"
end_define

begin_comment
comment|/* Kerberos */
end_comment

begin_define
define|#
directive|define
name|KERB_M_INST
value|"M"
end_define

begin_comment
comment|/* Master */
end_comment

begin_define
define|#
directive|define
name|KERB_DEFAULT_NAME
value|"default"
end_define

begin_define
define|#
directive|define
name|KERB_DEFAULT_INST
value|""
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|DB_DIR
end_ifndef

begin_define
define|#
directive|define
name|DB_DIR
value|"/var/db/kerberos"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DBM_FILE
end_ifndef

begin_define
define|#
directive|define
name|DBM_FILE
value|DB_DIR "/principal"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* this also defines the number of queue headers */
end_comment

begin_define
define|#
directive|define
name|KERB_DB_HASH_MODULO
value|64
end_define

begin_comment
comment|/* Arguments to kerb_dbl_lock() */
end_comment

begin_define
define|#
directive|define
name|KERB_DBL_EXCLUSIVE
value|1
end_define

begin_define
define|#
directive|define
name|KERB_DBL_SHARED
value|0
end_define

begin_comment
comment|/* arguments to kerb_db_set_lockmode() */
end_comment

begin_define
define|#
directive|define
name|KERB_DBL_BLOCKING
value|0
end_define

begin_define
define|#
directive|define
name|KERB_DBL_NONBLOCKING
value|1
end_define

begin_comment
comment|/* arguments to kdb_get_master_key */
end_comment

begin_define
define|#
directive|define
name|KDB_GET_PROMPT
value|1
end_define

begin_define
define|#
directive|define
name|KDB_GET_TWICE
value|2
end_define

begin_comment
comment|/* Principal defines the structure of a principal's name */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
name|name
index|[
name|ANAME_SZ
index|]
decl_stmt|;
name|char
name|instance
index|[
name|INST_SZ
index|]
decl_stmt|;
name|u_int32_t
name|key_low
decl_stmt|;
name|u_int32_t
name|key_high
decl_stmt|;
name|u_int32_t
name|exp_date
decl_stmt|;
name|char
name|exp_date_txt
index|[
name|DATE_SZ
index|]
decl_stmt|;
name|u_int32_t
name|mod_date
decl_stmt|;
name|char
name|mod_date_txt
index|[
name|DATE_SZ
index|]
decl_stmt|;
name|u_int16_t
name|attributes
decl_stmt|;
name|u_int8_t
name|max_life
decl_stmt|;
name|u_int8_t
name|kdc_key_ver
decl_stmt|;
name|u_int8_t
name|key_version
decl_stmt|;
name|char
name|mod_name
index|[
name|ANAME_SZ
index|]
decl_stmt|;
name|char
name|mod_instance
index|[
name|INST_SZ
index|]
decl_stmt|;
name|char
modifier|*
name|old
decl_stmt|;
comment|/* cast to (Principal *); not in db, 				 * ptr to old vals */
block|}
name|Principal
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int32_t
name|cpu
decl_stmt|;
name|int32_t
name|elapsed
decl_stmt|;
name|int32_t
name|dio
decl_stmt|;
name|int32_t
name|pfault
decl_stmt|;
name|int32_t
name|t_stamp
decl_stmt|;
name|int32_t
name|n_retrieve
decl_stmt|;
name|int32_t
name|n_replace
decl_stmt|;
name|int32_t
name|n_append
decl_stmt|;
name|int32_t
name|n_get_stat
decl_stmt|;
name|int32_t
name|n_put_stat
decl_stmt|;
block|}
name|DB_stat
typedef|;
end_typedef

begin_comment
comment|/* Dba defines the structure of a database administrator */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
name|name
index|[
name|ANAME_SZ
index|]
decl_stmt|;
name|char
name|instance
index|[
name|INST_SZ
index|]
decl_stmt|;
name|u_int16_t
name|attributes
decl_stmt|;
name|u_int32_t
name|exp_date
decl_stmt|;
name|char
name|exp_date_txt
index|[
name|DATE_SZ
index|]
decl_stmt|;
name|char
modifier|*
name|old
decl_stmt|;
comment|/* 			 * cast to (Dba *); not in db, ptr to 			 * old vals 			 */
block|}
name|Dba
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|k_iter_proc_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|Principal
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
name|void
name|copy_from_key
name|__P
argument_list|(
operator|(
name|des_cblock
name|in
operator|,
name|u_int32_t
operator|*
name|lo
operator|,
name|u_int32_t
operator|*
name|hi
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|copy_to_key
name|__P
argument_list|(
operator|(
name|u_int32_t
operator|*
name|lo
operator|,
name|u_int32_t
operator|*
name|hi
operator|,
name|des_cblock
name|out
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|kdb_encrypt_key
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_cblock
operator|*
operator|,
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kdb_get_master_key
name|__P
argument_list|(
operator|(
name|int
name|prompt
operator|,
name|des_cblock
operator|*
name|master_key
operator|,
name|des_key_schedule
name|master_key_sched
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kdb_get_new_master_key
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kdb_kstash
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kdb_new_get_master_key
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kdb_new_get_new_master_key
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
name|key
operator|,
name|des_key_schedule
name|schedule
operator|,
name|int
name|verify
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|long
name|kdb_verify_master_key
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|long
modifier|*
name|kerb_db_begin_update
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_create
name|__P
argument_list|(
operator|(
name|char
operator|*
name|db_name
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|kerb_db_delete_principal
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|inst
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|kerb_db_end_update
name|__P
argument_list|(
operator|(
name|long
operator|*
name|db
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_get_dba
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|Dba
operator|*
operator|,
name|unsigned
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|kerb_db_get_stat
name|__P
argument_list|(
operator|(
name|DB_stat
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_iterate
name|__P
argument_list|(
operator|(
name|k_iter_proc_t
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_put_principal
name|__P
argument_list|(
operator|(
name|Principal
operator|*
operator|,
name|unsigned
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|kerb_db_put_stat
name|__P
argument_list|(
operator|(
name|DB_stat
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_rename
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_set_lockmode
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_set_name
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_db_update
name|__P
argument_list|(
operator|(
name|long
operator|*
name|db
operator|,
name|Principal
operator|*
name|principal
operator|,
name|unsigned
name|int
name|max
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_delete_principal
name|__P
argument_list|(
operator|(
name|char
operator|*
name|name
operator|,
name|char
operator|*
name|inst
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|kerb_fini
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_get_dba
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|Dba
operator|*
operator|,
name|unsigned
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|time_t
name|kerb_get_db_age
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_get_principal
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|Principal
operator|*
operator|,
name|unsigned
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_init
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|kerb_put_principal
name|__P
argument_list|(
operator|(
name|Principal
operator|*
operator|,
name|unsigned
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* KRB_DB_DEFS */
end_comment

end_unit

