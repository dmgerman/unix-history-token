begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/srp/srp.h */
end_comment

begin_comment
comment|/*  * Written by Christophe Renou (christophe.renou@edelweb.fr) with the  * precious help of Peter Sylvester (peter.sylvester@edelweb.fr) for the  * EdelKey project and contributed to the OpenSSL project 2004.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    licensing@OpenSSL.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SRP_H__
end_ifndef

begin_define
define|#
directive|define
name|__SRP_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_SRP
end_ifndef

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<openssl/safestack.h>
include|#
directive|include
file|<openssl/bn.h>
include|#
directive|include
file|<openssl/crypto.h>
typedef|typedef
struct|struct
name|SRP_gN_cache_st
block|{
name|char
modifier|*
name|b64_bn
decl_stmt|;
name|BIGNUM
modifier|*
name|bn
decl_stmt|;
block|}
name|SRP_gN_cache
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|SRP_gN_cache
argument_list|)
typedef|typedef
struct|struct
name|SRP_user_pwd_st
block|{
name|char
modifier|*
name|id
decl_stmt|;
name|BIGNUM
modifier|*
name|s
decl_stmt|;
name|BIGNUM
modifier|*
name|v
decl_stmt|;
specifier|const
name|BIGNUM
modifier|*
name|g
decl_stmt|;
specifier|const
name|BIGNUM
modifier|*
name|N
decl_stmt|;
name|char
modifier|*
name|info
decl_stmt|;
block|}
name|SRP_user_pwd
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|SRP_user_pwd
argument_list|)
typedef|typedef
struct|struct
name|SRP_VBASE_st
block|{
name|STACK_OF
argument_list|(
name|SRP_user_pwd
argument_list|)
operator|*
name|users_pwd
expr_stmt|;
name|STACK_OF
argument_list|(
name|SRP_gN_cache
argument_list|)
operator|*
name|gN_cache
expr_stmt|;
comment|/* to simulate a user */
name|char
modifier|*
name|seed_key
decl_stmt|;
name|BIGNUM
modifier|*
name|default_g
decl_stmt|;
name|BIGNUM
modifier|*
name|default_N
decl_stmt|;
block|}
name|SRP_VBASE
typedef|;
comment|/*  * Structure interne pour retenir les couples N et g  */
typedef|typedef
struct|struct
name|SRP_gN_st
block|{
name|char
modifier|*
name|id
decl_stmt|;
name|BIGNUM
modifier|*
name|g
decl_stmt|;
name|BIGNUM
modifier|*
name|N
decl_stmt|;
block|}
name|SRP_gN
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|SRP_gN
argument_list|)
name|SRP_VBASE
modifier|*
name|SRP_VBASE_new
parameter_list|(
name|char
modifier|*
name|seed_key
parameter_list|)
function_decl|;
name|int
name|SRP_VBASE_free
parameter_list|(
name|SRP_VBASE
modifier|*
name|vb
parameter_list|)
function_decl|;
name|int
name|SRP_VBASE_init
parameter_list|(
name|SRP_VBASE
modifier|*
name|vb
parameter_list|,
name|char
modifier|*
name|verifier_file
parameter_list|)
function_decl|;
name|SRP_user_pwd
modifier|*
name|SRP_VBASE_get_by_user
parameter_list|(
name|SRP_VBASE
modifier|*
name|vb
parameter_list|,
name|char
modifier|*
name|username
parameter_list|)
function_decl|;
name|char
modifier|*
name|SRP_create_verifier
parameter_list|(
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|char
modifier|*
modifier|*
name|salt
parameter_list|,
name|char
modifier|*
modifier|*
name|verifier
parameter_list|,
specifier|const
name|char
modifier|*
name|N
parameter_list|,
specifier|const
name|char
modifier|*
name|g
parameter_list|)
function_decl|;
name|int
name|SRP_create_verifier_BN
parameter_list|(
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|salt
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|verifier
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|,
name|BIGNUM
modifier|*
name|g
parameter_list|)
function_decl|;
define|#
directive|define
name|SRP_NO_ERROR
value|0
define|#
directive|define
name|SRP_ERR_VBASE_INCOMPLETE_FILE
value|1
define|#
directive|define
name|SRP_ERR_VBASE_BN_LIB
value|2
define|#
directive|define
name|SRP_ERR_OPEN_FILE
value|3
define|#
directive|define
name|SRP_ERR_MEMORY
value|4
define|#
directive|define
name|DB_srptype
value|0
define|#
directive|define
name|DB_srpverifier
value|1
define|#
directive|define
name|DB_srpsalt
value|2
define|#
directive|define
name|DB_srpid
value|3
define|#
directive|define
name|DB_srpgN
value|4
define|#
directive|define
name|DB_srpinfo
value|5
undef|#
directive|undef
name|DB_NUMBER
define|#
directive|define
name|DB_NUMBER
value|6
define|#
directive|define
name|DB_SRP_INDEX
value|'I'
define|#
directive|define
name|DB_SRP_VALID
value|'V'
define|#
directive|define
name|DB_SRP_REVOKED
value|'R'
define|#
directive|define
name|DB_SRP_MODIF
value|'v'
comment|/* see srp.c */
name|char
modifier|*
name|SRP_check_known_gN_param
parameter_list|(
name|BIGNUM
modifier|*
name|g
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|)
function_decl|;
name|SRP_gN
modifier|*
name|SRP_get_default_gN
parameter_list|(
specifier|const
name|char
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/* server side .... */
name|BIGNUM
modifier|*
name|SRP_Calc_server_key
parameter_list|(
name|BIGNUM
modifier|*
name|A
parameter_list|,
name|BIGNUM
modifier|*
name|v
parameter_list|,
name|BIGNUM
modifier|*
name|u
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|SRP_Calc_B
parameter_list|(
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|,
name|BIGNUM
modifier|*
name|g
parameter_list|,
name|BIGNUM
modifier|*
name|v
parameter_list|)
function_decl|;
name|int
name|SRP_Verify_A_mod_N
parameter_list|(
name|BIGNUM
modifier|*
name|A
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|SRP_Calc_u
parameter_list|(
name|BIGNUM
modifier|*
name|A
parameter_list|,
name|BIGNUM
modifier|*
name|B
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|)
function_decl|;
comment|/* client side .... */
name|BIGNUM
modifier|*
name|SRP_Calc_x
parameter_list|(
name|BIGNUM
modifier|*
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|SRP_Calc_A
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|,
name|BIGNUM
modifier|*
name|g
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|SRP_Calc_client_key
parameter_list|(
name|BIGNUM
modifier|*
name|N
parameter_list|,
name|BIGNUM
modifier|*
name|B
parameter_list|,
name|BIGNUM
modifier|*
name|g
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|SRP_Verify_B_mod_N
parameter_list|(
name|BIGNUM
modifier|*
name|B
parameter_list|,
name|BIGNUM
modifier|*
name|N
parameter_list|)
function_decl|;
define|#
directive|define
name|SRP_MINIMAL_N
value|1024
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

