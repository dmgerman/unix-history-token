begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/evp/evp.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_ENVELOPE_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_ENVELOPE_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_ALGORITHM_DEFINES
end_ifdef

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|OPENSSL_ALGORITHM_DEFINES
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_undef
undef|#
directive|undef
name|OPENSSL_ALGORITHM_DEFINES
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* #define EVP_RC2_KEY_SIZE		16 #define EVP_RC4_KEY_SIZE		16 #define EVP_BLOWFISH_KEY_SIZE		16 #define EVP_CAST5_KEY_SIZE		16 #define EVP_RC5_32_12_16_KEY_SIZE	16 */
end_comment

begin_define
define|#
directive|define
name|EVP_MAX_MD_SIZE
value|64
end_define

begin_comment
comment|/* longest known is SHA512 */
end_comment

begin_define
define|#
directive|define
name|EVP_MAX_KEY_LENGTH
value|32
end_define

begin_define
define|#
directive|define
name|EVP_MAX_IV_LENGTH
value|16
end_define

begin_define
define|#
directive|define
name|EVP_MAX_BLOCK_LENGTH
value|32
end_define

begin_define
define|#
directive|define
name|PKCS5_SALT_LEN
value|8
end_define

begin_comment
comment|/* Default PKCS#5 iteration count */
end_comment

begin_define
define|#
directive|define
name|PKCS5_DEFAULT_ITER
value|2048
end_define

begin_include
include|#
directive|include
file|<openssl/objects.h>
end_include

begin_define
define|#
directive|define
name|EVP_PK_RSA
value|0x0001
end_define

begin_define
define|#
directive|define
name|EVP_PK_DSA
value|0x0002
end_define

begin_define
define|#
directive|define
name|EVP_PK_DH
value|0x0004
end_define

begin_define
define|#
directive|define
name|EVP_PK_EC
value|0x0008
end_define

begin_define
define|#
directive|define
name|EVP_PKT_SIGN
value|0x0010
end_define

begin_define
define|#
directive|define
name|EVP_PKT_ENC
value|0x0020
end_define

begin_define
define|#
directive|define
name|EVP_PKT_EXCH
value|0x0040
end_define

begin_define
define|#
directive|define
name|EVP_PKS_RSA
value|0x0100
end_define

begin_define
define|#
directive|define
name|EVP_PKS_DSA
value|0x0200
end_define

begin_define
define|#
directive|define
name|EVP_PKS_EC
value|0x0400
end_define

begin_define
define|#
directive|define
name|EVP_PKT_EXP
value|0x1000
end_define

begin_comment
comment|/*<= 512 bit key */
end_comment

begin_define
define|#
directive|define
name|EVP_PKEY_NONE
value|NID_undef
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_RSA
value|NID_rsaEncryption
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_RSA2
value|NID_rsa
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_DSA
value|NID_dsa
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_DSA1
value|NID_dsa_2
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_DSA2
value|NID_dsaWithSHA
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_DSA3
value|NID_dsaWithSHA1
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_DSA4
value|NID_dsaWithSHA1_2
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_DH
value|NID_dhKeyAgreement
end_define

begin_define
define|#
directive|define
name|EVP_PKEY_EC
value|NID_X9_62_id_ecPublicKey
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Type needs to be a bit field  * Sub-type needs to be for variations on the method, as in, can it do  * arbitrary encryption.... */
struct|struct
name|evp_pkey_st
block|{
name|int
name|type
decl_stmt|;
name|int
name|save_type
decl_stmt|;
name|int
name|references
decl_stmt|;
union|union
block|{
name|char
modifier|*
name|ptr
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|struct
name|rsa_st
modifier|*
name|rsa
decl_stmt|;
comment|/* RSA */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
name|struct
name|dsa_st
modifier|*
name|dsa
decl_stmt|;
comment|/* DSA */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
name|struct
name|dh_st
modifier|*
name|dh
decl_stmt|;
comment|/* DH */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|struct
name|ec_key_st
modifier|*
name|ec
decl_stmt|;
comment|/* ECC */
endif|#
directive|endif
block|}
name|pkey
union|;
name|int
name|save_parameters
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|attributes
expr_stmt|;
comment|/* [ 0 ] */
block|}
comment|/* EVP_PKEY */
struct|;
define|#
directive|define
name|EVP_PKEY_MO_SIGN
value|0x0001
define|#
directive|define
name|EVP_PKEY_MO_VERIFY
value|0x0002
define|#
directive|define
name|EVP_PKEY_MO_ENCRYPT
value|0x0004
define|#
directive|define
name|EVP_PKEY_MO_DECRYPT
value|0x0008
if|#
directive|if
literal|0
comment|/* This structure is required to tie the message digest and signing together.  * The lookup can be done by md/pkey_method, oid, oid/pkey_method, or  * oid, md and pkey.  * This is required because for various smart-card perform the digest and  * signing/verification on-board.  To handle this case, the specific  * EVP_MD and EVP_PKEY_METHODs need to be closely associated.  * When a PKEY is created, it will have a EVP_PKEY_METHOD associated with it.  * This can either be software or a token to provide the required low level  * routines.  */
block|typedef struct evp_pkey_md_st 	{ 	int oid; 	EVP_MD *md; 	EVP_PKEY_METHOD *pkey; 	} EVP_PKEY_MD;
define|#
directive|define
name|EVP_rsa_md2
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_md2WithRSAEncryption,\ 			EVP_rsa_pkcs1(),EVP_md2())
define|#
directive|define
name|EVP_rsa_md5
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_md5WithRSAEncryption,\ 			EVP_rsa_pkcs1(),EVP_md5())
define|#
directive|define
name|EVP_rsa_sha0
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_shaWithRSAEncryption,\ 			EVP_rsa_pkcs1(),EVP_sha())
define|#
directive|define
name|EVP_rsa_sha1
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_sha1WithRSAEncryption,\ 			EVP_rsa_pkcs1(),EVP_sha1())
define|#
directive|define
name|EVP_rsa_ripemd160
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_ripemd160WithRSA,\ 			EVP_rsa_pkcs1(),EVP_ripemd160())
define|#
directive|define
name|EVP_rsa_mdc2
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_mdc2WithRSA,\ 			EVP_rsa_octet_string(),EVP_mdc2())
define|#
directive|define
name|EVP_dsa_sha
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_dsaWithSHA,\ 			EVP_dsa(),EVP_sha())
define|#
directive|define
name|EVP_dsa_sha1
parameter_list|()
define|\
value|EVP_PKEY_MD_add(NID_dsaWithSHA1,\ 			EVP_dsa(),EVP_sha1())
block|typedef struct evp_pkey_method_st 	{ 	char *name; 	int flags; 	int type;
comment|/* RSA, DSA, an SSLeay specific constant */
block|int oid;
comment|/* For the pub-key type */
block|int encrypt_oid;
comment|/* pub/priv key encryption */
block|int (*sign)(); 	int (*verify)(); 	struct	{ 		int (*set)();
comment|/* get and/or set the underlying type */
block|int (*get)(); 		int (*encrypt)(); 		int (*decrypt)(); 		int (*i2d)(); 		int (*d2i)(); 		int (*dup)(); 		} pub,priv; 	int (*set_asn1_parameters)(); 	int (*get_asn1_parameters)(); 	} EVP_PKEY_METHOD;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|EVP_MD
struct|struct
name|env_md_st
block|{
name|int
name|type
decl_stmt|;
name|int
name|pkey_type
decl_stmt|;
name|int
name|md_size
decl_stmt|;
name|unsigned
name|long
name|flags
decl_stmt|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|update
function_decl|)
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|final
function_decl|)
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|copy
function_decl|)
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|to
parameter_list|,
specifier|const
name|EVP_MD_CTX
modifier|*
name|from
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* FIXME: prototype these some day */
name|int
function_decl|(
modifier|*
name|sign
function_decl|)
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigret
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
name|void
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|verify
function_decl|)
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sigbuf
parameter_list|,
name|unsigned
name|int
name|siglen
parameter_list|,
name|void
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|required_pkey_type
index|[
literal|5
index|]
decl_stmt|;
comment|/*EVP_PKEY_xxx */
name|int
name|block_size
decl_stmt|;
name|int
name|ctx_size
decl_stmt|;
comment|/* how big does the ctx->md_data need to be */
block|}
comment|/* EVP_MD */
struct|;
typedef|typedef
name|int
name|evp_sign_method
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigret
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
name|void
modifier|*
name|key
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|evp_verify_method
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sigbuf
parameter_list|,
name|unsigned
name|int
name|siglen
parameter_list|,
name|void
modifier|*
name|key
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_MD_FLAG_ONESHOT
value|0x0001
comment|/* digest can only handle a single 					* block */
define|#
directive|define
name|EVP_PKEY_NULL_method
value|NULL,NULL,{0,0,0,0}
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
define|#
directive|define
name|EVP_PKEY_DSA_method
value|(evp_sign_method *)DSA_sign, \ 				(evp_verify_method *)DSA_verify, \ 				{EVP_PKEY_DSA,EVP_PKEY_DSA2,EVP_PKEY_DSA3, \ 					EVP_PKEY_DSA4,0}
else|#
directive|else
define|#
directive|define
name|EVP_PKEY_DSA_method
value|EVP_PKEY_NULL_method
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_ECDSA
define|#
directive|define
name|EVP_PKEY_ECDSA_method
value|(evp_sign_method *)ECDSA_sign, \ 				(evp_verify_method *)ECDSA_verify, \                                  {EVP_PKEY_EC,0,0,0}
else|#
directive|else
define|#
directive|define
name|EVP_PKEY_ECDSA_method
value|EVP_PKEY_NULL_method
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
define|#
directive|define
name|EVP_PKEY_RSA_method
value|(evp_sign_method *)RSA_sign, \ 				(evp_verify_method *)RSA_verify, \ 				{EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}
define|#
directive|define
name|EVP_PKEY_RSA_ASN1_OCTET_STRING_method
define|\
value|(evp_sign_method *)RSA_sign_ASN1_OCTET_STRING, \ 				(evp_verify_method *)RSA_verify_ASN1_OCTET_STRING, \ 				{EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}
else|#
directive|else
define|#
directive|define
name|EVP_PKEY_RSA_method
value|EVP_PKEY_NULL_method
define|#
directive|define
name|EVP_PKEY_RSA_ASN1_OCTET_STRING_method
value|EVP_PKEY_NULL_method
endif|#
directive|endif
endif|#
directive|endif
comment|/* !EVP_MD */
struct|struct
name|env_md_ctx_st
block|{
specifier|const
name|EVP_MD
modifier|*
name|digest
decl_stmt|;
name|ENGINE
modifier|*
name|engine
decl_stmt|;
comment|/* functional reference if 'digest' is ENGINE-provided */
name|unsigned
name|long
name|flags
decl_stmt|;
name|void
modifier|*
name|md_data
decl_stmt|;
block|}
comment|/* EVP_MD_CTX */
struct|;
comment|/* values for EVP_MD_CTX flags */
define|#
directive|define
name|EVP_MD_CTX_FLAG_ONESHOT
value|0x0001
comment|/* digest update will be called 						* once only */
define|#
directive|define
name|EVP_MD_CTX_FLAG_CLEANED
value|0x0002
comment|/* context has already been 						* cleaned */
define|#
directive|define
name|EVP_MD_CTX_FLAG_REUSE
value|0x0004
comment|/* Don't free up ctx->md_data 						* in EVP_MD_CTX_cleanup */
define|#
directive|define
name|EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
value|0x0008
comment|/* Allow use of non FIPS digest 						 * in FIPS mode */
struct|struct
name|evp_cipher_st
block|{
name|int
name|nid
decl_stmt|;
name|int
name|block_size
decl_stmt|;
name|int
name|key_len
decl_stmt|;
comment|/* Default value for variable length ciphers */
name|int
name|iv_len
decl_stmt|;
name|unsigned
name|long
name|flags
decl_stmt|;
comment|/* Various flags */
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
comment|/* init key */
name|int
function_decl|(
modifier|*
name|do_cipher
function_decl|)
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inl
parameter_list|)
function_decl|;
comment|/* encrypt/decrypt data */
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* cleanup ctx */
name|int
name|ctx_size
decl_stmt|;
comment|/* how big ctx->cipher_data needs to be */
name|int
function_decl|(
modifier|*
name|set_asn1_parameters
function_decl|)
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
parameter_list|,
name|ASN1_TYPE
modifier|*
parameter_list|)
function_decl|;
comment|/* Populate a ASN1_TYPE with parameters */
name|int
function_decl|(
modifier|*
name|get_asn1_parameters
function_decl|)
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
parameter_list|,
name|ASN1_TYPE
modifier|*
parameter_list|)
function_decl|;
comment|/* Get parameters from a ASN1_TYPE */
name|int
function_decl|(
modifier|*
name|ctrl
function_decl|)
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|arg
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
comment|/* Miscellaneous operations */
name|void
modifier|*
name|app_data
decl_stmt|;
comment|/* Application data */
block|}
comment|/* EVP_CIPHER */
struct|;
comment|/* Values for cipher flags */
comment|/* Modes for ciphers */
define|#
directive|define
name|EVP_CIPH_STREAM_CIPHER
value|0x0
define|#
directive|define
name|EVP_CIPH_ECB_MODE
value|0x1
define|#
directive|define
name|EVP_CIPH_CBC_MODE
value|0x2
define|#
directive|define
name|EVP_CIPH_CFB_MODE
value|0x3
define|#
directive|define
name|EVP_CIPH_OFB_MODE
value|0x4
define|#
directive|define
name|EVP_CIPH_MODE
value|0x7
comment|/* Set if variable length cipher */
define|#
directive|define
name|EVP_CIPH_VARIABLE_LENGTH
value|0x8
comment|/* Set if the iv handling should be done by the cipher itself */
define|#
directive|define
name|EVP_CIPH_CUSTOM_IV
value|0x10
comment|/* Set if the cipher's init() function should be called if key is NULL */
define|#
directive|define
name|EVP_CIPH_ALWAYS_CALL_INIT
value|0x20
comment|/* Call ctrl() to init cipher parameters */
define|#
directive|define
name|EVP_CIPH_CTRL_INIT
value|0x40
comment|/* Don't use standard key length function */
define|#
directive|define
name|EVP_CIPH_CUSTOM_KEY_LENGTH
value|0x80
comment|/* Don't use standard block padding */
define|#
directive|define
name|EVP_CIPH_NO_PADDING
value|0x100
comment|/* cipher handles random key generation */
define|#
directive|define
name|EVP_CIPH_RAND_KEY
value|0x200
comment|/* ctrl() values */
define|#
directive|define
name|EVP_CTRL_INIT
value|0x0
define|#
directive|define
name|EVP_CTRL_SET_KEY_LENGTH
value|0x1
define|#
directive|define
name|EVP_CTRL_GET_RC2_KEY_BITS
value|0x2
define|#
directive|define
name|EVP_CTRL_SET_RC2_KEY_BITS
value|0x3
define|#
directive|define
name|EVP_CTRL_GET_RC5_ROUNDS
value|0x4
define|#
directive|define
name|EVP_CTRL_SET_RC5_ROUNDS
value|0x5
define|#
directive|define
name|EVP_CTRL_RAND_KEY
value|0x6
typedef|typedef
struct|struct
name|evp_cipher_info_st
block|{
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
decl_stmt|;
name|unsigned
name|char
name|iv
index|[
name|EVP_MAX_IV_LENGTH
index|]
decl_stmt|;
block|}
name|EVP_CIPHER_INFO
typedef|;
struct|struct
name|evp_cipher_ctx_st
block|{
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
decl_stmt|;
name|ENGINE
modifier|*
name|engine
decl_stmt|;
comment|/* functional reference if 'cipher' is ENGINE-provided */
name|int
name|encrypt
decl_stmt|;
comment|/* encrypt or decrypt */
name|int
name|buf_len
decl_stmt|;
comment|/* number we have left */
name|unsigned
name|char
name|oiv
index|[
name|EVP_MAX_IV_LENGTH
index|]
decl_stmt|;
comment|/* original iv */
name|unsigned
name|char
name|iv
index|[
name|EVP_MAX_IV_LENGTH
index|]
decl_stmt|;
comment|/* working iv */
name|unsigned
name|char
name|buf
index|[
name|EVP_MAX_BLOCK_LENGTH
index|]
decl_stmt|;
comment|/* saved partial block */
name|int
name|num
decl_stmt|;
comment|/* used by cfb/ofb mode */
name|void
modifier|*
name|app_data
decl_stmt|;
comment|/* application stuff */
name|int
name|key_len
decl_stmt|;
comment|/* May change for variable length cipher */
name|unsigned
name|long
name|flags
decl_stmt|;
comment|/* Various flags */
name|void
modifier|*
name|cipher_data
decl_stmt|;
comment|/* per EVP data */
name|int
name|final_used
decl_stmt|;
name|int
name|block_mask
decl_stmt|;
name|unsigned
name|char
name|final
index|[
name|EVP_MAX_BLOCK_LENGTH
index|]
decl_stmt|;
comment|/* possible final block */
block|}
comment|/* EVP_CIPHER_CTX */
struct|;
typedef|typedef
struct|struct
name|evp_Encode_Ctx_st
block|{
name|int
name|num
decl_stmt|;
comment|/* number saved in a partial encode/decode */
name|int
name|length
decl_stmt|;
comment|/* The length is either the output line length 			 * (in input bytes) or the shortest input line 			 * length that is ok.  Once decoding begins, 			 * the length is adjusted up each time a longer 			 * line is decoded */
name|unsigned
name|char
name|enc_data
index|[
literal|80
index|]
decl_stmt|;
comment|/* data to encode */
name|int
name|line_num
decl_stmt|;
comment|/* number read on current line */
name|int
name|expect_nl
decl_stmt|;
block|}
name|EVP_ENCODE_CTX
typedef|;
comment|/* Password based encryption function */
typedef|typedef
name|int
function_decl|(
name|EVP_PBE_KEYGEN
function_decl|)
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|int
name|passlen
parameter_list|,
name|ASN1_TYPE
modifier|*
name|param
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|,
name|int
name|en_de
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
define|#
directive|define
name|EVP_PKEY_assign_RSA
parameter_list|(
name|pkey
parameter_list|,
name|rsa
parameter_list|)
value|EVP_PKEY_assign((pkey),EVP_PKEY_RSA,\ 					(char *)(rsa))
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
define|#
directive|define
name|EVP_PKEY_assign_DSA
parameter_list|(
name|pkey
parameter_list|,
name|dsa
parameter_list|)
value|EVP_PKEY_assign((pkey),EVP_PKEY_DSA,\ 					(char *)(dsa))
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
define|#
directive|define
name|EVP_PKEY_assign_DH
parameter_list|(
name|pkey
parameter_list|,
name|dh
parameter_list|)
value|EVP_PKEY_assign((pkey),EVP_PKEY_DH,\ 					(char *)(dh))
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
define|#
directive|define
name|EVP_PKEY_assign_EC_KEY
parameter_list|(
name|pkey
parameter_list|,
name|eckey
parameter_list|)
value|EVP_PKEY_assign((pkey),EVP_PKEY_EC,\                                         (char *)(eckey))
endif|#
directive|endif
comment|/* Add some extra combinations */
define|#
directive|define
name|EVP_get_digestbynid
parameter_list|(
name|a
parameter_list|)
value|EVP_get_digestbyname(OBJ_nid2sn(a))
define|#
directive|define
name|EVP_get_digestbyobj
parameter_list|(
name|a
parameter_list|)
value|EVP_get_digestbynid(OBJ_obj2nid(a))
define|#
directive|define
name|EVP_get_cipherbynid
parameter_list|(
name|a
parameter_list|)
value|EVP_get_cipherbyname(OBJ_nid2sn(a))
define|#
directive|define
name|EVP_get_cipherbyobj
parameter_list|(
name|a
parameter_list|)
value|EVP_get_cipherbynid(OBJ_obj2nid(a))
name|int
name|EVP_MD_type
parameter_list|(
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_MD_nid
parameter_list|(
name|e
parameter_list|)
value|EVP_MD_type(e)
define|#
directive|define
name|EVP_MD_name
parameter_list|(
name|e
parameter_list|)
value|OBJ_nid2sn(EVP_MD_nid(e))
name|int
name|EVP_MD_pkey_type
parameter_list|(
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|EVP_MD_size
parameter_list|(
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|EVP_MD_block_size
parameter_list|(
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_MD_CTX_md
parameter_list|(
specifier|const
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_MD_CTX_size
parameter_list|(
name|e
parameter_list|)
value|EVP_MD_size(EVP_MD_CTX_md(e))
define|#
directive|define
name|EVP_MD_CTX_block_size
parameter_list|(
name|e
parameter_list|)
value|EVP_MD_block_size(EVP_MD_CTX_md(e))
define|#
directive|define
name|EVP_MD_CTX_type
parameter_list|(
name|e
parameter_list|)
value|EVP_MD_type(EVP_MD_CTX_md(e))
name|int
name|EVP_CIPHER_nid
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_CIPHER_name
parameter_list|(
name|e
parameter_list|)
value|OBJ_nid2sn(EVP_CIPHER_nid(e))
name|int
name|EVP_CIPHER_block_size
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_key_length
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_iv_length
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|)
function_decl|;
name|unsigned
name|long
name|EVP_CIPHER_flags
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_CIPHER_mode
parameter_list|(
name|e
parameter_list|)
value|(EVP_CIPHER_flags(e)& EVP_CIPH_MODE)
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_CIPHER_CTX_cipher
parameter_list|(
specifier|const
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_nid
parameter_list|(
specifier|const
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_block_size
parameter_list|(
specifier|const
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_key_length
parameter_list|(
specifier|const
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_iv_length
parameter_list|(
specifier|const
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
modifier|*
name|EVP_CIPHER_CTX_get_app_data
parameter_list|(
specifier|const
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|EVP_CIPHER_CTX_set_app_data
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_CIPHER_CTX_type
parameter_list|(
name|c
parameter_list|)
value|EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c))
name|unsigned
name|long
name|EVP_CIPHER_CTX_flags
parameter_list|(
specifier|const
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_CIPHER_CTX_mode
parameter_list|(
name|e
parameter_list|)
value|(EVP_CIPHER_CTX_flags(e)& EVP_CIPH_MODE)
define|#
directive|define
name|EVP_ENCODE_LENGTH
parameter_list|(
name|l
parameter_list|)
value|(((l+2)/3*4)+(l/48+1)*2+80)
define|#
directive|define
name|EVP_DECODE_LENGTH
parameter_list|(
name|l
parameter_list|)
value|((l+3)/4*3+80)
define|#
directive|define
name|EVP_SignInit_ex
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|EVP_DigestInit_ex(a,b,c)
define|#
directive|define
name|EVP_SignInit
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|EVP_DigestInit(a,b)
define|#
directive|define
name|EVP_SignUpdate
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|EVP_DigestUpdate(a,b,c)
define|#
directive|define
name|EVP_VerifyInit_ex
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|EVP_DigestInit_ex(a,b,c)
define|#
directive|define
name|EVP_VerifyInit
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|EVP_DigestInit(a,b)
define|#
directive|define
name|EVP_VerifyUpdate
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|EVP_DigestUpdate(a,b,c)
define|#
directive|define
name|EVP_OpenUpdate
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|EVP_DecryptUpdate(a,b,c,d,e)
define|#
directive|define
name|EVP_SealUpdate
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|EVP_EncryptUpdate(a,b,c,d,e)
ifdef|#
directive|ifdef
name|CONST_STRICT
name|void
name|BIO_set_md
parameter_list|(
name|BIO
modifier|*
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
else|#
directive|else
define|#
directive|define
name|BIO_set_md
parameter_list|(
name|b
parameter_list|,
name|md
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_MD,0,(char *)md)
endif|#
directive|endif
define|#
directive|define
name|BIO_get_md
parameter_list|(
name|b
parameter_list|,
name|mdp
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_MD,0,(char *)mdp)
define|#
directive|define
name|BIO_get_md_ctx
parameter_list|(
name|b
parameter_list|,
name|mdcp
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_MD_CTX,0,(char *)mdcp)
define|#
directive|define
name|BIO_set_md_ctx
parameter_list|(
name|b
parameter_list|,
name|mdcp
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_MD_CTX,0,(char *)mdcp)
define|#
directive|define
name|BIO_get_cipher_status
parameter_list|(
name|b
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_CIPHER_STATUS,0,NULL)
define|#
directive|define
name|BIO_get_cipher_ctx
parameter_list|(
name|b
parameter_list|,
name|c_pp
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_CIPHER_CTX,0,(char *)c_pp)
name|int
name|EVP_Cipher
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|c
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inl
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_add_cipher_alias
parameter_list|(
name|n
parameter_list|,
name|alias
parameter_list|)
define|\
value|OBJ_NAME_add((alias),OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS,(n))
define|#
directive|define
name|EVP_add_digest_alias
parameter_list|(
name|n
parameter_list|,
name|alias
parameter_list|)
define|\
value|OBJ_NAME_add((alias),OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,(n))
define|#
directive|define
name|EVP_delete_cipher_alias
parameter_list|(
name|alias
parameter_list|)
define|\
value|OBJ_NAME_remove(alias,OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS);
define|#
directive|define
name|EVP_delete_digest_alias
parameter_list|(
name|alias
parameter_list|)
define|\
value|OBJ_NAME_remove(alias,OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS);
name|void
name|EVP_MD_CTX_init
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|EVP_MD_CTX_cleanup
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|EVP_MD_CTX
modifier|*
name|EVP_MD_CTX_create
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|EVP_MD_CTX_destroy
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|EVP_MD_CTX_copy_ex
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|out
parameter_list|,
specifier|const
name|EVP_MD_CTX
modifier|*
name|in
parameter_list|)
function_decl|;
name|void
name|EVP_MD_CTX_set_flags
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|void
name|EVP_MD_CTX_clear_flags
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
name|EVP_MD_CTX_test_flags
parameter_list|(
specifier|const
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
name|EVP_DigestInit_ex
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|ENGINE
modifier|*
name|impl
parameter_list|)
function_decl|;
name|int
name|EVP_DigestUpdate
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|void
modifier|*
name|d
parameter_list|,
name|size_t
name|cnt
parameter_list|)
function_decl|;
name|int
name|EVP_DigestFinal_ex
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|EVP_Digest
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|count
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|ENGINE
modifier|*
name|impl
parameter_list|)
function_decl|;
name|int
name|EVP_MD_CTX_copy
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|out
parameter_list|,
specifier|const
name|EVP_MD_CTX
modifier|*
name|in
parameter_list|)
function_decl|;
name|int
name|EVP_DigestInit
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|)
function_decl|;
name|int
name|EVP_DigestFinal
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|EVP_read_pw_string
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
function_decl|;
name|void
name|EVP_set_pw_prompt
parameter_list|(
specifier|const
name|char
modifier|*
name|prompt
parameter_list|)
function_decl|;
name|char
modifier|*
name|EVP_get_pw_prompt
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|EVP_BytesToKey
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|type
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|salt
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|datal
parameter_list|,
name|int
name|count
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|unsigned
name|char
modifier|*
name|iv
parameter_list|)
function_decl|;
name|int
name|EVP_EncryptInit
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|)
function_decl|;
name|int
name|EVP_EncryptInit_ex
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
name|ENGINE
modifier|*
name|impl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|)
function_decl|;
name|int
name|EVP_EncryptUpdate
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inl
parameter_list|)
function_decl|;
name|int
name|EVP_EncryptFinal_ex
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_EncryptFinal
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_DecryptInit
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|)
function_decl|;
name|int
name|EVP_DecryptInit_ex
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
name|ENGINE
modifier|*
name|impl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|)
function_decl|;
name|int
name|EVP_DecryptUpdate
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inl
parameter_list|)
function_decl|;
name|int
name|EVP_DecryptFinal
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|outm
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_DecryptFinal_ex
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|outm
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_CipherInit
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|int
name|EVP_CipherInit_ex
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
name|ENGINE
modifier|*
name|impl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|int
name|EVP_CipherUpdate
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inl
parameter_list|)
function_decl|;
name|int
name|EVP_CipherFinal
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|outm
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_CipherFinal_ex
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|outm
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_SignFinal
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|s
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|EVP_VerifyFinal
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sigbuf
parameter_list|,
name|unsigned
name|int
name|siglen
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|EVP_OpenInit
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|ek
parameter_list|,
name|int
name|ekl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|iv
parameter_list|,
name|EVP_PKEY
modifier|*
name|priv
parameter_list|)
function_decl|;
name|int
name|EVP_OpenFinal
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_SealInit
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|ek
parameter_list|,
name|int
modifier|*
name|ekl
parameter_list|,
name|unsigned
name|char
modifier|*
name|iv
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|pubk
parameter_list|,
name|int
name|npubk
parameter_list|)
function_decl|;
name|int
name|EVP_SealFinal
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|void
name|EVP_EncodeInit
parameter_list|(
name|EVP_ENCODE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|EVP_EncodeUpdate
parameter_list|(
name|EVP_ENCODE_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inl
parameter_list|)
function_decl|;
name|void
name|EVP_EncodeFinal
parameter_list|(
name|EVP_ENCODE_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_EncodeBlock
parameter_list|(
name|unsigned
name|char
modifier|*
name|t
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|EVP_DecodeInit
parameter_list|(
name|EVP_ENCODE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|EVP_DecodeUpdate
parameter_list|(
name|EVP_ENCODE_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inl
parameter_list|)
function_decl|;
name|int
name|EVP_DecodeFinal
parameter_list|(
name|EVP_ENCODE_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|)
function_decl|;
name|int
name|EVP_DecodeBlock
parameter_list|(
name|unsigned
name|char
modifier|*
name|t
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|EVP_CIPHER_CTX_init
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_cleanup
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
name|EVP_CIPHER_CTX
modifier|*
name|EVP_CIPHER_CTX_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|EVP_CIPHER_CTX_free
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_set_key_length
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|x
parameter_list|,
name|int
name|keylen
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_set_padding
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|c
parameter_list|,
name|int
name|pad
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_ctrl
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|arg
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_CTX_rand_key
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|BIO_METHOD
modifier|*
name|BIO_f_md
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_f_base64
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_f_cipher
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_f_reliable
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|BIO_set_cipher
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|c
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|k
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|i
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|const
name|EVP_MD
modifier|*
name|EVP_md_null
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_MD2
specifier|const
name|EVP_MD
modifier|*
name|EVP_md2
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_MD4
specifier|const
name|EVP_MD
modifier|*
name|EVP_md4
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_MD5
specifier|const
name|EVP_MD
modifier|*
name|EVP_md5
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA
specifier|const
name|EVP_MD
modifier|*
name|EVP_sha
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_sha1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_dss
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_dss1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_ecdsa
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA256
specifier|const
name|EVP_MD
modifier|*
name|EVP_sha224
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_sha256
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA512
specifier|const
name|EVP_MD
modifier|*
name|EVP_sha384
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_sha512
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_MDC2
specifier|const
name|EVP_MD
modifier|*
name|EVP_mdc2
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_RIPEMD
specifier|const
name|EVP_MD
modifier|*
name|EVP_ripemd160
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_enc_null
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* does nothing :-) */
ifndef|#
directive|ifndef
name|OPENSSL_NO_DES
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede3
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede3_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_des_cfb
value|EVP_des_cfb64
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_des_ede_cfb
value|EVP_des_ede_cfb64
if|#
directive|if
literal|0
block|const EVP_CIPHER *EVP_des_ede_cfb1(void); const EVP_CIPHER *EVP_des_ede_cfb8(void);
endif|#
directive|endif
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede3_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_des_ede3_cfb
value|EVP_des_ede3_cfb64
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede3_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede3_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede3_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_des_ede3_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_desx_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* This should now be supported through the dev_crypto ENGINE. But also, why are  * rc4 and md5 declarations made here inside a "NO_DES" precompiler branch? */
if|#
directive|if
literal|0
ifdef|#
directive|ifdef
name|OPENSSL_OPENBSD_DEV_CRYPTO
block|const EVP_CIPHER *EVP_dev_crypto_des_ede3_cbc(void); const EVP_CIPHER *EVP_dev_crypto_rc4(void); const EVP_MD *EVP_dev_crypto_md5(void);
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_RC4
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc4
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc4_40
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_IDEA
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_idea_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_idea_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_idea_cfb
value|EVP_idea_cfb64
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_idea_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_idea_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_RC2
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc2_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc2_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc2_40_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc2_64_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc2_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_rc2_cfb
value|EVP_rc2_cfb64
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc2_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BF
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_bf_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_bf_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_bf_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_bf_cfb
value|EVP_bf_cfb64
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_bf_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_CAST
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_cast5_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_cast5_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_cast5_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_cast5_cfb
value|EVP_cast5_cfb64
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_cast5_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_RC5
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc5_32_12_16_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc5_32_12_16_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc5_32_12_16_cfb64
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_rc5_32_12_16_cfb
value|EVP_rc5_32_12_16_cfb64
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_rc5_32_12_16_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_AES
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_128_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_128_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_128_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_128_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_128_cfb128
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_aes_128_cfb
value|EVP_aes_128_cfb128
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_128_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|const EVP_CIPHER *EVP_aes_128_ctr(void);
endif|#
directive|endif
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_192_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_192_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_192_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_192_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_192_cfb128
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_aes_192_cfb
value|EVP_aes_192_cfb128
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_192_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|const EVP_CIPHER *EVP_aes_192_ctr(void);
endif|#
directive|endif
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_256_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_256_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_256_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_256_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_256_cfb128
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_aes_256_cfb
value|EVP_aes_256_cfb128
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_aes_256_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|const EVP_CIPHER *EVP_aes_256_ctr(void);
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_CAMELLIA
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_128_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_128_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_128_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_128_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_128_cfb128
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_camellia_128_cfb
value|EVP_camellia_128_cfb128
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_128_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_192_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_192_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_192_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_192_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_192_cfb128
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_camellia_192_cfb
value|EVP_camellia_192_cfb128
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_192_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_256_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_256_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_256_cfb1
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_256_cfb8
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_256_cfb128
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_camellia_256_cfb
value|EVP_camellia_256_cfb128
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_camellia_256_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SEED
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_seed_ecb
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_seed_cbc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_seed_cfb128
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|EVP_seed_cfb
value|EVP_seed_cfb128
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_seed_ofb
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|OPENSSL_add_all_algorithms_noconf
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|OPENSSL_add_all_algorithms_conf
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|OPENSSL_LOAD_CONF
define|#
directive|define
name|OpenSSL_add_all_algorithms
parameter_list|()
define|\
value|OPENSSL_add_all_algorithms_conf()
else|#
directive|else
define|#
directive|define
name|OpenSSL_add_all_algorithms
parameter_list|()
define|\
value|OPENSSL_add_all_algorithms_noconf()
endif|#
directive|endif
name|void
name|OpenSSL_add_all_ciphers
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|OpenSSL_add_all_digests
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|SSLeay_add_all_algorithms
parameter_list|()
value|OpenSSL_add_all_algorithms()
define|#
directive|define
name|SSLeay_add_all_ciphers
parameter_list|()
value|OpenSSL_add_all_ciphers()
define|#
directive|define
name|SSLeay_add_all_digests
parameter_list|()
value|OpenSSL_add_all_digests()
name|int
name|EVP_add_cipher
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|)
function_decl|;
name|int
name|EVP_add_digest
parameter_list|(
specifier|const
name|EVP_MD
modifier|*
name|digest
parameter_list|)
function_decl|;
specifier|const
name|EVP_CIPHER
modifier|*
name|EVP_get_cipherbyname
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|EVP_MD
modifier|*
name|EVP_get_digestbyname
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|EVP_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_decrypt
parameter_list|(
name|unsigned
name|char
modifier|*
name|dec_key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|enc_key
parameter_list|,
name|int
name|enc_key_len
parameter_list|,
name|EVP_PKEY
modifier|*
name|private_key
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_encrypt
parameter_list|(
name|unsigned
name|char
modifier|*
name|enc_key
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|int
name|key_len
parameter_list|,
name|EVP_PKEY
modifier|*
name|pub_key
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_type
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_bits
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_size
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_assign
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|int
name|type
parameter_list|,
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
struct_decl|struct
name|rsa_st
struct_decl|;
name|int
name|EVP_PKEY_set1_RSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|struct
name|rsa_st
modifier|*
name|key
parameter_list|)
function_decl|;
name|struct
name|rsa_st
modifier|*
name|EVP_PKEY_get1_RSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
struct_decl|struct
name|dsa_st
struct_decl|;
name|int
name|EVP_PKEY_set1_DSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|struct
name|dsa_st
modifier|*
name|key
parameter_list|)
function_decl|;
name|struct
name|dsa_st
modifier|*
name|EVP_PKEY_get1_DSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
struct_decl|struct
name|dh_st
struct_decl|;
name|int
name|EVP_PKEY_set1_DH
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|struct
name|dh_st
modifier|*
name|key
parameter_list|)
function_decl|;
name|struct
name|dh_st
modifier|*
name|EVP_PKEY_get1_DH
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
struct_decl|struct
name|ec_key_st
struct_decl|;
name|int
name|EVP_PKEY_set1_EC_KEY
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|struct
name|ec_key_st
modifier|*
name|key
parameter_list|)
function_decl|;
name|struct
name|ec_key_st
modifier|*
name|EVP_PKEY_get1_EC_KEY
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
endif|#
directive|endif
name|EVP_PKEY
modifier|*
name|EVP_PKEY_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|EVP_PKEY_free
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PublicKey
parameter_list|(
name|int
name|type
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|int
name|i2d_PublicKey
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PrivateKey
parameter_list|(
name|int
name|type
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_AutoPrivateKey
parameter_list|(
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|int
name|i2d_PrivateKey
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_copy_parameters
parameter_list|(
name|EVP_PKEY
modifier|*
name|to
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|from
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_missing_parameters
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_save_parameters
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_cmp_parameters
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_cmp
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_type
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* calls methods */
name|int
name|EVP_CIPHER_param_to_asn1
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|c
parameter_list|,
name|ASN1_TYPE
modifier|*
name|type
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_asn1_to_param
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|c
parameter_list|,
name|ASN1_TYPE
modifier|*
name|type
parameter_list|)
function_decl|;
comment|/* These are used by EVP_CIPHER methods */
name|int
name|EVP_CIPHER_set_asn1_iv
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|c
parameter_list|,
name|ASN1_TYPE
modifier|*
name|type
parameter_list|)
function_decl|;
name|int
name|EVP_CIPHER_get_asn1_iv
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|c
parameter_list|,
name|ASN1_TYPE
modifier|*
name|type
parameter_list|)
function_decl|;
comment|/* PKCS5 password based encryption */
name|int
name|PKCS5_PBE_keyivgen
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|int
name|passlen
parameter_list|,
name|ASN1_TYPE
modifier|*
name|param
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|,
name|int
name|en_de
parameter_list|)
function_decl|;
name|int
name|PKCS5_PBKDF2_HMAC_SHA1
parameter_list|(
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|int
name|passlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|salt
parameter_list|,
name|int
name|saltlen
parameter_list|,
name|int
name|iter
parameter_list|,
name|int
name|keylen
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|)
function_decl|;
name|int
name|PKCS5_v2_PBE_keyivgen
parameter_list|(
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|int
name|passlen
parameter_list|,
name|ASN1_TYPE
modifier|*
name|param
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|,
name|int
name|en_de
parameter_list|)
function_decl|;
name|void
name|PKCS5_PBE_add
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|EVP_PBE_CipherInit
parameter_list|(
name|ASN1_OBJECT
modifier|*
name|pbe_obj
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|int
name|passlen
parameter_list|,
name|ASN1_TYPE
modifier|*
name|param
parameter_list|,
name|EVP_CIPHER_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|en_de
parameter_list|)
function_decl|;
name|int
name|EVP_PBE_alg_add
parameter_list|(
name|int
name|nid
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|,
name|EVP_PBE_KEYGEN
modifier|*
name|keygen
parameter_list|)
function_decl|;
name|void
name|EVP_PBE_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_EVP_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the EVP functions. */
comment|/* Function codes. */
define|#
directive|define
name|EVP_F_AES_INIT_KEY
value|133
define|#
directive|define
name|EVP_F_CAMELLIA_INIT_KEY
value|159
define|#
directive|define
name|EVP_F_D2I_PKEY
value|100
define|#
directive|define
name|EVP_F_DSAPKEY2PKCS8
value|134
define|#
directive|define
name|EVP_F_DSA_PKEY2PKCS8
value|135
define|#
directive|define
name|EVP_F_ECDSA_PKEY2PKCS8
value|129
define|#
directive|define
name|EVP_F_ECKEY_PKEY2PKCS8
value|132
define|#
directive|define
name|EVP_F_EVP_CIPHERINIT_EX
value|123
define|#
directive|define
name|EVP_F_EVP_CIPHER_CTX_CTRL
value|124
define|#
directive|define
name|EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
value|122
define|#
directive|define
name|EVP_F_EVP_DECRYPTFINAL_EX
value|101
define|#
directive|define
name|EVP_F_EVP_DIGESTINIT_EX
value|128
define|#
directive|define
name|EVP_F_EVP_ENCRYPTFINAL_EX
value|127
define|#
directive|define
name|EVP_F_EVP_MD_CTX_COPY_EX
value|110
define|#
directive|define
name|EVP_F_EVP_OPENINIT
value|102
define|#
directive|define
name|EVP_F_EVP_PBE_ALG_ADD
value|115
define|#
directive|define
name|EVP_F_EVP_PBE_CIPHERINIT
value|116
define|#
directive|define
name|EVP_F_EVP_PKCS82PKEY
value|111
define|#
directive|define
name|EVP_F_EVP_PKEY2PKCS8_BROKEN
value|113
define|#
directive|define
name|EVP_F_EVP_PKEY_COPY_PARAMETERS
value|103
define|#
directive|define
name|EVP_F_EVP_PKEY_DECRYPT
value|104
define|#
directive|define
name|EVP_F_EVP_PKEY_ENCRYPT
value|105
define|#
directive|define
name|EVP_F_EVP_PKEY_GET1_DH
value|119
define|#
directive|define
name|EVP_F_EVP_PKEY_GET1_DSA
value|120
define|#
directive|define
name|EVP_F_EVP_PKEY_GET1_ECDSA
value|130
define|#
directive|define
name|EVP_F_EVP_PKEY_GET1_EC_KEY
value|131
define|#
directive|define
name|EVP_F_EVP_PKEY_GET1_RSA
value|121
define|#
directive|define
name|EVP_F_EVP_PKEY_NEW
value|106
define|#
directive|define
name|EVP_F_EVP_RIJNDAEL
value|126
define|#
directive|define
name|EVP_F_EVP_SIGNFINAL
value|107
define|#
directive|define
name|EVP_F_EVP_VERIFYFINAL
value|108
define|#
directive|define
name|EVP_F_PKCS5_PBE_KEYIVGEN
value|117
define|#
directive|define
name|EVP_F_PKCS5_V2_PBE_KEYIVGEN
value|118
define|#
directive|define
name|EVP_F_PKCS8_SET_BROKEN
value|112
define|#
directive|define
name|EVP_F_RC2_MAGIC_TO_METH
value|109
define|#
directive|define
name|EVP_F_RC5_CTRL
value|125
comment|/* Reason codes. */
define|#
directive|define
name|EVP_R_AES_KEY_SETUP_FAILED
value|143
define|#
directive|define
name|EVP_R_ASN1_LIB
value|140
define|#
directive|define
name|EVP_R_BAD_BLOCK_LENGTH
value|136
define|#
directive|define
name|EVP_R_BAD_DECRYPT
value|100
define|#
directive|define
name|EVP_R_BAD_KEY_LENGTH
value|137
define|#
directive|define
name|EVP_R_BN_DECODE_ERROR
value|112
define|#
directive|define
name|EVP_R_BN_PUBKEY_ERROR
value|113
define|#
directive|define
name|EVP_R_CAMELLIA_KEY_SETUP_FAILED
value|157
define|#
directive|define
name|EVP_R_CIPHER_PARAMETER_ERROR
value|122
define|#
directive|define
name|EVP_R_CTRL_NOT_IMPLEMENTED
value|132
define|#
directive|define
name|EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
value|133
define|#
directive|define
name|EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
value|138
define|#
directive|define
name|EVP_R_DECODE_ERROR
value|114
define|#
directive|define
name|EVP_R_DIFFERENT_KEY_TYPES
value|101
define|#
directive|define
name|EVP_R_ENCODE_ERROR
value|115
define|#
directive|define
name|EVP_R_EVP_PBE_CIPHERINIT_ERROR
value|119
define|#
directive|define
name|EVP_R_EXPECTING_AN_RSA_KEY
value|127
define|#
directive|define
name|EVP_R_EXPECTING_A_DH_KEY
value|128
define|#
directive|define
name|EVP_R_EXPECTING_A_DSA_KEY
value|129
define|#
directive|define
name|EVP_R_EXPECTING_A_ECDSA_KEY
value|141
define|#
directive|define
name|EVP_R_EXPECTING_A_EC_KEY
value|142
define|#
directive|define
name|EVP_R_INITIALIZATION_ERROR
value|134
define|#
directive|define
name|EVP_R_INPUT_NOT_INITIALIZED
value|111
define|#
directive|define
name|EVP_R_INVALID_KEY_LENGTH
value|130
define|#
directive|define
name|EVP_R_IV_TOO_LARGE
value|102
define|#
directive|define
name|EVP_R_KEYGEN_FAILURE
value|120
define|#
directive|define
name|EVP_R_MISSING_PARAMETERS
value|103
define|#
directive|define
name|EVP_R_NO_CIPHER_SET
value|131
define|#
directive|define
name|EVP_R_NO_DIGEST_SET
value|139
define|#
directive|define
name|EVP_R_NO_DSA_PARAMETERS
value|116
define|#
directive|define
name|EVP_R_NO_SIGN_FUNCTION_CONFIGURED
value|104
define|#
directive|define
name|EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
value|105
define|#
directive|define
name|EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
value|117
define|#
directive|define
name|EVP_R_PUBLIC_KEY_NOT_RSA
value|106
define|#
directive|define
name|EVP_R_UNKNOWN_PBE_ALGORITHM
value|121
define|#
directive|define
name|EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
value|135
define|#
directive|define
name|EVP_R_UNSUPPORTED_CIPHER
value|107
define|#
directive|define
name|EVP_R_UNSUPPORTED_KEYLENGTH
value|123
define|#
directive|define
name|EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
value|124
define|#
directive|define
name|EVP_R_UNSUPPORTED_KEY_SIZE
value|108
define|#
directive|define
name|EVP_R_UNSUPPORTED_PRF
value|125
define|#
directive|define
name|EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
value|118
define|#
directive|define
name|EVP_R_UNSUPPORTED_SALT_TYPE
value|126
define|#
directive|define
name|EVP_R_WRONG_FINAL_BLOCK_LENGTH
value|109
define|#
directive|define
name|EVP_R_WRONG_PUBLIC_KEY_TYPE
value|110
define|#
directive|define
name|EVP_R_SEED_KEY_SETUP_FAILED
value|162
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

