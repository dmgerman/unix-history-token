begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/constant_time_locl.h */
end_comment

begin_comment
comment|/*  * Utilities for constant-time cryptography.  *  * Author: Emilia Kasper (emilia@openssl.org)  * Based on previous work by Bodo Moeller, Emilia Kasper, Adam Langley  * (Google).  * ====================================================================  * Copyright (c) 2014 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from  *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_CONSTANT_TIME_LOCL_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_CONSTANT_TIME_LOCL_H
end_define

begin_include
include|#
directive|include
file|"e_os.h"
end_include

begin_comment
comment|/* For 'inline' */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * The boolean methods return a bitmask of all ones (0xff...f) for true  * and 0 for false. This is useful for choosing a value based on the result  * of a conditional in constant time. For example,  *  * if (a< b) {  *   c = a;  * } else {  *   c = b;  * }  *  * can be written as  *  * unsigned int lt = constant_time_lt(a, b);  * c = constant_time_select(lt, a, b);  */
comment|/*  * Returns the given value with the MSB copied to all the other  * bits. Uses the fact that arithmetic shift shifts-in the sign bit.  * However, this is not ensured by the C standard so you may need to  * replace this with something else on odd CPUs.  */
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_msb
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|)
function_decl|;
comment|/*  * Returns 0xff..f if a< b and 0 otherwise.  */
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_lt
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
comment|/* Convenience method for getting an 8-bit mask. */
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_lt_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
comment|/*  * Returns 0xff..f if a>= b and 0 otherwise.  */
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_ge
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
comment|/* Convenience method for getting an 8-bit mask. */
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_ge_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
comment|/*  * Returns 0xff..f if a == 0 and 0 otherwise.  */
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_is_zero
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|)
function_decl|;
comment|/* Convenience method for getting an 8-bit mask. */
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_is_zero_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|)
function_decl|;
comment|/*  * Returns 0xff..f if a == b and 0 otherwise.  */
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_eq
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
comment|/* Convenience method for getting an 8-bit mask. */
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_eq_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
comment|/* Signed integers. */
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_eq_int
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
comment|/* Convenience method for getting an 8-bit mask. */
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_eq_int_8
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
comment|/*  * Returns (mask& a) | (~mask& b).  *  * When |mask| is all 1s or all 0s (as returned by the methods above),  * the select methods return either |a| (if |mask| is nonzero) or |b|  * (if |mask| is zero).  */
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_select
parameter_list|(
name|unsigned
name|int
name|mask
parameter_list|,
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
comment|/* Convenience method for unsigned chars. */
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_select_8
parameter_list|(
name|unsigned
name|char
name|mask
parameter_list|,
name|unsigned
name|char
name|a
parameter_list|,
name|unsigned
name|char
name|b
parameter_list|)
function_decl|;
comment|/* Convenience method for signed integers. */
specifier|static
specifier|inline
name|int
name|constant_time_select_int
parameter_list|(
name|unsigned
name|int
name|mask
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_msb
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|)
block|{
return|return
call|(
name|unsigned
name|int
call|)
argument_list|(
call|(
name|int
call|)
argument_list|(
name|a
argument_list|)
operator|>>
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_lt
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
name|unsigned
name|int
name|lt
decl_stmt|;
comment|/* Case 1: msb(a) == msb(b). a< b iff the MSB of a - b is set.*/
name|lt
operator|=
operator|~
operator|(
name|a
operator|^
name|b
operator|)
operator|&
operator|(
name|a
operator|-
name|b
operator|)
expr_stmt|;
comment|/* Case 2: msb(a) != msb(b). a< b iff the MSB of b is set. */
name|lt
operator||=
operator|~
name|a
operator|&
name|b
expr_stmt|;
return|return
name|constant_time_msb
argument_list|(
name|lt
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_lt_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
return|return
call|(
name|unsigned
name|char
call|)
argument_list|(
name|constant_time_lt
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_ge
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
name|unsigned
name|int
name|ge
decl_stmt|;
comment|/* Case 1: msb(a) == msb(b). a>= b iff the MSB of a - b is not set.*/
name|ge
operator|=
operator|~
operator|(
operator|(
name|a
operator|^
name|b
operator|)
operator||
operator|(
name|a
operator|-
name|b
operator|)
operator|)
expr_stmt|;
comment|/* Case 2: msb(a) != msb(b). a>= b iff the MSB of a is set. */
name|ge
operator||=
name|a
operator|&
operator|~
name|b
expr_stmt|;
return|return
name|constant_time_msb
argument_list|(
name|ge
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_ge_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
return|return
call|(
name|unsigned
name|char
call|)
argument_list|(
name|constant_time_ge
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_is_zero
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|)
block|{
return|return
name|constant_time_msb
argument_list|(
operator|~
name|a
operator|&
operator|(
name|a
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_is_zero_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|)
block|{
return|return
call|(
name|unsigned
name|char
call|)
argument_list|(
name|constant_time_is_zero
argument_list|(
name|a
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_eq
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
return|return
name|constant_time_is_zero
argument_list|(
name|a
operator|^
name|b
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_eq_8
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
return|return
call|(
name|unsigned
name|char
call|)
argument_list|(
name|constant_time_eq
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_eq_int
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
name|constant_time_eq
argument_list|(
call|(
name|unsigned
call|)
argument_list|(
name|a
argument_list|)
argument_list|,
call|(
name|unsigned
call|)
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_eq_int_8
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
name|constant_time_eq_8
argument_list|(
call|(
name|unsigned
call|)
argument_list|(
name|a
argument_list|)
argument_list|,
call|(
name|unsigned
call|)
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|int
name|constant_time_select
parameter_list|(
name|unsigned
name|int
name|mask
parameter_list|,
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|mask
operator|&
name|a
operator|)
operator||
operator|(
operator|~
name|mask
operator|&
name|b
operator|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|char
name|constant_time_select_8
parameter_list|(
name|unsigned
name|char
name|mask
parameter_list|,
name|unsigned
name|char
name|a
parameter_list|,
name|unsigned
name|char
name|b
parameter_list|)
block|{
return|return
call|(
name|unsigned
name|char
call|)
argument_list|(
name|constant_time_select
argument_list|(
name|mask
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|int
name|constant_time_select_int
parameter_list|(
name|unsigned
name|int
name|mask
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|constant_time_select
argument_list|(
name|mask
argument_list|,
call|(
name|unsigned
call|)
argument_list|(
name|a
argument_list|)
argument_list|,
call|(
name|unsigned
call|)
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* HEADER_CONSTANT_TIME_LOCL_H */
end_comment

end_unit

