begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* x509v3.h */
end_comment

begin_comment
comment|/* Written by Dr Stephen N Henson (shenson@bigfoot.com) for the OpenSSL  * project 1999.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1999-2004 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    licensing@OpenSSL.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_X509V3_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_X509V3_H
end_define

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_include
include|#
directive|include
file|<openssl/x509.h>
end_include

begin_include
include|#
directive|include
file|<openssl/conf.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Forward reference */
struct_decl|struct
name|v3_ext_method
struct_decl|;
struct_decl|struct
name|v3_ext_ctx
struct_decl|;
comment|/* Useful typedefs */
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|X509V3_EXT_NEW
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|X509V3_EXT_FREE
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|X509V3_EXT_D2I
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|X509V3_EXT_I2D
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
call|(
modifier|*
name|X509V3_EXT_I2V
call|)
argument_list|(
expr|struct
name|v3_ext_method
operator|*
name|method
argument_list|,
name|void
operator|*
name|ext
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|extlist
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|*
call|(
modifier|*
name|X509V3_EXT_V2I
call|)
argument_list|(
expr|struct
name|v3_ext_method
operator|*
name|method
argument_list|,
expr|struct
name|v3_ext_ctx
operator|*
name|ctx
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|values
argument_list|)
argument_list|; typedef
name|char
operator|*
call|(
modifier|*
name|X509V3_EXT_I2S
call|)
argument_list|(
expr|struct
name|v3_ext_method
operator|*
name|method
argument_list|,
name|void
operator|*
name|ext
argument_list|)
argument_list|; typedef
name|void
operator|*
call|(
modifier|*
name|X509V3_EXT_S2I
call|)
argument_list|(
expr|struct
name|v3_ext_method
operator|*
name|method
argument_list|,
expr|struct
name|v3_ext_ctx
operator|*
name|ctx
argument_list|,
specifier|const
name|char
operator|*
name|str
argument_list|)
argument_list|; typedef
name|int
argument_list|(
argument|*X509V3_EXT_I2R
argument_list|)
operator|(
expr|struct
name|v3_ext_method
operator|*
name|method
operator|,
name|void
operator|*
name|ext
operator|,
name|BIO
operator|*
name|out
operator|,
name|int
name|indent
operator|)
argument_list|; typedef
name|void
operator|*
call|(
modifier|*
name|X509V3_EXT_R2I
call|)
argument_list|(
expr|struct
name|v3_ext_method
operator|*
name|method
argument_list|,
expr|struct
name|v3_ext_ctx
operator|*
name|ctx
argument_list|,
specifier|const
name|char
operator|*
name|str
argument_list|)
argument_list|;
comment|/* V3 extension structure */
expr|struct
name|v3_ext_method
block|{
name|int
name|ext_nid
block|;
name|int
name|ext_flags
block|;
comment|/* If this is set the following four fields are ignored */
name|ASN1_ITEM_EXP
operator|*
name|it
block|;
comment|/* Old style ASN1 calls */
name|X509V3_EXT_NEW
name|ext_new
block|;
name|X509V3_EXT_FREE
name|ext_free
block|;
name|X509V3_EXT_D2I
name|d2i
block|;
name|X509V3_EXT_I2D
name|i2d
block|;
comment|/* The following pair is used for string extensions */
name|X509V3_EXT_I2S
name|i2s
block|;
name|X509V3_EXT_S2I
name|s2i
block|;
comment|/* The following pair is used for multi-valued extensions */
name|X509V3_EXT_I2V
name|i2v
block|;
name|X509V3_EXT_V2I
name|v2i
block|;
comment|/* The following are used for raw extensions */
name|X509V3_EXT_I2R
name|i2r
block|;
name|X509V3_EXT_R2I
name|r2i
block|;
name|void
operator|*
name|usr_data
block|;
comment|/* Any extension specific data */
block|}
argument_list|;  typedef
expr|struct
name|X509V3_CONF_METHOD_st
block|{
name|char
operator|*
call|(
modifier|*
name|get_string
call|)
argument_list|(
name|void
operator|*
name|db
argument_list|,
name|char
operator|*
name|section
argument_list|,
name|char
operator|*
name|value
argument_list|)
block|;
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
call|(
modifier|*
name|get_section
call|)
argument_list|(
name|void
operator|*
name|db
argument_list|,
name|char
operator|*
name|section
argument_list|)
block|;
name|void
argument_list|(
operator|*
name|free_string
argument_list|)
argument_list|(
name|void
operator|*
name|db
argument_list|,
name|char
operator|*
name|string
argument_list|)
block|;
name|void
argument_list|(
operator|*
name|free_section
argument_list|)
argument_list|(
name|void
operator|*
name|db
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|section
argument_list|)
block|; }
name|X509V3_CONF_METHOD
argument_list|;
comment|/* Context specific info */
expr|struct
name|v3_ext_ctx
block|{
define|#
directive|define
name|CTX_TEST
value|0x1
name|int
name|flags
block|;
name|X509
operator|*
name|issuer_cert
block|;
name|X509
operator|*
name|subject_cert
block|;
name|X509_REQ
operator|*
name|subject_req
block|;
name|X509_CRL
operator|*
name|crl
block|;
name|X509V3_CONF_METHOD
operator|*
name|db_meth
block|;
name|void
operator|*
name|db
block|;
comment|/* Maybe more here */
block|}
argument_list|;  typedef
expr|struct
name|v3_ext_method
name|X509V3_EXT_METHOD
argument_list|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509V3_EXT_METHOD
argument_list|)
comment|/* ext_flags values */
define|#
directive|define
name|X509V3_EXT_DYNAMIC
value|0x1
define|#
directive|define
name|X509V3_EXT_CTX_DEP
value|0x2
define|#
directive|define
name|X509V3_EXT_MULTILINE
value|0x4
typedef|typedef
name|BIT_STRING_BITNAME
name|ENUMERATED_NAMES
typedef|;
typedef|typedef
struct|struct
name|BASIC_CONSTRAINTS_st
block|{
name|int
name|ca
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|pathlen
decl_stmt|;
block|}
name|BASIC_CONSTRAINTS
typedef|;
typedef|typedef
struct|struct
name|PKEY_USAGE_PERIOD_st
block|{
name|ASN1_GENERALIZEDTIME
modifier|*
name|notBefore
decl_stmt|;
name|ASN1_GENERALIZEDTIME
modifier|*
name|notAfter
decl_stmt|;
block|}
name|PKEY_USAGE_PERIOD
typedef|;
typedef|typedef
struct|struct
name|otherName_st
block|{
name|ASN1_OBJECT
modifier|*
name|type_id
decl_stmt|;
name|ASN1_TYPE
modifier|*
name|value
decl_stmt|;
block|}
name|OTHERNAME
typedef|;
typedef|typedef
struct|struct
name|EDIPartyName_st
block|{
name|ASN1_STRING
modifier|*
name|nameAssigner
decl_stmt|;
name|ASN1_STRING
modifier|*
name|partyName
decl_stmt|;
block|}
name|EDIPARTYNAME
typedef|;
typedef|typedef
struct|struct
name|GENERAL_NAME_st
block|{
define|#
directive|define
name|GEN_OTHERNAME
value|0
define|#
directive|define
name|GEN_EMAIL
value|1
define|#
directive|define
name|GEN_DNS
value|2
define|#
directive|define
name|GEN_X400
value|3
define|#
directive|define
name|GEN_DIRNAME
value|4
define|#
directive|define
name|GEN_EDIPARTY
value|5
define|#
directive|define
name|GEN_URI
value|6
define|#
directive|define
name|GEN_IPADD
value|7
define|#
directive|define
name|GEN_RID
value|8
name|int
name|type
decl_stmt|;
union|union
block|{
name|char
modifier|*
name|ptr
decl_stmt|;
name|OTHERNAME
modifier|*
name|otherName
decl_stmt|;
comment|/* otherName */
name|ASN1_IA5STRING
modifier|*
name|rfc822Name
decl_stmt|;
name|ASN1_IA5STRING
modifier|*
name|dNSName
decl_stmt|;
name|ASN1_TYPE
modifier|*
name|x400Address
decl_stmt|;
name|X509_NAME
modifier|*
name|directoryName
decl_stmt|;
name|EDIPARTYNAME
modifier|*
name|ediPartyName
decl_stmt|;
name|ASN1_IA5STRING
modifier|*
name|uniformResourceIdentifier
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|iPAddress
decl_stmt|;
name|ASN1_OBJECT
modifier|*
name|registeredID
decl_stmt|;
comment|/* Old names */
name|ASN1_OCTET_STRING
modifier|*
name|ip
decl_stmt|;
comment|/* iPAddress */
name|X509_NAME
modifier|*
name|dirn
decl_stmt|;
comment|/* dirn */
name|ASN1_IA5STRING
modifier|*
name|ia5
decl_stmt|;
comment|/* rfc822Name, dNSName, uniformResourceIdentifier */
name|ASN1_OBJECT
modifier|*
name|rid
decl_stmt|;
comment|/* registeredID */
name|ASN1_TYPE
modifier|*
name|other
decl_stmt|;
comment|/* x400Address */
block|}
name|d
union|;
block|}
name|GENERAL_NAME
typedef|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|GENERAL_NAME
argument_list|)
name|GENERAL_NAMES
expr_stmt|;
typedef|typedef
struct|struct
name|ACCESS_DESCRIPTION_st
block|{
name|ASN1_OBJECT
modifier|*
name|method
decl_stmt|;
name|GENERAL_NAME
modifier|*
name|location
decl_stmt|;
block|}
name|ACCESS_DESCRIPTION
typedef|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|ACCESS_DESCRIPTION
argument_list|)
name|AUTHORITY_INFO_ACCESS
expr_stmt|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|ASN1_OBJECT
argument_list|)
name|EXTENDED_KEY_USAGE
expr_stmt|;
name|DECLARE_STACK_OF
argument_list|(
argument|GENERAL_NAME
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|GENERAL_NAME
argument_list|)
name|DECLARE_STACK_OF
argument_list|(
argument|ACCESS_DESCRIPTION
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|ACCESS_DESCRIPTION
argument_list|)
typedef|typedef
struct|struct
name|DIST_POINT_NAME_st
block|{
name|int
name|type
decl_stmt|;
union|union
block|{
name|GENERAL_NAMES
modifier|*
name|fullname
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_NAME_ENTRY
argument_list|)
operator|*
name|relativename
expr_stmt|;
block|}
name|name
union|;
block|}
name|DIST_POINT_NAME
typedef|;
typedef|typedef
struct|struct
name|DIST_POINT_st
block|{
name|DIST_POINT_NAME
modifier|*
name|distpoint
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|reasons
decl_stmt|;
name|GENERAL_NAMES
modifier|*
name|CRLissuer
decl_stmt|;
block|}
name|DIST_POINT
typedef|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|DIST_POINT
argument_list|)
name|CRL_DIST_POINTS
expr_stmt|;
name|DECLARE_STACK_OF
argument_list|(
argument|DIST_POINT
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|DIST_POINT
argument_list|)
typedef|typedef
struct|struct
name|AUTHORITY_KEYID_st
block|{
name|ASN1_OCTET_STRING
modifier|*
name|keyid
decl_stmt|;
name|GENERAL_NAMES
modifier|*
name|issuer
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|serial
decl_stmt|;
block|}
name|AUTHORITY_KEYID
typedef|;
comment|/* Strong extranet structures */
typedef|typedef
struct|struct
name|SXNET_ID_st
block|{
name|ASN1_INTEGER
modifier|*
name|zone
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|user
decl_stmt|;
block|}
name|SXNETID
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|SXNETID
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|SXNETID
argument_list|)
typedef|typedef
struct|struct
name|SXNET_st
block|{
name|ASN1_INTEGER
modifier|*
name|version
decl_stmt|;
name|STACK_OF
argument_list|(
name|SXNETID
argument_list|)
operator|*
name|ids
expr_stmt|;
block|}
name|SXNET
typedef|;
typedef|typedef
struct|struct
name|NOTICEREF_st
block|{
name|ASN1_STRING
modifier|*
name|organization
decl_stmt|;
name|STACK_OF
argument_list|(
name|ASN1_INTEGER
argument_list|)
operator|*
name|noticenos
expr_stmt|;
block|}
name|NOTICEREF
typedef|;
typedef|typedef
struct|struct
name|USERNOTICE_st
block|{
name|NOTICEREF
modifier|*
name|noticeref
decl_stmt|;
name|ASN1_STRING
modifier|*
name|exptext
decl_stmt|;
block|}
name|USERNOTICE
typedef|;
typedef|typedef
struct|struct
name|POLICYQUALINFO_st
block|{
name|ASN1_OBJECT
modifier|*
name|pqualid
decl_stmt|;
union|union
block|{
name|ASN1_IA5STRING
modifier|*
name|cpsuri
decl_stmt|;
name|USERNOTICE
modifier|*
name|usernotice
decl_stmt|;
name|ASN1_TYPE
modifier|*
name|other
decl_stmt|;
block|}
name|d
union|;
block|}
name|POLICYQUALINFO
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|POLICYQUALINFO
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|POLICYQUALINFO
argument_list|)
typedef|typedef
struct|struct
name|POLICYINFO_st
block|{
name|ASN1_OBJECT
modifier|*
name|policyid
decl_stmt|;
name|STACK_OF
argument_list|(
name|POLICYQUALINFO
argument_list|)
operator|*
name|qualifiers
expr_stmt|;
block|}
name|POLICYINFO
typedef|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|POLICYINFO
argument_list|)
name|CERTIFICATEPOLICIES
expr_stmt|;
name|DECLARE_STACK_OF
argument_list|(
argument|POLICYINFO
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|POLICYINFO
argument_list|)
typedef|typedef
struct|struct
name|POLICY_MAPPING_st
block|{
name|ASN1_OBJECT
modifier|*
name|issuerDomainPolicy
decl_stmt|;
name|ASN1_OBJECT
modifier|*
name|subjectDomainPolicy
decl_stmt|;
block|}
name|POLICY_MAPPING
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|POLICY_MAPPING
argument_list|)
typedef|typedef
name|STACK_OF
argument_list|(
argument|POLICY_MAPPING
argument_list|)
name|POLICY_MAPPINGS
expr_stmt|;
typedef|typedef
struct|struct
name|GENERAL_SUBTREE_st
block|{
name|GENERAL_NAME
modifier|*
name|base
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|minimum
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|maximum
decl_stmt|;
block|}
name|GENERAL_SUBTREE
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|GENERAL_SUBTREE
argument_list|)
typedef|typedef
struct|struct
name|NAME_CONSTRAINTS_st
block|{
name|STACK_OF
argument_list|(
name|GENERAL_SUBTREE
argument_list|)
operator|*
name|permittedSubtrees
expr_stmt|;
name|STACK_OF
argument_list|(
name|GENERAL_SUBTREE
argument_list|)
operator|*
name|excludedSubtrees
expr_stmt|;
block|}
name|NAME_CONSTRAINTS
typedef|;
typedef|typedef
struct|struct
name|POLICY_CONSTRAINTS_st
block|{
name|ASN1_INTEGER
modifier|*
name|requireExplicitPolicy
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|inhibitPolicyMapping
decl_stmt|;
block|}
name|POLICY_CONSTRAINTS
typedef|;
comment|/* Proxy certificate structures, see RFC 3820 */
typedef|typedef
struct|struct
name|PROXY_POLICY_st
block|{
name|ASN1_OBJECT
modifier|*
name|policyLanguage
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|policy
decl_stmt|;
block|}
name|PROXY_POLICY
typedef|;
typedef|typedef
struct|struct
name|PROXY_CERT_INFO_EXTENSION_st
block|{
name|ASN1_INTEGER
modifier|*
name|pcPathLengthConstraint
decl_stmt|;
name|PROXY_POLICY
modifier|*
name|proxyPolicy
decl_stmt|;
block|}
name|PROXY_CERT_INFO_EXTENSION
typedef|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|PROXY_POLICY
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|PROXY_CERT_INFO_EXTENSION
argument_list|)
define|#
directive|define
name|X509V3_conf_err
parameter_list|(
name|val
parameter_list|)
value|ERR_add_error_data(6, "section:", val->section, \ ",name:", val->name, ",value:", val->value);
define|#
directive|define
name|X509V3_set_ctx_test
parameter_list|(
name|ctx
parameter_list|)
define|\
value|X509V3_set_ctx(ctx, NULL, NULL, NULL, NULL, CTX_TEST)
define|#
directive|define
name|X509V3_set_ctx_nodb
parameter_list|(
name|ctx
parameter_list|)
value|(ctx)->db = NULL;
define|#
directive|define
name|EXT_BITSTRING
parameter_list|(
name|nid
parameter_list|,
name|table
parameter_list|)
value|{ nid, 0, ASN1_ITEM_ref(ASN1_BIT_STRING), \ 			0,0,0,0, \ 			0,0, \ 			(X509V3_EXT_I2V)i2v_ASN1_BIT_STRING, \ 			(X509V3_EXT_V2I)v2i_ASN1_BIT_STRING, \ 			NULL, NULL, \ 			table}
define|#
directive|define
name|EXT_IA5STRING
parameter_list|(
name|nid
parameter_list|)
value|{ nid, 0, ASN1_ITEM_ref(ASN1_IA5STRING), \ 			0,0,0,0, \ 			(X509V3_EXT_I2S)i2s_ASN1_IA5STRING, \ 			(X509V3_EXT_S2I)s2i_ASN1_IA5STRING, \ 			0,0,0,0, \ 			NULL}
define|#
directive|define
name|EXT_END
value|{ -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
comment|/* X509_PURPOSE stuff */
define|#
directive|define
name|EXFLAG_BCONS
value|0x1
define|#
directive|define
name|EXFLAG_KUSAGE
value|0x2
define|#
directive|define
name|EXFLAG_XKUSAGE
value|0x4
define|#
directive|define
name|EXFLAG_NSCERT
value|0x8
define|#
directive|define
name|EXFLAG_CA
value|0x10
define|#
directive|define
name|EXFLAG_SS
value|0x20
define|#
directive|define
name|EXFLAG_V1
value|0x40
define|#
directive|define
name|EXFLAG_INVALID
value|0x80
define|#
directive|define
name|EXFLAG_SET
value|0x100
define|#
directive|define
name|EXFLAG_CRITICAL
value|0x200
define|#
directive|define
name|EXFLAG_PROXY
value|0x400
define|#
directive|define
name|EXFLAG_INVALID_POLICY
value|0x400
define|#
directive|define
name|KU_DIGITAL_SIGNATURE
value|0x0080
define|#
directive|define
name|KU_NON_REPUDIATION
value|0x0040
define|#
directive|define
name|KU_KEY_ENCIPHERMENT
value|0x0020
define|#
directive|define
name|KU_DATA_ENCIPHERMENT
value|0x0010
define|#
directive|define
name|KU_KEY_AGREEMENT
value|0x0008
define|#
directive|define
name|KU_KEY_CERT_SIGN
value|0x0004
define|#
directive|define
name|KU_CRL_SIGN
value|0x0002
define|#
directive|define
name|KU_ENCIPHER_ONLY
value|0x0001
define|#
directive|define
name|KU_DECIPHER_ONLY
value|0x8000
define|#
directive|define
name|NS_SSL_CLIENT
value|0x80
define|#
directive|define
name|NS_SSL_SERVER
value|0x40
define|#
directive|define
name|NS_SMIME
value|0x20
define|#
directive|define
name|NS_OBJSIGN
value|0x10
define|#
directive|define
name|NS_SSL_CA
value|0x04
define|#
directive|define
name|NS_SMIME_CA
value|0x02
define|#
directive|define
name|NS_OBJSIGN_CA
value|0x01
define|#
directive|define
name|NS_ANY_CA
value|(NS_SSL_CA|NS_SMIME_CA|NS_OBJSIGN_CA)
define|#
directive|define
name|XKU_SSL_SERVER
value|0x1
define|#
directive|define
name|XKU_SSL_CLIENT
value|0x2
define|#
directive|define
name|XKU_SMIME
value|0x4
define|#
directive|define
name|XKU_CODE_SIGN
value|0x8
define|#
directive|define
name|XKU_SGC
value|0x10
define|#
directive|define
name|XKU_OCSP_SIGN
value|0x20
define|#
directive|define
name|XKU_TIMESTAMP
value|0x40
define|#
directive|define
name|XKU_DVCS
value|0x80
define|#
directive|define
name|X509_PURPOSE_DYNAMIC
value|0x1
define|#
directive|define
name|X509_PURPOSE_DYNAMIC_NAME
value|0x2
typedef|typedef
struct|struct
name|x509_purpose_st
block|{
name|int
name|purpose
decl_stmt|;
name|int
name|trust
decl_stmt|;
comment|/* Default trust ID */
name|int
name|flags
decl_stmt|;
name|int
function_decl|(
modifier|*
name|check_purpose
function_decl|)
parameter_list|(
specifier|const
name|struct
name|x509_purpose_st
modifier|*
parameter_list|,
specifier|const
name|X509
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|sname
decl_stmt|;
name|void
modifier|*
name|usr_data
decl_stmt|;
block|}
name|X509_PURPOSE
typedef|;
define|#
directive|define
name|X509_PURPOSE_SSL_CLIENT
value|1
define|#
directive|define
name|X509_PURPOSE_SSL_SERVER
value|2
define|#
directive|define
name|X509_PURPOSE_NS_SSL_SERVER
value|3
define|#
directive|define
name|X509_PURPOSE_SMIME_SIGN
value|4
define|#
directive|define
name|X509_PURPOSE_SMIME_ENCRYPT
value|5
define|#
directive|define
name|X509_PURPOSE_CRL_SIGN
value|6
define|#
directive|define
name|X509_PURPOSE_ANY
value|7
define|#
directive|define
name|X509_PURPOSE_OCSP_HELPER
value|8
define|#
directive|define
name|X509_PURPOSE_MIN
value|1
define|#
directive|define
name|X509_PURPOSE_MAX
value|8
comment|/* Flags for X509V3_EXT_print() */
define|#
directive|define
name|X509V3_EXT_UNKNOWN_MASK
value|(0xfL<< 16)
comment|/* Return error for unknown extensions */
define|#
directive|define
name|X509V3_EXT_DEFAULT
value|0
comment|/* Print error for unknown extensions */
define|#
directive|define
name|X509V3_EXT_ERROR_UNKNOWN
value|(1L<< 16)
comment|/* ASN1 parse unknown extensions */
define|#
directive|define
name|X509V3_EXT_PARSE_UNKNOWN
value|(2L<< 16)
comment|/* BIO_dump unknown extensions */
define|#
directive|define
name|X509V3_EXT_DUMP_UNKNOWN
value|(3L<< 16)
comment|/* Flags for X509V3_add1_i2d */
define|#
directive|define
name|X509V3_ADD_OP_MASK
value|0xfL
define|#
directive|define
name|X509V3_ADD_DEFAULT
value|0L
define|#
directive|define
name|X509V3_ADD_APPEND
value|1L
define|#
directive|define
name|X509V3_ADD_REPLACE
value|2L
define|#
directive|define
name|X509V3_ADD_REPLACE_EXISTING
value|3L
define|#
directive|define
name|X509V3_ADD_KEEP_EXISTING
value|4L
define|#
directive|define
name|X509V3_ADD_DELETE
value|5L
define|#
directive|define
name|X509V3_ADD_SILENT
value|0x10
name|DECLARE_STACK_OF
argument_list|(
argument|X509_PURPOSE
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|BASIC_CONSTRAINTS
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|SXNET
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|SXNETID
argument_list|)
name|int
name|SXNET_add_id_asc
parameter_list|(
name|SXNET
modifier|*
modifier|*
name|psx
parameter_list|,
name|char
modifier|*
name|zone
parameter_list|,
name|char
modifier|*
name|user
parameter_list|,
name|int
name|userlen
parameter_list|)
function_decl|;
name|int
name|SXNET_add_id_ulong
parameter_list|(
name|SXNET
modifier|*
modifier|*
name|psx
parameter_list|,
name|unsigned
name|long
name|lzone
parameter_list|,
name|char
modifier|*
name|user
parameter_list|,
name|int
name|userlen
parameter_list|)
function_decl|;
name|int
name|SXNET_add_id_INTEGER
parameter_list|(
name|SXNET
modifier|*
modifier|*
name|psx
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|izone
parameter_list|,
name|char
modifier|*
name|user
parameter_list|,
name|int
name|userlen
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|SXNET_get_id_asc
parameter_list|(
name|SXNET
modifier|*
name|sx
parameter_list|,
name|char
modifier|*
name|zone
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|SXNET_get_id_ulong
parameter_list|(
name|SXNET
modifier|*
name|sx
parameter_list|,
name|unsigned
name|long
name|lzone
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|SXNET_get_id_INTEGER
parameter_list|(
name|SXNET
modifier|*
name|sx
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|zone
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|AUTHORITY_KEYID
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|PKEY_USAGE_PERIOD
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|GENERAL_NAME
argument_list|)
name|ASN1_BIT_STRING
modifier|*
name|v2i_ASN1_BIT_STRING
argument_list|(
name|X509V3_EXT_METHOD
operator|*
name|method
argument_list|,
name|X509V3_CTX
operator|*
name|ctx
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|nval
argument_list|)
decl_stmt|;
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|i2v_ASN1_BIT_STRING
argument_list|(
name|X509V3_EXT_METHOD
operator|*
name|method
argument_list|,
name|ASN1_BIT_STRING
operator|*
name|bits
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|extlist
argument_list|)
expr_stmt|;
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|i2v_GENERAL_NAME
argument_list|(
name|X509V3_EXT_METHOD
operator|*
name|method
argument_list|,
name|GENERAL_NAME
operator|*
name|gen
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|ret
argument_list|)
expr_stmt|;
name|int
name|GENERAL_NAME_print
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|GENERAL_NAME
modifier|*
name|gen
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|GENERAL_NAMES
argument_list|)
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|i2v_GENERAL_NAMES
argument_list|(
name|X509V3_EXT_METHOD
operator|*
name|method
argument_list|,
name|GENERAL_NAMES
operator|*
name|gen
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|extlist
argument_list|)
expr_stmt|;
name|GENERAL_NAMES
modifier|*
name|v2i_GENERAL_NAMES
argument_list|(
name|X509V3_EXT_METHOD
operator|*
name|method
argument_list|,
name|X509V3_CTX
operator|*
name|ctx
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|nval
argument_list|)
decl_stmt|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|OTHERNAME
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|EDIPARTYNAME
argument_list|)
name|char
modifier|*
name|i2s_ASN1_OCTET_STRING
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|method
parameter_list|,
name|ASN1_OCTET_STRING
modifier|*
name|ia5
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|s2i_ASN1_OCTET_STRING
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|method
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|EXTENDED_KEY_USAGE
argument_list|)
name|int
name|i2a_ACCESS_DESCRIPTION
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ACCESS_DESCRIPTION
modifier|*
name|a
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|CERTIFICATEPOLICIES
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|POLICYINFO
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|POLICYQUALINFO
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|USERNOTICE
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|NOTICEREF
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|CRL_DIST_POINTS
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|DIST_POINT
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|DIST_POINT_NAME
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ACCESS_DESCRIPTION
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|AUTHORITY_INFO_ACCESS
argument_list|)
name|DECLARE_ASN1_ITEM
argument_list|(
argument|POLICY_MAPPING
argument_list|)
name|DECLARE_ASN1_ALLOC_FUNCTIONS
argument_list|(
argument|POLICY_MAPPING
argument_list|)
name|DECLARE_ASN1_ITEM
argument_list|(
argument|POLICY_MAPPINGS
argument_list|)
name|DECLARE_ASN1_ITEM
argument_list|(
argument|GENERAL_SUBTREE
argument_list|)
name|DECLARE_ASN1_ALLOC_FUNCTIONS
argument_list|(
argument|GENERAL_SUBTREE
argument_list|)
name|DECLARE_ASN1_ITEM
argument_list|(
argument|NAME_CONSTRAINTS
argument_list|)
name|DECLARE_ASN1_ALLOC_FUNCTIONS
argument_list|(
argument|NAME_CONSTRAINTS
argument_list|)
name|DECLARE_ASN1_ALLOC_FUNCTIONS
argument_list|(
argument|POLICY_CONSTRAINTS
argument_list|)
name|DECLARE_ASN1_ITEM
argument_list|(
argument|POLICY_CONSTRAINTS
argument_list|)
ifdef|#
directive|ifdef
name|HEADER_CONF_H
name|GENERAL_NAME
modifier|*
name|v2i_GENERAL_NAME
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|method
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|CONF_VALUE
modifier|*
name|cnf
parameter_list|)
function_decl|;
name|GENERAL_NAME
modifier|*
name|v2i_GENERAL_NAME_ex
parameter_list|(
name|GENERAL_NAME
modifier|*
name|out
parameter_list|,
name|X509V3_EXT_METHOD
modifier|*
name|method
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|CONF_VALUE
modifier|*
name|cnf
parameter_list|,
name|int
name|is_nc
parameter_list|)
function_decl|;
name|void
name|X509V3_conf_free
parameter_list|(
name|CONF_VALUE
modifier|*
name|val
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509V3_EXT_nconf_nid
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|ext_nid
parameter_list|,
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509V3_EXT_nconf
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_add_nconf_sk
argument_list|(
name|CONF
operator|*
name|conf
argument_list|,
name|X509V3_CTX
operator|*
name|ctx
argument_list|,
name|char
operator|*
name|section
argument_list|,
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
operator|*
name|sk
argument_list|)
decl_stmt|;
name|int
name|X509V3_EXT_add_nconf
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|section
parameter_list|,
name|X509
modifier|*
name|cert
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_REQ_add_nconf
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|section
parameter_list|,
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_CRL_add_nconf
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|section
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509V3_EXT_conf_nid
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|ext_nid
parameter_list|,
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509V3_EXT_conf
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_add_conf
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|section
parameter_list|,
name|X509
modifier|*
name|cert
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_REQ_add_conf
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|section
parameter_list|,
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_CRL_add_conf
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|section
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|int
name|X509V3_add_value_bool_nf
argument_list|(
name|char
operator|*
name|name
argument_list|,
name|int
name|asn1_bool
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
operator|*
name|extlist
argument_list|)
decl_stmt|;
name|int
name|X509V3_get_value_bool
parameter_list|(
name|CONF_VALUE
modifier|*
name|value
parameter_list|,
name|int
modifier|*
name|asn1_bool
parameter_list|)
function_decl|;
name|int
name|X509V3_get_value_int
parameter_list|(
name|CONF_VALUE
modifier|*
name|value
parameter_list|,
name|ASN1_INTEGER
modifier|*
modifier|*
name|aint
parameter_list|)
function_decl|;
name|void
name|X509V3_set_nconf
parameter_list|(
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|CONF
modifier|*
name|conf
parameter_list|)
function_decl|;
name|void
name|X509V3_set_conf_lhash
parameter_list|(
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|LHASH
modifier|*
name|lhash
parameter_list|)
function_decl|;
endif|#
directive|endif
name|char
modifier|*
name|X509V3_get_string
parameter_list|(
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|section
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|X509V3_get_section
argument_list|(
name|X509V3_CTX
operator|*
name|ctx
argument_list|,
name|char
operator|*
name|section
argument_list|)
expr_stmt|;
name|void
name|X509V3_string_free
parameter_list|(
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|void
name|X509V3_section_free
argument_list|(
name|X509V3_CTX
operator|*
name|ctx
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|section
argument_list|)
decl_stmt|;
name|void
name|X509V3_set_ctx
parameter_list|(
name|X509V3_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|issuer
parameter_list|,
name|X509
modifier|*
name|subject
parameter_list|,
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
name|X509V3_add_value
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|value
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
operator|*
name|extlist
argument_list|)
decl_stmt|;
name|int
name|X509V3_add_value_uchar
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|unsigned
name|char
operator|*
name|value
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
operator|*
name|extlist
argument_list|)
decl_stmt|;
name|int
name|X509V3_add_value_bool
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|int
name|asn1_bool
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
operator|*
name|extlist
argument_list|)
decl_stmt|;
name|int
name|X509V3_add_value_int
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|ASN1_INTEGER
operator|*
name|aint
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
operator|*
name|extlist
argument_list|)
decl_stmt|;
name|char
modifier|*
name|i2s_ASN1_INTEGER
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|meth
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|aint
parameter_list|)
function_decl|;
name|ASN1_INTEGER
modifier|*
name|s2i_ASN1_INTEGER
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|meth
parameter_list|,
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|char
modifier|*
name|i2s_ASN1_ENUMERATED
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|meth
parameter_list|,
name|ASN1_ENUMERATED
modifier|*
name|aint
parameter_list|)
function_decl|;
name|char
modifier|*
name|i2s_ASN1_ENUMERATED_TABLE
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|meth
parameter_list|,
name|ASN1_ENUMERATED
modifier|*
name|aint
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_add
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|ext
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_add_list
parameter_list|(
name|X509V3_EXT_METHOD
modifier|*
name|extlist
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_add_alias
parameter_list|(
name|int
name|nid_to
parameter_list|,
name|int
name|nid_from
parameter_list|)
function_decl|;
name|void
name|X509V3_EXT_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|X509V3_EXT_METHOD
modifier|*
name|X509V3_EXT_get
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ext
parameter_list|)
function_decl|;
name|X509V3_EXT_METHOD
modifier|*
name|X509V3_EXT_get_nid
parameter_list|(
name|int
name|nid
parameter_list|)
function_decl|;
name|int
name|X509V3_add_standard_extensions
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|X509V3_parse_list
argument_list|(
specifier|const
name|char
operator|*
name|line
argument_list|)
expr_stmt|;
name|void
modifier|*
name|X509V3_EXT_d2i
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ext
parameter_list|)
function_decl|;
name|void
modifier|*
name|X509V3_get_d2i
argument_list|(
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|nid
argument_list|,
name|int
operator|*
name|crit
argument_list|,
name|int
operator|*
name|idx
argument_list|)
decl_stmt|;
name|X509_EXTENSION
modifier|*
name|X509V3_EXT_i2d
parameter_list|(
name|int
name|ext_nid
parameter_list|,
name|int
name|crit
parameter_list|,
name|void
modifier|*
name|ext_struc
parameter_list|)
function_decl|;
name|int
name|X509V3_add1_i2d
argument_list|(
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
operator|*
name|x
argument_list|,
name|int
name|nid
argument_list|,
name|void
operator|*
name|value
argument_list|,
name|int
name|crit
argument_list|,
name|unsigned
name|long
name|flags
argument_list|)
decl_stmt|;
name|char
modifier|*
name|hex_to_string
parameter_list|(
name|unsigned
name|char
modifier|*
name|buffer
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|string_to_hex
parameter_list|(
name|char
modifier|*
name|str
parameter_list|,
name|long
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|name_cmp
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|cmp
parameter_list|)
function_decl|;
name|void
name|X509V3_EXT_val_prn
argument_list|(
name|BIO
operator|*
name|out
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|val
argument_list|,
name|int
name|indent
argument_list|,
name|int
name|ml
argument_list|)
decl_stmt|;
name|int
name|X509V3_EXT_print
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|X509_EXTENSION
modifier|*
name|ext
parameter_list|,
name|unsigned
name|long
name|flag
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
name|int
name|X509V3_EXT_print_fp
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
name|X509_EXTENSION
modifier|*
name|ext
parameter_list|,
name|int
name|flag
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
name|int
name|X509V3_extensions_print
argument_list|(
name|BIO
operator|*
name|out
argument_list|,
name|char
operator|*
name|title
argument_list|,
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|exts
argument_list|,
name|unsigned
name|long
name|flag
argument_list|,
name|int
name|indent
argument_list|)
decl_stmt|;
name|int
name|X509_check_ca
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_check_purpose
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|ca
parameter_list|)
function_decl|;
name|int
name|X509_supported_extension
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|)
function_decl|;
name|int
name|X509_PURPOSE_set
parameter_list|(
name|int
modifier|*
name|p
parameter_list|,
name|int
name|purpose
parameter_list|)
function_decl|;
name|int
name|X509_check_issued
parameter_list|(
name|X509
modifier|*
name|issuer
parameter_list|,
name|X509
modifier|*
name|subject
parameter_list|)
function_decl|;
name|int
name|X509_PURPOSE_get_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|X509_PURPOSE
modifier|*
name|X509_PURPOSE_get0
parameter_list|(
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|X509_PURPOSE_get_by_sname
parameter_list|(
name|char
modifier|*
name|sname
parameter_list|)
function_decl|;
name|int
name|X509_PURPOSE_get_by_id
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
name|int
name|X509_PURPOSE_add
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|trust
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
function_decl|(
modifier|*
name|ck
function_decl|)
parameter_list|(
specifier|const
name|X509_PURPOSE
modifier|*
parameter_list|,
specifier|const
name|X509
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|sname
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|char
modifier|*
name|X509_PURPOSE_get0_name
parameter_list|(
name|X509_PURPOSE
modifier|*
name|xp
parameter_list|)
function_decl|;
name|char
modifier|*
name|X509_PURPOSE_get0_sname
parameter_list|(
name|X509_PURPOSE
modifier|*
name|xp
parameter_list|)
function_decl|;
name|int
name|X509_PURPOSE_get_trust
parameter_list|(
name|X509_PURPOSE
modifier|*
name|xp
parameter_list|)
function_decl|;
name|void
name|X509_PURPOSE_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|X509_PURPOSE_get_id
parameter_list|(
name|X509_PURPOSE
modifier|*
parameter_list|)
function_decl|;
name|STACK
modifier|*
name|X509_get1_email
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|STACK
modifier|*
name|X509_REQ_get1_email
parameter_list|(
name|X509_REQ
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|X509_email_free
parameter_list|(
name|STACK
modifier|*
name|sk
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|a2i_IPADDRESS
parameter_list|(
specifier|const
name|char
modifier|*
name|ipasc
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|a2i_IPADDRESS_NC
parameter_list|(
specifier|const
name|char
modifier|*
name|ipasc
parameter_list|)
function_decl|;
name|int
name|a2i_ipadd
parameter_list|(
name|unsigned
name|char
modifier|*
name|ipout
parameter_list|,
specifier|const
name|char
modifier|*
name|ipasc
parameter_list|)
function_decl|;
name|int
name|X509V3_NAME_from_section
argument_list|(
name|X509_NAME
operator|*
name|nm
argument_list|,
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|dn_sk
argument_list|,
name|unsigned
name|long
name|chtype
argument_list|)
decl_stmt|;
name|void
name|X509_POLICY_NODE_print
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|X509_POLICY_NODE
modifier|*
name|node
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RFC3779
typedef|typedef
struct|struct
name|ASRange_st
block|{
name|ASN1_INTEGER
modifier|*
name|min
decl_stmt|,
modifier|*
name|max
decl_stmt|;
block|}
name|ASRange
typedef|;
define|#
directive|define
name|ASIdOrRange_id
value|0
define|#
directive|define
name|ASIdOrRange_range
value|1
typedef|typedef
struct|struct
name|ASIdOrRange_st
block|{
name|int
name|type
decl_stmt|;
union|union
block|{
name|ASN1_INTEGER
modifier|*
name|id
decl_stmt|;
name|ASRange
modifier|*
name|range
decl_stmt|;
block|}
name|u
union|;
block|}
name|ASIdOrRange
typedef|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|ASIdOrRange
argument_list|)
name|ASIdOrRanges
expr_stmt|;
name|DECLARE_STACK_OF
argument_list|(
argument|ASIdOrRange
argument_list|)
define|#
directive|define
name|ASIdentifierChoice_inherit
value|0
define|#
directive|define
name|ASIdentifierChoice_asIdsOrRanges
value|1
typedef|typedef
struct|struct
name|ASIdentifierChoice_st
block|{
name|int
name|type
decl_stmt|;
union|union
block|{
name|ASN1_NULL
modifier|*
name|inherit
decl_stmt|;
name|ASIdOrRanges
modifier|*
name|asIdsOrRanges
decl_stmt|;
block|}
name|u
union|;
block|}
name|ASIdentifierChoice
typedef|;
typedef|typedef
struct|struct
name|ASIdentifiers_st
block|{
name|ASIdentifierChoice
modifier|*
name|asnum
decl_stmt|,
modifier|*
name|rdi
decl_stmt|;
block|}
name|ASIdentifiers
typedef|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASRange
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASIdOrRange
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASIdentifierChoice
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASIdentifiers
argument_list|)
typedef|typedef
struct|struct
name|IPAddressRange_st
block|{
name|ASN1_BIT_STRING
modifier|*
name|min
decl_stmt|,
modifier|*
name|max
decl_stmt|;
block|}
name|IPAddressRange
typedef|;
define|#
directive|define
name|IPAddressOrRange_addressPrefix
value|0
define|#
directive|define
name|IPAddressOrRange_addressRange
value|1
typedef|typedef
struct|struct
name|IPAddressOrRange_st
block|{
name|int
name|type
decl_stmt|;
union|union
block|{
name|ASN1_BIT_STRING
modifier|*
name|addressPrefix
decl_stmt|;
name|IPAddressRange
modifier|*
name|addressRange
decl_stmt|;
block|}
name|u
union|;
block|}
name|IPAddressOrRange
typedef|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|IPAddressOrRange
argument_list|)
name|IPAddressOrRanges
expr_stmt|;
name|DECLARE_STACK_OF
argument_list|(
argument|IPAddressOrRange
argument_list|)
define|#
directive|define
name|IPAddressChoice_inherit
value|0
define|#
directive|define
name|IPAddressChoice_addressesOrRanges
value|1
typedef|typedef
struct|struct
name|IPAddressChoice_st
block|{
name|int
name|type
decl_stmt|;
union|union
block|{
name|ASN1_NULL
modifier|*
name|inherit
decl_stmt|;
name|IPAddressOrRanges
modifier|*
name|addressesOrRanges
decl_stmt|;
block|}
name|u
union|;
block|}
name|IPAddressChoice
typedef|;
typedef|typedef
struct|struct
name|IPAddressFamily_st
block|{
name|ASN1_OCTET_STRING
modifier|*
name|addressFamily
decl_stmt|;
name|IPAddressChoice
modifier|*
name|ipAddressChoice
decl_stmt|;
block|}
name|IPAddressFamily
typedef|;
typedef|typedef
name|STACK_OF
argument_list|(
argument|IPAddressFamily
argument_list|)
name|IPAddrBlocks
expr_stmt|;
name|DECLARE_STACK_OF
argument_list|(
argument|IPAddressFamily
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|IPAddressRange
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|IPAddressOrRange
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|IPAddressChoice
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|IPAddressFamily
argument_list|)
comment|/*  * API tag for elements of the ASIdentifer SEQUENCE.  */
define|#
directive|define
name|V3_ASID_ASNUM
value|0
define|#
directive|define
name|V3_ASID_RDI
value|1
comment|/*  * AFI values, assigned by IANA.  It'd be nice to make the AFI  * handling code totally generic, but there are too many little things  * that would need to be defined for other address families for it to  * be worth the trouble.  */
define|#
directive|define
name|IANA_AFI_IPV4
value|1
define|#
directive|define
name|IANA_AFI_IPV6
value|2
comment|/*  * Utilities to construct and extract values from RFC3779 extensions,  * since some of the encodings (particularly for IP address prefixes  * and ranges) are a bit tedious to work with directly.  */
name|int
name|v3_asid_add_inherit
parameter_list|(
name|ASIdentifiers
modifier|*
name|asid
parameter_list|,
name|int
name|which
parameter_list|)
function_decl|;
name|int
name|v3_asid_add_id_or_range
parameter_list|(
name|ASIdentifiers
modifier|*
name|asid
parameter_list|,
name|int
name|which
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|min
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|max
parameter_list|)
function_decl|;
name|int
name|v3_addr_add_inherit
parameter_list|(
name|IPAddrBlocks
modifier|*
name|addr
parameter_list|,
specifier|const
name|unsigned
name|afi
parameter_list|,
specifier|const
name|unsigned
modifier|*
name|safi
parameter_list|)
function_decl|;
name|int
name|v3_addr_add_prefix
parameter_list|(
name|IPAddrBlocks
modifier|*
name|addr
parameter_list|,
specifier|const
name|unsigned
name|afi
parameter_list|,
specifier|const
name|unsigned
modifier|*
name|safi
parameter_list|,
name|unsigned
name|char
modifier|*
name|a
parameter_list|,
specifier|const
name|int
name|prefixlen
parameter_list|)
function_decl|;
name|int
name|v3_addr_add_range
parameter_list|(
name|IPAddrBlocks
modifier|*
name|addr
parameter_list|,
specifier|const
name|unsigned
name|afi
parameter_list|,
specifier|const
name|unsigned
modifier|*
name|safi
parameter_list|,
name|unsigned
name|char
modifier|*
name|min
parameter_list|,
name|unsigned
name|char
modifier|*
name|max
parameter_list|)
function_decl|;
name|unsigned
name|v3_addr_get_afi
parameter_list|(
specifier|const
name|IPAddressFamily
modifier|*
name|f
parameter_list|)
function_decl|;
name|int
name|v3_addr_get_range
parameter_list|(
name|IPAddressOrRange
modifier|*
name|aor
parameter_list|,
specifier|const
name|unsigned
name|afi
parameter_list|,
name|unsigned
name|char
modifier|*
name|min
parameter_list|,
name|unsigned
name|char
modifier|*
name|max
parameter_list|,
specifier|const
name|int
name|length
parameter_list|)
function_decl|;
comment|/*  * Canonical forms.  */
name|int
name|v3_asid_is_canonical
parameter_list|(
name|ASIdentifiers
modifier|*
name|asid
parameter_list|)
function_decl|;
name|int
name|v3_addr_is_canonical
parameter_list|(
name|IPAddrBlocks
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
name|v3_asid_canonize
parameter_list|(
name|ASIdentifiers
modifier|*
name|asid
parameter_list|)
function_decl|;
name|int
name|v3_addr_canonize
parameter_list|(
name|IPAddrBlocks
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/*  * Tests for inheritance and containment.  */
name|int
name|v3_asid_inherits
parameter_list|(
name|ASIdentifiers
modifier|*
name|asid
parameter_list|)
function_decl|;
name|int
name|v3_addr_inherits
parameter_list|(
name|IPAddrBlocks
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
name|v3_asid_subset
parameter_list|(
name|ASIdentifiers
modifier|*
name|a
parameter_list|,
name|ASIdentifiers
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|v3_addr_subset
parameter_list|(
name|IPAddrBlocks
modifier|*
name|a
parameter_list|,
name|IPAddrBlocks
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/*  * Check whether RFC 3779 extensions nest properly in chains.  */
name|int
name|v3_asid_validate_path
parameter_list|(
name|X509_STORE_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|v3_addr_validate_path
parameter_list|(
name|X509_STORE_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|v3_asid_validate_resource_set
argument_list|(
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|chain
argument_list|,
name|ASIdentifiers
operator|*
name|ext
argument_list|,
name|int
name|allow_inheritance
argument_list|)
decl_stmt|;
name|int
name|v3_addr_validate_resource_set
argument_list|(
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|chain
argument_list|,
name|IPAddrBlocks
operator|*
name|ext
argument_list|,
name|int
name|allow_inheritance
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* OPENSSL_NO_RFC3779 */
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_X509V3_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the X509V3 functions. */
comment|/* Function codes. */
define|#
directive|define
name|X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
value|156
define|#
directive|define
name|X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
value|157
define|#
directive|define
name|X509V3_F_COPY_EMAIL
value|122
define|#
directive|define
name|X509V3_F_COPY_ISSUER
value|123
define|#
directive|define
name|X509V3_F_DO_DIRNAME
value|144
define|#
directive|define
name|X509V3_F_DO_EXT_CONF
value|124
define|#
directive|define
name|X509V3_F_DO_EXT_I2D
value|135
define|#
directive|define
name|X509V3_F_DO_EXT_NCONF
value|151
define|#
directive|define
name|X509V3_F_DO_I2V_NAME_CONSTRAINTS
value|148
define|#
directive|define
name|X509V3_F_HEX_TO_STRING
value|111
define|#
directive|define
name|X509V3_F_I2S_ASN1_ENUMERATED
value|121
define|#
directive|define
name|X509V3_F_I2S_ASN1_IA5STRING
value|149
define|#
directive|define
name|X509V3_F_I2S_ASN1_INTEGER
value|120
define|#
directive|define
name|X509V3_F_I2V_AUTHORITY_INFO_ACCESS
value|138
define|#
directive|define
name|X509V3_F_NOTICE_SECTION
value|132
define|#
directive|define
name|X509V3_F_NREF_NOS
value|133
define|#
directive|define
name|X509V3_F_POLICY_SECTION
value|131
define|#
directive|define
name|X509V3_F_PROCESS_PCI_VALUE
value|150
define|#
directive|define
name|X509V3_F_R2I_CERTPOL
value|130
define|#
directive|define
name|X509V3_F_R2I_PCI
value|155
define|#
directive|define
name|X509V3_F_S2I_ASN1_IA5STRING
value|100
define|#
directive|define
name|X509V3_F_S2I_ASN1_INTEGER
value|108
define|#
directive|define
name|X509V3_F_S2I_ASN1_OCTET_STRING
value|112
define|#
directive|define
name|X509V3_F_S2I_ASN1_SKEY_ID
value|114
define|#
directive|define
name|X509V3_F_S2I_SKEY_ID
value|115
define|#
directive|define
name|X509V3_F_STRING_TO_HEX
value|113
define|#
directive|define
name|X509V3_F_SXNET_ADD_ID_ASC
value|125
define|#
directive|define
name|X509V3_F_SXNET_ADD_ID_INTEGER
value|126
define|#
directive|define
name|X509V3_F_SXNET_ADD_ID_ULONG
value|127
define|#
directive|define
name|X509V3_F_SXNET_GET_ID_ASC
value|128
define|#
directive|define
name|X509V3_F_SXNET_GET_ID_ULONG
value|129
define|#
directive|define
name|X509V3_F_V2I_ASIDENTIFIERS
value|158
define|#
directive|define
name|X509V3_F_V2I_ASN1_BIT_STRING
value|101
define|#
directive|define
name|X509V3_F_V2I_AUTHORITY_INFO_ACCESS
value|139
define|#
directive|define
name|X509V3_F_V2I_AUTHORITY_KEYID
value|119
define|#
directive|define
name|X509V3_F_V2I_BASIC_CONSTRAINTS
value|102
define|#
directive|define
name|X509V3_F_V2I_CRLD
value|134
define|#
directive|define
name|X509V3_F_V2I_EXTENDED_KEY_USAGE
value|103
define|#
directive|define
name|X509V3_F_V2I_GENERAL_NAMES
value|118
define|#
directive|define
name|X509V3_F_V2I_GENERAL_NAME_EX
value|117
define|#
directive|define
name|X509V3_F_V2I_IPADDRBLOCKS
value|159
define|#
directive|define
name|X509V3_F_V2I_ISSUER_ALT
value|153
define|#
directive|define
name|X509V3_F_V2I_NAME_CONSTRAINTS
value|147
define|#
directive|define
name|X509V3_F_V2I_POLICY_CONSTRAINTS
value|146
define|#
directive|define
name|X509V3_F_V2I_POLICY_MAPPINGS
value|145
define|#
directive|define
name|X509V3_F_V2I_SUBJECT_ALT
value|154
define|#
directive|define
name|X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
value|160
define|#
directive|define
name|X509V3_F_V3_GENERIC_EXTENSION
value|116
define|#
directive|define
name|X509V3_F_X509V3_ADD1_I2D
value|140
define|#
directive|define
name|X509V3_F_X509V3_ADD_VALUE
value|105
define|#
directive|define
name|X509V3_F_X509V3_EXT_ADD
value|104
define|#
directive|define
name|X509V3_F_X509V3_EXT_ADD_ALIAS
value|106
define|#
directive|define
name|X509V3_F_X509V3_EXT_CONF
value|107
define|#
directive|define
name|X509V3_F_X509V3_EXT_I2D
value|136
define|#
directive|define
name|X509V3_F_X509V3_EXT_NCONF
value|152
define|#
directive|define
name|X509V3_F_X509V3_GET_SECTION
value|142
define|#
directive|define
name|X509V3_F_X509V3_GET_STRING
value|143
define|#
directive|define
name|X509V3_F_X509V3_GET_VALUE_BOOL
value|110
define|#
directive|define
name|X509V3_F_X509V3_PARSE_LIST
value|109
define|#
directive|define
name|X509V3_F_X509_PURPOSE_ADD
value|137
define|#
directive|define
name|X509V3_F_X509_PURPOSE_SET
value|141
comment|/* Reason codes. */
define|#
directive|define
name|X509V3_R_BAD_IP_ADDRESS
value|118
define|#
directive|define
name|X509V3_R_BAD_OBJECT
value|119
define|#
directive|define
name|X509V3_R_BN_DEC2BN_ERROR
value|100
define|#
directive|define
name|X509V3_R_BN_TO_ASN1_INTEGER_ERROR
value|101
define|#
directive|define
name|X509V3_R_DIRNAME_ERROR
value|149
define|#
directive|define
name|X509V3_R_DUPLICATE_ZONE_ID
value|133
define|#
directive|define
name|X509V3_R_ERROR_CONVERTING_ZONE
value|131
define|#
directive|define
name|X509V3_R_ERROR_CREATING_EXTENSION
value|144
define|#
directive|define
name|X509V3_R_ERROR_IN_EXTENSION
value|128
define|#
directive|define
name|X509V3_R_EXPECTED_A_SECTION_NAME
value|137
define|#
directive|define
name|X509V3_R_EXTENSION_EXISTS
value|145
define|#
directive|define
name|X509V3_R_EXTENSION_NAME_ERROR
value|115
define|#
directive|define
name|X509V3_R_EXTENSION_NOT_FOUND
value|102
define|#
directive|define
name|X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
value|103
define|#
directive|define
name|X509V3_R_EXTENSION_VALUE_ERROR
value|116
define|#
directive|define
name|X509V3_R_ILLEGAL_EMPTY_EXTENSION
value|151
define|#
directive|define
name|X509V3_R_ILLEGAL_HEX_DIGIT
value|113
define|#
directive|define
name|X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
value|152
define|#
directive|define
name|X509V3_R_INVALID_ASNUMBER
value|160
define|#
directive|define
name|X509V3_R_INVALID_ASRANGE
value|161
define|#
directive|define
name|X509V3_R_INVALID_BOOLEAN_STRING
value|104
define|#
directive|define
name|X509V3_R_INVALID_EXTENSION_STRING
value|105
define|#
directive|define
name|X509V3_R_INVALID_INHERITANCE
value|162
define|#
directive|define
name|X509V3_R_INVALID_IPADDRESS
value|163
define|#
directive|define
name|X509V3_R_INVALID_NAME
value|106
define|#
directive|define
name|X509V3_R_INVALID_NULL_ARGUMENT
value|107
define|#
directive|define
name|X509V3_R_INVALID_NULL_NAME
value|108
define|#
directive|define
name|X509V3_R_INVALID_NULL_VALUE
value|109
define|#
directive|define
name|X509V3_R_INVALID_NUMBER
value|140
define|#
directive|define
name|X509V3_R_INVALID_NUMBERS
value|141
define|#
directive|define
name|X509V3_R_INVALID_OBJECT_IDENTIFIER
value|110
define|#
directive|define
name|X509V3_R_INVALID_OPTION
value|138
define|#
directive|define
name|X509V3_R_INVALID_POLICY_IDENTIFIER
value|134
define|#
directive|define
name|X509V3_R_INVALID_PROXY_POLICY_SETTING
value|153
define|#
directive|define
name|X509V3_R_INVALID_PURPOSE
value|146
define|#
directive|define
name|X509V3_R_INVALID_SAFI
value|164
define|#
directive|define
name|X509V3_R_INVALID_SECTION
value|135
define|#
directive|define
name|X509V3_R_INVALID_SYNTAX
value|143
define|#
directive|define
name|X509V3_R_ISSUER_DECODE_ERROR
value|126
define|#
directive|define
name|X509V3_R_MISSING_VALUE
value|124
define|#
directive|define
name|X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
value|142
define|#
directive|define
name|X509V3_R_NO_CONFIG_DATABASE
value|136
define|#
directive|define
name|X509V3_R_NO_ISSUER_CERTIFICATE
value|121
define|#
directive|define
name|X509V3_R_NO_ISSUER_DETAILS
value|127
define|#
directive|define
name|X509V3_R_NO_POLICY_IDENTIFIER
value|139
define|#
directive|define
name|X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
value|154
define|#
directive|define
name|X509V3_R_NO_PUBLIC_KEY
value|114
define|#
directive|define
name|X509V3_R_NO_SUBJECT_DETAILS
value|125
define|#
directive|define
name|X509V3_R_ODD_NUMBER_OF_DIGITS
value|112
define|#
directive|define
name|X509V3_R_OPERATION_NOT_DEFINED
value|148
define|#
directive|define
name|X509V3_R_OTHERNAME_ERROR
value|147
define|#
directive|define
name|X509V3_R_POLICY_LANGUAGE_ALREADTY_DEFINED
value|155
define|#
directive|define
name|X509V3_R_POLICY_PATH_LENGTH
value|156
define|#
directive|define
name|X509V3_R_POLICY_PATH_LENGTH_ALREADTY_DEFINED
value|157
define|#
directive|define
name|X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
value|158
define|#
directive|define
name|X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
value|159
define|#
directive|define
name|X509V3_R_SECTION_NOT_FOUND
value|150
define|#
directive|define
name|X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
value|122
define|#
directive|define
name|X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
value|123
define|#
directive|define
name|X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
value|111
define|#
directive|define
name|X509V3_R_UNKNOWN_EXTENSION
value|129
define|#
directive|define
name|X509V3_R_UNKNOWN_EXTENSION_NAME
value|130
define|#
directive|define
name|X509V3_R_UNKNOWN_OPTION
value|120
define|#
directive|define
name|X509V3_R_UNSUPPORTED_OPTION
value|117
define|#
directive|define
name|X509V3_R_USER_TOO_LONG
value|132
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

