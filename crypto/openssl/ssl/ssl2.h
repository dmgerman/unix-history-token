begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ssl/ssl2.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_SSL2_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_SSL2_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Protocol Version Codes */
define|#
directive|define
name|SSL2_VERSION
value|0x0002
define|#
directive|define
name|SSL2_VERSION_MAJOR
value|0x00
define|#
directive|define
name|SSL2_VERSION_MINOR
value|0x02
comment|/* #define SSL2_CLIENT_VERSION	0x0002 */
comment|/* #define SSL2_SERVER_VERSION	0x0002 */
comment|/* Protocol Message Codes */
define|#
directive|define
name|SSL2_MT_ERROR
value|0
define|#
directive|define
name|SSL2_MT_CLIENT_HELLO
value|1
define|#
directive|define
name|SSL2_MT_CLIENT_MASTER_KEY
value|2
define|#
directive|define
name|SSL2_MT_CLIENT_FINISHED
value|3
define|#
directive|define
name|SSL2_MT_SERVER_HELLO
value|4
define|#
directive|define
name|SSL2_MT_SERVER_VERIFY
value|5
define|#
directive|define
name|SSL2_MT_SERVER_FINISHED
value|6
define|#
directive|define
name|SSL2_MT_REQUEST_CERTIFICATE
value|7
define|#
directive|define
name|SSL2_MT_CLIENT_CERTIFICATE
value|8
comment|/* Error Message Codes */
define|#
directive|define
name|SSL2_PE_UNDEFINED_ERROR
value|0x0000
define|#
directive|define
name|SSL2_PE_NO_CIPHER
value|0x0001
define|#
directive|define
name|SSL2_PE_NO_CERTIFICATE
value|0x0002
define|#
directive|define
name|SSL2_PE_BAD_CERTIFICATE
value|0x0004
define|#
directive|define
name|SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
value|0x0006
comment|/* Cipher Kind Values */
define|#
directive|define
name|SSL2_CK_NULL_WITH_MD5
value|0x02000000
comment|/* v3 */
define|#
directive|define
name|SSL2_CK_RC4_128_WITH_MD5
value|0x02010080
define|#
directive|define
name|SSL2_CK_RC4_128_EXPORT40_WITH_MD5
value|0x02020080
define|#
directive|define
name|SSL2_CK_RC2_128_CBC_WITH_MD5
value|0x02030080
define|#
directive|define
name|SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
value|0x02040080
define|#
directive|define
name|SSL2_CK_IDEA_128_CBC_WITH_MD5
value|0x02050080
define|#
directive|define
name|SSL2_CK_DES_64_CBC_WITH_MD5
value|0x02060040
define|#
directive|define
name|SSL2_CK_DES_64_CBC_WITH_SHA
value|0x02060140
comment|/* v3 */
define|#
directive|define
name|SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
value|0x020700c0
define|#
directive|define
name|SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
value|0x020701c0
comment|/* v3 */
define|#
directive|define
name|SSL2_CK_RC4_64_WITH_MD5
value|0x02080080
comment|/* MS hack */
define|#
directive|define
name|SSL2_CK_DES_64_CFB64_WITH_MD5_1
value|0x02ff0800
comment|/* SSLeay */
define|#
directive|define
name|SSL2_CK_NULL
value|0x02ff0810
comment|/* SSLeay */
define|#
directive|define
name|SSL2_TXT_DES_64_CFB64_WITH_MD5_1
value|"DES-CFB-M1"
define|#
directive|define
name|SSL2_TXT_NULL_WITH_MD5
value|"NULL-MD5"
define|#
directive|define
name|SSL2_TXT_RC4_128_WITH_MD5
value|"RC4-MD5"
define|#
directive|define
name|SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
value|"EXP-RC4-MD5"
define|#
directive|define
name|SSL2_TXT_RC2_128_CBC_WITH_MD5
value|"RC2-CBC-MD5"
define|#
directive|define
name|SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
value|"EXP-RC2-CBC-MD5"
define|#
directive|define
name|SSL2_TXT_IDEA_128_CBC_WITH_MD5
value|"IDEA-CBC-MD5"
define|#
directive|define
name|SSL2_TXT_DES_64_CBC_WITH_MD5
value|"DES-CBC-MD5"
define|#
directive|define
name|SSL2_TXT_DES_64_CBC_WITH_SHA
value|"DES-CBC-SHA"
define|#
directive|define
name|SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
value|"DES-CBC3-MD5"
define|#
directive|define
name|SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
value|"DES-CBC3-SHA"
define|#
directive|define
name|SSL2_TXT_RC4_64_WITH_MD5
value|"RC4-64-MD5"
define|#
directive|define
name|SSL2_TXT_NULL
value|"NULL"
comment|/* Flags for the SSL_CIPHER.algorithm2 field */
define|#
directive|define
name|SSL2_CF_5_BYTE_ENC
value|0x01
define|#
directive|define
name|SSL2_CF_8_BYTE_ENC
value|0x02
comment|/* Certificate Type Codes */
define|#
directive|define
name|SSL2_CT_X509_CERTIFICATE
value|0x01
comment|/* Authentication Type Code */
define|#
directive|define
name|SSL2_AT_MD5_WITH_RSA_ENCRYPTION
value|0x01
define|#
directive|define
name|SSL2_MAX_SSL_SESSION_ID_LENGTH
value|32
comment|/* Upper/Lower Bounds */
define|#
directive|define
name|SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
value|256
ifdef|#
directive|ifdef
name|MPE
define|#
directive|define
name|SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
value|29998u
else|#
directive|else
define|#
directive|define
name|SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
value|32767u
comment|/* 2^15-1 */
endif|#
directive|endif
define|#
directive|define
name|SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
value|16383
comment|/* 2^14-1 */
define|#
directive|define
name|SSL2_CHALLENGE_LENGTH
value|16
comment|/*#define SSL2_CHALLENGE_LENGTH	32 */
define|#
directive|define
name|SSL2_MIN_CHALLENGE_LENGTH
value|16
define|#
directive|define
name|SSL2_MAX_CHALLENGE_LENGTH
value|32
define|#
directive|define
name|SSL2_CONNECTION_ID_LENGTH
value|16
define|#
directive|define
name|SSL2_MAX_CONNECTION_ID_LENGTH
value|16
define|#
directive|define
name|SSL2_SSL_SESSION_ID_LENGTH
value|16
define|#
directive|define
name|SSL2_MAX_CERT_CHALLENGE_LENGTH
value|32
define|#
directive|define
name|SSL2_MIN_CERT_CHALLENGE_LENGTH
value|16
define|#
directive|define
name|SSL2_MAX_KEY_MATERIAL_LENGTH
value|24
ifndef|#
directive|ifndef
name|HEADER_SSL_LOCL_H
define|#
directive|define
name|CERT
value|char
endif|#
directive|endif
typedef|typedef
struct|struct
name|ssl2_state_st
block|{
name|int
name|three_byte_header
decl_stmt|;
name|int
name|clear_text
decl_stmt|;
comment|/* clear text */
name|int
name|escape
decl_stmt|;
comment|/* not used in SSLv2 */
name|int
name|ssl2_rollback
decl_stmt|;
comment|/* used if SSLv23 rolled back to SSLv2 */
comment|/* non-blocking io info, used to make sure the same 	 * args were passwd */
name|unsigned
name|int
name|wnum
decl_stmt|;
comment|/* number of bytes sent so far */
name|int
name|wpend_tot
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|wpend_buf
decl_stmt|;
name|int
name|wpend_off
decl_stmt|;
comment|/* offset to data to write */
name|int
name|wpend_len
decl_stmt|;
comment|/* number of bytes passwd to write */
name|int
name|wpend_ret
decl_stmt|;
comment|/* number of bytes to return to caller */
comment|/* buffer raw data */
name|int
name|rbuf_left
decl_stmt|;
name|int
name|rbuf_offs
decl_stmt|;
name|unsigned
name|char
modifier|*
name|rbuf
decl_stmt|;
name|unsigned
name|char
modifier|*
name|wbuf
decl_stmt|;
name|unsigned
name|char
modifier|*
name|write_ptr
decl_stmt|;
comment|/* used to point to the start due to 				  * 2/3 byte header. */
name|unsigned
name|int
name|padding
decl_stmt|;
name|unsigned
name|int
name|rlength
decl_stmt|;
comment|/* passed to ssl2_enc */
name|int
name|ract_data_length
decl_stmt|;
comment|/* Set when things are encrypted. */
name|unsigned
name|int
name|wlength
decl_stmt|;
comment|/* passed to ssl2_enc */
name|int
name|wact_data_length
decl_stmt|;
comment|/* Set when things are decrypted. */
name|unsigned
name|char
modifier|*
name|ract_data
decl_stmt|;
name|unsigned
name|char
modifier|*
name|wact_data
decl_stmt|;
name|unsigned
name|char
modifier|*
name|mac_data
decl_stmt|;
name|unsigned
name|char
modifier|*
name|pad_data
decl_stmt|;
name|unsigned
name|char
modifier|*
name|read_key
decl_stmt|;
name|unsigned
name|char
modifier|*
name|write_key
decl_stmt|;
comment|/* Stuff specifically to do with this SSL session */
name|unsigned
name|int
name|challenge_length
decl_stmt|;
name|unsigned
name|char
name|challenge
index|[
name|SSL2_MAX_CHALLENGE_LENGTH
index|]
decl_stmt|;
name|unsigned
name|int
name|conn_id_length
decl_stmt|;
name|unsigned
name|char
name|conn_id
index|[
name|SSL2_MAX_CONNECTION_ID_LENGTH
index|]
decl_stmt|;
name|unsigned
name|int
name|key_material_length
decl_stmt|;
name|unsigned
name|char
name|key_material
index|[
name|SSL2_MAX_KEY_MATERIAL_LENGTH
operator|*
literal|2
index|]
decl_stmt|;
name|unsigned
name|long
name|read_sequence
decl_stmt|;
name|unsigned
name|long
name|write_sequence
decl_stmt|;
struct|struct
block|{
name|unsigned
name|int
name|conn_id_length
decl_stmt|;
name|unsigned
name|int
name|cert_type
decl_stmt|;
name|unsigned
name|int
name|cert_length
decl_stmt|;
name|int
name|csl
decl_stmt|;
name|int
name|clear
decl_stmt|;
name|unsigned
name|int
name|enc
decl_stmt|;
name|unsigned
name|char
name|ccl
index|[
name|SSL2_MAX_CERT_CHALLENGE_LENGTH
index|]
decl_stmt|;
name|int
name|cipher_spec_length
decl_stmt|;
name|unsigned
name|int
name|session_id_length
decl_stmt|;
name|unsigned
name|int
name|clen
decl_stmt|;
name|unsigned
name|int
name|rlen
decl_stmt|;
block|}
name|tmp
struct|;
block|}
name|SSL2_STATE
typedef|;
comment|/* SSLv2 */
comment|/* client */
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_HELLO_A
value|(0x10|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_HELLO_B
value|(0x11|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_GET_SERVER_HELLO_A
value|(0x20|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_GET_SERVER_HELLO_B
value|(0x21|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_MASTER_KEY_A
value|(0x30|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_MASTER_KEY_B
value|(0x31|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_FINISHED_A
value|(0x40|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_FINISHED_B
value|(0x41|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_CERTIFICATE_A
value|(0x50|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_CERTIFICATE_B
value|(0x51|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_CERTIFICATE_C
value|(0x52|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_SEND_CLIENT_CERTIFICATE_D
value|(0x53|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_GET_SERVER_VERIFY_A
value|(0x60|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_GET_SERVER_VERIFY_B
value|(0x61|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_GET_SERVER_FINISHED_A
value|(0x70|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_GET_SERVER_FINISHED_B
value|(0x71|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_CLIENT_START_ENCRYPTION
value|(0x80|SSL_ST_CONNECT)
define|#
directive|define
name|SSL2_ST_X509_GET_CLIENT_CERTIFICATE
value|(0x90|SSL_ST_CONNECT)
comment|/* server */
define|#
directive|define
name|SSL2_ST_GET_CLIENT_HELLO_A
value|(0x10|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_GET_CLIENT_HELLO_B
value|(0x11|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_GET_CLIENT_HELLO_C
value|(0x12|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_SERVER_HELLO_A
value|(0x20|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_SERVER_HELLO_B
value|(0x21|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_GET_CLIENT_MASTER_KEY_A
value|(0x30|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_GET_CLIENT_MASTER_KEY_B
value|(0x31|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_SERVER_VERIFY_A
value|(0x40|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_SERVER_VERIFY_B
value|(0x41|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_SERVER_VERIFY_C
value|(0x42|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_GET_CLIENT_FINISHED_A
value|(0x50|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_GET_CLIENT_FINISHED_B
value|(0x51|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_SERVER_FINISHED_A
value|(0x60|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_SERVER_FINISHED_B
value|(0x61|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_REQUEST_CERTIFICATE_A
value|(0x70|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_REQUEST_CERTIFICATE_B
value|(0x71|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_REQUEST_CERTIFICATE_C
value|(0x72|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SEND_REQUEST_CERTIFICATE_D
value|(0x73|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_SERVER_START_ENCRYPTION
value|(0x80|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL2_ST_X509_GET_SERVER_CERTIFICATE
value|(0x90|SSL_ST_ACCEPT)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

