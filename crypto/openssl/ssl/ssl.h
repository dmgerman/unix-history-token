begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ssl/ssl.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *  * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *  * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from  *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1998-2007 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.  * ECC cipher suite support in OpenSSL originally developed by  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright 2005 Nokia. All rights reserved.  *  * The portions of the attached software ("Contribution") is developed by  * Nokia Corporation and is licensed pursuant to the OpenSSL open source  * license.  *  * The Contribution, originally written by Mika Kousa and Pasi Eronen of  * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites  * support (see RFC 4279) to OpenSSL.  *  * No patent licenses or other rights except those expressly stated in  * the OpenSSL open source license shall be deemed granted or received  * expressly, by implication, estoppel, or otherwise.  *  * No assurances are provided by Nokia that the Contribution does not  * infringe the patent or other intellectual property rights of any third  * party or that the license provides you with all the necessary rights  * to make use of the Contribution.  *  * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN  * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA  * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY  * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR  * OTHERWISE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_SSL_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_SSL_H
end_define

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_COMP
end_ifndef

begin_include
include|#
directive|include
file|<openssl/comp.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_X509
end_ifndef

begin_include
include|#
directive|include
file|<openssl/x509.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/crypto.h>
end_include

begin_include
include|#
directive|include
file|<openssl/lhash.h>
end_include

begin_include
include|#
directive|include
file|<openssl/buffer.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/pem.h>
end_include

begin_include
include|#
directive|include
file|<openssl/hmac.h>
end_include

begin_include
include|#
directive|include
file|<openssl/kssl.h>
end_include

begin_include
include|#
directive|include
file|<openssl/safestack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* SSLeay version number for ASN.1 encoding of the session information */
comment|/*-  * Version 0 - initial version  * Version 1 - added the optional peer certificate  */
define|#
directive|define
name|SSL_SESSION_ASN1_VERSION
value|0x0001
comment|/* text strings for the ciphers */
define|#
directive|define
name|SSL_TXT_NULL_WITH_MD5
value|SSL2_TXT_NULL_WITH_MD5
define|#
directive|define
name|SSL_TXT_RC4_128_WITH_MD5
value|SSL2_TXT_RC4_128_WITH_MD5
define|#
directive|define
name|SSL_TXT_RC4_128_EXPORT40_WITH_MD5
value|SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
define|#
directive|define
name|SSL_TXT_RC2_128_CBC_WITH_MD5
value|SSL2_TXT_RC2_128_CBC_WITH_MD5
define|#
directive|define
name|SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
value|SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
define|#
directive|define
name|SSL_TXT_IDEA_128_CBC_WITH_MD5
value|SSL2_TXT_IDEA_128_CBC_WITH_MD5
define|#
directive|define
name|SSL_TXT_DES_64_CBC_WITH_MD5
value|SSL2_TXT_DES_64_CBC_WITH_MD5
define|#
directive|define
name|SSL_TXT_DES_64_CBC_WITH_SHA
value|SSL2_TXT_DES_64_CBC_WITH_SHA
define|#
directive|define
name|SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
value|SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
define|#
directive|define
name|SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
value|SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
comment|/*  * VRS Additional Kerberos5 entries  */
define|#
directive|define
name|SSL_TXT_KRB5_DES_64_CBC_SHA
value|SSL3_TXT_KRB5_DES_64_CBC_SHA
define|#
directive|define
name|SSL_TXT_KRB5_DES_192_CBC3_SHA
value|SSL3_TXT_KRB5_DES_192_CBC3_SHA
define|#
directive|define
name|SSL_TXT_KRB5_RC4_128_SHA
value|SSL3_TXT_KRB5_RC4_128_SHA
define|#
directive|define
name|SSL_TXT_KRB5_IDEA_128_CBC_SHA
value|SSL3_TXT_KRB5_IDEA_128_CBC_SHA
define|#
directive|define
name|SSL_TXT_KRB5_DES_64_CBC_MD5
value|SSL3_TXT_KRB5_DES_64_CBC_MD5
define|#
directive|define
name|SSL_TXT_KRB5_DES_192_CBC3_MD5
value|SSL3_TXT_KRB5_DES_192_CBC3_MD5
define|#
directive|define
name|SSL_TXT_KRB5_RC4_128_MD5
value|SSL3_TXT_KRB5_RC4_128_MD5
define|#
directive|define
name|SSL_TXT_KRB5_IDEA_128_CBC_MD5
value|SSL3_TXT_KRB5_IDEA_128_CBC_MD5
define|#
directive|define
name|SSL_TXT_KRB5_DES_40_CBC_SHA
value|SSL3_TXT_KRB5_DES_40_CBC_SHA
define|#
directive|define
name|SSL_TXT_KRB5_RC2_40_CBC_SHA
value|SSL3_TXT_KRB5_RC2_40_CBC_SHA
define|#
directive|define
name|SSL_TXT_KRB5_RC4_40_SHA
value|SSL3_TXT_KRB5_RC4_40_SHA
define|#
directive|define
name|SSL_TXT_KRB5_DES_40_CBC_MD5
value|SSL3_TXT_KRB5_DES_40_CBC_MD5
define|#
directive|define
name|SSL_TXT_KRB5_RC2_40_CBC_MD5
value|SSL3_TXT_KRB5_RC2_40_CBC_MD5
define|#
directive|define
name|SSL_TXT_KRB5_RC4_40_MD5
value|SSL3_TXT_KRB5_RC4_40_MD5
define|#
directive|define
name|SSL_TXT_KRB5_DES_40_CBC_SHA
value|SSL3_TXT_KRB5_DES_40_CBC_SHA
define|#
directive|define
name|SSL_TXT_KRB5_DES_40_CBC_MD5
value|SSL3_TXT_KRB5_DES_40_CBC_MD5
define|#
directive|define
name|SSL_TXT_KRB5_DES_64_CBC_SHA
value|SSL3_TXT_KRB5_DES_64_CBC_SHA
define|#
directive|define
name|SSL_TXT_KRB5_DES_64_CBC_MD5
value|SSL3_TXT_KRB5_DES_64_CBC_MD5
define|#
directive|define
name|SSL_TXT_KRB5_DES_192_CBC3_SHA
value|SSL3_TXT_KRB5_DES_192_CBC3_SHA
define|#
directive|define
name|SSL_TXT_KRB5_DES_192_CBC3_MD5
value|SSL3_TXT_KRB5_DES_192_CBC3_MD5
define|#
directive|define
name|SSL_MAX_KRB5_PRINCIPAL_LENGTH
value|256
define|#
directive|define
name|SSL_MAX_SSL_SESSION_ID_LENGTH
value|32
define|#
directive|define
name|SSL_MAX_SID_CTX_LENGTH
value|32
define|#
directive|define
name|SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
value|(512/8)
define|#
directive|define
name|SSL_MAX_KEY_ARG_LENGTH
value|8
define|#
directive|define
name|SSL_MAX_MASTER_KEY_LENGTH
value|48
comment|/* These are used to specify which ciphers to use and not to use */
define|#
directive|define
name|SSL_TXT_EXP40
value|"EXPORT40"
define|#
directive|define
name|SSL_TXT_EXP56
value|"EXPORT56"
define|#
directive|define
name|SSL_TXT_LOW
value|"LOW"
define|#
directive|define
name|SSL_TXT_MEDIUM
value|"MEDIUM"
define|#
directive|define
name|SSL_TXT_HIGH
value|"HIGH"
define|#
directive|define
name|SSL_TXT_FIPS
value|"FIPS"
define|#
directive|define
name|SSL_TXT_kFZA
value|"kFZA"
comment|/* unused! */
define|#
directive|define
name|SSL_TXT_aFZA
value|"aFZA"
comment|/* unused! */
define|#
directive|define
name|SSL_TXT_eFZA
value|"eFZA"
comment|/* unused! */
define|#
directive|define
name|SSL_TXT_FZA
value|"FZA"
comment|/* unused! */
define|#
directive|define
name|SSL_TXT_aNULL
value|"aNULL"
define|#
directive|define
name|SSL_TXT_eNULL
value|"eNULL"
define|#
directive|define
name|SSL_TXT_NULL
value|"NULL"
define|#
directive|define
name|SSL_TXT_kRSA
value|"kRSA"
define|#
directive|define
name|SSL_TXT_kDHr
value|"kDHr"
comment|/* no such ciphersuites supported! */
define|#
directive|define
name|SSL_TXT_kDHd
value|"kDHd"
comment|/* no such ciphersuites supported! */
define|#
directive|define
name|SSL_TXT_kDH
value|"kDH"
comment|/* no such ciphersuites supported! */
define|#
directive|define
name|SSL_TXT_kEDH
value|"kEDH"
define|#
directive|define
name|SSL_TXT_kKRB5
value|"kKRB5"
define|#
directive|define
name|SSL_TXT_kECDHr
value|"kECDHr"
define|#
directive|define
name|SSL_TXT_kECDHe
value|"kECDHe"
define|#
directive|define
name|SSL_TXT_kECDH
value|"kECDH"
define|#
directive|define
name|SSL_TXT_kEECDH
value|"kEECDH"
define|#
directive|define
name|SSL_TXT_kPSK
value|"kPSK"
define|#
directive|define
name|SSL_TXT_kGOST
value|"kGOST"
define|#
directive|define
name|SSL_TXT_kSRP
value|"kSRP"
define|#
directive|define
name|SSL_TXT_aRSA
value|"aRSA"
define|#
directive|define
name|SSL_TXT_aDSS
value|"aDSS"
define|#
directive|define
name|SSL_TXT_aDH
value|"aDH"
comment|/* no such ciphersuites supported! */
define|#
directive|define
name|SSL_TXT_aECDH
value|"aECDH"
define|#
directive|define
name|SSL_TXT_aKRB5
value|"aKRB5"
define|#
directive|define
name|SSL_TXT_aECDSA
value|"aECDSA"
define|#
directive|define
name|SSL_TXT_aPSK
value|"aPSK"
define|#
directive|define
name|SSL_TXT_aGOST94
value|"aGOST94"
define|#
directive|define
name|SSL_TXT_aGOST01
value|"aGOST01"
define|#
directive|define
name|SSL_TXT_aGOST
value|"aGOST"
define|#
directive|define
name|SSL_TXT_aSRP
value|"aSRP"
define|#
directive|define
name|SSL_TXT_DSS
value|"DSS"
define|#
directive|define
name|SSL_TXT_DH
value|"DH"
define|#
directive|define
name|SSL_TXT_EDH
value|"EDH"
comment|/* same as "kEDH:-ADH" */
define|#
directive|define
name|SSL_TXT_ADH
value|"ADH"
define|#
directive|define
name|SSL_TXT_RSA
value|"RSA"
define|#
directive|define
name|SSL_TXT_ECDH
value|"ECDH"
define|#
directive|define
name|SSL_TXT_EECDH
value|"EECDH"
comment|/* same as "kEECDH:-AECDH" */
define|#
directive|define
name|SSL_TXT_AECDH
value|"AECDH"
define|#
directive|define
name|SSL_TXT_ECDSA
value|"ECDSA"
define|#
directive|define
name|SSL_TXT_KRB5
value|"KRB5"
define|#
directive|define
name|SSL_TXT_PSK
value|"PSK"
define|#
directive|define
name|SSL_TXT_SRP
value|"SRP"
define|#
directive|define
name|SSL_TXT_DES
value|"DES"
define|#
directive|define
name|SSL_TXT_3DES
value|"3DES"
define|#
directive|define
name|SSL_TXT_RC4
value|"RC4"
define|#
directive|define
name|SSL_TXT_RC2
value|"RC2"
define|#
directive|define
name|SSL_TXT_IDEA
value|"IDEA"
define|#
directive|define
name|SSL_TXT_SEED
value|"SEED"
define|#
directive|define
name|SSL_TXT_AES128
value|"AES128"
define|#
directive|define
name|SSL_TXT_AES256
value|"AES256"
define|#
directive|define
name|SSL_TXT_AES
value|"AES"
define|#
directive|define
name|SSL_TXT_AES_GCM
value|"AESGCM"
define|#
directive|define
name|SSL_TXT_CAMELLIA128
value|"CAMELLIA128"
define|#
directive|define
name|SSL_TXT_CAMELLIA256
value|"CAMELLIA256"
define|#
directive|define
name|SSL_TXT_CAMELLIA
value|"CAMELLIA"
define|#
directive|define
name|SSL_TXT_MD5
value|"MD5"
define|#
directive|define
name|SSL_TXT_SHA1
value|"SHA1"
define|#
directive|define
name|SSL_TXT_SHA
value|"SHA"
comment|/* same as "SHA1" */
define|#
directive|define
name|SSL_TXT_GOST94
value|"GOST94"
define|#
directive|define
name|SSL_TXT_GOST89MAC
value|"GOST89MAC"
define|#
directive|define
name|SSL_TXT_SHA256
value|"SHA256"
define|#
directive|define
name|SSL_TXT_SHA384
value|"SHA384"
define|#
directive|define
name|SSL_TXT_SSLV2
value|"SSLv2"
define|#
directive|define
name|SSL_TXT_SSLV3
value|"SSLv3"
define|#
directive|define
name|SSL_TXT_TLSV1
value|"TLSv1"
define|#
directive|define
name|SSL_TXT_TLSV1_1
value|"TLSv1.1"
define|#
directive|define
name|SSL_TXT_TLSV1_2
value|"TLSv1.2"
define|#
directive|define
name|SSL_TXT_EXP
value|"EXP"
define|#
directive|define
name|SSL_TXT_EXPORT
value|"EXPORT"
define|#
directive|define
name|SSL_TXT_ALL
value|"ALL"
comment|/*-  * COMPLEMENTOF* definitions. These identifiers are used to (de-select)  * ciphers normally not being used.  * Example: "RC4" will activate all ciphers using RC4 including ciphers  * without authentication, which would normally disabled by DEFAULT (due  * the "!ADH" being part of default). Therefore "RC4:!COMPLEMENTOFDEFAULT"  * will make sure that it is also disabled in the specific selection.  * COMPLEMENTOF* identifiers are portable between version, as adjustments  * to the default cipher setup will also be included here.  *  * COMPLEMENTOFDEFAULT does not experience the same special treatment that  * DEFAULT gets, as only selection is being done and no sorting as needed  * for DEFAULT.  */
define|#
directive|define
name|SSL_TXT_CMPALL
value|"COMPLEMENTOFALL"
define|#
directive|define
name|SSL_TXT_CMPDEF
value|"COMPLEMENTOFDEFAULT"
comment|/*  * The following cipher list is used by default. It also is substituted when  * an application-defined cipher list string starts with 'DEFAULT'.  */
define|#
directive|define
name|SSL_DEFAULT_CIPHER_LIST
value|"ALL:!EXPORT:!LOW:!aNULL:!eNULL:!SSLv2"
comment|/*  * As of OpenSSL 1.0.0, ssl_create_cipher_list() in ssl/ssl_ciph.c always  * starts with a reasonable order, and all we have to do for DEFAULT is  * throwing out anonymous and unencrypted ciphersuites! (The latter are not  * actually enabled by ALL, but "ALL:RSA" would enable some of them.)  */
comment|/* Used in SSL_set_shutdown()/SSL_get_shutdown(); */
define|#
directive|define
name|SSL_SENT_SHUTDOWN
value|1
define|#
directive|define
name|SSL_RECEIVED_SHUTDOWN
value|2
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
operator|(
name|defined
argument_list|(
name|OPENSSL_NO_RSA
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_NO_MD5
argument_list|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_SSL2
argument_list|)
define|#
directive|define
name|OPENSSL_NO_SSL2
endif|#
directive|endif
define|#
directive|define
name|SSL_FILETYPE_ASN1
value|X509_FILETYPE_ASN1
define|#
directive|define
name|SSL_FILETYPE_PEM
value|X509_FILETYPE_PEM
comment|/*  * This is needed to stop compilers complaining about the 'struct ssl_st *'  * function parameters used to prototype callbacks in SSL_CTX.  */
typedef|typedef
name|struct
name|ssl_st
modifier|*
name|ssl_crock_st
typedef|;
typedef|typedef
name|struct
name|tls_session_ticket_ext_st
name|TLS_SESSION_TICKET_EXT
typedef|;
typedef|typedef
name|struct
name|ssl_method_st
name|SSL_METHOD
typedef|;
typedef|typedef
name|struct
name|ssl_cipher_st
name|SSL_CIPHER
typedef|;
typedef|typedef
name|struct
name|ssl_session_st
name|SSL_SESSION
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|SSL_CIPHER
argument_list|)
comment|/* SRTP protection profiles for use with the use_srtp extension (RFC 5764)*/
typedef|typedef
struct|struct
name|srtp_protection_profile_st
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|long
name|id
decl_stmt|;
block|}
name|SRTP_PROTECTION_PROFILE
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|SRTP_PROTECTION_PROFILE
argument_list|)
typedef|typedef
name|int
function_decl|(
modifier|*
name|tls_session_ticket_ext_cb_fn
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
typedef|typedef
name|int
argument_list|(
operator|*
name|tls_session_secret_cb_fn
argument_list|)
argument_list|(
name|SSL
operator|*
name|s
argument_list|,
name|void
operator|*
name|secret
argument_list|,
name|int
operator|*
name|secret_len
argument_list|,
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|peer_ciphers
argument_list|,
name|SSL_CIPHER
operator|*
operator|*
name|cipher
argument_list|,
name|void
operator|*
name|arg
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL_INTERN
comment|/* used to hold info on the particular ciphers used */
struct|struct
name|ssl_cipher_st
block|{
name|int
name|valid
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* text name */
name|unsigned
name|long
name|id
decl_stmt|;
comment|/* id, 4 bytes, first is version */
comment|/*      * changed in 0.9.9: these four used to be portions of a single value      * 'algorithms'      */
name|unsigned
name|long
name|algorithm_mkey
decl_stmt|;
comment|/* key exchange algorithm */
name|unsigned
name|long
name|algorithm_auth
decl_stmt|;
comment|/* server authentication */
name|unsigned
name|long
name|algorithm_enc
decl_stmt|;
comment|/* symmetric encryption */
name|unsigned
name|long
name|algorithm_mac
decl_stmt|;
comment|/* symmetric authentication */
name|unsigned
name|long
name|algorithm_ssl
decl_stmt|;
comment|/* (major) protocol version */
name|unsigned
name|long
name|algo_strength
decl_stmt|;
comment|/* strength and export flags */
name|unsigned
name|long
name|algorithm2
decl_stmt|;
comment|/* Extra flags */
name|int
name|strength_bits
decl_stmt|;
comment|/* Number of bits really used */
name|int
name|alg_bits
decl_stmt|;
comment|/* Number of bits for algorithm */
block|}
struct|;
comment|/* Used to hold functions for SSLv2 or SSLv3/TLSv1 functions */
struct|struct
name|ssl_method_st
block|{
name|int
name|version
decl_stmt|;
name|int
function_decl|(
modifier|*
name|ssl_new
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ssl_clear
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ssl_free
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_accept
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_connect
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_read
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_peek
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_write
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_shutdown
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_renegotiate
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_renegotiate_check
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|ssl_get_message
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|st1
parameter_list|,
name|int
name|stn
parameter_list|,
name|int
name|mt
parameter_list|,
name|long
name|max
parameter_list|,
name|int
modifier|*
name|ok
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_read_bytes
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|peek
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_write_bytes
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|buf_
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_dispatch_alert
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|ssl_ctrl
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|,
name|void
modifier|*
name|parg
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|ssl_ctx_ctrl
function_decl|)
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|,
name|void
modifier|*
name|parg
parameter_list|)
function_decl|;
specifier|const
name|SSL_CIPHER
modifier|*
function_decl|(
modifier|*
name|get_cipher_by_char
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|put_cipher_by_char
function_decl|)
parameter_list|(
specifier|const
name|SSL_CIPHER
modifier|*
name|cipher
parameter_list|,
name|unsigned
name|char
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ssl_pending
function_decl|)
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|num_ciphers
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|SSL_CIPHER
modifier|*
function_decl|(
modifier|*
name|get_cipher
function_decl|)
parameter_list|(
name|unsigned
name|ncipher
parameter_list|)
function_decl|;
specifier|const
name|struct
name|ssl_method_st
modifier|*
function_decl|(
modifier|*
name|get_ssl_method
function_decl|)
parameter_list|(
name|int
name|version
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|get_timeout
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|struct
name|ssl3_enc_method
modifier|*
name|ssl3_enc
decl_stmt|;
comment|/* Extra SSLv3/TLS stuff */
name|int
function_decl|(
modifier|*
name|ssl_version
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|ssl_callback_ctrl
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|cb_id
parameter_list|,
name|void
function_decl|(
modifier|*
name|fp
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|ssl_ctx_callback_ctrl
function_decl|)
parameter_list|(
name|SSL_CTX
modifier|*
name|s
parameter_list|,
name|int
name|cb_id
parameter_list|,
name|void
function_decl|(
modifier|*
name|fp
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
block|}
struct|;
comment|/*-  * Lets make this into an ASN.1 type structure as follows  * SSL_SESSION_ID ::= SEQUENCE {  *      version                 INTEGER,        -- structure version number  *      SSLversion              INTEGER,        -- SSL version number  *      Cipher                  OCTET STRING,   -- the 3 byte cipher ID  *      Session_ID              OCTET STRING,   -- the Session ID  *      Master_key              OCTET STRING,   -- the master key  *      KRB5_principal          OCTET STRING    -- optional Kerberos principal  *      Key_Arg [ 0 ] IMPLICIT  OCTET STRING,   -- the optional Key argument  *      Time [ 1 ] EXPLICIT     INTEGER,        -- optional Start Time  *      Timeout [ 2 ] EXPLICIT  INTEGER,        -- optional Timeout ins seconds  *      Peer [ 3 ] EXPLICIT     X509,           -- optional Peer Certificate  *      Session_ID_context [ 4 ] EXPLICIT OCTET STRING,   -- the Session ID context  *      Verify_result [ 5 ] EXPLICIT INTEGER,   -- X509_V_... code for `Peer'  *      HostName [ 6 ] EXPLICIT OCTET STRING,   -- optional HostName from servername TLS extension  *      PSK_identity_hint [ 7 ] EXPLICIT OCTET STRING, -- optional PSK identity hint  *      PSK_identity [ 8 ] EXPLICIT OCTET STRING,  -- optional PSK identity  *      Ticket_lifetime_hint [9] EXPLICIT INTEGER, -- server's lifetime hint for session ticket  *      Ticket [10]             EXPLICIT OCTET STRING, -- session ticket (clients only)  *      Compression_meth [11]   EXPLICIT OCTET STRING, -- optional compression method  *      SRP_username [ 12 ] EXPLICIT OCTET STRING -- optional SRP username  *      }  * Look in ssl/ssl_asn1.c for more details  * I'm using EXPLICIT tags so I can read the damn things using asn1parse :-).  */
struct|struct
name|ssl_session_st
block|{
name|int
name|ssl_version
decl_stmt|;
comment|/* what ssl version session info is being                                  * kept in here? */
comment|/* only really used in SSLv2 */
name|unsigned
name|int
name|key_arg_length
decl_stmt|;
name|unsigned
name|char
name|key_arg
index|[
name|SSL_MAX_KEY_ARG_LENGTH
index|]
decl_stmt|;
name|int
name|master_key_length
decl_stmt|;
name|unsigned
name|char
name|master_key
index|[
name|SSL_MAX_MASTER_KEY_LENGTH
index|]
decl_stmt|;
comment|/* session_id - valid? */
name|unsigned
name|int
name|session_id_length
decl_stmt|;
name|unsigned
name|char
name|session_id
index|[
name|SSL_MAX_SSL_SESSION_ID_LENGTH
index|]
decl_stmt|;
comment|/*      * this is used to determine whether the session is being reused in the      * appropriate context. It is up to the application to set this, via      * SSL_new      */
name|unsigned
name|int
name|sid_ctx_length
decl_stmt|;
name|unsigned
name|char
name|sid_ctx
index|[
name|SSL_MAX_SID_CTX_LENGTH
index|]
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_KRB5
name|unsigned
name|int
name|krb5_client_princ_len
decl_stmt|;
name|unsigned
name|char
name|krb5_client_princ
index|[
name|SSL_MAX_KRB5_PRINCIPAL_LENGTH
index|]
decl_stmt|;
endif|#
directive|endif
comment|/* OPENSSL_NO_KRB5 */
ifndef|#
directive|ifndef
name|OPENSSL_NO_PSK
name|char
modifier|*
name|psk_identity_hint
decl_stmt|;
name|char
modifier|*
name|psk_identity
decl_stmt|;
endif|#
directive|endif
comment|/*      * Used to indicate that session resumption is not allowed. Applications      * can also set this bit for a new session via not_resumable_session_cb      * to disable session caching and tickets.      */
name|int
name|not_resumable
decl_stmt|;
comment|/* The cert is the certificate used to establish this connection */
name|struct
name|sess_cert_st
comment|/* SESS_CERT */
modifier|*
name|sess_cert
decl_stmt|;
comment|/*      * This is the cert for the other end. On clients, it will be the same as      * sess_cert->peer_key->x509 (the latter is not enough as sess_cert is      * not retained in the external representation of sessions, see      * ssl_asn1.c).      */
name|X509
modifier|*
name|peer
decl_stmt|;
comment|/*      * when app_verify_callback accepts a session where the peer's      * certificate is not ok, we must remember the error for session reuse:      */
name|long
name|verify_result
decl_stmt|;
comment|/* only for servers */
name|int
name|references
decl_stmt|;
name|long
name|timeout
decl_stmt|;
name|long
name|time
decl_stmt|;
name|unsigned
name|int
name|compress_meth
decl_stmt|;
comment|/* Need to lookup the method */
specifier|const
name|SSL_CIPHER
modifier|*
name|cipher
decl_stmt|;
name|unsigned
name|long
name|cipher_id
decl_stmt|;
comment|/* when ASN.1 loaded, this needs to be used                                  * to load the 'cipher' structure */
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|ciphers
expr_stmt|;
comment|/* shared ciphers? */
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
comment|/* application specific data */
comment|/*      * These are used to make removal of session-ids more efficient and to      * implement a maximum cache size.      */
name|struct
name|ssl_session_st
modifier|*
name|prev
decl_stmt|,
modifier|*
name|next
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_TLSEXT
name|char
modifier|*
name|tlsext_hostname
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|size_t
name|tlsext_ecpointformatlist_length
decl_stmt|;
name|unsigned
name|char
modifier|*
name|tlsext_ecpointformatlist
decl_stmt|;
comment|/* peer's list */
name|size_t
name|tlsext_ellipticcurvelist_length
decl_stmt|;
name|unsigned
name|char
modifier|*
name|tlsext_ellipticcurvelist
decl_stmt|;
comment|/* peer's list */
endif|#
directive|endif
comment|/* OPENSSL_NO_EC */
comment|/* RFC4507 info */
name|unsigned
name|char
modifier|*
name|tlsext_tick
decl_stmt|;
comment|/* Session ticket */
name|size_t
name|tlsext_ticklen
decl_stmt|;
comment|/* Session ticket length */
name|long
name|tlsext_tick_lifetime_hint
decl_stmt|;
comment|/* Session lifetime hint in seconds */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SRP
name|char
modifier|*
name|srp_username
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
endif|#
directive|endif
define|#
directive|define
name|SSL_OP_MICROSOFT_SESS_ID_BUG
value|0x00000001L
define|#
directive|define
name|SSL_OP_NETSCAPE_CHALLENGE_BUG
value|0x00000002L
comment|/* Allow initial connection to servers that don't support RI */
define|#
directive|define
name|SSL_OP_LEGACY_SERVER_CONNECT
value|0x00000004L
define|#
directive|define
name|SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
value|0x00000008L
define|#
directive|define
name|SSL_OP_TLSEXT_PADDING
value|0x00000010L
define|#
directive|define
name|SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
value|0x00000020L
define|#
directive|define
name|SSL_OP_SAFARI_ECDHE_ECDSA_BUG
value|0x00000040L
define|#
directive|define
name|SSL_OP_SSLEAY_080_CLIENT_DH_BUG
value|0x00000080L
define|#
directive|define
name|SSL_OP_TLS_D5_BUG
value|0x00000100L
define|#
directive|define
name|SSL_OP_TLS_BLOCK_PADDING_BUG
value|0x00000200L
comment|/* Hasn't done anything since OpenSSL 0.9.7h, retained for compatibility */
define|#
directive|define
name|SSL_OP_MSIE_SSLV2_RSA_PADDING
value|0x0
comment|/* Refers to ancient SSLREF and SSLv2, retained for compatibility */
define|#
directive|define
name|SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
value|0x0
comment|/*  * Disable SSL 3.0/TLS 1.0 CBC vulnerability workaround that was added in  * OpenSSL 0.9.6d.  Usually (depending on the application protocol) the  * workaround is not needed.  Unfortunately some broken SSL/TLS  * implementations cannot handle it at all, which is why we include it in  * SSL_OP_ALL.  */
comment|/* added in 0.9.6e */
define|#
directive|define
name|SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
value|0x00000800L
comment|/*  * SSL_OP_ALL: various bug workarounds that should be rather harmless.  This  * used to be 0x000FFFFFL before 0.9.7.  */
define|#
directive|define
name|SSL_OP_ALL
value|0x80000BFFL
comment|/* DTLS options */
define|#
directive|define
name|SSL_OP_NO_QUERY_MTU
value|0x00001000L
comment|/* Turn on Cookie Exchange (on relevant for servers) */
define|#
directive|define
name|SSL_OP_COOKIE_EXCHANGE
value|0x00002000L
comment|/* Don't use RFC4507 ticket extension */
define|#
directive|define
name|SSL_OP_NO_TICKET
value|0x00004000L
comment|/* Use Cisco's "speshul" version of DTLS_BAD_VER (as client)  */
define|#
directive|define
name|SSL_OP_CISCO_ANYCONNECT
value|0x00008000L
comment|/* As server, disallow session resumption on renegotiation */
define|#
directive|define
name|SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
value|0x00010000L
comment|/* Don't use compression even if supported */
define|#
directive|define
name|SSL_OP_NO_COMPRESSION
value|0x00020000L
comment|/* Permit unsafe legacy renegotiation */
define|#
directive|define
name|SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
value|0x00040000L
comment|/* If set, always create a new key when using tmp_ecdh parameters */
define|#
directive|define
name|SSL_OP_SINGLE_ECDH_USE
value|0x00080000L
comment|/* Does nothing: retained for compatibility */
define|#
directive|define
name|SSL_OP_SINGLE_DH_USE
value|0x00100000L
comment|/* Does nothing: retained for compatibiity */
define|#
directive|define
name|SSL_OP_EPHEMERAL_RSA
value|0x0
comment|/*  * Set on servers to choose the cipher according to the server's preferences  */
define|#
directive|define
name|SSL_OP_CIPHER_SERVER_PREFERENCE
value|0x00400000L
comment|/*  * If set, a server will allow a client to issue a SSLv3.0 version number as  * latest version supported in the premaster secret, even when TLSv1.0  * (version 3.1) was announced in the client hello. Normally this is  * forbidden to prevent version rollback attacks.  */
define|#
directive|define
name|SSL_OP_TLS_ROLLBACK_BUG
value|0x00800000L
define|#
directive|define
name|SSL_OP_NO_SSLv2
value|0x01000000L
define|#
directive|define
name|SSL_OP_NO_SSLv3
value|0x02000000L
define|#
directive|define
name|SSL_OP_NO_TLSv1
value|0x04000000L
define|#
directive|define
name|SSL_OP_NO_TLSv1_2
value|0x08000000L
define|#
directive|define
name|SSL_OP_NO_TLSv1_1
value|0x10000000L
comment|/*  * These next two were never actually used for anything since SSLeay zap so  * we have some more flags.  */
comment|/*  * The next flag deliberately changes the ciphertest, this is a check for the  * PKCS#1 attack  */
define|#
directive|define
name|SSL_OP_PKCS1_CHECK_1
value|0x0
define|#
directive|define
name|SSL_OP_PKCS1_CHECK_2
value|0x0
define|#
directive|define
name|SSL_OP_NETSCAPE_CA_DN_BUG
value|0x20000000L
define|#
directive|define
name|SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
value|0x40000000L
comment|/*  * Make server add server-hello extension from early version of cryptopro  * draft, when GOST ciphersuite is negotiated. Required for interoperability  * with CryptoPro CSP 3.x  */
define|#
directive|define
name|SSL_OP_CRYPTOPRO_TLSEXT_BUG
value|0x80000000L
comment|/*  * Allow SSL_write(..., n) to return r with 0< r< n (i.e. report success  * when just a single record has been written):  */
define|#
directive|define
name|SSL_MODE_ENABLE_PARTIAL_WRITE
value|0x00000001L
comment|/*  * Make it possible to retry SSL_write() with changed buffer location (buffer  * contents must stay the same!); this is not the default to avoid the  * misconception that non-blocking SSL_write() behaves like non-blocking  * write():  */
define|#
directive|define
name|SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
value|0x00000002L
comment|/*  * Never bother the application with retries if the transport is blocking:  */
define|#
directive|define
name|SSL_MODE_AUTO_RETRY
value|0x00000004L
comment|/* Don't attempt to automatically build certificate chain */
define|#
directive|define
name|SSL_MODE_NO_AUTO_CHAIN
value|0x00000008L
comment|/*  * Save RAM by releasing read and write buffers when they're empty. (SSL3 and  * TLS only.) "Released" buffers are put onto a free-list in the context or  * just freed (depending on the context's setting for freelist_max_len).  */
define|#
directive|define
name|SSL_MODE_RELEASE_BUFFERS
value|0x00000010L
comment|/*  * Send the current time in the Random fields of the ClientHello and  * ServerHello records for compatibility with hypothetical implementations  * that require it.  */
define|#
directive|define
name|SSL_MODE_SEND_CLIENTHELLO_TIME
value|0x00000020L
define|#
directive|define
name|SSL_MODE_SEND_SERVERHELLO_TIME
value|0x00000040L
comment|/*  * Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications  * that reconnect with a downgraded protocol version; see  * draft-ietf-tls-downgrade-scsv-00 for details. DO NOT ENABLE THIS if your  * application attempts a normal handshake. Only use this in explicit  * fallback retries, following the guidance in  * draft-ietf-tls-downgrade-scsv-00.  */
define|#
directive|define
name|SSL_MODE_SEND_FALLBACK_SCSV
value|0x00000080L
comment|/*  * Note: SSL[_CTX]_set_{options,mode} use |= op on the previous value, they  * cannot be used to clear bits.  */
define|#
directive|define
name|SSL_CTX_set_options
parameter_list|(
name|ctx
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_CTX_ctrl((ctx),SSL_CTRL_OPTIONS,(op),NULL)
define|#
directive|define
name|SSL_CTX_clear_options
parameter_list|(
name|ctx
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_CTX_ctrl((ctx),SSL_CTRL_CLEAR_OPTIONS,(op),NULL)
define|#
directive|define
name|SSL_CTX_get_options
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl((ctx),SSL_CTRL_OPTIONS,0,NULL)
define|#
directive|define
name|SSL_set_options
parameter_list|(
name|ssl
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_OPTIONS,(op),NULL)
define|#
directive|define
name|SSL_clear_options
parameter_list|(
name|ssl
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_CLEAR_OPTIONS,(op),NULL)
define|#
directive|define
name|SSL_get_options
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_OPTIONS,0,NULL)
define|#
directive|define
name|SSL_CTX_set_mode
parameter_list|(
name|ctx
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,(op),NULL)
define|#
directive|define
name|SSL_CTX_clear_mode
parameter_list|(
name|ctx
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_CTX_ctrl((ctx),SSL_CTRL_CLEAR_MODE,(op),NULL)
define|#
directive|define
name|SSL_CTX_get_mode
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,0,NULL)
define|#
directive|define
name|SSL_clear_mode
parameter_list|(
name|ssl
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_CLEAR_MODE,(op),NULL)
define|#
directive|define
name|SSL_set_mode
parameter_list|(
name|ssl
parameter_list|,
name|op
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_MODE,(op),NULL)
define|#
directive|define
name|SSL_get_mode
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_MODE,0,NULL)
define|#
directive|define
name|SSL_set_mtu
parameter_list|(
name|ssl
parameter_list|,
name|mtu
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_SET_MTU,(mtu),NULL)
define|#
directive|define
name|DTLS_set_link_mtu
parameter_list|(
name|ssl
parameter_list|,
name|mtu
parameter_list|)
define|\
value|SSL_ctrl((ssl),DTLS_CTRL_SET_LINK_MTU,(mtu),NULL)
define|#
directive|define
name|DTLS_get_link_min_mtu
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),DTLS_CTRL_GET_LINK_MIN_MTU,0,NULL)
define|#
directive|define
name|SSL_get_secure_renegotiation_support
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl), SSL_CTRL_GET_RI_SUPPORT, 0, NULL)
ifndef|#
directive|ifndef
name|OPENSSL_NO_HEARTBEATS
define|#
directive|define
name|SSL_heartbeat
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_TLS_EXT_SEND_HEARTBEAT,0,NULL)
endif|#
directive|endif
name|void
name|SSL_CTX_set_msg_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|int
name|write_p
parameter_list|,
name|int
name|version
parameter_list|,
name|int
name|content_type
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SSL_set_msg_callback
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|int
name|write_p
parameter_list|,
name|int
name|version
parameter_list|,
name|int
name|content_type
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|)
function_decl|;
define|#
directive|define
name|SSL_CTX_set_msg_callback_arg
parameter_list|(
name|ctx
parameter_list|,
name|arg
parameter_list|)
value|SSL_CTX_ctrl((ctx), SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))
define|#
directive|define
name|SSL_set_msg_callback_arg
parameter_list|(
name|ssl
parameter_list|,
name|arg
parameter_list|)
value|SSL_ctrl((ssl), SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))
ifndef|#
directive|ifndef
name|OPENSSL_NO_SRP
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL_INTERN
typedef|typedef
struct|struct
name|srp_ctx_st
block|{
comment|/* param for all the callbacks */
name|void
modifier|*
name|SRP_cb_arg
decl_stmt|;
comment|/* set client Hello login callback */
name|int
function_decl|(
modifier|*
name|TLS_ext_srp_username_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* set SRP N/g param callback for verification */
name|int
function_decl|(
modifier|*
name|SRP_verify_param_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* set SRP client passwd callback */
name|char
modifier|*
function_decl|(
modifier|*
name|SRP_give_srp_client_pwd_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|login
decl_stmt|;
name|BIGNUM
modifier|*
name|N
decl_stmt|,
modifier|*
name|g
decl_stmt|,
modifier|*
name|s
decl_stmt|,
modifier|*
name|B
decl_stmt|,
modifier|*
name|A
decl_stmt|;
name|BIGNUM
modifier|*
name|a
decl_stmt|,
modifier|*
name|b
decl_stmt|,
modifier|*
name|v
decl_stmt|;
name|char
modifier|*
name|info
decl_stmt|;
name|int
name|strength
decl_stmt|;
name|unsigned
name|long
name|srp_Mask
decl_stmt|;
block|}
name|SRP_CTX
typedef|;
endif|#
directive|endif
comment|/* see tls_srp.c */
name|int
name|SSL_SRP_CTX_init
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_SRP_CTX_init
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_SRP_CTX_free
parameter_list|(
name|SSL
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_SRP_CTX_free
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_srp_server_param_with_username
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
modifier|*
name|ad
parameter_list|)
function_decl|;
name|int
name|SRP_generate_server_master_secret
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|unsigned
name|char
modifier|*
name|master_key
parameter_list|)
function_decl|;
name|int
name|SRP_Calc_A_param
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SRP_generate_client_master_secret
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|unsigned
name|char
modifier|*
name|master_key
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYS_MSDOS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_SYS_WIN32
argument_list|)
define|#
directive|define
name|SSL_MAX_CERT_LIST_DEFAULT
value|1024*30
comment|/* 30k max cert list :-) */
else|#
directive|else
define|#
directive|define
name|SSL_MAX_CERT_LIST_DEFAULT
value|1024*100
comment|/* 100k max cert list :-) */
endif|#
directive|endif
define|#
directive|define
name|SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
value|(1024*20)
comment|/*  * This callback type is used inside SSL_CTX, SSL, and in the functions that  * set them. It is used to override the generation of SSL/TLS session IDs in  * a server. Return value should be zero on an error, non-zero to proceed.  * Also, callbacks should themselves check if the id they generate is unique  * otherwise the SSL handshake will fail with an error - callbacks can do  * this using the 'ssl' value they're passed by;  * SSL_has_matching_session_id(ssl, id, *id_len) The length value passed in  * is set at the maximum size the session ID can be. In SSLv2 this is 16  * bytes, whereas SSLv3/TLSv1 it is 32 bytes. The callback can alter this  * length to be less if desired, but under SSLv2 session IDs are supposed to  * be fixed at 16 bytes so the id will be padded after the callback returns  * in this case. It is also an error for the callback to set the size to  * zero.  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|GEN_SESSION_CB
function_decl|)
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|id
parameter_list|,
name|unsigned
name|int
modifier|*
name|id_len
parameter_list|)
function_decl|;
typedef|typedef
name|struct
name|ssl_comp_st
name|SSL_COMP
typedef|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL_INTERN
struct|struct
name|ssl_comp_st
block|{
name|int
name|id
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_COMP
name|COMP_METHOD
modifier|*
name|method
decl_stmt|;
else|#
directive|else
name|char
modifier|*
name|method
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
name|DECLARE_STACK_OF
argument_list|(
argument|SSL_COMP
argument_list|)
name|DECLARE_LHASH_OF
argument_list|(
name|SSL_SESSION
argument_list|)
expr_stmt|;
struct|struct
name|ssl_ctx_st
block|{
specifier|const
name|SSL_METHOD
modifier|*
name|method
decl_stmt|;
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|cipher_list
expr_stmt|;
comment|/* same as above but sorted for lookup */
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|cipher_list_by_id
expr_stmt|;
name|struct
name|x509_store_st
comment|/* X509_STORE */
modifier|*
name|cert_store
decl_stmt|;
name|LHASH_OF
argument_list|(
name|SSL_SESSION
argument_list|)
operator|*
name|sessions
expr_stmt|;
comment|/*      * Most session-ids that will be cached, default is      * SSL_SESSION_CACHE_MAX_SIZE_DEFAULT. 0 is unlimited.      */
name|unsigned
name|long
name|session_cache_size
decl_stmt|;
name|struct
name|ssl_session_st
modifier|*
name|session_cache_head
decl_stmt|;
name|struct
name|ssl_session_st
modifier|*
name|session_cache_tail
decl_stmt|;
comment|/*      * This can have one of 2 values, ored together, SSL_SESS_CACHE_CLIENT,      * SSL_SESS_CACHE_SERVER, Default is SSL_SESSION_CACHE_SERVER, which      * means only SSL_accept which cache SSL_SESSIONS.      */
name|int
name|session_cache_mode
decl_stmt|;
comment|/*      * If timeout is not 0, it is the default timeout value set when      * SSL_new() is called.  This has been put in to make life easier to set      * things up      */
name|long
name|session_timeout
decl_stmt|;
comment|/*      * If this callback is not null, it will be called each time a session id      * is added to the cache.  If this function returns 1, it means that the      * callback will do a SSL_SESSION_free() when it has finished using it.      * Otherwise, on 0, it means the callback has finished with it. If      * remove_session_cb is not null, it will be called when a session-id is      * removed from the cache.  After the call, OpenSSL will      * SSL_SESSION_free() it.      */
name|int
function_decl|(
modifier|*
name|new_session_cb
function_decl|)
parameter_list|(
name|struct
name|ssl_st
modifier|*
name|ssl
parameter_list|,
name|SSL_SESSION
modifier|*
name|sess
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|remove_session_cb
function_decl|)
parameter_list|(
name|struct
name|ssl_ctx_st
modifier|*
name|ctx
parameter_list|,
name|SSL_SESSION
modifier|*
name|sess
parameter_list|)
function_decl|;
name|SSL_SESSION
modifier|*
function_decl|(
modifier|*
name|get_session_cb
function_decl|)
parameter_list|(
name|struct
name|ssl_st
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|int
modifier|*
name|copy
parameter_list|)
function_decl|;
struct|struct
block|{
name|int
name|sess_connect
decl_stmt|;
comment|/* SSL new conn - started */
name|int
name|sess_connect_renegotiate
decl_stmt|;
comment|/* SSL reneg - requested */
name|int
name|sess_connect_good
decl_stmt|;
comment|/* SSL new conne/reneg - finished */
name|int
name|sess_accept
decl_stmt|;
comment|/* SSL new accept - started */
name|int
name|sess_accept_renegotiate
decl_stmt|;
comment|/* SSL reneg - requested */
name|int
name|sess_accept_good
decl_stmt|;
comment|/* SSL accept/reneg - finished */
name|int
name|sess_miss
decl_stmt|;
comment|/* session lookup misses */
name|int
name|sess_timeout
decl_stmt|;
comment|/* reuse attempt on timeouted session */
name|int
name|sess_cache_full
decl_stmt|;
comment|/* session removed due to full cache */
name|int
name|sess_hit
decl_stmt|;
comment|/* session reuse actually done */
name|int
name|sess_cb_hit
decl_stmt|;
comment|/* session-id that was not in the cache was                                  * passed back via the callback.  This                                  * indicates that the application is                                  * supplying session-id's from other                                  * processes - spooky :-) */
block|}
name|stats
struct|;
name|int
name|references
decl_stmt|;
comment|/* if defined, these override the X509_verify_cert() calls */
name|int
function_decl|(
modifier|*
name|app_verify_callback
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|app_verify_arg
decl_stmt|;
comment|/*      * before OpenSSL 0.9.7, 'app_verify_arg' was ignored      * ('app_verify_callback' was called with just one argument)      */
comment|/* Default password callback. */
name|pem_password_cb
modifier|*
name|default_passwd_callback
decl_stmt|;
comment|/* Default password callback user data. */
name|void
modifier|*
name|default_passwd_callback_userdata
decl_stmt|;
comment|/* get client cert callback */
name|int
function_decl|(
modifier|*
name|client_cert_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|X509
modifier|*
modifier|*
name|x509
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|pkey
parameter_list|)
function_decl|;
comment|/* cookie generate callback */
name|int
function_decl|(
modifier|*
name|app_gen_cookie_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|cookie
parameter_list|,
name|unsigned
name|int
modifier|*
name|cookie_len
parameter_list|)
function_decl|;
comment|/* verify cookie callback */
name|int
function_decl|(
modifier|*
name|app_verify_cookie_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|cookie
parameter_list|,
name|unsigned
name|int
name|cookie_len
parameter_list|)
function_decl|;
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
specifier|const
name|EVP_MD
modifier|*
name|rsa_md5
decl_stmt|;
comment|/* For SSLv2 - name is 'ssl2-md5' */
specifier|const
name|EVP_MD
modifier|*
name|md5
decl_stmt|;
comment|/* For SSLv3/TLSv1 'ssl3-md5' */
specifier|const
name|EVP_MD
modifier|*
name|sha1
decl_stmt|;
comment|/* For SSLv3/TLSv1 'ssl3->sha1' */
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|extra_certs
expr_stmt|;
name|STACK_OF
argument_list|(
name|SSL_COMP
argument_list|)
operator|*
name|comp_methods
expr_stmt|;
comment|/* stack of SSL_COMP, SSLv3/TLSv1 */
comment|/* Default values used when no per-SSL value is defined follow */
comment|/* used if SSL's info_callback is NULL */
name|void
function_decl|(
modifier|*
name|info_callback
function_decl|)
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
comment|/* what we put in client cert requests */
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|client_CA
expr_stmt|;
comment|/*      * Default values to use in SSL structures follow (these are copied by      * SSL_new)      */
name|unsigned
name|long
name|options
decl_stmt|;
name|unsigned
name|long
name|mode
decl_stmt|;
name|long
name|max_cert_list
decl_stmt|;
name|struct
name|cert_st
comment|/* CERT */
modifier|*
name|cert
decl_stmt|;
name|int
name|read_ahead
decl_stmt|;
comment|/* callback that allows applications to peek at protocol messages */
name|void
function_decl|(
modifier|*
name|msg_callback
function_decl|)
parameter_list|(
name|int
name|write_p
parameter_list|,
name|int
name|version
parameter_list|,
name|int
name|content_type
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|msg_callback_arg
decl_stmt|;
name|int
name|verify_mode
decl_stmt|;
name|unsigned
name|int
name|sid_ctx_length
decl_stmt|;
name|unsigned
name|char
name|sid_ctx
index|[
name|SSL_MAX_SID_CTX_LENGTH
index|]
decl_stmt|;
comment|/* called 'verify_callback' in the SSL */
name|int
function_decl|(
modifier|*
name|default_verify_callback
function_decl|)
parameter_list|(
name|int
name|ok
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* Default generate session ID callback. */
name|GEN_SESSION_CB
name|generate_session_id
decl_stmt|;
name|X509_VERIFY_PARAM
modifier|*
name|param
decl_stmt|;
if|#
directive|if
literal|0
block|int purpose;
comment|/* Purpose setting */
block|int trust;
comment|/* Trust setting */
endif|#
directive|endif
name|int
name|quiet_shutdown
decl_stmt|;
comment|/*      * Maximum amount of data to send in one fragment. actual record size can      * be more than this due to padding and MAC overheads.      */
name|unsigned
name|int
name|max_send_fragment
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_ENGINE
comment|/*      * Engine to pass requests for client certs to      */
name|ENGINE
modifier|*
name|client_cert_engine
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_TLSEXT
comment|/* TLS extensions servername callback */
name|int
function_decl|(
modifier|*
name|tlsext_servername_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|tlsext_servername_arg
decl_stmt|;
comment|/* RFC 4507 session ticket keys */
name|unsigned
name|char
name|tlsext_tick_key_name
index|[
literal|16
index|]
decl_stmt|;
name|unsigned
name|char
name|tlsext_tick_hmac_key
index|[
literal|16
index|]
decl_stmt|;
name|unsigned
name|char
name|tlsext_tick_aes_key
index|[
literal|16
index|]
decl_stmt|;
comment|/* Callback to support customisation of ticket key setting */
name|int
function_decl|(
modifier|*
name|tlsext_ticket_key_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|name
parameter_list|,
name|unsigned
name|char
modifier|*
name|iv
parameter_list|,
name|EVP_CIPHER_CTX
modifier|*
name|ectx
parameter_list|,
name|HMAC_CTX
modifier|*
name|hctx
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
comment|/* certificate status request info */
comment|/* Callback for status request */
name|int
function_decl|(
modifier|*
name|tlsext_status_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|tlsext_status_arg
decl_stmt|;
comment|/* draft-rescorla-tls-opaque-prf-input-00.txt information */
name|int
function_decl|(
modifier|*
name|tlsext_opaque_prf_input_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|void
modifier|*
name|peerinput
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|tlsext_opaque_prf_input_callback_arg
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_PSK
name|char
modifier|*
name|psk_identity_hint
decl_stmt|;
name|unsigned
name|int
function_decl|(
modifier|*
name|psk_client_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|char
modifier|*
name|hint
parameter_list|,
name|char
modifier|*
name|identity
parameter_list|,
name|unsigned
name|int
name|max_identity_len
parameter_list|,
name|unsigned
name|char
modifier|*
name|psk
parameter_list|,
name|unsigned
name|int
name|max_psk_len
parameter_list|)
function_decl|;
name|unsigned
name|int
function_decl|(
modifier|*
name|psk_server_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|char
modifier|*
name|identity
parameter_list|,
name|unsigned
name|char
modifier|*
name|psk
parameter_list|,
name|unsigned
name|int
name|max_psk_len
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BUF_FREELISTS
define|#
directive|define
name|SSL_MAX_BUF_FREELIST_LEN_DEFAULT
value|32
name|unsigned
name|int
name|freelist_max_len
decl_stmt|;
name|struct
name|ssl3_buf_freelist_st
modifier|*
name|wbuf_freelist
decl_stmt|;
name|struct
name|ssl3_buf_freelist_st
modifier|*
name|rbuf_freelist
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SRP
name|SRP_CTX
name|srp_ctx
decl_stmt|;
comment|/* ctx for SRP authentication */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_TLSEXT
ifndef|#
directive|ifndef
name|OPENSSL_NO_NEXTPROTONEG
comment|/* Next protocol negotiation information */
comment|/* (for experimental NPN extension). */
comment|/*      * For a server, this contains a callback function by which the set of      * advertised protocols can be provided.      */
name|int
function_decl|(
modifier|*
name|next_protos_advertised_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|buf
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|next_protos_advertised_cb_arg
decl_stmt|;
comment|/*      * For a client, this contains a callback function that selects the next      * protocol from the list provided by the server.      */
name|int
function_decl|(
modifier|*
name|next_proto_select_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|outlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|next_proto_select_cb_arg
decl_stmt|;
endif|#
directive|endif
comment|/* SRTP profiles we are willing to do from RFC 5764 */
name|STACK_OF
argument_list|(
name|SRTP_PROTECTION_PROFILE
argument_list|)
operator|*
name|srtp_profiles
expr_stmt|;
endif|#
directive|endif
block|}
struct|;
endif|#
directive|endif
define|#
directive|define
name|SSL_SESS_CACHE_OFF
value|0x0000
define|#
directive|define
name|SSL_SESS_CACHE_CLIENT
value|0x0001
define|#
directive|define
name|SSL_SESS_CACHE_SERVER
value|0x0002
define|#
directive|define
name|SSL_SESS_CACHE_BOTH
value|(SSL_SESS_CACHE_CLIENT|SSL_SESS_CACHE_SERVER)
define|#
directive|define
name|SSL_SESS_CACHE_NO_AUTO_CLEAR
value|0x0080
comment|/* enough comments already ... see SSL_CTX_set_session_cache_mode(3) */
define|#
directive|define
name|SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
value|0x0100
define|#
directive|define
name|SSL_SESS_CACHE_NO_INTERNAL_STORE
value|0x0200
define|#
directive|define
name|SSL_SESS_CACHE_NO_INTERNAL
define|\
value|(SSL_SESS_CACHE_NO_INTERNAL_LOOKUP|SSL_SESS_CACHE_NO_INTERNAL_STORE)
name|LHASH_OF
argument_list|(
name|SSL_SESSION
argument_list|)
operator|*
name|SSL_CTX_sessions
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|)
expr_stmt|;
define|#
directive|define
name|SSL_CTX_sess_number
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_NUMBER,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_connect
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_connect_good
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT_GOOD,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_connect_renegotiate
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT_RENEGOTIATE,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_accept
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_accept_renegotiate
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT_RENEGOTIATE,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_accept_good
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT_GOOD,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_hits
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_HIT,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_cb_hits
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CB_HIT,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_misses
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_MISSES,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_timeouts
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_TIMEOUTS,0,NULL)
define|#
directive|define
name|SSL_CTX_sess_cache_full
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CACHE_FULL,0,NULL)
name|void
name|SSL_CTX_sess_set_new_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|new_session_cb
function_decl|)
parameter_list|(
name|struct
name|ssl_st
modifier|*
name|ssl
parameter_list|,
name|SSL_SESSION
modifier|*
name|sess
parameter_list|)
parameter_list|)
function_decl|;
name|int
argument_list|(
operator|*
name|SSL_CTX_sess_get_new_cb
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|)
argument_list|)
argument_list|(
expr|struct
name|ssl_st
operator|*
name|ssl
argument_list|,
name|SSL_SESSION
operator|*
name|sess
argument_list|)
expr_stmt|;
name|void
name|SSL_CTX_sess_set_remove_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|void
function_decl|(
modifier|*
name|remove_session_cb
function_decl|)
parameter_list|(
name|struct
name|ssl_ctx_st
modifier|*
name|ctx
parameter_list|,
name|SSL_SESSION
modifier|*
name|sess
parameter_list|)
parameter_list|)
function_decl|;
name|void
argument_list|(
operator|*
name|SSL_CTX_sess_get_remove_cb
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|)
argument_list|)
argument_list|(
expr|struct
name|ssl_ctx_st
operator|*
name|ctx
argument_list|,
name|SSL_SESSION
operator|*
name|sess
argument_list|)
expr_stmt|;
name|void
name|SSL_CTX_sess_set_get_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|SSL_SESSION
modifier|*
function_decl|(
modifier|*
name|get_session_cb
function_decl|)
parameter_list|(
name|struct
name|ssl_st
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|int
modifier|*
name|copy
parameter_list|)
parameter_list|)
function_decl|;
name|SSL_SESSION
operator|*
operator|(
operator|*
name|SSL_CTX_sess_get_get_cb
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|)
operator|)
operator|(
expr|struct
name|ssl_st
operator|*
name|ssl
operator|,
name|unsigned
name|char
operator|*
name|Data
operator|,
name|int
name|len
operator|,
name|int
operator|*
name|copy
operator|)
expr_stmt|;
name|void
name|SSL_CTX_set_info_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|val
parameter_list|)
parameter_list|)
function_decl|;
name|void
argument_list|(
argument|*SSL_CTX_get_info_callback(SSL_CTX *ctx)
argument_list|)
operator|(
specifier|const
name|SSL
operator|*
name|ssl
operator|,
name|int
name|type
operator|,
name|int
name|val
operator|)
expr_stmt|;
name|void
name|SSL_CTX_set_client_cert_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|client_cert_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|X509
modifier|*
modifier|*
name|x509
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|pkey
parameter_list|)
parameter_list|)
function_decl|;
name|int
argument_list|(
operator|*
name|SSL_CTX_get_client_cert_cb
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|)
argument_list|)
argument_list|(
name|SSL
operator|*
name|ssl
argument_list|,
name|X509
operator|*
operator|*
name|x509
argument_list|,
name|EVP_PKEY
operator|*
operator|*
name|pkey
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_ENGINE
name|int
name|SSL_CTX_set_client_cert_engine
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|ENGINE
modifier|*
name|e
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|SSL_CTX_set_cookie_generate_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|app_gen_cookie_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|cookie
parameter_list|,
name|unsigned
name|int
modifier|*
name|cookie_len
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_cookie_verify_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|app_verify_cookie_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|cookie
parameter_list|,
name|unsigned
name|int
name|cookie_len
parameter_list|)
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_NEXTPROTONEG
name|void
name|SSL_CTX_set_next_protos_advertised_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|s
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|int
modifier|*
name|outlen
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_next_proto_select_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|s
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|outlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|int
name|SSL_select_next_proto
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|outlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|client
parameter_list|,
name|unsigned
name|int
name|client_len
parameter_list|)
function_decl|;
name|void
name|SSL_get0_next_proto_negotiated
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|data
parameter_list|,
name|unsigned
modifier|*
name|len
parameter_list|)
function_decl|;
define|#
directive|define
name|OPENSSL_NPN_UNSUPPORTED
value|0
define|#
directive|define
name|OPENSSL_NPN_NEGOTIATED
value|1
define|#
directive|define
name|OPENSSL_NPN_NO_OVERLAP
value|2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_PSK
comment|/*  * the maximum length of the buffer given to callbacks containing the  * resulting identity/psk  */
define|#
directive|define
name|PSK_MAX_IDENTITY_LEN
value|128
define|#
directive|define
name|PSK_MAX_PSK_LEN
value|256
name|void
name|SSL_CTX_set_psk_client_callback
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|,
name|unsigned
name|int
argument_list|(
argument|*psk_client_callback
argument_list|)
operator|(
name|SSL
operator|*
name|ssl
operator|,
specifier|const
name|char
operator|*
name|hint
operator|,
name|char
operator|*
name|identity
operator|,
name|unsigned
name|int
name|max_identity_len
operator|,
name|unsigned
name|char
operator|*
name|psk
operator|,
name|unsigned
name|int
name|max_psk_len
operator|)
argument_list|)
decl_stmt|;
name|void
name|SSL_set_psk_client_callback
argument_list|(
name|SSL
operator|*
name|ssl
argument_list|,
name|unsigned
name|int
argument_list|(
argument|*psk_client_callback
argument_list|)
operator|(
name|SSL
operator|*
name|ssl
operator|,
specifier|const
name|char
operator|*
name|hint
operator|,
name|char
operator|*
name|identity
operator|,
name|unsigned
name|int
name|max_identity_len
operator|,
name|unsigned
name|char
operator|*
name|psk
operator|,
name|unsigned
name|int
name|max_psk_len
operator|)
argument_list|)
decl_stmt|;
name|void
name|SSL_CTX_set_psk_server_callback
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|,
name|unsigned
name|int
argument_list|(
argument|*psk_server_callback
argument_list|)
operator|(
name|SSL
operator|*
name|ssl
operator|,
specifier|const
name|char
operator|*
name|identity
operator|,
name|unsigned
name|char
operator|*
name|psk
operator|,
name|unsigned
name|int
name|max_psk_len
operator|)
argument_list|)
decl_stmt|;
name|void
name|SSL_set_psk_server_callback
argument_list|(
name|SSL
operator|*
name|ssl
argument_list|,
name|unsigned
name|int
argument_list|(
argument|*psk_server_callback
argument_list|)
operator|(
name|SSL
operator|*
name|ssl
operator|,
specifier|const
name|char
operator|*
name|identity
operator|,
name|unsigned
name|char
operator|*
name|psk
operator|,
name|unsigned
name|int
name|max_psk_len
operator|)
argument_list|)
decl_stmt|;
name|int
name|SSL_CTX_use_psk_identity_hint
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|identity_hint
parameter_list|)
function_decl|;
name|int
name|SSL_use_psk_identity_hint
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|identity_hint
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_get_psk_identity_hint
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_get_psk_identity
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|SSL_NOTHING
value|1
define|#
directive|define
name|SSL_WRITING
value|2
define|#
directive|define
name|SSL_READING
value|3
define|#
directive|define
name|SSL_X509_LOOKUP
value|4
comment|/* These will only be used when doing non-blocking IO */
define|#
directive|define
name|SSL_want_nothing
parameter_list|(
name|s
parameter_list|)
value|(SSL_want(s) == SSL_NOTHING)
define|#
directive|define
name|SSL_want_read
parameter_list|(
name|s
parameter_list|)
value|(SSL_want(s) == SSL_READING)
define|#
directive|define
name|SSL_want_write
parameter_list|(
name|s
parameter_list|)
value|(SSL_want(s) == SSL_WRITING)
define|#
directive|define
name|SSL_want_x509_lookup
parameter_list|(
name|s
parameter_list|)
value|(SSL_want(s) == SSL_X509_LOOKUP)
define|#
directive|define
name|SSL_MAC_FLAG_READ_MAC_STREAM
value|1
define|#
directive|define
name|SSL_MAC_FLAG_WRITE_MAC_STREAM
value|2
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL_INTERN
struct|struct
name|ssl_st
block|{
comment|/*      * protocol version (one of SSL2_VERSION, SSL3_VERSION, TLS1_VERSION,      * DTLS1_VERSION)      */
name|int
name|version
decl_stmt|;
comment|/* SSL_ST_CONNECT or SSL_ST_ACCEPT */
name|int
name|type
decl_stmt|;
comment|/* SSLv3 */
specifier|const
name|SSL_METHOD
modifier|*
name|method
decl_stmt|;
comment|/*      * There are 2 BIO's even though they are normally both the same.  This      * is so data can be read and written to different handlers      */
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
comment|/* used by SSL_read */
name|BIO
modifier|*
name|rbio
decl_stmt|;
comment|/* used by SSL_write */
name|BIO
modifier|*
name|wbio
decl_stmt|;
comment|/* used during session-id reuse to concatenate messages */
name|BIO
modifier|*
name|bbio
decl_stmt|;
else|#
directive|else
comment|/* used by SSL_read */
name|char
modifier|*
name|rbio
decl_stmt|;
comment|/* used by SSL_write */
name|char
modifier|*
name|wbio
decl_stmt|;
name|char
modifier|*
name|bbio
decl_stmt|;
endif|#
directive|endif
comment|/*      * This holds a variable that indicates what we were doing when a 0 or -1      * is returned.  This is needed for non-blocking IO so we know what      * request needs re-doing when in SSL_accept or SSL_connect      */
name|int
name|rwstate
decl_stmt|;
comment|/* true when we are actually in SSL_accept() or SSL_connect() */
name|int
name|in_handshake
decl_stmt|;
name|int
function_decl|(
modifier|*
name|handshake_func
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|)
function_decl|;
comment|/*      * Imagine that here's a boolean member "init" that is switched as soon      * as SSL_set_{accept/connect}_state is called for the first time, so      * that "state" and "handshake_func" are properly initialized.  But as      * handshake_func is == 0 until then, we use this test instead of an      * "init" member.      */
comment|/* are we the server side? - mostly used by SSL_clear */
name|int
name|server
decl_stmt|;
comment|/*      * Generate a new session or reuse an old one.      * NB: For servers, the 'new' session may actually be a previously      * cached session or even the previous session unless      * SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION is set      */
name|int
name|new_session
decl_stmt|;
comment|/* don't send shutdown packets */
name|int
name|quiet_shutdown
decl_stmt|;
comment|/* we have shut things down, 0x01 sent, 0x02 for received */
name|int
name|shutdown
decl_stmt|;
comment|/* where we are */
name|int
name|state
decl_stmt|;
comment|/* where we are when reading */
name|int
name|rstate
decl_stmt|;
name|BUF_MEM
modifier|*
name|init_buf
decl_stmt|;
comment|/* buffer used during init */
name|void
modifier|*
name|init_msg
decl_stmt|;
comment|/* pointer to handshake message body, set by                                  * ssl3_get_message() */
name|int
name|init_num
decl_stmt|;
comment|/* amount read/written */
name|int
name|init_off
decl_stmt|;
comment|/* amount read/written */
comment|/* used internally to point at a raw packet */
name|unsigned
name|char
modifier|*
name|packet
decl_stmt|;
name|unsigned
name|int
name|packet_length
decl_stmt|;
name|struct
name|ssl2_state_st
modifier|*
name|s2
decl_stmt|;
comment|/* SSLv2 variables */
name|struct
name|ssl3_state_st
modifier|*
name|s3
decl_stmt|;
comment|/* SSLv3 variables */
name|struct
name|dtls1_state_st
modifier|*
name|d1
decl_stmt|;
comment|/* DTLSv1 variables */
name|int
name|read_ahead
decl_stmt|;
comment|/* Read as many input bytes as possible (for                                  * non-blocking reads) */
comment|/* callback that allows applications to peek at protocol messages */
name|void
function_decl|(
modifier|*
name|msg_callback
function_decl|)
parameter_list|(
name|int
name|write_p
parameter_list|,
name|int
name|version
parameter_list|,
name|int
name|content_type
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|msg_callback_arg
decl_stmt|;
name|int
name|hit
decl_stmt|;
comment|/* reusing a previous session */
name|X509_VERIFY_PARAM
modifier|*
name|param
decl_stmt|;
if|#
directive|if
literal|0
block|int purpose;
comment|/* Purpose setting */
block|int trust;
comment|/* Trust setting */
endif|#
directive|endif
comment|/* crypto */
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|cipher_list
expr_stmt|;
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|cipher_list_by_id
expr_stmt|;
comment|/*      * These are the ones being used, the ones in SSL_SESSION are the ones to      * be 'copied' into these ones      */
name|int
name|mac_flags
decl_stmt|;
name|EVP_CIPHER_CTX
modifier|*
name|enc_read_ctx
decl_stmt|;
comment|/* cryptographic state */
name|EVP_MD_CTX
modifier|*
name|read_hash
decl_stmt|;
comment|/* used for mac generation */
ifndef|#
directive|ifndef
name|OPENSSL_NO_COMP
name|COMP_CTX
modifier|*
name|expand
decl_stmt|;
comment|/* uncompress */
else|#
directive|else
name|char
modifier|*
name|expand
decl_stmt|;
endif|#
directive|endif
name|EVP_CIPHER_CTX
modifier|*
name|enc_write_ctx
decl_stmt|;
comment|/* cryptographic state */
name|EVP_MD_CTX
modifier|*
name|write_hash
decl_stmt|;
comment|/* used for mac generation */
ifndef|#
directive|ifndef
name|OPENSSL_NO_COMP
name|COMP_CTX
modifier|*
name|compress
decl_stmt|;
comment|/* compression */
else|#
directive|else
name|char
modifier|*
name|compress
decl_stmt|;
endif|#
directive|endif
comment|/* session info */
comment|/* client cert? */
comment|/* This is used to hold the server certificate used */
name|struct
name|cert_st
comment|/* CERT */
modifier|*
name|cert
decl_stmt|;
comment|/*      * the session_id_context is used to ensure sessions are only reused in      * the appropriate context      */
name|unsigned
name|int
name|sid_ctx_length
decl_stmt|;
name|unsigned
name|char
name|sid_ctx
index|[
name|SSL_MAX_SID_CTX_LENGTH
index|]
decl_stmt|;
comment|/* This can also be in the session once a session is established */
name|SSL_SESSION
modifier|*
name|session
decl_stmt|;
comment|/* Default generate session ID callback. */
name|GEN_SESSION_CB
name|generate_session_id
decl_stmt|;
comment|/* Used in SSL2 and SSL3 */
comment|/*      * 0 don't care about verify failure.      * 1 fail if verify fails      */
name|int
name|verify_mode
decl_stmt|;
comment|/* fail if callback returns 0 */
name|int
function_decl|(
modifier|*
name|verify_callback
function_decl|)
parameter_list|(
name|int
name|ok
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* optional informational callback */
name|void
function_decl|(
modifier|*
name|info_callback
function_decl|)
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
comment|/* error bytes to be written */
name|int
name|error
decl_stmt|;
comment|/* actual code */
name|int
name|error_code
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_KRB5
comment|/* Kerberos 5 context */
name|KSSL_CTX
modifier|*
name|kssl_ctx
decl_stmt|;
endif|#
directive|endif
comment|/* OPENSSL_NO_KRB5 */
ifndef|#
directive|ifndef
name|OPENSSL_NO_PSK
name|unsigned
name|int
function_decl|(
modifier|*
name|psk_client_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|char
modifier|*
name|hint
parameter_list|,
name|char
modifier|*
name|identity
parameter_list|,
name|unsigned
name|int
name|max_identity_len
parameter_list|,
name|unsigned
name|char
modifier|*
name|psk
parameter_list|,
name|unsigned
name|int
name|max_psk_len
parameter_list|)
function_decl|;
name|unsigned
name|int
function_decl|(
modifier|*
name|psk_server_callback
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|char
modifier|*
name|identity
parameter_list|,
name|unsigned
name|char
modifier|*
name|psk
parameter_list|,
name|unsigned
name|int
name|max_psk_len
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SSL_CTX
modifier|*
name|ctx
decl_stmt|;
comment|/*      * set this flag to 1 and a sleep(1) is put into all SSL_read() and      * SSL_write() calls, good for nbio debuging :-)      */
name|int
name|debug
decl_stmt|;
comment|/* extra application data */
name|long
name|verify_result
decl_stmt|;
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
comment|/* for server side, keep the list of CA_dn we can use */
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|client_CA
expr_stmt|;
name|int
name|references
decl_stmt|;
comment|/* protocol behaviour */
name|unsigned
name|long
name|options
decl_stmt|;
comment|/* API behaviour */
name|unsigned
name|long
name|mode
decl_stmt|;
name|long
name|max_cert_list
decl_stmt|;
name|int
name|first_packet
decl_stmt|;
comment|/* what was passed, used for SSLv3/TLS rollback check */
name|int
name|client_version
decl_stmt|;
name|unsigned
name|int
name|max_send_fragment
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_TLSEXT
comment|/* TLS extension debug callback */
name|void
function_decl|(
modifier|*
name|tlsext_debug_cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|client_server
parameter_list|,
name|int
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|tlsext_debug_arg
decl_stmt|;
name|char
modifier|*
name|tlsext_hostname
decl_stmt|;
comment|/*-      * no further mod of servername      * 0 : call the servername extension callback.      * 1 : prepare 2, allow last ack just after in server callback.      * 2 : don't call servername callback, no ack in server hello      */
name|int
name|servername_done
decl_stmt|;
comment|/* certificate status request info */
comment|/* Status type or -1 if no status type */
name|int
name|tlsext_status_type
decl_stmt|;
comment|/* Expect OCSP CertificateStatus message */
name|int
name|tlsext_status_expected
decl_stmt|;
comment|/* OCSP status request only */
name|STACK_OF
argument_list|(
name|OCSP_RESPID
argument_list|)
operator|*
name|tlsext_ocsp_ids
expr_stmt|;
name|X509_EXTENSIONS
modifier|*
name|tlsext_ocsp_exts
decl_stmt|;
comment|/* OCSP response received or to be sent */
name|unsigned
name|char
modifier|*
name|tlsext_ocsp_resp
decl_stmt|;
name|int
name|tlsext_ocsp_resplen
decl_stmt|;
comment|/* RFC4507 session ticket expected to be received or sent */
name|int
name|tlsext_ticket_expected
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|size_t
name|tlsext_ecpointformatlist_length
decl_stmt|;
comment|/* our list */
name|unsigned
name|char
modifier|*
name|tlsext_ecpointformatlist
decl_stmt|;
name|size_t
name|tlsext_ellipticcurvelist_length
decl_stmt|;
comment|/* our list */
name|unsigned
name|char
modifier|*
name|tlsext_ellipticcurvelist
decl_stmt|;
endif|#
directive|endif
comment|/* OPENSSL_NO_EC */
comment|/*      * draft-rescorla-tls-opaque-prf-input-00.txt information to be used for      * handshakes      */
name|void
modifier|*
name|tlsext_opaque_prf_input
decl_stmt|;
name|size_t
name|tlsext_opaque_prf_input_len
decl_stmt|;
comment|/* TLS Session Ticket extension override */
name|TLS_SESSION_TICKET_EXT
modifier|*
name|tlsext_session_ticket
decl_stmt|;
comment|/* TLS Session Ticket extension callback */
name|tls_session_ticket_ext_cb_fn
name|tls_session_ticket_ext_cb
decl_stmt|;
name|void
modifier|*
name|tls_session_ticket_ext_cb_arg
decl_stmt|;
comment|/* TLS pre-shared secret session resumption */
name|tls_session_secret_cb_fn
name|tls_session_secret_cb
decl_stmt|;
name|void
modifier|*
name|tls_session_secret_cb_arg
decl_stmt|;
name|SSL_CTX
modifier|*
name|initial_ctx
decl_stmt|;
comment|/* initial ctx, used to store sessions */
ifndef|#
directive|ifndef
name|OPENSSL_NO_NEXTPROTONEG
comment|/*      * Next protocol negotiation. For the client, this is the protocol that      * we sent in NextProtocol and is set when handling ServerHello      * extensions. For a server, this is the client's selected_protocol from      * NextProtocol and is set when handling the NextProtocol message, before      * the Finished message.      */
name|unsigned
name|char
modifier|*
name|next_proto_negotiated
decl_stmt|;
name|unsigned
name|char
name|next_proto_negotiated_len
decl_stmt|;
endif|#
directive|endif
define|#
directive|define
name|session_ctx
value|initial_ctx
comment|/* What we'll do */
name|STACK_OF
argument_list|(
name|SRTP_PROTECTION_PROFILE
argument_list|)
operator|*
name|srtp_profiles
expr_stmt|;
comment|/* What's been chosen */
name|SRTP_PROTECTION_PROFILE
modifier|*
name|srtp_profile
decl_stmt|;
comment|/*-          * Is use of the Heartbeat extension negotiated?          * 0: disabled          * 1: enabled          * 2: enabled, but not allowed to send Requests          */
name|unsigned
name|int
name|tlsext_heartbeat
decl_stmt|;
comment|/* Indicates if a HeartbeatRequest is in flight */
name|unsigned
name|int
name|tlsext_hb_pending
decl_stmt|;
comment|/* HeartbeatRequest sequence number */
name|unsigned
name|int
name|tlsext_hb_seq
decl_stmt|;
else|#
directive|else
define|#
directive|define
name|session_ctx
value|ctx
endif|#
directive|endif
comment|/* OPENSSL_NO_TLSEXT */
comment|/*-      * 1 if we are renegotiating.      * 2 if we are a server and are inside a handshake      * (i.e. not just sending a HelloRequest)      */
name|int
name|renegotiate
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SRP
comment|/* ctx for SRP authentication */
name|SRP_CTX
name|srp_ctx
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/ssl2.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ssl3.h>
end_include

begin_include
include|#
directive|include
file|<openssl/tls1.h>
end_include

begin_comment
comment|/* This is mostly sslv3 with a few tweaks */
end_comment

begin_include
include|#
directive|include
file|<openssl/dtls1.h>
end_include

begin_comment
comment|/* Datagram TLS */
end_comment

begin_include
include|#
directive|include
file|<openssl/ssl23.h>
end_include

begin_include
include|#
directive|include
file|<openssl/srtp.h>
end_include

begin_comment
comment|/* Support for the use_srtp extension */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* compatibility */
define|#
directive|define
name|SSL_set_app_data
parameter_list|(
name|s
parameter_list|,
name|arg
parameter_list|)
value|(SSL_set_ex_data(s,0,(char *)arg))
define|#
directive|define
name|SSL_get_app_data
parameter_list|(
name|s
parameter_list|)
value|(SSL_get_ex_data(s,0))
define|#
directive|define
name|SSL_SESSION_set_app_data
parameter_list|(
name|s
parameter_list|,
name|a
parameter_list|)
value|(SSL_SESSION_set_ex_data(s,0,(char *)a))
define|#
directive|define
name|SSL_SESSION_get_app_data
parameter_list|(
name|s
parameter_list|)
value|(SSL_SESSION_get_ex_data(s,0))
define|#
directive|define
name|SSL_CTX_get_app_data
parameter_list|(
name|ctx
parameter_list|)
value|(SSL_CTX_get_ex_data(ctx,0))
define|#
directive|define
name|SSL_CTX_set_app_data
parameter_list|(
name|ctx
parameter_list|,
name|arg
parameter_list|)
value|(SSL_CTX_set_ex_data(ctx,0,(char *)arg))
comment|/*  * The following are the possible values for ssl->state are are used to  * indicate where we are up to in the SSL connection establishment. The  * macros that follow are about the only things you should need to use and  * even then, only when using non-blocking IO. It can also be useful to work  * out where you were when the connection failed  */
define|#
directive|define
name|SSL_ST_CONNECT
value|0x1000
define|#
directive|define
name|SSL_ST_ACCEPT
value|0x2000
define|#
directive|define
name|SSL_ST_MASK
value|0x0FFF
define|#
directive|define
name|SSL_ST_INIT
value|(SSL_ST_CONNECT|SSL_ST_ACCEPT)
define|#
directive|define
name|SSL_ST_BEFORE
value|0x4000
define|#
directive|define
name|SSL_ST_OK
value|0x03
define|#
directive|define
name|SSL_ST_RENEGOTIATE
value|(0x04|SSL_ST_INIT)
define|#
directive|define
name|SSL_ST_ERR
value|0x05
define|#
directive|define
name|SSL_CB_LOOP
value|0x01
define|#
directive|define
name|SSL_CB_EXIT
value|0x02
define|#
directive|define
name|SSL_CB_READ
value|0x04
define|#
directive|define
name|SSL_CB_WRITE
value|0x08
define|#
directive|define
name|SSL_CB_ALERT
value|0x4000
comment|/* used in callback */
define|#
directive|define
name|SSL_CB_READ_ALERT
value|(SSL_CB_ALERT|SSL_CB_READ)
define|#
directive|define
name|SSL_CB_WRITE_ALERT
value|(SSL_CB_ALERT|SSL_CB_WRITE)
define|#
directive|define
name|SSL_CB_ACCEPT_LOOP
value|(SSL_ST_ACCEPT|SSL_CB_LOOP)
define|#
directive|define
name|SSL_CB_ACCEPT_EXIT
value|(SSL_ST_ACCEPT|SSL_CB_EXIT)
define|#
directive|define
name|SSL_CB_CONNECT_LOOP
value|(SSL_ST_CONNECT|SSL_CB_LOOP)
define|#
directive|define
name|SSL_CB_CONNECT_EXIT
value|(SSL_ST_CONNECT|SSL_CB_EXIT)
define|#
directive|define
name|SSL_CB_HANDSHAKE_START
value|0x10
define|#
directive|define
name|SSL_CB_HANDSHAKE_DONE
value|0x20
comment|/* Is the SSL_connection established? */
define|#
directive|define
name|SSL_get_state
parameter_list|(
name|a
parameter_list|)
value|SSL_state(a)
define|#
directive|define
name|SSL_is_init_finished
parameter_list|(
name|a
parameter_list|)
value|(SSL_state(a) == SSL_ST_OK)
define|#
directive|define
name|SSL_in_init
parameter_list|(
name|a
parameter_list|)
value|(SSL_state(a)&SSL_ST_INIT)
define|#
directive|define
name|SSL_in_before
parameter_list|(
name|a
parameter_list|)
value|(SSL_state(a)&SSL_ST_BEFORE)
define|#
directive|define
name|SSL_in_connect_init
parameter_list|(
name|a
parameter_list|)
value|(SSL_state(a)&SSL_ST_CONNECT)
define|#
directive|define
name|SSL_in_accept_init
parameter_list|(
name|a
parameter_list|)
value|(SSL_state(a)&SSL_ST_ACCEPT)
comment|/*  * The following 2 states are kept in ssl->rstate when reads fail, you should  * not need these  */
define|#
directive|define
name|SSL_ST_READ_HEADER
value|0xF0
define|#
directive|define
name|SSL_ST_READ_BODY
value|0xF1
define|#
directive|define
name|SSL_ST_READ_DONE
value|0xF2
comment|/*-  * Obtain latest Finished message  *   -- that we sent (SSL_get_finished)  *   -- that we expected from peer (SSL_get_peer_finished).  * Returns length (0 == no Finished so far), copies up to 'count' bytes.  */
name|size_t
name|SSL_get_finished
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
name|size_t
name|SSL_get_peer_finished
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
comment|/*  * use either SSL_VERIFY_NONE or SSL_VERIFY_PEER, the last 2 options are  * 'ored' with SSL_VERIFY_PEER if they are desired  */
define|#
directive|define
name|SSL_VERIFY_NONE
value|0x00
define|#
directive|define
name|SSL_VERIFY_PEER
value|0x01
define|#
directive|define
name|SSL_VERIFY_FAIL_IF_NO_PEER_CERT
value|0x02
define|#
directive|define
name|SSL_VERIFY_CLIENT_ONCE
value|0x04
define|#
directive|define
name|OpenSSL_add_ssl_algorithms
parameter_list|()
value|SSL_library_init()
define|#
directive|define
name|SSLeay_add_ssl_algorithms
parameter_list|()
value|SSL_library_init()
comment|/* this is for backward compatibility */
if|#
directive|if
literal|0
comment|/* NEW_SSLEAY */
define|#
directive|define
name|SSL_CTX_set_default_verify
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|SSL_CTX_set_verify(a,b,c)
define|#
directive|define
name|SSL_set_pref_cipher
parameter_list|(
name|c
parameter_list|,
name|n
parameter_list|)
value|SSL_set_cipher_list(c,n)
define|#
directive|define
name|SSL_add_session
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|SSL_CTX_add_session((a),(b))
define|#
directive|define
name|SSL_remove_session
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|SSL_CTX_remove_session((a),(b))
define|#
directive|define
name|SSL_flush_sessions
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|SSL_CTX_flush_sessions((a),(b))
endif|#
directive|endif
comment|/* More backward compatibility */
define|#
directive|define
name|SSL_get_cipher
parameter_list|(
name|s
parameter_list|)
define|\
value|SSL_CIPHER_get_name(SSL_get_current_cipher(s))
define|#
directive|define
name|SSL_get_cipher_bits
parameter_list|(
name|s
parameter_list|,
name|np
parameter_list|)
define|\
value|SSL_CIPHER_get_bits(SSL_get_current_cipher(s),np)
define|#
directive|define
name|SSL_get_cipher_version
parameter_list|(
name|s
parameter_list|)
define|\
value|SSL_CIPHER_get_version(SSL_get_current_cipher(s))
define|#
directive|define
name|SSL_get_cipher_name
parameter_list|(
name|s
parameter_list|)
define|\
value|SSL_CIPHER_get_name(SSL_get_current_cipher(s))
define|#
directive|define
name|SSL_get_time
parameter_list|(
name|a
parameter_list|)
value|SSL_SESSION_get_time(a)
define|#
directive|define
name|SSL_set_time
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|SSL_SESSION_set_time((a),(b))
define|#
directive|define
name|SSL_get_timeout
parameter_list|(
name|a
parameter_list|)
value|SSL_SESSION_get_timeout(a)
define|#
directive|define
name|SSL_set_timeout
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|SSL_SESSION_set_timeout((a),(b))
define|#
directive|define
name|d2i_SSL_SESSION_bio
parameter_list|(
name|bp
parameter_list|,
name|s_id
parameter_list|)
value|ASN1_d2i_bio_of(SSL_SESSION,SSL_SESSION_new,d2i_SSL_SESSION,bp,s_id)
define|#
directive|define
name|i2d_SSL_SESSION_bio
parameter_list|(
name|bp
parameter_list|,
name|s_id
parameter_list|)
value|ASN1_i2d_bio_of(SSL_SESSION,i2d_SSL_SESSION,bp,s_id)
name|DECLARE_PEM_rw
argument_list|(
argument|SSL_SESSION
argument_list|,
argument|SSL_SESSION
argument_list|)
define|#
directive|define
name|SSL_AD_REASON_OFFSET
value|1000
comment|/* offset to get SSL_R_... value                                               * from SSL_AD_... */
comment|/* These alert types are for SSLv3 and TLSv1 */
define|#
directive|define
name|SSL_AD_CLOSE_NOTIFY
value|SSL3_AD_CLOSE_NOTIFY
comment|/* fatal */
define|#
directive|define
name|SSL_AD_UNEXPECTED_MESSAGE
value|SSL3_AD_UNEXPECTED_MESSAGE
comment|/* fatal */
define|#
directive|define
name|SSL_AD_BAD_RECORD_MAC
value|SSL3_AD_BAD_RECORD_MAC
define|#
directive|define
name|SSL_AD_DECRYPTION_FAILED
value|TLS1_AD_DECRYPTION_FAILED
define|#
directive|define
name|SSL_AD_RECORD_OVERFLOW
value|TLS1_AD_RECORD_OVERFLOW
comment|/* fatal */
define|#
directive|define
name|SSL_AD_DECOMPRESSION_FAILURE
value|SSL3_AD_DECOMPRESSION_FAILURE
comment|/* fatal */
define|#
directive|define
name|SSL_AD_HANDSHAKE_FAILURE
value|SSL3_AD_HANDSHAKE_FAILURE
comment|/* Not for TLS */
define|#
directive|define
name|SSL_AD_NO_CERTIFICATE
value|SSL3_AD_NO_CERTIFICATE
define|#
directive|define
name|SSL_AD_BAD_CERTIFICATE
value|SSL3_AD_BAD_CERTIFICATE
define|#
directive|define
name|SSL_AD_UNSUPPORTED_CERTIFICATE
value|SSL3_AD_UNSUPPORTED_CERTIFICATE
define|#
directive|define
name|SSL_AD_CERTIFICATE_REVOKED
value|SSL3_AD_CERTIFICATE_REVOKED
define|#
directive|define
name|SSL_AD_CERTIFICATE_EXPIRED
value|SSL3_AD_CERTIFICATE_EXPIRED
define|#
directive|define
name|SSL_AD_CERTIFICATE_UNKNOWN
value|SSL3_AD_CERTIFICATE_UNKNOWN
comment|/* fatal */
define|#
directive|define
name|SSL_AD_ILLEGAL_PARAMETER
value|SSL3_AD_ILLEGAL_PARAMETER
comment|/* fatal */
define|#
directive|define
name|SSL_AD_UNKNOWN_CA
value|TLS1_AD_UNKNOWN_CA
comment|/* fatal */
define|#
directive|define
name|SSL_AD_ACCESS_DENIED
value|TLS1_AD_ACCESS_DENIED
comment|/* fatal */
define|#
directive|define
name|SSL_AD_DECODE_ERROR
value|TLS1_AD_DECODE_ERROR
define|#
directive|define
name|SSL_AD_DECRYPT_ERROR
value|TLS1_AD_DECRYPT_ERROR
comment|/* fatal */
define|#
directive|define
name|SSL_AD_EXPORT_RESTRICTION
value|TLS1_AD_EXPORT_RESTRICTION
comment|/* fatal */
define|#
directive|define
name|SSL_AD_PROTOCOL_VERSION
value|TLS1_AD_PROTOCOL_VERSION
comment|/* fatal */
define|#
directive|define
name|SSL_AD_INSUFFICIENT_SECURITY
value|TLS1_AD_INSUFFICIENT_SECURITY
comment|/* fatal */
define|#
directive|define
name|SSL_AD_INTERNAL_ERROR
value|TLS1_AD_INTERNAL_ERROR
define|#
directive|define
name|SSL_AD_USER_CANCELLED
value|TLS1_AD_USER_CANCELLED
define|#
directive|define
name|SSL_AD_NO_RENEGOTIATION
value|TLS1_AD_NO_RENEGOTIATION
define|#
directive|define
name|SSL_AD_UNSUPPORTED_EXTENSION
value|TLS1_AD_UNSUPPORTED_EXTENSION
define|#
directive|define
name|SSL_AD_CERTIFICATE_UNOBTAINABLE
value|TLS1_AD_CERTIFICATE_UNOBTAINABLE
define|#
directive|define
name|SSL_AD_UNRECOGNIZED_NAME
value|TLS1_AD_UNRECOGNIZED_NAME
define|#
directive|define
name|SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
value|TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
define|#
directive|define
name|SSL_AD_BAD_CERTIFICATE_HASH_VALUE
value|TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
comment|/* fatal */
define|#
directive|define
name|SSL_AD_UNKNOWN_PSK_IDENTITY
value|TLS1_AD_UNKNOWN_PSK_IDENTITY
comment|/* fatal */
define|#
directive|define
name|SSL_AD_INAPPROPRIATE_FALLBACK
value|TLS1_AD_INAPPROPRIATE_FALLBACK
define|#
directive|define
name|SSL_ERROR_NONE
value|0
define|#
directive|define
name|SSL_ERROR_SSL
value|1
define|#
directive|define
name|SSL_ERROR_WANT_READ
value|2
define|#
directive|define
name|SSL_ERROR_WANT_WRITE
value|3
define|#
directive|define
name|SSL_ERROR_WANT_X509_LOOKUP
value|4
define|#
directive|define
name|SSL_ERROR_SYSCALL
value|5
comment|/* look at error stack/return                                            * value/errno */
define|#
directive|define
name|SSL_ERROR_ZERO_RETURN
value|6
define|#
directive|define
name|SSL_ERROR_WANT_CONNECT
value|7
define|#
directive|define
name|SSL_ERROR_WANT_ACCEPT
value|8
define|#
directive|define
name|SSL_CTRL_NEED_TMP_RSA
value|1
define|#
directive|define
name|SSL_CTRL_SET_TMP_RSA
value|2
define|#
directive|define
name|SSL_CTRL_SET_TMP_DH
value|3
define|#
directive|define
name|SSL_CTRL_SET_TMP_ECDH
value|4
define|#
directive|define
name|SSL_CTRL_SET_TMP_RSA_CB
value|5
define|#
directive|define
name|SSL_CTRL_SET_TMP_DH_CB
value|6
define|#
directive|define
name|SSL_CTRL_SET_TMP_ECDH_CB
value|7
define|#
directive|define
name|SSL_CTRL_GET_SESSION_REUSED
value|8
define|#
directive|define
name|SSL_CTRL_GET_CLIENT_CERT_REQUEST
value|9
define|#
directive|define
name|SSL_CTRL_GET_NUM_RENEGOTIATIONS
value|10
define|#
directive|define
name|SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
value|11
define|#
directive|define
name|SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
value|12
define|#
directive|define
name|SSL_CTRL_GET_FLAGS
value|13
define|#
directive|define
name|SSL_CTRL_EXTRA_CHAIN_CERT
value|14
define|#
directive|define
name|SSL_CTRL_SET_MSG_CALLBACK
value|15
define|#
directive|define
name|SSL_CTRL_SET_MSG_CALLBACK_ARG
value|16
comment|/* only applies to datagram connections */
define|#
directive|define
name|SSL_CTRL_SET_MTU
value|17
comment|/* Stats */
define|#
directive|define
name|SSL_CTRL_SESS_NUMBER
value|20
define|#
directive|define
name|SSL_CTRL_SESS_CONNECT
value|21
define|#
directive|define
name|SSL_CTRL_SESS_CONNECT_GOOD
value|22
define|#
directive|define
name|SSL_CTRL_SESS_CONNECT_RENEGOTIATE
value|23
define|#
directive|define
name|SSL_CTRL_SESS_ACCEPT
value|24
define|#
directive|define
name|SSL_CTRL_SESS_ACCEPT_GOOD
value|25
define|#
directive|define
name|SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
value|26
define|#
directive|define
name|SSL_CTRL_SESS_HIT
value|27
define|#
directive|define
name|SSL_CTRL_SESS_CB_HIT
value|28
define|#
directive|define
name|SSL_CTRL_SESS_MISSES
value|29
define|#
directive|define
name|SSL_CTRL_SESS_TIMEOUTS
value|30
define|#
directive|define
name|SSL_CTRL_SESS_CACHE_FULL
value|31
define|#
directive|define
name|SSL_CTRL_OPTIONS
value|32
define|#
directive|define
name|SSL_CTRL_MODE
value|33
define|#
directive|define
name|SSL_CTRL_GET_READ_AHEAD
value|40
define|#
directive|define
name|SSL_CTRL_SET_READ_AHEAD
value|41
define|#
directive|define
name|SSL_CTRL_SET_SESS_CACHE_SIZE
value|42
define|#
directive|define
name|SSL_CTRL_GET_SESS_CACHE_SIZE
value|43
define|#
directive|define
name|SSL_CTRL_SET_SESS_CACHE_MODE
value|44
define|#
directive|define
name|SSL_CTRL_GET_SESS_CACHE_MODE
value|45
define|#
directive|define
name|SSL_CTRL_GET_MAX_CERT_LIST
value|50
define|#
directive|define
name|SSL_CTRL_SET_MAX_CERT_LIST
value|51
define|#
directive|define
name|SSL_CTRL_SET_MAX_SEND_FRAGMENT
value|52
comment|/* see tls1.h for macros based on these */
ifndef|#
directive|ifndef
name|OPENSSL_NO_TLSEXT
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
value|53
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
value|54
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_HOSTNAME
value|55
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_DEBUG_CB
value|56
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_DEBUG_ARG
value|57
define|#
directive|define
name|SSL_CTRL_GET_TLSEXT_TICKET_KEYS
value|58
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_TICKET_KEYS
value|59
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
value|60
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
value|61
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
value|62
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
value|63
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
value|64
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
value|65
define|#
directive|define
name|SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
value|66
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
value|67
define|#
directive|define
name|SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
value|68
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
value|69
define|#
directive|define
name|SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
value|70
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
value|71
define|#
directive|define
name|SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
value|72
define|#
directive|define
name|SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
value|75
define|#
directive|define
name|SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
value|76
define|#
directive|define
name|SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
value|77
define|#
directive|define
name|SSL_CTRL_SET_SRP_ARG
value|78
define|#
directive|define
name|SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
value|79
define|#
directive|define
name|SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
value|80
define|#
directive|define
name|SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
value|81
ifndef|#
directive|ifndef
name|OPENSSL_NO_HEARTBEATS
define|#
directive|define
name|SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
value|85
define|#
directive|define
name|SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
value|86
define|#
directive|define
name|SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
value|87
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|DTLS_CTRL_GET_TIMEOUT
value|73
define|#
directive|define
name|DTLS_CTRL_HANDLE_TIMEOUT
value|74
define|#
directive|define
name|DTLS_CTRL_LISTEN
value|75
define|#
directive|define
name|SSL_CTRL_GET_RI_SUPPORT
value|76
define|#
directive|define
name|SSL_CTRL_CLEAR_OPTIONS
value|77
define|#
directive|define
name|SSL_CTRL_CLEAR_MODE
value|78
define|#
directive|define
name|SSL_CTRL_GET_EXTRA_CHAIN_CERTS
value|82
define|#
directive|define
name|SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
value|83
define|#
directive|define
name|SSL_CTRL_CHECK_PROTO_VERSION
value|119
define|#
directive|define
name|DTLS_CTRL_SET_LINK_MTU
value|120
define|#
directive|define
name|DTLS_CTRL_GET_LINK_MIN_MTU
value|121
define|#
directive|define
name|DTLSv1_get_timeout
parameter_list|(
name|ssl
parameter_list|,
name|arg
parameter_list|)
define|\
value|SSL_ctrl(ssl,DTLS_CTRL_GET_TIMEOUT,0, (void *)arg)
define|#
directive|define
name|DTLSv1_handle_timeout
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl(ssl,DTLS_CTRL_HANDLE_TIMEOUT,0, NULL)
define|#
directive|define
name|DTLSv1_listen
parameter_list|(
name|ssl
parameter_list|,
name|peer
parameter_list|)
define|\
value|SSL_ctrl(ssl,DTLS_CTRL_LISTEN,0, (void *)peer)
define|#
directive|define
name|SSL_session_reused
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_GET_SESSION_REUSED,0,NULL)
define|#
directive|define
name|SSL_num_renegotiations
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_GET_NUM_RENEGOTIATIONS,0,NULL)
define|#
directive|define
name|SSL_clear_num_renegotiations
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS,0,NULL)
define|#
directive|define
name|SSL_total_renegotiations
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl((ssl),SSL_CTRL_GET_TOTAL_RENEGOTIATIONS,0,NULL)
define|#
directive|define
name|SSL_CTX_need_tmp_RSA
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_NEED_TMP_RSA,0,NULL)
define|#
directive|define
name|SSL_CTX_set_tmp_rsa
parameter_list|(
name|ctx
parameter_list|,
name|rsa
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TMP_RSA,0,(char *)rsa)
define|#
directive|define
name|SSL_CTX_set_tmp_dh
parameter_list|(
name|ctx
parameter_list|,
name|dh
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TMP_DH,0,(char *)dh)
define|#
directive|define
name|SSL_CTX_set_tmp_ecdh
parameter_list|(
name|ctx
parameter_list|,
name|ecdh
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TMP_ECDH,0,(char *)ecdh)
define|#
directive|define
name|SSL_need_tmp_RSA
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl(ssl,SSL_CTRL_NEED_TMP_RSA,0,NULL)
define|#
directive|define
name|SSL_set_tmp_rsa
parameter_list|(
name|ssl
parameter_list|,
name|rsa
parameter_list|)
define|\
value|SSL_ctrl(ssl,SSL_CTRL_SET_TMP_RSA,0,(char *)rsa)
define|#
directive|define
name|SSL_set_tmp_dh
parameter_list|(
name|ssl
parameter_list|,
name|dh
parameter_list|)
define|\
value|SSL_ctrl(ssl,SSL_CTRL_SET_TMP_DH,0,(char *)dh)
define|#
directive|define
name|SSL_set_tmp_ecdh
parameter_list|(
name|ssl
parameter_list|,
name|ecdh
parameter_list|)
define|\
value|SSL_ctrl(ssl,SSL_CTRL_SET_TMP_ECDH,0,(char *)ecdh)
define|#
directive|define
name|SSL_CTX_add_extra_chain_cert
parameter_list|(
name|ctx
parameter_list|,
name|x509
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_EXTRA_CHAIN_CERT,0,(char *)x509)
define|#
directive|define
name|SSL_CTX_get_extra_chain_certs
parameter_list|(
name|ctx
parameter_list|,
name|px509
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_GET_EXTRA_CHAIN_CERTS,0,px509)
define|#
directive|define
name|SSL_CTX_clear_extra_chain_certs
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS,0,NULL)
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|BIO_METHOD
modifier|*
name|BIO_f_ssl
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_ssl
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|client
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_ssl_connect
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_buffer_ssl_connect
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BIO_ssl_copy_session_id
parameter_list|(
name|BIO
modifier|*
name|to
parameter_list|,
name|BIO
modifier|*
name|from
parameter_list|)
function_decl|;
name|void
name|BIO_ssl_shutdown
parameter_list|(
name|BIO
modifier|*
name|ssl_bio
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SSL_CTX_set_cipher_list
parameter_list|(
name|SSL_CTX
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|SSL_CTX
modifier|*
name|SSL_CTX_new
parameter_list|(
specifier|const
name|SSL_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_free
parameter_list|(
name|SSL_CTX
modifier|*
parameter_list|)
function_decl|;
name|long
name|SSL_CTX_set_timeout
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|long
name|t
parameter_list|)
function_decl|;
name|long
name|SSL_CTX_get_timeout
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|X509_STORE
modifier|*
name|SSL_CTX_get_cert_store
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_cert_store
parameter_list|(
name|SSL_CTX
modifier|*
parameter_list|,
name|X509_STORE
modifier|*
parameter_list|)
function_decl|;
name|int
name|SSL_want
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_clear
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_flush_sessions
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|long
name|tm
parameter_list|)
function_decl|;
specifier|const
name|SSL_CIPHER
modifier|*
name|SSL_get_current_cipher
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_CIPHER_get_bits
parameter_list|(
specifier|const
name|SSL_CIPHER
modifier|*
name|c
parameter_list|,
name|int
modifier|*
name|alg_bits
parameter_list|)
function_decl|;
name|char
modifier|*
name|SSL_CIPHER_get_version
parameter_list|(
specifier|const
name|SSL_CIPHER
modifier|*
name|c
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_CIPHER_get_name
parameter_list|(
specifier|const
name|SSL_CIPHER
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|long
name|SSL_CIPHER_get_id
parameter_list|(
specifier|const
name|SSL_CIPHER
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SSL_get_fd
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_get_rfd
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_get_wfd
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_get_cipher_list
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|char
modifier|*
name|SSL_get_shared_ciphers
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|SSL_get_read_ahead
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_pending
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SOCK
name|int
name|SSL_set_fd
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
name|int
name|SSL_set_rfd
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
name|int
name|SSL_set_wfd
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|void
name|SSL_set_bio
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|BIO
modifier|*
name|rbio
parameter_list|,
name|BIO
modifier|*
name|wbio
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|SSL_get_rbio
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|SSL_get_wbio
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SSL_set_cipher_list
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|void
name|SSL_set_read_ahead
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|yes
parameter_list|)
function_decl|;
name|int
name|SSL_get_verify_mode
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_get_verify_depth
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
argument_list|(
operator|*
name|SSL_get_verify_callback
argument_list|(
specifier|const
name|SSL
operator|*
name|s
argument_list|)
argument_list|)
argument_list|(
name|int
argument_list|,
name|X509_STORE_CTX
operator|*
argument_list|)
expr_stmt|;
name|void
name|SSL_set_verify
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
name|ok
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SSL_set_verify_depth
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|depth
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|int
name|SSL_use_RSAPrivateKey
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SSL_use_RSAPrivateKey_ASN1
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|SSL_use_PrivateKey
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|SSL_use_PrivateKey_ASN1
parameter_list|(
name|int
name|pk
parameter_list|,
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|SSL_use_certificate
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|SSL_use_certificate_ASN1
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_STDIO
name|int
name|SSL_use_RSAPrivateKey_file
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|SSL_use_PrivateKey_file
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|SSL_use_certificate_file
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_use_RSAPrivateKey_file
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_use_PrivateKey_file
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_use_certificate_file
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
comment|/* PEM type */
name|int
name|SSL_CTX_use_certificate_chain_file
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|SSL_load_client_CA_file
argument_list|(
specifier|const
name|char
operator|*
name|file
argument_list|)
expr_stmt|;
name|int
name|SSL_add_file_cert_subjects_to_stack
argument_list|(
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|stackCAs
argument_list|,
specifier|const
name|char
operator|*
name|file
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_SYS_VMS
comment|/* XXXXX: Better scheme needed! [was: #ifndef MAC_OS_pre_X] */
ifndef|#
directive|ifndef
name|OPENSSL_SYS_MACINTOSH_CLASSIC
name|int
name|SSL_add_dir_cert_subjects_to_stack
argument_list|(
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|stackCAs
argument_list|,
specifier|const
name|char
operator|*
name|dir
argument_list|)
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
name|void
name|SSL_load_error_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_state_string
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_rstate_string
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_state_string_long
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_rstate_string_long
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|long
name|SSL_SESSION_get_time
parameter_list|(
specifier|const
name|SSL_SESSION
modifier|*
name|s
parameter_list|)
function_decl|;
name|long
name|SSL_SESSION_set_time
parameter_list|(
name|SSL_SESSION
modifier|*
name|s
parameter_list|,
name|long
name|t
parameter_list|)
function_decl|;
name|long
name|SSL_SESSION_get_timeout
parameter_list|(
specifier|const
name|SSL_SESSION
modifier|*
name|s
parameter_list|)
function_decl|;
name|long
name|SSL_SESSION_set_timeout
parameter_list|(
name|SSL_SESSION
modifier|*
name|s
parameter_list|,
name|long
name|t
parameter_list|)
function_decl|;
name|void
name|SSL_copy_session_id
parameter_list|(
name|SSL
modifier|*
name|to
parameter_list|,
specifier|const
name|SSL
modifier|*
name|from
parameter_list|)
function_decl|;
name|X509
modifier|*
name|SSL_SESSION_get0_peer
parameter_list|(
name|SSL_SESSION
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_SESSION_set1_id_context
parameter_list|(
name|SSL_SESSION
modifier|*
name|s
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sid_ctx
parameter_list|,
name|unsigned
name|int
name|sid_ctx_len
parameter_list|)
function_decl|;
name|SSL_SESSION
modifier|*
name|SSL_SESSION_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|unsigned
name|char
modifier|*
name|SSL_SESSION_get_id
parameter_list|(
specifier|const
name|SSL_SESSION
modifier|*
name|s
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|unsigned
name|int
name|SSL_SESSION_get_compress_id
parameter_list|(
specifier|const
name|SSL_SESSION
modifier|*
name|s
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|int
name|SSL_SESSION_print_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|SSL_SESSION
modifier|*
name|ses
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|SSL_SESSION_print
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
specifier|const
name|SSL_SESSION
modifier|*
name|ses
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|SSL_SESSION_free
parameter_list|(
name|SSL_SESSION
modifier|*
name|ses
parameter_list|)
function_decl|;
name|int
name|i2d_SSL_SESSION
parameter_list|(
name|SSL_SESSION
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|int
name|SSL_set_session
parameter_list|(
name|SSL
modifier|*
name|to
parameter_list|,
name|SSL_SESSION
modifier|*
name|session
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_add_session
parameter_list|(
name|SSL_CTX
modifier|*
name|s
parameter_list|,
name|SSL_SESSION
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_remove_session
parameter_list|(
name|SSL_CTX
modifier|*
parameter_list|,
name|SSL_SESSION
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_generate_session_id
parameter_list|(
name|SSL_CTX
modifier|*
parameter_list|,
name|GEN_SESSION_CB
parameter_list|)
function_decl|;
name|int
name|SSL_set_generate_session_id
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|GEN_SESSION_CB
parameter_list|)
function_decl|;
name|int
name|SSL_has_matching_session_id
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|id
parameter_list|,
name|unsigned
name|int
name|id_len
parameter_list|)
function_decl|;
name|SSL_SESSION
modifier|*
name|d2i_SSL_SESSION
parameter_list|(
name|SSL_SESSION
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|HEADER_X509_H
name|X509
modifier|*
name|SSL_get_peer_certificate
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
endif|#
directive|endif
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|SSL_get_peer_cert_chain
argument_list|(
specifier|const
name|SSL
operator|*
name|s
argument_list|)
expr_stmt|;
name|int
name|SSL_CTX_get_verify_mode
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_get_verify_depth
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
argument_list|(
operator|*
name|SSL_CTX_get_verify_callback
argument_list|(
specifier|const
name|SSL_CTX
operator|*
name|ctx
argument_list|)
argument_list|)
argument_list|(
name|int
argument_list|,
name|X509_STORE_CTX
operator|*
argument_list|)
expr_stmt|;
name|void
name|SSL_CTX_set_verify
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|X509_STORE_CTX
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_verify_depth
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|depth
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_cert_verify_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|int
name|SSL_CTX_use_RSAPrivateKey
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SSL_CTX_use_RSAPrivateKey_ASN1
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_use_PrivateKey
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_use_PrivateKey_ASN1
parameter_list|(
name|int
name|pk
parameter_list|,
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_use_certificate
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_use_certificate_ASN1
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_default_passwd_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_default_passwd_cb_userdata
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_check_private_key
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_check_private_key
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_session_id_context
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sid_ctx
parameter_list|,
name|unsigned
name|int
name|sid_ctx_len
parameter_list|)
function_decl|;
name|SSL
modifier|*
name|SSL_new
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_set_session_id_context
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sid_ctx
parameter_list|,
name|unsigned
name|int
name|sid_ctx_len
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_purpose
parameter_list|(
name|SSL_CTX
modifier|*
name|s
parameter_list|,
name|int
name|purpose
parameter_list|)
function_decl|;
name|int
name|SSL_set_purpose
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|purpose
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_trust
parameter_list|(
name|SSL_CTX
modifier|*
name|s
parameter_list|,
name|int
name|trust
parameter_list|)
function_decl|;
name|int
name|SSL_set_trust
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|trust
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set1_param
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_VERIFY_PARAM
modifier|*
name|vpm
parameter_list|)
function_decl|;
name|int
name|SSL_set1_param
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|X509_VERIFY_PARAM
modifier|*
name|vpm
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SRP
name|int
name|SSL_CTX_set_srp_username
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_srp_password
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
name|password
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_srp_strength
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|strength
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_srp_client_pwd_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_srp_verify_param_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_srp_username_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_srp_cb_arg
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|int
name|SSL_set_srp_server_param
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|N
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|g
parameter_list|,
name|BIGNUM
modifier|*
name|sa
parameter_list|,
name|BIGNUM
modifier|*
name|v
parameter_list|,
name|char
modifier|*
name|info
parameter_list|)
function_decl|;
name|int
name|SSL_set_srp_server_param_pw
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|user
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
specifier|const
name|char
modifier|*
name|grp
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|SSL_get_srp_g
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|SSL_get_srp_N
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|char
modifier|*
name|SSL_get_srp_username
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|char
modifier|*
name|SSL_get_srp_userinfo
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|SSL_free
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|int
name|SSL_accept
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|int
name|SSL_connect
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|int
name|SSL_read
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|int
name|SSL_peek
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|int
name|SSL_write
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|long
name|SSL_ctrl
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|,
name|void
modifier|*
name|parg
parameter_list|)
function_decl|;
name|long
name|SSL_callback_ctrl
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|long
name|SSL_CTX_ctrl
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|,
name|void
modifier|*
name|parg
parameter_list|)
function_decl|;
name|long
name|SSL_CTX_callback_ctrl
parameter_list|(
name|SSL_CTX
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|SSL_get_error
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|ret_code
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_get_version
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/* This sets the 'default' SSL version that SSL_new() will create */
name|int
name|SSL_CTX_set_ssl_version
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|SSL_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2_METHOD
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv2_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* SSLv2 */
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv2_server_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* SSLv2 */
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv2_client_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* SSLv2 */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL3_METHOD
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv3_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* SSLv3 */
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv3_server_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* SSLv3 */
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv3_client_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* SSLv3 */
endif|#
directive|endif
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv23_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Negotiate highest available SSL/TLS                                         * version */
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv23_server_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Negotiate highest available                                                * SSL/TLS version */
specifier|const
name|SSL_METHOD
modifier|*
name|SSLv23_client_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Negotiate highest available                                                * SSL/TLS version */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.0 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_server_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.0 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_client_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.0 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_1_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.1 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_1_server_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.1 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_1_client_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.1 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_2_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.2 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_2_server_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.2 */
specifier|const
name|SSL_METHOD
modifier|*
name|TLSv1_2_client_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* TLSv1.2 */
specifier|const
name|SSL_METHOD
modifier|*
name|DTLSv1_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* DTLSv1.0 */
specifier|const
name|SSL_METHOD
modifier|*
name|DTLSv1_server_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* DTLSv1.0 */
specifier|const
name|SSL_METHOD
modifier|*
name|DTLSv1_client_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* DTLSv1.0 */
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|SSL_get_ciphers
argument_list|(
specifier|const
name|SSL
operator|*
name|s
argument_list|)
expr_stmt|;
name|int
name|SSL_do_handshake
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_renegotiate
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_renegotiate_abbreviated
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_renegotiate_pending
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_shutdown
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|SSL_METHOD
modifier|*
name|SSL_get_ssl_method
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_set_ssl_method
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|SSL_METHOD
modifier|*
name|method
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_alert_type_string_long
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_alert_type_string
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_alert_desc_string_long
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_alert_desc_string
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
name|void
name|SSL_set_client_CA_list
argument_list|(
name|SSL
operator|*
name|s
argument_list|,
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|name_list
argument_list|)
decl_stmt|;
name|void
name|SSL_CTX_set_client_CA_list
argument_list|(
name|SSL_CTX
operator|*
name|ctx
argument_list|,
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|name_list
argument_list|)
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|SSL_get_client_CA_list
argument_list|(
specifier|const
name|SSL
operator|*
name|s
argument_list|)
expr_stmt|;
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|SSL_CTX_get_client_CA_list
argument_list|(
specifier|const
name|SSL_CTX
operator|*
name|s
argument_list|)
expr_stmt|;
name|int
name|SSL_add_client_CA
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_add_client_CA
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|SSL_set_connect_state
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|SSL_set_accept_state
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|long
name|SSL_get_default_timeout
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|SSL_library_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|char
modifier|*
name|SSL_CIPHER_description
parameter_list|(
specifier|const
name|SSL_CIPHER
modifier|*
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|SSL_dup_CA_list
argument_list|(
name|STACK_OF
argument_list|(
name|X509_NAME
argument_list|)
operator|*
name|sk
argument_list|)
expr_stmt|;
name|SSL
modifier|*
name|SSL_dup
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|X509
modifier|*
name|SSL_get_certificate
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
comment|/*  * EVP_PKEY  */
name|struct
name|evp_pkey_st
modifier|*
name|SSL_get_privatekey
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|void
name|SSL_CTX_set_quiet_shutdown
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_get_quiet_shutdown
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|SSL_set_quiet_shutdown
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|SSL_get_quiet_shutdown
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|void
name|SSL_set_shutdown
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|SSL_get_shutdown
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|int
name|SSL_version
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_default_verify_paths
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_load_verify_locations
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|CAfile
parameter_list|,
specifier|const
name|char
modifier|*
name|CApath
parameter_list|)
function_decl|;
define|#
directive|define
name|SSL_get0_session
value|SSL_get_session
comment|/* just peek at pointer */
name|SSL_SESSION
modifier|*
name|SSL_get_session
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|SSL_SESSION
modifier|*
name|SSL_get1_session
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
comment|/* obtain a reference count */
name|SSL_CTX
modifier|*
name|SSL_get_SSL_CTX
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|SSL_CTX
modifier|*
name|SSL_set_SSL_CTX
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|SSL_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|SSL_set_info_callback
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|val
parameter_list|)
parameter_list|)
function_decl|;
name|void
argument_list|(
argument|*SSL_get_info_callback(const SSL *ssl)
argument_list|)
operator|(
specifier|const
name|SSL
operator|*
name|ssl
operator|,
name|int
name|type
operator|,
name|int
name|val
operator|)
expr_stmt|;
name|int
name|SSL_state
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|void
name|SSL_set_state
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|state
parameter_list|)
function_decl|;
name|void
name|SSL_set_verify_result
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|long
name|v
parameter_list|)
function_decl|;
name|long
name|SSL_get_verify_result
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
name|int
name|SSL_set_ex_data
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|SSL_get_ex_data
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|SSL_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|SSL_SESSION_set_ex_data
parameter_list|(
name|SSL_SESSION
modifier|*
name|ss
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|SSL_SESSION_get_ex_data
parameter_list|(
specifier|const
name|SSL_SESSION
modifier|*
name|ss
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|SSL_SESSION_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_set_ex_data
parameter_list|(
name|SSL_CTX
modifier|*
name|ssl
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|SSL_CTX_get_ex_data
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
name|ssl
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|SSL_CTX_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|SSL_get_ex_data_X509_STORE_CTX_idx
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|SSL_CTX_sess_set_cache_size
parameter_list|(
name|ctx
parameter_list|,
name|t
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SESS_CACHE_SIZE,t,NULL)
define|#
directive|define
name|SSL_CTX_sess_get_cache_size
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_GET_SESS_CACHE_SIZE,0,NULL)
define|#
directive|define
name|SSL_CTX_set_session_cache_mode
parameter_list|(
name|ctx
parameter_list|,
name|m
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SESS_CACHE_MODE,m,NULL)
define|#
directive|define
name|SSL_CTX_get_session_cache_mode
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_GET_SESS_CACHE_MODE,0,NULL)
define|#
directive|define
name|SSL_CTX_get_default_read_ahead
parameter_list|(
name|ctx
parameter_list|)
value|SSL_CTX_get_read_ahead(ctx)
define|#
directive|define
name|SSL_CTX_set_default_read_ahead
parameter_list|(
name|ctx
parameter_list|,
name|m
parameter_list|)
value|SSL_CTX_set_read_ahead(ctx,m)
define|#
directive|define
name|SSL_CTX_get_read_ahead
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_GET_READ_AHEAD,0,NULL)
define|#
directive|define
name|SSL_CTX_set_read_ahead
parameter_list|(
name|ctx
parameter_list|,
name|m
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_READ_AHEAD,m,NULL)
define|#
directive|define
name|SSL_CTX_get_max_cert_list
parameter_list|(
name|ctx
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
define|#
directive|define
name|SSL_CTX_set_max_cert_list
parameter_list|(
name|ctx
parameter_list|,
name|m
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)
define|#
directive|define
name|SSL_get_max_cert_list
parameter_list|(
name|ssl
parameter_list|)
define|\
value|SSL_ctrl(ssl,SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
define|#
directive|define
name|SSL_set_max_cert_list
parameter_list|(
name|ssl
parameter_list|,
name|m
parameter_list|)
define|\
value|SSL_ctrl(ssl,SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)
define|#
directive|define
name|SSL_CTX_set_max_send_fragment
parameter_list|(
name|ctx
parameter_list|,
name|m
parameter_list|)
define|\
value|SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
define|#
directive|define
name|SSL_set_max_send_fragment
parameter_list|(
name|ssl
parameter_list|,
name|m
parameter_list|)
define|\
value|SSL_ctrl(ssl,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
comment|/* NB: the keylength is only applicable when is_export is true */
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|void
name|SSL_CTX_set_tmp_rsa_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|RSA
modifier|*
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|is_export
parameter_list|,
name|int
name|keylength
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SSL_set_tmp_rsa_callback
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|RSA
modifier|*
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|is_export
parameter_list|,
name|int
name|keylength
parameter_list|)
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
name|void
name|SSL_CTX_set_tmp_dh_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|DH
modifier|*
function_decl|(
modifier|*
name|dh
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|is_export
parameter_list|,
name|int
name|keylength
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SSL_set_tmp_dh_callback
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|DH
modifier|*
function_decl|(
modifier|*
name|dh
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|is_export
parameter_list|,
name|int
name|keylength
parameter_list|)
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_ECDH
name|void
name|SSL_CTX_set_tmp_ecdh_callback
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
name|EC_KEY
modifier|*
function_decl|(
modifier|*
name|ecdh
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|is_export
parameter_list|,
name|int
name|keylength
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SSL_set_tmp_ecdh_callback
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|EC_KEY
modifier|*
function_decl|(
modifier|*
name|ecdh
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|is_export
parameter_list|,
name|int
name|keylength
parameter_list|)
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_COMP
specifier|const
name|COMP_METHOD
modifier|*
name|SSL_get_current_compression
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|COMP_METHOD
modifier|*
name|SSL_get_current_expansion
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_COMP_get_name
parameter_list|(
specifier|const
name|COMP_METHOD
modifier|*
name|comp
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|SSL_COMP
argument_list|)
operator|*
name|SSL_COMP_get_compression_methods
argument_list|(
name|void
argument_list|)
expr_stmt|;
name|int
name|SSL_COMP_add_compression_method
parameter_list|(
name|int
name|id
parameter_list|,
name|COMP_METHOD
modifier|*
name|cm
parameter_list|)
function_decl|;
else|#
directive|else
specifier|const
name|void
modifier|*
name|SSL_get_current_compression
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|void
modifier|*
name|SSL_get_current_expansion
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|SSL_COMP_get_name
parameter_list|(
specifier|const
name|void
modifier|*
name|comp
parameter_list|)
function_decl|;
name|void
modifier|*
name|SSL_COMP_get_compression_methods
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|SSL_COMP_add_compression_method
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|cm
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* TLS extensions functions */
name|int
name|SSL_set_session_ticket_ext
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|void
modifier|*
name|ext_data
parameter_list|,
name|int
name|ext_len
parameter_list|)
function_decl|;
name|int
name|SSL_set_session_ticket_ext_cb
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|tls_session_ticket_ext_cb_fn
name|cb
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
comment|/* Pre-shared secret session resumption functions */
name|int
name|SSL_set_session_secret_cb
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|tls_session_secret_cb_fn
name|tls_session_secret_cb
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
name|SSL_set_debug
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|,
name|int
name|debug
parameter_list|)
function_decl|;
name|int
name|SSL_cache_hit
parameter_list|(
name|SSL
modifier|*
name|s
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_UNIT_TEST
specifier|const
name|struct
name|openssl_ssl_test_functions
modifier|*
name|SSL_test_functions
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* BEGIN ERROR CODES */
comment|/*  * The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_SSL_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the SSL functions. */
comment|/* Function codes. */
define|#
directive|define
name|SSL_F_CLIENT_CERTIFICATE
value|100
define|#
directive|define
name|SSL_F_CLIENT_FINISHED
value|167
define|#
directive|define
name|SSL_F_CLIENT_HELLO
value|101
define|#
directive|define
name|SSL_F_CLIENT_MASTER_KEY
value|102
define|#
directive|define
name|SSL_F_D2I_SSL_SESSION
value|103
define|#
directive|define
name|SSL_F_DO_DTLS1_WRITE
value|245
define|#
directive|define
name|SSL_F_DO_SSL3_WRITE
value|104
define|#
directive|define
name|SSL_F_DTLS1_ACCEPT
value|246
define|#
directive|define
name|SSL_F_DTLS1_ADD_CERT_TO_BUF
value|295
define|#
directive|define
name|SSL_F_DTLS1_BUFFER_RECORD
value|247
define|#
directive|define
name|SSL_F_DTLS1_CHECK_TIMEOUT_NUM
value|316
define|#
directive|define
name|SSL_F_DTLS1_CLIENT_HELLO
value|248
define|#
directive|define
name|SSL_F_DTLS1_CONNECT
value|249
define|#
directive|define
name|SSL_F_DTLS1_ENC
value|250
define|#
directive|define
name|SSL_F_DTLS1_GET_HELLO_VERIFY
value|251
define|#
directive|define
name|SSL_F_DTLS1_GET_MESSAGE
value|252
define|#
directive|define
name|SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
value|253
define|#
directive|define
name|SSL_F_DTLS1_GET_RECORD
value|254
define|#
directive|define
name|SSL_F_DTLS1_HANDLE_TIMEOUT
value|297
define|#
directive|define
name|SSL_F_DTLS1_HEARTBEAT
value|305
define|#
directive|define
name|SSL_F_DTLS1_OUTPUT_CERT_CHAIN
value|255
define|#
directive|define
name|SSL_F_DTLS1_PREPROCESS_FRAGMENT
value|288
define|#
directive|define
name|SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS
value|424
define|#
directive|define
name|SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
value|256
define|#
directive|define
name|SSL_F_DTLS1_PROCESS_RECORD
value|257
define|#
directive|define
name|SSL_F_DTLS1_READ_BYTES
value|258
define|#
directive|define
name|SSL_F_DTLS1_READ_FAILED
value|259
define|#
directive|define
name|SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
value|260
define|#
directive|define
name|SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
value|261
define|#
directive|define
name|SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
value|262
define|#
directive|define
name|SSL_F_DTLS1_SEND_CLIENT_VERIFY
value|263
define|#
directive|define
name|SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
value|264
define|#
directive|define
name|SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
value|265
define|#
directive|define
name|SSL_F_DTLS1_SEND_SERVER_HELLO
value|266
define|#
directive|define
name|SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
value|267
define|#
directive|define
name|SSL_F_DTLS1_WRITE_APP_DATA_BYTES
value|268
define|#
directive|define
name|SSL_F_GET_CLIENT_FINISHED
value|105
define|#
directive|define
name|SSL_F_GET_CLIENT_HELLO
value|106
define|#
directive|define
name|SSL_F_GET_CLIENT_MASTER_KEY
value|107
define|#
directive|define
name|SSL_F_GET_SERVER_FINISHED
value|108
define|#
directive|define
name|SSL_F_GET_SERVER_HELLO
value|109
define|#
directive|define
name|SSL_F_GET_SERVER_VERIFY
value|110
define|#
directive|define
name|SSL_F_I2D_SSL_SESSION
value|111
define|#
directive|define
name|SSL_F_READ_N
value|112
define|#
directive|define
name|SSL_F_REQUEST_CERTIFICATE
value|113
define|#
directive|define
name|SSL_F_SERVER_FINISH
value|239
define|#
directive|define
name|SSL_F_SERVER_HELLO
value|114
define|#
directive|define
name|SSL_F_SERVER_VERIFY
value|240
define|#
directive|define
name|SSL_F_SSL23_ACCEPT
value|115
define|#
directive|define
name|SSL_F_SSL23_CLIENT_HELLO
value|116
define|#
directive|define
name|SSL_F_SSL23_CONNECT
value|117
define|#
directive|define
name|SSL_F_SSL23_GET_CLIENT_HELLO
value|118
define|#
directive|define
name|SSL_F_SSL23_GET_SERVER_HELLO
value|119
define|#
directive|define
name|SSL_F_SSL23_PEEK
value|237
define|#
directive|define
name|SSL_F_SSL23_READ
value|120
define|#
directive|define
name|SSL_F_SSL23_WRITE
value|121
define|#
directive|define
name|SSL_F_SSL2_ACCEPT
value|122
define|#
directive|define
name|SSL_F_SSL2_CONNECT
value|123
define|#
directive|define
name|SSL_F_SSL2_ENC_INIT
value|124
define|#
directive|define
name|SSL_F_SSL2_GENERATE_KEY_MATERIAL
value|241
define|#
directive|define
name|SSL_F_SSL2_PEEK
value|234
define|#
directive|define
name|SSL_F_SSL2_READ
value|125
define|#
directive|define
name|SSL_F_SSL2_READ_INTERNAL
value|236
define|#
directive|define
name|SSL_F_SSL2_SET_CERTIFICATE
value|126
define|#
directive|define
name|SSL_F_SSL2_WRITE
value|127
define|#
directive|define
name|SSL_F_SSL3_ACCEPT
value|128
define|#
directive|define
name|SSL_F_SSL3_ADD_CERT_TO_BUF
value|296
define|#
directive|define
name|SSL_F_SSL3_CALLBACK_CTRL
value|233
define|#
directive|define
name|SSL_F_SSL3_CHANGE_CIPHER_STATE
value|129
define|#
directive|define
name|SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
value|130
define|#
directive|define
name|SSL_F_SSL3_CHECK_CLIENT_HELLO
value|304
define|#
directive|define
name|SSL_F_SSL3_CHECK_FINISHED
value|339
define|#
directive|define
name|SSL_F_SSL3_CLIENT_HELLO
value|131
define|#
directive|define
name|SSL_F_SSL3_CONNECT
value|132
define|#
directive|define
name|SSL_F_SSL3_CTRL
value|213
define|#
directive|define
name|SSL_F_SSL3_CTX_CTRL
value|133
define|#
directive|define
name|SSL_F_SSL3_DIGEST_CACHED_RECORDS
value|293
define|#
directive|define
name|SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
value|292
define|#
directive|define
name|SSL_F_SSL3_ENC
value|134
define|#
directive|define
name|SSL_F_SSL3_GENERATE_KEY_BLOCK
value|238
define|#
directive|define
name|SSL_F_SSL3_GENERATE_MASTER_SECRET
value|388
define|#
directive|define
name|SSL_F_SSL3_GET_CERTIFICATE_REQUEST
value|135
define|#
directive|define
name|SSL_F_SSL3_GET_CERT_STATUS
value|289
define|#
directive|define
name|SSL_F_SSL3_GET_CERT_VERIFY
value|136
define|#
directive|define
name|SSL_F_SSL3_GET_CLIENT_CERTIFICATE
value|137
define|#
directive|define
name|SSL_F_SSL3_GET_CLIENT_HELLO
value|138
define|#
directive|define
name|SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
value|139
define|#
directive|define
name|SSL_F_SSL3_GET_FINISHED
value|140
define|#
directive|define
name|SSL_F_SSL3_GET_KEY_EXCHANGE
value|141
define|#
directive|define
name|SSL_F_SSL3_GET_MESSAGE
value|142
define|#
directive|define
name|SSL_F_SSL3_GET_NEW_SESSION_TICKET
value|283
define|#
directive|define
name|SSL_F_SSL3_GET_NEXT_PROTO
value|306
define|#
directive|define
name|SSL_F_SSL3_GET_RECORD
value|143
define|#
directive|define
name|SSL_F_SSL3_GET_SERVER_CERTIFICATE
value|144
define|#
directive|define
name|SSL_F_SSL3_GET_SERVER_DONE
value|145
define|#
directive|define
name|SSL_F_SSL3_GET_SERVER_HELLO
value|146
define|#
directive|define
name|SSL_F_SSL3_HANDSHAKE_MAC
value|285
define|#
directive|define
name|SSL_F_SSL3_NEW_SESSION_TICKET
value|287
define|#
directive|define
name|SSL_F_SSL3_OUTPUT_CERT_CHAIN
value|147
define|#
directive|define
name|SSL_F_SSL3_PEEK
value|235
define|#
directive|define
name|SSL_F_SSL3_READ_BYTES
value|148
define|#
directive|define
name|SSL_F_SSL3_READ_N
value|149
define|#
directive|define
name|SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
value|150
define|#
directive|define
name|SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
value|151
define|#
directive|define
name|SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
value|152
define|#
directive|define
name|SSL_F_SSL3_SEND_CLIENT_VERIFY
value|153
define|#
directive|define
name|SSL_F_SSL3_SEND_SERVER_CERTIFICATE
value|154
define|#
directive|define
name|SSL_F_SSL3_SEND_SERVER_HELLO
value|242
define|#
directive|define
name|SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
value|155
define|#
directive|define
name|SSL_F_SSL3_SETUP_KEY_BLOCK
value|157
define|#
directive|define
name|SSL_F_SSL3_SETUP_READ_BUFFER
value|156
define|#
directive|define
name|SSL_F_SSL3_SETUP_WRITE_BUFFER
value|291
define|#
directive|define
name|SSL_F_SSL3_WRITE_BYTES
value|158
define|#
directive|define
name|SSL_F_SSL3_WRITE_PENDING
value|159
define|#
directive|define
name|SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
value|298
define|#
directive|define
name|SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
value|277
define|#
directive|define
name|SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
value|307
define|#
directive|define
name|SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
value|215
define|#
directive|define
name|SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
value|216
define|#
directive|define
name|SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
value|299
define|#
directive|define
name|SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
value|278
define|#
directive|define
name|SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
value|308
define|#
directive|define
name|SSL_F_SSL_BAD_METHOD
value|160
define|#
directive|define
name|SSL_F_SSL_BYTES_TO_CIPHER_LIST
value|161
define|#
directive|define
name|SSL_F_SSL_CERT_DUP
value|221
define|#
directive|define
name|SSL_F_SSL_CERT_INST
value|222
define|#
directive|define
name|SSL_F_SSL_CERT_INSTANTIATE
value|214
define|#
directive|define
name|SSL_F_SSL_CERT_NEW
value|162
define|#
directive|define
name|SSL_F_SSL_CHECK_PRIVATE_KEY
value|163
define|#
directive|define
name|SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
value|280
define|#
directive|define
name|SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
value|279
define|#
directive|define
name|SSL_F_SSL_CIPHER_PROCESS_RULESTR
value|230
define|#
directive|define
name|SSL_F_SSL_CIPHER_STRENGTH_SORT
value|231
define|#
directive|define
name|SSL_F_SSL_CLEAR
value|164
define|#
directive|define
name|SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
value|165
define|#
directive|define
name|SSL_F_SSL_CREATE_CIPHER_LIST
value|166
define|#
directive|define
name|SSL_F_SSL_CTRL
value|232
define|#
directive|define
name|SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
value|168
define|#
directive|define
name|SSL_F_SSL_CTX_MAKE_PROFILES
value|309
define|#
directive|define
name|SSL_F_SSL_CTX_NEW
value|169
define|#
directive|define
name|SSL_F_SSL_CTX_SET_CIPHER_LIST
value|269
define|#
directive|define
name|SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
value|290
define|#
directive|define
name|SSL_F_SSL_CTX_SET_PURPOSE
value|226
define|#
directive|define
name|SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
value|219
define|#
directive|define
name|SSL_F_SSL_CTX_SET_SSL_VERSION
value|170
define|#
directive|define
name|SSL_F_SSL_CTX_SET_TRUST
value|229
define|#
directive|define
name|SSL_F_SSL_CTX_USE_CERTIFICATE
value|171
define|#
directive|define
name|SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
value|172
define|#
directive|define
name|SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
value|220
define|#
directive|define
name|SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
value|173
define|#
directive|define
name|SSL_F_SSL_CTX_USE_PRIVATEKEY
value|174
define|#
directive|define
name|SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
value|175
define|#
directive|define
name|SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
value|176
define|#
directive|define
name|SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
value|272
define|#
directive|define
name|SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
value|177
define|#
directive|define
name|SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
value|178
define|#
directive|define
name|SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
value|179
define|#
directive|define
name|SSL_F_SSL_DO_HANDSHAKE
value|180
define|#
directive|define
name|SSL_F_SSL_GET_NEW_SESSION
value|181
define|#
directive|define
name|SSL_F_SSL_GET_PREV_SESSION
value|217
define|#
directive|define
name|SSL_F_SSL_GET_SERVER_SEND_CERT
value|182
define|#
directive|define
name|SSL_F_SSL_GET_SERVER_SEND_PKEY
value|317
define|#
directive|define
name|SSL_F_SSL_GET_SIGN_PKEY
value|183
define|#
directive|define
name|SSL_F_SSL_INIT_WBIO_BUFFER
value|184
define|#
directive|define
name|SSL_F_SSL_LOAD_CLIENT_CA_FILE
value|185
define|#
directive|define
name|SSL_F_SSL_NEW
value|186
define|#
directive|define
name|SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
value|300
define|#
directive|define
name|SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
value|302
define|#
directive|define
name|SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
value|310
define|#
directive|define
name|SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
value|301
define|#
directive|define
name|SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
value|303
define|#
directive|define
name|SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
value|311
define|#
directive|define
name|SSL_F_SSL_PEEK
value|270
define|#
directive|define
name|SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
value|281
define|#
directive|define
name|SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
value|282
define|#
directive|define
name|SSL_F_SSL_READ
value|223
define|#
directive|define
name|SSL_F_SSL_RSA_PRIVATE_DECRYPT
value|187
define|#
directive|define
name|SSL_F_SSL_RSA_PUBLIC_ENCRYPT
value|188
define|#
directive|define
name|SSL_F_SSL_SESSION_DUP
value|348
define|#
directive|define
name|SSL_F_SSL_SESSION_NEW
value|189
define|#
directive|define
name|SSL_F_SSL_SESSION_PRINT_FP
value|190
define|#
directive|define
name|SSL_F_SSL_SESSION_SET1_ID_CONTEXT
value|312
define|#
directive|define
name|SSL_F_SSL_SESS_CERT_NEW
value|225
define|#
directive|define
name|SSL_F_SSL_SET_CERT
value|191
define|#
directive|define
name|SSL_F_SSL_SET_CIPHER_LIST
value|271
define|#
directive|define
name|SSL_F_SSL_SET_FD
value|192
define|#
directive|define
name|SSL_F_SSL_SET_PKEY
value|193
define|#
directive|define
name|SSL_F_SSL_SET_PURPOSE
value|227
define|#
directive|define
name|SSL_F_SSL_SET_RFD
value|194
define|#
directive|define
name|SSL_F_SSL_SET_SESSION
value|195
define|#
directive|define
name|SSL_F_SSL_SET_SESSION_ID_CONTEXT
value|218
define|#
directive|define
name|SSL_F_SSL_SET_SESSION_TICKET_EXT
value|294
define|#
directive|define
name|SSL_F_SSL_SET_TRUST
value|228
define|#
directive|define
name|SSL_F_SSL_SET_WFD
value|196
define|#
directive|define
name|SSL_F_SSL_SHUTDOWN
value|224
define|#
directive|define
name|SSL_F_SSL_SRP_CTX_INIT
value|313
define|#
directive|define
name|SSL_F_SSL_UNDEFINED_CONST_FUNCTION
value|243
define|#
directive|define
name|SSL_F_SSL_UNDEFINED_FUNCTION
value|197
define|#
directive|define
name|SSL_F_SSL_UNDEFINED_VOID_FUNCTION
value|244
define|#
directive|define
name|SSL_F_SSL_USE_CERTIFICATE
value|198
define|#
directive|define
name|SSL_F_SSL_USE_CERTIFICATE_ASN1
value|199
define|#
directive|define
name|SSL_F_SSL_USE_CERTIFICATE_FILE
value|200
define|#
directive|define
name|SSL_F_SSL_USE_PRIVATEKEY
value|201
define|#
directive|define
name|SSL_F_SSL_USE_PRIVATEKEY_ASN1
value|202
define|#
directive|define
name|SSL_F_SSL_USE_PRIVATEKEY_FILE
value|203
define|#
directive|define
name|SSL_F_SSL_USE_PSK_IDENTITY_HINT
value|273
define|#
directive|define
name|SSL_F_SSL_USE_RSAPRIVATEKEY
value|204
define|#
directive|define
name|SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
value|205
define|#
directive|define
name|SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
value|206
define|#
directive|define
name|SSL_F_SSL_VERIFY_CERT_CHAIN
value|207
define|#
directive|define
name|SSL_F_SSL_WRITE
value|208
define|#
directive|define
name|SSL_F_TLS1_CERT_VERIFY_MAC
value|286
define|#
directive|define
name|SSL_F_TLS1_CHANGE_CIPHER_STATE
value|209
define|#
directive|define
name|SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
value|274
define|#
directive|define
name|SSL_F_TLS1_ENC
value|210
define|#
directive|define
name|SSL_F_TLS1_EXPORT_KEYING_MATERIAL
value|314
define|#
directive|define
name|SSL_F_TLS1_HEARTBEAT
value|315
define|#
directive|define
name|SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
value|275
define|#
directive|define
name|SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
value|276
define|#
directive|define
name|SSL_F_TLS1_PRF
value|284
define|#
directive|define
name|SSL_F_TLS1_SETUP_KEY_BLOCK
value|211
define|#
directive|define
name|SSL_F_WRITE_PENDING
value|212
comment|/* Reason codes. */
define|#
directive|define
name|SSL_R_APP_DATA_IN_HANDSHAKE
value|100
define|#
directive|define
name|SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
value|272
define|#
directive|define
name|SSL_R_BAD_ALERT_RECORD
value|101
define|#
directive|define
name|SSL_R_BAD_AUTHENTICATION_TYPE
value|102
define|#
directive|define
name|SSL_R_BAD_CHANGE_CIPHER_SPEC
value|103
define|#
directive|define
name|SSL_R_BAD_CHECKSUM
value|104
define|#
directive|define
name|SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
value|106
define|#
directive|define
name|SSL_R_BAD_DECOMPRESSION
value|107
define|#
directive|define
name|SSL_R_BAD_DH_G_LENGTH
value|108
define|#
directive|define
name|SSL_R_BAD_DH_G_VALUE
value|375
define|#
directive|define
name|SSL_R_BAD_DH_PUB_KEY_LENGTH
value|109
define|#
directive|define
name|SSL_R_BAD_DH_PUB_KEY_VALUE
value|393
define|#
directive|define
name|SSL_R_BAD_DH_P_LENGTH
value|110
define|#
directive|define
name|SSL_R_BAD_DH_P_VALUE
value|395
define|#
directive|define
name|SSL_R_BAD_DIGEST_LENGTH
value|111
define|#
directive|define
name|SSL_R_BAD_DSA_SIGNATURE
value|112
define|#
directive|define
name|SSL_R_BAD_ECC_CERT
value|304
define|#
directive|define
name|SSL_R_BAD_ECDSA_SIGNATURE
value|305
define|#
directive|define
name|SSL_R_BAD_ECPOINT
value|306
define|#
directive|define
name|SSL_R_BAD_HANDSHAKE_LENGTH
value|332
define|#
directive|define
name|SSL_R_BAD_HELLO_REQUEST
value|105
define|#
directive|define
name|SSL_R_BAD_LENGTH
value|271
define|#
directive|define
name|SSL_R_BAD_MAC_DECODE
value|113
define|#
directive|define
name|SSL_R_BAD_MAC_LENGTH
value|333
define|#
directive|define
name|SSL_R_BAD_MESSAGE_TYPE
value|114
define|#
directive|define
name|SSL_R_BAD_PACKET_LENGTH
value|115
define|#
directive|define
name|SSL_R_BAD_PROTOCOL_VERSION_NUMBER
value|116
define|#
directive|define
name|SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
value|316
define|#
directive|define
name|SSL_R_BAD_RESPONSE_ARGUMENT
value|117
define|#
directive|define
name|SSL_R_BAD_RSA_DECRYPT
value|118
define|#
directive|define
name|SSL_R_BAD_RSA_ENCRYPT
value|119
define|#
directive|define
name|SSL_R_BAD_RSA_E_LENGTH
value|120
define|#
directive|define
name|SSL_R_BAD_RSA_MODULUS_LENGTH
value|121
define|#
directive|define
name|SSL_R_BAD_RSA_SIGNATURE
value|122
define|#
directive|define
name|SSL_R_BAD_SIGNATURE
value|123
define|#
directive|define
name|SSL_R_BAD_SRP_A_LENGTH
value|347
define|#
directive|define
name|SSL_R_BAD_SRP_B_LENGTH
value|348
define|#
directive|define
name|SSL_R_BAD_SRP_G_LENGTH
value|349
define|#
directive|define
name|SSL_R_BAD_SRP_N_LENGTH
value|350
define|#
directive|define
name|SSL_R_BAD_SRP_PARAMETERS
value|371
define|#
directive|define
name|SSL_R_BAD_SRP_S_LENGTH
value|351
define|#
directive|define
name|SSL_R_BAD_SRTP_MKI_VALUE
value|352
define|#
directive|define
name|SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
value|353
define|#
directive|define
name|SSL_R_BAD_SSL_FILETYPE
value|124
define|#
directive|define
name|SSL_R_BAD_SSL_SESSION_ID_LENGTH
value|125
define|#
directive|define
name|SSL_R_BAD_STATE
value|126
define|#
directive|define
name|SSL_R_BAD_WRITE_RETRY
value|127
define|#
directive|define
name|SSL_R_BIO_NOT_SET
value|128
define|#
directive|define
name|SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
value|129
define|#
directive|define
name|SSL_R_BN_LIB
value|130
define|#
directive|define
name|SSL_R_CA_DN_LENGTH_MISMATCH
value|131
define|#
directive|define
name|SSL_R_CA_DN_TOO_LONG
value|132
define|#
directive|define
name|SSL_R_CCS_RECEIVED_EARLY
value|133
define|#
directive|define
name|SSL_R_CERTIFICATE_VERIFY_FAILED
value|134
define|#
directive|define
name|SSL_R_CERT_LENGTH_MISMATCH
value|135
define|#
directive|define
name|SSL_R_CHALLENGE_IS_DIFFERENT
value|136
define|#
directive|define
name|SSL_R_CIPHER_CODE_WRONG_LENGTH
value|137
define|#
directive|define
name|SSL_R_CIPHER_OR_HASH_UNAVAILABLE
value|138
define|#
directive|define
name|SSL_R_CIPHER_TABLE_SRC_ERROR
value|139
define|#
directive|define
name|SSL_R_CLIENTHELLO_TLSEXT
value|226
define|#
directive|define
name|SSL_R_COMPRESSED_LENGTH_TOO_LONG
value|140
define|#
directive|define
name|SSL_R_COMPRESSION_DISABLED
value|343
define|#
directive|define
name|SSL_R_COMPRESSION_FAILURE
value|141
define|#
directive|define
name|SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
value|307
define|#
directive|define
name|SSL_R_COMPRESSION_LIBRARY_ERROR
value|142
define|#
directive|define
name|SSL_R_CONNECTION_ID_IS_DIFFERENT
value|143
define|#
directive|define
name|SSL_R_CONNECTION_TYPE_NOT_SET
value|144
define|#
directive|define
name|SSL_R_COOKIE_MISMATCH
value|308
define|#
directive|define
name|SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
value|145
define|#
directive|define
name|SSL_R_DATA_LENGTH_TOO_LONG
value|146
define|#
directive|define
name|SSL_R_DECRYPTION_FAILED
value|147
define|#
directive|define
name|SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
value|281
define|#
directive|define
name|SSL_R_DH_KEY_TOO_SMALL
value|372
define|#
directive|define
name|SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
value|148
define|#
directive|define
name|SSL_R_DIGEST_CHECK_FAILED
value|149
define|#
directive|define
name|SSL_R_DTLS_MESSAGE_TOO_BIG
value|334
define|#
directive|define
name|SSL_R_DUPLICATE_COMPRESSION_ID
value|309
define|#
directive|define
name|SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
value|317
define|#
directive|define
name|SSL_R_ECC_CERT_NOT_FOR_SIGNING
value|318
define|#
directive|define
name|SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
value|322
define|#
directive|define
name|SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
value|323
define|#
directive|define
name|SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
value|310
define|#
directive|define
name|SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
value|354
define|#
directive|define
name|SSL_R_ENCRYPTED_LENGTH_TOO_LONG
value|150
define|#
directive|define
name|SSL_R_ERROR_GENERATING_TMP_RSA_KEY
value|282
define|#
directive|define
name|SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
value|151
define|#
directive|define
name|SSL_R_EXCESSIVE_MESSAGE_SIZE
value|152
define|#
directive|define
name|SSL_R_EXTRA_DATA_IN_MESSAGE
value|153
define|#
directive|define
name|SSL_R_GOT_A_FIN_BEFORE_A_CCS
value|154
define|#
directive|define
name|SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
value|355
define|#
directive|define
name|SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
value|356
define|#
directive|define
name|SSL_R_HTTPS_PROXY_REQUEST
value|155
define|#
directive|define
name|SSL_R_HTTP_REQUEST
value|156
define|#
directive|define
name|SSL_R_ILLEGAL_PADDING
value|283
define|#
directive|define
name|SSL_R_INAPPROPRIATE_FALLBACK
value|373
define|#
directive|define
name|SSL_R_INCONSISTENT_COMPRESSION
value|340
define|#
directive|define
name|SSL_R_INVALID_CHALLENGE_LENGTH
value|158
define|#
directive|define
name|SSL_R_INVALID_COMMAND
value|280
define|#
directive|define
name|SSL_R_INVALID_COMPRESSION_ALGORITHM
value|341
define|#
directive|define
name|SSL_R_INVALID_PURPOSE
value|278
define|#
directive|define
name|SSL_R_INVALID_SRP_USERNAME
value|357
define|#
directive|define
name|SSL_R_INVALID_STATUS_RESPONSE
value|328
define|#
directive|define
name|SSL_R_INVALID_TICKET_KEYS_LENGTH
value|325
define|#
directive|define
name|SSL_R_INVALID_TRUST
value|279
define|#
directive|define
name|SSL_R_KEY_ARG_TOO_LONG
value|284
define|#
directive|define
name|SSL_R_KRB5
value|285
define|#
directive|define
name|SSL_R_KRB5_C_CC_PRINC
value|286
define|#
directive|define
name|SSL_R_KRB5_C_GET_CRED
value|287
define|#
directive|define
name|SSL_R_KRB5_C_INIT
value|288
define|#
directive|define
name|SSL_R_KRB5_C_MK_REQ
value|289
define|#
directive|define
name|SSL_R_KRB5_S_BAD_TICKET
value|290
define|#
directive|define
name|SSL_R_KRB5_S_INIT
value|291
define|#
directive|define
name|SSL_R_KRB5_S_RD_REQ
value|292
define|#
directive|define
name|SSL_R_KRB5_S_TKT_EXPIRED
value|293
define|#
directive|define
name|SSL_R_KRB5_S_TKT_NYV
value|294
define|#
directive|define
name|SSL_R_KRB5_S_TKT_SKEW
value|295
define|#
directive|define
name|SSL_R_LENGTH_MISMATCH
value|159
define|#
directive|define
name|SSL_R_LENGTH_TOO_SHORT
value|160
define|#
directive|define
name|SSL_R_LIBRARY_BUG
value|274
define|#
directive|define
name|SSL_R_LIBRARY_HAS_NO_CIPHERS
value|161
define|#
directive|define
name|SSL_R_MESSAGE_TOO_LONG
value|296
define|#
directive|define
name|SSL_R_MISSING_DH_DSA_CERT
value|162
define|#
directive|define
name|SSL_R_MISSING_DH_KEY
value|163
define|#
directive|define
name|SSL_R_MISSING_DH_RSA_CERT
value|164
define|#
directive|define
name|SSL_R_MISSING_DSA_SIGNING_CERT
value|165
define|#
directive|define
name|SSL_R_MISSING_EXPORT_TMP_DH_KEY
value|166
define|#
directive|define
name|SSL_R_MISSING_EXPORT_TMP_RSA_KEY
value|167
define|#
directive|define
name|SSL_R_MISSING_RSA_CERTIFICATE
value|168
define|#
directive|define
name|SSL_R_MISSING_RSA_ENCRYPTING_CERT
value|169
define|#
directive|define
name|SSL_R_MISSING_RSA_SIGNING_CERT
value|170
define|#
directive|define
name|SSL_R_MISSING_SRP_PARAM
value|358
define|#
directive|define
name|SSL_R_MISSING_TMP_DH_KEY
value|171
define|#
directive|define
name|SSL_R_MISSING_TMP_ECDH_KEY
value|311
define|#
directive|define
name|SSL_R_MISSING_TMP_RSA_KEY
value|172
define|#
directive|define
name|SSL_R_MISSING_TMP_RSA_PKEY
value|173
define|#
directive|define
name|SSL_R_MISSING_VERIFY_MESSAGE
value|174
define|#
directive|define
name|SSL_R_MULTIPLE_SGC_RESTARTS
value|346
define|#
directive|define
name|SSL_R_NON_SSLV2_INITIAL_PACKET
value|175
define|#
directive|define
name|SSL_R_NO_CERTIFICATES_RETURNED
value|176
define|#
directive|define
name|SSL_R_NO_CERTIFICATE_ASSIGNED
value|177
define|#
directive|define
name|SSL_R_NO_CERTIFICATE_RETURNED
value|178
define|#
directive|define
name|SSL_R_NO_CERTIFICATE_SET
value|179
define|#
directive|define
name|SSL_R_NO_CERTIFICATE_SPECIFIED
value|180
define|#
directive|define
name|SSL_R_NO_CIPHERS_AVAILABLE
value|181
define|#
directive|define
name|SSL_R_NO_CIPHERS_PASSED
value|182
define|#
directive|define
name|SSL_R_NO_CIPHERS_SPECIFIED
value|183
define|#
directive|define
name|SSL_R_NO_CIPHER_LIST
value|184
define|#
directive|define
name|SSL_R_NO_CIPHER_MATCH
value|185
define|#
directive|define
name|SSL_R_NO_CLIENT_CERT_METHOD
value|331
define|#
directive|define
name|SSL_R_NO_CLIENT_CERT_RECEIVED
value|186
define|#
directive|define
name|SSL_R_NO_COMPRESSION_SPECIFIED
value|187
define|#
directive|define
name|SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
value|330
define|#
directive|define
name|SSL_R_NO_METHOD_SPECIFIED
value|188
define|#
directive|define
name|SSL_R_NO_PRIVATEKEY
value|189
define|#
directive|define
name|SSL_R_NO_PRIVATE_KEY_ASSIGNED
value|190
define|#
directive|define
name|SSL_R_NO_PROTOCOLS_AVAILABLE
value|191
define|#
directive|define
name|SSL_R_NO_PUBLICKEY
value|192
define|#
directive|define
name|SSL_R_NO_RENEGOTIATION
value|339
define|#
directive|define
name|SSL_R_NO_REQUIRED_DIGEST
value|324
define|#
directive|define
name|SSL_R_NO_SHARED_CIPHER
value|193
define|#
directive|define
name|SSL_R_NO_SRTP_PROFILES
value|359
define|#
directive|define
name|SSL_R_NO_VERIFY_CALLBACK
value|194
define|#
directive|define
name|SSL_R_NULL_SSL_CTX
value|195
define|#
directive|define
name|SSL_R_NULL_SSL_METHOD_PASSED
value|196
define|#
directive|define
name|SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
value|197
define|#
directive|define
name|SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
value|344
define|#
directive|define
name|SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
value|297
define|#
directive|define
name|SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
value|327
define|#
directive|define
name|SSL_R_PACKET_LENGTH_TOO_LONG
value|198
define|#
directive|define
name|SSL_R_PARSE_TLSEXT
value|227
define|#
directive|define
name|SSL_R_PATH_TOO_LONG
value|270
define|#
directive|define
name|SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
value|199
define|#
directive|define
name|SSL_R_PEER_ERROR
value|200
define|#
directive|define
name|SSL_R_PEER_ERROR_CERTIFICATE
value|201
define|#
directive|define
name|SSL_R_PEER_ERROR_NO_CERTIFICATE
value|202
define|#
directive|define
name|SSL_R_PEER_ERROR_NO_CIPHER
value|203
define|#
directive|define
name|SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
value|204
define|#
directive|define
name|SSL_R_PRE_MAC_LENGTH_TOO_LONG
value|205
define|#
directive|define
name|SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
value|206
define|#
directive|define
name|SSL_R_PROTOCOL_IS_SHUTDOWN
value|207
define|#
directive|define
name|SSL_R_PSK_IDENTITY_NOT_FOUND
value|223
define|#
directive|define
name|SSL_R_PSK_NO_CLIENT_CB
value|224
define|#
directive|define
name|SSL_R_PSK_NO_SERVER_CB
value|225
define|#
directive|define
name|SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
value|208
define|#
directive|define
name|SSL_R_PUBLIC_KEY_IS_NOT_RSA
value|209
define|#
directive|define
name|SSL_R_PUBLIC_KEY_NOT_RSA
value|210
define|#
directive|define
name|SSL_R_READ_BIO_NOT_SET
value|211
define|#
directive|define
name|SSL_R_READ_TIMEOUT_EXPIRED
value|312
define|#
directive|define
name|SSL_R_READ_WRONG_PACKET_TYPE
value|212
define|#
directive|define
name|SSL_R_RECORD_LENGTH_MISMATCH
value|213
define|#
directive|define
name|SSL_R_RECORD_TOO_LARGE
value|214
define|#
directive|define
name|SSL_R_RECORD_TOO_SMALL
value|298
define|#
directive|define
name|SSL_R_RENEGOTIATE_EXT_TOO_LONG
value|335
define|#
directive|define
name|SSL_R_RENEGOTIATION_ENCODING_ERR
value|336
define|#
directive|define
name|SSL_R_RENEGOTIATION_MISMATCH
value|337
define|#
directive|define
name|SSL_R_REQUIRED_CIPHER_MISSING
value|215
define|#
directive|define
name|SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
value|342
define|#
directive|define
name|SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
value|216
define|#
directive|define
name|SSL_R_REUSE_CERT_TYPE_NOT_ZERO
value|217
define|#
directive|define
name|SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
value|218
define|#
directive|define
name|SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
value|345
define|#
directive|define
name|SSL_R_SERVERHELLO_TLSEXT
value|275
define|#
directive|define
name|SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
value|277
define|#
directive|define
name|SSL_R_SHORT_READ
value|219
define|#
directive|define
name|SSL_R_SIGNATURE_ALGORITHMS_ERROR
value|360
define|#
directive|define
name|SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
value|220
define|#
directive|define
name|SSL_R_SRP_A_CALC
value|361
define|#
directive|define
name|SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
value|362
define|#
directive|define
name|SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
value|363
define|#
directive|define
name|SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
value|364
define|#
directive|define
name|SSL_R_SSL23_DOING_SESSION_ID_REUSE
value|221
define|#
directive|define
name|SSL_R_SSL2_CONNECTION_ID_TOO_LONG
value|299
define|#
directive|define
name|SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
value|321
define|#
directive|define
name|SSL_R_SSL3_EXT_INVALID_SERVERNAME
value|319
define|#
directive|define
name|SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
value|320
define|#
directive|define
name|SSL_R_SSL3_SESSION_ID_TOO_LONG
value|300
define|#
directive|define
name|SSL_R_SSL3_SESSION_ID_TOO_SHORT
value|222
define|#
directive|define
name|SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
value|1042
define|#
directive|define
name|SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
value|1020
define|#
directive|define
name|SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
value|1045
define|#
directive|define
name|SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
value|1044
define|#
directive|define
name|SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
value|1046
define|#
directive|define
name|SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
value|1030
define|#
directive|define
name|SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
value|1040
define|#
directive|define
name|SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
value|1047
define|#
directive|define
name|SSL_R_SSLV3_ALERT_NO_CERTIFICATE
value|1041
define|#
directive|define
name|SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
value|1010
define|#
directive|define
name|SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
value|1043
define|#
directive|define
name|SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
value|228
define|#
directive|define
name|SSL_R_SSL_HANDSHAKE_FAILURE
value|229
define|#
directive|define
name|SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
value|230
define|#
directive|define
name|SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
value|301
define|#
directive|define
name|SSL_R_SSL_SESSION_ID_CONFLICT
value|302
define|#
directive|define
name|SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
value|273
define|#
directive|define
name|SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
value|303
define|#
directive|define
name|SSL_R_SSL_SESSION_ID_IS_DIFFERENT
value|231
define|#
directive|define
name|SSL_R_TLSV1_ALERT_ACCESS_DENIED
value|1049
define|#
directive|define
name|SSL_R_TLSV1_ALERT_DECODE_ERROR
value|1050
define|#
directive|define
name|SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
value|1021
define|#
directive|define
name|SSL_R_TLSV1_ALERT_DECRYPT_ERROR
value|1051
define|#
directive|define
name|SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
value|1060
define|#
directive|define
name|SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
value|1086
define|#
directive|define
name|SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
value|1071
define|#
directive|define
name|SSL_R_TLSV1_ALERT_INTERNAL_ERROR
value|1080
define|#
directive|define
name|SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
value|1100
define|#
directive|define
name|SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
value|1070
define|#
directive|define
name|SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
value|1022
define|#
directive|define
name|SSL_R_TLSV1_ALERT_UNKNOWN_CA
value|1048
define|#
directive|define
name|SSL_R_TLSV1_ALERT_USER_CANCELLED
value|1090
define|#
directive|define
name|SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
value|1114
define|#
directive|define
name|SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
value|1113
define|#
directive|define
name|SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
value|1111
define|#
directive|define
name|SSL_R_TLSV1_UNRECOGNIZED_NAME
value|1112
define|#
directive|define
name|SSL_R_TLSV1_UNSUPPORTED_EXTENSION
value|1110
define|#
directive|define
name|SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
value|232
define|#
directive|define
name|SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
value|365
define|#
directive|define
name|SSL_R_TLS_HEARTBEAT_PENDING
value|366
define|#
directive|define
name|SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
value|367
define|#
directive|define
name|SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
value|157
define|#
directive|define
name|SSL_R_TOO_MANY_WARN_ALERTS
value|409
define|#
directive|define
name|SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
value|233
define|#
directive|define
name|SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
value|234
define|#
directive|define
name|SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
value|235
define|#
directive|define
name|SSL_R_UNABLE_TO_DECODE_DH_CERTS
value|236
define|#
directive|define
name|SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
value|313
define|#
directive|define
name|SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
value|237
define|#
directive|define
name|SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
value|238
define|#
directive|define
name|SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
value|314
define|#
directive|define
name|SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
value|239
define|#
directive|define
name|SSL_R_UNABLE_TO_FIND_SSL_METHOD
value|240
define|#
directive|define
name|SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
value|241
define|#
directive|define
name|SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
value|242
define|#
directive|define
name|SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
value|243
define|#
directive|define
name|SSL_R_UNEXPECTED_MESSAGE
value|244
define|#
directive|define
name|SSL_R_UNEXPECTED_RECORD
value|245
define|#
directive|define
name|SSL_R_UNINITIALIZED
value|276
define|#
directive|define
name|SSL_R_UNKNOWN_ALERT_TYPE
value|246
define|#
directive|define
name|SSL_R_UNKNOWN_CERTIFICATE_TYPE
value|247
define|#
directive|define
name|SSL_R_UNKNOWN_CIPHER_RETURNED
value|248
define|#
directive|define
name|SSL_R_UNKNOWN_CIPHER_TYPE
value|249
define|#
directive|define
name|SSL_R_UNKNOWN_DIGEST
value|368
define|#
directive|define
name|SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
value|250
define|#
directive|define
name|SSL_R_UNKNOWN_PKEY_TYPE
value|251
define|#
directive|define
name|SSL_R_UNKNOWN_PROTOCOL
value|252
define|#
directive|define
name|SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
value|253
define|#
directive|define
name|SSL_R_UNKNOWN_SSL_VERSION
value|254
define|#
directive|define
name|SSL_R_UNKNOWN_STATE
value|255
define|#
directive|define
name|SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
value|338
define|#
directive|define
name|SSL_R_UNSUPPORTED_CIPHER
value|256
define|#
directive|define
name|SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
value|257
define|#
directive|define
name|SSL_R_UNSUPPORTED_DIGEST_TYPE
value|326
define|#
directive|define
name|SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
value|315
define|#
directive|define
name|SSL_R_UNSUPPORTED_PROTOCOL
value|258
define|#
directive|define
name|SSL_R_UNSUPPORTED_SSL_VERSION
value|259
define|#
directive|define
name|SSL_R_UNSUPPORTED_STATUS_TYPE
value|329
define|#
directive|define
name|SSL_R_USE_SRTP_NOT_NEGOTIATED
value|369
define|#
directive|define
name|SSL_R_WRITE_BIO_NOT_SET
value|260
define|#
directive|define
name|SSL_R_WRONG_CIPHER_RETURNED
value|261
define|#
directive|define
name|SSL_R_WRONG_MESSAGE_TYPE
value|262
define|#
directive|define
name|SSL_R_WRONG_NUMBER_OF_KEY_BITS
value|263
define|#
directive|define
name|SSL_R_WRONG_SIGNATURE_LENGTH
value|264
define|#
directive|define
name|SSL_R_WRONG_SIGNATURE_SIZE
value|265
define|#
directive|define
name|SSL_R_WRONG_SIGNATURE_TYPE
value|370
define|#
directive|define
name|SSL_R_WRONG_SSL_VERSION
value|266
define|#
directive|define
name|SSL_R_WRONG_VERSION_NUMBER
value|267
define|#
directive|define
name|SSL_R_X509_LIB
value|268
define|#
directive|define
name|SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
value|269
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

