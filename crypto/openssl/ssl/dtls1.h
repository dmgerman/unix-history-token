begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ssl/dtls1.h */
end_comment

begin_comment
comment|/*   * DTLS implementation written by Nagendra Modadugu  * (nagendra@cs.stanford.edu) for the OpenSSL project 2005.    */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1999-2005 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@OpenSSL.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_DTLS1_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_DTLS1_H
end_define

begin_include
include|#
directive|include
file|<openssl/buffer.h>
end_include

begin_include
include|#
directive|include
file|<openssl/pqueue.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_SYS_VMS
end_ifdef

begin_include
include|#
directive|include
file|<resource.h>
end_include

begin_include
include|#
directive|include
file|<sys/timeb.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_SYS_WIN32
end_ifdef

begin_comment
comment|/* Needed for struct timeval */
end_comment

begin_include
include|#
directive|include
file|<winsock.h>
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|OPENSSL_SYS_NETWARE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_WINSOCK2API_
argument_list|)
end_elif

begin_include
include|#
directive|include
file|<sys/timeval.h>
end_include

begin_else
else|#
directive|else
end_else

begin_if
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYS_VXWORKS
argument_list|)
end_if

begin_include
include|#
directive|include
file|<sys/times.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|DTLS1_VERSION
value|0xFEFF
define|#
directive|define
name|DTLS_MAX_VERSION
value|DTLS1_VERSION
define|#
directive|define
name|DTLS1_BAD_VER
value|0x0100
if|#
directive|if
literal|0
comment|/* this alert description is not specified anywhere... */
define|#
directive|define
name|DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
value|110
endif|#
directive|endif
comment|/* lengths of messages */
define|#
directive|define
name|DTLS1_COOKIE_LENGTH
value|256
define|#
directive|define
name|DTLS1_RT_HEADER_LENGTH
value|13
define|#
directive|define
name|DTLS1_HM_HEADER_LENGTH
value|12
define|#
directive|define
name|DTLS1_HM_BAD_FRAGMENT
value|-2
define|#
directive|define
name|DTLS1_HM_FRAGMENT_RETRY
value|-3
define|#
directive|define
name|DTLS1_CCS_HEADER_LENGTH
value|1
ifdef|#
directive|ifdef
name|DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
define|#
directive|define
name|DTLS1_AL_HEADER_LENGTH
value|7
else|#
directive|else
define|#
directive|define
name|DTLS1_AL_HEADER_LENGTH
value|2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL_INTERN
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
define|#
directive|define
name|DTLS1_SCTP_AUTH_LABEL
value|"EXPORTER_DTLS_OVER_SCTP"
endif|#
directive|endif
typedef|typedef
struct|struct
name|dtls1_bitmap_st
block|{
name|unsigned
name|long
name|map
decl_stmt|;
comment|/* track 32 packets on 32-bit systems 					   and 64 - on 64-bit systems */
name|unsigned
name|char
name|max_seq_num
index|[
literal|8
index|]
decl_stmt|;
comment|/* max record number seen so far, 					   64-bit value in big-endian 					   encoding */
block|}
name|DTLS1_BITMAP
typedef|;
struct|struct
name|dtls1_retransmit_state
block|{
name|EVP_CIPHER_CTX
modifier|*
name|enc_write_ctx
decl_stmt|;
comment|/* cryptographic state */
name|EVP_MD_CTX
modifier|*
name|write_hash
decl_stmt|;
comment|/* used for mac generation */
ifndef|#
directive|ifndef
name|OPENSSL_NO_COMP
name|COMP_CTX
modifier|*
name|compress
decl_stmt|;
comment|/* compression */
else|#
directive|else
name|char
modifier|*
name|compress
decl_stmt|;
endif|#
directive|endif
name|SSL_SESSION
modifier|*
name|session
decl_stmt|;
name|unsigned
name|short
name|epoch
decl_stmt|;
block|}
struct|;
struct|struct
name|hm_header_st
block|{
name|unsigned
name|char
name|type
decl_stmt|;
name|unsigned
name|long
name|msg_len
decl_stmt|;
name|unsigned
name|short
name|seq
decl_stmt|;
name|unsigned
name|long
name|frag_off
decl_stmt|;
name|unsigned
name|long
name|frag_len
decl_stmt|;
name|unsigned
name|int
name|is_ccs
decl_stmt|;
name|struct
name|dtls1_retransmit_state
name|saved_retransmit_state
decl_stmt|;
block|}
struct|;
struct|struct
name|ccs_header_st
block|{
name|unsigned
name|char
name|type
decl_stmt|;
name|unsigned
name|short
name|seq
decl_stmt|;
block|}
struct|;
struct|struct
name|dtls1_timeout_st
block|{
comment|/* Number of read timeouts so far */
name|unsigned
name|int
name|read_timeouts
decl_stmt|;
comment|/* Number of write timeouts so far */
name|unsigned
name|int
name|write_timeouts
decl_stmt|;
comment|/* Number of alerts received so far */
name|unsigned
name|int
name|num_alerts
decl_stmt|;
block|}
struct|;
typedef|typedef
struct|struct
name|record_pqueue_st
block|{
name|unsigned
name|short
name|epoch
decl_stmt|;
name|pqueue
name|q
decl_stmt|;
block|}
name|record_pqueue
typedef|;
typedef|typedef
struct|struct
name|hm_fragment_st
block|{
name|struct
name|hm_header_st
name|msg_header
decl_stmt|;
name|unsigned
name|char
modifier|*
name|fragment
decl_stmt|;
name|unsigned
name|char
modifier|*
name|reassembly
decl_stmt|;
block|}
name|hm_fragment
typedef|;
typedef|typedef
struct|struct
name|dtls1_state_st
block|{
name|unsigned
name|int
name|send_cookie
decl_stmt|;
name|unsigned
name|char
name|cookie
index|[
name|DTLS1_COOKIE_LENGTH
index|]
decl_stmt|;
name|unsigned
name|char
name|rcvd_cookie
index|[
name|DTLS1_COOKIE_LENGTH
index|]
decl_stmt|;
name|unsigned
name|int
name|cookie_len
decl_stmt|;
comment|/*  	 * The current data and handshake epoch.  This is initially 	 * undefined, and starts at zero once the initial handshake is 	 * completed  	 */
name|unsigned
name|short
name|r_epoch
decl_stmt|;
name|unsigned
name|short
name|w_epoch
decl_stmt|;
comment|/* records being received in the current epoch */
name|DTLS1_BITMAP
name|bitmap
decl_stmt|;
comment|/* renegotiation starts a new set of sequence numbers */
name|DTLS1_BITMAP
name|next_bitmap
decl_stmt|;
comment|/* handshake message numbers */
name|unsigned
name|short
name|handshake_write_seq
decl_stmt|;
name|unsigned
name|short
name|next_handshake_write_seq
decl_stmt|;
name|unsigned
name|short
name|handshake_read_seq
decl_stmt|;
comment|/* save last sequence number for retransmissions */
name|unsigned
name|char
name|last_write_sequence
index|[
literal|8
index|]
decl_stmt|;
comment|/* Received handshake records (processed and unprocessed) */
name|record_pqueue
name|unprocessed_rcds
decl_stmt|;
name|record_pqueue
name|processed_rcds
decl_stmt|;
comment|/* Buffered handshake messages */
name|pqueue
name|buffered_messages
decl_stmt|;
comment|/* Buffered (sent) handshake records */
name|pqueue
name|sent_messages
decl_stmt|;
comment|/* Buffered application records. 	 * Only for records between CCS and Finished 	 * to prevent either protocol violation or 	 * unnecessary message loss. 	 */
name|record_pqueue
name|buffered_app_data
decl_stmt|;
comment|/* Is set when listening for new connections with dtls1_listen() */
name|unsigned
name|int
name|listen
decl_stmt|;
name|unsigned
name|int
name|mtu
decl_stmt|;
comment|/* max DTLS packet size */
name|struct
name|hm_header_st
name|w_msg_hdr
decl_stmt|;
name|struct
name|hm_header_st
name|r_msg_hdr
decl_stmt|;
name|struct
name|dtls1_timeout_st
name|timeout
decl_stmt|;
comment|/* Indicates when the last handshake msg or heartbeat sent will timeout */
name|struct
name|timeval
name|next_timeout
decl_stmt|;
comment|/* Timeout duration */
name|unsigned
name|short
name|timeout_duration
decl_stmt|;
comment|/* storage for Alert/Handshake protocol data received but not 	 * yet processed by ssl3_read_bytes: */
name|unsigned
name|char
name|alert_fragment
index|[
name|DTLS1_AL_HEADER_LENGTH
index|]
decl_stmt|;
name|unsigned
name|int
name|alert_fragment_len
decl_stmt|;
name|unsigned
name|char
name|handshake_fragment
index|[
name|DTLS1_HM_HEADER_LENGTH
index|]
decl_stmt|;
name|unsigned
name|int
name|handshake_fragment_len
decl_stmt|;
name|unsigned
name|int
name|retransmitting
decl_stmt|;
name|unsigned
name|int
name|change_cipher_spec_ok
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
comment|/* used when SSL_ST_XX_FLUSH is entered */
name|int
name|next_state
decl_stmt|;
name|int
name|shutdown_received
decl_stmt|;
endif|#
directive|endif
block|}
name|DTLS1_STATE
typedef|;
typedef|typedef
struct|struct
name|dtls1_record_data_st
block|{
name|unsigned
name|char
modifier|*
name|packet
decl_stmt|;
name|unsigned
name|int
name|packet_length
decl_stmt|;
name|SSL3_BUFFER
name|rbuf
decl_stmt|;
name|SSL3_RECORD
name|rrec
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
name|struct
name|bio_dgram_sctp_rcvinfo
name|recordinfo
decl_stmt|;
endif|#
directive|endif
block|}
name|DTLS1_RECORD_DATA
typedef|;
endif|#
directive|endif
comment|/* Timeout multipliers (timeout slice is defined in apps/timeouts.h */
define|#
directive|define
name|DTLS1_TMO_READ_COUNT
value|2
define|#
directive|define
name|DTLS1_TMO_WRITE_COUNT
value|2
define|#
directive|define
name|DTLS1_TMO_ALERT_COUNT
value|12
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

