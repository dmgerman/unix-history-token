begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* e_os.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_E_OS_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_E_OS_H
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_comment
comment|/*<openssl/e_os2.h> contains what we can justify to make visible  * to the outside; this file e_os.h is not part of the exported  * interface. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Used to checking reference counts, most while doing perl5 stuff :-) */
ifdef|#
directive|ifdef
name|REF_PRINT
undef|#
directive|undef
name|REF_PRINT
define|#
directive|define
name|REF_PRINT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|fprintf(stderr,"%08X:%4d:%s\n",(int)b,b->references,a)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|DEVRANDOM
comment|/* set this to your 'random' device if you have one.  * My default, we will try to read this file */
define|#
directive|define
name|DEVRANDOM
value|"/dev/urandom"
endif|#
directive|endif
comment|/********************************************************************  The Microsoft section  ********************************************************************/
comment|/* The following is used becaue of the small stack in some  * Microsoft operating systems */
if|#
directive|if
name|defined
argument_list|(
name|WIN16
argument_list|)
operator|||
name|defined
argument_list|(
name|MSDOS
argument_list|)
define|#
directive|define
name|MS_STATIC
value|static
else|#
directive|else
define|#
directive|define
name|MS_STATIC
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|WIN16
argument_list|)
ifndef|#
directive|ifndef
name|WINDOWS
define|#
directive|define
name|WINDOWS
endif|#
directive|endif
ifndef|#
directive|ifndef
name|MSDOS
define|#
directive|define
name|MSDOS
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WIN32
define|#
directive|define
name|get_last_sys_error
parameter_list|()
value|GetLastError()
define|#
directive|define
name|clear_sys_error
parameter_list|()
value|SetLastError(0)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|WINNT
argument_list|)
define|#
directive|define
name|WIN_CONSOLE_BUG
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|get_last_sys_error
parameter_list|()
value|errno
define|#
directive|define
name|clear_sys_error
parameter_list|()
value|errno=0
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WINDOWS
define|#
directive|define
name|get_last_socket_error
parameter_list|()
value|WSAGetLastError()
define|#
directive|define
name|clear_socket_error
parameter_list|()
value|WSASetLastError(0)
define|#
directive|define
name|readsocket
parameter_list|(
name|s
parameter_list|,
name|b
parameter_list|,
name|n
parameter_list|)
value|recv((s),(b),(n),0)
define|#
directive|define
name|writesocket
parameter_list|(
name|s
parameter_list|,
name|b
parameter_list|,
name|n
parameter_list|)
value|send((s),(b),(n),0)
define|#
directive|define
name|EADDRINUSE
value|WSAEADDRINUSE
else|#
directive|else
define|#
directive|define
name|get_last_socket_error
parameter_list|()
value|errno
define|#
directive|define
name|clear_socket_error
parameter_list|()
value|errno=0
define|#
directive|define
name|ioctlsocket
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|ioctl(a,b,c)
define|#
directive|define
name|closesocket
parameter_list|(
name|s
parameter_list|)
value|close(s)
define|#
directive|define
name|readsocket
parameter_list|(
name|s
parameter_list|,
name|b
parameter_list|,
name|n
parameter_list|)
value|read((s),(b),(n))
define|#
directive|define
name|writesocket
parameter_list|(
name|s
parameter_list|,
name|b
parameter_list|,
name|n
parameter_list|)
value|write((s),(b),(n))
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WIN16
define|#
directive|define
name|NO_FP_API
define|#
directive|define
name|MS_CALLBACK
value|_far _loadds
define|#
directive|define
name|MS_FAR
value|_far
else|#
directive|else
define|#
directive|define
name|MS_CALLBACK
define|#
directive|define
name|MS_FAR
endif|#
directive|endif
ifdef|#
directive|ifdef
name|NO_STDIO
define|#
directive|define
name|NO_FP_API
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|MSDOS
argument_list|)
ifndef|#
directive|ifndef
name|S_IFDIR
define|#
directive|define
name|S_IFDIR
value|_S_IFDIR
endif|#
directive|endif
ifndef|#
directive|ifndef
name|S_IFMT
define|#
directive|define
name|S_IFMT
value|_S_IFMT
if|#
directive|if
operator|!
name|defined
argument_list|(
name|WINNT
argument_list|)
define|#
directive|define
name|NO_SYSLOG
endif|#
directive|endif
define|#
directive|define
name|NO_DIRENT
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WINDOWS
include|#
directive|include
file|<windows.h>
include|#
directive|include
file|<stddef.h>
include|#
directive|include
file|<errno.h>
include|#
directive|include
file|<string.h>
include|#
directive|include
file|<malloc.h>
endif|#
directive|endif
include|#
directive|include
file|<io.h>
include|#
directive|include
file|<fcntl.h>
if|#
directive|if
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
define|#
directive|define
name|_setmode
value|setmode
define|#
directive|define
name|_O_TEXT
value|O_TEXT
define|#
directive|define
name|_O_BINARY
value|O_BINARY
define|#
directive|define
name|_int64
value|__int64
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|WIN16
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|MONOLITH
argument_list|)
operator|&&
name|defined
argument_list|(
name|SSLEAY
argument_list|)
operator|&&
name|defined
argument_list|(
name|_WINEXITNOPERSIST
argument_list|)
define|#
directive|define
name|EXIT
parameter_list|(
name|n
parameter_list|)
value|{ if (n == 0) _wsetexit(_WINEXITNOPERSIST); return(n); }
else|#
directive|else
define|#
directive|define
name|EXIT
parameter_list|(
name|n
parameter_list|)
value|return(n);
endif|#
directive|endif
define|#
directive|define
name|LIST_SEPARATOR_CHAR
value|';'
ifndef|#
directive|ifndef
name|X_OK
define|#
directive|define
name|X_OK
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|W_OK
define|#
directive|define
name|W_OK
value|2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|R_OK
define|#
directive|define
name|R_OK
value|4
endif|#
directive|endif
define|#
directive|define
name|OPENSSL_CONF
value|"openssl.cnf"
define|#
directive|define
name|SSLEAY_CONF
value|OPENSSL_CONF
define|#
directive|define
name|NUL_DEV
value|"nul"
define|#
directive|define
name|RFILE
value|".rnd"
else|#
directive|else
comment|/* The non-microsoft world world */
if|#
directive|if
name|defined
argument_list|(
name|__VMS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|VMS
argument_list|)
define|#
directive|define
name|VMS
value|1
endif|#
directive|endif
ifdef|#
directive|ifdef
name|VMS
comment|/* some programs don't include stdlib, so exit() and others give implicit       function warnings */
include|#
directive|include
file|<stdlib.h>
if|#
directive|if
name|defined
argument_list|(
name|__DECC
argument_list|)
include|#
directive|include
file|<unistd.h>
else|#
directive|else
include|#
directive|include
file|<unixlib.h>
endif|#
directive|endif
define|#
directive|define
name|OPENSSL_CONF
value|"openssl.cnf"
define|#
directive|define
name|SSLEAY_CONF
value|OPENSSL_CONF
define|#
directive|define
name|RFILE
value|".rnd"
define|#
directive|define
name|LIST_SEPARATOR_CHAR
value|','
define|#
directive|define
name|NUL_DEV
value|"NLA0:"
comment|/* We need to do this, because DEC C converts exit code 0 to 1, but not 1      to 0.  We will convert 1 to 3!  Also, add the inhibit message bit... */
ifndef|#
directive|ifndef
name|MONOLITH
define|#
directive|define
name|EXIT
parameter_list|(
name|n
parameter_list|)
value|do { int __VMS_EXIT = n; \                                      if (__VMS_EXIT == 1) __VMS_EXIT = 3; \                                      __VMS_EXIT |= 0x10000000; \ 				     exit(n); return(n); } while(0)
else|#
directive|else
define|#
directive|define
name|EXIT
parameter_list|(
name|n
parameter_list|)
value|do { int __VMS_EXIT = n; \                                      if (__VMS_EXIT == 1) __VMS_EXIT = 3; \                                      __VMS_EXIT |= 0x10000000; \ 				     return(n); } while(0)
endif|#
directive|endif
else|#
directive|else
comment|/* !defined VMS */
include|#
directive|include
include|OPENSSL_UNISTD
define|#
directive|define
name|OPENSSL_CONF
value|"openssl.cnf"
define|#
directive|define
name|SSLEAY_CONF
value|OPENSSL_CONF
define|#
directive|define
name|RFILE
value|".rnd"
define|#
directive|define
name|LIST_SEPARATOR_CHAR
value|':'
define|#
directive|define
name|NUL_DEV
value|"/dev/null"
ifndef|#
directive|ifndef
name|MONOLITH
define|#
directive|define
name|EXIT
parameter_list|(
name|n
parameter_list|)
value|exit(n); return(n)
else|#
directive|else
define|#
directive|define
name|EXIT
parameter_list|(
name|n
parameter_list|)
value|return(n)
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|SSLeay_getpid
parameter_list|()
value|getpid()
endif|#
directive|endif
comment|/*************/
ifdef|#
directive|ifdef
name|USE_SOCKETS
if|#
directive|if
name|defined
argument_list|(
name|WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|MSDOS
argument_list|)
comment|/* windows world */
ifdef|#
directive|ifdef
name|NO_SOCK
define|#
directive|define
name|SSLeay_Write
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|(-1)
define|#
directive|define
name|SSLeay_Read
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|(-1)
define|#
directive|define
name|SHUTDOWN
parameter_list|(
name|fd
parameter_list|)
value|close(fd)
define|#
directive|define
name|SHUTDOWN2
parameter_list|(
name|fd
parameter_list|)
value|close(fd)
else|#
directive|else
include|#
directive|include
file|<winsock.h>
specifier|extern
name|HINSTANCE
name|_hInstance
decl_stmt|;
define|#
directive|define
name|SSLeay_Write
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|send((a),(b),(c),0)
define|#
directive|define
name|SSLeay_Read
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|recv((a),(b),(c),0)
define|#
directive|define
name|SHUTDOWN
parameter_list|(
name|fd
parameter_list|)
value|{ shutdown((fd),0); closesocket(fd); }
define|#
directive|define
name|SHUTDOWN2
parameter_list|(
name|fd
parameter_list|)
value|{ shutdown((fd),2); closesocket(fd); }
endif|#
directive|endif
else|#
directive|else
include|#
directive|include
file|<sys/types.h>
ifndef|#
directive|ifndef
name|VMS
include|#
directive|include
file|<sys/param.h>
endif|#
directive|endif
include|#
directive|include
file|<sys/time.h>
comment|/* Needed under linux for FD_XXX */
include|#
directive|include
file|<netdb.h>
if|#
directive|if
name|defined
argument_list|(
name|VMS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__DECC
argument_list|)
include|#
directive|include
file|<socket.h>
include|#
directive|include
file|<in.h>
else|#
directive|else
include|#
directive|include
file|<sys/socket.h>
ifdef|#
directive|ifdef
name|FILIO_H
include|#
directive|include
file|<sys/filio.h>
comment|/* Added for FIONBIO under unixware */
endif|#
directive|endif
include|#
directive|include
file|<netinet/in.h>
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|NeXT
argument_list|)
operator|||
name|defined
argument_list|(
name|_NEXT_SOURCE
argument_list|)
include|#
directive|include
file|<sys/fcntl.h>
include|#
directive|include
file|<sys/types.h>
endif|#
directive|endif
ifdef|#
directive|ifdef
name|AIX
include|#
directive|include
file|<sys/select.h>
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|sun
argument_list|)
include|#
directive|include
file|<sys/filio.h>
else|#
directive|else
ifndef|#
directive|ifndef
name|VMS
include|#
directive|include
file|<sys/ioctl.h>
else|#
directive|else
comment|/* ioctl is only in VMS> 7.0 and when socketshr is not used */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|TCPIP_TYPE_SOCKETSHR
argument_list|)
operator|&&
name|defined
argument_list|(
name|__VMS_VER
argument_list|)
operator|&&
operator|(
name|__VMS_VER
operator|>
literal|70000000
operator|)
include|#
directive|include
file|<sys/ioctl.h>
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|VMS
include|#
directive|include
file|<unixio.h>
if|#
directive|if
name|defined
argument_list|(
name|TCPIP_TYPE_SOCKETSHR
argument_list|)
include|#
directive|include
file|<socketshr.h>
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|SSLeay_Read
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|read((a),(b),(c))
define|#
directive|define
name|SSLeay_Write
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|write((a),(b),(c))
define|#
directive|define
name|SHUTDOWN
parameter_list|(
name|fd
parameter_list|)
value|{ shutdown((fd),0); close((fd)); }
define|#
directive|define
name|SHUTDOWN2
parameter_list|(
name|fd
parameter_list|)
value|{ shutdown((fd),2); close((fd)); }
define|#
directive|define
name|INVALID_SOCKET
value|(-1)
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|THREADS
argument_list|)
operator|||
name|defined
argument_list|(
name|sun
argument_list|)
ifndef|#
directive|ifndef
name|_REENTRANT
define|#
directive|define
name|_REENTRANT
endif|#
directive|endif
endif|#
directive|endif
comment|/***********************************************/
comment|/* do we need to do this for getenv.  * Just define getenv for use under windows */
ifdef|#
directive|ifdef
name|WIN16
comment|/* How to do this needs to be thought out a bit more.... */
comment|/*char *GETENV(char *); #define Getenv	GETENV*/
define|#
directive|define
name|Getenv
value|getenv
else|#
directive|else
define|#
directive|define
name|Getenv
value|getenv
endif|#
directive|endif
define|#
directive|define
name|DG_GCC_BUG
comment|/* gcc< 2.6.3 on DGUX */
ifdef|#
directive|ifdef
name|sgi
define|#
directive|define
name|IRIX_CC_BUG
comment|/* all version of IRIX I've tested (4.* 5.*) */
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SNI
define|#
directive|define
name|IRIX_CC_BUG
comment|/* CDS++ up to V2.0Bsomething suffered from the same bug.*/
endif|#
directive|endif
ifdef|#
directive|ifdef
name|NO_MD2
define|#
directive|define
name|MD2_Init
value|MD2Init
define|#
directive|define
name|MD2_Update
value|MD2Update
define|#
directive|define
name|MD2_Final
value|MD2Final
define|#
directive|define
name|MD2_DIGEST_LENGTH
value|16
endif|#
directive|endif
ifdef|#
directive|ifdef
name|NO_MD5
define|#
directive|define
name|MD5_Init
value|MD5Init
define|#
directive|define
name|MD5_Update
value|MD5Update
define|#
directive|define
name|MD5_Final
value|MD5Final
define|#
directive|define
name|MD5_DIGEST_LENGTH
value|16
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

