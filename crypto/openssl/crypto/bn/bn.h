begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/bn/bn.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_BN_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_BN_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|NO_FP_API
end_ifndef

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_comment
comment|/* FILE */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifdef|#
directive|ifdef
name|VMS
undef|#
directive|undef
name|BN_LLONG
comment|/* experimental, so far... */
endif|#
directive|endif
define|#
directive|define
name|BN_MUL_COMBA
define|#
directive|define
name|BN_SQR_COMBA
define|#
directive|define
name|BN_RECURSION
define|#
directive|define
name|RECP_MUL_MOD
define|#
directive|define
name|MONT_MUL_MOD
comment|/* This next option uses the C libraries (2 word)/(1 word) function.  * If it is not defined, I use my C version (which is slower).  * The reason for this flag is that when the particular C compiler  * library routine is used, and the library is linked with a different  * compiler, the library is missing.  This mostly happens when the  * library is built with gcc and then linked using normal cc.  This would  * be a common occurrence because gcc normally produces code that is  * 2 times faster than system compilers for the big number stuff.  * For machines with only one compiler (or shared libraries), this should  * be on.  Again this in only really a problem on machines  * using "long long's", are 32bit, and are not using my assembler code. */
if|#
directive|if
name|defined
argument_list|(
name|MSDOS
argument_list|)
operator|||
name|defined
argument_list|(
name|WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|linux
argument_list|)
ifndef|#
directive|ifndef
name|BN_DIV2W
define|#
directive|define
name|BN_DIV2W
endif|#
directive|endif
endif|#
directive|endif
comment|/* assuming long is 64bit - this is the DEC Alpha  * unsigned long long is only 64 bits :-(, don't define  * BN_LLONG for the DEC Alpha */
ifdef|#
directive|ifdef
name|SIXTY_FOUR_BIT_LONG
define|#
directive|define
name|BN_ULLONG
value|unsigned long long
define|#
directive|define
name|BN_ULONG
value|unsigned long
define|#
directive|define
name|BN_LONG
value|long
define|#
directive|define
name|BN_BITS
value|128
define|#
directive|define
name|BN_BYTES
value|8
define|#
directive|define
name|BN_BITS2
value|64
define|#
directive|define
name|BN_BITS4
value|32
define|#
directive|define
name|BN_MASK
value|(0xffffffffffffffffffffffffffffffffLL)
define|#
directive|define
name|BN_MASK2
value|(0xffffffffffffffffL)
define|#
directive|define
name|BN_MASK2l
value|(0xffffffffL)
define|#
directive|define
name|BN_MASK2h
value|(0xffffffff00000000L)
define|#
directive|define
name|BN_MASK2h1
value|(0xffffffff80000000L)
define|#
directive|define
name|BN_TBIT
value|(0x8000000000000000L)
define|#
directive|define
name|BN_DEC_CONV
value|(10000000000000000000UL)
define|#
directive|define
name|BN_DEC_FMT1
value|"%lu"
define|#
directive|define
name|BN_DEC_FMT2
value|"%019lu"
define|#
directive|define
name|BN_DEC_NUM
value|19
endif|#
directive|endif
comment|/* This is where the long long data type is 64 bits, but long is 32.  * For machines where there are 64bit registers, this is the mode to use.  * IRIX, on R4000 and above should use this mode, along with the relevant  * assembler code :-).  Do NOT define BN_LLONG.  */
ifdef|#
directive|ifdef
name|SIXTY_FOUR_BIT
undef|#
directive|undef
name|BN_LLONG
undef|#
directive|undef
name|BN_ULLONG
define|#
directive|define
name|BN_ULONG
value|unsigned long long
define|#
directive|define
name|BN_LONG
value|long long
define|#
directive|define
name|BN_BITS
value|128
define|#
directive|define
name|BN_BYTES
value|8
define|#
directive|define
name|BN_BITS2
value|64
define|#
directive|define
name|BN_BITS4
value|32
define|#
directive|define
name|BN_MASK2
value|(0xffffffffffffffffLL)
define|#
directive|define
name|BN_MASK2l
value|(0xffffffffL)
define|#
directive|define
name|BN_MASK2h
value|(0xffffffff00000000LL)
define|#
directive|define
name|BN_MASK2h1
value|(0xffffffff80000000LL)
define|#
directive|define
name|BN_TBIT
value|(0x8000000000000000LL)
define|#
directive|define
name|BN_DEC_CONV
value|(10000000000000000000LL)
define|#
directive|define
name|BN_DEC_FMT1
value|"%llu"
define|#
directive|define
name|BN_DEC_FMT2
value|"%019llu"
define|#
directive|define
name|BN_DEC_NUM
value|19
endif|#
directive|endif
ifdef|#
directive|ifdef
name|THIRTY_TWO_BIT
if|#
directive|if
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
define|#
directive|define
name|BN_ULLONG
value|unsigned _int64
else|#
directive|else
define|#
directive|define
name|BN_ULLONG
value|unsigned long long
endif|#
directive|endif
define|#
directive|define
name|BN_ULONG
value|unsigned long
define|#
directive|define
name|BN_LONG
value|long
define|#
directive|define
name|BN_BITS
value|64
define|#
directive|define
name|BN_BYTES
value|4
define|#
directive|define
name|BN_BITS2
value|32
define|#
directive|define
name|BN_BITS4
value|16
ifdef|#
directive|ifdef
name|WIN32
comment|/* VC++ doesn't like the LL suffix */
define|#
directive|define
name|BN_MASK
value|(0xffffffffffffffffL)
else|#
directive|else
define|#
directive|define
name|BN_MASK
value|(0xffffffffffffffffLL)
endif|#
directive|endif
define|#
directive|define
name|BN_MASK2
value|(0xffffffffL)
define|#
directive|define
name|BN_MASK2l
value|(0xffff)
define|#
directive|define
name|BN_MASK2h1
value|(0xffff8000L)
define|#
directive|define
name|BN_MASK2h
value|(0xffff0000L)
define|#
directive|define
name|BN_TBIT
value|(0x80000000L)
define|#
directive|define
name|BN_DEC_CONV
value|(1000000000L)
define|#
directive|define
name|BN_DEC_FMT1
value|"%lu"
define|#
directive|define
name|BN_DEC_FMT2
value|"%09lu"
define|#
directive|define
name|BN_DEC_NUM
value|9
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SIXTEEN_BIT
ifndef|#
directive|ifndef
name|BN_DIV2W
define|#
directive|define
name|BN_DIV2W
endif|#
directive|endif
define|#
directive|define
name|BN_ULLONG
value|unsigned long
define|#
directive|define
name|BN_ULONG
value|unsigned short
define|#
directive|define
name|BN_LONG
value|short
define|#
directive|define
name|BN_BITS
value|32
define|#
directive|define
name|BN_BYTES
value|2
define|#
directive|define
name|BN_BITS2
value|16
define|#
directive|define
name|BN_BITS4
value|8
define|#
directive|define
name|BN_MASK
value|(0xffffffff)
define|#
directive|define
name|BN_MASK2
value|(0xffff)
define|#
directive|define
name|BN_MASK2l
value|(0xff)
define|#
directive|define
name|BN_MASK2h1
value|(0xff80)
define|#
directive|define
name|BN_MASK2h
value|(0xff00)
define|#
directive|define
name|BN_TBIT
value|(0x8000)
define|#
directive|define
name|BN_DEC_CONV
value|(100000)
define|#
directive|define
name|BN_DEC_FMT1
value|"%u"
define|#
directive|define
name|BN_DEC_FMT2
value|"%05u"
define|#
directive|define
name|BN_DEC_NUM
value|5
endif|#
directive|endif
ifdef|#
directive|ifdef
name|EIGHT_BIT
ifndef|#
directive|ifndef
name|BN_DIV2W
define|#
directive|define
name|BN_DIV2W
endif|#
directive|endif
define|#
directive|define
name|BN_ULLONG
value|unsigned short
define|#
directive|define
name|BN_ULONG
value|unsigned char
define|#
directive|define
name|BN_LONG
value|char
define|#
directive|define
name|BN_BITS
value|16
define|#
directive|define
name|BN_BYTES
value|1
define|#
directive|define
name|BN_BITS2
value|8
define|#
directive|define
name|BN_BITS4
value|4
define|#
directive|define
name|BN_MASK
value|(0xffff)
define|#
directive|define
name|BN_MASK2
value|(0xff)
define|#
directive|define
name|BN_MASK2l
value|(0xf)
define|#
directive|define
name|BN_MASK2h1
value|(0xf8)
define|#
directive|define
name|BN_MASK2h
value|(0xf0)
define|#
directive|define
name|BN_TBIT
value|(0x80)
define|#
directive|define
name|BN_DEC_CONV
value|(100)
define|#
directive|define
name|BN_DEC_FMT1
value|"%u"
define|#
directive|define
name|BN_DEC_FMT2
value|"%02u"
define|#
directive|define
name|BN_DEC_NUM
value|2
endif|#
directive|endif
define|#
directive|define
name|BN_DEFAULT_BITS
value|1280
ifdef|#
directive|ifdef
name|BIGNUM
undef|#
directive|undef
name|BIGNUM
endif|#
directive|endif
define|#
directive|define
name|BN_FLG_MALLOCED
value|0x01
define|#
directive|define
name|BN_FLG_STATIC_DATA
value|0x02
define|#
directive|define
name|BN_FLG_FREE
value|0x8000
comment|/* used for debuging */
define|#
directive|define
name|BN_set_flags
parameter_list|(
name|b
parameter_list|,
name|n
parameter_list|)
value|((b)->flags|=(n))
define|#
directive|define
name|BN_get_flags
parameter_list|(
name|b
parameter_list|,
name|n
parameter_list|)
value|((b)->flags&(n))
typedef|typedef
struct|struct
name|bignum_st
block|{
name|BN_ULONG
modifier|*
name|d
decl_stmt|;
comment|/* Pointer to an array of 'BN_BITS2' bit chunks. */
name|int
name|top
decl_stmt|;
comment|/* Index of last used d +1. */
comment|/* The next are internal book keeping for bn_expand. */
name|int
name|dmax
decl_stmt|;
comment|/* Size of the d array. */
name|int
name|neg
decl_stmt|;
comment|/* one if the number is negative */
name|int
name|flags
decl_stmt|;
block|}
name|BIGNUM
typedef|;
comment|/* Used for temp variables */
define|#
directive|define
name|BN_CTX_NUM
value|16
define|#
directive|define
name|BN_CTX_NUM_POS
value|12
typedef|typedef
struct|struct
name|bignum_ctx
block|{
name|int
name|tos
decl_stmt|;
name|BIGNUM
name|bn
index|[
name|BN_CTX_NUM
index|]
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|depth
decl_stmt|;
name|int
name|pos
index|[
name|BN_CTX_NUM_POS
index|]
decl_stmt|;
name|int
name|too_many
decl_stmt|;
block|}
name|BN_CTX
typedef|;
typedef|typedef
struct|struct
name|bn_blinding_st
block|{
name|int
name|init
decl_stmt|;
name|BIGNUM
modifier|*
name|A
decl_stmt|;
name|BIGNUM
modifier|*
name|Ai
decl_stmt|;
name|BIGNUM
modifier|*
name|mod
decl_stmt|;
comment|/* just a reference */
block|}
name|BN_BLINDING
typedef|;
comment|/* Used for montgomery multiplication */
typedef|typedef
struct|struct
name|bn_mont_ctx_st
block|{
name|int
name|ri
decl_stmt|;
comment|/* number of bits in R */
name|BIGNUM
name|RR
decl_stmt|;
comment|/* used to convert to montgomery form */
name|BIGNUM
name|N
decl_stmt|;
comment|/* The modulus */
name|BIGNUM
name|Ni
decl_stmt|;
comment|/* R*(1/R mod N) - N*Ni = 1 	                * (Ni is only stored for bignum algorithm) */
name|BN_ULONG
name|n0
decl_stmt|;
comment|/* least significant word of Ni */
name|int
name|flags
decl_stmt|;
block|}
name|BN_MONT_CTX
typedef|;
comment|/* Used for reciprocal division/mod functions  * It cannot be shared between threads  */
typedef|typedef
struct|struct
name|bn_recp_ctx_st
block|{
name|BIGNUM
name|N
decl_stmt|;
comment|/* the divisor */
name|BIGNUM
name|Nr
decl_stmt|;
comment|/* the reciprocal */
name|int
name|num_bits
decl_stmt|;
name|int
name|shift
decl_stmt|;
name|int
name|flags
decl_stmt|;
block|}
name|BN_RECP_CTX
typedef|;
define|#
directive|define
name|BN_to_montgomery
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|mont
parameter_list|,
name|ctx
parameter_list|)
value|BN_mod_mul_montgomery(\ 	r,a,&((mont)->RR),(mont),ctx)
define|#
directive|define
name|BN_prime_checks
value|0
comment|/* default: select number of iterations 			     based on the size of the number */
comment|/* number of Miller-Rabin iterations for an error rate  of less than 2^-80  * for random 'b'-bit input, b>= 100 (taken from table 4.4 in the Handbook  * of Applied Cryptography [Menezes, van Oorschot, Vanstone; CRC Press 1996];  * original paper: Damgaard, Landrock, Pomerance: Average case error estimates  * for the strong probable prime test. -- Math. Comp. 61 (1993) 177-194) */
define|#
directive|define
name|BN_prime_checks_for_size
parameter_list|(
name|b
parameter_list|)
value|((b)>= 1300 ?  2 : \                                 (b)>=  850 ?  3 : \                                 (b)>=  650 ?  4 : \                                 (b)>=  550 ?  5 : \                                 (b)>=  450 ?  6 : \                                 (b)>=  400 ?  7 : \                                 (b)>=  350 ?  8 : \                                 (b)>=  300 ?  9 : \                                 (b)>=  250 ? 12 : \                                 (b)>=  200 ? 15 : \                                 (b)>=  150 ? 18 : \
comment|/* b>= 100 */
value|27)
define|#
directive|define
name|BN_num_bytes
parameter_list|(
name|a
parameter_list|)
value|((BN_num_bits(a)+7)/8)
define|#
directive|define
name|BN_is_word
parameter_list|(
name|a
parameter_list|,
name|w
parameter_list|)
value|(((a)->top == 1)&& ((a)->d[0] == (BN_ULONG)(w)))
define|#
directive|define
name|BN_is_zero
parameter_list|(
name|a
parameter_list|)
value|(((a)->top == 0) || BN_is_word(a,0))
define|#
directive|define
name|BN_is_one
parameter_list|(
name|a
parameter_list|)
value|(BN_is_word((a),1))
define|#
directive|define
name|BN_is_odd
parameter_list|(
name|a
parameter_list|)
value|(((a)->top> 0)&& ((a)->d[0]& 1))
define|#
directive|define
name|BN_one
parameter_list|(
name|a
parameter_list|)
value|(BN_set_word((a),1))
define|#
directive|define
name|BN_zero
parameter_list|(
name|a
parameter_list|)
value|(BN_set_word((a),0))
comment|/*#define BN_ascii2bn(a)	BN_hex2bn(a) */
comment|/*#define BN_bn2ascii(a)	BN_bn2hex(a) */
name|BIGNUM
modifier|*
name|BN_value_one
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|char
modifier|*
name|BN_options
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BN_CTX
modifier|*
name|BN_CTX_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|BN_CTX_init
parameter_list|(
name|BN_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|BN_CTX_free
parameter_list|(
name|BN_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|BN_CTX_start
parameter_list|(
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_CTX_get
parameter_list|(
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|BN_CTX_end
parameter_list|(
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_rand
parameter_list|(
name|BIGNUM
modifier|*
name|rnd
parameter_list|,
name|int
name|bits
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|bottom
parameter_list|)
function_decl|;
name|int
name|BN_pseudo_rand
parameter_list|(
name|BIGNUM
modifier|*
name|rnd
parameter_list|,
name|int
name|bits
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|bottom
parameter_list|)
function_decl|;
name|int
name|BN_rand_range
parameter_list|(
name|BIGNUM
modifier|*
name|rnd
parameter_list|,
name|BIGNUM
modifier|*
name|range
parameter_list|)
function_decl|;
name|int
name|BN_pseudo_rand_range
parameter_list|(
name|BIGNUM
modifier|*
name|rnd
parameter_list|,
name|BIGNUM
modifier|*
name|range
parameter_list|)
function_decl|;
name|int
name|BN_num_bits
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|BN_num_bits_word
parameter_list|(
name|BN_ULONG
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|BN_init
parameter_list|(
name|BIGNUM
modifier|*
parameter_list|)
function_decl|;
name|void
name|BN_clear_free
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_copy
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_bin2bn
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|,
name|BIGNUM
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|BN_bn2bin
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_mpi2bn
parameter_list|(
name|unsigned
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|,
name|BIGNUM
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|BN_bn2mpi
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|)
function_decl|;
name|int
name|BN_sub
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BN_usub
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BN_uadd
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BN_add
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BN_mod
parameter_list|(
name|BIGNUM
modifier|*
name|rem
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|d
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_div
parameter_list|(
name|BIGNUM
modifier|*
name|dv
parameter_list|,
name|BIGNUM
modifier|*
name|rem
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|d
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_mul
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_sqr
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|BN_ULONG
name|BN_mod_word
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|BN_ULONG
name|BN_div_word
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|int
name|BN_mul_word
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|int
name|BN_add_word
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|int
name|BN_sub_word
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|int
name|BN_set_word
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|BN_ULONG
name|BN_get_word
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|BN_cmp
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|)
function_decl|;
name|void
name|BN_free
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|BN_is_bit_set
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|BN_lshift
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|BN_lshift1
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|BN_exp
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_exp
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_exp_mont
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|m_ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_exp_mont_word
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BN_ULONG
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|m_ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_exp2_mont
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a1
parameter_list|,
name|BIGNUM
modifier|*
name|p1
parameter_list|,
name|BIGNUM
modifier|*
name|a2
parameter_list|,
name|BIGNUM
modifier|*
name|p2
parameter_list|,
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|m_ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_exp_simple
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_mask_bits
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|BN_mod_mul
parameter_list|(
name|BIGNUM
modifier|*
name|ret
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|NO_FP_API
name|int
name|BN_print_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HEADER_BIO_H
name|int
name|BN_print
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
else|#
directive|else
name|int
name|BN_print
parameter_list|(
name|void
modifier|*
name|fp
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|BN_reciprocal
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|int
name|len
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_rshift
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|BN_rshift1
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|void
name|BN_clear
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_dup
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|BN_ucmp
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BN_set_bit
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|BN_clear_bit
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|char
modifier|*
name|BN_bn2hex
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|char
modifier|*
name|BN_bn2dec
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|BN_hex2bn
parameter_list|(
name|BIGNUM
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|int
name|BN_dec2bn
parameter_list|(
name|BIGNUM
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|int
name|BN_gcd
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|in_a
parameter_list|,
name|BIGNUM
modifier|*
name|in_b
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_mod_inverse
parameter_list|(
name|BIGNUM
modifier|*
name|ret
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|n
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|BN_generate_prime
parameter_list|(
name|BIGNUM
modifier|*
name|ret
parameter_list|,
name|int
name|bits
parameter_list|,
name|int
name|safe
parameter_list|,
name|BIGNUM
modifier|*
name|add
parameter_list|,
name|BIGNUM
modifier|*
name|rem
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
name|int
name|BN_is_prime
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|int
name|nchecks
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
name|int
name|BN_is_prime_fasttest
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|int
name|nchecks
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|,
name|int
name|do_trial_division
parameter_list|)
function_decl|;
name|BN_MONT_CTX
modifier|*
name|BN_MONT_CTX_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|BN_MONT_CTX_init
parameter_list|(
name|BN_MONT_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_mul_montgomery
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|mont
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_from_montgomery
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|mont
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|BN_MONT_CTX_free
parameter_list|(
name|BN_MONT_CTX
modifier|*
name|mont
parameter_list|)
function_decl|;
name|int
name|BN_MONT_CTX_set
parameter_list|(
name|BN_MONT_CTX
modifier|*
name|mont
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|modulus
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|BN_MONT_CTX
modifier|*
name|BN_MONT_CTX_copy
parameter_list|(
name|BN_MONT_CTX
modifier|*
name|to
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|from
parameter_list|)
function_decl|;
name|BN_BLINDING
modifier|*
name|BN_BLINDING_new
parameter_list|(
name|BIGNUM
modifier|*
name|A
parameter_list|,
name|BIGNUM
modifier|*
name|Ai
parameter_list|,
name|BIGNUM
modifier|*
name|mod
parameter_list|)
function_decl|;
name|void
name|BN_BLINDING_free
parameter_list|(
name|BN_BLINDING
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BN_BLINDING_update
parameter_list|(
name|BN_BLINDING
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_BLINDING_convert
parameter_list|(
name|BIGNUM
modifier|*
name|n
parameter_list|,
name|BN_BLINDING
modifier|*
name|r
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_BLINDING_invert
parameter_list|(
name|BIGNUM
modifier|*
name|n
parameter_list|,
name|BN_BLINDING
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|BN_set_params
parameter_list|(
name|int
name|mul
parameter_list|,
name|int
name|high
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|mont
parameter_list|)
function_decl|;
name|int
name|BN_get_params
parameter_list|(
name|int
name|which
parameter_list|)
function_decl|;
comment|/* 0, mul, 1 high, 2 low, 3 mont */
name|void
name|BN_RECP_CTX_init
parameter_list|(
name|BN_RECP_CTX
modifier|*
name|recp
parameter_list|)
function_decl|;
name|BN_RECP_CTX
modifier|*
name|BN_RECP_CTX_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|BN_RECP_CTX_free
parameter_list|(
name|BN_RECP_CTX
modifier|*
name|recp
parameter_list|)
function_decl|;
name|int
name|BN_RECP_CTX_set
parameter_list|(
name|BN_RECP_CTX
modifier|*
name|recp
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|rdiv
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_mul_reciprocal
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_RECP_CTX
modifier|*
name|recp
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_mod_exp_recp
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|BN_div_recp
parameter_list|(
name|BIGNUM
modifier|*
name|dv
parameter_list|,
name|BIGNUM
modifier|*
name|rem
parameter_list|,
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_RECP_CTX
modifier|*
name|recp
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* library internal functions */
define|#
directive|define
name|bn_expand
parameter_list|(
name|a
parameter_list|,
name|bits
parameter_list|)
value|((((((bits+BN_BITS2-1))/BN_BITS2))<= (a)->dmax)?\ 	(a):bn_expand2((a),(bits)/BN_BITS2+1))
define|#
directive|define
name|bn_wexpand
parameter_list|(
name|a
parameter_list|,
name|words
parameter_list|)
value|(((words)<= (a)->dmax)?(a):bn_expand2((a),(words)))
name|BIGNUM
modifier|*
name|bn_expand2
parameter_list|(
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|int
name|words
parameter_list|)
function_decl|;
define|#
directive|define
name|bn_fix_top
parameter_list|(
name|a
parameter_list|)
define|\
value|{ \         BN_ULONG *ftl; \ 	if ((a)->top> 0) \ 		{ \ 		for (ftl=&((a)->d[(a)->top-1]); (a)->top> 0; (a)->top--) \ 		if (*(ftl--)) break; \ 		} \ 	}
name|BN_ULONG
name|bn_mul_add_words
parameter_list|(
name|BN_ULONG
modifier|*
name|rp
parameter_list|,
name|BN_ULONG
modifier|*
name|ap
parameter_list|,
name|int
name|num
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|BN_ULONG
name|bn_mul_words
parameter_list|(
name|BN_ULONG
modifier|*
name|rp
parameter_list|,
name|BN_ULONG
modifier|*
name|ap
parameter_list|,
name|int
name|num
parameter_list|,
name|BN_ULONG
name|w
parameter_list|)
function_decl|;
name|void
name|bn_sqr_words
parameter_list|(
name|BN_ULONG
modifier|*
name|rp
parameter_list|,
name|BN_ULONG
modifier|*
name|ap
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|BN_ULONG
name|bn_div_words
parameter_list|(
name|BN_ULONG
name|h
parameter_list|,
name|BN_ULONG
name|l
parameter_list|,
name|BN_ULONG
name|d
parameter_list|)
function_decl|;
name|BN_ULONG
name|bn_add_words
parameter_list|(
name|BN_ULONG
modifier|*
name|rp
parameter_list|,
name|BN_ULONG
modifier|*
name|ap
parameter_list|,
name|BN_ULONG
modifier|*
name|bp
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|BN_ULONG
name|bn_sub_words
parameter_list|(
name|BN_ULONG
modifier|*
name|rp
parameter_list|,
name|BN_ULONG
modifier|*
name|ap
parameter_list|,
name|BN_ULONG
modifier|*
name|bp
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|BN_DEBUG
name|void
name|bn_dump1
parameter_list|(
name|FILE
modifier|*
name|o
parameter_list|,
specifier|const
name|char
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
define|#
directive|define
name|bn_print
parameter_list|(
name|a
parameter_list|)
value|{fprintf(stderr, #a "="); BN_print_fp(stderr,a); \    fprintf(stderr,"\n");}
define|#
directive|define
name|bn_dump
parameter_list|(
name|a
parameter_list|,
name|n
parameter_list|)
value|bn_dump1(stderr,#a,a,n);
else|#
directive|else
define|#
directive|define
name|bn_print
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|bn_dump
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
endif|#
directive|endif
name|int
name|BN_bntest_rand
parameter_list|(
name|BIGNUM
modifier|*
name|rnd
parameter_list|,
name|int
name|bits
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|bottom
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_BN_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the BN functions. */
comment|/* Function codes. */
define|#
directive|define
name|BN_F_BN_BLINDING_CONVERT
value|100
define|#
directive|define
name|BN_F_BN_BLINDING_INVERT
value|101
define|#
directive|define
name|BN_F_BN_BLINDING_NEW
value|102
define|#
directive|define
name|BN_F_BN_BLINDING_UPDATE
value|103
define|#
directive|define
name|BN_F_BN_BN2DEC
value|104
define|#
directive|define
name|BN_F_BN_BN2HEX
value|105
define|#
directive|define
name|BN_F_BN_CTX_GET
value|116
define|#
directive|define
name|BN_F_BN_CTX_NEW
value|106
define|#
directive|define
name|BN_F_BN_DIV
value|107
define|#
directive|define
name|BN_F_BN_EXPAND2
value|108
define|#
directive|define
name|BN_F_BN_MOD_EXP2_MONT
value|118
define|#
directive|define
name|BN_F_BN_MOD_EXP_MONT
value|109
define|#
directive|define
name|BN_F_BN_MOD_EXP_MONT_WORD
value|117
define|#
directive|define
name|BN_F_BN_MOD_INVERSE
value|110
define|#
directive|define
name|BN_F_BN_MOD_MUL_RECIPROCAL
value|111
define|#
directive|define
name|BN_F_BN_MPI2BN
value|112
define|#
directive|define
name|BN_F_BN_NEW
value|113
define|#
directive|define
name|BN_F_BN_RAND
value|114
define|#
directive|define
name|BN_F_BN_RAND_RANGE
value|122
define|#
directive|define
name|BN_F_BN_USUB
value|115
comment|/* Reason codes. */
define|#
directive|define
name|BN_R_ARG2_LT_ARG3
value|100
define|#
directive|define
name|BN_R_BAD_RECIPROCAL
value|101
define|#
directive|define
name|BN_R_BIGNUM_TOO_LONG
value|114
define|#
directive|define
name|BN_R_CALLED_WITH_EVEN_MODULUS
value|102
define|#
directive|define
name|BN_R_DIV_BY_ZERO
value|103
define|#
directive|define
name|BN_R_ENCODING_ERROR
value|104
define|#
directive|define
name|BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
value|105
define|#
directive|define
name|BN_R_INVALID_LENGTH
value|106
define|#
directive|define
name|BN_R_INVALID_RANGE
value|115
define|#
directive|define
name|BN_R_NOT_INITIALIZED
value|107
define|#
directive|define
name|BN_R_NO_INVERSE
value|108
define|#
directive|define
name|BN_R_TOO_MANY_TEMPORARY_VARIABLES
value|109
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

