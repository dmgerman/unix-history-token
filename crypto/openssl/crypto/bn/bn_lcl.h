begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/bn/bn_lcl.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_BN_LCL_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_BN_LCL_H
end_define

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * BN_window_bits_for_exponent_size -- macro for sliding window mod_exp functions  *  *  * For window size 'w' (w>= 2) and a random 'b' bits exponent,  * the number of multiplications is a constant plus on average  *  *    2^(w-1) + (b-w)/(w+1);  *  * here  2^(w-1)  is for precomputing the table (we actually need  * entries only for windows that have the lowest bit set), and  * (b-w)/(w+1)  is an approximation for the expected number of  * w-bit windows, not counting the first one.  *  * Thus we should use  *  *    w>= 6  if        b> 671  *     w = 5  if  671> b> 239  *     w = 4  if  239> b>  79  *     w = 3  if   79> b>  23  *    w<= 2  if   23> b  *  * (with draws in between).  Very small exponents are often selected  * with low Hamming weight, so we use  w = 1  for b<= 23.  */
if|#
directive|if
literal|1
define|#
directive|define
name|BN_window_bits_for_exponent_size
parameter_list|(
name|b
parameter_list|)
define|\
value|((b)> 671 ? 6 : \ 		 (b)> 239 ? 5 : \ 		 (b)>  79 ? 4 : \ 		 (b)>  23 ? 3 : 1)
else|#
directive|else
comment|/* Old SSLeay/OpenSSL table.  * Maximum window size was 5, so this table differs for b==1024;  * but it coincides for other interesting values (b==160, b==512).  */
define|#
directive|define
name|BN_window_bits_for_exponent_size
parameter_list|(
name|b
parameter_list|)
define|\
value|((b)> 255 ? 5 : \ 		 (b)> 127 ? 4 : \ 		 (b)>  17 ? 3 : 1)
endif|#
directive|endif
comment|/* BN_mod_exp_mont_conttime is based on the assumption that the  * L1 data cache line width of the target processor is at least  * the following value.  */
define|#
directive|define
name|MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH
value|( 64 )
define|#
directive|define
name|MOD_EXP_CTIME_MIN_CACHE_LINE_MASK
value|(MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH - 1)
comment|/* Window sizes optimized for fixed window size modular exponentiation  * algorithm (BN_mod_exp_mont_consttime).  *  * To achieve the security goals of BN_mode_exp_mont_consttime, the  * maximum size of the window must not exceed  * log_2(MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH).   *  * Window size thresholds are defined for cache line sizes of 32 and 64,  * cache line sizes where log_2(32)=5 and log_2(64)=6 respectively. A  * window size of 7 should only be used on processors that have a 128  * byte or greater cache line size.  */
if|#
directive|if
name|MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH
operator|==
literal|64
define|#
directive|define
name|BN_window_bits_for_ctime_exponent_size
parameter_list|(
name|b
parameter_list|)
define|\
value|((b)> 937 ? 6 : \ 		 (b)> 306 ? 5 : \ 		 (b)>  89 ? 4 : \ 		 (b)>  22 ? 3 : 1)
define|#
directive|define
name|BN_MAX_WINDOW_BITS_FOR_CTIME_EXPONENT_SIZE
value|(6)
elif|#
directive|elif
name|MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH
operator|==
literal|32
define|#
directive|define
name|BN_window_bits_for_ctime_exponent_size
parameter_list|(
name|b
parameter_list|)
define|\
value|((b)> 306 ? 5 : \ 		 (b)>  89 ? 4 : \ 		 (b)>  22 ? 3 : 1)
define|#
directive|define
name|BN_MAX_WINDOW_BITS_FOR_CTIME_EXPONENT_SIZE
value|(5)
endif|#
directive|endif
comment|/* Pentium pro 16,16,16,32,64 */
comment|/* Alpha       16,16,16,16.64 */
define|#
directive|define
name|BN_MULL_SIZE_NORMAL
value|(16)
comment|/* 32 */
define|#
directive|define
name|BN_MUL_RECURSIVE_SIZE_NORMAL
value|(16)
comment|/* 32 less than */
define|#
directive|define
name|BN_SQR_RECURSIVE_SIZE_NORMAL
value|(16)
comment|/* 32 */
define|#
directive|define
name|BN_MUL_LOW_RECURSIVE_SIZE_NORMAL
value|(32)
comment|/* 32 */
define|#
directive|define
name|BN_MONT_CTX_SET_SIZE_WORD
value|(64)
comment|/* 32 */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_ASM
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_INLINE_ASM
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PEDANTIC
argument_list|)
comment|/*  * BN_UMULT_HIGH section.  *  * No, I'm not trying to overwhelm you when stating that the  * product of N-bit numbers is 2*N bits wide:-) No, I don't expect  * you to be impressed when I say that if the compiler doesn't  * support 2*N integer type, then you have to replace every N*N  * multiplication with 4 (N/2)*(N/2) accompanied by some shifts  * and additions which unavoidably results in severe performance  * penalties. Of course provided that the hardware is capable of  * producing 2*N result... That's when you normally start  * considering assembler implementation. However! It should be  * pointed out that some CPUs (most notably Alpha, PowerPC and  * upcoming IA-64 family:-) provide *separate* instruction  * calculating the upper half of the product placing the result  * into a general purpose register. Now *if* the compiler supports  * inline assembler, then it's not impossible to implement the  * "bignum" routines (and have the compiler optimize 'em)  * exhibiting "native" performance in C. That's what BN_UMULT_HIGH  * macro is about:-)  *  *<appro@fy.chalmers.se>  */
if|#
directive|if
name|defined
argument_list|(
name|__alpha
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|SIXTY_FOUR_BIT_LONG
argument_list|)
operator|||
name|defined
argument_list|(
name|SIXTY_FOUR_BIT
argument_list|)
operator|)
if|#
directive|if
name|defined
argument_list|(
name|__DECC
argument_list|)
include|#
directive|include
file|<c_asm.h>
define|#
directive|define
name|BN_UMULT_HIGH
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(BN_ULONG)asm("umulh %a0,%a1,%v0",(a),(b))
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|__GNUC__
operator|>=
literal|2
define|#
directive|define
name|BN_UMULT_HIGH
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|({	\ 	register BN_ULONG ret;		\ 	asm ("umulh	%1,%2,%0"	\ 	     : "=r"(ret)		\ 	     : "r"(a), "r"(b));		\ 	ret;			})
endif|#
directive|endif
comment|/* compiler */
elif|#
directive|elif
name|defined
argument_list|(
name|_ARCH_PPC
argument_list|)
operator|&&
name|defined
argument_list|(
name|__64BIT__
argument_list|)
operator|&&
name|defined
argument_list|(
name|SIXTY_FOUR_BIT_LONG
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|__GNUC__
operator|>=
literal|2
define|#
directive|define
name|BN_UMULT_HIGH
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|({	\ 	register BN_ULONG ret;		\ 	asm ("mulhdu	%0,%1,%2"	\ 	     : "=r"(ret)		\ 	     : "r"(a), "r"(b));		\ 	ret;			})
endif|#
directive|endif
comment|/* compiler */
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|__x86_64
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|)
operator|&&
expr|\
operator|(
name|defined
argument_list|(
name|SIXTY_FOUR_BIT_LONG
argument_list|)
operator|||
name|defined
argument_list|(
name|SIXTY_FOUR_BIT
argument_list|)
operator|)
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|__GNUC__
operator|>=
literal|2
define|#
directive|define
name|BN_UMULT_HIGH
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|({	\ 	register BN_ULONG ret,discard;	\ 	asm ("mulq	%3"		\ 	     : "=a"(discard),"=d"(ret)	\ 	     : "a"(a), "g"(b)		\ 	     : "cc");			\ 	ret;			})
define|#
directive|define
name|BN_UMULT_LOHI
parameter_list|(
name|low
parameter_list|,
name|high
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|asm ("mulq	%3"		\ 		: "=a"(low),"=d"(high)	\ 		: "a"(a),"g"(b)		\ 		: "cc");
endif|#
directive|endif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|_M_AMD64
argument_list|)
operator|||
name|defined
argument_list|(
name|_M_X64
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|SIXTY_FOUR_BIT
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
name|unsigned
name|__int64
name|__umulh
parameter_list|(
name|unsigned
name|__int64
name|a
parameter_list|,
name|unsigned
name|__int64
name|b
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_umul128
parameter_list|(
name|unsigned
name|__int64
name|a
parameter_list|,
name|unsigned
name|__int64
name|b
parameter_list|,
name|unsigned
name|__int64
modifier|*
name|h
parameter_list|)
function_decl|;
pragma|#
directive|pragma
name|intrinsic
name|(
name|__umulh
name|,
name|_umul128
name|)
define|#
directive|define
name|BN_UMULT_HIGH
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|__umulh((a),(b))
define|#
directive|define
name|BN_UMULT_LOHI
parameter_list|(
name|low
parameter_list|,
name|high
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|)
value|((low)=_umul128((a),(b),&(high)))
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|__mips
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|SIXTY_FOUR_BIT
argument_list|)
operator|||
name|defined
argument_list|(
name|SIXTY_FOUR_BIT_LONG
argument_list|)
operator|)
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|__GNUC__
operator|>=
literal|2
define|#
directive|define
name|BN_UMULT_HIGH
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|({	\ 	register BN_ULONG ret;		\ 	asm ("dmultu	%1,%2"		\ 	     : "=h"(ret)		\ 	     : "r"(a), "r"(b) : "l");	\ 	ret;			})
define|#
directive|define
name|BN_UMULT_LOHI
parameter_list|(
name|low
parameter_list|,
name|high
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|asm ("dmultu	%2,%3"		\ 	     : "=l"(low),"=h"(high)	\ 	     : "r"(a), "r"(b));
endif|#
directive|endif
endif|#
directive|endif
comment|/* cpu */
endif|#
directive|endif
comment|/* OPENSSL_NO_ASM */
comment|/*************************************************************  * Using the long long type  */
define|#
directive|define
name|Lw
parameter_list|(
name|t
parameter_list|)
value|(((BN_ULONG)(t))&BN_MASK2)
define|#
directive|define
name|Hw
parameter_list|(
name|t
parameter_list|)
value|(((BN_ULONG)((t)>>BN_BITS2))&BN_MASK2)
ifdef|#
directive|ifdef
name|BN_DEBUG_RAND
define|#
directive|define
name|bn_clear_top2max
parameter_list|(
name|a
parameter_list|)
define|\
value|{ \ 	int      ind = (a)->dmax - (a)->top; \ 	BN_ULONG *ftl =&(a)->d[(a)->top-1]; \ 	for (; ind != 0; ind--) \ 		*(++ftl) = 0x0; \ 	}
else|#
directive|else
define|#
directive|define
name|bn_clear_top2max
parameter_list|(
name|a
parameter_list|)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|BN_LLONG
define|#
directive|define
name|mul_add
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|w
parameter_list|,
name|c
parameter_list|)
value|{ \ 	BN_ULLONG t; \ 	t=(BN_ULLONG)w * (a) + (r) + (c); \ 	(r)= Lw(t); \ 	(c)= Hw(t); \ 	}
define|#
directive|define
name|mul
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|w
parameter_list|,
name|c
parameter_list|)
value|{ \ 	BN_ULLONG t; \ 	t=(BN_ULLONG)w * (a) + (c); \ 	(r)= Lw(t); \ 	(c)= Hw(t); \ 	}
define|#
directive|define
name|sqr
parameter_list|(
name|r0
parameter_list|,
name|r1
parameter_list|,
name|a
parameter_list|)
value|{ \ 	BN_ULLONG t; \ 	t=(BN_ULLONG)(a)*(a); \ 	(r0)=Lw(t); \ 	(r1)=Hw(t); \ 	}
elif|#
directive|elif
name|defined
argument_list|(
name|BN_UMULT_LOHI
argument_list|)
define|#
directive|define
name|mul_add
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|w
parameter_list|,
name|c
parameter_list|)
value|{		\ 	BN_ULONG high,low,ret,tmp=(a);	\ 	ret =  (r);			\ 	BN_UMULT_LOHI(low,high,w,tmp);	\ 	ret += (c);			\ 	(c) =  (ret<(c))?1:0;		\ 	(c) += high;			\ 	ret += low;			\ 	(c) += (ret<low)?1:0;		\ 	(r) =  ret;			\ 	}
define|#
directive|define
name|mul
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|w
parameter_list|,
name|c
parameter_list|)
value|{		\ 	BN_ULONG high,low,ret,ta=(a);	\ 	BN_UMULT_LOHI(low,high,w,ta);	\ 	ret =  low + (c);		\ 	(c) =  high;			\ 	(c) += (ret<low)?1:0;		\ 	(r) =  ret;			\ 	}
define|#
directive|define
name|sqr
parameter_list|(
name|r0
parameter_list|,
name|r1
parameter_list|,
name|a
parameter_list|)
value|{		\ 	BN_ULONG tmp=(a);		\ 	BN_UMULT_LOHI(r0,r1,tmp,tmp);	\ 	}
elif|#
directive|elif
name|defined
argument_list|(
name|BN_UMULT_HIGH
argument_list|)
define|#
directive|define
name|mul_add
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|w
parameter_list|,
name|c
parameter_list|)
value|{		\ 	BN_ULONG high,low,ret,tmp=(a);	\ 	ret =  (r);			\ 	high=  BN_UMULT_HIGH(w,tmp);	\ 	ret += (c);			\ 	low =  (w) * tmp;		\ 	(c) =  (ret<(c))?1:0;		\ 	(c) += high;			\ 	ret += low;			\ 	(c) += (ret<low)?1:0;		\ 	(r) =  ret;			\ 	}
define|#
directive|define
name|mul
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|w
parameter_list|,
name|c
parameter_list|)
value|{		\ 	BN_ULONG high,low,ret,ta=(a);	\ 	low =  (w) * ta;		\ 	high=  BN_UMULT_HIGH(w,ta);	\ 	ret =  low + (c);		\ 	(c) =  high;			\ 	(c) += (ret<low)?1:0;		\ 	(r) =  ret;			\ 	}
define|#
directive|define
name|sqr
parameter_list|(
name|r0
parameter_list|,
name|r1
parameter_list|,
name|a
parameter_list|)
value|{		\ 	BN_ULONG tmp=(a);		\ 	(r0) = tmp * tmp;		\ 	(r1) = BN_UMULT_HIGH(tmp,tmp);	\ 	}
else|#
directive|else
comment|/*************************************************************  * No long long type  */
define|#
directive|define
name|LBITS
parameter_list|(
name|a
parameter_list|)
value|((a)&BN_MASK2l)
define|#
directive|define
name|HBITS
parameter_list|(
name|a
parameter_list|)
value|(((a)>>BN_BITS4)&BN_MASK2l)
define|#
directive|define
name|L2HBITS
parameter_list|(
name|a
parameter_list|)
value|(((a)<<BN_BITS4)&BN_MASK2)
define|#
directive|define
name|LLBITS
parameter_list|(
name|a
parameter_list|)
value|((a)&BN_MASKl)
define|#
directive|define
name|LHBITS
parameter_list|(
name|a
parameter_list|)
value|(((a)>>BN_BITS2)&BN_MASKl)
define|#
directive|define
name|LL2HBITS
parameter_list|(
name|a
parameter_list|)
value|((BN_ULLONG)((a)&BN_MASKl)<<BN_BITS2)
define|#
directive|define
name|mul64
parameter_list|(
name|l
parameter_list|,
name|h
parameter_list|,
name|bl
parameter_list|,
name|bh
parameter_list|)
define|\
value|{ \ 	BN_ULONG m,m1,lt,ht; \  \ 	lt=l; \ 	ht=h; \ 	m =(bh)*(lt); \ 	lt=(bl)*(lt); \ 	m1=(bl)*(ht); \ 	ht =(bh)*(ht); \ 	m=(m+m1)&BN_MASK2; if (m< m1) ht+=L2HBITS((BN_ULONG)1); \ 	ht+=HBITS(m); \ 	m1=L2HBITS(m); \ 	lt=(lt+m1)&BN_MASK2; if (lt< m1) ht++; \ 	(l)=lt; \ 	(h)=ht; \ 	}
define|#
directive|define
name|sqr64
parameter_list|(
name|lo
parameter_list|,
name|ho
parameter_list|,
name|in
parameter_list|)
define|\
value|{ \ 	BN_ULONG l,h,m; \  \ 	h=(in); \ 	l=LBITS(h); \ 	h=HBITS(h); \ 	m =(l)*(h); \ 	l*=l; \ 	h*=h; \ 	h+=(m&BN_MASK2h1)>>(BN_BITS4-1); \ 	m =(m&BN_MASK2l)<<(BN_BITS4+1); \ 	l=(l+m)&BN_MASK2; if (l< m) h++; \ 	(lo)=l; \ 	(ho)=h; \ 	}
define|#
directive|define
name|mul_add
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|bl
parameter_list|,
name|bh
parameter_list|,
name|c
parameter_list|)
value|{ \ 	BN_ULONG l,h; \  \ 	h= (a); \ 	l=LBITS(h); \ 	h=HBITS(h); \ 	mul64(l,h,(bl),(bh)); \  \
comment|/* non-multiply part */
value|\ 	l=(l+(c))&BN_MASK2; if (l< (c)) h++; \ 	(c)=(r); \ 	l=(l+(c))&BN_MASK2; if (l< (c)) h++; \ 	(c)=h&BN_MASK2; \ 	(r)=l; \ 	}
define|#
directive|define
name|mul
parameter_list|(
name|r
parameter_list|,
name|a
parameter_list|,
name|bl
parameter_list|,
name|bh
parameter_list|,
name|c
parameter_list|)
value|{ \ 	BN_ULONG l,h; \  \ 	h= (a); \ 	l=LBITS(h); \ 	h=HBITS(h); \ 	mul64(l,h,(bl),(bh)); \  \
comment|/* non-multiply part */
value|\ 	l+=(c); if ((l&BN_MASK2)< (c)) h++; \ 	(c)=h&BN_MASK2; \ 	(r)=l&BN_MASK2; \ 	}
endif|#
directive|endif
comment|/* !BN_LLONG */
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_DOING_MAKEDEPEND
argument_list|)
operator|&&
name|defined
argument_list|(
name|OPENSSL_FIPS
argument_list|)
undef|#
directive|undef
name|bn_div_words
endif|#
directive|endif
name|void
name|bn_mul_normal
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|int
name|na
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|nb
parameter_list|)
function_decl|;
name|void
name|bn_mul_comba8
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|)
function_decl|;
name|void
name|bn_mul_comba4
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|)
function_decl|;
name|void
name|bn_sqr_normal
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|,
name|BN_ULONG
modifier|*
name|tmp
parameter_list|)
function_decl|;
name|void
name|bn_sqr_comba8
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|)
function_decl|;
name|void
name|bn_sqr_comba4
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|bn_cmp_words
parameter_list|(
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|bn_cmp_part_words
parameter_list|(
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|cl
parameter_list|,
name|int
name|dl
parameter_list|)
function_decl|;
name|void
name|bn_mul_recursive
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|n2
parameter_list|,
name|int
name|dna
parameter_list|,
name|int
name|dnb
parameter_list|,
name|BN_ULONG
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|bn_mul_part_recursive
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|tna
parameter_list|,
name|int
name|tnb
parameter_list|,
name|BN_ULONG
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|bn_sqr_recursive
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|int
name|n2
parameter_list|,
name|BN_ULONG
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|bn_mul_low_normal
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|bn_mul_low_recursive
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|n2
parameter_list|,
name|BN_ULONG
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|bn_mul_high
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
name|BN_ULONG
modifier|*
name|a
parameter_list|,
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|BN_ULONG
modifier|*
name|l
parameter_list|,
name|int
name|n2
parameter_list|,
name|BN_ULONG
modifier|*
name|t
parameter_list|)
function_decl|;
name|BN_ULONG
name|bn_add_part_words
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|cl
parameter_list|,
name|int
name|dl
parameter_list|)
function_decl|;
name|BN_ULONG
name|bn_sub_part_words
parameter_list|(
name|BN_ULONG
modifier|*
name|r
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|a
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|b
parameter_list|,
name|int
name|cl
parameter_list|,
name|int
name|dl
parameter_list|)
function_decl|;
name|int
name|bn_mul_mont
parameter_list|(
name|BN_ULONG
modifier|*
name|rp
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|ap
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|bp
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|np
parameter_list|,
specifier|const
name|BN_ULONG
modifier|*
name|n0
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

