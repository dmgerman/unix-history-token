begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/x509/x509.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.  * ECDH support in OpenSSL originally developed by   * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_X509_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_X509_H
end_define

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BUFFER
end_ifndef

begin_include
include|#
directive|include
file|<openssl/buffer.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EVP
end_ifndef

begin_include
include|#
directive|include
file|<openssl/evp.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/stack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/asn1.h>
end_include

begin_include
include|#
directive|include
file|<openssl/safestack.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef

begin_include
include|#
directive|include
file|<openssl/ec.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_ECDSA
end_ifndef

begin_include
include|#
directive|include
file|<openssl/ecdsa.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_ECDH
end_ifndef

begin_include
include|#
directive|include
file|<openssl/ecdh.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
end_ifndef

begin_include
include|#
directive|include
file|<openssl/rsa.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
end_ifndef

begin_include
include|#
directive|include
file|<openssl/dsa.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
end_ifndef

begin_include
include|#
directive|include
file|<openssl/dh.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA
end_ifndef

begin_include
include|#
directive|include
file|<openssl/sha.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYS_WIN32
comment|/* Under Win32 these are defined in wincrypt.h */
undef|#
directive|undef
name|X509_NAME
undef|#
directive|undef
name|X509_CERT_PAIR
endif|#
directive|endif
define|#
directive|define
name|X509_FILETYPE_PEM
value|1
define|#
directive|define
name|X509_FILETYPE_ASN1
value|2
define|#
directive|define
name|X509_FILETYPE_DEFAULT
value|3
define|#
directive|define
name|X509v3_KU_DIGITAL_SIGNATURE
value|0x0080
define|#
directive|define
name|X509v3_KU_NON_REPUDIATION
value|0x0040
define|#
directive|define
name|X509v3_KU_KEY_ENCIPHERMENT
value|0x0020
define|#
directive|define
name|X509v3_KU_DATA_ENCIPHERMENT
value|0x0010
define|#
directive|define
name|X509v3_KU_KEY_AGREEMENT
value|0x0008
define|#
directive|define
name|X509v3_KU_KEY_CERT_SIGN
value|0x0004
define|#
directive|define
name|X509v3_KU_CRL_SIGN
value|0x0002
define|#
directive|define
name|X509v3_KU_ENCIPHER_ONLY
value|0x0001
define|#
directive|define
name|X509v3_KU_DECIPHER_ONLY
value|0x8000
define|#
directive|define
name|X509v3_KU_UNDEF
value|0xffff
typedef|typedef
struct|struct
name|X509_objects_st
block|{
name|int
name|nid
decl_stmt|;
name|int
function_decl|(
modifier|*
name|a2i
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|i2a
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
block|}
name|X509_OBJECTS
typedef|;
struct|struct
name|X509_algor_st
block|{
name|ASN1_OBJECT
modifier|*
name|algorithm
decl_stmt|;
name|ASN1_TYPE
modifier|*
name|parameter
decl_stmt|;
block|}
comment|/* X509_ALGOR */
struct|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_ALGOR
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|X509_ALGOR
argument_list|)
typedef|typedef
struct|struct
name|X509_val_st
block|{
name|ASN1_TIME
modifier|*
name|notBefore
decl_stmt|;
name|ASN1_TIME
modifier|*
name|notAfter
decl_stmt|;
block|}
name|X509_VAL
typedef|;
typedef|typedef
struct|struct
name|X509_pubkey_st
block|{
name|X509_ALGOR
modifier|*
name|algor
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|public_key
decl_stmt|;
name|EVP_PKEY
modifier|*
name|pkey
decl_stmt|;
block|}
name|X509_PUBKEY
typedef|;
typedef|typedef
struct|struct
name|X509_sig_st
block|{
name|X509_ALGOR
modifier|*
name|algor
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|digest
decl_stmt|;
block|}
name|X509_SIG
typedef|;
typedef|typedef
struct|struct
name|X509_name_entry_st
block|{
name|ASN1_OBJECT
modifier|*
name|object
decl_stmt|;
name|ASN1_STRING
modifier|*
name|value
decl_stmt|;
name|int
name|set
decl_stmt|;
name|int
name|size
decl_stmt|;
comment|/* temp variable */
block|}
name|X509_NAME_ENTRY
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_NAME_ENTRY
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|X509_NAME_ENTRY
argument_list|)
comment|/* we always keep X509_NAMEs in 2 forms. */
struct|struct
name|X509_name_st
block|{
name|STACK_OF
argument_list|(
name|X509_NAME_ENTRY
argument_list|)
operator|*
name|entries
expr_stmt|;
name|int
name|modified
decl_stmt|;
comment|/* true if 'bytes' needs to be built */
ifndef|#
directive|ifndef
name|OPENSSL_NO_BUFFER
name|BUF_MEM
modifier|*
name|bytes
decl_stmt|;
else|#
directive|else
name|char
modifier|*
name|bytes
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|long
name|hash
decl_stmt|;
comment|/* Keep the hash around for lookups */
block|}
comment|/* X509_NAME */
struct|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_NAME
argument_list|)
define|#
directive|define
name|X509_EX_V_NETSCAPE_HACK
value|0x8000
define|#
directive|define
name|X509_EX_V_INIT
value|0x0001
typedef|typedef
struct|struct
name|X509_extension_st
block|{
name|ASN1_OBJECT
modifier|*
name|object
decl_stmt|;
name|ASN1_BOOLEAN
name|critical
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|value
decl_stmt|;
block|}
name|X509_EXTENSION
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_EXTENSION
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|X509_EXTENSION
argument_list|)
comment|/* a sequence of these are used */
typedef|typedef
struct|struct
name|x509_attributes_st
block|{
name|ASN1_OBJECT
modifier|*
name|object
decl_stmt|;
name|int
name|single
decl_stmt|;
comment|/* 0 for a set, 1 for a single item (which is wrong) */
union|union
block|{
name|char
modifier|*
name|ptr
decl_stmt|;
comment|/* 0 */
name|STACK_OF
argument_list|(
name|ASN1_TYPE
argument_list|)
operator|*
name|set
expr_stmt|;
comment|/* 1 */
name|ASN1_TYPE
modifier|*
name|single
decl_stmt|;
block|}
name|value
union|;
block|}
name|X509_ATTRIBUTE
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_ATTRIBUTE
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|X509_ATTRIBUTE
argument_list|)
typedef|typedef
struct|struct
name|X509_req_info_st
block|{
name|ASN1_ENCODING
name|enc
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|version
decl_stmt|;
name|X509_NAME
modifier|*
name|subject
decl_stmt|;
name|X509_PUBKEY
modifier|*
name|pubkey
decl_stmt|;
comment|/*  d=2 hl=2 l=  0 cons: cont: 00 */
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|attributes
expr_stmt|;
comment|/* [ 0 ] */
block|}
name|X509_REQ_INFO
typedef|;
typedef|typedef
struct|struct
name|X509_req_st
block|{
name|X509_REQ_INFO
modifier|*
name|req_info
decl_stmt|;
name|X509_ALGOR
modifier|*
name|sig_alg
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|signature
decl_stmt|;
name|int
name|references
decl_stmt|;
block|}
name|X509_REQ
typedef|;
typedef|typedef
struct|struct
name|x509_cinf_st
block|{
name|ASN1_INTEGER
modifier|*
name|version
decl_stmt|;
comment|/* [ 0 ] default of v1 */
name|ASN1_INTEGER
modifier|*
name|serialNumber
decl_stmt|;
name|X509_ALGOR
modifier|*
name|signature
decl_stmt|;
name|X509_NAME
modifier|*
name|issuer
decl_stmt|;
name|X509_VAL
modifier|*
name|validity
decl_stmt|;
name|X509_NAME
modifier|*
name|subject
decl_stmt|;
name|X509_PUBKEY
modifier|*
name|key
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|issuerUID
decl_stmt|;
comment|/* [ 1 ] optional in v2 */
name|ASN1_BIT_STRING
modifier|*
name|subjectUID
decl_stmt|;
comment|/* [ 2 ] optional in v2 */
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|extensions
expr_stmt|;
comment|/* [ 3 ] optional in v3 */
block|}
name|X509_CINF
typedef|;
comment|/* This stuff is certificate "auxiliary info"  * it contains details which are useful in certificate  * stores and databases. When used this is tagged onto  * the end of the certificate itself  */
typedef|typedef
struct|struct
name|x509_cert_aux_st
block|{
name|STACK_OF
argument_list|(
name|ASN1_OBJECT
argument_list|)
operator|*
name|trust
expr_stmt|;
comment|/* trusted uses */
name|STACK_OF
argument_list|(
name|ASN1_OBJECT
argument_list|)
operator|*
name|reject
expr_stmt|;
comment|/* rejected uses */
name|ASN1_UTF8STRING
modifier|*
name|alias
decl_stmt|;
comment|/* "friendly name" */
name|ASN1_OCTET_STRING
modifier|*
name|keyid
decl_stmt|;
comment|/* key id of private key */
name|STACK_OF
argument_list|(
name|X509_ALGOR
argument_list|)
operator|*
name|other
expr_stmt|;
comment|/* other unspecified info */
block|}
name|X509_CERT_AUX
typedef|;
struct|struct
name|x509_st
block|{
name|X509_CINF
modifier|*
name|cert_info
decl_stmt|;
name|X509_ALGOR
modifier|*
name|sig_alg
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|signature
decl_stmt|;
name|int
name|valid
decl_stmt|;
name|int
name|references
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
comment|/* These contain copies of various extension values */
name|long
name|ex_pathlen
decl_stmt|;
name|long
name|ex_pcpathlen
decl_stmt|;
name|unsigned
name|long
name|ex_flags
decl_stmt|;
name|unsigned
name|long
name|ex_kusage
decl_stmt|;
name|unsigned
name|long
name|ex_xkusage
decl_stmt|;
name|unsigned
name|long
name|ex_nscert
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|skid
decl_stmt|;
name|struct
name|AUTHORITY_KEYID_st
modifier|*
name|akid
decl_stmt|;
name|X509_POLICY_CACHE
modifier|*
name|policy_cache
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA
name|unsigned
name|char
name|sha1_hash
index|[
name|SHA_DIGEST_LENGTH
index|]
decl_stmt|;
endif|#
directive|endif
name|X509_CERT_AUX
modifier|*
name|aux
decl_stmt|;
block|}
comment|/* X509 */
struct|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|X509
argument_list|)
comment|/* This is used for a table of trust checking functions */
typedef|typedef
struct|struct
name|x509_trust_st
block|{
name|int
name|trust
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
function_decl|(
modifier|*
name|check_trust
function_decl|)
parameter_list|(
name|struct
name|x509_trust_st
modifier|*
parameter_list|,
name|X509
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|arg1
decl_stmt|;
name|void
modifier|*
name|arg2
decl_stmt|;
block|}
name|X509_TRUST
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_TRUST
argument_list|)
typedef|typedef
struct|struct
name|x509_cert_pair_st
block|{
name|X509
modifier|*
name|forward
decl_stmt|;
name|X509
modifier|*
name|reverse
decl_stmt|;
block|}
name|X509_CERT_PAIR
typedef|;
comment|/* standard trust ids */
define|#
directive|define
name|X509_TRUST_DEFAULT
value|-1
comment|/* Only valid in purpose settings */
define|#
directive|define
name|X509_TRUST_COMPAT
value|1
define|#
directive|define
name|X509_TRUST_SSL_CLIENT
value|2
define|#
directive|define
name|X509_TRUST_SSL_SERVER
value|3
define|#
directive|define
name|X509_TRUST_EMAIL
value|4
define|#
directive|define
name|X509_TRUST_OBJECT_SIGN
value|5
define|#
directive|define
name|X509_TRUST_OCSP_SIGN
value|6
define|#
directive|define
name|X509_TRUST_OCSP_REQUEST
value|7
comment|/* Keep these up to date! */
define|#
directive|define
name|X509_TRUST_MIN
value|1
define|#
directive|define
name|X509_TRUST_MAX
value|7
comment|/* trust_flags values */
define|#
directive|define
name|X509_TRUST_DYNAMIC
value|1
define|#
directive|define
name|X509_TRUST_DYNAMIC_NAME
value|2
comment|/* check_trust return codes */
define|#
directive|define
name|X509_TRUST_TRUSTED
value|1
define|#
directive|define
name|X509_TRUST_REJECTED
value|2
define|#
directive|define
name|X509_TRUST_UNTRUSTED
value|3
comment|/* Flags for X509_print_ex() */
define|#
directive|define
name|X509_FLAG_COMPAT
value|0
define|#
directive|define
name|X509_FLAG_NO_HEADER
value|1L
define|#
directive|define
name|X509_FLAG_NO_VERSION
value|(1L<< 1)
define|#
directive|define
name|X509_FLAG_NO_SERIAL
value|(1L<< 2)
define|#
directive|define
name|X509_FLAG_NO_SIGNAME
value|(1L<< 3)
define|#
directive|define
name|X509_FLAG_NO_ISSUER
value|(1L<< 4)
define|#
directive|define
name|X509_FLAG_NO_VALIDITY
value|(1L<< 5)
define|#
directive|define
name|X509_FLAG_NO_SUBJECT
value|(1L<< 6)
define|#
directive|define
name|X509_FLAG_NO_PUBKEY
value|(1L<< 7)
define|#
directive|define
name|X509_FLAG_NO_EXTENSIONS
value|(1L<< 8)
define|#
directive|define
name|X509_FLAG_NO_SIGDUMP
value|(1L<< 9)
define|#
directive|define
name|X509_FLAG_NO_AUX
value|(1L<< 10)
define|#
directive|define
name|X509_FLAG_NO_ATTRIBUTES
value|(1L<< 11)
comment|/* Flags specific to X509_NAME_print_ex() */
comment|/* The field separator information */
define|#
directive|define
name|XN_FLAG_SEP_MASK
value|(0xf<< 16)
define|#
directive|define
name|XN_FLAG_COMPAT
value|0
comment|/* Traditional SSLeay: use old X509_NAME_print */
define|#
directive|define
name|XN_FLAG_SEP_COMMA_PLUS
value|(1<< 16)
comment|/* RFC2253 ,+ */
define|#
directive|define
name|XN_FLAG_SEP_CPLUS_SPC
value|(2<< 16)
comment|/* ,+ spaced: more readable */
define|#
directive|define
name|XN_FLAG_SEP_SPLUS_SPC
value|(3<< 16)
comment|/* ;+ spaced */
define|#
directive|define
name|XN_FLAG_SEP_MULTILINE
value|(4<< 16)
comment|/* One line per field */
define|#
directive|define
name|XN_FLAG_DN_REV
value|(1<< 20)
comment|/* Reverse DN order */
comment|/* How the field name is shown */
define|#
directive|define
name|XN_FLAG_FN_MASK
value|(0x3<< 21)
define|#
directive|define
name|XN_FLAG_FN_SN
value|0
comment|/* Object short name */
define|#
directive|define
name|XN_FLAG_FN_LN
value|(1<< 21)
comment|/* Object long name */
define|#
directive|define
name|XN_FLAG_FN_OID
value|(2<< 21)
comment|/* Always use OIDs */
define|#
directive|define
name|XN_FLAG_FN_NONE
value|(3<< 21)
comment|/* No field names */
define|#
directive|define
name|XN_FLAG_SPC_EQ
value|(1<< 23)
comment|/* Put spaces round '=' */
comment|/* This determines if we dump fields we don't recognise:  * RFC2253 requires this.  */
define|#
directive|define
name|XN_FLAG_DUMP_UNKNOWN_FIELDS
value|(1<< 24)
define|#
directive|define
name|XN_FLAG_FN_ALIGN
value|(1<< 25)
comment|/* Align field names to 20 characters */
comment|/* Complete set of RFC2253 flags */
define|#
directive|define
name|XN_FLAG_RFC2253
value|(ASN1_STRFLGS_RFC2253 | \ 			XN_FLAG_SEP_COMMA_PLUS | \ 			XN_FLAG_DN_REV | \ 			XN_FLAG_FN_SN | \ 			XN_FLAG_DUMP_UNKNOWN_FIELDS)
comment|/* readable oneline form */
define|#
directive|define
name|XN_FLAG_ONELINE
value|(ASN1_STRFLGS_RFC2253 | \ 			ASN1_STRFLGS_ESC_QUOTE | \ 			XN_FLAG_SEP_CPLUS_SPC | \ 			XN_FLAG_SPC_EQ | \ 			XN_FLAG_FN_SN)
comment|/* readable multiline form */
define|#
directive|define
name|XN_FLAG_MULTILINE
value|(ASN1_STRFLGS_ESC_CTRL | \ 			ASN1_STRFLGS_ESC_MSB | \ 			XN_FLAG_SEP_MULTILINE | \ 			XN_FLAG_SPC_EQ | \ 			XN_FLAG_FN_LN | \ 			XN_FLAG_FN_ALIGN)
typedef|typedef
struct|struct
name|X509_revoked_st
block|{
name|ASN1_INTEGER
modifier|*
name|serialNumber
decl_stmt|;
name|ASN1_TIME
modifier|*
name|revocationDate
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
comment|/* optional */
operator|*
name|extensions
expr_stmt|;
name|int
name|sequence
decl_stmt|;
comment|/* load sequence */
block|}
name|X509_REVOKED
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_REVOKED
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|X509_REVOKED
argument_list|)
typedef|typedef
struct|struct
name|X509_crl_info_st
block|{
name|ASN1_INTEGER
modifier|*
name|version
decl_stmt|;
name|X509_ALGOR
modifier|*
name|sig_alg
decl_stmt|;
name|X509_NAME
modifier|*
name|issuer
decl_stmt|;
name|ASN1_TIME
modifier|*
name|lastUpdate
decl_stmt|;
name|ASN1_TIME
modifier|*
name|nextUpdate
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_REVOKED
argument_list|)
operator|*
name|revoked
expr_stmt|;
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
comment|/* [0] */
operator|*
name|extensions
expr_stmt|;
name|ASN1_ENCODING
name|enc
decl_stmt|;
block|}
name|X509_CRL_INFO
typedef|;
struct|struct
name|X509_crl_st
block|{
comment|/* actual signature */
name|X509_CRL_INFO
modifier|*
name|crl
decl_stmt|;
name|X509_ALGOR
modifier|*
name|sig_alg
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|signature
decl_stmt|;
name|int
name|references
decl_stmt|;
block|}
comment|/* X509_CRL */
struct|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_CRL
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|X509_CRL
argument_list|)
typedef|typedef
struct|struct
name|private_key_st
block|{
name|int
name|version
decl_stmt|;
comment|/* The PKCS#8 data types */
name|X509_ALGOR
modifier|*
name|enc_algor
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|enc_pkey
decl_stmt|;
comment|/* encrypted pub key */
comment|/* When decrypted, the following will not be NULL */
name|EVP_PKEY
modifier|*
name|dec_pkey
decl_stmt|;
comment|/* used to encrypt and decrypt */
name|int
name|key_length
decl_stmt|;
name|char
modifier|*
name|key_data
decl_stmt|;
name|int
name|key_free
decl_stmt|;
comment|/* true if we should auto free key_data */
comment|/* expanded version of 'enc_algor' */
name|EVP_CIPHER_INFO
name|cipher
decl_stmt|;
name|int
name|references
decl_stmt|;
block|}
name|X509_PKEY
typedef|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EVP
typedef|typedef
struct|struct
name|X509_info_st
block|{
name|X509
modifier|*
name|x509
decl_stmt|;
name|X509_CRL
modifier|*
name|crl
decl_stmt|;
name|X509_PKEY
modifier|*
name|x_pkey
decl_stmt|;
name|EVP_CIPHER_INFO
name|enc_cipher
decl_stmt|;
name|int
name|enc_len
decl_stmt|;
name|char
modifier|*
name|enc_data
decl_stmt|;
name|int
name|references
decl_stmt|;
block|}
name|X509_INFO
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_INFO
argument_list|)
endif|#
directive|endif
comment|/* The next 2 structures and their 8 routines were sent to me by  * Pat Richard<patr@x509.com> and are used to manipulate  * Netscapes spki structures - useful if you are writing a CA web page  */
typedef|typedef
struct|struct
name|Netscape_spkac_st
block|{
name|X509_PUBKEY
modifier|*
name|pubkey
decl_stmt|;
name|ASN1_IA5STRING
modifier|*
name|challenge
decl_stmt|;
comment|/* challenge sent in atlas>= PR2 */
block|}
name|NETSCAPE_SPKAC
typedef|;
typedef|typedef
struct|struct
name|Netscape_spki_st
block|{
name|NETSCAPE_SPKAC
modifier|*
name|spkac
decl_stmt|;
comment|/* signed public key and challenge */
name|X509_ALGOR
modifier|*
name|sig_algor
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|signature
decl_stmt|;
block|}
name|NETSCAPE_SPKI
typedef|;
comment|/* Netscape certificate sequence structure */
typedef|typedef
struct|struct
name|Netscape_certificate_sequence
block|{
name|ASN1_OBJECT
modifier|*
name|type
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|certs
expr_stmt|;
block|}
name|NETSCAPE_CERT_SEQUENCE
typedef|;
comment|/* Unused (and iv length is wrong) typedef struct CBCParameter_st 	{ 	unsigned char iv[8]; 	} CBC_PARAM; */
comment|/* Password based encryption structure */
typedef|typedef
struct|struct
name|PBEPARAM_st
block|{
name|ASN1_OCTET_STRING
modifier|*
name|salt
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|iter
decl_stmt|;
block|}
name|PBEPARAM
typedef|;
comment|/* Password based encryption V2 structures */
typedef|typedef
struct|struct
name|PBE2PARAM_st
block|{
name|X509_ALGOR
modifier|*
name|keyfunc
decl_stmt|;
name|X509_ALGOR
modifier|*
name|encryption
decl_stmt|;
block|}
name|PBE2PARAM
typedef|;
typedef|typedef
struct|struct
name|PBKDF2PARAM_st
block|{
name|ASN1_TYPE
modifier|*
name|salt
decl_stmt|;
comment|/* Usually OCTET STRING but could be anything */
name|ASN1_INTEGER
modifier|*
name|iter
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|keylength
decl_stmt|;
name|X509_ALGOR
modifier|*
name|prf
decl_stmt|;
block|}
name|PBKDF2PARAM
typedef|;
comment|/* PKCS#8 private key info structure */
typedef|typedef
struct|struct
name|pkcs8_priv_key_info_st
block|{
name|int
name|broken
decl_stmt|;
comment|/* Flag for various broken formats */
define|#
directive|define
name|PKCS8_OK
value|0
define|#
directive|define
name|PKCS8_NO_OCTET
value|1
define|#
directive|define
name|PKCS8_EMBEDDED_PARAM
value|2
define|#
directive|define
name|PKCS8_NS_DB
value|3
name|ASN1_INTEGER
modifier|*
name|version
decl_stmt|;
name|X509_ALGOR
modifier|*
name|pkeyalg
decl_stmt|;
name|ASN1_TYPE
modifier|*
name|pkey
decl_stmt|;
comment|/* Should be OCTET STRING but some are broken */
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|attributes
expr_stmt|;
block|}
name|PKCS8_PRIV_KEY_INFO
typedef|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/x509_vfy.h>
end_include

begin_include
include|#
directive|include
file|<openssl/pkcs7.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
define|#
directive|define
name|X509_verify
parameter_list|(
name|a
parameter_list|,
name|r
parameter_list|)
value|ASN1_verify((int (*)())i2d_X509_CINF,a->sig_alg,\ 	a->signature,(char *)a->cert_info,r)
define|#
directive|define
name|X509_REQ_verify
parameter_list|(
name|a
parameter_list|,
name|r
parameter_list|)
value|ASN1_verify((int (*)())i2d_X509_REQ_INFO, \ 	a->sig_alg,a->signature,(char *)a->req_info,r)
define|#
directive|define
name|X509_CRL_verify
parameter_list|(
name|a
parameter_list|,
name|r
parameter_list|)
value|ASN1_verify((int (*)())i2d_X509_CRL_INFO, \ 	a->sig_alg, a->signature,(char *)a->crl,r)
define|#
directive|define
name|X509_sign
parameter_list|(
name|x
parameter_list|,
name|pkey
parameter_list|,
name|md
parameter_list|)
define|\
value|ASN1_sign((int (*)())i2d_X509_CINF, x->cert_info->signature, \ 		x->sig_alg, x->signature, (char *)x->cert_info,pkey,md)
define|#
directive|define
name|X509_REQ_sign
parameter_list|(
name|x
parameter_list|,
name|pkey
parameter_list|,
name|md
parameter_list|)
define|\
value|ASN1_sign((int (*)())i2d_X509_REQ_INFO,x->sig_alg, NULL, \ 		x->signature, (char *)x->req_info,pkey,md)
define|#
directive|define
name|X509_CRL_sign
parameter_list|(
name|x
parameter_list|,
name|pkey
parameter_list|,
name|md
parameter_list|)
define|\
value|ASN1_sign((int (*)())i2d_X509_CRL_INFO,x->crl->sig_alg,x->sig_alg, \ 		x->signature, (char *)x->crl,pkey,md)
define|#
directive|define
name|NETSCAPE_SPKI_sign
parameter_list|(
name|x
parameter_list|,
name|pkey
parameter_list|,
name|md
parameter_list|)
define|\
value|ASN1_sign((int (*)())i2d_NETSCAPE_SPKAC, x->sig_algor,NULL, \ 		x->signature, (char *)x->spkac,pkey,md)
define|#
directive|define
name|X509_dup
parameter_list|(
name|x509
parameter_list|)
value|(X509 *)ASN1_dup((int (*)())i2d_X509, \ 		(char *(*)())d2i_X509,(char *)x509)
define|#
directive|define
name|X509_ATTRIBUTE_dup
parameter_list|(
name|xa
parameter_list|)
value|(X509_ATTRIBUTE *)ASN1_dup(\ 		(int (*)())i2d_X509_ATTRIBUTE, \ 		(char *(*)())d2i_X509_ATTRIBUTE,(char *)xa)
define|#
directive|define
name|X509_EXTENSION_dup
parameter_list|(
name|ex
parameter_list|)
value|(X509_EXTENSION *)ASN1_dup( \ 		(int (*)())i2d_X509_EXTENSION, \ 		(char *(*)())d2i_X509_EXTENSION,(char *)ex)
define|#
directive|define
name|d2i_X509_fp
parameter_list|(
name|fp
parameter_list|,
name|x509
parameter_list|)
value|(X509 *)ASN1_d2i_fp((char *(*)())X509_new, \ 		(char *(*)())d2i_X509, (fp),(unsigned char **)(x509))
define|#
directive|define
name|i2d_X509_fp
parameter_list|(
name|fp
parameter_list|,
name|x509
parameter_list|)
value|ASN1_i2d_fp(i2d_X509,fp,(unsigned char *)x509)
define|#
directive|define
name|d2i_X509_bio
parameter_list|(
name|bp
parameter_list|,
name|x509
parameter_list|)
value|(X509 *)ASN1_d2i_bio((char *(*)())X509_new, \ 		(char *(*)())d2i_X509, (bp),(unsigned char **)(x509))
define|#
directive|define
name|i2d_X509_bio
parameter_list|(
name|bp
parameter_list|,
name|x509
parameter_list|)
value|ASN1_i2d_bio(i2d_X509,bp,(unsigned char *)x509)
define|#
directive|define
name|X509_CRL_dup
parameter_list|(
name|crl
parameter_list|)
value|(X509_CRL *)ASN1_dup((int (*)())i2d_X509_CRL, \ 		(char *(*)())d2i_X509_CRL,(char *)crl)
define|#
directive|define
name|d2i_X509_CRL_fp
parameter_list|(
name|fp
parameter_list|,
name|crl
parameter_list|)
value|(X509_CRL *)ASN1_d2i_fp((char *(*)()) \ 		X509_CRL_new,(char *(*)())d2i_X509_CRL, (fp),\ 		(unsigned char **)(crl))
define|#
directive|define
name|i2d_X509_CRL_fp
parameter_list|(
name|fp
parameter_list|,
name|crl
parameter_list|)
value|ASN1_i2d_fp(i2d_X509_CRL,fp,\ 		(unsigned char *)crl)
define|#
directive|define
name|d2i_X509_CRL_bio
parameter_list|(
name|bp
parameter_list|,
name|crl
parameter_list|)
value|(X509_CRL *)ASN1_d2i_bio((char *(*)()) \ 		X509_CRL_new,(char *(*)())d2i_X509_CRL, (bp),\ 		(unsigned char **)(crl))
define|#
directive|define
name|i2d_X509_CRL_bio
parameter_list|(
name|bp
parameter_list|,
name|crl
parameter_list|)
value|ASN1_i2d_bio(i2d_X509_CRL,bp,\ 		(unsigned char *)crl)
define|#
directive|define
name|PKCS7_dup
parameter_list|(
name|p7
parameter_list|)
value|(PKCS7 *)ASN1_dup((int (*)())i2d_PKCS7, \ 		(char *(*)())d2i_PKCS7,(char *)p7)
define|#
directive|define
name|d2i_PKCS7_fp
parameter_list|(
name|fp
parameter_list|,
name|p7
parameter_list|)
value|(PKCS7 *)ASN1_d2i_fp((char *(*)()) \ 		PKCS7_new,(char *(*)())d2i_PKCS7, (fp),\ 		(unsigned char **)(p7))
define|#
directive|define
name|i2d_PKCS7_fp
parameter_list|(
name|fp
parameter_list|,
name|p7
parameter_list|)
value|ASN1_i2d_fp(i2d_PKCS7,fp,\ 		(unsigned char *)p7)
define|#
directive|define
name|d2i_PKCS7_bio
parameter_list|(
name|bp
parameter_list|,
name|p7
parameter_list|)
value|(PKCS7 *)ASN1_d2i_bio((char *(*)()) \ 		PKCS7_new,(char *(*)())d2i_PKCS7, (bp),\ 		(unsigned char **)(p7))
define|#
directive|define
name|i2d_PKCS7_bio
parameter_list|(
name|bp
parameter_list|,
name|p7
parameter_list|)
value|ASN1_i2d_bio(i2d_PKCS7,bp,\ 		(unsigned char *)p7)
define|#
directive|define
name|X509_REQ_dup
parameter_list|(
name|req
parameter_list|)
value|(X509_REQ *)ASN1_dup((int (*)())i2d_X509_REQ, \ 		(char *(*)())d2i_X509_REQ,(char *)req)
define|#
directive|define
name|d2i_X509_REQ_fp
parameter_list|(
name|fp
parameter_list|,
name|req
parameter_list|)
value|(X509_REQ *)ASN1_d2i_fp((char *(*)())\ 		X509_REQ_new, (char *(*)())d2i_X509_REQ, (fp),\ 		(unsigned char **)(req))
define|#
directive|define
name|i2d_X509_REQ_fp
parameter_list|(
name|fp
parameter_list|,
name|req
parameter_list|)
value|ASN1_i2d_fp(i2d_X509_REQ,fp,\ 		(unsigned char *)req)
define|#
directive|define
name|d2i_X509_REQ_bio
parameter_list|(
name|bp
parameter_list|,
name|req
parameter_list|)
value|(X509_REQ *)ASN1_d2i_bio((char *(*)())\ 		X509_REQ_new, (char *(*)())d2i_X509_REQ, (bp),\ 		(unsigned char **)(req))
define|#
directive|define
name|i2d_X509_REQ_bio
parameter_list|(
name|bp
parameter_list|,
name|req
parameter_list|)
value|ASN1_i2d_bio(i2d_X509_REQ,bp,\ 		(unsigned char *)req)
define|#
directive|define
name|RSAPublicKey_dup
parameter_list|(
name|rsa
parameter_list|)
value|(RSA *)ASN1_dup((int (*)())i2d_RSAPublicKey, \ 		(char *(*)())d2i_RSAPublicKey,(char *)rsa)
define|#
directive|define
name|RSAPrivateKey_dup
parameter_list|(
name|rsa
parameter_list|)
value|(RSA *)ASN1_dup((int (*)())i2d_RSAPrivateKey, \ 		(char *(*)())d2i_RSAPrivateKey,(char *)rsa)
define|#
directive|define
name|d2i_RSAPrivateKey_fp
parameter_list|(
name|fp
parameter_list|,
name|rsa
parameter_list|)
value|(RSA *)ASN1_d2i_fp((char *(*)())\ 		RSA_new,(char *(*)())d2i_RSAPrivateKey, (fp), \ 		(unsigned char **)(rsa))
define|#
directive|define
name|i2d_RSAPrivateKey_fp
parameter_list|(
name|fp
parameter_list|,
name|rsa
parameter_list|)
value|ASN1_i2d_fp(i2d_RSAPrivateKey,fp, \ 		(unsigned char *)rsa)
define|#
directive|define
name|d2i_RSAPrivateKey_bio
parameter_list|(
name|bp
parameter_list|,
name|rsa
parameter_list|)
value|(RSA *)ASN1_d2i_bio((char *(*)())\ 		RSA_new,(char *(*)())d2i_RSAPrivateKey, (bp), \ 		(unsigned char **)(rsa))
define|#
directive|define
name|i2d_RSAPrivateKey_bio
parameter_list|(
name|bp
parameter_list|,
name|rsa
parameter_list|)
value|ASN1_i2d_bio(i2d_RSAPrivateKey,bp, \ 		(unsigned char *)rsa)
define|#
directive|define
name|d2i_RSAPublicKey_fp
parameter_list|(
name|fp
parameter_list|,
name|rsa
parameter_list|)
value|(RSA *)ASN1_d2i_fp((char *(*)())\ 		RSA_new,(char *(*)())d2i_RSAPublicKey, (fp), \ 		(unsigned char **)(rsa))
define|#
directive|define
name|i2d_RSAPublicKey_fp
parameter_list|(
name|fp
parameter_list|,
name|rsa
parameter_list|)
value|ASN1_i2d_fp(i2d_RSAPublicKey,fp, \ 		(unsigned char *)rsa)
define|#
directive|define
name|d2i_RSAPublicKey_bio
parameter_list|(
name|bp
parameter_list|,
name|rsa
parameter_list|)
value|(RSA *)ASN1_d2i_bio((char *(*)())\ 		RSA_new,(char *(*)())d2i_RSAPublicKey, (bp), \ 		(unsigned char **)(rsa))
define|#
directive|define
name|i2d_RSAPublicKey_bio
parameter_list|(
name|bp
parameter_list|,
name|rsa
parameter_list|)
value|ASN1_i2d_bio(i2d_RSAPublicKey,bp, \ 		(unsigned char *)rsa)
define|#
directive|define
name|d2i_DSAPrivateKey_fp
parameter_list|(
name|fp
parameter_list|,
name|dsa
parameter_list|)
value|(DSA *)ASN1_d2i_fp((char *(*)())\ 		DSA_new,(char *(*)())d2i_DSAPrivateKey, (fp), \ 		(unsigned char **)(dsa))
define|#
directive|define
name|i2d_DSAPrivateKey_fp
parameter_list|(
name|fp
parameter_list|,
name|dsa
parameter_list|)
value|ASN1_i2d_fp(i2d_DSAPrivateKey,fp, \ 		(unsigned char *)dsa)
define|#
directive|define
name|d2i_DSAPrivateKey_bio
parameter_list|(
name|bp
parameter_list|,
name|dsa
parameter_list|)
value|(DSA *)ASN1_d2i_bio((char *(*)())\ 		DSA_new,(char *(*)())d2i_DSAPrivateKey, (bp), \ 		(unsigned char **)(dsa))
define|#
directive|define
name|i2d_DSAPrivateKey_bio
parameter_list|(
name|bp
parameter_list|,
name|dsa
parameter_list|)
value|ASN1_i2d_bio(i2d_DSAPrivateKey,bp, \ 		(unsigned char *)dsa)
define|#
directive|define
name|d2i_ECPrivateKey_fp
parameter_list|(
name|fp
parameter_list|,
name|ecdsa
parameter_list|)
value|(EC_KEY *)ASN1_d2i_fp((char *(*)())\ 		EC_KEY_new,(char *(*)())d2i_ECPrivateKey, (fp), \ 		(unsigned char **)(ecdsa))
define|#
directive|define
name|i2d_ECPrivateKey_fp
parameter_list|(
name|fp
parameter_list|,
name|ecdsa
parameter_list|)
value|ASN1_i2d_fp(i2d_ECPrivateKey,fp, \ 		(unsigned char *)ecdsa)
define|#
directive|define
name|d2i_ECPrivateKey_bio
parameter_list|(
name|bp
parameter_list|,
name|ecdsa
parameter_list|)
value|(EC_KEY *)ASN1_d2i_bio((char *(*)())\ 		EC_KEY_new,(char *(*)())d2i_ECPrivateKey, (bp), \ 		(unsigned char **)(ecdsa))
define|#
directive|define
name|i2d_ECPrivateKey_bio
parameter_list|(
name|bp
parameter_list|,
name|ecdsa
parameter_list|)
value|ASN1_i2d_bio(i2d_ECPrivateKey,bp, \ 		(unsigned char *)ecdsa)
define|#
directive|define
name|X509_ALGOR_dup
parameter_list|(
name|xn
parameter_list|)
value|(X509_ALGOR *)ASN1_dup((int (*)())i2d_X509_ALGOR,\ 		(char *(*)())d2i_X509_ALGOR,(char *)xn)
define|#
directive|define
name|X509_NAME_dup
parameter_list|(
name|xn
parameter_list|)
value|(X509_NAME *)ASN1_dup((int (*)())i2d_X509_NAME, \ 		(char *(*)())d2i_X509_NAME,(char *)xn)
define|#
directive|define
name|X509_NAME_ENTRY_dup
parameter_list|(
name|ne
parameter_list|)
value|(X509_NAME_ENTRY *)ASN1_dup( \ 		(int (*)())i2d_X509_NAME_ENTRY, \ 		(char *(*)())d2i_X509_NAME_ENTRY,\ 		(char *)ne)
define|#
directive|define
name|X509_digest
parameter_list|(
name|data
parameter_list|,
name|type
parameter_list|,
name|md
parameter_list|,
name|len
parameter_list|)
define|\
value|ASN1_digest((int (*)())i2d_X509,type,(char *)data,md,len)
define|#
directive|define
name|X509_NAME_digest
parameter_list|(
name|data
parameter_list|,
name|type
parameter_list|,
name|md
parameter_list|,
name|len
parameter_list|)
define|\
value|ASN1_digest((int (*)())i2d_X509_NAME,type,(char *)data,md,len)
ifndef|#
directive|ifndef
name|PKCS7_ISSUER_AND_SERIAL_digest
define|#
directive|define
name|PKCS7_ISSUER_AND_SERIAL_digest
parameter_list|(
name|data
parameter_list|,
name|type
parameter_list|,
name|md
parameter_list|,
name|len
parameter_list|)
define|\
value|ASN1_digest((int (*)())i2d_PKCS7_ISSUER_AND_SERIAL,type,\ 		(char *)data,md,len)
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|X509_EXT_PACK_UNKNOWN
value|1
define|#
directive|define
name|X509_EXT_PACK_STRING
value|2
define|#
directive|define
name|X509_get_version
parameter_list|(
name|x
parameter_list|)
value|ASN1_INTEGER_get((x)->cert_info->version)
comment|/* #define	X509_get_serialNumber(x) ((x)->cert_info->serialNumber) */
define|#
directive|define
name|X509_get_notBefore
parameter_list|(
name|x
parameter_list|)
value|((x)->cert_info->validity->notBefore)
define|#
directive|define
name|X509_get_notAfter
parameter_list|(
name|x
parameter_list|)
value|((x)->cert_info->validity->notAfter)
define|#
directive|define
name|X509_extract_key
parameter_list|(
name|x
parameter_list|)
value|X509_get_pubkey(x)
comment|/*****/
define|#
directive|define
name|X509_REQ_get_version
parameter_list|(
name|x
parameter_list|)
value|ASN1_INTEGER_get((x)->req_info->version)
define|#
directive|define
name|X509_REQ_get_subject_name
parameter_list|(
name|x
parameter_list|)
value|((x)->req_info->subject)
define|#
directive|define
name|X509_REQ_extract_key
parameter_list|(
name|a
parameter_list|)
value|X509_REQ_get_pubkey(a)
define|#
directive|define
name|X509_name_cmp
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|X509_NAME_cmp((a),(b))
define|#
directive|define
name|X509_get_signature_type
parameter_list|(
name|x
parameter_list|)
value|EVP_PKEY_type(OBJ_obj2nid((x)->sig_alg->algorithm))
define|#
directive|define
name|X509_CRL_get_version
parameter_list|(
name|x
parameter_list|)
value|ASN1_INTEGER_get((x)->crl->version)
define|#
directive|define
name|X509_CRL_get_lastUpdate
parameter_list|(
name|x
parameter_list|)
value|((x)->crl->lastUpdate)
define|#
directive|define
name|X509_CRL_get_nextUpdate
parameter_list|(
name|x
parameter_list|)
value|((x)->crl->nextUpdate)
define|#
directive|define
name|X509_CRL_get_issuer
parameter_list|(
name|x
parameter_list|)
value|((x)->crl->issuer)
define|#
directive|define
name|X509_CRL_get_REVOKED
parameter_list|(
name|x
parameter_list|)
value|((x)->crl->revoked)
comment|/* This one is only used so that a binary form can output, as in  * i2d_X509_NAME(X509_get_X509_PUBKEY(x),&buf) */
define|#
directive|define
name|X509_get_X509_PUBKEY
parameter_list|(
name|x
parameter_list|)
value|((x)->cert_info->key)
specifier|const
name|char
modifier|*
name|X509_verify_cert_error_string
parameter_list|(
name|long
name|n
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|SSLEAY_MACROS
ifndef|#
directive|ifndef
name|OPENSSL_NO_EVP
name|int
name|X509_verify
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|,
name|EVP_PKEY
modifier|*
name|r
parameter_list|)
function_decl|;
name|int
name|X509_REQ_verify
parameter_list|(
name|X509_REQ
modifier|*
name|a
parameter_list|,
name|EVP_PKEY
modifier|*
name|r
parameter_list|)
function_decl|;
name|int
name|X509_CRL_verify
parameter_list|(
name|X509_CRL
modifier|*
name|a
parameter_list|,
name|EVP_PKEY
modifier|*
name|r
parameter_list|)
function_decl|;
name|int
name|NETSCAPE_SPKI_verify
parameter_list|(
name|NETSCAPE_SPKI
modifier|*
name|a
parameter_list|,
name|EVP_PKEY
modifier|*
name|r
parameter_list|)
function_decl|;
name|NETSCAPE_SPKI
modifier|*
name|NETSCAPE_SPKI_b64_decode
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|char
modifier|*
name|NETSCAPE_SPKI_b64_encode
parameter_list|(
name|NETSCAPE_SPKI
modifier|*
name|x
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|NETSCAPE_SPKI_get_pubkey
parameter_list|(
name|NETSCAPE_SPKI
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|NETSCAPE_SPKI_set_pubkey
parameter_list|(
name|NETSCAPE_SPKI
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|NETSCAPE_SPKI_print
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|NETSCAPE_SPKI
modifier|*
name|spki
parameter_list|)
function_decl|;
name|int
name|X509_signature_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_ALGOR
modifier|*
name|alg
parameter_list|,
name|ASN1_STRING
modifier|*
name|sig
parameter_list|)
function_decl|;
name|int
name|X509_sign
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|X509_REQ_sign
parameter_list|(
name|X509_REQ
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|X509_CRL_sign
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|NETSCAPE_SPKI_sign
parameter_list|(
name|NETSCAPE_SPKI
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|X509_pubkey_digest
parameter_list|(
specifier|const
name|X509
modifier|*
name|data
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|X509_digest
parameter_list|(
specifier|const
name|X509
modifier|*
name|data
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|X509_CRL_digest
parameter_list|(
specifier|const
name|X509_CRL
modifier|*
name|data
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|X509_REQ_digest
parameter_list|(
specifier|const
name|X509_REQ
modifier|*
name|data
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|X509_NAME_digest
parameter_list|(
specifier|const
name|X509_NAME
modifier|*
name|data
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|X509
modifier|*
name|d2i_X509_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509
modifier|*
modifier|*
name|x509
parameter_list|)
function_decl|;
name|int
name|i2d_X509_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509
modifier|*
name|x509
parameter_list|)
function_decl|;
name|X509_CRL
modifier|*
name|d2i_X509_CRL_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509_CRL
modifier|*
modifier|*
name|crl
parameter_list|)
function_decl|;
name|int
name|i2d_X509_CRL_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|X509_REQ
modifier|*
name|d2i_X509_REQ_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509_REQ
modifier|*
modifier|*
name|req
parameter_list|)
function_decl|;
name|int
name|i2d_X509_REQ_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|RSA
modifier|*
name|d2i_RSAPrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|RSA
modifier|*
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|i2d_RSAPrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|d2i_RSAPublicKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|RSA
modifier|*
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|i2d_RSAPublicKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|d2i_RSA_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|RSA
modifier|*
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|i2d_RSA_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
name|DSA
modifier|*
name|d2i_DSA_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|DSA
modifier|*
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|i2d_DSA_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|d2i_DSAPrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|DSA
modifier|*
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|i2d_DSAPrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|EC_KEY
modifier|*
name|d2i_EC_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EC_KEY
modifier|*
modifier|*
name|eckey
parameter_list|)
function_decl|;
name|int
name|i2d_EC_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
name|EC_KEY
modifier|*
name|d2i_ECPrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EC_KEY
modifier|*
modifier|*
name|eckey
parameter_list|)
function_decl|;
name|int
name|i2d_ECPrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
endif|#
directive|endif
name|X509_SIG
modifier|*
name|d2i_PKCS8_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509_SIG
modifier|*
modifier|*
name|p8
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509_SIG
modifier|*
name|p8
parameter_list|)
function_decl|;
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|d2i_PKCS8_PRIV_KEY_INFO_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|PKCS8_PRIV_KEY_INFO
modifier|*
modifier|*
name|p8inf
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8_PRIV_KEY_INFO_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|p8inf
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8PrivateKeyInfo_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|i2d_PrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PUBKEY_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|X509
modifier|*
name|d2i_X509_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509
modifier|*
modifier|*
name|x509
parameter_list|)
function_decl|;
name|int
name|i2d_X509_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509
modifier|*
name|x509
parameter_list|)
function_decl|;
name|X509_CRL
modifier|*
name|d2i_X509_CRL_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_CRL
modifier|*
modifier|*
name|crl
parameter_list|)
function_decl|;
name|int
name|i2d_X509_CRL_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|X509_REQ
modifier|*
name|d2i_X509_REQ_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_REQ
modifier|*
modifier|*
name|req
parameter_list|)
function_decl|;
name|int
name|i2d_X509_REQ_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|RSA
modifier|*
name|d2i_RSAPrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|RSA
modifier|*
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|i2d_RSAPrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|d2i_RSAPublicKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|RSA
modifier|*
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|i2d_RSAPublicKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|d2i_RSA_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|RSA
modifier|*
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|i2d_RSA_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
name|DSA
modifier|*
name|d2i_DSA_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|DSA
modifier|*
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|i2d_DSA_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|d2i_DSAPrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|DSA
modifier|*
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|i2d_DSAPrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|EC_KEY
modifier|*
name|d2i_EC_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EC_KEY
modifier|*
modifier|*
name|eckey
parameter_list|)
function_decl|;
name|int
name|i2d_EC_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
name|EC_KEY
modifier|*
name|d2i_ECPrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EC_KEY
modifier|*
modifier|*
name|eckey
parameter_list|)
function_decl|;
name|int
name|i2d_ECPrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
endif|#
directive|endif
name|X509_SIG
modifier|*
name|d2i_PKCS8_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_SIG
modifier|*
modifier|*
name|p8
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_SIG
modifier|*
name|p8
parameter_list|)
function_decl|;
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|d2i_PKCS8_PRIV_KEY_INFO_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|PKCS8_PRIV_KEY_INFO
modifier|*
modifier|*
name|p8inf
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8_PRIV_KEY_INFO_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|p8inf
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8PrivateKeyInfo_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|i2d_PrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PUBKEY_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
endif|#
directive|endif
name|X509
modifier|*
name|X509_dup
parameter_list|(
name|X509
modifier|*
name|x509
parameter_list|)
function_decl|;
name|X509_ATTRIBUTE
modifier|*
name|X509_ATTRIBUTE_dup
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
name|xa
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_EXTENSION_dup
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|)
function_decl|;
name|X509_CRL
modifier|*
name|X509_CRL_dup
parameter_list|(
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|X509_REQ
modifier|*
name|X509_REQ_dup
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
name|X509_ALGOR
modifier|*
name|X509_ALGOR_dup
parameter_list|(
name|X509_ALGOR
modifier|*
name|xn
parameter_list|)
function_decl|;
name|X509_NAME
modifier|*
name|X509_NAME_dup
parameter_list|(
name|X509_NAME
modifier|*
name|xn
parameter_list|)
function_decl|;
name|X509_NAME_ENTRY
modifier|*
name|X509_NAME_ENTRY_dup
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
name|ne
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* !SSLEAY_MACROS */
name|int
name|X509_cmp_time
parameter_list|(
name|ASN1_TIME
modifier|*
name|s
parameter_list|,
name|time_t
modifier|*
name|t
parameter_list|)
function_decl|;
name|int
name|X509_cmp_current_time
parameter_list|(
name|ASN1_TIME
modifier|*
name|s
parameter_list|)
function_decl|;
name|ASN1_TIME
modifier|*
name|X509_time_adj
parameter_list|(
name|ASN1_TIME
modifier|*
name|s
parameter_list|,
name|long
name|adj
parameter_list|,
name|time_t
modifier|*
name|t
parameter_list|)
function_decl|;
name|ASN1_TIME
modifier|*
name|X509_gmtime_adj
parameter_list|(
name|ASN1_TIME
modifier|*
name|s
parameter_list|,
name|long
name|adj
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|X509_get_default_cert_area
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|X509_get_default_cert_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|X509_get_default_cert_file
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|X509_get_default_cert_dir_env
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|X509_get_default_cert_file_env
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|X509_get_default_private_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|X509_REQ
modifier|*
name|X509_to_X509_REQ
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
name|X509
modifier|*
name|X509_REQ_to_X509
parameter_list|(
name|X509_REQ
modifier|*
name|r
parameter_list|,
name|int
name|days
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_ALGOR
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_VAL
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_PUBKEY
argument_list|)
name|int
name|X509_PUBKEY_set
parameter_list|(
name|X509_PUBKEY
modifier|*
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|X509_PUBKEY_get
parameter_list|(
name|X509_PUBKEY
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|X509_get_pubkey_parameters
argument_list|(
name|EVP_PKEY
operator|*
name|pkey
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|chain
argument_list|)
decl_stmt|;
name|int
name|i2d_PUBKEY
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PUBKEY
parameter_list|(
name|EVP_PKEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|int
name|i2d_RSA_PUBKEY
parameter_list|(
name|RSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|d2i_RSA_PUBKEY
parameter_list|(
name|RSA
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
name|int
name|i2d_DSA_PUBKEY
parameter_list|(
name|DSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|d2i_DSA_PUBKEY
parameter_list|(
name|DSA
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|int
name|i2d_EC_PUBKEY
parameter_list|(
name|EC_KEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|EC_KEY
modifier|*
name|d2i_EC_PUBKEY
parameter_list|(
name|EC_KEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
endif|#
directive|endif
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_SIG
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_REQ_INFO
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_REQ
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_ATTRIBUTE
argument_list|)
name|X509_ATTRIBUTE
modifier|*
name|X509_ATTRIBUTE_create
parameter_list|(
name|int
name|nid
parameter_list|,
name|int
name|atrtype
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_EXTENSION
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_NAME_ENTRY
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_NAME
argument_list|)
name|int
name|X509_NAME_set
parameter_list|(
name|X509_NAME
modifier|*
modifier|*
name|xn
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_CINF
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_CERT_AUX
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_CERT_PAIR
argument_list|)
name|int
name|X509_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|X509_set_ex_data
parameter_list|(
name|X509
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|X509_get_ex_data
parameter_list|(
name|X509
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|i2d_X509_AUX
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|X509
modifier|*
name|d2i_X509_AUX
parameter_list|(
name|X509
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|int
name|X509_alias_set1
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|unsigned
name|char
modifier|*
name|name
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_keyid_set1
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|unsigned
name|char
modifier|*
name|id
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|X509_alias_get0
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|X509_keyid_get0
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
argument_list|(
operator|*
name|X509_TRUST_set_default
argument_list|(
name|int
argument_list|(
operator|*
name|trust
argument_list|)
argument_list|(
name|int
argument_list|,
name|X509
operator|*
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
argument_list|(
name|int
argument_list|,
name|X509
operator|*
argument_list|,
name|int
argument_list|)
expr_stmt|;
name|int
name|X509_TRUST_set
parameter_list|(
name|int
modifier|*
name|t
parameter_list|,
name|int
name|trust
parameter_list|)
function_decl|;
name|int
name|X509_add1_trust_object
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|)
function_decl|;
name|int
name|X509_add1_reject_object
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|)
function_decl|;
name|void
name|X509_trust_clear
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|X509_reject_clear
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_REVOKED
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_CRL_INFO
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|X509_CRL
argument_list|)
name|int
name|X509_CRL_add0_revoked
parameter_list|(
name|X509_CRL
modifier|*
name|crl
parameter_list|,
name|X509_REVOKED
modifier|*
name|rev
parameter_list|)
function_decl|;
name|X509_PKEY
modifier|*
name|X509_PKEY_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|X509_PKEY_free
parameter_list|(
name|X509_PKEY
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_X509_PKEY
parameter_list|(
name|X509_PKEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|X509_PKEY
modifier|*
name|d2i_X509_PKEY
parameter_list|(
name|X509_PKEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|NETSCAPE_SPKI
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|NETSCAPE_SPKAC
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|NETSCAPE_CERT_SEQUENCE
argument_list|)
ifndef|#
directive|ifndef
name|OPENSSL_NO_EVP
name|X509_INFO
modifier|*
name|X509_INFO_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|X509_INFO_free
parameter_list|(
name|X509_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|char
modifier|*
name|X509_NAME_oneline
parameter_list|(
name|X509_NAME
modifier|*
name|a
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|ASN1_verify
parameter_list|(
name|i2d_of_void
modifier|*
name|i2d
parameter_list|,
name|X509_ALGOR
modifier|*
name|algor1
parameter_list|,
name|ASN1_BIT_STRING
modifier|*
name|signature
parameter_list|,
name|char
modifier|*
name|data
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|ASN1_digest
parameter_list|(
name|i2d_of_void
modifier|*
name|i2d
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|data
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|ASN1_sign
parameter_list|(
name|i2d_of_void
modifier|*
name|i2d
parameter_list|,
name|X509_ALGOR
modifier|*
name|algor1
parameter_list|,
name|X509_ALGOR
modifier|*
name|algor2
parameter_list|,
name|ASN1_BIT_STRING
modifier|*
name|signature
parameter_list|,
name|char
modifier|*
name|data
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|)
function_decl|;
name|int
name|ASN1_item_digest
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|unsigned
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|ASN1_item_verify
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|X509_ALGOR
modifier|*
name|algor1
parameter_list|,
name|ASN1_BIT_STRING
modifier|*
name|signature
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|ASN1_item_sign
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|X509_ALGOR
modifier|*
name|algor1
parameter_list|,
name|X509_ALGOR
modifier|*
name|algor2
parameter_list|,
name|ASN1_BIT_STRING
modifier|*
name|signature
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|type
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|X509_set_version
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|long
name|version
parameter_list|)
function_decl|;
name|int
name|X509_set_serialNumber
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|serial
parameter_list|)
function_decl|;
name|ASN1_INTEGER
modifier|*
name|X509_get_serialNumber
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_set_issuer_name
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|)
function_decl|;
name|X509_NAME
modifier|*
name|X509_get_issuer_name
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|X509_set_subject_name
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|)
function_decl|;
name|X509_NAME
modifier|*
name|X509_get_subject_name
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|X509_set_notBefore
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|ASN1_TIME
modifier|*
name|tm
parameter_list|)
function_decl|;
name|int
name|X509_set_notAfter
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|ASN1_TIME
modifier|*
name|tm
parameter_list|)
function_decl|;
name|int
name|X509_set_pubkey
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|X509_get_pubkey
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|ASN1_BIT_STRING
modifier|*
name|X509_get0_pubkey_bitstr
parameter_list|(
specifier|const
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_certificate_type
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pubkey
comment|/* optional */
parameter_list|)
function_decl|;
name|int
name|X509_REQ_set_version
parameter_list|(
name|X509_REQ
modifier|*
name|x
parameter_list|,
name|long
name|version
parameter_list|)
function_decl|;
name|int
name|X509_REQ_set_subject_name
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|X509_REQ_set_pubkey
parameter_list|(
name|X509_REQ
modifier|*
name|x
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|X509_REQ_get_pubkey
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
name|int
name|X509_REQ_extension_nid
parameter_list|(
name|int
name|nid
parameter_list|)
function_decl|;
name|int
modifier|*
name|X509_REQ_get_extension_nids
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|X509_REQ_set_extension_nids
parameter_list|(
name|int
modifier|*
name|nids
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|X509_REQ_get_extensions
argument_list|(
name|X509_REQ
operator|*
name|req
argument_list|)
expr_stmt|;
name|int
name|X509_REQ_add_extensions_nid
argument_list|(
name|X509_REQ
operator|*
name|req
argument_list|,
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|exts
argument_list|,
name|int
name|nid
argument_list|)
decl_stmt|;
name|int
name|X509_REQ_add_extensions
argument_list|(
name|X509_REQ
operator|*
name|req
argument_list|,
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|exts
argument_list|)
decl_stmt|;
name|int
name|X509_REQ_get_attr_count
parameter_list|(
specifier|const
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
name|int
name|X509_REQ_get_attr_by_NID
parameter_list|(
specifier|const
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_REQ_get_attr_by_OBJ
parameter_list|(
specifier|const
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_ATTRIBUTE
modifier|*
name|X509_REQ_get_attr
parameter_list|(
specifier|const
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_ATTRIBUTE
modifier|*
name|X509_REQ_delete_attr
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|X509_REQ_add1_attr
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
name|X509_REQ_add1_attr_by_OBJ
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|,
specifier|const
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_REQ_add1_attr_by_NID
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_REQ_add1_attr_by_txt
parameter_list|(
name|X509_REQ
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|attrname
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_CRL_set_version
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|long
name|version
parameter_list|)
function_decl|;
name|int
name|X509_CRL_set_issuer_name
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|X509_CRL_set_lastUpdate
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|ASN1_TIME
modifier|*
name|tm
parameter_list|)
function_decl|;
name|int
name|X509_CRL_set_nextUpdate
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|ASN1_TIME
modifier|*
name|tm
parameter_list|)
function_decl|;
name|int
name|X509_CRL_sort
parameter_list|(
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_set_serialNumber
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|serial
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_set_revocationDate
parameter_list|(
name|X509_REVOKED
modifier|*
name|r
parameter_list|,
name|ASN1_TIME
modifier|*
name|tm
parameter_list|)
function_decl|;
name|int
name|X509_REQ_check_private_key
parameter_list|(
name|X509_REQ
modifier|*
name|x509
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|X509_check_private_key
parameter_list|(
name|X509
modifier|*
name|x509
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|X509_issuer_and_serial_cmp
parameter_list|(
specifier|const
name|X509
modifier|*
name|a
parameter_list|,
specifier|const
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
name|unsigned
name|long
name|X509_issuer_and_serial_hash
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|X509_issuer_name_cmp
parameter_list|(
specifier|const
name|X509
modifier|*
name|a
parameter_list|,
specifier|const
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
name|unsigned
name|long
name|X509_issuer_name_hash
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|X509_subject_name_cmp
parameter_list|(
specifier|const
name|X509
modifier|*
name|a
parameter_list|,
specifier|const
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
name|unsigned
name|long
name|X509_subject_name_hash
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_cmp
parameter_list|(
specifier|const
name|X509
modifier|*
name|a
parameter_list|,
specifier|const
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|X509_NAME_cmp
parameter_list|(
specifier|const
name|X509_NAME
modifier|*
name|a
parameter_list|,
specifier|const
name|X509_NAME
modifier|*
name|b
parameter_list|)
function_decl|;
name|unsigned
name|long
name|X509_NAME_hash
parameter_list|(
name|X509_NAME
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_CRL_cmp
parameter_list|(
specifier|const
name|X509_CRL
modifier|*
name|a
parameter_list|,
specifier|const
name|X509_CRL
modifier|*
name|b
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|int
name|X509_print_ex_fp
parameter_list|(
name|FILE
modifier|*
name|bp
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|,
name|unsigned
name|long
name|nmflag
parameter_list|,
name|unsigned
name|long
name|cflag
parameter_list|)
function_decl|;
name|int
name|X509_print_fp
parameter_list|(
name|FILE
modifier|*
name|bp
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_CRL_print_fp
parameter_list|(
name|FILE
modifier|*
name|bp
parameter_list|,
name|X509_CRL
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_REQ_print_fp
parameter_list|(
name|FILE
modifier|*
name|bp
parameter_list|,
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
name|int
name|X509_NAME_print_ex_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|X509_NAME
modifier|*
name|nm
parameter_list|,
name|int
name|indent
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|X509_NAME_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|int
name|obase
parameter_list|)
function_decl|;
name|int
name|X509_NAME_print_ex
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|X509_NAME
modifier|*
name|nm
parameter_list|,
name|int
name|indent
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|int
name|X509_print_ex
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|,
name|unsigned
name|long
name|nmflag
parameter_list|,
name|unsigned
name|long
name|cflag
parameter_list|)
function_decl|;
name|int
name|X509_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_ocspid_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_CERT_AUX_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_CERT_AUX
modifier|*
name|x
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
name|int
name|X509_CRL_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_CRL
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_REQ_print_ex
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_REQ
modifier|*
name|x
parameter_list|,
name|unsigned
name|long
name|nmflag
parameter_list|,
name|unsigned
name|long
name|cflag
parameter_list|)
function_decl|;
name|int
name|X509_REQ_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_REQ
modifier|*
name|req
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|X509_NAME_entry_count
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|X509_NAME_get_text_by_NID
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|int
name|nid
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_NAME_get_text_by_OBJ
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
comment|/* NOTE: you should be passsing -1, not 0 as lastpos.  The functions that use  * lastpos, search after that position on. */
name|int
name|X509_NAME_get_index_by_NID
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_NAME_get_index_by_OBJ
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_NAME_ENTRY
modifier|*
name|X509_NAME_get_entry
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_NAME_ENTRY
modifier|*
name|X509_NAME_delete_entry
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|X509_NAME_add_entry
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|X509_NAME_ENTRY
modifier|*
name|ne
parameter_list|,
name|int
name|loc
parameter_list|,
name|int
name|set
parameter_list|)
function_decl|;
name|int
name|X509_NAME_add_entry_by_OBJ
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|loc
parameter_list|,
name|int
name|set
parameter_list|)
function_decl|;
name|int
name|X509_NAME_add_entry_by_NID
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|loc
parameter_list|,
name|int
name|set
parameter_list|)
function_decl|;
name|X509_NAME_ENTRY
modifier|*
name|X509_NAME_ENTRY_create_by_txt
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
modifier|*
name|ne
parameter_list|,
specifier|const
name|char
modifier|*
name|field
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|X509_NAME_ENTRY
modifier|*
name|X509_NAME_ENTRY_create_by_NID
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
modifier|*
name|ne
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_NAME_add_entry_by_txt
parameter_list|(
name|X509_NAME
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|field
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|loc
parameter_list|,
name|int
name|set
parameter_list|)
function_decl|;
name|X509_NAME_ENTRY
modifier|*
name|X509_NAME_ENTRY_create_by_OBJ
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
modifier|*
name|ne
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_NAME_ENTRY_set_object
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
name|ne
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|)
function_decl|;
name|int
name|X509_NAME_ENTRY_set_data
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
name|ne
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|X509_NAME_ENTRY_get_object
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
name|ne
parameter_list|)
function_decl|;
name|ASN1_STRING
modifier|*
name|X509_NAME_ENTRY_get_data
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
name|ne
parameter_list|)
function_decl|;
name|int
name|X509v3_get_ext_count
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|x
argument_list|)
decl_stmt|;
name|int
name|X509v3_get_ext_by_NID
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|nid
argument_list|,
name|int
name|lastpos
argument_list|)
decl_stmt|;
name|int
name|X509v3_get_ext_by_OBJ
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|x
argument_list|,
name|ASN1_OBJECT
operator|*
name|obj
argument_list|,
name|int
name|lastpos
argument_list|)
decl_stmt|;
name|int
name|X509v3_get_ext_by_critical
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|crit
argument_list|,
name|int
name|lastpos
argument_list|)
decl_stmt|;
name|X509_EXTENSION
modifier|*
name|X509v3_get_ext
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|loc
argument_list|)
decl_stmt|;
name|X509_EXTENSION
modifier|*
name|X509v3_delete_ext
argument_list|(
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|loc
argument_list|)
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|X509v3_add_ext
argument_list|(
argument|STACK_OF(X509_EXTENSION) **x
argument_list|,
argument|X509_EXTENSION *ex
argument_list|,
argument|int loc
argument_list|)
expr_stmt|;
name|int
name|X509_get_ext_count
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_get_ext_by_NID
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_get_ext_by_OBJ
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_get_ext_by_critical
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|crit
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_get_ext
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_delete_ext
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|X509_add_ext
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|void
modifier|*
name|X509_get_ext_d2i
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
modifier|*
name|crit
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
function_decl|;
name|int
name|X509_add1_ext_i2d
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|void
modifier|*
name|value
parameter_list|,
name|int
name|crit
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|int
name|X509_CRL_get_ext_count
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_CRL_get_ext_by_NID
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_CRL_get_ext_by_OBJ
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_CRL_get_ext_by_critical
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|int
name|crit
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_CRL_get_ext
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_CRL_delete_ext
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|X509_CRL_add_ext
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|void
modifier|*
name|X509_CRL_get_ext_d2i
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
modifier|*
name|crit
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
function_decl|;
name|int
name|X509_CRL_add1_ext_i2d
parameter_list|(
name|X509_CRL
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|void
modifier|*
name|value
parameter_list|,
name|int
name|crit
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_get_ext_count
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_get_ext_by_NID
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_get_ext_by_OBJ
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_get_ext_by_critical
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|int
name|crit
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_REVOKED_get_ext
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_REVOKED_delete_ext
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_add_ext
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|void
modifier|*
name|X509_REVOKED_get_ext_d2i
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
modifier|*
name|crit
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
function_decl|;
name|int
name|X509_REVOKED_add1_ext_i2d
parameter_list|(
name|X509_REVOKED
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|void
modifier|*
name|value
parameter_list|,
name|int
name|crit
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_EXTENSION_create_by_NID
parameter_list|(
name|X509_EXTENSION
modifier|*
modifier|*
name|ex
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|crit
parameter_list|,
name|ASN1_OCTET_STRING
modifier|*
name|data
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|X509_EXTENSION_create_by_OBJ
parameter_list|(
name|X509_EXTENSION
modifier|*
modifier|*
name|ex
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|crit
parameter_list|,
name|ASN1_OCTET_STRING
modifier|*
name|data
parameter_list|)
function_decl|;
name|int
name|X509_EXTENSION_set_object
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|)
function_decl|;
name|int
name|X509_EXTENSION_set_critical
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|int
name|crit
parameter_list|)
function_decl|;
name|int
name|X509_EXTENSION_set_data
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|ASN1_OCTET_STRING
modifier|*
name|data
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|X509_EXTENSION_get_object
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|X509_EXTENSION_get_data
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ne
parameter_list|)
function_decl|;
name|int
name|X509_EXTENSION_get_critical
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|)
function_decl|;
name|int
name|X509at_get_attr_count
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|x
argument_list|)
decl_stmt|;
name|int
name|X509at_get_attr_by_NID
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|nid
argument_list|,
name|int
name|lastpos
argument_list|)
decl_stmt|;
name|int
name|X509at_get_attr_by_OBJ
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|sk
argument_list|,
name|ASN1_OBJECT
operator|*
name|obj
argument_list|,
name|int
name|lastpos
argument_list|)
decl_stmt|;
name|X509_ATTRIBUTE
modifier|*
name|X509at_get_attr
argument_list|(
specifier|const
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|loc
argument_list|)
decl_stmt|;
name|X509_ATTRIBUTE
modifier|*
name|X509at_delete_attr
argument_list|(
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|x
argument_list|,
name|int
name|loc
argument_list|)
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|X509at_add1_attr
argument_list|(
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
operator|*
name|x
argument_list|,
name|X509_ATTRIBUTE
operator|*
name|attr
argument_list|)
expr_stmt|;
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|X509at_add1_attr_by_OBJ
argument_list|(
argument|STACK_OF(X509_ATTRIBUTE) **x
argument_list|,
argument|const ASN1_OBJECT *obj
argument_list|,
argument|int type
argument_list|,
argument|const unsigned char *bytes
argument_list|,
argument|int len
argument_list|)
expr_stmt|;
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|X509at_add1_attr_by_NID
argument_list|(
argument|STACK_OF(X509_ATTRIBUTE) **x
argument_list|,
argument|int nid
argument_list|,
argument|int type
argument_list|,
argument|const unsigned char *bytes
argument_list|,
argument|int len
argument_list|)
expr_stmt|;
name|STACK_OF
argument_list|(
name|X509_ATTRIBUTE
argument_list|)
operator|*
name|X509at_add1_attr_by_txt
argument_list|(
argument|STACK_OF(X509_ATTRIBUTE) **x
argument_list|,
argument|const char *attrname
argument_list|,
argument|int type
argument_list|,
argument|const unsigned char *bytes
argument_list|,
argument|int len
argument_list|)
expr_stmt|;
name|X509_ATTRIBUTE
modifier|*
name|X509_ATTRIBUTE_create_by_NID
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
modifier|*
name|attr
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|atrtype
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|X509_ATTRIBUTE
modifier|*
name|X509_ATTRIBUTE_create_by_OBJ
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
modifier|*
name|attr
parameter_list|,
specifier|const
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|atrtype
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|X509_ATTRIBUTE
modifier|*
name|X509_ATTRIBUTE_create_by_txt
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
modifier|*
name|attr
parameter_list|,
specifier|const
name|char
modifier|*
name|atrname
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_ATTRIBUTE_set1_object
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|,
specifier|const
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|)
function_decl|;
name|int
name|X509_ATTRIBUTE_set1_data
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|,
name|int
name|attrtype
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|void
modifier|*
name|X509_ATTRIBUTE_get0_data
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|atrtype
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|int
name|X509_ATTRIBUTE_count
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|X509_ATTRIBUTE_get0_object
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|)
function_decl|;
name|ASN1_TYPE
modifier|*
name|X509_ATTRIBUTE_get0_type
parameter_list|(
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_get_attr_count
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_get_attr_by_NID
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_get_attr_by_OBJ
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_ATTRIBUTE
modifier|*
name|EVP_PKEY_get_attr
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_ATTRIBUTE
modifier|*
name|EVP_PKEY_delete_attr
parameter_list|(
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_add1_attr
parameter_list|(
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
name|X509_ATTRIBUTE
modifier|*
name|attr
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_add1_attr_by_OBJ
parameter_list|(
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
specifier|const
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_add1_attr_by_NID
parameter_list|(
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|EVP_PKEY_add1_attr_by_txt
parameter_list|(
name|EVP_PKEY
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|attrname
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|X509_verify_cert
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* lookup a cert from a X509 STACK */
name|X509
modifier|*
name|X509_find_by_issuer_and_serial
argument_list|(
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|sk
argument_list|,
name|X509_NAME
operator|*
name|name
argument_list|,
name|ASN1_INTEGER
operator|*
name|serial
argument_list|)
decl_stmt|;
name|X509
modifier|*
name|X509_find_by_subject
argument_list|(
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|sk
argument_list|,
name|X509_NAME
operator|*
name|name
argument_list|)
decl_stmt|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|PBEPARAM
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|PBE2PARAM
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|PBKDF2PARAM
argument_list|)
name|X509_ALGOR
modifier|*
name|PKCS5_pbe_set
parameter_list|(
name|int
name|alg
parameter_list|,
name|int
name|iter
parameter_list|,
name|unsigned
name|char
modifier|*
name|salt
parameter_list|,
name|int
name|saltlen
parameter_list|)
function_decl|;
name|X509_ALGOR
modifier|*
name|PKCS5_pbe2_set
parameter_list|(
specifier|const
name|EVP_CIPHER
modifier|*
name|cipher
parameter_list|,
name|int
name|iter
parameter_list|,
name|unsigned
name|char
modifier|*
name|salt
parameter_list|,
name|int
name|saltlen
parameter_list|)
function_decl|;
comment|/* PKCS#8 utilities */
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|PKCS8_PRIV_KEY_INFO
argument_list|)
name|EVP_PKEY
modifier|*
name|EVP_PKCS82PKEY
parameter_list|(
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|p8
parameter_list|)
function_decl|;
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|EVP_PKEY2PKCS8
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|EVP_PKEY2PKCS8_broken
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|int
name|broken
parameter_list|)
function_decl|;
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|PKCS8_set_broken
parameter_list|(
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|p8
parameter_list|,
name|int
name|broken
parameter_list|)
function_decl|;
name|int
name|X509_check_trust
parameter_list|(
name|X509
modifier|*
name|x
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
name|X509_TRUST_get_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|X509_TRUST
modifier|*
name|X509_TRUST_get0
parameter_list|(
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|X509_TRUST_get_by_id
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
name|int
name|X509_TRUST_add
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
function_decl|(
modifier|*
name|ck
function_decl|)
parameter_list|(
name|X509_TRUST
modifier|*
parameter_list|,
name|X509
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|arg1
parameter_list|,
name|void
modifier|*
name|arg2
parameter_list|)
function_decl|;
name|void
name|X509_TRUST_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|X509_TRUST_get_flags
parameter_list|(
name|X509_TRUST
modifier|*
name|xp
parameter_list|)
function_decl|;
name|char
modifier|*
name|X509_TRUST_get0_name
parameter_list|(
name|X509_TRUST
modifier|*
name|xp
parameter_list|)
function_decl|;
name|int
name|X509_TRUST_get_trust
parameter_list|(
name|X509_TRUST
modifier|*
name|xp
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_X509_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the X509 functions. */
comment|/* Function codes. */
define|#
directive|define
name|X509_F_ADD_CERT_DIR
value|100
define|#
directive|define
name|X509_F_BY_FILE_CTRL
value|101
define|#
directive|define
name|X509_F_CHECK_POLICY
value|145
define|#
directive|define
name|X509_F_DIR_CTRL
value|102
define|#
directive|define
name|X509_F_GET_CERT_BY_SUBJECT
value|103
define|#
directive|define
name|X509_F_NETSCAPE_SPKI_B64_DECODE
value|129
define|#
directive|define
name|X509_F_NETSCAPE_SPKI_B64_ENCODE
value|130
define|#
directive|define
name|X509_F_X509AT_ADD1_ATTR
value|135
define|#
directive|define
name|X509_F_X509V3_ADD_EXT
value|104
define|#
directive|define
name|X509_F_X509_ATTRIBUTE_CREATE_BY_NID
value|136
define|#
directive|define
name|X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
value|137
define|#
directive|define
name|X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
value|140
define|#
directive|define
name|X509_F_X509_ATTRIBUTE_GET0_DATA
value|139
define|#
directive|define
name|X509_F_X509_ATTRIBUTE_SET1_DATA
value|138
define|#
directive|define
name|X509_F_X509_CHECK_PRIVATE_KEY
value|128
define|#
directive|define
name|X509_F_X509_CRL_PRINT_FP
value|147
define|#
directive|define
name|X509_F_X509_EXTENSION_CREATE_BY_NID
value|108
define|#
directive|define
name|X509_F_X509_EXTENSION_CREATE_BY_OBJ
value|109
define|#
directive|define
name|X509_F_X509_GET_PUBKEY_PARAMETERS
value|110
define|#
directive|define
name|X509_F_X509_LOAD_CERT_CRL_FILE
value|132
define|#
directive|define
name|X509_F_X509_LOAD_CERT_FILE
value|111
define|#
directive|define
name|X509_F_X509_LOAD_CRL_FILE
value|112
define|#
directive|define
name|X509_F_X509_NAME_ADD_ENTRY
value|113
define|#
directive|define
name|X509_F_X509_NAME_ENTRY_CREATE_BY_NID
value|114
define|#
directive|define
name|X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
value|131
define|#
directive|define
name|X509_F_X509_NAME_ENTRY_SET_OBJECT
value|115
define|#
directive|define
name|X509_F_X509_NAME_ONELINE
value|116
define|#
directive|define
name|X509_F_X509_NAME_PRINT
value|117
define|#
directive|define
name|X509_F_X509_PRINT_EX_FP
value|118
define|#
directive|define
name|X509_F_X509_PUBKEY_GET
value|119
define|#
directive|define
name|X509_F_X509_PUBKEY_SET
value|120
define|#
directive|define
name|X509_F_X509_REQ_CHECK_PRIVATE_KEY
value|144
define|#
directive|define
name|X509_F_X509_REQ_PRINT_EX
value|121
define|#
directive|define
name|X509_F_X509_REQ_PRINT_FP
value|122
define|#
directive|define
name|X509_F_X509_REQ_TO_X509
value|123
define|#
directive|define
name|X509_F_X509_STORE_ADD_CERT
value|124
define|#
directive|define
name|X509_F_X509_STORE_ADD_CRL
value|125
define|#
directive|define
name|X509_F_X509_STORE_CTX_GET1_ISSUER
value|146
define|#
directive|define
name|X509_F_X509_STORE_CTX_INIT
value|143
define|#
directive|define
name|X509_F_X509_STORE_CTX_NEW
value|142
define|#
directive|define
name|X509_F_X509_STORE_CTX_PURPOSE_INHERIT
value|134
define|#
directive|define
name|X509_F_X509_TO_X509_REQ
value|126
define|#
directive|define
name|X509_F_X509_TRUST_ADD
value|133
define|#
directive|define
name|X509_F_X509_TRUST_SET
value|141
define|#
directive|define
name|X509_F_X509_VERIFY_CERT
value|127
comment|/* Reason codes. */
define|#
directive|define
name|X509_R_BAD_X509_FILETYPE
value|100
define|#
directive|define
name|X509_R_BASE64_DECODE_ERROR
value|118
define|#
directive|define
name|X509_R_CANT_CHECK_DH_KEY
value|114
define|#
directive|define
name|X509_R_CERT_ALREADY_IN_HASH_TABLE
value|101
define|#
directive|define
name|X509_R_ERR_ASN1_LIB
value|102
define|#
directive|define
name|X509_R_INVALID_DIRECTORY
value|113
define|#
directive|define
name|X509_R_INVALID_FIELD_NAME
value|119
define|#
directive|define
name|X509_R_INVALID_TRUST
value|123
define|#
directive|define
name|X509_R_KEY_TYPE_MISMATCH
value|115
define|#
directive|define
name|X509_R_KEY_VALUES_MISMATCH
value|116
define|#
directive|define
name|X509_R_LOADING_CERT_DIR
value|103
define|#
directive|define
name|X509_R_LOADING_DEFAULTS
value|104
define|#
directive|define
name|X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
value|105
define|#
directive|define
name|X509_R_SHOULD_RETRY
value|106
define|#
directive|define
name|X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
value|107
define|#
directive|define
name|X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
value|108
define|#
directive|define
name|X509_R_UNKNOWN_KEY_TYPE
value|117
define|#
directive|define
name|X509_R_UNKNOWN_NID
value|109
define|#
directive|define
name|X509_R_UNKNOWN_PURPOSE_ID
value|121
define|#
directive|define
name|X509_R_UNKNOWN_TRUST_ID
value|120
define|#
directive|define
name|X509_R_UNSUPPORTED_ALGORITHM
value|111
define|#
directive|define
name|X509_R_WRONG_LOOKUP_TYPE
value|112
define|#
directive|define
name|X509_R_WRONG_TYPE
value|122
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

