begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/x509/x509_vfy.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *  * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *  * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from  *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_X509_H
end_ifndef

begin_include
include|#
directive|include
file|<openssl/x509.h>
end_include

begin_comment
comment|/*  * openssl/x509.h ends up #include-ing this file at about the only  * appropriate moment.  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_X509_VFY_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_X509_VFY_H
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_LHASH
end_ifndef

begin_include
include|#
directive|include
file|<openssl/lhash.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_include
include|#
directive|include
file|<openssl/crypto.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Outer object */
typedef|typedef
struct|struct
name|x509_hash_dir_st
block|{
name|int
name|num_dirs
decl_stmt|;
name|char
modifier|*
modifier|*
name|dirs
decl_stmt|;
name|int
modifier|*
name|dirs_type
decl_stmt|;
name|int
name|num_dirs_alloced
decl_stmt|;
block|}
name|X509_HASH_DIR_CTX
typedef|;
typedef|typedef
struct|struct
name|x509_file_st
block|{
name|int
name|num_paths
decl_stmt|;
comment|/* number of paths to files or directories */
name|int
name|num_alloced
decl_stmt|;
name|char
modifier|*
modifier|*
name|paths
decl_stmt|;
comment|/* the list of paths or directories */
name|int
modifier|*
name|path_type
decl_stmt|;
block|}
name|X509_CERT_FILE_CTX
typedef|;
comment|/*******************************/
comment|/*- SSL_CTX -> X509_STORE                 -> X509_LOOKUP                         ->X509_LOOKUP_METHOD                 -> X509_LOOKUP                         ->X509_LOOKUP_METHOD  SSL     -> X509_STORE_CTX                 ->X509_STORE  The X509_STORE holds the tables etc for verification stuff. A X509_STORE_CTX is used while validating a single certificate. The X509_STORE has X509_LOOKUPs for looking up certs. The X509_STORE then calls a function to actually verify the certificate chain. */
define|#
directive|define
name|X509_LU_RETRY
value|-1
define|#
directive|define
name|X509_LU_FAIL
value|0
define|#
directive|define
name|X509_LU_X509
value|1
define|#
directive|define
name|X509_LU_CRL
value|2
define|#
directive|define
name|X509_LU_PKEY
value|3
typedef|typedef
struct|struct
name|x509_object_st
block|{
comment|/* one of the above types */
name|int
name|type
decl_stmt|;
union|union
block|{
name|char
modifier|*
name|ptr
decl_stmt|;
name|X509
modifier|*
name|x509
decl_stmt|;
name|X509_CRL
modifier|*
name|crl
decl_stmt|;
name|EVP_PKEY
modifier|*
name|pkey
decl_stmt|;
block|}
name|data
union|;
block|}
name|X509_OBJECT
typedef|;
typedef|typedef
name|struct
name|x509_lookup_st
name|X509_LOOKUP
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_LOOKUP
argument_list|)
name|DECLARE_STACK_OF
argument_list|(
argument|X509_OBJECT
argument_list|)
comment|/* This is a static that defines the function interface */
typedef|typedef
struct|struct
name|x509_lookup_method_st
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
function_decl|(
modifier|*
name|new_item
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|shutdown
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ctrl
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|cmd
parameter_list|,
specifier|const
name|char
modifier|*
name|argc
parameter_list|,
name|long
name|argl
parameter_list|,
name|char
modifier|*
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_by_subject
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_by_issuer_serial
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|serial
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_by_fingerprint
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_by_alias
function_decl|)
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
block|}
name|X509_LOOKUP_METHOD
typedef|;
comment|/*  * This structure hold all parameters associated with a verify operation by  * including an X509_VERIFY_PARAM structure in related structures the  * parameters used can be customized  */
typedef|typedef
struct|struct
name|X509_VERIFY_PARAM_st
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|time_t
name|check_time
decl_stmt|;
comment|/* Time to use */
name|unsigned
name|long
name|inh_flags
decl_stmt|;
comment|/* Inheritance flags */
name|unsigned
name|long
name|flags
decl_stmt|;
comment|/* Various verify flags */
name|int
name|purpose
decl_stmt|;
comment|/* purpose to check untrusted certificates */
name|int
name|trust
decl_stmt|;
comment|/* trust setting to check */
name|int
name|depth
decl_stmt|;
comment|/* Verify depth */
name|STACK_OF
argument_list|(
name|ASN1_OBJECT
argument_list|)
operator|*
name|policies
expr_stmt|;
comment|/* Permissible policies */
block|}
name|X509_VERIFY_PARAM
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|X509_VERIFY_PARAM
argument_list|)
comment|/*  * This is used to hold everything.  It is used for all certificate  * validation.  Once we have a certificate chain, the 'verify' function is  * then called to actually check the cert chain.  */
struct|struct
name|x509_store_st
block|{
comment|/* The following is a cache of trusted certs */
name|int
name|cache
decl_stmt|;
comment|/* if true, stash any hits */
name|STACK_OF
argument_list|(
name|X509_OBJECT
argument_list|)
operator|*
name|objs
expr_stmt|;
comment|/* Cache of all objects */
comment|/* These are external lookup methods */
name|STACK_OF
argument_list|(
name|X509_LOOKUP
argument_list|)
operator|*
name|get_cert_methods
expr_stmt|;
name|X509_VERIFY_PARAM
modifier|*
name|param
decl_stmt|;
comment|/* Callbacks for various operations */
comment|/* called to verify a certificate */
name|int
function_decl|(
modifier|*
name|verify
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* error callback */
name|int
function_decl|(
modifier|*
name|verify_cb
function_decl|)
parameter_list|(
name|int
name|ok
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* get issuers cert from ctx */
name|int
function_decl|(
modifier|*
name|get_issuer
function_decl|)
parameter_list|(
name|X509
modifier|*
modifier|*
name|issuer
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
comment|/* check issued */
name|int
function_decl|(
modifier|*
name|check_issued
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|,
name|X509
modifier|*
name|issuer
parameter_list|)
function_decl|;
comment|/* Check revocation status of chain */
name|int
function_decl|(
modifier|*
name|check_revocation
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* retrieve CRL */
name|int
function_decl|(
modifier|*
name|get_crl
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_CRL
modifier|*
modifier|*
name|crl
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
comment|/* Check CRL validity */
name|int
function_decl|(
modifier|*
name|check_crl
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
comment|/* Check certificate against CRL */
name|int
function_decl|(
modifier|*
name|cert_crl
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
name|int
name|references
decl_stmt|;
block|}
comment|/* X509_STORE */
struct|;
name|int
name|X509_STORE_set_depth
parameter_list|(
name|X509_STORE
modifier|*
name|store
parameter_list|,
name|int
name|depth
parameter_list|)
function_decl|;
define|#
directive|define
name|X509_STORE_set_verify_cb_func
parameter_list|(
name|ctx
parameter_list|,
name|func
parameter_list|)
value|((ctx)->verify_cb=(func))
define|#
directive|define
name|X509_STORE_set_verify_func
parameter_list|(
name|ctx
parameter_list|,
name|func
parameter_list|)
value|((ctx)->verify=(func))
comment|/* This is the functions plus an instance of the local variables. */
struct|struct
name|x509_lookup_st
block|{
name|int
name|init
decl_stmt|;
comment|/* have we been started */
name|int
name|skip
decl_stmt|;
comment|/* don't use us. */
name|X509_LOOKUP_METHOD
modifier|*
name|method
decl_stmt|;
comment|/* the functions */
name|char
modifier|*
name|method_data
decl_stmt|;
comment|/* method data */
name|X509_STORE
modifier|*
name|store_ctx
decl_stmt|;
comment|/* who owns us */
block|}
comment|/* X509_LOOKUP */
struct|;
comment|/*  * This is a used when verifying cert chains.  Since the gathering of the  * cert chain can take some time (and have to be 'retried', this needs to be  * kept and passed around.  */
struct|struct
name|x509_store_ctx_st
block|{
comment|/* X509_STORE_CTX */
name|X509_STORE
modifier|*
name|ctx
decl_stmt|;
comment|/* used when looking up certs */
name|int
name|current_method
decl_stmt|;
comment|/* The following are set by the caller */
comment|/* The cert to check */
name|X509
modifier|*
name|cert
decl_stmt|;
comment|/* chain of X509s - untrusted - passed in */
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|untrusted
expr_stmt|;
comment|/* set of CRLs passed in */
name|STACK_OF
argument_list|(
name|X509_CRL
argument_list|)
operator|*
name|crls
expr_stmt|;
name|X509_VERIFY_PARAM
modifier|*
name|param
decl_stmt|;
comment|/* Other info for use with get_issuer() */
name|void
modifier|*
name|other_ctx
decl_stmt|;
comment|/* Callbacks for various operations */
comment|/* called to verify a certificate */
name|int
function_decl|(
modifier|*
name|verify
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* error callback */
name|int
function_decl|(
modifier|*
name|verify_cb
function_decl|)
parameter_list|(
name|int
name|ok
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* get issuers cert from ctx */
name|int
function_decl|(
modifier|*
name|get_issuer
function_decl|)
parameter_list|(
name|X509
modifier|*
modifier|*
name|issuer
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
comment|/* check issued */
name|int
function_decl|(
modifier|*
name|check_issued
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|,
name|X509
modifier|*
name|issuer
parameter_list|)
function_decl|;
comment|/* Check revocation status of chain */
name|int
function_decl|(
modifier|*
name|check_revocation
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* retrieve CRL */
name|int
function_decl|(
modifier|*
name|get_crl
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_CRL
modifier|*
modifier|*
name|crl
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
comment|/* Check CRL validity */
name|int
function_decl|(
modifier|*
name|check_crl
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
comment|/* Check certificate against CRL */
name|int
function_decl|(
modifier|*
name|cert_crl
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_CRL
modifier|*
name|crl
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|check_policy
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* The following is built up */
comment|/* if 0, rebuild chain */
name|int
name|valid
decl_stmt|;
comment|/* index of last untrusted cert */
name|int
name|last_untrusted
decl_stmt|;
comment|/* chain of X509s - built up and trusted */
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|chain
expr_stmt|;
comment|/* Valid policy tree */
name|X509_POLICY_TREE
modifier|*
name|tree
decl_stmt|;
comment|/* Require explicit policy value */
name|int
name|explicit_policy
decl_stmt|;
comment|/* When something goes wrong, this is why */
name|int
name|error_depth
decl_stmt|;
name|int
name|error
decl_stmt|;
name|X509
modifier|*
name|current_cert
decl_stmt|;
comment|/* cert currently being tested as valid issuer */
name|X509
modifier|*
name|current_issuer
decl_stmt|;
comment|/* current CRL */
name|X509_CRL
modifier|*
name|current_crl
decl_stmt|;
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
block|}
comment|/* X509_STORE_CTX */
struct|;
name|void
name|X509_STORE_CTX_set_depth
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|depth
parameter_list|)
function_decl|;
define|#
directive|define
name|X509_STORE_CTX_set_app_data
parameter_list|(
name|ctx
parameter_list|,
name|data
parameter_list|)
define|\
value|X509_STORE_CTX_set_ex_data(ctx,0,data)
define|#
directive|define
name|X509_STORE_CTX_get_app_data
parameter_list|(
name|ctx
parameter_list|)
define|\
value|X509_STORE_CTX_get_ex_data(ctx,0)
define|#
directive|define
name|X509_L_FILE_LOAD
value|1
define|#
directive|define
name|X509_L_ADD_DIR
value|2
define|#
directive|define
name|X509_LOOKUP_load_file
parameter_list|(
name|x
parameter_list|,
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|X509_LOOKUP_ctrl((x),X509_L_FILE_LOAD,(name),(long)(type),NULL)
define|#
directive|define
name|X509_LOOKUP_add_dir
parameter_list|(
name|x
parameter_list|,
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|X509_LOOKUP_ctrl((x),X509_L_ADD_DIR,(name),(long)(type),NULL)
define|#
directive|define
name|X509_V_OK
value|0
comment|/* illegal error (for uninitialized values, to avoid X509_V_OK): 1 */
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
value|2
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_GET_CRL
value|3
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
value|4
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
value|5
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
value|6
define|#
directive|define
name|X509_V_ERR_CERT_SIGNATURE_FAILURE
value|7
define|#
directive|define
name|X509_V_ERR_CRL_SIGNATURE_FAILURE
value|8
define|#
directive|define
name|X509_V_ERR_CERT_NOT_YET_VALID
value|9
define|#
directive|define
name|X509_V_ERR_CERT_HAS_EXPIRED
value|10
define|#
directive|define
name|X509_V_ERR_CRL_NOT_YET_VALID
value|11
define|#
directive|define
name|X509_V_ERR_CRL_HAS_EXPIRED
value|12
define|#
directive|define
name|X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
value|13
define|#
directive|define
name|X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
value|14
define|#
directive|define
name|X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
value|15
define|#
directive|define
name|X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
value|16
define|#
directive|define
name|X509_V_ERR_OUT_OF_MEM
value|17
define|#
directive|define
name|X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
value|18
define|#
directive|define
name|X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
value|19
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
value|20
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
value|21
define|#
directive|define
name|X509_V_ERR_CERT_CHAIN_TOO_LONG
value|22
define|#
directive|define
name|X509_V_ERR_CERT_REVOKED
value|23
define|#
directive|define
name|X509_V_ERR_INVALID_CA
value|24
define|#
directive|define
name|X509_V_ERR_PATH_LENGTH_EXCEEDED
value|25
define|#
directive|define
name|X509_V_ERR_INVALID_PURPOSE
value|26
define|#
directive|define
name|X509_V_ERR_CERT_UNTRUSTED
value|27
define|#
directive|define
name|X509_V_ERR_CERT_REJECTED
value|28
comment|/* These are 'informational' when looking for issuer cert */
define|#
directive|define
name|X509_V_ERR_SUBJECT_ISSUER_MISMATCH
value|29
define|#
directive|define
name|X509_V_ERR_AKID_SKID_MISMATCH
value|30
define|#
directive|define
name|X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
value|31
define|#
directive|define
name|X509_V_ERR_KEYUSAGE_NO_CERTSIGN
value|32
define|#
directive|define
name|X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
value|33
define|#
directive|define
name|X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
value|34
define|#
directive|define
name|X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
value|35
define|#
directive|define
name|X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
value|36
define|#
directive|define
name|X509_V_ERR_INVALID_NON_CA
value|37
define|#
directive|define
name|X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
value|38
define|#
directive|define
name|X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
value|39
define|#
directive|define
name|X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
value|40
define|#
directive|define
name|X509_V_ERR_INVALID_EXTENSION
value|41
define|#
directive|define
name|X509_V_ERR_INVALID_POLICY_EXTENSION
value|42
define|#
directive|define
name|X509_V_ERR_NO_EXPLICIT_POLICY
value|43
define|#
directive|define
name|X509_V_ERR_UNNESTED_RESOURCE
value|44
comment|/* The application is not happy */
define|#
directive|define
name|X509_V_ERR_APPLICATION_VERIFICATION
value|50
comment|/* Certificate verify flags */
comment|/* Send issuer+subject checks to verify_cb */
define|#
directive|define
name|X509_V_FLAG_CB_ISSUER_CHECK
value|0x1
comment|/* Use check time instead of current time */
define|#
directive|define
name|X509_V_FLAG_USE_CHECK_TIME
value|0x2
comment|/* Lookup CRLs */
define|#
directive|define
name|X509_V_FLAG_CRL_CHECK
value|0x4
comment|/* Lookup CRLs for whole chain */
define|#
directive|define
name|X509_V_FLAG_CRL_CHECK_ALL
value|0x8
comment|/* Ignore unhandled critical extensions */
define|#
directive|define
name|X509_V_FLAG_IGNORE_CRITICAL
value|0x10
comment|/* Disable workarounds for broken certificates */
define|#
directive|define
name|X509_V_FLAG_X509_STRICT
value|0x20
comment|/* Enable proxy certificate validation */
define|#
directive|define
name|X509_V_FLAG_ALLOW_PROXY_CERTS
value|0x40
comment|/* Enable policy checking */
define|#
directive|define
name|X509_V_FLAG_POLICY_CHECK
value|0x80
comment|/* Policy variable require-explicit-policy */
define|#
directive|define
name|X509_V_FLAG_EXPLICIT_POLICY
value|0x100
comment|/* Policy variable inhibit-any-policy */
define|#
directive|define
name|X509_V_FLAG_INHIBIT_ANY
value|0x200
comment|/* Policy variable inhibit-policy-mapping */
define|#
directive|define
name|X509_V_FLAG_INHIBIT_MAP
value|0x400
comment|/* Notify callback that policy is OK */
define|#
directive|define
name|X509_V_FLAG_NOTIFY_POLICY
value|0x800
comment|/* Check selfsigned CA signature */
define|#
directive|define
name|X509_V_FLAG_CHECK_SS_SIGNATURE
value|0x4000
define|#
directive|define
name|X509_VP_FLAG_DEFAULT
value|0x1
define|#
directive|define
name|X509_VP_FLAG_OVERWRITE
value|0x2
define|#
directive|define
name|X509_VP_FLAG_RESET_FLAGS
value|0x4
define|#
directive|define
name|X509_VP_FLAG_LOCKED
value|0x8
define|#
directive|define
name|X509_VP_FLAG_ONCE
value|0x10
comment|/* Internal use: mask of policy related options */
define|#
directive|define
name|X509_V_FLAG_POLICY_MASK
value|(X509_V_FLAG_POLICY_CHECK \                                 | X509_V_FLAG_EXPLICIT_POLICY \                                 | X509_V_FLAG_INHIBIT_ANY \                                 | X509_V_FLAG_INHIBIT_MAP)
name|int
name|X509_OBJECT_idx_by_subject
argument_list|(
name|STACK_OF
argument_list|(
name|X509_OBJECT
argument_list|)
operator|*
name|h
argument_list|,
name|int
name|type
argument_list|,
name|X509_NAME
operator|*
name|name
argument_list|)
decl_stmt|;
name|X509_OBJECT
modifier|*
name|X509_OBJECT_retrieve_by_subject
argument_list|(
name|STACK_OF
argument_list|(
name|X509_OBJECT
argument_list|)
operator|*
name|h
argument_list|,
name|int
name|type
argument_list|,
name|X509_NAME
operator|*
name|name
argument_list|)
decl_stmt|;
name|X509_OBJECT
modifier|*
name|X509_OBJECT_retrieve_match
argument_list|(
name|STACK_OF
argument_list|(
name|X509_OBJECT
argument_list|)
operator|*
name|h
argument_list|,
name|X509_OBJECT
operator|*
name|x
argument_list|)
decl_stmt|;
name|void
name|X509_OBJECT_up_ref_count
parameter_list|(
name|X509_OBJECT
modifier|*
name|a
parameter_list|)
function_decl|;
name|void
name|X509_OBJECT_free_contents
parameter_list|(
name|X509_OBJECT
modifier|*
name|a
parameter_list|)
function_decl|;
name|X509_STORE
modifier|*
name|X509_STORE_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|X509_STORE_free
parameter_list|(
name|X509_STORE
modifier|*
name|v
parameter_list|)
function_decl|;
name|int
name|X509_STORE_set_flags
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|int
name|X509_STORE_set_purpose
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
name|int
name|purpose
parameter_list|)
function_decl|;
name|int
name|X509_STORE_set_trust
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
name|int
name|trust
parameter_list|)
function_decl|;
name|int
name|X509_STORE_set1_param
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
name|X509_VERIFY_PARAM
modifier|*
name|pm
parameter_list|)
function_decl|;
name|X509_STORE_CTX
modifier|*
name|X509_STORE_CTX_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_get1_issuer
parameter_list|(
name|X509
modifier|*
modifier|*
name|issuer
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|X509_STORE_CTX_free
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_init
argument_list|(
name|X509_STORE_CTX
operator|*
name|ctx
argument_list|,
name|X509_STORE
operator|*
name|store
argument_list|,
name|X509
operator|*
name|x509
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|chain
argument_list|)
decl_stmt|;
name|void
name|X509_STORE_CTX_trusted_stack
argument_list|(
name|X509_STORE_CTX
operator|*
name|ctx
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|sk
argument_list|)
decl_stmt|;
name|void
name|X509_STORE_CTX_cleanup
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|X509_LOOKUP
modifier|*
name|X509_STORE_add_lookup
parameter_list|(
name|X509_STORE
modifier|*
name|v
parameter_list|,
name|X509_LOOKUP_METHOD
modifier|*
name|m
parameter_list|)
function_decl|;
name|X509_LOOKUP_METHOD
modifier|*
name|X509_LOOKUP_hash_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|X509_LOOKUP_METHOD
modifier|*
name|X509_LOOKUP_file
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|X509_STORE_add_cert
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_STORE_add_crl
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
name|X509_CRL
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|X509_STORE_get_by_subject
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|vs
parameter_list|,
name|int
name|type
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|X509_LOOKUP_ctrl
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|cmd
parameter_list|,
specifier|const
name|char
modifier|*
name|argc
parameter_list|,
name|long
name|argl
parameter_list|,
name|char
modifier|*
modifier|*
name|ret
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_STDIO
name|int
name|X509_load_cert_file
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|X509_load_crl_file
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|X509_load_cert_crl_file
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
endif|#
directive|endif
name|X509_LOOKUP
modifier|*
name|X509_LOOKUP_new
parameter_list|(
name|X509_LOOKUP_METHOD
modifier|*
name|method
parameter_list|)
function_decl|;
name|void
name|X509_LOOKUP_free
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|X509_LOOKUP_init
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|X509_LOOKUP_by_subject
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|X509_LOOKUP_by_issuer_serial
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|X509_NAME
modifier|*
name|name
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|serial
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|X509_LOOKUP_by_fingerprint
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|X509_LOOKUP_by_alias
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|,
name|int
name|type
parameter_list|,
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|X509_OBJECT
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|X509_LOOKUP_shutdown
parameter_list|(
name|X509_LOOKUP
modifier|*
name|ctx
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_STDIO
name|int
name|X509_STORE_load_locations
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
specifier|const
name|char
modifier|*
name|dir
parameter_list|)
function_decl|;
name|int
name|X509_STORE_set_default_paths
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|X509_STORE_CTX_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_set_ex_data
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|X509_STORE_CTX_get_ex_data
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_get_error
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|X509_STORE_CTX_set_error
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|s
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_get_error_depth
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|X509
modifier|*
name|X509_STORE_CTX_get_current_cert
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|X509_STORE_CTX_get_chain
argument_list|(
name|X509_STORE_CTX
operator|*
name|ctx
argument_list|)
expr_stmt|;
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|X509_STORE_CTX_get1_chain
argument_list|(
name|X509_STORE_CTX
operator|*
name|ctx
argument_list|)
expr_stmt|;
name|void
name|X509_STORE_CTX_set_cert
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|c
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|X509_STORE_CTX_set_chain
argument_list|(
name|X509_STORE_CTX
operator|*
name|c
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|sk
argument_list|)
decl_stmt|;
name|void
name|X509_STORE_CTX_set0_crls
argument_list|(
name|X509_STORE_CTX
operator|*
name|c
argument_list|,
name|STACK_OF
argument_list|(
name|X509_CRL
argument_list|)
operator|*
name|sk
argument_list|)
decl_stmt|;
name|int
name|X509_STORE_CTX_set_purpose
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|purpose
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_set_trust
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|trust
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_purpose_inherit
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|def_purpose
parameter_list|,
name|int
name|purpose
parameter_list|,
name|int
name|trust
parameter_list|)
function_decl|;
name|void
name|X509_STORE_CTX_set_flags
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|void
name|X509_STORE_CTX_set_time
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|,
name|time_t
name|t
parameter_list|)
function_decl|;
name|void
name|X509_STORE_CTX_set_verify_cb
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
function_decl|(
modifier|*
name|verify_cb
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|X509_STORE_CTX
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|X509_POLICY_TREE
modifier|*
name|X509_STORE_CTX_get0_policy_tree
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_get_explicit_policy
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|X509_VERIFY_PARAM
modifier|*
name|X509_STORE_CTX_get0_param
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|X509_STORE_CTX_set0_param
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|)
function_decl|;
name|int
name|X509_STORE_CTX_set_default
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/* X509_VERIFY_PARAM functions */
name|X509_VERIFY_PARAM
modifier|*
name|X509_VERIFY_PARAM_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|X509_VERIFY_PARAM_free
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_inherit
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|to
parameter_list|,
specifier|const
name|X509_VERIFY_PARAM
modifier|*
name|from
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_set1
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|to
parameter_list|,
specifier|const
name|X509_VERIFY_PARAM
modifier|*
name|from
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_set1_name
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_set_flags
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_clear_flags
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|unsigned
name|long
name|X509_VERIFY_PARAM_get_flags
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_set_purpose
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
name|int
name|purpose
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_set_trust
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
name|int
name|trust
parameter_list|)
function_decl|;
name|void
name|X509_VERIFY_PARAM_set_depth
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
name|int
name|depth
parameter_list|)
function_decl|;
name|void
name|X509_VERIFY_PARAM_set_time
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
name|time_t
name|t
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_add0_policy
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|policy
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_set1_policies
argument_list|(
name|X509_VERIFY_PARAM
operator|*
name|param
argument_list|,
name|STACK_OF
argument_list|(
name|ASN1_OBJECT
argument_list|)
operator|*
name|policies
argument_list|)
decl_stmt|;
name|int
name|X509_VERIFY_PARAM_get_depth
parameter_list|(
specifier|const
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|)
function_decl|;
name|int
name|X509_VERIFY_PARAM_add0_table
parameter_list|(
name|X509_VERIFY_PARAM
modifier|*
name|param
parameter_list|)
function_decl|;
specifier|const
name|X509_VERIFY_PARAM
modifier|*
name|X509_VERIFY_PARAM_lookup
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|X509_VERIFY_PARAM_table_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|X509_policy_check
argument_list|(
name|X509_POLICY_TREE
operator|*
operator|*
name|ptree
argument_list|,
name|int
operator|*
name|pexplicit_policy
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|certs
argument_list|,
name|STACK_OF
argument_list|(
name|ASN1_OBJECT
argument_list|)
operator|*
name|policy_oids
argument_list|,
name|unsigned
name|int
name|flags
argument_list|)
decl_stmt|;
name|void
name|X509_policy_tree_free
parameter_list|(
name|X509_POLICY_TREE
modifier|*
name|tree
parameter_list|)
function_decl|;
name|int
name|X509_policy_tree_level_count
parameter_list|(
specifier|const
name|X509_POLICY_TREE
modifier|*
name|tree
parameter_list|)
function_decl|;
name|X509_POLICY_LEVEL
modifier|*
name|X509_policy_tree_get0_level
parameter_list|(
specifier|const
name|X509_POLICY_TREE
modifier|*
name|tree
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_POLICY_NODE
argument_list|)
operator|*
name|X509_policy_tree_get0_policies
argument_list|(
specifier|const
name|X509_POLICY_TREE
operator|*
name|tree
argument_list|)
expr_stmt|;
name|STACK_OF
argument_list|(
name|X509_POLICY_NODE
argument_list|)
operator|*
name|X509_policy_tree_get0_user_policies
argument_list|(
specifier|const
name|X509_POLICY_TREE
operator|*
name|tree
argument_list|)
expr_stmt|;
name|int
name|X509_policy_level_node_count
parameter_list|(
name|X509_POLICY_LEVEL
modifier|*
name|level
parameter_list|)
function_decl|;
name|X509_POLICY_NODE
modifier|*
name|X509_policy_level_get0_node
parameter_list|(
name|X509_POLICY_LEVEL
modifier|*
name|level
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
specifier|const
name|ASN1_OBJECT
modifier|*
name|X509_policy_node_get0_policy
parameter_list|(
specifier|const
name|X509_POLICY_NODE
modifier|*
name|node
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|POLICYQUALINFO
argument_list|)
operator|*
name|X509_policy_node_get0_qualifiers
argument_list|(
specifier|const
name|X509_POLICY_NODE
operator|*
name|node
argument_list|)
expr_stmt|;
specifier|const
name|X509_POLICY_NODE
modifier|*
name|X509_policy_node_get0_parent
parameter_list|(
specifier|const
name|X509_POLICY_NODE
modifier|*
name|node
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

