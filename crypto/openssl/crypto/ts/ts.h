begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/ts/ts.h */
end_comment

begin_comment
comment|/*  * Written by Zoltan Glozik (zglozik@opentsa.org) for the OpenSSL project  * 2002, 2003, 2004.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    licensing@OpenSSL.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_TS_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_TS_H
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BUFFER
end_ifndef

begin_include
include|#
directive|include
file|<openssl/buffer.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EVP
end_ifndef

begin_include
include|#
directive|include
file|<openssl/evp.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/stack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/asn1.h>
end_include

begin_include
include|#
directive|include
file|<openssl/safestack.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
end_ifndef

begin_include
include|#
directive|include
file|<openssl/rsa.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
end_ifndef

begin_include
include|#
directive|include
file|<openssl/dsa.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
end_ifndef

begin_include
include|#
directive|include
file|<openssl/dh.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WIN32
comment|/* Under Win32 this is defined in wincrypt.h */
undef|#
directive|undef
name|X509_NAME
endif|#
directive|endif
include|#
directive|include
file|<openssl/x509.h>
include|#
directive|include
file|<openssl/x509v3.h>
comment|/*- MessageImprint ::= SEQUENCE  {      hashAlgorithm                AlgorithmIdentifier,      hashedMessage                OCTET STRING  } */
typedef|typedef
struct|struct
name|TS_msg_imprint_st
block|{
name|X509_ALGOR
modifier|*
name|hash_algo
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|hashed_msg
decl_stmt|;
block|}
name|TS_MSG_IMPRINT
typedef|;
comment|/*- TimeStampReq ::= SEQUENCE  {    version                  INTEGER  { v1(1) },    messageImprint           MessageImprint,      --a hash algorithm OID and the hash value of the data to be      --time-stamped    reqPolicy                TSAPolicyId                OPTIONAL,    nonce                    INTEGER                    OPTIONAL,    certReq                  BOOLEAN                    DEFAULT FALSE,    extensions               [0] IMPLICIT Extensions    OPTIONAL  } */
typedef|typedef
struct|struct
name|TS_req_st
block|{
name|ASN1_INTEGER
modifier|*
name|version
decl_stmt|;
name|TS_MSG_IMPRINT
modifier|*
name|msg_imprint
decl_stmt|;
name|ASN1_OBJECT
modifier|*
name|policy_id
decl_stmt|;
comment|/* OPTIONAL */
name|ASN1_INTEGER
modifier|*
name|nonce
decl_stmt|;
comment|/* OPTIONAL */
name|ASN1_BOOLEAN
name|cert_req
decl_stmt|;
comment|/* DEFAULT FALSE */
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|extensions
expr_stmt|;
comment|/* [0] OPTIONAL */
block|}
name|TS_REQ
typedef|;
comment|/*- Accuracy ::= SEQUENCE {                 seconds        INTEGER           OPTIONAL,                 millis     [0] INTEGER  (1..999) OPTIONAL,                 micros     [1] INTEGER  (1..999) OPTIONAL  } */
typedef|typedef
struct|struct
name|TS_accuracy_st
block|{
name|ASN1_INTEGER
modifier|*
name|seconds
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|millis
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|micros
decl_stmt|;
block|}
name|TS_ACCURACY
typedef|;
comment|/*- TSTInfo ::= SEQUENCE  {     version                      INTEGER  { v1(1) },     policy                       TSAPolicyId,     messageImprint               MessageImprint,       -- MUST have the same value as the similar field in       -- TimeStampReq     serialNumber                 INTEGER,      -- Time-Stamping users MUST be ready to accommodate integers      -- up to 160 bits.     genTime                      GeneralizedTime,     accuracy                     Accuracy                 OPTIONAL,     ordering                     BOOLEAN             DEFAULT FALSE,     nonce                        INTEGER                  OPTIONAL,       -- MUST be present if the similar field was present       -- in TimeStampReq.  In that case it MUST have the same value.     tsa                          [0] GeneralName          OPTIONAL,     extensions                   [1] IMPLICIT Extensions  OPTIONAL   } */
typedef|typedef
struct|struct
name|TS_tst_info_st
block|{
name|ASN1_INTEGER
modifier|*
name|version
decl_stmt|;
name|ASN1_OBJECT
modifier|*
name|policy_id
decl_stmt|;
name|TS_MSG_IMPRINT
modifier|*
name|msg_imprint
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|serial
decl_stmt|;
name|ASN1_GENERALIZEDTIME
modifier|*
name|time
decl_stmt|;
name|TS_ACCURACY
modifier|*
name|accuracy
decl_stmt|;
name|ASN1_BOOLEAN
name|ordering
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|nonce
decl_stmt|;
name|GENERAL_NAME
modifier|*
name|tsa
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|extensions
expr_stmt|;
block|}
name|TS_TST_INFO
typedef|;
comment|/*- PKIStatusInfo ::= SEQUENCE {     status        PKIStatus,     statusString  PKIFreeText     OPTIONAL,     failInfo      PKIFailureInfo  OPTIONAL  }  From RFC 1510 - section 3.1.1: PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String         -- text encoded as UTF-8 String (note:  each UTF8String SHOULD         -- include an RFC 1766 language tag to indicate the language         -- of the contained text) */
comment|/* Possible values for status. See ts_resp_print.c&& ts_resp_verify.c. */
define|#
directive|define
name|TS_STATUS_GRANTED
value|0
define|#
directive|define
name|TS_STATUS_GRANTED_WITH_MODS
value|1
define|#
directive|define
name|TS_STATUS_REJECTION
value|2
define|#
directive|define
name|TS_STATUS_WAITING
value|3
define|#
directive|define
name|TS_STATUS_REVOCATION_WARNING
value|4
define|#
directive|define
name|TS_STATUS_REVOCATION_NOTIFICATION
value|5
comment|/*  * Possible values for failure_info. See ts_resp_print.c&& ts_resp_verify.c  */
define|#
directive|define
name|TS_INFO_BAD_ALG
value|0
define|#
directive|define
name|TS_INFO_BAD_REQUEST
value|2
define|#
directive|define
name|TS_INFO_BAD_DATA_FORMAT
value|5
define|#
directive|define
name|TS_INFO_TIME_NOT_AVAILABLE
value|14
define|#
directive|define
name|TS_INFO_UNACCEPTED_POLICY
value|15
define|#
directive|define
name|TS_INFO_UNACCEPTED_EXTENSION
value|16
define|#
directive|define
name|TS_INFO_ADD_INFO_NOT_AVAILABLE
value|17
define|#
directive|define
name|TS_INFO_SYSTEM_FAILURE
value|25
typedef|typedef
struct|struct
name|TS_status_info_st
block|{
name|ASN1_INTEGER
modifier|*
name|status
decl_stmt|;
name|STACK_OF
argument_list|(
name|ASN1_UTF8STRING
argument_list|)
operator|*
name|text
expr_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|failure_info
decl_stmt|;
block|}
name|TS_STATUS_INFO
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|ASN1_UTF8STRING
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|ASN1_UTF8STRING
argument_list|)
comment|/*- TimeStampResp ::= SEQUENCE  {      status                  PKIStatusInfo,      timeStampToken          TimeStampToken     OPTIONAL } */
typedef|typedef
struct|struct
name|TS_resp_st
block|{
name|TS_STATUS_INFO
modifier|*
name|status_info
decl_stmt|;
name|PKCS7
modifier|*
name|token
decl_stmt|;
name|TS_TST_INFO
modifier|*
name|tst_info
decl_stmt|;
block|}
name|TS_RESP
typedef|;
comment|/* The structure below would belong to the ESS component. */
comment|/*- IssuerSerial ::= SEQUENCE {         issuer                   GeneralNames,         serialNumber             CertificateSerialNumber         } */
typedef|typedef
struct|struct
name|ESS_issuer_serial
block|{
name|STACK_OF
argument_list|(
name|GENERAL_NAME
argument_list|)
operator|*
name|issuer
expr_stmt|;
name|ASN1_INTEGER
modifier|*
name|serial
decl_stmt|;
block|}
name|ESS_ISSUER_SERIAL
typedef|;
comment|/*- ESSCertID ::=  SEQUENCE {         certHash                 Hash,         issuerSerial             IssuerSerial OPTIONAL } */
typedef|typedef
struct|struct
name|ESS_cert_id
block|{
name|ASN1_OCTET_STRING
modifier|*
name|hash
decl_stmt|;
comment|/* Always SHA-1 digest. */
name|ESS_ISSUER_SERIAL
modifier|*
name|issuer_serial
decl_stmt|;
block|}
name|ESS_CERT_ID
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|ESS_CERT_ID
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|ESS_CERT_ID
argument_list|)
comment|/*- SigningCertificate ::=  SEQUENCE {        certs        SEQUENCE OF ESSCertID,        policies     SEQUENCE OF PolicyInformation OPTIONAL } */
typedef|typedef
struct|struct
name|ESS_signing_cert
block|{
name|STACK_OF
argument_list|(
name|ESS_CERT_ID
argument_list|)
operator|*
name|cert_ids
expr_stmt|;
name|STACK_OF
argument_list|(
name|POLICYINFO
argument_list|)
operator|*
name|policy_info
expr_stmt|;
block|}
name|ESS_SIGNING_CERT
typedef|;
name|TS_REQ
modifier|*
name|TS_REQ_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_REQ_free
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_REQ
parameter_list|(
specifier|const
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|TS_REQ
modifier|*
name|d2i_TS_REQ
parameter_list|(
name|TS_REQ
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|TS_REQ
modifier|*
name|TS_REQ_dup
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_REQ
modifier|*
name|d2i_TS_REQ_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_REQ
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_REQ_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_REQ
modifier|*
name|d2i_TS_REQ_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_REQ
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_REQ_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_MSG_IMPRINT
modifier|*
name|TS_MSG_IMPRINT_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_MSG_IMPRINT_free
parameter_list|(
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_MSG_IMPRINT
parameter_list|(
specifier|const
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|TS_MSG_IMPRINT
modifier|*
name|d2i_TS_MSG_IMPRINT
parameter_list|(
name|TS_MSG_IMPRINT
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|TS_MSG_IMPRINT
modifier|*
name|TS_MSG_IMPRINT_dup
parameter_list|(
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_MSG_IMPRINT
modifier|*
name|d2i_TS_MSG_IMPRINT_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_MSG_IMPRINT
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_MSG_IMPRINT_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_MSG_IMPRINT
modifier|*
name|d2i_TS_MSG_IMPRINT_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_MSG_IMPRINT
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_MSG_IMPRINT_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_RESP
modifier|*
name|TS_RESP_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_RESP_free
parameter_list|(
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_RESP
parameter_list|(
specifier|const
name|TS_RESP
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|TS_RESP
modifier|*
name|d2i_TS_RESP
parameter_list|(
name|TS_RESP
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|PKCS7_to_TS_TST_INFO
parameter_list|(
name|PKCS7
modifier|*
name|token
parameter_list|)
function_decl|;
name|TS_RESP
modifier|*
name|TS_RESP_dup
parameter_list|(
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_RESP
modifier|*
name|d2i_TS_RESP_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_RESP
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_RESP_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_RESP
modifier|*
name|d2i_TS_RESP_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_RESP
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_RESP_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_STATUS_INFO
modifier|*
name|TS_STATUS_INFO_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_STATUS_INFO_free
parameter_list|(
name|TS_STATUS_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_STATUS_INFO
parameter_list|(
specifier|const
name|TS_STATUS_INFO
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|TS_STATUS_INFO
modifier|*
name|d2i_TS_STATUS_INFO
parameter_list|(
name|TS_STATUS_INFO
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|TS_STATUS_INFO
modifier|*
name|TS_STATUS_INFO_dup
parameter_list|(
name|TS_STATUS_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|TS_TST_INFO_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_TST_INFO_free
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_TST_INFO
parameter_list|(
specifier|const
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|d2i_TS_TST_INFO
parameter_list|(
name|TS_TST_INFO
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|TS_TST_INFO_dup
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|d2i_TS_TST_INFO_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_TST_INFO
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_TST_INFO_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|d2i_TS_TST_INFO_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_TST_INFO
modifier|*
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_TST_INFO_bio
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_ACCURACY
modifier|*
name|TS_ACCURACY_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_ACCURACY_free
parameter_list|(
name|TS_ACCURACY
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_TS_ACCURACY
parameter_list|(
specifier|const
name|TS_ACCURACY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|TS_ACCURACY
modifier|*
name|d2i_TS_ACCURACY
parameter_list|(
name|TS_ACCURACY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|TS_ACCURACY
modifier|*
name|TS_ACCURACY_dup
parameter_list|(
name|TS_ACCURACY
modifier|*
name|a
parameter_list|)
function_decl|;
name|ESS_ISSUER_SERIAL
modifier|*
name|ESS_ISSUER_SERIAL_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|ESS_ISSUER_SERIAL_free
parameter_list|(
name|ESS_ISSUER_SERIAL
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_ESS_ISSUER_SERIAL
parameter_list|(
specifier|const
name|ESS_ISSUER_SERIAL
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|ESS_ISSUER_SERIAL
modifier|*
name|d2i_ESS_ISSUER_SERIAL
parameter_list|(
name|ESS_ISSUER_SERIAL
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|ESS_ISSUER_SERIAL
modifier|*
name|ESS_ISSUER_SERIAL_dup
parameter_list|(
name|ESS_ISSUER_SERIAL
modifier|*
name|a
parameter_list|)
function_decl|;
name|ESS_CERT_ID
modifier|*
name|ESS_CERT_ID_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|ESS_CERT_ID_free
parameter_list|(
name|ESS_CERT_ID
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_ESS_CERT_ID
parameter_list|(
specifier|const
name|ESS_CERT_ID
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|ESS_CERT_ID
modifier|*
name|d2i_ESS_CERT_ID
parameter_list|(
name|ESS_CERT_ID
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|ESS_CERT_ID
modifier|*
name|ESS_CERT_ID_dup
parameter_list|(
name|ESS_CERT_ID
modifier|*
name|a
parameter_list|)
function_decl|;
name|ESS_SIGNING_CERT
modifier|*
name|ESS_SIGNING_CERT_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|ESS_SIGNING_CERT_free
parameter_list|(
name|ESS_SIGNING_CERT
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_ESS_SIGNING_CERT
parameter_list|(
specifier|const
name|ESS_SIGNING_CERT
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|ESS_SIGNING_CERT
modifier|*
name|d2i_ESS_SIGNING_CERT
parameter_list|(
name|ESS_SIGNING_CERT
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|ESS_SIGNING_CERT
modifier|*
name|ESS_SIGNING_CERT_dup
parameter_list|(
name|ESS_SIGNING_CERT
modifier|*
name|a
parameter_list|)
function_decl|;
name|void
name|ERR_load_TS_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|TS_REQ_set_version
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|long
name|version
parameter_list|)
function_decl|;
name|long
name|TS_REQ_get_version
parameter_list|(
specifier|const
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_REQ_set_msg_imprint
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|TS_MSG_IMPRINT
modifier|*
name|msg_imprint
parameter_list|)
function_decl|;
name|TS_MSG_IMPRINT
modifier|*
name|TS_REQ_get_msg_imprint
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_MSG_IMPRINT_set_algo
parameter_list|(
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|,
name|X509_ALGOR
modifier|*
name|alg
parameter_list|)
function_decl|;
name|X509_ALGOR
modifier|*
name|TS_MSG_IMPRINT_get_algo
parameter_list|(
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_MSG_IMPRINT_set_msg
parameter_list|(
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|ASN1_OCTET_STRING
modifier|*
name|TS_MSG_IMPRINT_get_msg
parameter_list|(
name|TS_MSG_IMPRINT
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_REQ_set_policy_id
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|policy
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|TS_REQ_get_policy_id
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_REQ_set_nonce
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_INTEGER
modifier|*
name|nonce
parameter_list|)
function_decl|;
specifier|const
name|ASN1_INTEGER
modifier|*
name|TS_REQ_get_nonce
parameter_list|(
specifier|const
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_REQ_set_cert_req
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|int
name|cert_req
parameter_list|)
function_decl|;
name|int
name|TS_REQ_get_cert_req
parameter_list|(
specifier|const
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|TS_REQ_get_exts
argument_list|(
name|TS_REQ
operator|*
name|a
argument_list|)
expr_stmt|;
name|void
name|TS_REQ_ext_free
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_REQ_get_ext_count
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_REQ_get_ext_by_NID
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|TS_REQ_get_ext_by_OBJ
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|TS_REQ_get_ext_by_critical
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|int
name|crit
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|TS_REQ_get_ext
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|TS_REQ_delete_ext
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|TS_REQ_add_ext
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|void
modifier|*
name|TS_REQ_get_ext_d2i
parameter_list|(
name|TS_REQ
modifier|*
name|a
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
modifier|*
name|crit
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
function_decl|;
comment|/* Function declarations for TS_REQ defined in ts/ts_req_print.c */
name|int
name|TS_REQ_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|TS_REQ
modifier|*
name|a
parameter_list|)
function_decl|;
comment|/* Function declarations for TS_RESP defined in ts/ts_resp_utils.c */
name|int
name|TS_RESP_set_status_info
parameter_list|(
name|TS_RESP
modifier|*
name|a
parameter_list|,
name|TS_STATUS_INFO
modifier|*
name|info
parameter_list|)
function_decl|;
name|TS_STATUS_INFO
modifier|*
name|TS_RESP_get_status_info
parameter_list|(
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
comment|/* Caller loses ownership of PKCS7 and TS_TST_INFO objects. */
name|void
name|TS_RESP_set_tst_info
parameter_list|(
name|TS_RESP
modifier|*
name|a
parameter_list|,
name|PKCS7
modifier|*
name|p7
parameter_list|,
name|TS_TST_INFO
modifier|*
name|tst_info
parameter_list|)
function_decl|;
name|PKCS7
modifier|*
name|TS_RESP_get_token
parameter_list|(
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|TS_RESP_get_tst_info
parameter_list|(
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_version
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|long
name|version
parameter_list|)
function_decl|;
name|long
name|TS_TST_INFO_get_version
parameter_list|(
specifier|const
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_policy_id
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|policy_id
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|TS_TST_INFO_get_policy_id
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_msg_imprint
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|TS_MSG_IMPRINT
modifier|*
name|msg_imprint
parameter_list|)
function_decl|;
name|TS_MSG_IMPRINT
modifier|*
name|TS_TST_INFO_get_msg_imprint
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_serial
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_INTEGER
modifier|*
name|serial
parameter_list|)
function_decl|;
specifier|const
name|ASN1_INTEGER
modifier|*
name|TS_TST_INFO_get_serial
parameter_list|(
specifier|const
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_time
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_GENERALIZEDTIME
modifier|*
name|gtime
parameter_list|)
function_decl|;
specifier|const
name|ASN1_GENERALIZEDTIME
modifier|*
name|TS_TST_INFO_get_time
parameter_list|(
specifier|const
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_accuracy
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|TS_ACCURACY
modifier|*
name|accuracy
parameter_list|)
function_decl|;
name|TS_ACCURACY
modifier|*
name|TS_TST_INFO_get_accuracy
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_ACCURACY_set_seconds
parameter_list|(
name|TS_ACCURACY
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_INTEGER
modifier|*
name|seconds
parameter_list|)
function_decl|;
specifier|const
name|ASN1_INTEGER
modifier|*
name|TS_ACCURACY_get_seconds
parameter_list|(
specifier|const
name|TS_ACCURACY
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_ACCURACY_set_millis
parameter_list|(
name|TS_ACCURACY
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_INTEGER
modifier|*
name|millis
parameter_list|)
function_decl|;
specifier|const
name|ASN1_INTEGER
modifier|*
name|TS_ACCURACY_get_millis
parameter_list|(
specifier|const
name|TS_ACCURACY
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_ACCURACY_set_micros
parameter_list|(
name|TS_ACCURACY
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_INTEGER
modifier|*
name|micros
parameter_list|)
function_decl|;
specifier|const
name|ASN1_INTEGER
modifier|*
name|TS_ACCURACY_get_micros
parameter_list|(
specifier|const
name|TS_ACCURACY
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_ordering
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|int
name|ordering
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_get_ordering
parameter_list|(
specifier|const
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_nonce
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_INTEGER
modifier|*
name|nonce
parameter_list|)
function_decl|;
specifier|const
name|ASN1_INTEGER
modifier|*
name|TS_TST_INFO_get_nonce
parameter_list|(
specifier|const
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_set_tsa
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|GENERAL_NAME
modifier|*
name|tsa
parameter_list|)
function_decl|;
name|GENERAL_NAME
modifier|*
name|TS_TST_INFO_get_tsa
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|TS_TST_INFO_get_exts
argument_list|(
name|TS_TST_INFO
operator|*
name|a
argument_list|)
expr_stmt|;
name|void
name|TS_TST_INFO_ext_free
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_get_ext_count
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_get_ext_by_NID
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_get_ext_by_OBJ
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_get_ext_by_critical
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|int
name|crit
parameter_list|,
name|int
name|lastpos
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|TS_TST_INFO_get_ext
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|X509_EXTENSION
modifier|*
name|TS_TST_INFO_delete_ext
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_add_ext
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|X509_EXTENSION
modifier|*
name|ex
parameter_list|,
name|int
name|loc
parameter_list|)
function_decl|;
name|void
modifier|*
name|TS_TST_INFO_get_ext_d2i
parameter_list|(
name|TS_TST_INFO
modifier|*
name|a
parameter_list|,
name|int
name|nid
parameter_list|,
name|int
modifier|*
name|crit
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
function_decl|;
comment|/*  * Declarations related to response generation, defined in ts/ts_resp_sign.c.  */
comment|/* Optional flags for response generation. */
comment|/* Don't include the TSA name in response. */
define|#
directive|define
name|TS_TSA_NAME
value|0x01
comment|/* Set ordering to true in response. */
define|#
directive|define
name|TS_ORDERING
value|0x02
comment|/*  * Include the signer certificate and the other specified certificates in  * the ESS signing certificate attribute beside the PKCS7 signed data.  * Only the signer certificates is included by default.  */
define|#
directive|define
name|TS_ESS_CERT_ID_CHAIN
value|0x04
comment|/* Forward declaration. */
struct_decl|struct
name|TS_resp_ctx
struct_decl|;
comment|/* This must return a unique number less than 160 bits long. */
typedef|typedef
name|ASN1_INTEGER
modifier|*
function_decl|(
modifier|*
name|TS_serial_cb
function_decl|)
parameter_list|(
name|struct
name|TS_resp_ctx
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*  * This must return the seconds and microseconds since Jan 1, 1970 in the sec  * and usec variables allocated by the caller. Return non-zero for success  * and zero for failure.  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|TS_time_cb
function_decl|)
parameter_list|(
name|struct
name|TS_resp_ctx
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|long
modifier|*
name|sec
parameter_list|,
name|long
modifier|*
name|usec
parameter_list|)
function_decl|;
comment|/*  * This must process the given extension. It can modify the TS_TST_INFO  * object of the context. Return values: !0 (processed), 0 (error, it must  * set the status info/failure info of the response).  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|TS_extension_cb
function_decl|)
parameter_list|(
name|struct
name|TS_resp_ctx
modifier|*
parameter_list|,
name|X509_EXTENSION
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|TS_resp_ctx
block|{
name|X509
modifier|*
name|signer_cert
decl_stmt|;
name|EVP_PKEY
modifier|*
name|signer_key
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|certs
expr_stmt|;
comment|/* Certs to include in signed data. */
name|STACK_OF
argument_list|(
name|ASN1_OBJECT
argument_list|)
operator|*
name|policies
expr_stmt|;
comment|/* Acceptable policies. */
name|ASN1_OBJECT
modifier|*
name|default_policy
decl_stmt|;
comment|/* It may appear in policies, too. */
name|STACK_OF
argument_list|(
name|EVP_MD
argument_list|)
operator|*
name|mds
expr_stmt|;
comment|/* Acceptable message digests. */
name|ASN1_INTEGER
modifier|*
name|seconds
decl_stmt|;
comment|/* accuracy, 0 means not specified. */
name|ASN1_INTEGER
modifier|*
name|millis
decl_stmt|;
comment|/* accuracy, 0 means not specified. */
name|ASN1_INTEGER
modifier|*
name|micros
decl_stmt|;
comment|/* accuracy, 0 means not specified. */
name|unsigned
name|clock_precision_digits
decl_stmt|;
comment|/* fraction of seconds in time stamp                                       * token. */
name|unsigned
name|flags
decl_stmt|;
comment|/* Optional info, see values above. */
comment|/* Callback functions. */
name|TS_serial_cb
name|serial_cb
decl_stmt|;
name|void
modifier|*
name|serial_cb_data
decl_stmt|;
comment|/* User data for serial_cb. */
name|TS_time_cb
name|time_cb
decl_stmt|;
name|void
modifier|*
name|time_cb_data
decl_stmt|;
comment|/* User data for time_cb. */
name|TS_extension_cb
name|extension_cb
decl_stmt|;
name|void
modifier|*
name|extension_cb_data
decl_stmt|;
comment|/* User data for extension_cb. */
comment|/* These members are used only while creating the response. */
name|TS_REQ
modifier|*
name|request
decl_stmt|;
name|TS_RESP
modifier|*
name|response
decl_stmt|;
name|TS_TST_INFO
modifier|*
name|tst_info
decl_stmt|;
block|}
name|TS_RESP_CTX
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|EVP_MD
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|EVP_MD
argument_list|)
comment|/* Creates a response context that can be used for generating responses. */
name|TS_RESP_CTX
modifier|*
name|TS_RESP_CTX_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_RESP_CTX_free
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* This parameter must be set. */
name|int
name|TS_RESP_CTX_set_signer_cert
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|signer
parameter_list|)
function_decl|;
comment|/* This parameter must be set. */
name|int
name|TS_RESP_CTX_set_signer_key
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|EVP_PKEY
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/* This parameter must be set. */
name|int
name|TS_RESP_CTX_set_def_policy
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|def_policy
parameter_list|)
function_decl|;
comment|/* No additional certs are included in the response by default. */
name|int
name|TS_RESP_CTX_set_certs
argument_list|(
name|TS_RESP_CTX
operator|*
name|ctx
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|certs
argument_list|)
decl_stmt|;
comment|/*  * Adds a new acceptable policy, only the default policy is accepted by  * default.  */
name|int
name|TS_RESP_CTX_add_policy
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|policy
parameter_list|)
function_decl|;
comment|/*  * Adds a new acceptable message digest. Note that no message digests are  * accepted by default. The md argument is shared with the caller.  */
name|int
name|TS_RESP_CTX_add_md
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|md
parameter_list|)
function_decl|;
comment|/* Accuracy is not included by default. */
name|int
name|TS_RESP_CTX_set_accuracy
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|secs
parameter_list|,
name|int
name|millis
parameter_list|,
name|int
name|micros
parameter_list|)
function_decl|;
comment|/*  * Clock precision digits, i.e. the number of decimal digits: '0' means sec,  * '3' msec, '6' usec, and so on. Default is 0.  */
name|int
name|TS_RESP_CTX_set_clock_precision_digits
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|clock_precision_digits
parameter_list|)
function_decl|;
comment|/* At most we accept usec precision. */
define|#
directive|define
name|TS_MAX_CLOCK_PRECISION_DIGITS
value|6
comment|/* No flags are set by default. */
name|void
name|TS_RESP_CTX_add_flags
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
comment|/* Default callback always returns a constant. */
name|void
name|TS_RESP_CTX_set_serial_cb
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|TS_serial_cb
name|cb
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/* Default callback uses the gettimeofday() and gmtime() system calls. */
name|void
name|TS_RESP_CTX_set_time_cb
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|TS_time_cb
name|cb
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/*  * Default callback rejects all extensions. The extension callback is called  * when the TS_TST_INFO object is already set up and not signed yet.  */
comment|/* FIXME: extension handling is not tested yet. */
name|void
name|TS_RESP_CTX_set_extension_cb
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|TS_extension_cb
name|cb
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/* The following methods can be used in the callbacks. */
name|int
name|TS_RESP_CTX_set_status_info
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|status
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
comment|/* Sets the status info only if it is still TS_STATUS_GRANTED. */
name|int
name|TS_RESP_CTX_set_status_info_cond
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|status
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
name|int
name|TS_RESP_CTX_add_failure_info
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|failure
parameter_list|)
function_decl|;
comment|/* The get methods below can be used in the extension callback. */
name|TS_REQ
modifier|*
name|TS_RESP_CTX_get_request
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|TS_TST_INFO
modifier|*
name|TS_RESP_CTX_get_tst_info
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/*  * Creates the signed TS_TST_INFO and puts it in TS_RESP.  * In case of errors it sets the status info properly.  * Returns NULL only in case of memory allocation/fatal error.  */
name|TS_RESP
modifier|*
name|TS_RESP_create_response
parameter_list|(
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|,
name|BIO
modifier|*
name|req_bio
parameter_list|)
function_decl|;
comment|/*  * Declarations related to response verification,  * they are defined in ts/ts_resp_verify.c.  */
name|int
name|TS_RESP_verify_signature
argument_list|(
name|PKCS7
operator|*
name|token
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|certs
argument_list|,
name|X509_STORE
operator|*
name|store
argument_list|,
name|X509
operator|*
operator|*
name|signer_out
argument_list|)
decl_stmt|;
comment|/* Context structure for the generic verify method. */
comment|/* Verify the signer's certificate and the signature of the response. */
define|#
directive|define
name|TS_VFY_SIGNATURE
value|(1u<< 0)
comment|/* Verify the version number of the response. */
define|#
directive|define
name|TS_VFY_VERSION
value|(1u<< 1)
comment|/* Verify if the policy supplied by the user matches the policy of the TSA. */
define|#
directive|define
name|TS_VFY_POLICY
value|(1u<< 2)
comment|/*  * Verify the message imprint provided by the user. This flag should not be  * specified with TS_VFY_DATA.  */
define|#
directive|define
name|TS_VFY_IMPRINT
value|(1u<< 3)
comment|/*  * Verify the message imprint computed by the verify method from the user  * provided data and the MD algorithm of the response. This flag should not  * be specified with TS_VFY_IMPRINT.  */
define|#
directive|define
name|TS_VFY_DATA
value|(1u<< 4)
comment|/* Verify the nonce value. */
define|#
directive|define
name|TS_VFY_NONCE
value|(1u<< 5)
comment|/* Verify if the TSA name field matches the signer certificate. */
define|#
directive|define
name|TS_VFY_SIGNER
value|(1u<< 6)
comment|/* Verify if the TSA name field equals to the user provided name. */
define|#
directive|define
name|TS_VFY_TSA_NAME
value|(1u<< 7)
comment|/* You can use the following convenience constants. */
define|#
directive|define
name|TS_VFY_ALL_IMPRINT
value|(TS_VFY_SIGNATURE       \                                  | TS_VFY_VERSION       \                                  | TS_VFY_POLICY        \                                  | TS_VFY_IMPRINT       \                                  | TS_VFY_NONCE         \                                  | TS_VFY_SIGNER        \                                  | TS_VFY_TSA_NAME)
define|#
directive|define
name|TS_VFY_ALL_DATA
value|(TS_VFY_SIGNATURE       \                                  | TS_VFY_VERSION       \                                  | TS_VFY_POLICY        \                                  | TS_VFY_DATA          \                                  | TS_VFY_NONCE         \                                  | TS_VFY_SIGNER        \                                  | TS_VFY_TSA_NAME)
typedef|typedef
struct|struct
name|TS_verify_ctx
block|{
comment|/* Set this to the union of TS_VFY_... flags you want to carry out. */
name|unsigned
name|flags
decl_stmt|;
comment|/* Must be set only with TS_VFY_SIGNATURE. certs is optional. */
name|X509_STORE
modifier|*
name|store
decl_stmt|;
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|certs
expr_stmt|;
comment|/* Must be set only with TS_VFY_POLICY. */
name|ASN1_OBJECT
modifier|*
name|policy
decl_stmt|;
comment|/*      * Must be set only with TS_VFY_IMPRINT. If md_alg is NULL, the      * algorithm from the response is used.      */
name|X509_ALGOR
modifier|*
name|md_alg
decl_stmt|;
name|unsigned
name|char
modifier|*
name|imprint
decl_stmt|;
name|unsigned
name|imprint_len
decl_stmt|;
comment|/* Must be set only with TS_VFY_DATA. */
name|BIO
modifier|*
name|data
decl_stmt|;
comment|/* Must be set only with TS_VFY_TSA_NAME. */
name|ASN1_INTEGER
modifier|*
name|nonce
decl_stmt|;
comment|/* Must be set only with TS_VFY_TSA_NAME. */
name|GENERAL_NAME
modifier|*
name|tsa_name
decl_stmt|;
block|}
name|TS_VERIFY_CTX
typedef|;
name|int
name|TS_RESP_verify_response
parameter_list|(
name|TS_VERIFY_CTX
modifier|*
name|ctx
parameter_list|,
name|TS_RESP
modifier|*
name|response
parameter_list|)
function_decl|;
name|int
name|TS_RESP_verify_token
parameter_list|(
name|TS_VERIFY_CTX
modifier|*
name|ctx
parameter_list|,
name|PKCS7
modifier|*
name|token
parameter_list|)
function_decl|;
comment|/*  * Declarations related to response verification context,  * they are defined in ts/ts_verify_ctx.c.  */
comment|/* Set all fields to zero. */
name|TS_VERIFY_CTX
modifier|*
name|TS_VERIFY_CTX_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|TS_VERIFY_CTX_init
parameter_list|(
name|TS_VERIFY_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|TS_VERIFY_CTX_free
parameter_list|(
name|TS_VERIFY_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|TS_VERIFY_CTX_cleanup
parameter_list|(
name|TS_VERIFY_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/*-  * If ctx is NULL, it allocates and returns a new object, otherwise  * it returns ctx. It initialises all the members as follows:  * flags = TS_VFY_ALL_IMPRINT& ~(TS_VFY_TSA_NAME | TS_VFY_SIGNATURE)  * certs = NULL  * store = NULL  * policy = policy from the request or NULL if absent (in this case  *      TS_VFY_POLICY is cleared from flags as well)  * md_alg = MD algorithm from request  * imprint, imprint_len = imprint from request  * data = NULL  * nonce, nonce_len = nonce from the request or NULL if absent (in this case  *      TS_VFY_NONCE is cleared from flags as well)  * tsa_name = NULL  * Important: after calling this method TS_VFY_SIGNATURE should be added!  */
name|TS_VERIFY_CTX
modifier|*
name|TS_REQ_to_TS_VERIFY_CTX
parameter_list|(
name|TS_REQ
modifier|*
name|req
parameter_list|,
name|TS_VERIFY_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* Function declarations for TS_RESP defined in ts/ts_resp_print.c */
name|int
name|TS_RESP_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|TS_RESP
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_STATUS_INFO_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|TS_STATUS_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|TS_TST_INFO_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|TS_TST_INFO
modifier|*
name|a
parameter_list|)
function_decl|;
comment|/* Common utility functions defined in ts/ts_lib.c */
name|int
name|TS_ASN1_INTEGER_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
specifier|const
name|ASN1_INTEGER
modifier|*
name|num
parameter_list|)
function_decl|;
name|int
name|TS_OBJ_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
specifier|const
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|)
function_decl|;
name|int
name|TS_ext_print_bio
argument_list|(
name|BIO
operator|*
name|bio
argument_list|,
specifier|const
name|STACK_OF
argument_list|(
name|X509_EXTENSION
argument_list|)
operator|*
name|extensions
argument_list|)
decl_stmt|;
name|int
name|TS_X509_ALGOR_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
specifier|const
name|X509_ALGOR
modifier|*
name|alg
parameter_list|)
function_decl|;
name|int
name|TS_MSG_IMPRINT_print_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|TS_MSG_IMPRINT
modifier|*
name|msg
parameter_list|)
function_decl|;
comment|/*  * Function declarations for handling configuration options, defined in  * ts/ts_conf.c  */
name|X509
modifier|*
name|TS_CONF_load_cert
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|TS_CONF_load_certs
argument_list|(
specifier|const
name|char
operator|*
name|file
argument_list|)
expr_stmt|;
name|EVP_PKEY
modifier|*
name|TS_CONF_load_key
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|TS_CONF_get_tsa_section
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_serial
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_serial_cb
name|cb
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_crypto_device
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|device
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_default_engine
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_signer_cert
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|cert
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_certs
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|certs
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_signer_key
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_def_policy
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|policy
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_policies
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_digests
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_accuracy
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_clock_precision_digits
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_ordering
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_tsa_name
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|TS_CONF_set_ess_cert_id_chain
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|TS_RESP_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* -------------------------------------------------- */
comment|/* BEGIN ERROR CODES */
comment|/*  * The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_TS_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the TS functions. */
comment|/* Function codes. */
define|#
directive|define
name|TS_F_D2I_TS_RESP
value|147
define|#
directive|define
name|TS_F_DEF_SERIAL_CB
value|110
define|#
directive|define
name|TS_F_DEF_TIME_CB
value|111
define|#
directive|define
name|TS_F_ESS_ADD_SIGNING_CERT
value|112
define|#
directive|define
name|TS_F_ESS_CERT_ID_NEW_INIT
value|113
define|#
directive|define
name|TS_F_ESS_SIGNING_CERT_NEW_INIT
value|114
define|#
directive|define
name|TS_F_INT_TS_RESP_VERIFY_TOKEN
value|149
define|#
directive|define
name|TS_F_PKCS7_TO_TS_TST_INFO
value|148
define|#
directive|define
name|TS_F_TS_ACCURACY_SET_MICROS
value|115
define|#
directive|define
name|TS_F_TS_ACCURACY_SET_MILLIS
value|116
define|#
directive|define
name|TS_F_TS_ACCURACY_SET_SECONDS
value|117
define|#
directive|define
name|TS_F_TS_CHECK_IMPRINTS
value|100
define|#
directive|define
name|TS_F_TS_CHECK_NONCES
value|101
define|#
directive|define
name|TS_F_TS_CHECK_POLICY
value|102
define|#
directive|define
name|TS_F_TS_CHECK_SIGNING_CERTS
value|103
define|#
directive|define
name|TS_F_TS_CHECK_STATUS_INFO
value|104
define|#
directive|define
name|TS_F_TS_COMPUTE_IMPRINT
value|145
define|#
directive|define
name|TS_F_TS_CONF_SET_DEFAULT_ENGINE
value|146
define|#
directive|define
name|TS_F_TS_GET_STATUS_TEXT
value|105
define|#
directive|define
name|TS_F_TS_MSG_IMPRINT_SET_ALGO
value|118
define|#
directive|define
name|TS_F_TS_REQ_SET_MSG_IMPRINT
value|119
define|#
directive|define
name|TS_F_TS_REQ_SET_NONCE
value|120
define|#
directive|define
name|TS_F_TS_REQ_SET_POLICY_ID
value|121
define|#
directive|define
name|TS_F_TS_RESP_CREATE_RESPONSE
value|122
define|#
directive|define
name|TS_F_TS_RESP_CREATE_TST_INFO
value|123
define|#
directive|define
name|TS_F_TS_RESP_CTX_ADD_FAILURE_INFO
value|124
define|#
directive|define
name|TS_F_TS_RESP_CTX_ADD_MD
value|125
define|#
directive|define
name|TS_F_TS_RESP_CTX_ADD_POLICY
value|126
define|#
directive|define
name|TS_F_TS_RESP_CTX_NEW
value|127
define|#
directive|define
name|TS_F_TS_RESP_CTX_SET_ACCURACY
value|128
define|#
directive|define
name|TS_F_TS_RESP_CTX_SET_CERTS
value|129
define|#
directive|define
name|TS_F_TS_RESP_CTX_SET_DEF_POLICY
value|130
define|#
directive|define
name|TS_F_TS_RESP_CTX_SET_SIGNER_CERT
value|131
define|#
directive|define
name|TS_F_TS_RESP_CTX_SET_STATUS_INFO
value|132
define|#
directive|define
name|TS_F_TS_RESP_GET_POLICY
value|133
define|#
directive|define
name|TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION
value|134
define|#
directive|define
name|TS_F_TS_RESP_SET_STATUS_INFO
value|135
define|#
directive|define
name|TS_F_TS_RESP_SET_TST_INFO
value|150
define|#
directive|define
name|TS_F_TS_RESP_SIGN
value|136
define|#
directive|define
name|TS_F_TS_RESP_VERIFY_SIGNATURE
value|106
define|#
directive|define
name|TS_F_TS_RESP_VERIFY_TOKEN
value|107
define|#
directive|define
name|TS_F_TS_TST_INFO_SET_ACCURACY
value|137
define|#
directive|define
name|TS_F_TS_TST_INFO_SET_MSG_IMPRINT
value|138
define|#
directive|define
name|TS_F_TS_TST_INFO_SET_NONCE
value|139
define|#
directive|define
name|TS_F_TS_TST_INFO_SET_POLICY_ID
value|140
define|#
directive|define
name|TS_F_TS_TST_INFO_SET_SERIAL
value|141
define|#
directive|define
name|TS_F_TS_TST_INFO_SET_TIME
value|142
define|#
directive|define
name|TS_F_TS_TST_INFO_SET_TSA
value|143
define|#
directive|define
name|TS_F_TS_VERIFY
value|108
define|#
directive|define
name|TS_F_TS_VERIFY_CERT
value|109
define|#
directive|define
name|TS_F_TS_VERIFY_CTX_NEW
value|144
comment|/* Reason codes. */
define|#
directive|define
name|TS_R_BAD_PKCS7_TYPE
value|132
define|#
directive|define
name|TS_R_BAD_TYPE
value|133
define|#
directive|define
name|TS_R_CERTIFICATE_VERIFY_ERROR
value|100
define|#
directive|define
name|TS_R_COULD_NOT_SET_ENGINE
value|127
define|#
directive|define
name|TS_R_COULD_NOT_SET_TIME
value|115
define|#
directive|define
name|TS_R_D2I_TS_RESP_INT_FAILED
value|128
define|#
directive|define
name|TS_R_DETACHED_CONTENT
value|134
define|#
directive|define
name|TS_R_ESS_ADD_SIGNING_CERT_ERROR
value|116
define|#
directive|define
name|TS_R_ESS_SIGNING_CERTIFICATE_ERROR
value|101
define|#
directive|define
name|TS_R_INVALID_NULL_POINTER
value|102
define|#
directive|define
name|TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE
value|117
define|#
directive|define
name|TS_R_MESSAGE_IMPRINT_MISMATCH
value|103
define|#
directive|define
name|TS_R_NONCE_MISMATCH
value|104
define|#
directive|define
name|TS_R_NONCE_NOT_RETURNED
value|105
define|#
directive|define
name|TS_R_NO_CONTENT
value|106
define|#
directive|define
name|TS_R_NO_TIME_STAMP_TOKEN
value|107
define|#
directive|define
name|TS_R_PKCS7_ADD_SIGNATURE_ERROR
value|118
define|#
directive|define
name|TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR
value|119
define|#
directive|define
name|TS_R_PKCS7_TO_TS_TST_INFO_FAILED
value|129
define|#
directive|define
name|TS_R_POLICY_MISMATCH
value|108
define|#
directive|define
name|TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
value|120
define|#
directive|define
name|TS_R_RESPONSE_SETUP_ERROR
value|121
define|#
directive|define
name|TS_R_SIGNATURE_FAILURE
value|109
define|#
directive|define
name|TS_R_THERE_MUST_BE_ONE_SIGNER
value|110
define|#
directive|define
name|TS_R_TIME_SYSCALL_ERROR
value|122
define|#
directive|define
name|TS_R_TOKEN_NOT_PRESENT
value|130
define|#
directive|define
name|TS_R_TOKEN_PRESENT
value|131
define|#
directive|define
name|TS_R_TSA_NAME_MISMATCH
value|111
define|#
directive|define
name|TS_R_TSA_UNTRUSTED
value|112
define|#
directive|define
name|TS_R_TST_INFO_SETUP_ERROR
value|123
define|#
directive|define
name|TS_R_TS_DATASIGN
value|124
define|#
directive|define
name|TS_R_UNACCEPTABLE_POLICY
value|125
define|#
directive|define
name|TS_R_UNSUPPORTED_MD_ALGORITHM
value|126
define|#
directive|define
name|TS_R_UNSUPPORTED_VERSION
value|113
define|#
directive|define
name|TS_R_WRONG_CONTENT_TYPE
value|114
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

