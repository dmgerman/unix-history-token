begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/rsa/rsa.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_RSA_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_RSA_H
end_define

begin_include
include|#
directive|include
file|<openssl/asn1.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/crypto.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_NO_RSA
end_ifdef

begin_error
error|#
directive|error
error|RSA is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Declared already in ossl_typ.h */
comment|/* typedef struct rsa_st RSA; */
comment|/* typedef struct rsa_meth_st RSA_METHOD; */
struct|struct
name|rsa_meth_st
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
function_decl|(
modifier|*
name|rsa_pub_enc
function_decl|)
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rsa_pub_dec
function_decl|)
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rsa_priv_enc
function_decl|)
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rsa_priv_dec
function_decl|)
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rsa_mod_exp
function_decl|)
parameter_list|(
name|BIGNUM
modifier|*
name|r0
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|I
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* Can be null */
name|int
function_decl|(
modifier|*
name|bn_mod_exp
function_decl|)
parameter_list|(
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|m_ctx
parameter_list|)
function_decl|;
comment|/* Can be null */
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
comment|/* called at new */
name|int
function_decl|(
modifier|*
name|finish
function_decl|)
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
comment|/* called at free */
name|int
name|flags
decl_stmt|;
comment|/* RSA_METHOD_FLAG_* things */
name|char
modifier|*
name|app_data
decl_stmt|;
comment|/* may be needed! */
comment|/* New sign and verify functions: some libraries don't allow arbitrary data  * to be signed/verified: this allows them to be used. Note: for this to work  * the RSA_public_decrypt() and RSA_private_encrypt() should *NOT* be used  * RSA_sign(), RSA_verify() should be used instead. Note: for backwards  * compatibility this functionality is only enabled if the RSA_FLAG_SIGN_VER  * option is set in 'flags'.  */
name|int
function_decl|(
modifier|*
name|rsa_sign
function_decl|)
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigret
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
specifier|const
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rsa_verify
function_decl|)
parameter_list|(
name|int
name|dtype
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigbuf
parameter_list|,
name|unsigned
name|int
name|siglen
parameter_list|,
specifier|const
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
comment|/* If this callback is NULL, the builtin software RSA key-gen will be used. This  * is for behavioural compatibility whilst the code gets rewired, but one day  * it would be nice to assume there are no such things as "builtin software"  * implementations. */
name|int
function_decl|(
modifier|*
name|rsa_keygen
function_decl|)
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|bits
parameter_list|,
name|BIGNUM
modifier|*
name|e
parameter_list|,
name|BN_GENCB
modifier|*
name|cb
parameter_list|)
function_decl|;
block|}
struct|;
struct|struct
name|rsa_st
block|{
comment|/* The first parameter is used to pickup errors where 	 * this is passed instead of aEVP_PKEY, it is set to 0 */
name|int
name|pad
decl_stmt|;
name|long
name|version
decl_stmt|;
specifier|const
name|RSA_METHOD
modifier|*
name|meth
decl_stmt|;
comment|/* functional reference if 'meth' is ENGINE-provided */
name|ENGINE
modifier|*
name|engine
decl_stmt|;
name|BIGNUM
modifier|*
name|n
decl_stmt|;
name|BIGNUM
modifier|*
name|e
decl_stmt|;
name|BIGNUM
modifier|*
name|d
decl_stmt|;
name|BIGNUM
modifier|*
name|p
decl_stmt|;
name|BIGNUM
modifier|*
name|q
decl_stmt|;
name|BIGNUM
modifier|*
name|dmp1
decl_stmt|;
name|BIGNUM
modifier|*
name|dmq1
decl_stmt|;
name|BIGNUM
modifier|*
name|iqmp
decl_stmt|;
comment|/* be careful using this if the RSA structure is shared */
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
name|int
name|references
decl_stmt|;
name|int
name|flags
decl_stmt|;
comment|/* Used to cache montgomery values */
name|BN_MONT_CTX
modifier|*
name|_method_mod_n
decl_stmt|;
name|BN_MONT_CTX
modifier|*
name|_method_mod_p
decl_stmt|;
name|BN_MONT_CTX
modifier|*
name|_method_mod_q
decl_stmt|;
comment|/* all BIGNUM values are actually in the following data, if it is not 	 * NULL */
name|char
modifier|*
name|bignum_data
decl_stmt|;
name|BN_BLINDING
modifier|*
name|blinding
decl_stmt|;
name|BN_BLINDING
modifier|*
name|mt_blinding
decl_stmt|;
block|}
struct|;
ifndef|#
directive|ifndef
name|OPENSSL_RSA_MAX_MODULUS_BITS
define|#
directive|define
name|OPENSSL_RSA_MAX_MODULUS_BITS
value|16384
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_RSA_SMALL_MODULUS_BITS
define|#
directive|define
name|OPENSSL_RSA_SMALL_MODULUS_BITS
value|3072
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_RSA_MAX_PUBEXP_BITS
define|#
directive|define
name|OPENSSL_RSA_MAX_PUBEXP_BITS
value|64
comment|/* exponent limit enforced for "large" modulus only */
endif|#
directive|endif
define|#
directive|define
name|RSA_3
value|0x3L
define|#
directive|define
name|RSA_F4
value|0x10001L
define|#
directive|define
name|RSA_METHOD_FLAG_NO_CHECK
value|0x0001
comment|/* don't check pub/private match */
define|#
directive|define
name|RSA_FLAG_CACHE_PUBLIC
value|0x0002
define|#
directive|define
name|RSA_FLAG_CACHE_PRIVATE
value|0x0004
define|#
directive|define
name|RSA_FLAG_BLINDING
value|0x0008
define|#
directive|define
name|RSA_FLAG_THREAD_SAFE
value|0x0010
comment|/* This flag means the private key operations will be handled by rsa_mod_exp  * and that they do not depend on the private key components being present:  * for example a key stored in external hardware. Without this flag bn_mod_exp  * gets called when private key components are absent.  */
define|#
directive|define
name|RSA_FLAG_EXT_PKEY
value|0x0020
comment|/* This flag in the RSA_METHOD enables the new rsa_sign, rsa_verify functions.  */
define|#
directive|define
name|RSA_FLAG_SIGN_VER
value|0x0040
define|#
directive|define
name|RSA_FLAG_NO_BLINDING
value|0x0080
comment|/* new with 0.9.6j and 0.9.7b; the built-in                                                 * RSA implementation now uses blinding by                                                 * default (ignoring RSA_FLAG_BLINDING),                                                 * but other engines might not need it                                                 */
define|#
directive|define
name|RSA_FLAG_NO_EXP_CONSTTIME
value|0x0100
comment|/* new with 0.9.7h; the built-in RSA                                                 * implementation now uses constant time                                                 * modular exponentiation for secret exponents                                                 * by default. This flag causes the                                                 * faster variable sliding window method to                                                 * be used for all exponents.                                                 */
define|#
directive|define
name|RSA_PKCS1_PADDING
value|1
define|#
directive|define
name|RSA_SSLV23_PADDING
value|2
define|#
directive|define
name|RSA_NO_PADDING
value|3
define|#
directive|define
name|RSA_PKCS1_OAEP_PADDING
value|4
define|#
directive|define
name|RSA_X931_PADDING
value|5
define|#
directive|define
name|RSA_PKCS1_PADDING_SIZE
value|11
define|#
directive|define
name|RSA_set_app_data
parameter_list|(
name|s
parameter_list|,
name|arg
parameter_list|)
value|RSA_set_ex_data(s,0,arg)
define|#
directive|define
name|RSA_get_app_data
parameter_list|(
name|s
parameter_list|)
value|RSA_get_ex_data(s,0)
name|RSA
modifier|*
name|RSA_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|RSA_new_method
parameter_list|(
name|ENGINE
modifier|*
name|engine
parameter_list|)
function_decl|;
name|int
name|RSA_size
parameter_list|(
specifier|const
name|RSA
modifier|*
parameter_list|)
function_decl|;
comment|/* Deprecated version */
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
name|RSA
modifier|*
name|RSA_generate_key
parameter_list|(
name|int
name|bits
parameter_list|,
name|unsigned
name|long
name|e
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* !defined(OPENSSL_NO_DEPRECATED) */
comment|/* New version */
name|int
name|RSA_generate_key_ex
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|bits
parameter_list|,
name|BIGNUM
modifier|*
name|e
parameter_list|,
name|BN_GENCB
modifier|*
name|cb
parameter_list|)
function_decl|;
name|int
name|RSA_check_key
parameter_list|(
specifier|const
name|RSA
modifier|*
parameter_list|)
function_decl|;
comment|/* next 4 return -1 on error */
name|int
name|RSA_public_encrypt
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|int
name|RSA_private_encrypt
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|int
name|RSA_public_decrypt
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|int
name|RSA_private_decrypt
parameter_list|(
name|int
name|flen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|,
name|int
name|padding
parameter_list|)
function_decl|;
name|void
name|RSA_free
parameter_list|(
name|RSA
modifier|*
name|r
parameter_list|)
function_decl|;
comment|/* "up" the RSA object's reference count */
name|int
name|RSA_up_ref
parameter_list|(
name|RSA
modifier|*
name|r
parameter_list|)
function_decl|;
name|int
name|RSA_flags
parameter_list|(
specifier|const
name|RSA
modifier|*
name|r
parameter_list|)
function_decl|;
name|void
name|RSA_set_default_method
parameter_list|(
specifier|const
name|RSA_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
specifier|const
name|RSA_METHOD
modifier|*
name|RSA_get_default_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|RSA_METHOD
modifier|*
name|RSA_get_method
parameter_list|(
specifier|const
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|RSA_set_method
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|,
specifier|const
name|RSA_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
comment|/* This function needs the memory locking malloc callbacks to be installed */
name|int
name|RSA_memory_lock
parameter_list|(
name|RSA
modifier|*
name|r
parameter_list|)
function_decl|;
comment|/* these are the actual SSLeay RSA functions */
specifier|const
name|RSA_METHOD
modifier|*
name|RSA_PKCS1_SSLeay
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|RSA_METHOD
modifier|*
name|RSA_null_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|DECLARE_ASN1_ENCODE_FUNCTIONS_const
argument_list|(
argument|RSA
argument_list|,
argument|RSAPublicKey
argument_list|)
name|DECLARE_ASN1_ENCODE_FUNCTIONS_const
argument_list|(
argument|RSA
argument_list|,
argument|RSAPrivateKey
argument_list|)
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|int
name|RSA_print_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|RSA
modifier|*
name|r
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|RSA_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|RSA
modifier|*
name|r
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|i2d_RSA_NET
parameter_list|(
specifier|const
name|RSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
parameter_list|,
name|int
name|sgckey
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|d2i_RSA_NET
parameter_list|(
name|RSA
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
parameter_list|,
name|int
name|sgckey
parameter_list|)
function_decl|;
name|int
name|i2d_Netscape_RSA
parameter_list|(
specifier|const
name|RSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|d2i_Netscape_RSA
parameter_list|(
name|RSA
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
parameter_list|)
function_decl|;
comment|/* The following 2 functions sign and verify a X509_SIG ASN1 object  * inside PKCS#1 padded RSA encryption */
name|int
name|RSA_sign
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigret
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|RSA_verify
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigbuf
parameter_list|,
name|unsigned
name|int
name|siglen
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
comment|/* The following 2 function sign and verify a ASN1_OCTET_STRING  * object inside PKCS#1 padded RSA encryption */
name|int
name|RSA_sign_ASN1_OCTET_STRING
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigret
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|RSA_verify_ASN1_OCTET_STRING
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|m
parameter_list|,
name|unsigned
name|int
name|m_length
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigbuf
parameter_list|,
name|unsigned
name|int
name|siglen
parameter_list|,
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|int
name|RSA_blinding_on
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|RSA_blinding_off
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|BN_BLINDING
modifier|*
name|RSA_setup_blinding
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|RSA_padding_add_PKCS1_type_1
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|)
function_decl|;
name|int
name|RSA_padding_check_PKCS1_type_1
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|,
name|int
name|rsa_len
parameter_list|)
function_decl|;
name|int
name|RSA_padding_add_PKCS1_type_2
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|)
function_decl|;
name|int
name|RSA_padding_check_PKCS1_type_2
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|,
name|int
name|rsa_len
parameter_list|)
function_decl|;
name|int
name|PKCS1_MGF1
parameter_list|(
name|unsigned
name|char
modifier|*
name|mask
parameter_list|,
name|long
name|len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|seed
parameter_list|,
name|long
name|seedlen
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|dgst
parameter_list|)
function_decl|;
name|int
name|RSA_padding_add_PKCS1_OAEP
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|p
parameter_list|,
name|int
name|pl
parameter_list|)
function_decl|;
name|int
name|RSA_padding_check_PKCS1_OAEP
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|,
name|int
name|rsa_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|p
parameter_list|,
name|int
name|pl
parameter_list|)
function_decl|;
name|int
name|RSA_padding_add_SSLv23
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|)
function_decl|;
name|int
name|RSA_padding_check_SSLv23
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|,
name|int
name|rsa_len
parameter_list|)
function_decl|;
name|int
name|RSA_padding_add_none
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|)
function_decl|;
name|int
name|RSA_padding_check_none
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|,
name|int
name|rsa_len
parameter_list|)
function_decl|;
name|int
name|RSA_padding_add_X931
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|)
function_decl|;
name|int
name|RSA_padding_check_X931
parameter_list|(
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|tlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|f
parameter_list|,
name|int
name|fl
parameter_list|,
name|int
name|rsa_len
parameter_list|)
function_decl|;
name|int
name|RSA_X931_hash_id
parameter_list|(
name|int
name|nid
parameter_list|)
function_decl|;
name|int
name|RSA_verify_PKCS1_PSS
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|mHash
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|Hash
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|EM
parameter_list|,
name|int
name|sLen
parameter_list|)
function_decl|;
name|int
name|RSA_padding_add_PKCS1_PSS
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|,
name|unsigned
name|char
modifier|*
name|EM
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|mHash
parameter_list|,
specifier|const
name|EVP_MD
modifier|*
name|Hash
parameter_list|,
name|int
name|sLen
parameter_list|)
function_decl|;
name|int
name|RSA_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|RSA_set_ex_data
parameter_list|(
name|RSA
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|RSA_get_ex_data
parameter_list|(
specifier|const
name|RSA
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|RSAPublicKey_dup
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
name|RSA
modifier|*
name|RSAPrivateKey_dup
parameter_list|(
name|RSA
modifier|*
name|rsa
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_RSA_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the RSA functions. */
comment|/* Function codes. */
define|#
directive|define
name|RSA_F_MEMORY_LOCK
value|100
define|#
directive|define
name|RSA_F_RSA_BUILTIN_KEYGEN
value|129
define|#
directive|define
name|RSA_F_RSA_CHECK_KEY
value|123
define|#
directive|define
name|RSA_F_RSA_EAY_PRIVATE_DECRYPT
value|101
define|#
directive|define
name|RSA_F_RSA_EAY_PRIVATE_ENCRYPT
value|102
define|#
directive|define
name|RSA_F_RSA_EAY_PUBLIC_DECRYPT
value|103
define|#
directive|define
name|RSA_F_RSA_EAY_PUBLIC_ENCRYPT
value|104
define|#
directive|define
name|RSA_F_RSA_GENERATE_KEY
value|105
define|#
directive|define
name|RSA_F_RSA_MEMORY_LOCK
value|130
define|#
directive|define
name|RSA_F_RSA_NEW_METHOD
value|106
define|#
directive|define
name|RSA_F_RSA_NULL
value|124
define|#
directive|define
name|RSA_F_RSA_NULL_MOD_EXP
value|131
define|#
directive|define
name|RSA_F_RSA_NULL_PRIVATE_DECRYPT
value|132
define|#
directive|define
name|RSA_F_RSA_NULL_PRIVATE_ENCRYPT
value|133
define|#
directive|define
name|RSA_F_RSA_NULL_PUBLIC_DECRYPT
value|134
define|#
directive|define
name|RSA_F_RSA_NULL_PUBLIC_ENCRYPT
value|135
define|#
directive|define
name|RSA_F_RSA_PADDING_ADD_NONE
value|107
define|#
directive|define
name|RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
value|121
define|#
directive|define
name|RSA_F_RSA_PADDING_ADD_PKCS1_PSS
value|125
define|#
directive|define
name|RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
value|108
define|#
directive|define
name|RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
value|109
define|#
directive|define
name|RSA_F_RSA_PADDING_ADD_SSLV23
value|110
define|#
directive|define
name|RSA_F_RSA_PADDING_ADD_X931
value|127
define|#
directive|define
name|RSA_F_RSA_PADDING_CHECK_NONE
value|111
define|#
directive|define
name|RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
value|122
define|#
directive|define
name|RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
value|112
define|#
directive|define
name|RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
value|113
define|#
directive|define
name|RSA_F_RSA_PADDING_CHECK_SSLV23
value|114
define|#
directive|define
name|RSA_F_RSA_PADDING_CHECK_X931
value|128
define|#
directive|define
name|RSA_F_RSA_PRINT
value|115
define|#
directive|define
name|RSA_F_RSA_PRINT_FP
value|116
define|#
directive|define
name|RSA_F_RSA_SETUP_BLINDING
value|136
define|#
directive|define
name|RSA_F_RSA_SIGN
value|117
define|#
directive|define
name|RSA_F_RSA_SIGN_ASN1_OCTET_STRING
value|118
define|#
directive|define
name|RSA_F_RSA_VERIFY
value|119
define|#
directive|define
name|RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
value|120
define|#
directive|define
name|RSA_F_RSA_VERIFY_PKCS1_PSS
value|126
comment|/* Reason codes. */
define|#
directive|define
name|RSA_R_ALGORITHM_MISMATCH
value|100
define|#
directive|define
name|RSA_R_BAD_E_VALUE
value|101
define|#
directive|define
name|RSA_R_BAD_FIXED_HEADER_DECRYPT
value|102
define|#
directive|define
name|RSA_R_BAD_PAD_BYTE_COUNT
value|103
define|#
directive|define
name|RSA_R_BAD_SIGNATURE
value|104
define|#
directive|define
name|RSA_R_BLOCK_TYPE_IS_NOT_01
value|106
define|#
directive|define
name|RSA_R_BLOCK_TYPE_IS_NOT_02
value|107
define|#
directive|define
name|RSA_R_DATA_GREATER_THAN_MOD_LEN
value|108
define|#
directive|define
name|RSA_R_DATA_TOO_LARGE
value|109
define|#
directive|define
name|RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
value|110
define|#
directive|define
name|RSA_R_DATA_TOO_LARGE_FOR_MODULUS
value|132
define|#
directive|define
name|RSA_R_DATA_TOO_SMALL
value|111
define|#
directive|define
name|RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
value|122
define|#
directive|define
name|RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
value|112
define|#
directive|define
name|RSA_R_DMP1_NOT_CONGRUENT_TO_D
value|124
define|#
directive|define
name|RSA_R_DMQ1_NOT_CONGRUENT_TO_D
value|125
define|#
directive|define
name|RSA_R_D_E_NOT_CONGRUENT_TO_1
value|123
define|#
directive|define
name|RSA_R_FIRST_OCTET_INVALID
value|133
define|#
directive|define
name|RSA_R_INVALID_HEADER
value|137
define|#
directive|define
name|RSA_R_INVALID_MESSAGE_LENGTH
value|131
define|#
directive|define
name|RSA_R_INVALID_PADDING
value|138
define|#
directive|define
name|RSA_R_INVALID_TRAILER
value|139
define|#
directive|define
name|RSA_R_IQMP_NOT_INVERSE_OF_Q
value|126
define|#
directive|define
name|RSA_R_KEY_SIZE_TOO_SMALL
value|120
define|#
directive|define
name|RSA_R_LAST_OCTET_INVALID
value|134
define|#
directive|define
name|RSA_R_MODULUS_TOO_LARGE
value|105
define|#
directive|define
name|RSA_R_NO_PUBLIC_EXPONENT
value|140
define|#
directive|define
name|RSA_R_NULL_BEFORE_BLOCK_MISSING
value|113
define|#
directive|define
name|RSA_R_N_DOES_NOT_EQUAL_P_Q
value|127
define|#
directive|define
name|RSA_R_OAEP_DECODING_ERROR
value|121
define|#
directive|define
name|RSA_R_PADDING_CHECK_FAILED
value|114
define|#
directive|define
name|RSA_R_P_NOT_PRIME
value|128
define|#
directive|define
name|RSA_R_Q_NOT_PRIME
value|129
define|#
directive|define
name|RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
value|130
define|#
directive|define
name|RSA_R_SLEN_CHECK_FAILED
value|136
define|#
directive|define
name|RSA_R_SLEN_RECOVERY_FAILED
value|135
define|#
directive|define
name|RSA_R_SSLV3_ROLLBACK_ATTACK
value|115
define|#
directive|define
name|RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
value|116
define|#
directive|define
name|RSA_R_UNKNOWN_ALGORITHM_TYPE
value|117
define|#
directive|define
name|RSA_R_UNKNOWN_PADDING_TYPE
value|118
define|#
directive|define
name|RSA_R_WRONG_SIGNATURE_LENGTH
value|119
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

