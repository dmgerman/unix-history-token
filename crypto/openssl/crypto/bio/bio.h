begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/bio/bio.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_BIO_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_BIO_H
end_define

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
end_ifndef

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<openssl/crypto.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_SYS_VMS
end_ifndef

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<inttypes.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* These are the 'types' of BIOs */
define|#
directive|define
name|BIO_TYPE_NONE
value|0
define|#
directive|define
name|BIO_TYPE_MEM
value|(1|0x0400)
define|#
directive|define
name|BIO_TYPE_FILE
value|(2|0x0400)
define|#
directive|define
name|BIO_TYPE_FD
value|(4|0x0400|0x0100)
define|#
directive|define
name|BIO_TYPE_SOCKET
value|(5|0x0400|0x0100)
define|#
directive|define
name|BIO_TYPE_NULL
value|(6|0x0400)
define|#
directive|define
name|BIO_TYPE_SSL
value|(7|0x0200)
define|#
directive|define
name|BIO_TYPE_MD
value|(8|0x0200)
comment|/* passive filter */
define|#
directive|define
name|BIO_TYPE_BUFFER
value|(9|0x0200)
comment|/* filter */
define|#
directive|define
name|BIO_TYPE_CIPHER
value|(10|0x0200)
comment|/* filter */
define|#
directive|define
name|BIO_TYPE_BASE64
value|(11|0x0200)
comment|/* filter */
define|#
directive|define
name|BIO_TYPE_CONNECT
value|(12|0x0400|0x0100)
comment|/* socket - connect */
define|#
directive|define
name|BIO_TYPE_ACCEPT
value|(13|0x0400|0x0100)
comment|/* socket for accept */
define|#
directive|define
name|BIO_TYPE_PROXY_CLIENT
value|(14|0x0200)
comment|/* client proxy BIO */
define|#
directive|define
name|BIO_TYPE_PROXY_SERVER
value|(15|0x0200)
comment|/* server proxy BIO */
define|#
directive|define
name|BIO_TYPE_NBIO_TEST
value|(16|0x0200)
comment|/* server proxy BIO */
define|#
directive|define
name|BIO_TYPE_NULL_FILTER
value|(17|0x0200)
define|#
directive|define
name|BIO_TYPE_BER
value|(18|0x0200)
comment|/* BER -> bin filter */
define|#
directive|define
name|BIO_TYPE_BIO
value|(19|0x0400)
comment|/* (half a) BIO pair */
define|#
directive|define
name|BIO_TYPE_LINEBUFFER
value|(20|0x0200)
comment|/* filter */
define|#
directive|define
name|BIO_TYPE_DGRAM
value|(21|0x0400|0x0100)
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
define|#
directive|define
name|BIO_TYPE_DGRAM_SCTP
value|(24|0x0400|0x0100)
endif|#
directive|endif
define|#
directive|define
name|BIO_TYPE_ASN1
value|(22|0x0200)
comment|/* filter */
define|#
directive|define
name|BIO_TYPE_COMP
value|(23|0x0200)
comment|/* filter */
define|#
directive|define
name|BIO_TYPE_DESCRIPTOR
value|0x0100
comment|/* socket, fd, connect or accept */
define|#
directive|define
name|BIO_TYPE_FILTER
value|0x0200
define|#
directive|define
name|BIO_TYPE_SOURCE_SINK
value|0x0400
comment|/* BIO_FILENAME_READ|BIO_CLOSE to open or close on free.  * BIO_set_fp(in,stdin,BIO_NOCLOSE); */
define|#
directive|define
name|BIO_NOCLOSE
value|0x00
define|#
directive|define
name|BIO_CLOSE
value|0x01
comment|/* These are used in the following macros and are passed to  * BIO_ctrl() */
define|#
directive|define
name|BIO_CTRL_RESET
value|1
comment|/* opt - rewind/zero etc */
define|#
directive|define
name|BIO_CTRL_EOF
value|2
comment|/* opt - are we at the eof */
define|#
directive|define
name|BIO_CTRL_INFO
value|3
comment|/* opt - extra tit-bits */
define|#
directive|define
name|BIO_CTRL_SET
value|4
comment|/* man - set the 'IO' type */
define|#
directive|define
name|BIO_CTRL_GET
value|5
comment|/* man - get the 'IO' type */
define|#
directive|define
name|BIO_CTRL_PUSH
value|6
comment|/* opt - internal, used to signify change */
define|#
directive|define
name|BIO_CTRL_POP
value|7
comment|/* opt - internal, used to signify change */
define|#
directive|define
name|BIO_CTRL_GET_CLOSE
value|8
comment|/* man - set the 'close' on free */
define|#
directive|define
name|BIO_CTRL_SET_CLOSE
value|9
comment|/* man - set the 'close' on free */
define|#
directive|define
name|BIO_CTRL_PENDING
value|10
comment|/* opt - is their more data buffered */
define|#
directive|define
name|BIO_CTRL_FLUSH
value|11
comment|/* opt - 'flush' buffered output */
define|#
directive|define
name|BIO_CTRL_DUP
value|12
comment|/* man - extra stuff for 'duped' BIO */
define|#
directive|define
name|BIO_CTRL_WPENDING
value|13
comment|/* opt - number of bytes still to write */
comment|/* callback is int cb(BIO *bio,state,ret); */
define|#
directive|define
name|BIO_CTRL_SET_CALLBACK
value|14
comment|/* opt - set callback function */
define|#
directive|define
name|BIO_CTRL_GET_CALLBACK
value|15
comment|/* opt - set callback function */
define|#
directive|define
name|BIO_CTRL_SET_FILENAME
value|30
comment|/* BIO_s_file special */
comment|/* dgram BIO stuff */
define|#
directive|define
name|BIO_CTRL_DGRAM_CONNECT
value|31
comment|/* BIO dgram special */
define|#
directive|define
name|BIO_CTRL_DGRAM_SET_CONNECTED
value|32
comment|/* allow for an externally 					  * connected socket to be 					  * passed in */
define|#
directive|define
name|BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
value|33
comment|/* setsockopt, essentially */
define|#
directive|define
name|BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
value|34
comment|/* getsockopt, essentially */
define|#
directive|define
name|BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
value|35
comment|/* setsockopt, essentially */
define|#
directive|define
name|BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
value|36
comment|/* getsockopt, essentially */
define|#
directive|define
name|BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
value|37
comment|/* flag whether the last */
define|#
directive|define
name|BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
value|38
comment|/* I/O operation tiemd out */
comment|/* #ifdef IP_MTU_DISCOVER */
define|#
directive|define
name|BIO_CTRL_DGRAM_MTU_DISCOVER
value|39
comment|/* set DF bit on egress packets */
comment|/* #endif */
define|#
directive|define
name|BIO_CTRL_DGRAM_QUERY_MTU
value|40
comment|/* as kernel for current MTU */
define|#
directive|define
name|BIO_CTRL_DGRAM_GET_FALLBACK_MTU
value|47
define|#
directive|define
name|BIO_CTRL_DGRAM_GET_MTU
value|41
comment|/* get cached value for MTU */
define|#
directive|define
name|BIO_CTRL_DGRAM_SET_MTU
value|42
comment|/* set cached value for 					      * MTU. want to use this 					      * if asking the kernel 					      * fails */
define|#
directive|define
name|BIO_CTRL_DGRAM_MTU_EXCEEDED
value|43
comment|/* check whether the MTU 					      * was exceed in the 					      * previous write 					      * operation */
define|#
directive|define
name|BIO_CTRL_DGRAM_GET_PEER
value|46
define|#
directive|define
name|BIO_CTRL_DGRAM_SET_PEER
value|44
comment|/* Destination for the data */
define|#
directive|define
name|BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
value|45
comment|/* Next DTLS handshake timeout to                                               * adjust socket timeouts */
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
comment|/* SCTP stuff */
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
value|50
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
value|51
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
value|52
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
value|53
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
value|60
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
value|61
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
value|62
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
value|63
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_GET_PRINFO
value|64
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_SET_PRINFO
value|65
define|#
directive|define
name|BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
value|70
endif|#
directive|endif
comment|/* modifiers */
define|#
directive|define
name|BIO_FP_READ
value|0x02
define|#
directive|define
name|BIO_FP_WRITE
value|0x04
define|#
directive|define
name|BIO_FP_APPEND
value|0x08
define|#
directive|define
name|BIO_FP_TEXT
value|0x10
define|#
directive|define
name|BIO_FLAGS_READ
value|0x01
define|#
directive|define
name|BIO_FLAGS_WRITE
value|0x02
define|#
directive|define
name|BIO_FLAGS_IO_SPECIAL
value|0x04
define|#
directive|define
name|BIO_FLAGS_RWS
value|(BIO_FLAGS_READ|BIO_FLAGS_WRITE|BIO_FLAGS_IO_SPECIAL)
define|#
directive|define
name|BIO_FLAGS_SHOULD_RETRY
value|0x08
ifndef|#
directive|ifndef
name|BIO_FLAGS_UPLINK
comment|/* "UPLINK" flag denotes file descriptors provided by application.    It defaults to 0, as most platforms don't require UPLINK interface. */
define|#
directive|define
name|BIO_FLAGS_UPLINK
value|0
endif|#
directive|endif
comment|/* Used in BIO_gethostbyname() */
define|#
directive|define
name|BIO_GHBN_CTRL_HITS
value|1
define|#
directive|define
name|BIO_GHBN_CTRL_MISSES
value|2
define|#
directive|define
name|BIO_GHBN_CTRL_CACHE_SIZE
value|3
define|#
directive|define
name|BIO_GHBN_CTRL_GET_ENTRY
value|4
define|#
directive|define
name|BIO_GHBN_CTRL_FLUSH
value|5
comment|/* Mostly used in the SSL BIO */
comment|/* Not used anymore  * #define BIO_FLAGS_PROTOCOL_DELAYED_READ 0x10  * #define BIO_FLAGS_PROTOCOL_DELAYED_WRITE 0x20  * #define BIO_FLAGS_PROTOCOL_STARTUP	0x40  */
define|#
directive|define
name|BIO_FLAGS_BASE64_NO_NL
value|0x100
comment|/* This is used with memory BIOs: it means we shouldn't free up or change the  * data in any way.  */
define|#
directive|define
name|BIO_FLAGS_MEM_RDONLY
value|0x200
typedef|typedef
name|struct
name|bio_st
name|BIO
typedef|;
name|void
name|BIO_set_flags
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
name|BIO_test_flags
parameter_list|(
specifier|const
name|BIO
modifier|*
name|b
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|void
name|BIO_clear_flags
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
define|#
directive|define
name|BIO_get_flags
parameter_list|(
name|b
parameter_list|)
value|BIO_test_flags(b, ~(0x0))
define|#
directive|define
name|BIO_set_retry_special
parameter_list|(
name|b
parameter_list|)
define|\
value|BIO_set_flags(b, (BIO_FLAGS_IO_SPECIAL|BIO_FLAGS_SHOULD_RETRY))
define|#
directive|define
name|BIO_set_retry_read
parameter_list|(
name|b
parameter_list|)
define|\
value|BIO_set_flags(b, (BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY))
define|#
directive|define
name|BIO_set_retry_write
parameter_list|(
name|b
parameter_list|)
define|\
value|BIO_set_flags(b, (BIO_FLAGS_WRITE|BIO_FLAGS_SHOULD_RETRY))
comment|/* These are normally used internally in BIOs */
define|#
directive|define
name|BIO_clear_retry_flags
parameter_list|(
name|b
parameter_list|)
define|\
value|BIO_clear_flags(b, (BIO_FLAGS_RWS|BIO_FLAGS_SHOULD_RETRY))
define|#
directive|define
name|BIO_get_retry_flags
parameter_list|(
name|b
parameter_list|)
define|\
value|BIO_test_flags(b, (BIO_FLAGS_RWS|BIO_FLAGS_SHOULD_RETRY))
comment|/* These should be used by the application to tell why we should retry */
define|#
directive|define
name|BIO_should_read
parameter_list|(
name|a
parameter_list|)
value|BIO_test_flags(a, BIO_FLAGS_READ)
define|#
directive|define
name|BIO_should_write
parameter_list|(
name|a
parameter_list|)
value|BIO_test_flags(a, BIO_FLAGS_WRITE)
define|#
directive|define
name|BIO_should_io_special
parameter_list|(
name|a
parameter_list|)
value|BIO_test_flags(a, BIO_FLAGS_IO_SPECIAL)
define|#
directive|define
name|BIO_retry_type
parameter_list|(
name|a
parameter_list|)
value|BIO_test_flags(a, BIO_FLAGS_RWS)
define|#
directive|define
name|BIO_should_retry
parameter_list|(
name|a
parameter_list|)
value|BIO_test_flags(a, BIO_FLAGS_SHOULD_RETRY)
comment|/* The next three are used in conjunction with the  * BIO_should_io_special() condition.  After this returns true,  * BIO *BIO_get_retry_BIO(BIO *bio, int *reason); will walk the BIO   * stack and return the 'reason' for the special and the offending BIO.  * Given a BIO, BIO_get_retry_reason(bio) will return the code. */
comment|/* Returned from the SSL bio when the certificate retrieval code had an error */
define|#
directive|define
name|BIO_RR_SSL_X509_LOOKUP
value|0x01
comment|/* Returned from the connect BIO when a connect would have blocked */
define|#
directive|define
name|BIO_RR_CONNECT
value|0x02
comment|/* Returned from the accept BIO when an accept would have blocked */
define|#
directive|define
name|BIO_RR_ACCEPT
value|0x03
comment|/* These are passed by the BIO callback */
define|#
directive|define
name|BIO_CB_FREE
value|0x01
define|#
directive|define
name|BIO_CB_READ
value|0x02
define|#
directive|define
name|BIO_CB_WRITE
value|0x03
define|#
directive|define
name|BIO_CB_PUTS
value|0x04
define|#
directive|define
name|BIO_CB_GETS
value|0x05
define|#
directive|define
name|BIO_CB_CTRL
value|0x06
comment|/* The callback is called before and after the underling operation,  * The BIO_CB_RETURN flag indicates if it is after the call */
define|#
directive|define
name|BIO_CB_RETURN
value|0x80
define|#
directive|define
name|BIO_CB_return
parameter_list|(
name|a
parameter_list|)
value|((a)|BIO_CB_RETURN))
define|#
directive|define
name|BIO_cb_pre
parameter_list|(
name|a
parameter_list|)
value|(!((a)&BIO_CB_RETURN))
define|#
directive|define
name|BIO_cb_post
parameter_list|(
name|a
parameter_list|)
value|((a)&BIO_CB_RETURN)
name|long
argument_list|(
operator|*
name|BIO_get_callback
argument_list|(
specifier|const
name|BIO
operator|*
name|b
argument_list|)
argument_list|)
argument_list|(
expr|struct
name|bio_st
operator|*
argument_list|,
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|,
name|long
argument_list|,
name|long
argument_list|)
expr_stmt|;
name|void
name|BIO_set_callback
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|long
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|struct
name|bio_st
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|)
parameter_list|)
function_decl|;
name|char
modifier|*
name|BIO_get_callback_arg
parameter_list|(
specifier|const
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|void
name|BIO_set_callback_arg
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|char
modifier|*
name|arg
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|BIO_method_name
parameter_list|(
specifier|const
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BIO_method_type
parameter_list|(
specifier|const
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
typedef|typedef
name|void
name|bio_info_cb
parameter_list|(
name|struct
name|bio_st
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|bio_method_st
block|{
name|int
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
function_decl|(
modifier|*
name|bwrite
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|bread
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|bputs
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|bgets
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|ctrl
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|,
name|int
parameter_list|,
name|long
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|create
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|callback_ctrl
function_decl|)
parameter_list|(
name|BIO
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bio_info_cb
modifier|*
parameter_list|)
function_decl|;
block|}
name|BIO_METHOD
typedef|;
struct|struct
name|bio_st
block|{
name|BIO_METHOD
modifier|*
name|method
decl_stmt|;
comment|/* bio, mode, argp, argi, argl, ret */
name|long
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|struct
name|bio_st
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|char
modifier|*
name|cb_arg
decl_stmt|;
comment|/* first argument for the callback */
name|int
name|init
decl_stmt|;
name|int
name|shutdown
decl_stmt|;
name|int
name|flags
decl_stmt|;
comment|/* extra storage */
name|int
name|retry_reason
decl_stmt|;
name|int
name|num
decl_stmt|;
name|void
modifier|*
name|ptr
decl_stmt|;
name|struct
name|bio_st
modifier|*
name|next_bio
decl_stmt|;
comment|/* used by filter BIOs */
name|struct
name|bio_st
modifier|*
name|prev_bio
decl_stmt|;
comment|/* used by filter BIOs */
name|int
name|references
decl_stmt|;
name|unsigned
name|long
name|num_read
decl_stmt|;
name|unsigned
name|long
name|num_write
decl_stmt|;
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
block|}
struct|;
name|DECLARE_STACK_OF
argument_list|(
argument|BIO
argument_list|)
typedef|typedef
struct|struct
name|bio_f_buffer_ctx_struct
block|{
comment|/* Buffers are setup like this: 	 * 	 *<---------------------- size -----------------------> 	 * +---------------------------------------------------+ 	 * | consumed | remaining          | free space        | 	 * +---------------------------------------------------+ 	 *<-- off --><------- len -------> 	 */
comment|/* BIO *bio; */
comment|/* this is now in the BIO struct */
name|int
name|ibuf_size
decl_stmt|;
comment|/* how big is the input buffer */
name|int
name|obuf_size
decl_stmt|;
comment|/* how big is the output buffer */
name|char
modifier|*
name|ibuf
decl_stmt|;
comment|/* the char array */
name|int
name|ibuf_len
decl_stmt|;
comment|/* how many bytes are in it */
name|int
name|ibuf_off
decl_stmt|;
comment|/* write/read offset */
name|char
modifier|*
name|obuf
decl_stmt|;
comment|/* the char array */
name|int
name|obuf_len
decl_stmt|;
comment|/* how many bytes are in it */
name|int
name|obuf_off
decl_stmt|;
comment|/* write/read offset */
block|}
name|BIO_F_BUFFER_CTX
typedef|;
comment|/* Prefix and suffix callback in ASN1 BIO */
typedef|typedef
name|int
name|asn1_ps_func
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pbuf
parameter_list|,
name|int
modifier|*
name|plen
parameter_list|,
name|void
modifier|*
name|parg
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
comment|/* SCTP parameter structs */
struct|struct
name|bio_dgram_sctp_sndinfo
block|{
name|uint16_t
name|snd_sid
decl_stmt|;
name|uint16_t
name|snd_flags
decl_stmt|;
name|uint32_t
name|snd_ppid
decl_stmt|;
name|uint32_t
name|snd_context
decl_stmt|;
block|}
struct|;
struct|struct
name|bio_dgram_sctp_rcvinfo
block|{
name|uint16_t
name|rcv_sid
decl_stmt|;
name|uint16_t
name|rcv_ssn
decl_stmt|;
name|uint16_t
name|rcv_flags
decl_stmt|;
name|uint32_t
name|rcv_ppid
decl_stmt|;
name|uint32_t
name|rcv_tsn
decl_stmt|;
name|uint32_t
name|rcv_cumtsn
decl_stmt|;
name|uint32_t
name|rcv_context
decl_stmt|;
block|}
struct|;
struct|struct
name|bio_dgram_sctp_prinfo
block|{
name|uint16_t
name|pr_policy
decl_stmt|;
name|uint32_t
name|pr_value
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
comment|/* connect BIO stuff */
define|#
directive|define
name|BIO_CONN_S_BEFORE
value|1
define|#
directive|define
name|BIO_CONN_S_GET_IP
value|2
define|#
directive|define
name|BIO_CONN_S_GET_PORT
value|3
define|#
directive|define
name|BIO_CONN_S_CREATE_SOCKET
value|4
define|#
directive|define
name|BIO_CONN_S_CONNECT
value|5
define|#
directive|define
name|BIO_CONN_S_OK
value|6
define|#
directive|define
name|BIO_CONN_S_BLOCKED_CONNECT
value|7
define|#
directive|define
name|BIO_CONN_S_NBIO
value|8
comment|/*#define BIO_CONN_get_param_hostname	BIO_ctrl */
define|#
directive|define
name|BIO_C_SET_CONNECT
value|100
define|#
directive|define
name|BIO_C_DO_STATE_MACHINE
value|101
define|#
directive|define
name|BIO_C_SET_NBIO
value|102
define|#
directive|define
name|BIO_C_SET_PROXY_PARAM
value|103
define|#
directive|define
name|BIO_C_SET_FD
value|104
define|#
directive|define
name|BIO_C_GET_FD
value|105
define|#
directive|define
name|BIO_C_SET_FILE_PTR
value|106
define|#
directive|define
name|BIO_C_GET_FILE_PTR
value|107
define|#
directive|define
name|BIO_C_SET_FILENAME
value|108
define|#
directive|define
name|BIO_C_SET_SSL
value|109
define|#
directive|define
name|BIO_C_GET_SSL
value|110
define|#
directive|define
name|BIO_C_SET_MD
value|111
define|#
directive|define
name|BIO_C_GET_MD
value|112
define|#
directive|define
name|BIO_C_GET_CIPHER_STATUS
value|113
define|#
directive|define
name|BIO_C_SET_BUF_MEM
value|114
define|#
directive|define
name|BIO_C_GET_BUF_MEM_PTR
value|115
define|#
directive|define
name|BIO_C_GET_BUFF_NUM_LINES
value|116
define|#
directive|define
name|BIO_C_SET_BUFF_SIZE
value|117
define|#
directive|define
name|BIO_C_SET_ACCEPT
value|118
define|#
directive|define
name|BIO_C_SSL_MODE
value|119
define|#
directive|define
name|BIO_C_GET_MD_CTX
value|120
define|#
directive|define
name|BIO_C_GET_PROXY_PARAM
value|121
define|#
directive|define
name|BIO_C_SET_BUFF_READ_DATA
value|122
comment|/* data to read first */
define|#
directive|define
name|BIO_C_GET_CONNECT
value|123
define|#
directive|define
name|BIO_C_GET_ACCEPT
value|124
define|#
directive|define
name|BIO_C_SET_SSL_RENEGOTIATE_BYTES
value|125
define|#
directive|define
name|BIO_C_GET_SSL_NUM_RENEGOTIATES
value|126
define|#
directive|define
name|BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
value|127
define|#
directive|define
name|BIO_C_FILE_SEEK
value|128
define|#
directive|define
name|BIO_C_GET_CIPHER_CTX
value|129
define|#
directive|define
name|BIO_C_SET_BUF_MEM_EOF_RETURN
value|130
comment|/*return end of input value*/
define|#
directive|define
name|BIO_C_SET_BIND_MODE
value|131
define|#
directive|define
name|BIO_C_GET_BIND_MODE
value|132
define|#
directive|define
name|BIO_C_FILE_TELL
value|133
define|#
directive|define
name|BIO_C_GET_SOCKS
value|134
define|#
directive|define
name|BIO_C_SET_SOCKS
value|135
define|#
directive|define
name|BIO_C_SET_WRITE_BUF_SIZE
value|136
comment|/* for BIO_s_bio */
define|#
directive|define
name|BIO_C_GET_WRITE_BUF_SIZE
value|137
define|#
directive|define
name|BIO_C_MAKE_BIO_PAIR
value|138
define|#
directive|define
name|BIO_C_DESTROY_BIO_PAIR
value|139
define|#
directive|define
name|BIO_C_GET_WRITE_GUARANTEE
value|140
define|#
directive|define
name|BIO_C_GET_READ_REQUEST
value|141
define|#
directive|define
name|BIO_C_SHUTDOWN_WR
value|142
define|#
directive|define
name|BIO_C_NREAD0
value|143
define|#
directive|define
name|BIO_C_NREAD
value|144
define|#
directive|define
name|BIO_C_NWRITE0
value|145
define|#
directive|define
name|BIO_C_NWRITE
value|146
define|#
directive|define
name|BIO_C_RESET_READ_REQUEST
value|147
define|#
directive|define
name|BIO_C_SET_MD_CTX
value|148
define|#
directive|define
name|BIO_C_SET_PREFIX
value|149
define|#
directive|define
name|BIO_C_GET_PREFIX
value|150
define|#
directive|define
name|BIO_C_SET_SUFFIX
value|151
define|#
directive|define
name|BIO_C_GET_SUFFIX
value|152
define|#
directive|define
name|BIO_C_SET_EX_ARG
value|153
define|#
directive|define
name|BIO_C_GET_EX_ARG
value|154
define|#
directive|define
name|BIO_set_app_data
parameter_list|(
name|s
parameter_list|,
name|arg
parameter_list|)
value|BIO_set_ex_data(s,0,arg)
define|#
directive|define
name|BIO_get_app_data
parameter_list|(
name|s
parameter_list|)
value|BIO_get_ex_data(s,0)
comment|/* BIO_s_connect() and BIO_s_socks4a_connect() */
define|#
directive|define
name|BIO_set_conn_hostname
parameter_list|(
name|b
parameter_list|,
name|name
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_CONNECT,0,(char *)name)
define|#
directive|define
name|BIO_set_conn_port
parameter_list|(
name|b
parameter_list|,
name|port
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_CONNECT,1,(char *)port)
define|#
directive|define
name|BIO_set_conn_ip
parameter_list|(
name|b
parameter_list|,
name|ip
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_CONNECT,2,(char *)ip)
define|#
directive|define
name|BIO_set_conn_int_port
parameter_list|(
name|b
parameter_list|,
name|port
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_CONNECT,3,(char *)port)
define|#
directive|define
name|BIO_get_conn_hostname
parameter_list|(
name|b
parameter_list|)
value|BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,0)
define|#
directive|define
name|BIO_get_conn_port
parameter_list|(
name|b
parameter_list|)
value|BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,1)
define|#
directive|define
name|BIO_get_conn_ip
parameter_list|(
name|b
parameter_list|)
value|BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,2)
define|#
directive|define
name|BIO_get_conn_int_port
parameter_list|(
name|b
parameter_list|)
value|BIO_int_ctrl(b,BIO_C_GET_CONNECT,3,0)
define|#
directive|define
name|BIO_set_nbio
parameter_list|(
name|b
parameter_list|,
name|n
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_NBIO,(n),NULL)
comment|/* BIO_s_accept_socket() */
define|#
directive|define
name|BIO_set_accept_port
parameter_list|(
name|b
parameter_list|,
name|name
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_ACCEPT,0,(char *)name)
define|#
directive|define
name|BIO_get_accept_port
parameter_list|(
name|b
parameter_list|)
value|BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,0)
comment|/* #define BIO_set_nbio(b,n)	BIO_ctrl(b,BIO_C_SET_NBIO,(n),NULL) */
define|#
directive|define
name|BIO_set_nbio_accept
parameter_list|(
name|b
parameter_list|,
name|n
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_ACCEPT,1,(n)?(void *)"a":NULL)
define|#
directive|define
name|BIO_set_accept_bios
parameter_list|(
name|b
parameter_list|,
name|bio
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_ACCEPT,2,(char *)bio)
define|#
directive|define
name|BIO_BIND_NORMAL
value|0
define|#
directive|define
name|BIO_BIND_REUSEADDR_IF_UNUSED
value|1
define|#
directive|define
name|BIO_BIND_REUSEADDR
value|2
define|#
directive|define
name|BIO_set_bind_mode
parameter_list|(
name|b
parameter_list|,
name|mode
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_BIND_MODE,mode,NULL)
define|#
directive|define
name|BIO_get_bind_mode
parameter_list|(
name|b
parameter_list|,
name|mode
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_BIND_MODE,0,NULL)
define|#
directive|define
name|BIO_do_connect
parameter_list|(
name|b
parameter_list|)
value|BIO_do_handshake(b)
define|#
directive|define
name|BIO_do_accept
parameter_list|(
name|b
parameter_list|)
value|BIO_do_handshake(b)
define|#
directive|define
name|BIO_do_handshake
parameter_list|(
name|b
parameter_list|)
value|BIO_ctrl(b,BIO_C_DO_STATE_MACHINE,0,NULL)
comment|/* BIO_s_proxy_client() */
define|#
directive|define
name|BIO_set_url
parameter_list|(
name|b
parameter_list|,
name|url
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_PROXY_PARAM,0,(char *)(url))
define|#
directive|define
name|BIO_set_proxies
parameter_list|(
name|b
parameter_list|,
name|p
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_PROXY_PARAM,1,(char *)(p))
comment|/* BIO_set_nbio(b,n) */
define|#
directive|define
name|BIO_set_filter_bio
parameter_list|(
name|b
parameter_list|,
name|s
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_PROXY_PARAM,2,(char *)(s))
comment|/* BIO *BIO_get_filter_bio(BIO *bio); */
define|#
directive|define
name|BIO_set_proxy_cb
parameter_list|(
name|b
parameter_list|,
name|cb
parameter_list|)
value|BIO_callback_ctrl(b,BIO_C_SET_PROXY_PARAM,3,(void *(*cb)()))
define|#
directive|define
name|BIO_set_proxy_header
parameter_list|(
name|b
parameter_list|,
name|sk
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_PROXY_PARAM,4,(char *)sk)
define|#
directive|define
name|BIO_set_no_connect_return
parameter_list|(
name|b
parameter_list|,
name|bool
parameter_list|)
value|BIO_int_ctrl(b,BIO_C_SET_PROXY_PARAM,5,bool)
define|#
directive|define
name|BIO_get_proxy_header
parameter_list|(
name|b
parameter_list|,
name|skp
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_PROXY_PARAM,0,(char *)skp)
define|#
directive|define
name|BIO_get_proxies
parameter_list|(
name|b
parameter_list|,
name|pxy_p
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_PROXY_PARAM,1,(char *)(pxy_p))
define|#
directive|define
name|BIO_get_url
parameter_list|(
name|b
parameter_list|,
name|url
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_PROXY_PARAM,2,(char *)(url))
define|#
directive|define
name|BIO_get_no_connect_return
parameter_list|(
name|b
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_PROXY_PARAM,5,NULL)
define|#
directive|define
name|BIO_set_fd
parameter_list|(
name|b
parameter_list|,
name|fd
parameter_list|,
name|c
parameter_list|)
value|BIO_int_ctrl(b,BIO_C_SET_FD,c,fd)
define|#
directive|define
name|BIO_get_fd
parameter_list|(
name|b
parameter_list|,
name|c
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_FD,0,(char *)c)
define|#
directive|define
name|BIO_set_fp
parameter_list|(
name|b
parameter_list|,
name|fp
parameter_list|,
name|c
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_FILE_PTR,c,(char *)fp)
define|#
directive|define
name|BIO_get_fp
parameter_list|(
name|b
parameter_list|,
name|fpp
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_FILE_PTR,0,(char *)fpp)
define|#
directive|define
name|BIO_seek
parameter_list|(
name|b
parameter_list|,
name|ofs
parameter_list|)
value|(int)BIO_ctrl(b,BIO_C_FILE_SEEK,ofs,NULL)
define|#
directive|define
name|BIO_tell
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_C_FILE_TELL,0,NULL)
comment|/* name is cast to lose const, but might be better to route through a function    so we can do it safely */
ifdef|#
directive|ifdef
name|CONST_STRICT
comment|/* If you are wondering why this isn't defined, its because CONST_STRICT is  * purely a compile-time kludge to allow const to be checked.  */
name|int
name|BIO_read_filename
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
else|#
directive|else
define|#
directive|define
name|BIO_read_filename
parameter_list|(
name|b
parameter_list|,
name|name
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_FILENAME, \ 		BIO_CLOSE|BIO_FP_READ,(char *)name)
endif|#
directive|endif
define|#
directive|define
name|BIO_write_filename
parameter_list|(
name|b
parameter_list|,
name|name
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_FILENAME, \ 		BIO_CLOSE|BIO_FP_WRITE,name)
define|#
directive|define
name|BIO_append_filename
parameter_list|(
name|b
parameter_list|,
name|name
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_FILENAME, \ 		BIO_CLOSE|BIO_FP_APPEND,name)
define|#
directive|define
name|BIO_rw_filename
parameter_list|(
name|b
parameter_list|,
name|name
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_FILENAME, \ 		BIO_CLOSE|BIO_FP_READ|BIO_FP_WRITE,name)
comment|/* WARNING WARNING, this ups the reference count on the read bio of the  * SSL structure.  This is because the ssl read BIO is now pointed to by  * the next_bio field in the bio.  So when you free the BIO, make sure  * you are doing a BIO_free_all() to catch the underlying BIO. */
define|#
directive|define
name|BIO_set_ssl
parameter_list|(
name|b
parameter_list|,
name|ssl
parameter_list|,
name|c
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_SSL,c,(char *)ssl)
define|#
directive|define
name|BIO_get_ssl
parameter_list|(
name|b
parameter_list|,
name|sslp
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_SSL,0,(char *)sslp)
define|#
directive|define
name|BIO_set_ssl_mode
parameter_list|(
name|b
parameter_list|,
name|client
parameter_list|)
value|BIO_ctrl(b,BIO_C_SSL_MODE,client,NULL)
define|#
directive|define
name|BIO_set_ssl_renegotiate_bytes
parameter_list|(
name|b
parameter_list|,
name|num
parameter_list|)
define|\
value|BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_BYTES,num,NULL);
define|#
directive|define
name|BIO_get_num_renegotiates
parameter_list|(
name|b
parameter_list|)
define|\
value|BIO_ctrl(b,BIO_C_GET_SSL_NUM_RENEGOTIATES,0,NULL);
define|#
directive|define
name|BIO_set_ssl_renegotiate_timeout
parameter_list|(
name|b
parameter_list|,
name|seconds
parameter_list|)
define|\
value|BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT,seconds,NULL);
comment|/* defined in evp.h */
comment|/* #define BIO_set_md(b,md)	BIO_ctrl(b,BIO_C_SET_MD,1,(char *)md) */
define|#
directive|define
name|BIO_get_mem_data
parameter_list|(
name|b
parameter_list|,
name|pp
parameter_list|)
value|BIO_ctrl(b,BIO_CTRL_INFO,0,(char *)pp)
define|#
directive|define
name|BIO_set_mem_buf
parameter_list|(
name|b
parameter_list|,
name|bm
parameter_list|,
name|c
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_BUF_MEM,c,(char *)bm)
define|#
directive|define
name|BIO_get_mem_ptr
parameter_list|(
name|b
parameter_list|,
name|pp
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_BUF_MEM_PTR,0,(char *)pp)
define|#
directive|define
name|BIO_set_mem_eof_return
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
define|\
value|BIO_ctrl(b,BIO_C_SET_BUF_MEM_EOF_RETURN,v,NULL)
comment|/* For the BIO_f_buffer() type */
define|#
directive|define
name|BIO_get_buffer_num_lines
parameter_list|(
name|b
parameter_list|)
value|BIO_ctrl(b,BIO_C_GET_BUFF_NUM_LINES,0,NULL)
define|#
directive|define
name|BIO_set_buffer_size
parameter_list|(
name|b
parameter_list|,
name|size
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_BUFF_SIZE,size,NULL)
define|#
directive|define
name|BIO_set_read_buffer_size
parameter_list|(
name|b
parameter_list|,
name|size
parameter_list|)
value|BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,0)
define|#
directive|define
name|BIO_set_write_buffer_size
parameter_list|(
name|b
parameter_list|,
name|size
parameter_list|)
value|BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,1)
define|#
directive|define
name|BIO_set_buffer_read_data
parameter_list|(
name|b
parameter_list|,
name|buf
parameter_list|,
name|num
parameter_list|)
value|BIO_ctrl(b,BIO_C_SET_BUFF_READ_DATA,num,buf)
comment|/* Don't use the next one unless you know what you are doing :-) */
define|#
directive|define
name|BIO_dup_state
parameter_list|(
name|b
parameter_list|,
name|ret
parameter_list|)
value|BIO_ctrl(b,BIO_CTRL_DUP,0,(char *)(ret))
define|#
directive|define
name|BIO_reset
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_RESET,0,NULL)
define|#
directive|define
name|BIO_eof
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_EOF,0,NULL)
define|#
directive|define
name|BIO_set_close
parameter_list|(
name|b
parameter_list|,
name|c
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_SET_CLOSE,(c),NULL)
define|#
directive|define
name|BIO_get_close
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_GET_CLOSE,0,NULL)
define|#
directive|define
name|BIO_pending
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_PENDING,0,NULL)
define|#
directive|define
name|BIO_wpending
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_WPENDING,0,NULL)
comment|/* ...pending macros have inappropriate return type */
name|size_t
name|BIO_ctrl_pending
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|size_t
name|BIO_ctrl_wpending
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
define|#
directive|define
name|BIO_flush
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_FLUSH,0,NULL)
define|#
directive|define
name|BIO_get_info_callback
parameter_list|(
name|b
parameter_list|,
name|cbp
parameter_list|)
value|(int)BIO_ctrl(b,BIO_CTRL_GET_CALLBACK,0, \ 						   cbp)
define|#
directive|define
name|BIO_set_info_callback
parameter_list|(
name|b
parameter_list|,
name|cb
parameter_list|)
value|(int)BIO_callback_ctrl(b,BIO_CTRL_SET_CALLBACK,cb)
comment|/* For the BIO_f_buffer() type */
define|#
directive|define
name|BIO_buffer_get_num_lines
parameter_list|(
name|b
parameter_list|)
value|BIO_ctrl(b,BIO_CTRL_GET,0,NULL)
comment|/* For BIO_s_bio() */
define|#
directive|define
name|BIO_set_write_buf_size
parameter_list|(
name|b
parameter_list|,
name|size
parameter_list|)
value|(int)BIO_ctrl(b,BIO_C_SET_WRITE_BUF_SIZE,size,NULL)
define|#
directive|define
name|BIO_get_write_buf_size
parameter_list|(
name|b
parameter_list|,
name|size
parameter_list|)
value|(size_t)BIO_ctrl(b,BIO_C_GET_WRITE_BUF_SIZE,size,NULL)
define|#
directive|define
name|BIO_make_bio_pair
parameter_list|(
name|b1
parameter_list|,
name|b2
parameter_list|)
value|(int)BIO_ctrl(b1,BIO_C_MAKE_BIO_PAIR,0,b2)
define|#
directive|define
name|BIO_destroy_bio_pair
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_C_DESTROY_BIO_PAIR,0,NULL)
define|#
directive|define
name|BIO_shutdown_wr
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b, BIO_C_SHUTDOWN_WR, 0, NULL)
comment|/* macros with inappropriate type -- but ...pending macros use int too: */
define|#
directive|define
name|BIO_get_write_guarantee
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_C_GET_WRITE_GUARANTEE,0,NULL)
define|#
directive|define
name|BIO_get_read_request
parameter_list|(
name|b
parameter_list|)
value|(int)BIO_ctrl(b,BIO_C_GET_READ_REQUEST,0,NULL)
name|size_t
name|BIO_ctrl_get_write_guarantee
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|size_t
name|BIO_ctrl_get_read_request
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BIO_ctrl_reset_read_request
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/* ctrl macros for dgram */
define|#
directive|define
name|BIO_ctrl_dgram_connect
parameter_list|(
name|b
parameter_list|,
name|peer
parameter_list|)
define|\
value|(int)BIO_ctrl(b,BIO_CTRL_DGRAM_CONNECT,0, (char *)peer)
define|#
directive|define
name|BIO_ctrl_set_connected
parameter_list|(
name|b
parameter_list|,
name|state
parameter_list|,
name|peer
parameter_list|)
define|\
value|(int)BIO_ctrl(b, BIO_CTRL_DGRAM_SET_CONNECTED, state, (char *)peer)
define|#
directive|define
name|BIO_dgram_recv_timedout
parameter_list|(
name|b
parameter_list|)
define|\
value|(int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP, 0, NULL)
define|#
directive|define
name|BIO_dgram_send_timedout
parameter_list|(
name|b
parameter_list|)
define|\
value|(int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP, 0, NULL)
define|#
directive|define
name|BIO_dgram_get_peer
parameter_list|(
name|b
parameter_list|,
name|peer
parameter_list|)
define|\
value|(int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_PEER, 0, (char *)peer)
define|#
directive|define
name|BIO_dgram_set_peer
parameter_list|(
name|b
parameter_list|,
name|peer
parameter_list|)
define|\
value|(int)BIO_ctrl(b, BIO_CTRL_DGRAM_SET_PEER, 0, (char *)peer)
comment|/* These two aren't currently implemented */
comment|/* int BIO_get_ex_num(BIO *bio); */
comment|/* void BIO_set_ex_free_func(BIO *bio,int idx,void (*cb)()); */
name|int
name|BIO_set_ex_data
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|BIO_get_ex_data
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|BIO_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|unsigned
name|long
name|BIO_number_read
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|)
function_decl|;
name|unsigned
name|long
name|BIO_number_written
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|)
function_decl|;
comment|/* For BIO_f_asn1() */
name|int
name|BIO_asn1_set_prefix
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|asn1_ps_func
modifier|*
name|prefix
parameter_list|,
name|asn1_ps_func
modifier|*
name|prefix_free
parameter_list|)
function_decl|;
name|int
name|BIO_asn1_get_prefix
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|asn1_ps_func
modifier|*
modifier|*
name|pprefix
parameter_list|,
name|asn1_ps_func
modifier|*
modifier|*
name|pprefix_free
parameter_list|)
function_decl|;
name|int
name|BIO_asn1_set_suffix
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|asn1_ps_func
modifier|*
name|suffix
parameter_list|,
name|asn1_ps_func
modifier|*
name|suffix_free
parameter_list|)
function_decl|;
name|int
name|BIO_asn1_get_suffix
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|asn1_ps_func
modifier|*
modifier|*
name|psuffix
parameter_list|,
name|asn1_ps_func
modifier|*
modifier|*
name|psuffix_free
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|BIO_METHOD
modifier|*
name|BIO_s_file
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_file
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_fp
parameter_list|(
name|FILE
modifier|*
name|stream
parameter_list|,
name|int
name|close_flag
parameter_list|)
function_decl|;
define|#
directive|define
name|BIO_s_file_internal
value|BIO_s_file
endif|#
directive|endif
name|BIO
modifier|*
name|BIO_new
parameter_list|(
name|BIO_METHOD
modifier|*
name|type
parameter_list|)
function_decl|;
name|int
name|BIO_set
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|BIO_METHOD
modifier|*
name|type
parameter_list|)
function_decl|;
name|int
name|BIO_free
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|)
function_decl|;
name|void
name|BIO_vfree
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|BIO_read
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|BIO_gets
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|BIO_write
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|BIO_puts
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
name|int
name|BIO_indent
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|int
name|indent
parameter_list|,
name|int
name|max
parameter_list|)
function_decl|;
name|long
name|BIO_ctrl
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|,
name|void
modifier|*
name|parg
parameter_list|)
function_decl|;
name|long
name|BIO_callback_ctrl
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|int
name|cmd
parameter_list|,
name|void
function_decl|(
modifier|*
name|fp
function_decl|)
parameter_list|(
name|struct
name|bio_st
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|)
parameter_list|)
function_decl|;
name|char
modifier|*
name|BIO_ptr_ctrl
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|)
function_decl|;
name|long
name|BIO_int_ctrl
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|,
name|int
name|iarg
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_push
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|BIO
modifier|*
name|append
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_pop
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|void
name|BIO_free_all
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_find_type
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|int
name|bio_type
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_next
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_get_retry_BIO
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|int
modifier|*
name|reason
parameter_list|)
function_decl|;
name|int
name|BIO_get_retry_reason
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_dup_chain
parameter_list|(
name|BIO
modifier|*
name|in
parameter_list|)
function_decl|;
name|int
name|BIO_nread0
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|char
modifier|*
modifier|*
name|buf
parameter_list|)
function_decl|;
name|int
name|BIO_nread
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|char
modifier|*
modifier|*
name|buf
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|int
name|BIO_nwrite0
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|char
modifier|*
modifier|*
name|buf
parameter_list|)
function_decl|;
name|int
name|BIO_nwrite
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|char
modifier|*
modifier|*
name|buf
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|long
name|BIO_debug_callback
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|int
name|cmd
parameter_list|,
specifier|const
name|char
modifier|*
name|argp
parameter_list|,
name|int
name|argi
parameter_list|,
name|long
name|argl
parameter_list|,
name|long
name|ret
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_s_mem
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_mem_buf
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_s_socket
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_s_connect
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_s_accept
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_s_fd
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_SYS_OS2
name|BIO_METHOD
modifier|*
name|BIO_s_log
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
name|BIO_METHOD
modifier|*
name|BIO_s_bio
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_s_null
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_f_null
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|BIO_METHOD
modifier|*
name|BIO_f_buffer
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|OPENSSL_SYS_VMS
name|BIO_METHOD
modifier|*
name|BIO_f_linebuffer
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
name|BIO_METHOD
modifier|*
name|BIO_f_nbio_test
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_DGRAM
name|BIO_METHOD
modifier|*
name|BIO_s_datagram
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
name|BIO_METHOD
modifier|*
name|BIO_s_datagram_sctp
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
endif|#
directive|endif
comment|/* BIO_METHOD *BIO_f_ber(void); */
name|int
name|BIO_sock_should_retry
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|int
name|BIO_sock_non_fatal_error
parameter_list|(
name|int
name|error
parameter_list|)
function_decl|;
name|int
name|BIO_dgram_non_fatal_error
parameter_list|(
name|int
name|error
parameter_list|)
function_decl|;
name|int
name|BIO_fd_should_retry
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|int
name|BIO_fd_non_fatal_error
parameter_list|(
name|int
name|error
parameter_list|)
function_decl|;
name|int
name|BIO_dump_cb
parameter_list|(
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
parameter_list|,
name|void
modifier|*
name|u
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|BIO_dump_indent_cb
parameter_list|(
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
parameter_list|,
name|void
modifier|*
name|u
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
name|int
name|BIO_dump
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
specifier|const
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|BIO_dump_indent
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
specifier|const
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|int
name|BIO_dump_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|BIO_dump_indent_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
endif|#
directive|endif
name|struct
name|hostent
modifier|*
name|BIO_gethostbyname
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/* We might want a thread-safe interface too:  * struct hostent *BIO_gethostbyname_r(const char *name,  *     struct hostent *result, void *buffer, size_t buflen);  * or something similar (caller allocates a struct hostent,  * pointed to by "result", and additional buffer space for the various  * substructures; if the buffer does not suffice, NULL is returned  * and an appropriate error code is set).  */
name|int
name|BIO_sock_error
parameter_list|(
name|int
name|sock
parameter_list|)
function_decl|;
name|int
name|BIO_socket_ioctl
parameter_list|(
name|int
name|fd
parameter_list|,
name|long
name|type
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|int
name|BIO_socket_nbio
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|BIO_get_port
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|short
modifier|*
name|port_ptr
parameter_list|)
function_decl|;
name|int
name|BIO_get_host_ip
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|ip
parameter_list|)
function_decl|;
name|int
name|BIO_get_accept_socket
parameter_list|(
name|char
modifier|*
name|host_port
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|BIO_accept
parameter_list|(
name|int
name|sock
parameter_list|,
name|char
modifier|*
modifier|*
name|ip_port
parameter_list|)
function_decl|;
name|int
name|BIO_sock_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|BIO_sock_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|BIO_set_tcp_ndelay
parameter_list|(
name|int
name|sock
parameter_list|,
name|int
name|turn_on
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_socket
parameter_list|(
name|int
name|sock
parameter_list|,
name|int
name|close_flag
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_dgram
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|close_flag
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SCTP
name|BIO
modifier|*
name|BIO_new_dgram_sctp
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|close_flag
parameter_list|)
function_decl|;
name|int
name|BIO_dgram_is_sctp
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|)
function_decl|;
name|int
name|BIO_dgram_sctp_notification_cb
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|,
name|void
function_decl|(
modifier|*
name|handle_notifications
function_decl|)
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
name|int
name|BIO_dgram_sctp_wait_for_dry
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|BIO_dgram_sctp_msg_waiting
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
endif|#
directive|endif
name|BIO
modifier|*
name|BIO_new_fd
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|close_flag
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_connect
parameter_list|(
name|char
modifier|*
name|host_port
parameter_list|)
function_decl|;
name|BIO
modifier|*
name|BIO_new_accept
parameter_list|(
name|char
modifier|*
name|host_port
parameter_list|)
function_decl|;
name|int
name|BIO_new_bio_pair
parameter_list|(
name|BIO
modifier|*
modifier|*
name|bio1
parameter_list|,
name|size_t
name|writebuf1
parameter_list|,
name|BIO
modifier|*
modifier|*
name|bio2
parameter_list|,
name|size_t
name|writebuf2
parameter_list|)
function_decl|;
comment|/* If successful, returns 1 and in *bio1, *bio2 two BIO pair endpoints.  * Otherwise returns 0 and sets *bio1 and *bio2 to NULL.  * Size 0 uses default value.  */
name|void
name|BIO_copy_next_retry
parameter_list|(
name|BIO
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/*long BIO_ghbn_ctrl(int cmd,int iarg,char *parg);*/
ifdef|#
directive|ifdef
name|__GNUC__
define|#
directive|define
name|__bio_h__attr__
value|__attribute__
else|#
directive|else
define|#
directive|define
name|__bio_h__attr__
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
name|int
name|BIO_printf
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|__bio_h__attr__
parameter_list|(
function_decl|(__format__
parameter_list|(
name|__printf__
parameter_list|,
function_decl|2
operator|,
function_decl|3
block|)
end_extern

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|BIO_vprintf
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|__bio_h__attr__
parameter_list|(
function_decl|(__format__
parameter_list|(
name|__printf__
parameter_list|,
function_decl|2
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|BIO_snprintf
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|__bio_h__attr__
parameter_list|(
function_decl|(__format__
parameter_list|(
name|__printf__
parameter_list|,
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|BIO_vsnprintf
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|__bio_h__attr__
parameter_list|(
function_decl|(__format__
parameter_list|(
name|__printf__
parameter_list|,
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_undef
undef|#
directive|undef
name|__bio_h__attr__
end_undef

begin_comment
comment|/* BEGIN ERROR CODES */
end_comment

begin_comment
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
end_comment

begin_function_decl
name|void
name|ERR_load_BIO_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Error codes for the BIO functions. */
end_comment

begin_comment
comment|/* Function codes. */
end_comment

begin_define
define|#
directive|define
name|BIO_F_ACPT_STATE
value|100
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_ACCEPT
value|101
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_BER_GET_HEADER
value|102
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_CALLBACK_CTRL
value|131
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_CTRL
value|103
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_GETHOSTBYNAME
value|120
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_GETS
value|104
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_GET_ACCEPT_SOCKET
value|105
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_GET_HOST_IP
value|106
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_GET_PORT
value|107
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_MAKE_PAIR
value|121
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_NEW
value|108
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_NEW_FILE
value|109
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_NEW_MEM_BUF
value|126
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_NREAD
value|123
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_NREAD0
value|124
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_NWRITE
value|125
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_NWRITE0
value|122
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_PUTS
value|110
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_READ
value|111
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_SOCK_INIT
value|112
end_define

begin_define
define|#
directive|define
name|BIO_F_BIO_WRITE
value|113
end_define

begin_define
define|#
directive|define
name|BIO_F_BUFFER_CTRL
value|114
end_define

begin_define
define|#
directive|define
name|BIO_F_CONN_CTRL
value|127
end_define

begin_define
define|#
directive|define
name|BIO_F_CONN_STATE
value|115
end_define

begin_define
define|#
directive|define
name|BIO_F_DGRAM_SCTP_READ
value|132
end_define

begin_define
define|#
directive|define
name|BIO_F_FILE_CTRL
value|116
end_define

begin_define
define|#
directive|define
name|BIO_F_FILE_READ
value|130
end_define

begin_define
define|#
directive|define
name|BIO_F_LINEBUFFER_CTRL
value|129
end_define

begin_define
define|#
directive|define
name|BIO_F_MEM_READ
value|128
end_define

begin_define
define|#
directive|define
name|BIO_F_MEM_WRITE
value|117
end_define

begin_define
define|#
directive|define
name|BIO_F_SSL_NEW
value|118
end_define

begin_define
define|#
directive|define
name|BIO_F_WSASTARTUP
value|119
end_define

begin_comment
comment|/* Reason codes. */
end_comment

begin_define
define|#
directive|define
name|BIO_R_ACCEPT_ERROR
value|100
end_define

begin_define
define|#
directive|define
name|BIO_R_BAD_FOPEN_MODE
value|101
end_define

begin_define
define|#
directive|define
name|BIO_R_BAD_HOSTNAME_LOOKUP
value|102
end_define

begin_define
define|#
directive|define
name|BIO_R_BROKEN_PIPE
value|124
end_define

begin_define
define|#
directive|define
name|BIO_R_CONNECT_ERROR
value|103
end_define

begin_define
define|#
directive|define
name|BIO_R_EOF_ON_MEMORY_BIO
value|127
end_define

begin_define
define|#
directive|define
name|BIO_R_ERROR_SETTING_NBIO
value|104
end_define

begin_define
define|#
directive|define
name|BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
value|105
end_define

begin_define
define|#
directive|define
name|BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
value|106
end_define

begin_define
define|#
directive|define
name|BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
value|107
end_define

begin_define
define|#
directive|define
name|BIO_R_INVALID_ARGUMENT
value|125
end_define

begin_define
define|#
directive|define
name|BIO_R_INVALID_IP_ADDRESS
value|108
end_define

begin_define
define|#
directive|define
name|BIO_R_IN_USE
value|123
end_define

begin_define
define|#
directive|define
name|BIO_R_KEEPALIVE
value|109
end_define

begin_define
define|#
directive|define
name|BIO_R_NBIO_CONNECT_ERROR
value|110
end_define

begin_define
define|#
directive|define
name|BIO_R_NO_ACCEPT_PORT_SPECIFIED
value|111
end_define

begin_define
define|#
directive|define
name|BIO_R_NO_HOSTNAME_SPECIFIED
value|112
end_define

begin_define
define|#
directive|define
name|BIO_R_NO_PORT_DEFINED
value|113
end_define

begin_define
define|#
directive|define
name|BIO_R_NO_PORT_SPECIFIED
value|114
end_define

begin_define
define|#
directive|define
name|BIO_R_NO_SUCH_FILE
value|128
end_define

begin_define
define|#
directive|define
name|BIO_R_NULL_PARAMETER
value|115
end_define

begin_define
define|#
directive|define
name|BIO_R_TAG_MISMATCH
value|116
end_define

begin_define
define|#
directive|define
name|BIO_R_UNABLE_TO_BIND_SOCKET
value|117
end_define

begin_define
define|#
directive|define
name|BIO_R_UNABLE_TO_CREATE_SOCKET
value|118
end_define

begin_define
define|#
directive|define
name|BIO_R_UNABLE_TO_LISTEN_SOCKET
value|119
end_define

begin_define
define|#
directive|define
name|BIO_R_UNINITIALIZED
value|120
end_define

begin_define
define|#
directive|define
name|BIO_R_UNSUPPORTED_METHOD
value|121
end_define

begin_define
define|#
directive|define
name|BIO_R_WRITE_TO_READ_ONLY_BIO
value|126
end_define

begin_define
define|#
directive|define
name|BIO_R_WSASTARTUP
value|122
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

