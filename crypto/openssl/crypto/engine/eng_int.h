begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/engine/eng_int.h */
end_comment

begin_comment
comment|/* Written by Geoff Thorpe (geoff@geoffthorpe.net) for the OpenSSL  * project 2000.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    licensing@OpenSSL.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_ENGINE_INT_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_ENGINE_INT_H
end_define

begin_comment
comment|/* Take public definitions from engine.h */
end_comment

begin_include
include|#
directive|include
file|<openssl/engine.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* If we compile with this symbol defined, then both reference counts in the  * ENGINE structure will be monitored with a line of output on stderr for each  * change. This prints the engine's pointer address (truncated to unsigned int),  * "struct" or "funct" to indicate the reference type, the before and after  * reference count, and the file:line-number pair. The "engine_ref_debug"  * statements must come *after* the change. */
ifdef|#
directive|ifdef
name|ENGINE_REF_COUNT_DEBUG
define|#
directive|define
name|engine_ref_debug
parameter_list|(
name|e
parameter_list|,
name|isfunct
parameter_list|,
name|diff
parameter_list|)
define|\
value|fprintf(stderr, "engine: %08x %s from %d to %d (%s:%d)\n", \ 		(unsigned int)(e), (isfunct ? "funct" : "struct"), \ 		((isfunct) ? ((e)->funct_ref - (diff)) : ((e)->struct_ref - (diff))), \ 		((isfunct) ? (e)->funct_ref : (e)->struct_ref), \ 		(__FILE__), (__LINE__));
else|#
directive|else
define|#
directive|define
name|engine_ref_debug
parameter_list|(
name|e
parameter_list|,
name|isfunct
parameter_list|,
name|diff
parameter_list|)
endif|#
directive|endif
comment|/* Any code that will need cleanup operations should use these functions to  * register callbacks. ENGINE_cleanup() will call all registered callbacks in  * order. NB: both the "add" functions assume CRYPTO_LOCK_ENGINE to already be  * held (in "write" mode). */
typedef|typedef
name|void
function_decl|(
name|ENGINE_CLEANUP_CB
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|st_engine_cleanup_item
block|{
name|ENGINE_CLEANUP_CB
modifier|*
name|cb
decl_stmt|;
block|}
name|ENGINE_CLEANUP_ITEM
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|ENGINE_CLEANUP_ITEM
argument_list|)
name|void
name|engine_cleanup_add_first
parameter_list|(
name|ENGINE_CLEANUP_CB
modifier|*
name|cb
parameter_list|)
function_decl|;
name|void
name|engine_cleanup_add_last
parameter_list|(
name|ENGINE_CLEANUP_CB
modifier|*
name|cb
parameter_list|)
function_decl|;
comment|/* We need stacks of ENGINEs for use in eng_table.c */
name|DECLARE_STACK_OF
argument_list|(
argument|ENGINE
argument_list|)
comment|/* If this symbol is defined then engine_table_select(), the function that is  * used by RSA, DSA (etc) code to select registered ENGINEs, cache defaults and  * functional references (etc), will display debugging summaries to stderr. */
comment|/* #define ENGINE_TABLE_DEBUG */
comment|/* This represents an implementation table. Dependent code should instantiate it  * as a (ENGINE_TABLE *) pointer value set initially to NULL. */
typedef|typedef
name|struct
name|st_engine_table
name|ENGINE_TABLE
typedef|;
name|int
name|engine_table_register
parameter_list|(
name|ENGINE_TABLE
modifier|*
modifier|*
name|table
parameter_list|,
name|ENGINE_CLEANUP_CB
modifier|*
name|cleanup
parameter_list|,
name|ENGINE
modifier|*
name|e
parameter_list|,
specifier|const
name|int
modifier|*
name|nids
parameter_list|,
name|int
name|num_nids
parameter_list|,
name|int
name|setdefault
parameter_list|)
function_decl|;
name|void
name|engine_table_unregister
parameter_list|(
name|ENGINE_TABLE
modifier|*
modifier|*
name|table
parameter_list|,
name|ENGINE
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|engine_table_cleanup
parameter_list|(
name|ENGINE_TABLE
modifier|*
modifier|*
name|table
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|ENGINE_TABLE_DEBUG
name|ENGINE
modifier|*
name|engine_table_select
parameter_list|(
name|ENGINE_TABLE
modifier|*
modifier|*
name|table
parameter_list|,
name|int
name|nid
parameter_list|)
function_decl|;
else|#
directive|else
name|ENGINE
modifier|*
name|engine_table_select_tmp
parameter_list|(
name|ENGINE_TABLE
modifier|*
modifier|*
name|table
parameter_list|,
name|int
name|nid
parameter_list|,
specifier|const
name|char
modifier|*
name|f
parameter_list|,
name|int
name|l
parameter_list|)
function_decl|;
define|#
directive|define
name|engine_table_select
parameter_list|(
name|t
parameter_list|,
name|n
parameter_list|)
value|engine_table_select_tmp(t,n,__FILE__,__LINE__)
endif|#
directive|endif
comment|/* Internal versions of API functions that have control over locking. These are  * used between C files when functionality needs to be shared but the caller may  * already be controlling of the CRYPTO_LOCK_ENGINE lock. */
name|int
name|engine_unlocked_init
parameter_list|(
name|ENGINE
modifier|*
name|e
parameter_list|)
function_decl|;
name|int
name|engine_unlocked_finish
parameter_list|(
name|ENGINE
modifier|*
name|e
parameter_list|,
name|int
name|unlock_for_handlers
parameter_list|)
function_decl|;
name|int
name|engine_free_util
parameter_list|(
name|ENGINE
modifier|*
name|e
parameter_list|,
name|int
name|locked
parameter_list|)
function_decl|;
comment|/* This function will reset all "set"able values in an ENGINE to NULL. This  * won't touch reference counts or ex_data, but is equivalent to calling all the  * ENGINE_set_***() functions with a NULL value. */
name|void
name|engine_set_all_null
parameter_list|(
name|ENGINE
modifier|*
name|e
parameter_list|)
function_decl|;
comment|/* NB: Bitwise OR-able values for the "flags" variable in ENGINE are now exposed  * in engine.h. */
comment|/* This is a structure for storing implementations of various crypto  * algorithms and functions. */
struct|struct
name|engine_st
block|{
specifier|const
name|char
modifier|*
name|id
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
specifier|const
name|RSA_METHOD
modifier|*
name|rsa_meth
decl_stmt|;
specifier|const
name|DSA_METHOD
modifier|*
name|dsa_meth
decl_stmt|;
specifier|const
name|DH_METHOD
modifier|*
name|dh_meth
decl_stmt|;
specifier|const
name|RAND_METHOD
modifier|*
name|rand_meth
decl_stmt|;
comment|/* Cipher handling is via this callback */
name|ENGINE_CIPHERS_PTR
name|ciphers
decl_stmt|;
comment|/* Digest handling is via this callback */
name|ENGINE_DIGESTS_PTR
name|digests
decl_stmt|;
name|ENGINE_GEN_INT_FUNC_PTR
name|destroy
decl_stmt|;
name|ENGINE_GEN_INT_FUNC_PTR
name|init
decl_stmt|;
name|ENGINE_GEN_INT_FUNC_PTR
name|finish
decl_stmt|;
name|ENGINE_CTRL_FUNC_PTR
name|ctrl
decl_stmt|;
name|ENGINE_LOAD_KEY_PTR
name|load_privkey
decl_stmt|;
name|ENGINE_LOAD_KEY_PTR
name|load_pubkey
decl_stmt|;
specifier|const
name|ENGINE_CMD_DEFN
modifier|*
name|cmd_defns
decl_stmt|;
name|int
name|flags
decl_stmt|;
comment|/* reference count on the structure itself */
name|int
name|struct_ref
decl_stmt|;
comment|/* reference count on usability of the engine type. NB: This 	 * controls the loading and initialisation of any functionlity 	 * required by this engine, whereas the previous count is 	 * simply to cope with (de)allocation of this structure. Hence, 	 * running_ref<= struct_ref at all times. */
name|int
name|funct_ref
decl_stmt|;
comment|/* A place to store per-ENGINE data */
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
comment|/* Used to maintain the linked-list of engines. */
name|struct
name|engine_st
modifier|*
name|prev
decl_stmt|;
name|struct
name|engine_st
modifier|*
name|next
decl_stmt|;
block|}
struct|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* HEADER_ENGINE_INT_H */
end_comment

end_unit

