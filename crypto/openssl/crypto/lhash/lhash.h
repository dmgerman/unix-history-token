begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/lhash/lhash.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_comment
comment|/* Header for dynamic hash table routines  * Author - Eric Young  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_LHASH_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_LHASH_H
end_define

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
end_ifndef

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
struct|struct
name|lhash_node_st
block|{
name|void
modifier|*
name|data
decl_stmt|;
name|struct
name|lhash_node_st
modifier|*
name|next
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_HASH_COMP
name|unsigned
name|long
name|hash
decl_stmt|;
endif|#
directive|endif
block|}
name|LHASH_NODE
typedef|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|LHASH_COMP_FN_TYPE
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|unsigned
name|long
function_decl|(
modifier|*
name|LHASH_HASH_FN_TYPE
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|LHASH_DOALL_FN_TYPE
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|LHASH_DOALL_ARG_FN_TYPE
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Macros for declaring and implementing type-safe wrappers for LHASH callbacks.  * This way, callbacks can be provided to LHASH structures without function  * pointer casting and the macro-defined callbacks provide per-variable casting  * before deferring to the underlying type-specific callbacks. NB: It is  * possible to place a "static" in front of both the DECLARE and IMPLEMENT  * macros if the functions are strictly internal. */
comment|/* First: "hash" functions */
define|#
directive|define
name|DECLARE_LHASH_HASH_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|)
define|\
value|unsigned long name##_LHASH_HASH(const void *);
define|#
directive|define
name|IMPLEMENT_LHASH_HASH_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|)
define|\
value|unsigned long name##_LHASH_HASH(const void *arg) { \ 		const o_type *a = arg; \ 		return name##_hash(a); }
define|#
directive|define
name|LHASH_HASH_FN
parameter_list|(
name|name
parameter_list|)
value|name##_LHASH_HASH
comment|/* Second: "compare" functions */
define|#
directive|define
name|DECLARE_LHASH_COMP_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|)
define|\
value|int name##_LHASH_COMP(const void *, const void *);
define|#
directive|define
name|IMPLEMENT_LHASH_COMP_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|)
define|\
value|int name##_LHASH_COMP(const void *arg1, const void *arg2) { \ 		const o_type *a = arg1;		    \ 		const o_type *b = arg2; \ 		return name##_cmp(a,b); }
define|#
directive|define
name|LHASH_COMP_FN
parameter_list|(
name|name
parameter_list|)
value|name##_LHASH_COMP
comment|/* Third: "doall" functions */
define|#
directive|define
name|DECLARE_LHASH_DOALL_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|)
define|\
value|void name##_LHASH_DOALL(void *);
define|#
directive|define
name|IMPLEMENT_LHASH_DOALL_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|)
define|\
value|void name##_LHASH_DOALL(void *arg) { \ 		o_type *a = arg; \ 		name##_doall(a); }
define|#
directive|define
name|LHASH_DOALL_FN
parameter_list|(
name|name
parameter_list|)
value|name##_LHASH_DOALL
comment|/* Fourth: "doall_arg" functions */
define|#
directive|define
name|DECLARE_LHASH_DOALL_ARG_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|,
name|a_type
parameter_list|)
define|\
value|void name##_LHASH_DOALL_ARG(void *, void *);
define|#
directive|define
name|IMPLEMENT_LHASH_DOALL_ARG_FN
parameter_list|(
name|name
parameter_list|,
name|o_type
parameter_list|,
name|a_type
parameter_list|)
define|\
value|void name##_LHASH_DOALL_ARG(void *arg1, void *arg2) { \ 		o_type *a = arg1; \ 		a_type *b = arg2; \ 		name##_doall_arg(a, b); }
define|#
directive|define
name|LHASH_DOALL_ARG_FN
parameter_list|(
name|name
parameter_list|)
value|name##_LHASH_DOALL_ARG
typedef|typedef
struct|struct
name|lhash_st
block|{
name|LHASH_NODE
modifier|*
modifier|*
name|b
decl_stmt|;
name|LHASH_COMP_FN_TYPE
name|comp
decl_stmt|;
name|LHASH_HASH_FN_TYPE
name|hash
decl_stmt|;
name|unsigned
name|int
name|num_nodes
decl_stmt|;
name|unsigned
name|int
name|num_alloc_nodes
decl_stmt|;
name|unsigned
name|int
name|p
decl_stmt|;
name|unsigned
name|int
name|pmax
decl_stmt|;
name|unsigned
name|long
name|up_load
decl_stmt|;
comment|/* load times 256 */
name|unsigned
name|long
name|down_load
decl_stmt|;
comment|/* load times 256 */
name|unsigned
name|long
name|num_items
decl_stmt|;
name|unsigned
name|long
name|num_expands
decl_stmt|;
name|unsigned
name|long
name|num_expand_reallocs
decl_stmt|;
name|unsigned
name|long
name|num_contracts
decl_stmt|;
name|unsigned
name|long
name|num_contract_reallocs
decl_stmt|;
name|unsigned
name|long
name|num_hash_calls
decl_stmt|;
name|unsigned
name|long
name|num_comp_calls
decl_stmt|;
name|unsigned
name|long
name|num_insert
decl_stmt|;
name|unsigned
name|long
name|num_replace
decl_stmt|;
name|unsigned
name|long
name|num_delete
decl_stmt|;
name|unsigned
name|long
name|num_no_delete
decl_stmt|;
name|unsigned
name|long
name|num_retrieve
decl_stmt|;
name|unsigned
name|long
name|num_retrieve_miss
decl_stmt|;
name|unsigned
name|long
name|num_hash_comps
decl_stmt|;
name|int
name|error
decl_stmt|;
block|}
name|_LHASH
typedef|;
comment|/* Do not use _LHASH directly, use LHASH_OF 			 * and friends */
define|#
directive|define
name|LH_LOAD_MULT
value|256
comment|/* Indicates a malloc() error in the last call, this is only bad  * in lh_insert(). */
define|#
directive|define
name|lh_error
parameter_list|(
name|lh
parameter_list|)
value|((lh)->error)
name|_LHASH
modifier|*
name|lh_new
parameter_list|(
name|LHASH_HASH_FN_TYPE
name|h
parameter_list|,
name|LHASH_COMP_FN_TYPE
name|c
parameter_list|)
function_decl|;
name|void
name|lh_free
parameter_list|(
name|_LHASH
modifier|*
name|lh
parameter_list|)
function_decl|;
name|void
modifier|*
name|lh_insert
parameter_list|(
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|lh_delete
parameter_list|(
name|_LHASH
modifier|*
name|lh
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|lh_retrieve
parameter_list|(
name|_LHASH
modifier|*
name|lh
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|lh_doall
parameter_list|(
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|LHASH_DOALL_FN_TYPE
name|func
parameter_list|)
function_decl|;
name|void
name|lh_doall_arg
parameter_list|(
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|LHASH_DOALL_ARG_FN_TYPE
name|func
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|unsigned
name|long
name|lh_strhash
parameter_list|(
specifier|const
name|char
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|long
name|lh_num_items
parameter_list|(
specifier|const
name|_LHASH
modifier|*
name|lh
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|void
name|lh_stats
parameter_list|(
specifier|const
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_stats
parameter_list|(
specifier|const
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_usage_stats
parameter_list|(
specifier|const
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|void
name|lh_stats_bio
parameter_list|(
specifier|const
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_stats_bio
parameter_list|(
specifier|const
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_usage_stats_bio
parameter_list|(
specifier|const
name|_LHASH
modifier|*
name|lh
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* Type checking... */
define|#
directive|define
name|LHASH_OF
parameter_list|(
name|type
parameter_list|)
value|struct lhash_st_##type
define|#
directive|define
name|DECLARE_LHASH_OF
parameter_list|(
name|type
parameter_list|)
value|LHASH_OF(type) { int dummy; }
define|#
directive|define
name|CHECKED_LHASH_OF
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|)
define|\
value|((_LHASH *)CHECKED_PTR_OF(LHASH_OF(type),lh))
comment|/* Define wrapper functions. */
define|#
directive|define
name|LHM_lh_new
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
define|\
value|((LHASH_OF(type) *)lh_new(LHASH_HASH_FN(name), LHASH_COMP_FN(name)))
define|#
directive|define
name|LHM_lh_error
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|)
define|\
value|lh_error(CHECKED_LHASH_OF(type,lh))
define|#
directive|define
name|LHM_lh_insert
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|inst
parameter_list|)
define|\
value|((type *)lh_insert(CHECKED_LHASH_OF(type, lh), \ 		     CHECKED_PTR_OF(type, inst)))
define|#
directive|define
name|LHM_lh_retrieve
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|inst
parameter_list|)
define|\
value|((type *)lh_retrieve(CHECKED_LHASH_OF(type, lh), \ 		       CHECKED_PTR_OF(type, inst)))
define|#
directive|define
name|LHM_lh_delete
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|inst
parameter_list|)
define|\
value|((type *)lh_delete(CHECKED_LHASH_OF(type, lh),			\ 		     CHECKED_PTR_OF(type, inst)))
define|#
directive|define
name|LHM_lh_doall
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|fn
parameter_list|)
value|lh_doall(CHECKED_LHASH_OF(type, lh), fn)
define|#
directive|define
name|LHM_lh_doall_arg
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|fn
parameter_list|,
name|arg_type
parameter_list|,
name|arg
parameter_list|)
define|\
value|lh_doall_arg(CHECKED_LHASH_OF(type, lh), fn, CHECKED_PTR_OF(arg_type, arg))
define|#
directive|define
name|LHM_lh_num_items
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|)
value|lh_num_items(CHECKED_LHASH_OF(type, lh))
define|#
directive|define
name|LHM_lh_down_load
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|)
value|(CHECKED_LHASH_OF(type, lh)->down_load)
define|#
directive|define
name|LHM_lh_node_stats_bio
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|out
parameter_list|)
define|\
value|lh_node_stats_bio(CHECKED_LHASH_OF(type, lh), out)
define|#
directive|define
name|LHM_lh_node_usage_stats_bio
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|out
parameter_list|)
define|\
value|lh_node_usage_stats_bio(CHECKED_LHASH_OF(type, lh), out)
define|#
directive|define
name|LHM_lh_stats_bio
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|,
name|out
parameter_list|)
define|\
value|lh_stats_bio(CHECKED_LHASH_OF(type, lh), out)
define|#
directive|define
name|LHM_lh_free
parameter_list|(
name|type
parameter_list|,
name|lh
parameter_list|)
value|lh_free(CHECKED_LHASH_OF(type, lh))
name|DECLARE_LHASH_OF
argument_list|(
name|OPENSSL_STRING
argument_list|)
expr_stmt|;
name|DECLARE_LHASH_OF
argument_list|(
name|OPENSSL_CSTRING
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

