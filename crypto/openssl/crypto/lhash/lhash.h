begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/lhash/lhash.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_comment
comment|/* Header for dynamic hash table routines  * Author - Eric Young  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_LHASH_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_LHASH_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NO_FP_API
include|#
directive|include
file|<stdio.h>
endif|#
directive|endif
typedef|typedef
struct|struct
name|lhash_node_st
block|{
name|char
modifier|*
name|data
decl_stmt|;
name|struct
name|lhash_node_st
modifier|*
name|next
decl_stmt|;
ifndef|#
directive|ifndef
name|NO_HASH_COMP
name|unsigned
name|long
name|hash
decl_stmt|;
endif|#
directive|endif
block|}
name|LHASH_NODE
typedef|;
typedef|typedef
struct|struct
name|lhash_st
block|{
name|LHASH_NODE
modifier|*
modifier|*
name|b
decl_stmt|;
name|int
function_decl|(
modifier|*
name|comp
function_decl|)
parameter_list|()
function_decl|;
name|unsigned
name|long
function_decl|(
modifier|*
name|hash
function_decl|)
parameter_list|()
function_decl|;
name|unsigned
name|int
name|num_nodes
decl_stmt|;
name|unsigned
name|int
name|num_alloc_nodes
decl_stmt|;
name|unsigned
name|int
name|p
decl_stmt|;
name|unsigned
name|int
name|pmax
decl_stmt|;
name|unsigned
name|long
name|up_load
decl_stmt|;
comment|/* load times 256 */
name|unsigned
name|long
name|down_load
decl_stmt|;
comment|/* load times 256 */
name|unsigned
name|long
name|num_items
decl_stmt|;
name|unsigned
name|long
name|num_expands
decl_stmt|;
name|unsigned
name|long
name|num_expand_reallocs
decl_stmt|;
name|unsigned
name|long
name|num_contracts
decl_stmt|;
name|unsigned
name|long
name|num_contract_reallocs
decl_stmt|;
name|unsigned
name|long
name|num_hash_calls
decl_stmt|;
name|unsigned
name|long
name|num_comp_calls
decl_stmt|;
name|unsigned
name|long
name|num_insert
decl_stmt|;
name|unsigned
name|long
name|num_replace
decl_stmt|;
name|unsigned
name|long
name|num_delete
decl_stmt|;
name|unsigned
name|long
name|num_no_delete
decl_stmt|;
name|unsigned
name|long
name|num_retrieve
decl_stmt|;
name|unsigned
name|long
name|num_retrieve_miss
decl_stmt|;
name|unsigned
name|long
name|num_hash_comps
decl_stmt|;
name|int
name|error
decl_stmt|;
block|}
name|LHASH
typedef|;
define|#
directive|define
name|LH_LOAD_MULT
value|256
comment|/* Indicates a malloc() error in the last call, this is only bad  * in lh_insert(). */
define|#
directive|define
name|lh_error
parameter_list|(
name|lh
parameter_list|)
value|((lh)->error)
name|LHASH
modifier|*
name|lh_new
argument_list|(
name|unsigned
name|long
argument_list|(
operator|*
name|h
argument_list|)
argument_list|()
argument_list|,
name|int
argument_list|(
operator|*
name|c
argument_list|)
argument_list|()
argument_list|)
decl_stmt|;
name|void
name|lh_free
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|)
function_decl|;
name|char
modifier|*
name|lh_insert
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|char
modifier|*
name|lh_delete
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|char
modifier|*
name|lh_retrieve
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|lh_doall
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
comment|/* char *b */
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|lh_doall_arg
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
comment|/*char *a,char *b*/
parameter_list|)
parameter_list|,
name|char
modifier|*
name|arg
parameter_list|)
function_decl|;
name|unsigned
name|long
name|lh_strhash
parameter_list|(
specifier|const
name|char
modifier|*
name|c
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|NO_FP_API
name|void
name|lh_stats
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_stats
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_usage_stats
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HEADER_BIO_H
name|void
name|lh_stats_bio
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_stats_bio
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
name|void
name|lh_node_usage_stats_bio
parameter_list|(
name|LHASH
modifier|*
name|lh
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

