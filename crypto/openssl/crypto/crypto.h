begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/crypto.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_CRYPTO_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_CRYPTO_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NO_FP_API
include|#
directive|include
file|<stdio.h>
endif|#
directive|endif
include|#
directive|include
file|<openssl/stack.h>
include|#
directive|include
file|<openssl/opensslv.h>
ifdef|#
directive|ifdef
name|CHARSET_EBCDIC
include|#
directive|include
file|<openssl/ebcdic.h>
endif|#
directive|endif
comment|/* Backward compatibility to SSLeay */
comment|/* This is more to be used to check the correct DLL is being used  * in the MS world. */
define|#
directive|define
name|SSLEAY_VERSION_NUMBER
value|OPENSSL_VERSION_NUMBER
define|#
directive|define
name|SSLEAY_VERSION
value|0
comment|/* #define SSLEAY_OPTIONS	1 no longer supported */
define|#
directive|define
name|SSLEAY_CFLAGS
value|2
define|#
directive|define
name|SSLEAY_BUILT_ON
value|3
define|#
directive|define
name|SSLEAY_PLATFORM
value|4
comment|/* When changing the CRYPTO_LOCK_* list, be sure to maintin the text lock  * names in cryptlib.c  */
define|#
directive|define
name|CRYPTO_LOCK_ERR
value|1
define|#
directive|define
name|CRYPTO_LOCK_ERR_HASH
value|2
define|#
directive|define
name|CRYPTO_LOCK_X509
value|3
define|#
directive|define
name|CRYPTO_LOCK_X509_INFO
value|4
define|#
directive|define
name|CRYPTO_LOCK_X509_PKEY
value|5
define|#
directive|define
name|CRYPTO_LOCK_X509_CRL
value|6
define|#
directive|define
name|CRYPTO_LOCK_X509_REQ
value|7
define|#
directive|define
name|CRYPTO_LOCK_DSA
value|8
define|#
directive|define
name|CRYPTO_LOCK_RSA
value|9
define|#
directive|define
name|CRYPTO_LOCK_EVP_PKEY
value|10
define|#
directive|define
name|CRYPTO_LOCK_X509_STORE
value|11
define|#
directive|define
name|CRYPTO_LOCK_SSL_CTX
value|12
define|#
directive|define
name|CRYPTO_LOCK_SSL_CERT
value|13
define|#
directive|define
name|CRYPTO_LOCK_SSL_SESSION
value|14
define|#
directive|define
name|CRYPTO_LOCK_SSL_SESS_CERT
value|15
define|#
directive|define
name|CRYPTO_LOCK_SSL
value|16
define|#
directive|define
name|CRYPTO_LOCK_RAND
value|17
define|#
directive|define
name|CRYPTO_LOCK_MALLOC
value|18
define|#
directive|define
name|CRYPTO_LOCK_BIO
value|19
define|#
directive|define
name|CRYPTO_LOCK_GETHOSTBYNAME
value|20
define|#
directive|define
name|CRYPTO_LOCK_GETSERVBYNAME
value|21
define|#
directive|define
name|CRYPTO_LOCK_READDIR
value|22
define|#
directive|define
name|CRYPTO_LOCK_RSA_BLINDING
value|23
define|#
directive|define
name|CRYPTO_NUM_LOCKS
value|24
define|#
directive|define
name|CRYPTO_LOCK
value|1
define|#
directive|define
name|CRYPTO_UNLOCK
value|2
define|#
directive|define
name|CRYPTO_READ
value|4
define|#
directive|define
name|CRYPTO_WRITE
value|8
ifndef|#
directive|ifndef
name|NO_LOCKING
ifndef|#
directive|ifndef
name|CRYPTO_w_lock
define|#
directive|define
name|CRYPTO_w_lock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_w_unlock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_r_lock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_r_unlock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_add
parameter_list|(
name|addr
parameter_list|,
name|amount
parameter_list|,
name|type
parameter_list|)
define|\
value|CRYPTO_add_lock(addr,amount,type,__FILE__,__LINE__)
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|CRYPTO_w_lock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_w_unlock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_r_lock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_r_unlock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_add
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|((*(a))+=(b))
endif|#
directive|endif
comment|/* The following can be used to detect memory leaks in the SSLeay library.  * It used, it turns on malloc checking */
define|#
directive|define
name|CRYPTO_MEM_CHECK_OFF
value|0x0
comment|/* an enume */
define|#
directive|define
name|CRYPTO_MEM_CHECK_ON
value|0x1
comment|/* a bit */
define|#
directive|define
name|CRYPTO_MEM_CHECK_ENABLE
value|0x2
comment|/* a bit */
define|#
directive|define
name|CRYPTO_MEM_CHECK_DISABLE
value|0x3
comment|/* an enume */
comment|/* typedef struct crypto_mem_st 	{ 	char *(*malloc_func)(); 	char *(*realloc_func)(); 	void (*free_func)(); 	} CRYPTO_MEM_FUNC; */
comment|/* predec of the BIO type */
typedef|typedef
name|struct
name|bio_st
name|BIO_dummy
typedef|;
typedef|typedef
struct|struct
name|crypto_ex_data_st
block|{
name|STACK
modifier|*
name|sk
decl_stmt|;
name|int
name|dummy
decl_stmt|;
comment|/* gcc is screwing up this data structure :-( */
block|}
name|CRYPTO_EX_DATA
typedef|;
comment|/* This stuff is basically class callback functions  * The current classes are SSL_CTX, SSL, SSL_SESION, and a few more */
typedef|typedef
struct|struct
name|crypto_ex_data_func_st
block|{
name|long
name|argl
decl_stmt|;
comment|/* Arbitary long */
name|char
modifier|*
name|argp
decl_stmt|;
comment|/* Arbitary char * */
comment|/* Called when a new object is created */
name|int
function_decl|(
modifier|*
name|new_func
function_decl|)
parameter_list|(
comment|/*char *obj, 			char *item,int index,long argl,char *argp*/
parameter_list|)
function_decl|;
comment|/* Called when this object is free()ed */
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
comment|/*char *obj, 			char *item,int index,long argl,char *argp*/
parameter_list|)
function_decl|;
comment|/* Called when we need to dup this one */
name|int
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
comment|/*char *obj_to,char *obj_from, 			char **new,int index,long argl,char *argp*/
parameter_list|)
function_decl|;
block|}
name|CRYPTO_EX_DATA_FUNCS
typedef|;
comment|/* Per class, we have a STACK of CRYPTO_EX_DATA_FUNCS for each CRYPTO_EX_DATA  * entry.  */
define|#
directive|define
name|CRYPTO_EX_INDEX_BIO
value|0
define|#
directive|define
name|CRYPTO_EX_INDEX_SSL
value|1
define|#
directive|define
name|CRYPTO_EX_INDEX_SSL_CTX
value|2
define|#
directive|define
name|CRYPTO_EX_INDEX_SSL_SESSION
value|3
define|#
directive|define
name|CRYPTO_EX_INDEX_X509_STORE
value|4
define|#
directive|define
name|CRYPTO_EX_INDEX_X509_STORE_CTX
value|5
comment|/* Use this for win32 DLL's */
define|#
directive|define
name|CRYPTO_malloc_init
parameter_list|()
value|CRYPTO_set_mem_functions(\ 	(char *(*)())malloc,\ 	(char *(*)())realloc,\ 	(void (*)())free)
ifdef|#
directive|ifdef
name|CRYPTO_MDEBUG_ALL
ifndef|#
directive|ifndef
name|CRYPTO_MDEBUG_TIME
define|#
directive|define
name|CRYPTO_MDEBUG_TIME
endif|#
directive|endif
ifndef|#
directive|ifndef
name|CRYPTO_MDEBUG_THREAD
define|#
directive|define
name|CRYPTO_MDEBUG_THREAD
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
name|CRYPTO_MDEBUG_TIME
operator|||
name|defined
name|CRYPTO_MDEBUG_THREAD
ifndef|#
directive|ifndef
name|CRYPTO_MDEBUG
comment|/* avoid duplicate #define */
define|#
directive|define
name|CRYPTO_MDEBUG
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CRYPTO_MDEBUG
define|#
directive|define
name|MemCheck_start
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON)
define|#
directive|define
name|MemCheck_stop
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_OFF)
define|#
directive|define
name|MemCheck_on
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ENABLE)
define|#
directive|define
name|MemCheck_off
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_DISABLE)
define|#
directive|define
name|Malloc
parameter_list|(
name|num
parameter_list|)
value|CRYPTO_dbg_malloc((int)num,__FILE__,__LINE__)
define|#
directive|define
name|Realloc
parameter_list|(
name|addr
parameter_list|,
name|num
parameter_list|)
define|\
value|CRYPTO_dbg_realloc((char *)addr,(int)num,__FILE__,__LINE__)
define|#
directive|define
name|Remalloc
parameter_list|(
name|addr
parameter_list|,
name|num
parameter_list|)
define|\
value|CRYPTO_dbg_remalloc((char **)addr,(int)num,__FILE__,__LINE__)
define|#
directive|define
name|FreeFunc
value|CRYPTO_dbg_free
define|#
directive|define
name|Free
parameter_list|(
name|addr
parameter_list|)
value|CRYPTO_dbg_free(addr)
define|#
directive|define
name|Malloc_locked
parameter_list|(
name|num
parameter_list|)
value|CRYPTO_malloc_locked((int)num)
define|#
directive|define
name|Free_locked
parameter_list|(
name|addr
parameter_list|)
value|CRYPTO_free_locked(addr)
else|#
directive|else
define|#
directive|define
name|MemCheck_start
parameter_list|()
define|#
directive|define
name|MemCheck_stop
parameter_list|()
define|#
directive|define
name|MemCheck_on
parameter_list|()
define|#
directive|define
name|MemCheck_off
parameter_list|()
define|#
directive|define
name|Remalloc
value|CRYPTO_remalloc
if|#
directive|if
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|MFUNC
argument_list|)
define|#
directive|define
name|Malloc
value|CRYPTO_malloc
define|#
directive|define
name|Realloc
parameter_list|(
name|a
parameter_list|,
name|n
parameter_list|)
value|CRYPTO_realloc(a,(n))
define|#
directive|define
name|FreeFunc
value|CRYPTO_free
define|#
directive|define
name|Free
parameter_list|(
name|addr
parameter_list|)
value|CRYPTO_free(addr)
define|#
directive|define
name|Malloc_locked
value|CRYPTO_malloc_locked
define|#
directive|define
name|Free_locked
parameter_list|(
name|addr
parameter_list|)
value|CRYPTO_free_locked(addr)
else|#
directive|else
define|#
directive|define
name|Malloc
value|malloc
define|#
directive|define
name|Realloc
value|realloc
define|#
directive|define
name|FreeFunc
value|free
define|#
directive|define
name|Free
parameter_list|(
name|addr
parameter_list|)
value|free(addr)
define|#
directive|define
name|Malloc_locked
value|malloc
define|#
directive|define
name|Free_locked
parameter_list|(
name|addr
parameter_list|)
value|free(addr)
endif|#
directive|endif
comment|/* WIN32 || MFUNC */
endif|#
directive|endif
comment|/* MDEBUG */
comment|/* Case insensiteve linking causes problems.... */
if|#
directive|if
name|defined
argument_list|(
name|WIN16
argument_list|)
operator|||
name|defined
argument_list|(
name|VMS
argument_list|)
define|#
directive|define
name|ERR_load_CRYPTO_strings
value|ERR_load_CRYPTOlib_strings
endif|#
directive|endif
specifier|const
name|char
modifier|*
name|SSLeay_version
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|unsigned
name|long
name|SSLeay
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|CRYPTO_get_ex_new_index
parameter_list|(
name|int
name|idx
parameter_list|,
name|STACK
modifier|*
modifier|*
name|sk
parameter_list|,
name|long
name|argl
parameter_list|,
name|char
modifier|*
name|argp
parameter_list|,
name|int
function_decl|(
modifier|*
name|new_func
function_decl|)
parameter_list|()
parameter_list|,
name|int
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|()
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|int
name|CRYPTO_set_ex_data
parameter_list|(
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|,
name|int
name|idx
parameter_list|,
name|char
modifier|*
name|val
parameter_list|)
function_decl|;
name|char
modifier|*
name|CRYPTO_get_ex_data
parameter_list|(
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|int
name|CRYPTO_dup_ex_data
parameter_list|(
name|STACK
modifier|*
name|meth
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|from
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|to
parameter_list|)
function_decl|;
name|void
name|CRYPTO_free_ex_data
parameter_list|(
name|STACK
modifier|*
name|meth
parameter_list|,
name|char
modifier|*
name|obj
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|)
function_decl|;
name|void
name|CRYPTO_new_ex_data
parameter_list|(
name|STACK
modifier|*
name|meth
parameter_list|,
name|char
modifier|*
name|obj
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|)
function_decl|;
name|int
name|CRYPTO_mem_ctrl
parameter_list|(
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|CRYPTO_get_new_lockid
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|CRYPTO_num_locks
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* return CRYPTO_NUM_LOCKS (shared libs!) */
name|void
name|CRYPTO_lock
parameter_list|(
name|int
name|mode
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
name|CRYPTO_set_locking_callback
parameter_list|(
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|int
name|mode
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
parameter_list|)
function_decl|;
name|void
argument_list|(
argument|*CRYPTO_get_locking_callback(void)
argument_list|)
operator|(
name|int
name|mode
operator|,
name|int
name|type
operator|,
specifier|const
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
expr_stmt|;
name|void
name|CRYPTO_set_add_lock_callback
parameter_list|(
name|int
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|int
modifier|*
name|num
parameter_list|,
name|int
name|mount
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
parameter_list|)
function_decl|;
name|int
argument_list|(
argument|*CRYPTO_get_add_lock_callback(void)
argument_list|)
operator|(
name|int
operator|*
name|num
operator|,
name|int
name|mount
operator|,
name|int
name|type
operator|,
specifier|const
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
expr_stmt|;
name|void
name|CRYPTO_set_id_callback
argument_list|(
name|unsigned
name|long
argument_list|(
operator|*
name|func
argument_list|)
argument_list|(
name|void
argument_list|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
argument_list|(
operator|*
name|CRYPTO_get_id_callback
argument_list|(
name|void
argument_list|)
argument_list|)
argument_list|(
name|void
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|CRYPTO_thread_id
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|CRYPTO_get_lock_name
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|CRYPTO_add_lock
parameter_list|(
name|int
modifier|*
name|pointer
parameter_list|,
name|int
name|amount
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
name|CRYPTO_set_mem_functions
parameter_list|(
name|char
modifier|*
function_decl|(
modifier|*
name|m
function_decl|)
parameter_list|()
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|r
function_decl|)
parameter_list|()
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|void
name|CRYPTO_get_mem_functions
parameter_list|(
name|char
modifier|*
function_decl|(
modifier|*
modifier|*
name|m
function_decl|)
parameter_list|()
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
modifier|*
name|r
function_decl|)
parameter_list|()
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|f
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|void
name|CRYPTO_set_locked_mem_functions
parameter_list|(
name|char
modifier|*
function_decl|(
modifier|*
name|m
function_decl|)
parameter_list|()
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|void
name|CRYPTO_get_locked_mem_functions
parameter_list|(
name|char
modifier|*
function_decl|(
modifier|*
modifier|*
name|m
function_decl|)
parameter_list|()
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|f
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_malloc_locked
parameter_list|(
name|int
name|num
parameter_list|)
function_decl|;
name|void
name|CRYPTO_free_locked
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_malloc
parameter_list|(
name|int
name|num
parameter_list|)
function_decl|;
name|void
name|CRYPTO_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_realloc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_remalloc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_dbg_malloc
parameter_list|(
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_dbg_realloc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
name|CRYPTO_dbg_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_dbg_remalloc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|NO_FP_API
name|void
name|CRYPTO_mem_leaks_fp
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|CRYPTO_mem_leaks
parameter_list|(
name|struct
name|bio_st
modifier|*
name|bio
parameter_list|)
function_decl|;
comment|/* unsigned long order, char *file, int line, int num_bytes, char *addr */
name|void
name|CRYPTO_mem_leaks_cb
parameter_list|(
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|void
name|ERR_load_CRYPTO_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
comment|/* Error codes for the CRYPTO functions. */
comment|/* Function codes. */
define|#
directive|define
name|CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
value|100
define|#
directive|define
name|CRYPTO_F_CRYPTO_GET_NEW_LOCKID
value|101
define|#
directive|define
name|CRYPTO_F_CRYPTO_SET_EX_DATA
value|102
comment|/* Reason codes. */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

