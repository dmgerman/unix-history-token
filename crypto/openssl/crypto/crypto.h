begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/crypto.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_CRYPTO_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_CRYPTO_H
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
end_ifndef

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/stack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/safestack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/opensslv.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CHARSET_EBCDIC
end_ifdef

begin_include
include|#
directive|include
file|<openssl/ebcdic.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Resolve problems on some operating systems with symbol names that clash    one way or another */
end_comment

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Backward compatibility to SSLeay */
comment|/* This is more to be used to check the correct DLL is being used  * in the MS world. */
define|#
directive|define
name|SSLEAY_VERSION_NUMBER
value|OPENSSL_VERSION_NUMBER
define|#
directive|define
name|SSLEAY_VERSION
value|0
comment|/* #define SSLEAY_OPTIONS	1 no longer supported */
define|#
directive|define
name|SSLEAY_CFLAGS
value|2
define|#
directive|define
name|SSLEAY_BUILT_ON
value|3
define|#
directive|define
name|SSLEAY_PLATFORM
value|4
define|#
directive|define
name|SSLEAY_DIR
value|5
comment|/* When changing the CRYPTO_LOCK_* list, be sure to maintin the text lock  * names in cryptlib.c  */
define|#
directive|define
name|CRYPTO_LOCK_ERR
value|1
define|#
directive|define
name|CRYPTO_LOCK_EX_DATA
value|2
define|#
directive|define
name|CRYPTO_LOCK_X509
value|3
define|#
directive|define
name|CRYPTO_LOCK_X509_INFO
value|4
define|#
directive|define
name|CRYPTO_LOCK_X509_PKEY
value|5
define|#
directive|define
name|CRYPTO_LOCK_X509_CRL
value|6
define|#
directive|define
name|CRYPTO_LOCK_X509_REQ
value|7
define|#
directive|define
name|CRYPTO_LOCK_DSA
value|8
define|#
directive|define
name|CRYPTO_LOCK_RSA
value|9
define|#
directive|define
name|CRYPTO_LOCK_EVP_PKEY
value|10
define|#
directive|define
name|CRYPTO_LOCK_X509_STORE
value|11
define|#
directive|define
name|CRYPTO_LOCK_SSL_CTX
value|12
define|#
directive|define
name|CRYPTO_LOCK_SSL_CERT
value|13
define|#
directive|define
name|CRYPTO_LOCK_SSL_SESSION
value|14
define|#
directive|define
name|CRYPTO_LOCK_SSL_SESS_CERT
value|15
define|#
directive|define
name|CRYPTO_LOCK_SSL
value|16
define|#
directive|define
name|CRYPTO_LOCK_SSL_METHOD
value|17
define|#
directive|define
name|CRYPTO_LOCK_RAND
value|18
define|#
directive|define
name|CRYPTO_LOCK_RAND2
value|19
define|#
directive|define
name|CRYPTO_LOCK_MALLOC
value|20
define|#
directive|define
name|CRYPTO_LOCK_BIO
value|21
define|#
directive|define
name|CRYPTO_LOCK_GETHOSTBYNAME
value|22
define|#
directive|define
name|CRYPTO_LOCK_GETSERVBYNAME
value|23
define|#
directive|define
name|CRYPTO_LOCK_READDIR
value|24
define|#
directive|define
name|CRYPTO_LOCK_RSA_BLINDING
value|25
define|#
directive|define
name|CRYPTO_LOCK_DH
value|26
define|#
directive|define
name|CRYPTO_LOCK_MALLOC2
value|27
define|#
directive|define
name|CRYPTO_LOCK_DSO
value|28
define|#
directive|define
name|CRYPTO_LOCK_DYNLOCK
value|29
define|#
directive|define
name|CRYPTO_LOCK_ENGINE
value|30
define|#
directive|define
name|CRYPTO_LOCK_UI
value|31
define|#
directive|define
name|CRYPTO_LOCK_HWCRHK
value|32
comment|/* This is a HACK which will disappear in 0.9.8 */
define|#
directive|define
name|CRYPTO_NUM_LOCKS
value|33
define|#
directive|define
name|CRYPTO_LOCK
value|1
define|#
directive|define
name|CRYPTO_UNLOCK
value|2
define|#
directive|define
name|CRYPTO_READ
value|4
define|#
directive|define
name|CRYPTO_WRITE
value|8
ifndef|#
directive|ifndef
name|OPENSSL_NO_LOCKING
ifndef|#
directive|ifndef
name|CRYPTO_w_lock
define|#
directive|define
name|CRYPTO_w_lock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_w_unlock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_r_lock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_r_unlock
parameter_list|(
name|type
parameter_list|)
define|\
value|CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,__FILE__,__LINE__)
define|#
directive|define
name|CRYPTO_add
parameter_list|(
name|addr
parameter_list|,
name|amount
parameter_list|,
name|type
parameter_list|)
define|\
value|CRYPTO_add_lock(addr,amount,type,__FILE__,__LINE__)
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|CRYPTO_w_lock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_w_unlock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_r_lock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_r_unlock
parameter_list|(
name|a
parameter_list|)
define|#
directive|define
name|CRYPTO_add
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|((*(a))+=(b))
endif|#
directive|endif
comment|/* Some applications as well as some parts of OpenSSL need to allocate    and deallocate locks in a dynamic fashion.  The following typedef    makes this possible in a type-safe manner.  */
comment|/* struct CRYPTO_dynlock_value has to be defined by the application. */
typedef|typedef
struct|struct
block|{
name|int
name|references
decl_stmt|;
name|struct
name|CRYPTO_dynlock_value
modifier|*
name|data
decl_stmt|;
block|}
name|CRYPTO_dynlock
typedef|;
comment|/* The following can be used to detect memory leaks in the SSLeay library.  * It used, it turns on malloc checking */
define|#
directive|define
name|CRYPTO_MEM_CHECK_OFF
value|0x0
comment|/* an enume */
define|#
directive|define
name|CRYPTO_MEM_CHECK_ON
value|0x1
comment|/* a bit */
define|#
directive|define
name|CRYPTO_MEM_CHECK_ENABLE
value|0x2
comment|/* a bit */
define|#
directive|define
name|CRYPTO_MEM_CHECK_DISABLE
value|0x3
comment|/* an enume */
comment|/* The following are bit values to turn on or off options connected to the  * malloc checking functionality */
comment|/* Adds time to the memory checking information */
define|#
directive|define
name|V_CRYPTO_MDEBUG_TIME
value|0x1
comment|/* a bit */
comment|/* Adds thread number to the memory checking information */
define|#
directive|define
name|V_CRYPTO_MDEBUG_THREAD
value|0x2
comment|/* a bit */
define|#
directive|define
name|V_CRYPTO_MDEBUG_ALL
value|(V_CRYPTO_MDEBUG_TIME | V_CRYPTO_MDEBUG_THREAD)
comment|/* predec of the BIO type */
typedef|typedef
name|struct
name|bio_st
name|BIO_dummy
typedef|;
typedef|typedef
struct|struct
name|crypto_ex_data_st
block|{
name|STACK
modifier|*
name|sk
decl_stmt|;
name|int
name|dummy
decl_stmt|;
comment|/* gcc is screwing up this data structure :-( */
block|}
name|CRYPTO_EX_DATA
typedef|;
comment|/* Called when a new object is created */
typedef|typedef
name|int
name|CRYPTO_EX_new
parameter_list|(
name|void
modifier|*
name|parent
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|,
name|int
name|idx
parameter_list|,
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|)
function_decl|;
comment|/* Called when an object is free()ed */
typedef|typedef
name|void
name|CRYPTO_EX_free
parameter_list|(
name|void
modifier|*
name|parent
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|,
name|int
name|idx
parameter_list|,
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|)
function_decl|;
comment|/* Called when we need to dup an object */
typedef|typedef
name|int
name|CRYPTO_EX_dup
parameter_list|(
name|CRYPTO_EX_DATA
modifier|*
name|to
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|from
parameter_list|,
name|void
modifier|*
name|from_d
parameter_list|,
name|int
name|idx
parameter_list|,
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|)
function_decl|;
comment|/* This stuff is basically class callback functions  * The current classes are SSL_CTX, SSL, SSL_SESSION, and a few more */
typedef|typedef
struct|struct
name|crypto_ex_data_func_st
block|{
name|long
name|argl
decl_stmt|;
comment|/* Arbitary long */
name|void
modifier|*
name|argp
decl_stmt|;
comment|/* Arbitary void * */
name|CRYPTO_EX_new
modifier|*
name|new_func
decl_stmt|;
name|CRYPTO_EX_free
modifier|*
name|free_func
decl_stmt|;
name|CRYPTO_EX_dup
modifier|*
name|dup_func
decl_stmt|;
block|}
name|CRYPTO_EX_DATA_FUNCS
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|CRYPTO_EX_DATA_FUNCS
argument_list|)
comment|/* Per class, we have a STACK of CRYPTO_EX_DATA_FUNCS for each CRYPTO_EX_DATA  * entry.  */
define|#
directive|define
name|CRYPTO_EX_INDEX_BIO
value|0
define|#
directive|define
name|CRYPTO_EX_INDEX_SSL
value|1
define|#
directive|define
name|CRYPTO_EX_INDEX_SSL_CTX
value|2
define|#
directive|define
name|CRYPTO_EX_INDEX_SSL_SESSION
value|3
define|#
directive|define
name|CRYPTO_EX_INDEX_X509_STORE
value|4
define|#
directive|define
name|CRYPTO_EX_INDEX_X509_STORE_CTX
value|5
define|#
directive|define
name|CRYPTO_EX_INDEX_RSA
value|6
define|#
directive|define
name|CRYPTO_EX_INDEX_DSA
value|7
define|#
directive|define
name|CRYPTO_EX_INDEX_DH
value|8
define|#
directive|define
name|CRYPTO_EX_INDEX_ENGINE
value|9
define|#
directive|define
name|CRYPTO_EX_INDEX_X509
value|10
define|#
directive|define
name|CRYPTO_EX_INDEX_UI
value|11
comment|/* Dynamically assigned indexes start from this value (don't use directly, use  * via CRYPTO_ex_data_new_class). */
define|#
directive|define
name|CRYPTO_EX_INDEX_USER
value|100
comment|/* This is the default callbacks, but we can have others as well:  * this is needed in Win32 where the application malloc and the  * library malloc may not be the same.  */
define|#
directive|define
name|CRYPTO_malloc_init
parameter_list|()
value|CRYPTO_set_mem_functions(\ 	malloc, realloc, free)
if|#
directive|if
name|defined
name|CRYPTO_MDEBUG_ALL
operator|||
name|defined
name|CRYPTO_MDEBUG_TIME
operator|||
name|defined
name|CRYPTO_MDEBUG_THREAD
ifndef|#
directive|ifndef
name|CRYPTO_MDEBUG
comment|/* avoid duplicate #define */
define|#
directive|define
name|CRYPTO_MDEBUG
endif|#
directive|endif
endif|#
directive|endif
comment|/* Set standard debugging functions (not done by default  * unless CRYPTO_MDEBUG is defined) */
define|#
directive|define
name|CRYPTO_malloc_debug_init
parameter_list|()
value|do {\ 	CRYPTO_set_mem_debug_functions(\ 		CRYPTO_dbg_malloc,\ 		CRYPTO_dbg_realloc,\ 		CRYPTO_dbg_free,\ 		CRYPTO_dbg_set_options,\ 		CRYPTO_dbg_get_options);\ 	} while(0)
name|int
name|CRYPTO_mem_ctrl
parameter_list|(
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|CRYPTO_is_mem_check_on
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* for applications */
define|#
directive|define
name|MemCheck_start
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON)
define|#
directive|define
name|MemCheck_stop
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_OFF)
comment|/* for library-internal use */
define|#
directive|define
name|MemCheck_on
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ENABLE)
define|#
directive|define
name|MemCheck_off
parameter_list|()
value|CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_DISABLE)
define|#
directive|define
name|is_MemCheck_on
parameter_list|()
value|CRYPTO_is_mem_check_on()
define|#
directive|define
name|OPENSSL_malloc
parameter_list|(
name|num
parameter_list|)
value|CRYPTO_malloc((int)num,__FILE__,__LINE__)
define|#
directive|define
name|OPENSSL_realloc
parameter_list|(
name|addr
parameter_list|,
name|num
parameter_list|)
define|\
value|CRYPTO_realloc((char *)addr,(int)num,__FILE__,__LINE__)
define|#
directive|define
name|OPENSSL_realloc_clean
parameter_list|(
name|addr
parameter_list|,
name|old_num
parameter_list|,
name|num
parameter_list|)
define|\
value|CRYPTO_realloc_clean(addr,old_num,num,__FILE__,__LINE__)
define|#
directive|define
name|OPENSSL_remalloc
parameter_list|(
name|addr
parameter_list|,
name|num
parameter_list|)
define|\
value|CRYPTO_remalloc((char **)addr,(int)num,__FILE__,__LINE__)
define|#
directive|define
name|OPENSSL_freeFunc
value|CRYPTO_free
define|#
directive|define
name|OPENSSL_free
parameter_list|(
name|addr
parameter_list|)
value|CRYPTO_free(addr)
define|#
directive|define
name|OPENSSL_malloc_locked
parameter_list|(
name|num
parameter_list|)
define|\
value|CRYPTO_malloc_locked((int)num,__FILE__,__LINE__)
define|#
directive|define
name|OPENSSL_free_locked
parameter_list|(
name|addr
parameter_list|)
value|CRYPTO_free_locked(addr)
specifier|const
name|char
modifier|*
name|SSLeay_version
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|unsigned
name|long
name|SSLeay
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|OPENSSL_issetugid
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* An opaque type representing an implementation of "ex_data" support */
typedef|typedef
name|struct
name|st_CRYPTO_EX_DATA_IMPL
name|CRYPTO_EX_DATA_IMPL
typedef|;
comment|/* Return an opaque pointer to the current "ex_data" implementation */
specifier|const
name|CRYPTO_EX_DATA_IMPL
modifier|*
name|CRYPTO_get_ex_data_implementation
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Sets the "ex_data" implementation to be used (if it's not too late) */
name|int
name|CRYPTO_set_ex_data_implementation
parameter_list|(
specifier|const
name|CRYPTO_EX_DATA_IMPL
modifier|*
name|i
parameter_list|)
function_decl|;
comment|/* Get a new "ex_data" class, and return the corresponding "class_index" */
name|int
name|CRYPTO_ex_data_new_class
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Within a given class, get/register a new index */
name|int
name|CRYPTO_get_ex_new_index
parameter_list|(
name|int
name|class_index
parameter_list|,
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
comment|/* Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a given  * class (invokes whatever per-class callbacks are applicable) */
name|int
name|CRYPTO_new_ex_data
parameter_list|(
name|int
name|class_index
parameter_list|,
name|void
modifier|*
name|obj
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|)
function_decl|;
name|int
name|CRYPTO_dup_ex_data
parameter_list|(
name|int
name|class_index
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|to
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|from
parameter_list|)
function_decl|;
name|void
name|CRYPTO_free_ex_data
parameter_list|(
name|int
name|class_index
parameter_list|,
name|void
modifier|*
name|obj
parameter_list|,
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|)
function_decl|;
comment|/* Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular index  * (relative to the class type involved) */
name|int
name|CRYPTO_set_ex_data
parameter_list|(
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_get_ex_data
parameter_list|(
specifier|const
name|CRYPTO_EX_DATA
modifier|*
name|ad
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
comment|/* This function cleans up all "ex_data" state. It mustn't be called under  * potential race-conditions. */
name|void
name|CRYPTO_cleanup_all_ex_data
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|CRYPTO_get_new_lockid
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|CRYPTO_num_locks
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* return CRYPTO_NUM_LOCKS (shared libs!) */
name|void
name|CRYPTO_lock
parameter_list|(
name|int
name|mode
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
name|CRYPTO_set_locking_callback
parameter_list|(
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|int
name|mode
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
parameter_list|)
function_decl|;
name|void
argument_list|(
argument|*CRYPTO_get_locking_callback(void)
argument_list|)
operator|(
name|int
name|mode
operator|,
name|int
name|type
operator|,
specifier|const
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
expr_stmt|;
name|void
name|CRYPTO_set_add_lock_callback
parameter_list|(
name|int
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|int
modifier|*
name|num
parameter_list|,
name|int
name|mount
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
parameter_list|)
function_decl|;
name|int
argument_list|(
argument|*CRYPTO_get_add_lock_callback(void)
argument_list|)
operator|(
name|int
operator|*
name|num
operator|,
name|int
name|mount
operator|,
name|int
name|type
operator|,
specifier|const
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
expr_stmt|;
name|void
name|CRYPTO_set_id_callback
argument_list|(
name|unsigned
name|long
argument_list|(
operator|*
name|func
argument_list|)
argument_list|(
name|void
argument_list|)
argument_list|)
decl_stmt|;
name|unsigned
name|long
argument_list|(
operator|*
name|CRYPTO_get_id_callback
argument_list|(
name|void
argument_list|)
argument_list|)
argument_list|(
name|void
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|CRYPTO_thread_id
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|CRYPTO_get_lock_name
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|CRYPTO_add_lock
parameter_list|(
name|int
modifier|*
name|pointer
parameter_list|,
name|int
name|amount
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|int
name|CRYPTO_get_new_dynlockid
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|CRYPTO_destroy_dynlockid
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|struct
name|CRYPTO_dynlock_value
modifier|*
name|CRYPTO_get_dynlock_value
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|void
name|CRYPTO_set_dynlock_create_callback
argument_list|(
expr|struct
name|CRYPTO_dynlock_value
operator|*
operator|(
operator|*
name|dyn_create_function
operator|)
operator|(
specifier|const
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
argument_list|)
decl_stmt|;
name|void
name|CRYPTO_set_dynlock_lock_callback
parameter_list|(
name|void
function_decl|(
modifier|*
name|dyn_lock_function
function_decl|)
parameter_list|(
name|int
name|mode
parameter_list|,
name|struct
name|CRYPTO_dynlock_value
modifier|*
name|l
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|CRYPTO_set_dynlock_destroy_callback
parameter_list|(
name|void
function_decl|(
modifier|*
name|dyn_destroy_function
function_decl|)
parameter_list|(
name|struct
name|CRYPTO_dynlock_value
modifier|*
name|l
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
parameter_list|)
function_decl|;
name|struct
name|CRYPTO_dynlock_value
modifier|*
argument_list|(
operator|*
name|CRYPTO_get_dynlock_create_callback
argument_list|(
name|void
argument_list|)
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|file
argument_list|,
name|int
name|line
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*CRYPTO_get_dynlock_lock_callback(void)
argument_list|)
operator|(
name|int
name|mode
operator|,
expr|struct
name|CRYPTO_dynlock_value
operator|*
name|l
operator|,
specifier|const
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
expr_stmt|;
name|void
argument_list|(
argument|*CRYPTO_get_dynlock_destroy_callback(void)
argument_list|)
operator|(
expr|struct
name|CRYPTO_dynlock_value
operator|*
name|l
operator|,
specifier|const
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
expr_stmt|;
comment|/* CRYPTO_set_mem_functions includes CRYPTO_set_locked_mem_functions --  * call the latter last if you need different functions */
name|int
name|CRYPTO_set_mem_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|r
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|CRYPTO_set_locked_mem_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|CRYPTO_set_mem_ex_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|r
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|CRYPTO_set_locked_mem_ex_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|CRYPTO_set_mem_debug_functions
parameter_list|(
name|void
function_decl|(
modifier|*
name|m
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|r
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|so
function_decl|)
parameter_list|(
name|long
parameter_list|)
parameter_list|,
name|long
function_decl|(
modifier|*
name|go
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|CRYPTO_get_mem_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
modifier|*
name|r
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|CRYPTO_get_locked_mem_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|CRYPTO_get_mem_ex_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
modifier|*
name|r
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|CRYPTO_get_locked_mem_ex_functions
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
modifier|*
name|m
function_decl|)
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|CRYPTO_get_mem_debug_functions
parameter_list|(
name|void
function_decl|(
modifier|*
modifier|*
name|m
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|r
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|so
function_decl|)
parameter_list|(
name|long
parameter_list|)
parameter_list|,
name|long
function_decl|(
modifier|*
modifier|*
name|go
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_malloc_locked
parameter_list|(
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
name|CRYPTO_free_locked
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_malloc
parameter_list|(
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
name|CRYPTO_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_realloc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_realloc_clean
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|old_num
parameter_list|,
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
modifier|*
name|CRYPTO_remalloc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|void
name|OPENSSL_cleanse
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|void
name|CRYPTO_set_mem_debug_options
parameter_list|(
name|long
name|bits
parameter_list|)
function_decl|;
name|long
name|CRYPTO_get_mem_debug_options
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|CRYPTO_push_info
parameter_list|(
name|info
parameter_list|)
define|\
value|CRYPTO_push_info_(info, __FILE__, __LINE__);
name|int
name|CRYPTO_push_info_
parameter_list|(
specifier|const
name|char
modifier|*
name|info
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|int
name|CRYPTO_pop_info
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|CRYPTO_remove_all_info
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Default debugging functions (enabled by CRYPTO_malloc_debug_init() macro;  * used as default in CRYPTO_MDEBUG compilations): */
comment|/* The last argument has the following significance:  *  * 0:	called before the actual memory allocation has taken place  * 1:	called after the actual memory allocation has taken place  */
name|void
name|CRYPTO_dbg_malloc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|before_p
parameter_list|)
function_decl|;
name|void
name|CRYPTO_dbg_realloc
parameter_list|(
name|void
modifier|*
name|addr1
parameter_list|,
name|void
modifier|*
name|addr2
parameter_list|,
name|int
name|num
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|before_p
parameter_list|)
function_decl|;
name|void
name|CRYPTO_dbg_free
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|before_p
parameter_list|)
function_decl|;
comment|/* Tell the debugging code about options.  By default, the following values  * apply:  *  * 0:                           Clear all options.  * V_CRYPTO_MDEBUG_TIME (1):    Set the "Show Time" option.  * V_CRYPTO_MDEBUG_THREAD (2):  Set the "Show Thread Number" option.  * V_CRYPTO_MDEBUG_ALL (3):     1 + 2  */
name|void
name|CRYPTO_dbg_set_options
parameter_list|(
name|long
name|bits
parameter_list|)
function_decl|;
name|long
name|CRYPTO_dbg_get_options
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|void
name|CRYPTO_mem_leaks_fp
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|CRYPTO_mem_leaks
parameter_list|(
name|struct
name|bio_st
modifier|*
name|bio
parameter_list|)
function_decl|;
comment|/* unsigned long order, char *file, int line, int num_bytes, char *addr */
typedef|typedef
name|void
modifier|*
name|CRYPTO_MEM_LEAK_CB
parameter_list|(
name|unsigned
name|long
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|CRYPTO_mem_leaks_cb
parameter_list|(
name|CRYPTO_MEM_LEAK_CB
modifier|*
name|cb
parameter_list|)
function_decl|;
comment|/* die if we have to */
name|void
name|OpenSSLDie
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|,
specifier|const
name|char
modifier|*
name|assertion
parameter_list|)
function_decl|;
define|#
directive|define
name|OPENSSL_assert
parameter_list|(
name|e
parameter_list|)
value|((e) ? (void)0 : OpenSSLDie(__FILE__, __LINE__, #e))
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_CRYPTO_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the CRYPTO functions. */
comment|/* Function codes. */
define|#
directive|define
name|CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
value|100
define|#
directive|define
name|CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
value|103
define|#
directive|define
name|CRYPTO_F_CRYPTO_GET_NEW_LOCKID
value|101
define|#
directive|define
name|CRYPTO_F_CRYPTO_SET_EX_DATA
value|102
define|#
directive|define
name|CRYPTO_F_DEF_ADD_INDEX
value|104
define|#
directive|define
name|CRYPTO_F_DEF_GET_CLASS
value|105
define|#
directive|define
name|CRYPTO_F_INT_DUP_EX_DATA
value|106
define|#
directive|define
name|CRYPTO_F_INT_FREE_EX_DATA
value|107
define|#
directive|define
name|CRYPTO_F_INT_NEW_EX_DATA
value|108
comment|/* Reason codes. */
define|#
directive|define
name|CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
value|100
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

