begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/dsa/dsa.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *  * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *  * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from  *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_comment
comment|/*  * The DSS routines are based on patches supplied by  * Steven Schoch<schoch@sheba.arc.nasa.gov>.  He basically did the  * work and I have just tweaked them a little to fit into my  * stylistic vision for SSLeay :-) */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_DSA_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_DSA_H
end_define

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_NO_DSA
end_ifdef

begin_error
error|#
directive|error
error|DSA is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/crypto.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
end_ifndef

begin_include
include|#
directive|include
file|<openssl/dh.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_DSA_MAX_MODULUS_BITS
end_ifndef

begin_define
define|#
directive|define
name|OPENSSL_DSA_MAX_MODULUS_BITS
value|10000
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|DSA_FLAG_CACHE_MONT_P
value|0x01
end_define

begin_comment
comment|/*  * new with 0.9.7h; the built-in DSA implementation now uses constant time  * modular exponentiation for secret exponents by default. This flag causes  * the faster variable sliding window method to be used for all exponents.  */
end_comment

begin_define
define|#
directive|define
name|DSA_FLAG_NO_EXP_CONSTTIME
value|0x02
end_define

begin_comment
comment|/*  * If this flag is set the DSA method is FIPS compliant and can be used in  * FIPS mode. This is set in the validated module method. If an application  * sets this flag in its own methods it is its reposibility to ensure the  * result is compliant.  */
end_comment

begin_define
define|#
directive|define
name|DSA_FLAG_FIPS_METHOD
value|0x0400
end_define

begin_comment
comment|/*  * If this flag is set the operations normally disabled in FIPS mode are  * permitted it is then the applications responsibility to ensure that the  * usage is compliant.  */
end_comment

begin_define
define|#
directive|define
name|DSA_FLAG_NON_FIPS_ALLOW
value|0x0400
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Already defined in ossl_typ.h */
comment|/* typedef struct dsa_st DSA; */
comment|/* typedef struct dsa_method DSA_METHOD; */
typedef|typedef
struct|struct
name|DSA_SIG_st
block|{
name|BIGNUM
modifier|*
name|r
decl_stmt|;
name|BIGNUM
modifier|*
name|s
decl_stmt|;
block|}
name|DSA_SIG
typedef|;
struct|struct
name|dsa_method
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|DSA_SIG
modifier|*
function_decl|(
modifier|*
name|dsa_do_sign
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dlen
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dsa_sign_setup
function_decl|)
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|,
name|BN_CTX
modifier|*
name|ctx_in
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|kinvp
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|rp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dsa_do_verify
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgst_len
parameter_list|,
name|DSA_SIG
modifier|*
name|sig
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dsa_mod_exp
function_decl|)
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|,
name|BIGNUM
modifier|*
name|rr
parameter_list|,
name|BIGNUM
modifier|*
name|a1
parameter_list|,
name|BIGNUM
modifier|*
name|p1
parameter_list|,
name|BIGNUM
modifier|*
name|a2
parameter_list|,
name|BIGNUM
modifier|*
name|p2
parameter_list|,
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|in_mont
parameter_list|)
function_decl|;
comment|/* Can be null */
name|int
function_decl|(
modifier|*
name|bn_mod_exp
function_decl|)
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|m
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|BN_MONT_CTX
modifier|*
name|m_ctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|finish
function_decl|)
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|flags
decl_stmt|;
name|char
modifier|*
name|app_data
decl_stmt|;
comment|/* If this is non-NULL, it is used to generate DSA parameters */
name|int
function_decl|(
modifier|*
name|dsa_paramgen
function_decl|)
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|,
name|int
name|bits
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|seed
parameter_list|,
name|int
name|seed_len
parameter_list|,
name|int
modifier|*
name|counter_ret
parameter_list|,
name|unsigned
name|long
modifier|*
name|h_ret
parameter_list|,
name|BN_GENCB
modifier|*
name|cb
parameter_list|)
function_decl|;
comment|/* If this is non-NULL, it is used to generate DSA keys */
name|int
function_decl|(
modifier|*
name|dsa_keygen
function_decl|)
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
block|}
struct|;
struct|struct
name|dsa_st
block|{
comment|/*      * This first variable is used to pick up errors where a DSA is passed      * instead of of a EVP_PKEY      */
name|int
name|pad
decl_stmt|;
name|long
name|version
decl_stmt|;
name|int
name|write_params
decl_stmt|;
name|BIGNUM
modifier|*
name|p
decl_stmt|;
name|BIGNUM
modifier|*
name|q
decl_stmt|;
comment|/* == 20 */
name|BIGNUM
modifier|*
name|g
decl_stmt|;
name|BIGNUM
modifier|*
name|pub_key
decl_stmt|;
comment|/* y public key */
name|BIGNUM
modifier|*
name|priv_key
decl_stmt|;
comment|/* x private key */
name|BIGNUM
modifier|*
name|kinv
decl_stmt|;
comment|/* Signing pre-calc */
name|BIGNUM
modifier|*
name|r
decl_stmt|;
comment|/* Signing pre-calc */
name|int
name|flags
decl_stmt|;
comment|/* Normally used to cache montgomery values */
name|BN_MONT_CTX
modifier|*
name|method_mont_p
decl_stmt|;
name|int
name|references
decl_stmt|;
name|CRYPTO_EX_DATA
name|ex_data
decl_stmt|;
specifier|const
name|DSA_METHOD
modifier|*
name|meth
decl_stmt|;
comment|/* functional reference if 'meth' is ENGINE-provided */
name|ENGINE
modifier|*
name|engine
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|d2i_DSAparams_fp
parameter_list|(
name|fp
parameter_list|,
name|x
parameter_list|)
value|(DSA *)ASN1_d2i_fp((char *(*)())DSA_new, \                 (char *(*)())d2i_DSAparams,(fp),(unsigned char **)(x))
define|#
directive|define
name|i2d_DSAparams_fp
parameter_list|(
name|fp
parameter_list|,
name|x
parameter_list|)
value|ASN1_i2d_fp(i2d_DSAparams,(fp), \                 (unsigned char *)(x))
define|#
directive|define
name|d2i_DSAparams_bio
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|)
value|ASN1_d2i_bio_of(DSA,DSA_new,d2i_DSAparams,bp,x)
define|#
directive|define
name|i2d_DSAparams_bio
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|)
value|ASN1_i2d_bio_of_const(DSA,i2d_DSAparams,bp,x)
name|DSA
modifier|*
name|DSAparams_dup
parameter_list|(
name|DSA
modifier|*
name|x
parameter_list|)
function_decl|;
name|DSA_SIG
modifier|*
name|DSA_SIG_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|DSA_SIG_free
parameter_list|(
name|DSA_SIG
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_DSA_SIG
parameter_list|(
specifier|const
name|DSA_SIG
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|DSA_SIG
modifier|*
name|d2i_DSA_SIG
parameter_list|(
name|DSA_SIG
modifier|*
modifier|*
name|v
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|DSA_SIG
modifier|*
name|DSA_do_sign
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dlen
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|DSA_do_verify
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgst_len
parameter_list|,
name|DSA_SIG
modifier|*
name|sig
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
specifier|const
name|DSA_METHOD
modifier|*
name|DSA_OpenSSL
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|DSA_set_default_method
parameter_list|(
specifier|const
name|DSA_METHOD
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|DSA_METHOD
modifier|*
name|DSA_get_default_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|DSA_set_method
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|,
specifier|const
name|DSA_METHOD
modifier|*
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|DSA_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|DSA_new_method
parameter_list|(
name|ENGINE
modifier|*
name|engine
parameter_list|)
function_decl|;
name|void
name|DSA_free
parameter_list|(
name|DSA
modifier|*
name|r
parameter_list|)
function_decl|;
comment|/* "up" the DSA object's reference count */
name|int
name|DSA_up_ref
parameter_list|(
name|DSA
modifier|*
name|r
parameter_list|)
function_decl|;
name|int
name|DSA_size
parameter_list|(
specifier|const
name|DSA
modifier|*
parameter_list|)
function_decl|;
comment|/* next 4 return -1 on error */
name|int
name|DSA_sign_setup
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|,
name|BN_CTX
modifier|*
name|ctx_in
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|kinvp
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|rp
parameter_list|)
function_decl|;
name|int
name|DSA_sign
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dlen
parameter_list|,
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|DSA_verify
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgst_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sigbuf
parameter_list|,
name|int
name|siglen
parameter_list|,
name|DSA
modifier|*
name|dsa
parameter_list|)
function_decl|;
name|int
name|DSA_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|DSA_set_ex_data
parameter_list|(
name|DSA
modifier|*
name|d
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|DSA_get_ex_data
parameter_list|(
name|DSA
modifier|*
name|d
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|d2i_DSAPublicKey
parameter_list|(
name|DSA
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|d2i_DSAPrivateKey
parameter_list|(
name|DSA
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|DSA
modifier|*
name|d2i_DSAparams
parameter_list|(
name|DSA
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
comment|/* Deprecated version */
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
name|DSA
modifier|*
name|DSA_generate_parameters
parameter_list|(
name|int
name|bits
parameter_list|,
name|unsigned
name|char
modifier|*
name|seed
parameter_list|,
name|int
name|seed_len
parameter_list|,
name|int
modifier|*
name|counter_ret
parameter_list|,
name|unsigned
name|long
modifier|*
name|h_ret
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* !defined(OPENSSL_NO_DEPRECATED) */
comment|/* New version */
name|int
name|DSA_generate_parameters_ex
parameter_list|(
name|DSA
modifier|*
name|dsa
parameter_list|,
name|int
name|bits
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|seed
parameter_list|,
name|int
name|seed_len
parameter_list|,
name|int
modifier|*
name|counter_ret
parameter_list|,
name|unsigned
name|long
modifier|*
name|h_ret
parameter_list|,
name|BN_GENCB
modifier|*
name|cb
parameter_list|)
function_decl|;
name|int
name|DSA_generate_key
parameter_list|(
name|DSA
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_DSAPublicKey
parameter_list|(
specifier|const
name|DSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|int
name|i2d_DSAPrivateKey
parameter_list|(
specifier|const
name|DSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|int
name|i2d_DSAparams
parameter_list|(
specifier|const
name|DSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|DSAparams_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|DSA
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|DSA_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|DSA
modifier|*
name|x
parameter_list|,
name|int
name|off
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|int
name|DSAparams_print_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|DSA
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|DSA_print_fp
parameter_list|(
name|FILE
modifier|*
name|bp
parameter_list|,
specifier|const
name|DSA
modifier|*
name|x
parameter_list|,
name|int
name|off
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|DSS_prime_checks
value|50
comment|/*  * Primality test according to FIPS PUB 186[-1], Appendix 2.1: 50 rounds of  * Rabin-Miller  */
define|#
directive|define
name|DSA_is_prime
parameter_list|(
name|n
parameter_list|,
name|callback
parameter_list|,
name|cb_arg
parameter_list|)
define|\
value|BN_is_prime(n, DSS_prime_checks, callback, NULL, cb_arg)
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
comment|/*  * Convert DSA structure (key or just parameters) into DH structure (be  * careful to avoid small subgroup attacks when using this!)  */
name|DH
modifier|*
name|DSA_dup_DH
parameter_list|(
specifier|const
name|DSA
modifier|*
name|r
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|EVP_PKEY_CTX_set_dsa_paramgen_bits
parameter_list|(
name|ctx
parameter_list|,
name|nbits
parameter_list|)
define|\
value|EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN, \                                 EVP_PKEY_CTRL_DSA_PARAMGEN_BITS, nbits, NULL)
define|#
directive|define
name|EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
value|(EVP_PKEY_ALG_CTRL + 1)
define|#
directive|define
name|EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
value|(EVP_PKEY_ALG_CTRL + 2)
define|#
directive|define
name|EVP_PKEY_CTRL_DSA_PARAMGEN_MD
value|(EVP_PKEY_ALG_CTRL + 3)
comment|/* BEGIN ERROR CODES */
comment|/*  * The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_DSA_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the DSA functions. */
comment|/* Function codes. */
define|#
directive|define
name|DSA_F_D2I_DSA_SIG
value|110
define|#
directive|define
name|DSA_F_DO_DSA_PRINT
value|104
define|#
directive|define
name|DSA_F_DSAPARAMS_PRINT
value|100
define|#
directive|define
name|DSA_F_DSAPARAMS_PRINT_FP
value|101
define|#
directive|define
name|DSA_F_DSA_BUILTIN_PARAMGEN2
value|126
define|#
directive|define
name|DSA_F_DSA_DO_SIGN
value|112
define|#
directive|define
name|DSA_F_DSA_DO_VERIFY
value|113
define|#
directive|define
name|DSA_F_DSA_GENERATE_KEY
value|124
define|#
directive|define
name|DSA_F_DSA_GENERATE_PARAMETERS_EX
value|123
define|#
directive|define
name|DSA_F_DSA_NEW_METHOD
value|103
define|#
directive|define
name|DSA_F_DSA_PARAM_DECODE
value|119
define|#
directive|define
name|DSA_F_DSA_PRINT_FP
value|105
define|#
directive|define
name|DSA_F_DSA_PRIV_DECODE
value|115
define|#
directive|define
name|DSA_F_DSA_PRIV_ENCODE
value|116
define|#
directive|define
name|DSA_F_DSA_PUB_DECODE
value|117
define|#
directive|define
name|DSA_F_DSA_PUB_ENCODE
value|118
define|#
directive|define
name|DSA_F_DSA_SIGN
value|106
define|#
directive|define
name|DSA_F_DSA_SIGN_SETUP
value|107
define|#
directive|define
name|DSA_F_DSA_SIG_NEW
value|109
define|#
directive|define
name|DSA_F_DSA_SIG_PRINT
value|125
define|#
directive|define
name|DSA_F_DSA_VERIFY
value|108
define|#
directive|define
name|DSA_F_I2D_DSA_SIG
value|111
define|#
directive|define
name|DSA_F_OLD_DSA_PRIV_DECODE
value|122
define|#
directive|define
name|DSA_F_PKEY_DSA_CTRL
value|120
define|#
directive|define
name|DSA_F_PKEY_DSA_KEYGEN
value|121
define|#
directive|define
name|DSA_F_SIG_CB
value|114
comment|/* Reason codes. */
define|#
directive|define
name|DSA_R_BAD_Q_VALUE
value|102
define|#
directive|define
name|DSA_R_BN_DECODE_ERROR
value|108
define|#
directive|define
name|DSA_R_BN_ERROR
value|109
define|#
directive|define
name|DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
value|100
define|#
directive|define
name|DSA_R_DECODE_ERROR
value|104
define|#
directive|define
name|DSA_R_INVALID_DIGEST_TYPE
value|106
define|#
directive|define
name|DSA_R_INVALID_PARAMETERS
value|112
define|#
directive|define
name|DSA_R_MISSING_PARAMETERS
value|101
define|#
directive|define
name|DSA_R_MODULUS_TOO_LARGE
value|103
define|#
directive|define
name|DSA_R_NEED_NEW_SETUP_VALUES
value|110
define|#
directive|define
name|DSA_R_NON_FIPS_DSA_METHOD
value|111
define|#
directive|define
name|DSA_R_NO_PARAMETERS_SET
value|107
define|#
directive|define
name|DSA_R_PARAMETER_ENCODING_ERROR
value|105
define|#
directive|define
name|DSA_R_Q_NOT_PRIME
value|113
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

