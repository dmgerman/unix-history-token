begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/ec/ec_lcl.h */
end_comment

begin_comment
comment|/*  * Originally written by Bodo Moeller for the OpenSSL project.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1998-2010 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.  *  * Portions of the attached software ("Contribution") are developed by  * SUN MICROSYSTEMS, INC., and are contributed to the OpenSSL project.  *  * The Contribution is licensed pursuant to the OpenSSL open source  * license provided above.  *  * The elliptic curve binary polynomial software is originally written by  * Sheueling Chang Shantz and Douglas Stebila of Sun Microsystems Laboratories.  *  */
end_comment

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<openssl/obj_mac.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ec.h>
end_include

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__SUNPRO_C
argument_list|)
end_if

begin_if
if|#
directive|if
name|__SUNPRO_C
operator|>=
literal|0x520
end_if

begin_pragma
pragma|#
directive|pragma
name|error_messages
name|(
name|off
name|,
name|E_ARRAY_OF_INCOMPLETE_NONAME
name|,
name|E_ARRAY_OF_INCOMPLETE
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Use default functions for poin2oct, oct2point and compressed coordinates */
end_comment

begin_define
define|#
directive|define
name|EC_FLAGS_DEFAULT_OCT
value|0x1
end_define

begin_comment
comment|/*  * Structure details are not part of the exported interface, so all this may  * change in future versions.  */
end_comment

begin_struct
struct|struct
name|ec_method_st
block|{
comment|/* Various method flags */
name|int
name|flags
decl_stmt|;
comment|/* used by EC_METHOD_get_field_type: */
name|int
name|field_type
decl_stmt|;
comment|/* a NID */
comment|/*      * used by EC_GROUP_new, EC_GROUP_free, EC_GROUP_clear_free,      * EC_GROUP_copy:      */
name|int
function_decl|(
modifier|*
name|group_init
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|group_finish
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|group_clear_finish
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|group_copy
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_GROUP_set_curve_GFp, EC_GROUP_get_curve_GFp, */
comment|/* EC_GROUP_set_curve_GF2m, and EC_GROUP_get_curve_GF2m: */
name|int
function_decl|(
modifier|*
name|group_set_curve
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|group_get_curve
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_GROUP_get_degree: */
name|int
function_decl|(
modifier|*
name|group_get_degree
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_GROUP_check: */
name|int
function_decl|(
modifier|*
name|group_check_discriminant
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/*      * used by EC_POINT_new, EC_POINT_free, EC_POINT_clear_free,      * EC_POINT_copy:      */
name|int
function_decl|(
modifier|*
name|point_init
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|point_finish
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|point_clear_finish
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_copy
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
comment|/*-      * used by EC_POINT_set_to_infinity,      * EC_POINT_set_Jprojective_coordinates_GFp,      * EC_POINT_get_Jprojective_coordinates_GFp,      * EC_POINT_set_affine_coordinates_GFp,     ..._GF2m,      * EC_POINT_get_affine_coordinates_GFp,     ..._GF2m,      * EC_POINT_set_compressed_coordinates_GFp, ..._GF2m:      */
name|int
function_decl|(
modifier|*
name|point_set_to_infinity
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_set_Jprojective_coordinates_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_get_Jprojective_coordinates_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_set_affine_coordinates
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_get_affine_coordinates
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_set_compressed_coordinates
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_point2oct, EC_POINT_oct2point: */
name|size_t
function_decl|(
modifier|*
name|point2oct
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|oct2point
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_add, EC_POINT_dbl, ECP_POINT_invert: */
name|int
function_decl|(
modifier|*
name|add
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dbl
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|invert
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/*      * used by EC_POINT_is_at_infinity, EC_POINT_is_on_curve, EC_POINT_cmp:      */
name|int
function_decl|(
modifier|*
name|is_at_infinity
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|is_on_curve
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_cmp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_make_affine, EC_POINTs_make_affine: */
name|int
function_decl|(
modifier|*
name|make_affine
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|points_make_affine
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
name|EC_POINT
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/*      * used by EC_POINTs_mul, EC_POINT_mul, EC_POINT_precompute_mult,      * EC_POINT_have_precompute_mult (default implementations are used if the      * 'mul' pointer is 0):      */
name|int
function_decl|(
modifier|*
name|mul
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|precompute_mult
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|have_precompute_mult
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
comment|/* internal functions */
comment|/*      * 'field_mul', 'field_sqr', and 'field_div' can be used by 'add' and      * 'dbl' so that the same implementations of point operations can be used      * with different optimized implementations of expensive field      * operations:      */
name|int
function_decl|(
modifier|*
name|field_mul
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|field_sqr
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|field_div
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* e.g. to Montgomery */
name|int
function_decl|(
modifier|*
name|field_encode
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* e.g. from Montgomery */
name|int
function_decl|(
modifier|*
name|field_decode
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|field_set_to_one
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
block|}
comment|/* EC_METHOD */
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|ec_extra_data_st
block|{
name|struct
name|ec_extra_data_st
modifier|*
name|next
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
name|EC_EXTRA_DATA
typedef|;
end_typedef

begin_comment
comment|/* used in EC_GROUP */
end_comment

begin_struct
struct|struct
name|ec_group_st
block|{
specifier|const
name|EC_METHOD
modifier|*
name|meth
decl_stmt|;
name|EC_POINT
modifier|*
name|generator
decl_stmt|;
comment|/* optional */
name|BIGNUM
name|order
decl_stmt|,
name|cofactor
decl_stmt|;
name|int
name|curve_name
decl_stmt|;
comment|/* optional NID for named curve */
name|int
name|asn1_flag
decl_stmt|;
comment|/* flag to control the asn1 encoding */
name|point_conversion_form_t
name|asn1_form
decl_stmt|;
name|unsigned
name|char
modifier|*
name|seed
decl_stmt|;
comment|/* optional seed for parameters (appears in                                  * ASN1) */
name|size_t
name|seed_len
decl_stmt|;
name|EC_EXTRA_DATA
modifier|*
name|extra_data
decl_stmt|;
comment|/* linked list */
comment|/*      * The following members are handled by the method functions, even if      * they appear generic      */
comment|/*      * Field specification. For curves over GF(p), this is the modulus; for      * curves over GF(2^m), this is the irreducible polynomial defining the      * field.      */
name|BIGNUM
name|field
decl_stmt|;
comment|/*      * Field specification for curves over GF(2^m). The irreducible f(t) is      * then of the form: t^poly[0] + t^poly[1] + ... + t^poly[k] where m =      * poly[0]> poly[1]> ...> poly[k] = 0. The array is terminated with      * poly[k+1]=-1. All elliptic curve irreducibles have at most 5 non-zero      * terms.      */
name|int
name|poly
index|[
literal|6
index|]
decl_stmt|;
comment|/*      * Curve coefficients. (Here the assumption is that BIGNUMs can be used      * or abused for all kinds of fields, not just GF(p).) For characteristic      *> 3, the curve is defined by a Weierstrass equation of the form y^2 =      * x^3 + a*x + b. For characteristic 2, the curve is defined by an      * equation of the form y^2 + x*y = x^3 + a*x^2 + b.      */
name|BIGNUM
name|a
decl_stmt|,
name|b
decl_stmt|;
comment|/* enable optimized point arithmetics for special case */
name|int
name|a_is_minus3
decl_stmt|;
comment|/* method-specific (e.g., Montgomery structure) */
name|void
modifier|*
name|field_data1
decl_stmt|;
comment|/* method-specific */
name|void
modifier|*
name|field_data2
decl_stmt|;
comment|/* method-specific */
name|int
function_decl|(
modifier|*
name|field_mod_func
function_decl|)
parameter_list|(
name|BIGNUM
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
block|}
comment|/* EC_GROUP */
struct|;
end_struct

begin_struct
struct|struct
name|ec_key_st
block|{
name|int
name|version
decl_stmt|;
name|EC_GROUP
modifier|*
name|group
decl_stmt|;
name|EC_POINT
modifier|*
name|pub_key
decl_stmt|;
name|BIGNUM
modifier|*
name|priv_key
decl_stmt|;
name|unsigned
name|int
name|enc_flag
decl_stmt|;
name|point_conversion_form_t
name|conv_form
decl_stmt|;
name|int
name|references
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|EC_EXTRA_DATA
modifier|*
name|method_data
decl_stmt|;
block|}
comment|/* EC_KEY */
struct|;
end_struct

begin_comment
comment|/*  * Basically a 'mixin' for extra data, but available for EC_GROUPs/EC_KEYs  * only (with visibility limited to 'package' level for now). We use the  * function pointers as index for retrieval; this obviates global  * ex_data-style index tables.  */
end_comment

begin_function_decl
name|int
name|EC_EX_DATA_set_data
parameter_list|(
name|EC_EXTRA_DATA
modifier|*
modifier|*
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|EC_EX_DATA_get_data
parameter_list|(
specifier|const
name|EC_EXTRA_DATA
modifier|*
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|EC_EX_DATA_free_data
parameter_list|(
name|EC_EXTRA_DATA
modifier|*
modifier|*
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|EC_EX_DATA_clear_free_data
parameter_list|(
name|EC_EXTRA_DATA
modifier|*
modifier|*
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|EC_EX_DATA_free_all_data
parameter_list|(
name|EC_EXTRA_DATA
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|EC_EX_DATA_clear_free_all_data
parameter_list|(
name|EC_EXTRA_DATA
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ec_point_st
block|{
specifier|const
name|EC_METHOD
modifier|*
name|meth
decl_stmt|;
comment|/*      * All members except 'meth' are handled by the method functions, even if      * they appear generic      */
name|BIGNUM
name|X
decl_stmt|;
name|BIGNUM
name|Y
decl_stmt|;
name|BIGNUM
name|Z
decl_stmt|;
comment|/* Jacobian projective coordinates: (X, Y, Z)                                  * represents (X/Z^2, Y/Z^3) if Z != 0 */
name|int
name|Z_is_one
decl_stmt|;
comment|/* enable optimized point arithmetics for                                  * special case */
block|}
comment|/* EC_POINT */
struct|;
end_struct

begin_comment
comment|/*  * method functions in ec_mult.c (ec_lib.c uses these as defaults if  * group->method->mul is 0)  */
end_comment

begin_function_decl
name|int
name|ec_wNAF_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_wNAF_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_wNAF_have_precompute_mult
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_smpl.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_simple_group_init
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_group_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_group_clear_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_set_curve
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_get_curve
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_get_degree
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_check_discriminant
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_init
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_point_finish
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_point_clear_finish
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_copy
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_set_to_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_set_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_get_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_set_affine_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_get_affine_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_set_compressed_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|ec_GFp_simple_point2oct
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_oct2point
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_add
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_dbl
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_invert
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_is_at_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_is_on_curve
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_cmp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_points_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
name|EC_POINT
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_mont.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_mont_group_init
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_group_set_curve
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_mont_group_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_mont_group_clear_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_encode
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_decode
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_set_to_one
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_nist.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_nist_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
name|dest
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nist_group_set_curve
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nist_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nist_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ec2_smpl.c */
end_comment

begin_function_decl
name|int
name|ec_GF2m_simple_group_init
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GF2m_simple_group_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GF2m_simple_group_clear_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_group_set_curve
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_group_get_curve
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_group_get_degree
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_group_check_discriminant
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_point_init
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GF2m_simple_point_finish
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GF2m_simple_point_clear_finish
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_point_copy
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_point_set_to_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_point_set_affine_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_point_get_affine_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_set_compressed_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|ec_GF2m_simple_point2oct
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_oct2point
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_add
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_dbl
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_invert
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_is_at_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_is_on_curve
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_cmp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_points_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
name|EC_POINT
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_simple_field_div
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ec2_mult.c */
end_comment

begin_function_decl
name|int
name|ec_GF2m_simple_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_have_precompute_mult
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ec2_mult.c */
end_comment

begin_function_decl
name|int
name|ec_GF2m_simple_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GF2m_have_precompute_mult
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC_NISTP_64_GCC_128
end_ifndef

begin_comment
comment|/* method functions in ecp_nistp224.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_nistp224_group_init
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp224_group_set_curve
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|n
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp224_point_get_affine_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|point
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp224_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp224_points_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp224_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp224_have_precompute_mult
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_nistp256.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_nistp256_group_init
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp256_group_set_curve
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|n
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp256_point_get_affine_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|point
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp256_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp256_points_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp256_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp256_have_precompute_mult
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_nistp521.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_nistp521_group_init
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp521_group_set_curve
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|n
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp521_point_get_affine_coordinates
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|point
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp521_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp521_points_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalar
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|points
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|scalars
index|[]
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp521_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nistp521_have_precompute_mult
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* utility functions in ecp_nistputil.c */
end_comment

begin_function_decl
name|void
name|ec_GFp_nistp_points_make_affine_internal
parameter_list|(
name|size_t
name|num
parameter_list|,
name|void
modifier|*
name|point_array
parameter_list|,
name|size_t
name|felem_size
parameter_list|,
name|void
modifier|*
name|tmp_felems
parameter_list|,
name|void
function_decl|(
modifier|*
name|felem_one
function_decl|)
parameter_list|(
name|void
modifier|*
name|out
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|felem_is_zero
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|in
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|felem_assign
function_decl|)
parameter_list|(
name|void
modifier|*
name|out
parameter_list|,
specifier|const
name|void
modifier|*
name|in
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|felem_square
function_decl|)
parameter_list|(
name|void
modifier|*
name|out
parameter_list|,
specifier|const
name|void
modifier|*
name|in
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|felem_mul
function_decl|)
parameter_list|(
name|void
modifier|*
name|out
parameter_list|,
specifier|const
name|void
modifier|*
name|in1
parameter_list|,
specifier|const
name|void
modifier|*
name|in2
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|felem_inv
function_decl|)
parameter_list|(
name|void
modifier|*
name|out
parameter_list|,
specifier|const
name|void
modifier|*
name|in
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|felem_contract
function_decl|)
parameter_list|(
name|void
modifier|*
name|out
parameter_list|,
specifier|const
name|void
modifier|*
name|in
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_nistp_recode_scalar_bits
parameter_list|(
name|unsigned
name|char
modifier|*
name|sign
parameter_list|,
name|unsigned
name|char
modifier|*
name|digit
parameter_list|,
name|unsigned
name|char
name|in
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

