begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/ec/ec_lcl.h */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ec.h>
end_include

begin_comment
comment|/* Structure details are not part of the exported interface,  * so all this may change in future versions. */
end_comment

begin_struct
struct|struct
name|ec_method_st
block|{
comment|/* used by EC_GROUP_new, EC_GROUP_free, EC_GROUP_clear_free, EC_GROUP_copy: */
name|int
function_decl|(
modifier|*
name|group_init
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|group_finish
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|group_clear_finish
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|group_copy
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_GROUP_set_curve_GFp and EC_GROUP_get_curve_GFp: */
name|int
function_decl|(
modifier|*
name|group_set_curve_GFp
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|group_get_curve_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_GROUP_set_generator, EC_GROUP_get0_generator, 	 * EC_GROUP_get_order, EC_GROUP_get_cofactor: 	 */
name|int
function_decl|(
modifier|*
name|group_set_generator
function_decl|)
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|generator
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|order
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|cofactor
parameter_list|)
function_decl|;
name|EC_POINT
modifier|*
function_decl|(
modifier|*
name|group_get0_generator
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|group_get_order
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|order
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|group_get_cofactor
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|cofactor
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_new, EC_POINT_free, EC_POINT_clear_free, EC_POINT_copy: */
name|int
function_decl|(
modifier|*
name|point_init
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|point_finish
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|point_clear_finish
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_copy
function_decl|)
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_set_to_infinity, 	 * EC_POINT_set_Jprojective_coordinates_GFp, EC_POINT_get_Jprojective_coordinates_GFp, 	 * EC_POINT_set_affine_coordinates_GFp, EC_POINT_get_affine_coordinates_GFp, 	 * EC_POINT_set_compressed_coordinates_GFp: 	 */
name|int
function_decl|(
modifier|*
name|point_set_to_infinity
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_set_Jprojective_coordinates_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_get_Jprojective_coordinates_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_set_affine_coordinates_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_get_affine_coordinates_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_set_compressed_coordinates_GFp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_point2oct, EC_POINT_oct2point: */
name|size_t
function_decl|(
modifier|*
name|point2oct
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|oct2point
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_add, EC_POINT_dbl, ECP_POINT_invert: */
name|int
function_decl|(
modifier|*
name|add
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dbl
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|invert
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_is_at_infinity, EC_POINT_is_on_curve, EC_POINT_cmp: */
name|int
function_decl|(
modifier|*
name|is_at_infinity
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|is_on_curve
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|point_cmp
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* used by EC_POINT_make_affine, EC_POINTs_make_affine: */
name|int
function_decl|(
modifier|*
name|make_affine
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|points_make_affine
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
name|EC_POINT
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* internal functions */
comment|/* 'field_mul' and 'field_sqr' can be used by 'add' and 'dbl' so that 	 * the same implementations of point operations can be used with different 	 * optimized implementations of expensive field operations: */
name|int
function_decl|(
modifier|*
name|field_mul
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|field_sqr
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|field_encode
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* e.g. to Montgomery */
name|int
function_decl|(
modifier|*
name|field_decode
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* e.g. from Montgomery */
name|int
function_decl|(
modifier|*
name|field_set_to_one
function_decl|)
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
block|}
comment|/* EC_METHOD */
struct|;
end_struct

begin_struct
struct|struct
name|ec_group_st
block|{
specifier|const
name|EC_METHOD
modifier|*
name|meth
decl_stmt|;
name|void
modifier|*
name|extra_data
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|extra_data_dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|extra_data_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|extra_data_clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* All members except 'meth' and 'extra_data...' are handled by 	 * the method functions, even if they appear generic */
name|BIGNUM
name|field
decl_stmt|;
comment|/* Field specification. 	               * For curves over GF(p), this is the modulus. */
name|BIGNUM
name|a
decl_stmt|,
name|b
decl_stmt|;
comment|/* Curve coefficients. 	              * (Here the assumption is that BIGNUMs can be used 	              * or abused for all kinds of fields, not just GF(p).) 	              * For characteristic> 3,  the curve is defined 	              * by a Weierstrass equation of the form 	              *     y^2 = x^3 + a*x + b. 	              */
name|int
name|a_is_minus3
decl_stmt|;
comment|/* enable optimized point arithmetics for special case */
name|EC_POINT
modifier|*
name|generator
decl_stmt|;
comment|/* optional */
name|BIGNUM
name|order
decl_stmt|,
name|cofactor
decl_stmt|;
name|void
modifier|*
name|field_data1
decl_stmt|;
comment|/* method-specific (e.g., Montgomery structure) */
name|void
modifier|*
name|field_data2
decl_stmt|;
comment|/* method-specific */
block|}
comment|/* EC_GROUP */
struct|;
end_struct

begin_comment
comment|/* Basically a 'mixin' for extra data, but available for EC_GROUPs only  * (with visibility limited to 'package' level for now).  * We use the function pointers as index for retrieval; this obviates  * global ex_data-style index tables.  * (Currently, we have one slot only, but is is possible to extend this  * if necessary.) */
end_comment

begin_function_decl
name|int
name|EC_GROUP_set_extra_data
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
name|void
modifier|*
name|extra_data
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|extra_data_dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|extra_data_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|extra_data_clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|EC_GROUP_get_extra_data
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|extra_data_dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|extra_data_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|extra_data_clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|EC_GROUP_free_extra_data
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|EC_GROUP_clear_free_extra_data
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ec_point_st
block|{
specifier|const
name|EC_METHOD
modifier|*
name|meth
decl_stmt|;
comment|/* All members except 'meth' are handled by the method functions, 	 * even if they appear generic */
name|BIGNUM
name|X
decl_stmt|;
name|BIGNUM
name|Y
decl_stmt|;
name|BIGNUM
name|Z
decl_stmt|;
comment|/* Jacobian projective coordinates: 	           * (X, Y, Z)  represents  (X/Z^2, Y/Z^3)  if  Z != 0 */
name|int
name|Z_is_one
decl_stmt|;
comment|/* enable optimized point arithmetics for special case */
block|}
comment|/* EC_POINT */
struct|;
end_struct

begin_comment
comment|/* method functions in ecp_smpl.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_simple_group_init
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_group_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_group_clear_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_set_curve_GFp
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_get_curve_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_set_generator
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|generator
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|order
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|cofactor
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|EC_POINT
modifier|*
name|ec_GFp_simple_group_get0_generator
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_get_order
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|order
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_group_get_cofactor
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|cofactor
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_init
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_point_finish
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_simple_point_clear_finish
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_copy
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_set_to_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_set_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_get_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_set_affine_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_point_get_affine_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_set_compressed_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|ec_GFp_simple_point2oct
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_oct2point
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_add
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_dbl
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_invert
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_is_at_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_is_on_curve
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_cmp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_points_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
name|EC_POINT
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_simple_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_mont.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_mont_group_init
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_group_set_curve_GFp
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_mont_group_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_mont_group_clear_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_encode
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_decode
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_mont_field_set_to_one
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_recp.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_recp_group_init
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_recp_group_set_curve_GFp
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_recp_group_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_recp_group_clear_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_recp_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_recp_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_recp_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* method functions in ecp_nist.c */
end_comment

begin_function_decl
name|int
name|ec_GFp_nist_group_init
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nist_group_set_curve_GFp
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_nist_group_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ec_GFp_nist_group_clear_finish
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nist_group_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nist_field_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ec_GFp_nist_field_sqr
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

