begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/ec/ec.h */
end_comment

begin_comment
comment|/*  * Originally written by Bodo Moeller for the OpenSSL project.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1998-2003 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.  *  * Portions of the attached software ("Contribution") are developed by   * SUN MICROSYSTEMS, INC., and are contributed to the OpenSSL project.  *  * The Contribution is licensed pursuant to the OpenSSL open source  * license provided above.  *  * The elliptic curve binary polynomial software is originally written by   * Sheueling Chang Shantz and Douglas Stebila of Sun Microsystems Laboratories.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_EC_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_EC_H
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_NO_EC
end_ifdef

begin_error
error|#
directive|error
error|EC is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/asn1.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
elif|#
directive|elif
name|defined
argument_list|(
name|__SUNPRO_C
argument_list|)
if|#
directive|if
name|__SUNPRO_C
operator|>=
literal|0x520
pragma|#
directive|pragma
name|error_messages
name|(
name|off
name|,
name|E_ARRAY_OF_INCOMPLETE_NONAME
name|,
name|E_ARRAY_OF_INCOMPLETE
name|)
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_ECC_MAX_FIELD_BITS
define|#
directive|define
name|OPENSSL_ECC_MAX_FIELD_BITS
value|661
endif|#
directive|endif
typedef|typedef
enum|enum
block|{
comment|/* values as defined in X9.62 (ECDSA) and elsewhere */
name|POINT_CONVERSION_COMPRESSED
init|=
literal|2
block|,
name|POINT_CONVERSION_UNCOMPRESSED
init|=
literal|4
block|,
name|POINT_CONVERSION_HYBRID
init|=
literal|6
block|}
name|point_conversion_form_t
typedef|;
typedef|typedef
name|struct
name|ec_method_st
name|EC_METHOD
typedef|;
typedef|typedef
name|struct
name|ec_group_st
comment|/* 	 EC_METHOD *meth; 	 -- field definition 	 -- curve coefficients 	 -- optional generator with associated information (order, cofactor) 	 -- optional extra data (precomputed table for fast computation of multiples of generator) 	 -- ASN1 stuff 	*/
name|EC_GROUP
typedef|;
typedef|typedef
name|struct
name|ec_point_st
name|EC_POINT
typedef|;
comment|/* EC_METHODs for curves over GF(p).  * EC_GFp_simple_method provides the basis for the optimized methods.  */
specifier|const
name|EC_METHOD
modifier|*
name|EC_GFp_simple_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EC_METHOD
modifier|*
name|EC_GFp_mont_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EC_METHOD
modifier|*
name|EC_GFp_nist_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* EC_METHOD for curves over GF(2^m).  */
specifier|const
name|EC_METHOD
modifier|*
name|EC_GF2m_simple_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EC_GROUP
modifier|*
name|EC_GROUP_new
parameter_list|(
specifier|const
name|EC_METHOD
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_GROUP_free
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_GROUP_clear_free
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|EC_GROUP
modifier|*
name|EC_GROUP_dup
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|EC_METHOD
modifier|*
name|EC_GROUP_method_of
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_METHOD_get_field_type
parameter_list|(
specifier|const
name|EC_METHOD
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_set_generator
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|generator
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|order
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|cofactor
parameter_list|)
function_decl|;
specifier|const
name|EC_POINT
modifier|*
name|EC_GROUP_get0_generator
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_order
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|order
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_cofactor
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|cofactor
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_GROUP_set_curve_name
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
name|int
name|nid
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_curve_name
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_GROUP_set_asn1_flag
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
name|int
name|flag
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_asn1_flag
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_GROUP_set_point_conversion_form
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
name|point_conversion_form_t
parameter_list|)
function_decl|;
name|point_conversion_form_t
name|EC_GROUP_get_point_conversion_form
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|EC_GROUP_get0_seed
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|size_t
name|EC_GROUP_get_seed_len
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|size_t
name|EC_GROUP_set_seed
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_set_curve_GFp
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_curve_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_set_curve_GF2m
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_curve_GF2m
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* returns the number of bits needed to represent a field element */
name|int
name|EC_GROUP_get_degree
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_GROUP_check() returns 1 if 'group' defines a valid group, 0 otherwise */
name|int
name|EC_GROUP_check
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|group
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* EC_GROUP_check_discriminant() returns 1 if the discriminant of the  * elliptic curve is not zero, 0 otherwise */
name|int
name|EC_GROUP_check_discriminant
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_GROUP_cmp() returns 0 if both groups are equal and 1 otherwise */
name|int
name|EC_GROUP_cmp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_GROUP_new_GF*() calls EC_GROUP_new() and EC_GROUP_set_GF*()  * after choosing an appropriate EC_METHOD */
name|EC_GROUP
modifier|*
name|EC_GROUP_new_curve_GFp
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|EC_GROUP
modifier|*
name|EC_GROUP_new_curve_GF2m
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_GROUP_new_by_curve_name() creates a EC_GROUP structure  * specified by a curve name (in form of a NID) */
name|EC_GROUP
modifier|*
name|EC_GROUP_new_by_curve_name
parameter_list|(
name|int
name|nid
parameter_list|)
function_decl|;
comment|/* handling of internal curves */
typedef|typedef
struct|struct
block|{
name|int
name|nid
decl_stmt|;
specifier|const
name|char
modifier|*
name|comment
decl_stmt|;
block|}
name|EC_builtin_curve
typedef|;
comment|/* EC_builtin_curves(EC_builtin_curve *r, size_t size) returns number   * of all available curves or zero if a error occurred.   * In case r ist not zero nitems EC_builtin_curve structures   * are filled with the data of the first nitems internal groups */
name|size_t
name|EC_get_builtin_curves
parameter_list|(
name|EC_builtin_curve
modifier|*
name|r
parameter_list|,
name|size_t
name|nitems
parameter_list|)
function_decl|;
comment|/* EC_POINT functions */
name|EC_POINT
modifier|*
name|EC_POINT_new
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_POINT_free
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_POINT_clear_free
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_copy
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|EC_POINT
modifier|*
name|EC_POINT_dup
parameter_list|(
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|EC_METHOD
modifier|*
name|EC_POINT_method_of
parameter_list|(
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_to_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_get_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_affine_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_get_affine_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_compressed_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_affine_coordinates_GF2m
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_get_affine_coordinates_GF2m
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_compressed_coordinates_GF2m
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|size_t
name|EC_POINT_point2oct
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_oct2point
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* other interfaces to point2oct/oct2point: */
name|BIGNUM
modifier|*
name|EC_POINT_point2bn
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|BIGNUM
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|EC_POINT
modifier|*
name|EC_POINT_bn2point
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|EC_POINT_point2hex
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|EC_POINT
modifier|*
name|EC_POINT_hex2point
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_add
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_dbl
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_invert
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_is_at_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_is_on_curve
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_cmp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINTs_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
name|EC_POINT
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINTs_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_GROUP_precompute_mult() stores multiples of generator for faster point multiplication */
name|int
name|EC_GROUP_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_GROUP_have_precompute_mult() reports whether such precomputation has been done */
name|int
name|EC_GROUP_have_precompute_mult
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
comment|/* ASN1 stuff */
comment|/* EC_GROUP_get_basis_type() returns the NID of the basis type  * used to represent the field elements */
name|int
name|EC_GROUP_get_basis_type
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_trinomial_basis
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
name|k
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_pentanomial_basis
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
name|k1
parameter_list|,
name|unsigned
name|int
modifier|*
name|k2
parameter_list|,
name|unsigned
name|int
modifier|*
name|k3
parameter_list|)
function_decl|;
define|#
directive|define
name|OPENSSL_EC_NAMED_CURVE
value|0x001
typedef|typedef
name|struct
name|ecpk_parameters_st
name|ECPKPARAMETERS
typedef|;
name|EC_GROUP
modifier|*
name|d2i_ECPKParameters
parameter_list|(
name|EC_GROUP
modifier|*
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|in
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|i2d_ECPKParameters
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|)
function_decl|;
define|#
directive|define
name|d2i_ECPKParameters_bio
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|)
value|ASN1_d2i_bio_of(EC_GROUP,NULL,d2i_ECPKParameters,bp,x)
define|#
directive|define
name|i2d_ECPKParameters_bio
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|)
value|ASN1_i2d_bio_of_const(EC_GROUP,i2d_ECPKParameters,bp,x)
define|#
directive|define
name|d2i_ECPKParameters_fp
parameter_list|(
name|fp
parameter_list|,
name|x
parameter_list|)
value|(EC_GROUP *)ASN1_d2i_fp(NULL, \                 (char *(*)())d2i_ECPKParameters,(fp),(unsigned char **)(x))
define|#
directive|define
name|i2d_ECPKParameters_fp
parameter_list|(
name|fp
parameter_list|,
name|x
parameter_list|)
value|ASN1_i2d_fp(i2d_ECPKParameters,(fp), \ 		(unsigned char *)(x))
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|ECPKParameters_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
name|x
parameter_list|,
name|int
name|off
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|int
name|ECPKParameters_print_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
name|x
parameter_list|,
name|int
name|off
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* the EC_KEY stuff */
typedef|typedef
name|struct
name|ec_key_st
name|EC_KEY
typedef|;
comment|/* some values for the encoding_flag */
define|#
directive|define
name|EC_PKEY_NO_PARAMETERS
value|0x001
define|#
directive|define
name|EC_PKEY_NO_PUBKEY
value|0x002
name|EC_KEY
modifier|*
name|EC_KEY_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|EC_KEY
modifier|*
name|EC_KEY_new_by_curve_name
parameter_list|(
name|int
name|nid
parameter_list|)
function_decl|;
name|void
name|EC_KEY_free
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|EC_KEY
modifier|*
name|EC_KEY_copy
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|EC_KEY
modifier|*
name|EC_KEY_dup
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_KEY_up_ref
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|EC_GROUP
modifier|*
name|EC_KEY_get0_group
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_KEY_set_group
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|BIGNUM
modifier|*
name|EC_KEY_get0_private_key
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_KEY_set_private_key
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|EC_POINT
modifier|*
name|EC_KEY_get0_public_key
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_KEY_set_public_key
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|EC_KEY_get_enc_flags
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_KEY_set_enc_flags
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|point_conversion_form_t
name|EC_KEY_get_conv_form
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_KEY_set_conv_form
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
name|point_conversion_form_t
parameter_list|)
function_decl|;
comment|/* functions to set/get method specific data  */
name|void
modifier|*
name|EC_KEY_get_key_method_data
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|EC_KEY_insert_key_method_data
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|dup_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|clear_free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* wrapper functions for the underlying EC_GROUP object */
name|void
name|EC_KEY_set_asn1_flag
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|EC_KEY_precompute_mult
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* EC_KEY_generate_key() creates a ec private (public) key */
name|int
name|EC_KEY_generate_key
parameter_list|(
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_KEY_check_key() */
name|int
name|EC_KEY_check_key
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
parameter_list|)
function_decl|;
comment|/* de- and encoding functions for SEC1 ECPrivateKey */
name|EC_KEY
modifier|*
name|d2i_ECPrivateKey
parameter_list|(
name|EC_KEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|in
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|i2d_ECPrivateKey
parameter_list|(
name|EC_KEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|)
function_decl|;
comment|/* de- and encoding functions for EC parameters */
name|EC_KEY
modifier|*
name|d2i_ECParameters
parameter_list|(
name|EC_KEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|in
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|i2d_ECParameters
parameter_list|(
name|EC_KEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|)
function_decl|;
comment|/* de- and encoding functions for EC public key  * (octet string, not DER -- hence 'o2i' and 'i2o') */
name|EC_KEY
modifier|*
name|o2i_ECPublicKey
parameter_list|(
name|EC_KEY
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|in
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|i2o_ECPublicKey
parameter_list|(
name|EC_KEY
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|ECParameters_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|EC_KEY
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|EC_KEY_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|EC_KEY
modifier|*
name|x
parameter_list|,
name|int
name|off
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|int
name|ECParameters_print_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|EC_KEY
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|EC_KEY_print_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|EC_KEY
modifier|*
name|x
parameter_list|,
name|int
name|off
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|ECParameters_dup
parameter_list|(
name|x
parameter_list|)
value|ASN1_dup_of(EC_KEY,i2d_ECParameters,d2i_ECParameters,x)
ifndef|#
directive|ifndef
name|__cplusplus
if|#
directive|if
name|defined
argument_list|(
name|__SUNPRO_C
argument_list|)
if|#
directive|if
name|__SUNPRO_C
operator|>=
literal|0x520
pragma|#
directive|pragma
name|error_messages
name|(
name|default
name|,
name|E_ARRAY_OF_INCOMPLETE_NONAME
name|,
name|E_ARRAY_OF_INCOMPLETE
name|)
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_EC_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the EC functions. */
comment|/* Function codes. */
define|#
directive|define
name|EC_F_COMPUTE_WNAF
value|143
define|#
directive|define
name|EC_F_D2I_ECPARAMETERS
value|144
define|#
directive|define
name|EC_F_D2I_ECPKPARAMETERS
value|145
define|#
directive|define
name|EC_F_D2I_ECPRIVATEKEY
value|146
define|#
directive|define
name|EC_F_ECPARAMETERS_PRINT
value|147
define|#
directive|define
name|EC_F_ECPARAMETERS_PRINT_FP
value|148
define|#
directive|define
name|EC_F_ECPKPARAMETERS_PRINT
value|149
define|#
directive|define
name|EC_F_ECPKPARAMETERS_PRINT_FP
value|150
define|#
directive|define
name|EC_F_ECP_NIST_MOD_192
value|203
define|#
directive|define
name|EC_F_ECP_NIST_MOD_224
value|204
define|#
directive|define
name|EC_F_ECP_NIST_MOD_256
value|205
define|#
directive|define
name|EC_F_ECP_NIST_MOD_521
value|206
define|#
directive|define
name|EC_F_EC_ASN1_GROUP2CURVE
value|153
define|#
directive|define
name|EC_F_EC_ASN1_GROUP2FIELDID
value|154
define|#
directive|define
name|EC_F_EC_ASN1_GROUP2PARAMETERS
value|155
define|#
directive|define
name|EC_F_EC_ASN1_GROUP2PKPARAMETERS
value|156
define|#
directive|define
name|EC_F_EC_ASN1_PARAMETERS2GROUP
value|157
define|#
directive|define
name|EC_F_EC_ASN1_PKPARAMETERS2GROUP
value|158
define|#
directive|define
name|EC_F_EC_EX_DATA_SET_DATA
value|211
define|#
directive|define
name|EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
value|208
define|#
directive|define
name|EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
value|159
define|#
directive|define
name|EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
value|195
define|#
directive|define
name|EC_F_EC_GF2M_SIMPLE_OCT2POINT
value|160
define|#
directive|define
name|EC_F_EC_GF2M_SIMPLE_POINT2OCT
value|161
define|#
directive|define
name|EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
value|162
define|#
directive|define
name|EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
value|163
define|#
directive|define
name|EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
value|164
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_DECODE
value|133
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_ENCODE
value|134
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_MUL
value|131
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
value|209
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_SQR
value|132
define|#
directive|define
name|EC_F_EC_GFP_MONT_GROUP_SET_CURVE
value|189
define|#
directive|define
name|EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
value|135
define|#
directive|define
name|EC_F_EC_GFP_NIST_FIELD_MUL
value|200
define|#
directive|define
name|EC_F_EC_GFP_NIST_FIELD_SQR
value|201
define|#
directive|define
name|EC_F_EC_GFP_NIST_GROUP_SET_CURVE
value|202
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
value|165
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
value|166
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
value|100
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
value|101
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
value|102
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_OCT2POINT
value|103
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT2OCT
value|104
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
value|137
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
value|167
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
value|105
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
value|168
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
value|128
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
value|169
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
value|129
define|#
directive|define
name|EC_F_EC_GROUP_CHECK
value|170
define|#
directive|define
name|EC_F_EC_GROUP_CHECK_DISCRIMINANT
value|171
define|#
directive|define
name|EC_F_EC_GROUP_COPY
value|106
define|#
directive|define
name|EC_F_EC_GROUP_GET0_GENERATOR
value|139
define|#
directive|define
name|EC_F_EC_GROUP_GET_COFACTOR
value|140
define|#
directive|define
name|EC_F_EC_GROUP_GET_CURVE_GF2M
value|172
define|#
directive|define
name|EC_F_EC_GROUP_GET_CURVE_GFP
value|130
define|#
directive|define
name|EC_F_EC_GROUP_GET_DEGREE
value|173
define|#
directive|define
name|EC_F_EC_GROUP_GET_ORDER
value|141
define|#
directive|define
name|EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
value|193
define|#
directive|define
name|EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
value|194
define|#
directive|define
name|EC_F_EC_GROUP_NEW
value|108
define|#
directive|define
name|EC_F_EC_GROUP_NEW_BY_CURVE_NAME
value|174
define|#
directive|define
name|EC_F_EC_GROUP_NEW_FROM_DATA
value|175
define|#
directive|define
name|EC_F_EC_GROUP_PRECOMPUTE_MULT
value|142
define|#
directive|define
name|EC_F_EC_GROUP_SET_CURVE_GF2M
value|176
define|#
directive|define
name|EC_F_EC_GROUP_SET_CURVE_GFP
value|109
define|#
directive|define
name|EC_F_EC_GROUP_SET_EXTRA_DATA
value|110
define|#
directive|define
name|EC_F_EC_GROUP_SET_GENERATOR
value|111
define|#
directive|define
name|EC_F_EC_KEY_CHECK_KEY
value|177
define|#
directive|define
name|EC_F_EC_KEY_COPY
value|178
define|#
directive|define
name|EC_F_EC_KEY_GENERATE_KEY
value|179
define|#
directive|define
name|EC_F_EC_KEY_NEW
value|182
define|#
directive|define
name|EC_F_EC_KEY_PRINT
value|180
define|#
directive|define
name|EC_F_EC_KEY_PRINT_FP
value|181
define|#
directive|define
name|EC_F_EC_POINTS_MAKE_AFFINE
value|136
define|#
directive|define
name|EC_F_EC_POINTS_MUL
value|138
define|#
directive|define
name|EC_F_EC_POINT_ADD
value|112
define|#
directive|define
name|EC_F_EC_POINT_CMP
value|113
define|#
directive|define
name|EC_F_EC_POINT_COPY
value|114
define|#
directive|define
name|EC_F_EC_POINT_DBL
value|115
define|#
directive|define
name|EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
value|183
define|#
directive|define
name|EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
value|116
define|#
directive|define
name|EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
value|117
define|#
directive|define
name|EC_F_EC_POINT_INVERT
value|210
define|#
directive|define
name|EC_F_EC_POINT_IS_AT_INFINITY
value|118
define|#
directive|define
name|EC_F_EC_POINT_IS_ON_CURVE
value|119
define|#
directive|define
name|EC_F_EC_POINT_MAKE_AFFINE
value|120
define|#
directive|define
name|EC_F_EC_POINT_MUL
value|184
define|#
directive|define
name|EC_F_EC_POINT_NEW
value|121
define|#
directive|define
name|EC_F_EC_POINT_OCT2POINT
value|122
define|#
directive|define
name|EC_F_EC_POINT_POINT2OCT
value|123
define|#
directive|define
name|EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
value|185
define|#
directive|define
name|EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
value|124
define|#
directive|define
name|EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
value|186
define|#
directive|define
name|EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
value|125
define|#
directive|define
name|EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
value|126
define|#
directive|define
name|EC_F_EC_POINT_SET_TO_INFINITY
value|127
define|#
directive|define
name|EC_F_EC_PRE_COMP_DUP
value|207
define|#
directive|define
name|EC_F_EC_WNAF_MUL
value|187
define|#
directive|define
name|EC_F_EC_WNAF_PRECOMPUTE_MULT
value|188
define|#
directive|define
name|EC_F_I2D_ECPARAMETERS
value|190
define|#
directive|define
name|EC_F_I2D_ECPKPARAMETERS
value|191
define|#
directive|define
name|EC_F_I2D_ECPRIVATEKEY
value|192
define|#
directive|define
name|EC_F_I2O_ECPUBLICKEY
value|151
define|#
directive|define
name|EC_F_O2I_ECPUBLICKEY
value|152
comment|/* Reason codes. */
define|#
directive|define
name|EC_R_ASN1_ERROR
value|115
define|#
directive|define
name|EC_R_ASN1_UNKNOWN_FIELD
value|116
define|#
directive|define
name|EC_R_BUFFER_TOO_SMALL
value|100
define|#
directive|define
name|EC_R_D2I_ECPKPARAMETERS_FAILURE
value|117
define|#
directive|define
name|EC_R_DISCRIMINANT_IS_ZERO
value|118
define|#
directive|define
name|EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
value|119
define|#
directive|define
name|EC_R_FIELD_TOO_LARGE
value|138
define|#
directive|define
name|EC_R_GROUP2PKPARAMETERS_FAILURE
value|120
define|#
directive|define
name|EC_R_I2D_ECPKPARAMETERS_FAILURE
value|121
define|#
directive|define
name|EC_R_INCOMPATIBLE_OBJECTS
value|101
define|#
directive|define
name|EC_R_INVALID_ARGUMENT
value|112
define|#
directive|define
name|EC_R_INVALID_COMPRESSED_POINT
value|110
define|#
directive|define
name|EC_R_INVALID_COMPRESSION_BIT
value|109
define|#
directive|define
name|EC_R_INVALID_ENCODING
value|102
define|#
directive|define
name|EC_R_INVALID_FIELD
value|103
define|#
directive|define
name|EC_R_INVALID_FORM
value|104
define|#
directive|define
name|EC_R_INVALID_GROUP_ORDER
value|122
define|#
directive|define
name|EC_R_INVALID_PENTANOMIAL_BASIS
value|132
define|#
directive|define
name|EC_R_INVALID_PRIVATE_KEY
value|123
define|#
directive|define
name|EC_R_INVALID_TRINOMIAL_BASIS
value|137
define|#
directive|define
name|EC_R_MISSING_PARAMETERS
value|124
define|#
directive|define
name|EC_R_MISSING_PRIVATE_KEY
value|125
define|#
directive|define
name|EC_R_NOT_A_NIST_PRIME
value|135
define|#
directive|define
name|EC_R_NOT_A_SUPPORTED_NIST_PRIME
value|136
define|#
directive|define
name|EC_R_NOT_IMPLEMENTED
value|126
define|#
directive|define
name|EC_R_NOT_INITIALIZED
value|111
define|#
directive|define
name|EC_R_NO_FIELD_MOD
value|133
define|#
directive|define
name|EC_R_PASSED_NULL_PARAMETER
value|134
define|#
directive|define
name|EC_R_PKPARAMETERS2GROUP_FAILURE
value|127
define|#
directive|define
name|EC_R_POINT_AT_INFINITY
value|106
define|#
directive|define
name|EC_R_POINT_IS_NOT_ON_CURVE
value|107
define|#
directive|define
name|EC_R_SLOT_FULL
value|108
define|#
directive|define
name|EC_R_UNDEFINED_GENERATOR
value|113
define|#
directive|define
name|EC_R_UNDEFINED_ORDER
value|128
define|#
directive|define
name|EC_R_UNKNOWN_GROUP
value|129
define|#
directive|define
name|EC_R_UNKNOWN_ORDER
value|114
define|#
directive|define
name|EC_R_UNSUPPORTED_FIELD
value|131
define|#
directive|define
name|EC_R_WRONG_ORDER
value|130
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

