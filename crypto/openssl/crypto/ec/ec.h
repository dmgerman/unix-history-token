begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/ec/ec.h */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_EC_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_EC_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_NO_EC
end_ifdef

begin_error
error|#
directive|error
error|EC is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
enum|enum
block|{
comment|/* values as defined in X9.62 (ECDSA) and elsewhere */
name|POINT_CONVERSION_COMPRESSED
init|=
literal|2
block|,
name|POINT_CONVERSION_UNCOMPRESSED
init|=
literal|4
block|,
name|POINT_CONVERSION_HYBRID
init|=
literal|6
block|}
name|point_conversion_form_t
typedef|;
typedef|typedef
name|struct
name|ec_method_st
name|EC_METHOD
typedef|;
typedef|typedef
name|struct
name|ec_group_st
comment|/* 	 EC_METHOD *meth; 	 -- field definition 	 -- curve coefficients 	 -- optional generator with associated information (order, cofactor) 	 -- optional extra data (TODO: precomputed table for fast computation of multiples of generator) 	*/
name|EC_GROUP
typedef|;
typedef|typedef
name|struct
name|ec_point_st
name|EC_POINT
typedef|;
comment|/* EC_METHODs for curves over GF(p).  * EC_GFp_simple_method provides the basis for the optimized methods.  */
specifier|const
name|EC_METHOD
modifier|*
name|EC_GFp_simple_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|EC_METHOD
modifier|*
name|EC_GFp_mont_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|const EC_METHOD *EC_GFp_recp_method(void);
comment|/* TODO */
block|const EC_METHOD *EC_GFp_nist_method(void);
comment|/* TODO */
endif|#
directive|endif
name|EC_GROUP
modifier|*
name|EC_GROUP_new
parameter_list|(
specifier|const
name|EC_METHOD
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_GROUP_free
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_GROUP_clear_free
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_copy
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|EC_METHOD
modifier|*
name|EC_GROUP_method_of
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
comment|/* We don't have types for field specifications and field elements in general.  * Otherwise we could declare  *     int EC_GROUP_set_curve(EC_GROUP *, .....);  */
name|int
name|EC_GROUP_set_curve_GFp
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_curve_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|p
parameter_list|,
name|BIGNUM
modifier|*
name|a
parameter_list|,
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* EC_GROUP_new_GFp() calls EC_GROUP_new() and EC_GROUP_set_GFp()  * after choosing an appropriate EC_METHOD */
name|EC_GROUP
modifier|*
name|EC_GROUP_new_curve_GFp
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_set_generator
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|generator
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|order
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|cofactor
parameter_list|)
function_decl|;
name|EC_POINT
modifier|*
name|EC_GROUP_get0_generator
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_order
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|order
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_get_cofactor
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|cofactor
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|EC_POINT
modifier|*
name|EC_POINT_new
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_POINT_free
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|void
name|EC_POINT_clear_free
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_copy
parameter_list|(
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|EC_METHOD
modifier|*
name|EC_POINT_method_of
parameter_list|(
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_to_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_get_Jprojective_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BIGNUM
modifier|*
name|z
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_affine_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_get_affine_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|BIGNUM
modifier|*
name|y
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_set_compressed_coordinates_GFp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|x
parameter_list|,
name|int
name|y_bit
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|size_t
name|EC_POINT_point2oct
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|point_conversion_form_t
name|form
parameter_list|,
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_oct2point
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_add
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_dbl
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_invert
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_is_at_infinity
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_is_on_curve
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_cmp
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|a
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
name|b
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINTs_make_affine
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
name|EC_POINT
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINTs_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
name|size_t
name|num
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
index|[]
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
index|[]
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_POINT_mul
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
parameter_list|,
name|EC_POINT
modifier|*
name|r
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
specifier|const
name|EC_POINT
modifier|*
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
name|int
name|EC_GROUP_precompute_mult
parameter_list|(
name|EC_GROUP
modifier|*
parameter_list|,
name|BN_CTX
modifier|*
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_EC_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the EC functions. */
comment|/* Function codes. */
define|#
directive|define
name|EC_F_COMPUTE_WNAF
value|143
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_DECODE
value|133
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_ENCODE
value|134
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_MUL
value|131
define|#
directive|define
name|EC_F_EC_GFP_MONT_FIELD_SQR
value|132
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
value|100
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
value|101
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
value|102
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_OCT2POINT
value|103
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT2OCT
value|104
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
value|137
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
value|105
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
value|128
define|#
directive|define
name|EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
value|129
define|#
directive|define
name|EC_F_EC_GROUP_COPY
value|106
define|#
directive|define
name|EC_F_EC_GROUP_GET0_GENERATOR
value|139
define|#
directive|define
name|EC_F_EC_GROUP_GET_COFACTOR
value|140
define|#
directive|define
name|EC_F_EC_GROUP_GET_CURVE_GFP
value|130
define|#
directive|define
name|EC_F_EC_GROUP_GET_ORDER
value|141
define|#
directive|define
name|EC_F_EC_GROUP_NEW
value|108
define|#
directive|define
name|EC_F_EC_GROUP_PRECOMPUTE_MULT
value|142
define|#
directive|define
name|EC_F_EC_GROUP_SET_CURVE_GFP
value|109
define|#
directive|define
name|EC_F_EC_GROUP_SET_EXTRA_DATA
value|110
define|#
directive|define
name|EC_F_EC_GROUP_SET_GENERATOR
value|111
define|#
directive|define
name|EC_F_EC_POINTS_MAKE_AFFINE
value|136
define|#
directive|define
name|EC_F_EC_POINTS_MUL
value|138
define|#
directive|define
name|EC_F_EC_POINT_ADD
value|112
define|#
directive|define
name|EC_F_EC_POINT_CMP
value|113
define|#
directive|define
name|EC_F_EC_POINT_COPY
value|114
define|#
directive|define
name|EC_F_EC_POINT_DBL
value|115
define|#
directive|define
name|EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
value|116
define|#
directive|define
name|EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
value|117
define|#
directive|define
name|EC_F_EC_POINT_IS_AT_INFINITY
value|118
define|#
directive|define
name|EC_F_EC_POINT_IS_ON_CURVE
value|119
define|#
directive|define
name|EC_F_EC_POINT_MAKE_AFFINE
value|120
define|#
directive|define
name|EC_F_EC_POINT_NEW
value|121
define|#
directive|define
name|EC_F_EC_POINT_OCT2POINT
value|122
define|#
directive|define
name|EC_F_EC_POINT_POINT2OCT
value|123
define|#
directive|define
name|EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
value|124
define|#
directive|define
name|EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
value|125
define|#
directive|define
name|EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
value|126
define|#
directive|define
name|EC_F_EC_POINT_SET_TO_INFINITY
value|127
define|#
directive|define
name|EC_F_GFP_MONT_GROUP_SET_CURVE_GFP
value|135
comment|/* Reason codes. */
define|#
directive|define
name|EC_R_BUFFER_TOO_SMALL
value|100
define|#
directive|define
name|EC_R_INCOMPATIBLE_OBJECTS
value|101
define|#
directive|define
name|EC_R_INVALID_ARGUMENT
value|112
define|#
directive|define
name|EC_R_INVALID_COMPRESSED_POINT
value|110
define|#
directive|define
name|EC_R_INVALID_COMPRESSION_BIT
value|109
define|#
directive|define
name|EC_R_INVALID_ENCODING
value|102
define|#
directive|define
name|EC_R_INVALID_FIELD
value|103
define|#
directive|define
name|EC_R_INVALID_FORM
value|104
define|#
directive|define
name|EC_R_NOT_INITIALIZED
value|111
define|#
directive|define
name|EC_R_POINT_AT_INFINITY
value|106
define|#
directive|define
name|EC_R_POINT_IS_NOT_ON_CURVE
value|107
define|#
directive|define
name|EC_R_SLOT_FULL
value|108
define|#
directive|define
name|EC_R_UNDEFINED_GENERATOR
value|113
define|#
directive|define
name|EC_R_UNKNOWN_ORDER
value|114
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

