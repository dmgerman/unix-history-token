begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/des/des.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_DES_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_DES_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|NO_DES
end_ifdef

begin_error
error|#
directive|error
error|DES is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_KERBEROS_DES_H
end_ifdef

begin_error
error|#
directive|error
literal|<openssl/des.h>
error|replaces<kerberos/des.h>.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_comment
comment|/* DES_LONG */
end_comment

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_comment
comment|/* OPENSSL_EXTERN */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|unsigned
name|char
name|des_cblock
index|[
literal|8
index|]
typedef|;
typedef|typedef
comment|/* const */
name|unsigned
name|char
name|const_des_cblock
index|[
literal|8
index|]
typedef|;
comment|/* With "const", gcc 2.8.1 on Solaris thinks that des_cblock *  * and const_des_cblock * are incompatible pointer types. */
typedef|typedef
struct|struct
name|des_ks_struct
block|{
union|union
block|{
name|des_cblock
name|cblock
decl_stmt|;
comment|/* make sure things are correct size on machines with 		 * 8 byte longs */
name|DES_LONG
name|deslong
index|[
literal|2
index|]
decl_stmt|;
block|}
name|ks
union|;
name|int
name|weak_key
decl_stmt|;
block|}
name|des_key_schedule
index|[
literal|16
index|]
typedef|;
define|#
directive|define
name|DES_KEY_SZ
value|(sizeof(des_cblock))
define|#
directive|define
name|DES_SCHEDULE_SZ
value|(sizeof(des_key_schedule))
define|#
directive|define
name|DES_ENCRYPT
value|1
define|#
directive|define
name|DES_DECRYPT
value|0
define|#
directive|define
name|DES_CBC_MODE
value|0
define|#
directive|define
name|DES_PCBC_MODE
value|1
define|#
directive|define
name|des_ecb2_encrypt
parameter_list|(
name|i
parameter_list|,
name|o
parameter_list|,
name|k1
parameter_list|,
name|k2
parameter_list|,
name|e
parameter_list|)
define|\
value|des_ecb3_encrypt((i),(o),(k1),(k2),(k1),(e))
define|#
directive|define
name|des_ede2_cbc_encrypt
parameter_list|(
name|i
parameter_list|,
name|o
parameter_list|,
name|l
parameter_list|,
name|k1
parameter_list|,
name|k2
parameter_list|,
name|iv
parameter_list|,
name|e
parameter_list|)
define|\
value|des_ede3_cbc_encrypt((i),(o),(l),(k1),(k2),(k1),(iv),(e))
define|#
directive|define
name|des_ede2_cfb64_encrypt
parameter_list|(
name|i
parameter_list|,
name|o
parameter_list|,
name|l
parameter_list|,
name|k1
parameter_list|,
name|k2
parameter_list|,
name|iv
parameter_list|,
name|n
parameter_list|,
name|e
parameter_list|)
define|\
value|des_ede3_cfb64_encrypt((i),(o),(l),(k1),(k2),(k1),(iv),(n),(e))
define|#
directive|define
name|des_ede2_ofb64_encrypt
parameter_list|(
name|i
parameter_list|,
name|o
parameter_list|,
name|l
parameter_list|,
name|k1
parameter_list|,
name|k2
parameter_list|,
name|iv
parameter_list|,
name|n
parameter_list|)
define|\
value|des_ede3_ofb64_encrypt((i),(o),(l),(k1),(k2),(k1),(iv),(n))
name|OPENSSL_EXTERN
name|int
name|des_check_key
decl_stmt|;
comment|/* defaults to false */
name|OPENSSL_EXTERN
name|int
name|des_rw_mode
decl_stmt|;
comment|/* defaults to DES_PCBC_MODE */
name|OPENSSL_EXTERN
name|int
name|des_set_weak_key_flag
decl_stmt|;
comment|/* set the weak key flag */
specifier|const
name|char
modifier|*
name|des_options
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|des_ecb3_encrypt
parameter_list|(
name|const_des_cblock
modifier|*
name|input
parameter_list|,
name|des_cblock
modifier|*
name|output
parameter_list|,
name|des_key_schedule
name|ks1
parameter_list|,
name|des_key_schedule
name|ks2
parameter_list|,
name|des_key_schedule
name|ks3
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|DES_LONG
name|des_cbc_cksum
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|des_cblock
modifier|*
name|output
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|const_des_cblock
modifier|*
name|ivec
parameter_list|)
function_decl|;
comment|/* des_cbc_encrypt does not update the IV!  Use des_ncbc_encrypt instead. */
name|void
name|des_cbc_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|unsigned
name|char
modifier|*
name|output
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_ncbc_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|unsigned
name|char
modifier|*
name|output
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_xcbc_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|unsigned
name|char
modifier|*
name|output
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|const_des_cblock
modifier|*
name|inw
parameter_list|,
name|const_des_cblock
modifier|*
name|outw
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_cfb_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
name|numbits
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_ecb_encrypt
parameter_list|(
name|const_des_cblock
modifier|*
name|input
parameter_list|,
name|des_cblock
modifier|*
name|output
parameter_list|,
name|des_key_schedule
name|ks
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
comment|/* 	This is the DES encryption function that gets called by just about 	every other DES routine in the library.  You should not use this 	function except to implement 'modes' of DES.  I say this because the 	functions that call this routine do the conversion from 'char *' to 	long, and this needs to be done to make sure 'non-aligned' memory 	access do not occur.  The characters are loaded 'little endian'. 	Data is a pointer to 2 unsigned long's and ks is the 	des_key_schedule to use.  enc, is non zero specifies encryption, 	zero if decryption. */
name|void
name|des_encrypt
parameter_list|(
name|DES_LONG
modifier|*
name|data
parameter_list|,
name|des_key_schedule
name|ks
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
comment|/* 	This functions is the same as des_encrypt() except that the DES 	initial permutation (IP) and final permutation (FP) have been left 	out.  As for des_encrypt(), you should not use this function. 	It is used by the routines in the library that implement triple DES. 	IP() des_encrypt2() des_encrypt2() des_encrypt2() FP() is the same 	as des_encrypt() des_encrypt() des_encrypt() except faster :-). */
name|void
name|des_encrypt2
parameter_list|(
name|DES_LONG
modifier|*
name|data
parameter_list|,
name|des_key_schedule
name|ks
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_encrypt3
parameter_list|(
name|DES_LONG
modifier|*
name|data
parameter_list|,
name|des_key_schedule
name|ks1
parameter_list|,
name|des_key_schedule
name|ks2
parameter_list|,
name|des_key_schedule
name|ks3
parameter_list|)
function_decl|;
name|void
name|des_decrypt3
parameter_list|(
name|DES_LONG
modifier|*
name|data
parameter_list|,
name|des_key_schedule
name|ks1
parameter_list|,
name|des_key_schedule
name|ks2
parameter_list|,
name|des_key_schedule
name|ks3
parameter_list|)
function_decl|;
name|void
name|des_ede3_cbc_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|unsigned
name|char
modifier|*
name|output
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|ks1
parameter_list|,
name|des_key_schedule
name|ks2
parameter_list|,
name|des_key_schedule
name|ks3
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_ede3_cbcm_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|ks1
parameter_list|,
name|des_key_schedule
name|ks2
parameter_list|,
name|des_key_schedule
name|ks3
parameter_list|,
name|des_cblock
modifier|*
name|ivec1
parameter_list|,
name|des_cblock
modifier|*
name|ivec2
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_ede3_cfb64_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|ks1
parameter_list|,
name|des_key_schedule
name|ks2
parameter_list|,
name|des_key_schedule
name|ks3
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
modifier|*
name|num
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_ede3_ofb64_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|ks1
parameter_list|,
name|des_key_schedule
name|ks2
parameter_list|,
name|des_key_schedule
name|ks3
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
modifier|*
name|num
parameter_list|)
function_decl|;
name|void
name|des_xwhite_in2out
parameter_list|(
name|const_des_cblock
modifier|*
name|des_key
parameter_list|,
name|const_des_cblock
modifier|*
name|in_white
parameter_list|,
name|des_cblock
modifier|*
name|out_white
parameter_list|)
function_decl|;
name|int
name|des_enc_read
parameter_list|(
name|int
name|fd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|des_key_schedule
name|sched
parameter_list|,
name|des_cblock
modifier|*
name|iv
parameter_list|)
function_decl|;
name|int
name|des_enc_write
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|des_key_schedule
name|sched
parameter_list|,
name|des_cblock
modifier|*
name|iv
parameter_list|)
function_decl|;
name|char
modifier|*
name|des_fcrypt
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
specifier|const
name|char
modifier|*
name|salt
parameter_list|,
name|char
modifier|*
name|ret
parameter_list|)
function_decl|;
name|char
modifier|*
name|des_crypt
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
specifier|const
name|char
modifier|*
name|salt
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PERL5
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NeXT
argument_list|)
name|char
modifier|*
name|crypt
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
specifier|const
name|char
modifier|*
name|salt
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|des_ofb_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
name|numbits
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|)
function_decl|;
name|void
name|des_pcbc_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|unsigned
name|char
modifier|*
name|output
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|DES_LONG
name|des_quad_cksum
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|des_cblock
name|output
index|[]
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|out_count
parameter_list|,
name|des_cblock
modifier|*
name|seed
parameter_list|)
function_decl|;
name|void
name|des_random_seed
parameter_list|(
name|des_cblock
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|des_new_random_key
parameter_list|(
name|des_cblock
modifier|*
name|key
parameter_list|)
function_decl|;
name|void
name|des_init_random_number_generator
parameter_list|(
name|des_cblock
modifier|*
name|seed
parameter_list|)
function_decl|;
name|void
name|des_rand_data
parameter_list|(
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|des_random_key
parameter_list|(
name|des_cblock
modifier|*
name|ret
parameter_list|)
function_decl|;
name|int
name|des_read_password
parameter_list|(
name|des_cblock
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
function_decl|;
name|int
name|des_read_2passwords
parameter_list|(
name|des_cblock
modifier|*
name|key1
parameter_list|,
name|des_cblock
modifier|*
name|key2
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
function_decl|;
name|int
name|des_read_pw_string
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
function_decl|;
name|void
name|des_set_odd_parity
parameter_list|(
name|des_cblock
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|des_check_key_parity
parameter_list|(
name|const_des_cblock
modifier|*
name|key
parameter_list|)
function_decl|;
name|int
name|des_is_weak_key
parameter_list|(
name|const_des_cblock
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/* des_set_key (= set_key = des_key_sched = key_sched) calls  * des_set_key_checked if global variable des_check_key is set,  * des_set_key_unchecked otherwise. */
name|int
name|des_set_key
parameter_list|(
name|const_des_cblock
modifier|*
name|key
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|)
function_decl|;
name|int
name|des_key_sched
parameter_list|(
name|const_des_cblock
modifier|*
name|key
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|)
function_decl|;
name|int
name|des_set_key_checked
parameter_list|(
name|const_des_cblock
modifier|*
name|key
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|)
function_decl|;
name|void
name|des_set_key_unchecked
parameter_list|(
name|const_des_cblock
modifier|*
name|key
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|)
function_decl|;
name|void
name|des_string_to_key
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|des_cblock
modifier|*
name|key
parameter_list|)
function_decl|;
name|void
name|des_string_to_2keys
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|des_cblock
modifier|*
name|key1
parameter_list|,
name|des_cblock
modifier|*
name|key2
parameter_list|)
function_decl|;
name|void
name|des_cfb64_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
modifier|*
name|num
parameter_list|,
name|int
name|enc
parameter_list|)
function_decl|;
name|void
name|des_ofb64_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|long
name|length
parameter_list|,
name|des_key_schedule
name|schedule
parameter_list|,
name|des_cblock
modifier|*
name|ivec
parameter_list|,
name|int
modifier|*
name|num
parameter_list|)
function_decl|;
name|int
name|des_read_pw
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|char
modifier|*
name|buff
parameter_list|,
name|int
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|verify
parameter_list|)
function_decl|;
comment|/* The following definitions provide compatibility with the MIT Kerberos  * library. The des_key_schedule structure is not binary compatible. */
define|#
directive|define
name|_KERBEROS_DES_H
define|#
directive|define
name|KRBDES_ENCRYPT
value|DES_ENCRYPT
define|#
directive|define
name|KRBDES_DECRYPT
value|DES_DECRYPT
ifdef|#
directive|ifdef
name|KERBEROS
define|#
directive|define
name|ENCRYPT
value|DES_ENCRYPT
define|#
directive|define
name|DECRYPT
value|DES_DECRYPT
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NCOMPAT
define|#
directive|define
name|C_Block
value|des_cblock
define|#
directive|define
name|Key_schedule
value|des_key_schedule
define|#
directive|define
name|KEY_SZ
value|DES_KEY_SZ
define|#
directive|define
name|string_to_key
value|des_string_to_key
define|#
directive|define
name|read_pw_string
value|des_read_pw_string
define|#
directive|define
name|random_key
value|des_random_key
define|#
directive|define
name|pcbc_encrypt
value|des_pcbc_encrypt
define|#
directive|define
name|set_key
value|des_set_key
define|#
directive|define
name|key_sched
value|des_key_sched
define|#
directive|define
name|ecb_encrypt
value|des_ecb_encrypt
define|#
directive|define
name|cbc_encrypt
value|des_cbc_encrypt
define|#
directive|define
name|ncbc_encrypt
value|des_ncbc_encrypt
define|#
directive|define
name|xcbc_encrypt
value|des_xcbc_encrypt
define|#
directive|define
name|cbc_cksum
value|des_cbc_cksum
define|#
directive|define
name|quad_cksum
value|des_quad_cksum
define|#
directive|define
name|check_parity
value|des_check_key_parity
endif|#
directive|endif
typedef|typedef
name|des_key_schedule
name|bit_64
typedef|;
define|#
directive|define
name|des_fixup_key_parity
value|des_set_odd_parity
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

