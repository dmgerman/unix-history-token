begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* asn1t.h */
end_comment

begin_comment
comment|/*  * Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL project  * 2006.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    licensing@OpenSSL.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_comment
comment|/* Internal ASN1 structures and functions: not for application use */
end_comment

begin_function_decl
name|int
name|asn1_utctime_to_tm
parameter_list|(
name|struct
name|tm
modifier|*
name|tm
parameter_list|,
specifier|const
name|ASN1_UTCTIME
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|asn1_generalizedtime_to_tm
parameter_list|(
name|struct
name|tm
modifier|*
name|tm
parameter_list|,
specifier|const
name|ASN1_GENERALIZEDTIME
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ASN1 print context structure */
end_comment

begin_struct
struct|struct
name|asn1_pctx_st
block|{
name|unsigned
name|long
name|flags
decl_stmt|;
name|unsigned
name|long
name|nm_flags
decl_stmt|;
name|unsigned
name|long
name|cert_flags
decl_stmt|;
name|unsigned
name|long
name|oid_flags
decl_stmt|;
name|unsigned
name|long
name|str_flags
decl_stmt|;
block|}
comment|/* ASN1_PCTX */
struct|;
end_struct

begin_comment
comment|/* ASN1 public key method structure */
end_comment

begin_struct
struct|struct
name|evp_pkey_asn1_method_st
block|{
name|int
name|pkey_id
decl_stmt|;
name|int
name|pkey_base_id
decl_stmt|;
name|unsigned
name|long
name|pkey_flags
decl_stmt|;
name|char
modifier|*
name|pem_str
decl_stmt|;
name|char
modifier|*
name|info
decl_stmt|;
name|int
function_decl|(
modifier|*
name|pub_decode
function_decl|)
parameter_list|(
name|EVP_PKEY
modifier|*
name|pk
parameter_list|,
name|X509_PUBKEY
modifier|*
name|pub
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pub_encode
function_decl|)
parameter_list|(
name|X509_PUBKEY
modifier|*
name|pub
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pub_cmp
function_decl|)
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pub_print
function_decl|)
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|int
name|indent
parameter_list|,
name|ASN1_PCTX
modifier|*
name|pctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|priv_decode
function_decl|)
parameter_list|(
name|EVP_PKEY
modifier|*
name|pk
parameter_list|,
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|p8inf
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|priv_encode
function_decl|)
parameter_list|(
name|PKCS8_PRIV_KEY_INFO
modifier|*
name|p8
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|priv_print
function_decl|)
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|int
name|indent
parameter_list|,
name|ASN1_PCTX
modifier|*
name|pctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pkey_size
function_decl|)
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pkey_bits
function_decl|)
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|param_decode
function_decl|)
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pder
parameter_list|,
name|int
name|derlen
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|param_encode
function_decl|)
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pder
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|param_missing
function_decl|)
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|param_copy
function_decl|)
parameter_list|(
name|EVP_PKEY
modifier|*
name|to
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|from
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|param_cmp
function_decl|)
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|param_print
function_decl|)
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
specifier|const
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|int
name|indent
parameter_list|,
name|ASN1_PCTX
modifier|*
name|pctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sig_print
function_decl|)
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
specifier|const
name|X509_ALGOR
modifier|*
name|sigalg
parameter_list|,
specifier|const
name|ASN1_STRING
modifier|*
name|sig
parameter_list|,
name|int
name|indent
parameter_list|,
name|ASN1_PCTX
modifier|*
name|pctx
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|pkey_free
function_decl|)
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pkey_ctrl
function_decl|)
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|int
name|op
parameter_list|,
name|long
name|arg1
parameter_list|,
name|void
modifier|*
name|arg2
parameter_list|)
function_decl|;
comment|/* Legacy functions for old PEM */
name|int
function_decl|(
modifier|*
name|old_priv_decode
function_decl|)
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pder
parameter_list|,
name|int
name|derlen
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|old_priv_encode
function_decl|)
parameter_list|(
specifier|const
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pder
parameter_list|)
function_decl|;
comment|/* Custom ASN1 signature verification */
name|int
function_decl|(
modifier|*
name|item_verify
function_decl|)
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|void
modifier|*
name|asn
parameter_list|,
name|X509_ALGOR
modifier|*
name|a
parameter_list|,
name|ASN1_BIT_STRING
modifier|*
name|sig
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|item_sign
function_decl|)
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|void
modifier|*
name|asn
parameter_list|,
name|X509_ALGOR
modifier|*
name|alg1
parameter_list|,
name|X509_ALGOR
modifier|*
name|alg2
parameter_list|,
name|ASN1_BIT_STRING
modifier|*
name|sig
parameter_list|)
function_decl|;
block|}
comment|/* EVP_PKEY_ASN1_METHOD */
struct|;
end_struct

begin_comment
comment|/*  * Method to handle CRL access. In general a CRL could be very large (several  * Mb) and can consume large amounts of resources if stored in memory by  * multiple processes. This method allows general CRL operations to be  * redirected to more efficient callbacks: for example a CRL entry database.  */
end_comment

begin_define
define|#
directive|define
name|X509_CRL_METHOD_DYNAMIC
value|1
end_define

begin_struct
struct|struct
name|x509_crl_method_st
block|{
name|int
name|flags
decl_stmt|;
name|int
function_decl|(
modifier|*
name|crl_init
function_decl|)
parameter_list|(
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|crl_free
function_decl|)
parameter_list|(
name|X509_CRL
modifier|*
name|crl
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|crl_lookup
function_decl|)
parameter_list|(
name|X509_CRL
modifier|*
name|crl
parameter_list|,
name|X509_REVOKED
modifier|*
modifier|*
name|ret
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|ser
parameter_list|,
name|X509_NAME
modifier|*
name|issuer
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|crl_verify
function_decl|)
parameter_list|(
name|X509_CRL
modifier|*
name|crl
parameter_list|,
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

end_unit

