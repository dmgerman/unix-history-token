begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/asn1/asn1.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_ASN1_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_ASN1_H
end_define

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_include
include|#
directive|include
file|<openssl/stack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/safestack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/symhacks.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_BUILD_SHLIBCRYPTO
end_ifdef

begin_undef
undef|#
directive|undef
name|OPENSSL_EXTERN
end_undef

begin_define
define|#
directive|define
name|OPENSSL_EXTERN
value|OPENSSL_EXPORT
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|V_ASN1_UNIVERSAL
value|0x00
define|#
directive|define
name|V_ASN1_APPLICATION
value|0x40
define|#
directive|define
name|V_ASN1_CONTEXT_SPECIFIC
value|0x80
define|#
directive|define
name|V_ASN1_PRIVATE
value|0xc0
define|#
directive|define
name|V_ASN1_CONSTRUCTED
value|0x20
define|#
directive|define
name|V_ASN1_PRIMITIVE_TAG
value|0x1f
define|#
directive|define
name|V_ASN1_PRIMATIVE_TAG
value|0x1f
define|#
directive|define
name|V_ASN1_APP_CHOOSE
value|-2
comment|/* let the recipient choose */
define|#
directive|define
name|V_ASN1_OTHER
value|-3
comment|/* used in ASN1_TYPE */
define|#
directive|define
name|V_ASN1_ANY
value|-4
comment|/* used in ASN1 template code */
define|#
directive|define
name|V_ASN1_NEG
value|0x100
comment|/* negative flag */
define|#
directive|define
name|V_ASN1_UNDEF
value|-1
define|#
directive|define
name|V_ASN1_EOC
value|0
define|#
directive|define
name|V_ASN1_BOOLEAN
value|1
comment|/**/
define|#
directive|define
name|V_ASN1_INTEGER
value|2
define|#
directive|define
name|V_ASN1_NEG_INTEGER
value|(2 | V_ASN1_NEG)
define|#
directive|define
name|V_ASN1_BIT_STRING
value|3
define|#
directive|define
name|V_ASN1_OCTET_STRING
value|4
define|#
directive|define
name|V_ASN1_NULL
value|5
define|#
directive|define
name|V_ASN1_OBJECT
value|6
define|#
directive|define
name|V_ASN1_OBJECT_DESCRIPTOR
value|7
define|#
directive|define
name|V_ASN1_EXTERNAL
value|8
define|#
directive|define
name|V_ASN1_REAL
value|9
define|#
directive|define
name|V_ASN1_ENUMERATED
value|10
define|#
directive|define
name|V_ASN1_NEG_ENUMERATED
value|(10 | V_ASN1_NEG)
define|#
directive|define
name|V_ASN1_UTF8STRING
value|12
define|#
directive|define
name|V_ASN1_SEQUENCE
value|16
define|#
directive|define
name|V_ASN1_SET
value|17
define|#
directive|define
name|V_ASN1_NUMERICSTRING
value|18
comment|/**/
define|#
directive|define
name|V_ASN1_PRINTABLESTRING
value|19
define|#
directive|define
name|V_ASN1_T61STRING
value|20
define|#
directive|define
name|V_ASN1_TELETEXSTRING
value|20
comment|/* alias */
define|#
directive|define
name|V_ASN1_VIDEOTEXSTRING
value|21
comment|/**/
define|#
directive|define
name|V_ASN1_IA5STRING
value|22
define|#
directive|define
name|V_ASN1_UTCTIME
value|23
define|#
directive|define
name|V_ASN1_GENERALIZEDTIME
value|24
comment|/**/
define|#
directive|define
name|V_ASN1_GRAPHICSTRING
value|25
comment|/**/
define|#
directive|define
name|V_ASN1_ISO64STRING
value|26
comment|/**/
define|#
directive|define
name|V_ASN1_VISIBLESTRING
value|26
comment|/* alias */
define|#
directive|define
name|V_ASN1_GENERALSTRING
value|27
comment|/**/
define|#
directive|define
name|V_ASN1_UNIVERSALSTRING
value|28
comment|/**/
define|#
directive|define
name|V_ASN1_BMPSTRING
value|30
comment|/* For use with d2i_ASN1_type_bytes() */
define|#
directive|define
name|B_ASN1_NUMERICSTRING
value|0x0001
define|#
directive|define
name|B_ASN1_PRINTABLESTRING
value|0x0002
define|#
directive|define
name|B_ASN1_T61STRING
value|0x0004
define|#
directive|define
name|B_ASN1_TELETEXSTRING
value|0x0004
define|#
directive|define
name|B_ASN1_VIDEOTEXSTRING
value|0x0008
define|#
directive|define
name|B_ASN1_IA5STRING
value|0x0010
define|#
directive|define
name|B_ASN1_GRAPHICSTRING
value|0x0020
define|#
directive|define
name|B_ASN1_ISO64STRING
value|0x0040
define|#
directive|define
name|B_ASN1_VISIBLESTRING
value|0x0040
define|#
directive|define
name|B_ASN1_GENERALSTRING
value|0x0080
define|#
directive|define
name|B_ASN1_UNIVERSALSTRING
value|0x0100
define|#
directive|define
name|B_ASN1_OCTET_STRING
value|0x0200
define|#
directive|define
name|B_ASN1_BIT_STRING
value|0x0400
define|#
directive|define
name|B_ASN1_BMPSTRING
value|0x0800
define|#
directive|define
name|B_ASN1_UNKNOWN
value|0x1000
define|#
directive|define
name|B_ASN1_UTF8STRING
value|0x2000
define|#
directive|define
name|B_ASN1_UTCTIME
value|0x4000
define|#
directive|define
name|B_ASN1_GENERALIZEDTIME
value|0x8000
comment|/* For use with ASN1_mbstring_copy() */
define|#
directive|define
name|MBSTRING_FLAG
value|0x1000
define|#
directive|define
name|MBSTRING_ASC
value|(MBSTRING_FLAG|1)
define|#
directive|define
name|MBSTRING_BMP
value|(MBSTRING_FLAG|2)
define|#
directive|define
name|MBSTRING_UNIV
value|(MBSTRING_FLAG|3)
define|#
directive|define
name|MBSTRING_UTF8
value|(MBSTRING_FLAG|4)
struct_decl|struct
name|X509_algor_st
struct_decl|;
define|#
directive|define
name|DECLARE_ASN1_SET_OF
parameter_list|(
name|type
parameter_list|)
comment|/* filled in by mkstack.pl */
define|#
directive|define
name|IMPLEMENT_ASN1_SET_OF
parameter_list|(
name|type
parameter_list|)
comment|/* nothing, no longer needed */
typedef|typedef
struct|struct
name|asn1_ctx_st
block|{
name|unsigned
name|char
modifier|*
name|p
decl_stmt|;
comment|/* work char pointer */
name|int
name|eos
decl_stmt|;
comment|/* end of sequence read for indefinite encoding */
name|int
name|error
decl_stmt|;
comment|/* error code to use when returning an error */
name|int
name|inf
decl_stmt|;
comment|/* constructed if 0x20, indefinite is 0x21 */
name|int
name|tag
decl_stmt|;
comment|/* tag from last 'get object' */
name|int
name|xclass
decl_stmt|;
comment|/* class from last 'get object' */
name|long
name|slen
decl_stmt|;
comment|/* length of last 'get object' */
name|unsigned
name|char
modifier|*
name|max
decl_stmt|;
comment|/* largest value of p allowed */
name|unsigned
name|char
modifier|*
name|q
decl_stmt|;
comment|/* temporary variable */
name|unsigned
name|char
modifier|*
modifier|*
name|pp
decl_stmt|;
comment|/* variable */
name|int
name|line
decl_stmt|;
comment|/* used in error processing */
block|}
name|ASN1_CTX
typedef|;
comment|/* These are used internally in the ASN1_OBJECT to keep track of  * whether the names and data need to be free()ed */
define|#
directive|define
name|ASN1_OBJECT_FLAG_DYNAMIC
value|0x01
comment|/* internal use */
define|#
directive|define
name|ASN1_OBJECT_FLAG_CRITICAL
value|0x02
comment|/* critical x509v3 object id */
define|#
directive|define
name|ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
value|0x04
comment|/* internal use */
define|#
directive|define
name|ASN1_OBJECT_FLAG_DYNAMIC_DATA
value|0x08
comment|/* internal use */
typedef|typedef
struct|struct
name|asn1_object_st
block|{
specifier|const
name|char
modifier|*
name|sn
decl_stmt|,
modifier|*
name|ln
decl_stmt|;
name|int
name|nid
decl_stmt|;
name|int
name|length
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
name|int
name|flags
decl_stmt|;
comment|/* Should we free this one */
block|}
name|ASN1_OBJECT
typedef|;
define|#
directive|define
name|ASN1_STRING_FLAG_BITS_LEFT
value|0x08
comment|/* Set if 0x07 has bits left value */
comment|/* This is the base type that holds just about everything :-) */
typedef|typedef
struct|struct
name|asn1_string_st
block|{
name|int
name|length
decl_stmt|;
name|int
name|type
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
comment|/* The value of the following field depends on the type being 	 * held.  It is mostly being used for BIT_STRING so if the 	 * input data has a non-zero 'unused bits' value, it will be 	 * handled correctly */
name|long
name|flags
decl_stmt|;
block|}
name|ASN1_STRING
typedef|;
comment|/* ASN1_ENCODING structure: this is used to save the received  * encoding of an ASN1 type. This is useful to get round  * problems with invalid encodings which can break signatures.  */
typedef|typedef
struct|struct
name|ASN1_ENCODING_st
block|{
name|unsigned
name|char
modifier|*
name|enc
decl_stmt|;
comment|/* DER encoding */
name|long
name|len
decl_stmt|;
comment|/* Length of encoding */
name|int
name|modified
decl_stmt|;
comment|/* set to 1 if 'enc' is invalid */
block|}
name|ASN1_ENCODING
typedef|;
comment|/* Used with ASN1 LONG type: if a long is set to this it is omitted */
define|#
directive|define
name|ASN1_LONG_UNDEF
value|0x7fffffffL
define|#
directive|define
name|STABLE_FLAGS_MALLOC
value|0x01
define|#
directive|define
name|STABLE_NO_MASK
value|0x02
define|#
directive|define
name|DIRSTRING_TYPE
define|\
value|(B_ASN1_PRINTABLESTRING|B_ASN1_T61STRING|B_ASN1_BMPSTRING|B_ASN1_UTF8STRING)
define|#
directive|define
name|PKCS9STRING_TYPE
value|(DIRSTRING_TYPE|B_ASN1_IA5STRING)
typedef|typedef
struct|struct
name|asn1_string_table_st
block|{
name|int
name|nid
decl_stmt|;
name|long
name|minsize
decl_stmt|;
name|long
name|maxsize
decl_stmt|;
name|unsigned
name|long
name|mask
decl_stmt|;
name|unsigned
name|long
name|flags
decl_stmt|;
block|}
name|ASN1_STRING_TABLE
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|ASN1_STRING_TABLE
argument_list|)
comment|/* size limits: this stuff is taken straight from RFC2459 */
define|#
directive|define
name|ub_name
value|32768
define|#
directive|define
name|ub_common_name
value|64
define|#
directive|define
name|ub_locality_name
value|128
define|#
directive|define
name|ub_state_name
value|128
define|#
directive|define
name|ub_organization_name
value|64
define|#
directive|define
name|ub_organization_unit_name
value|64
define|#
directive|define
name|ub_title
value|64
define|#
directive|define
name|ub_email_address
value|128
comment|/* Declarations for template structures: for full definitions  * see asn1t.h  */
typedef|typedef
name|struct
name|ASN1_TEMPLATE_st
name|ASN1_TEMPLATE
typedef|;
typedef|typedef
name|struct
name|ASN1_ITEM_st
name|ASN1_ITEM
typedef|;
typedef|typedef
name|struct
name|ASN1_TLC_st
name|ASN1_TLC
typedef|;
comment|/* This is just an opaque pointer */
typedef|typedef
name|struct
name|ASN1_VALUE_st
name|ASN1_VALUE
typedef|;
comment|/* Declare ASN1 functions: the implement macro in in asn1t.h */
define|#
directive|define
name|DECLARE_ASN1_FUNCTIONS
parameter_list|(
name|type
parameter_list|)
value|DECLARE_ASN1_FUNCTIONS_name(type, type)
define|#
directive|define
name|DECLARE_ASN1_FUNCTIONS_name
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
define|\
value|type *name##_new(void); \ 	void name##_free(type *a); \ 	DECLARE_ASN1_ENCODE_FUNCTIONS(type, name, name)
define|#
directive|define
name|DECLARE_ASN1_FUNCTIONS_fname
parameter_list|(
name|type
parameter_list|,
name|itname
parameter_list|,
name|name
parameter_list|)
define|\
value|type *name##_new(void); \ 	void name##_free(type *a); \ 	DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)
define|#
directive|define
name|DECLARE_ASN1_ENCODE_FUNCTIONS
parameter_list|(
name|type
parameter_list|,
name|itname
parameter_list|,
name|name
parameter_list|)
define|\
value|type *d2i_##name(type **a, unsigned char **in, long len); \ 	int i2d_##name(type *a, unsigned char **out); \ 	DECLARE_ASN1_ITEM(itname)
define|#
directive|define
name|DECLARE_ASN1_ENCODE_FUNCTIONS_const
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
define|\
value|type *d2i_##name(type **a, const unsigned char **in, long len); \ 	int i2d_##name(const type *a, unsigned char **out); \ 	DECLARE_ASN1_ITEM(name)
define|#
directive|define
name|DECLARE_ASN1_FUNCTIONS_const
parameter_list|(
name|name
parameter_list|)
define|\
value|name *name##_new(void); \ 	void name##_free(name *a);
comment|/* The following macros and typedefs allow an ASN1_ITEM  * to be embedded in a structure and referenced. Since  * the ASN1_ITEM pointers need to be globally accessible  * (possibly from shared libraries) they may exist in  * different forms. On platforms that support it the  * ASN1_ITEM structure itself will be globally exported.  * Other platforms will export a function that returns  * an ASN1_ITEM pointer.  *  * To handle both cases transparently the macros below  * should be used instead of hard coding an ASN1_ITEM  * pointer in a structure.  *  * The structure will look like this:  *  * typedef struct SOMETHING_st {  *      ...  *      ASN1_ITEM_EXP *iptr;  *      ...  * } SOMETHING;   *  * It would be initialised as e.g.:  *  * SOMETHING somevar = {...,ASN1_ITEM_ref(X509),...};  *  * and the actual pointer extracted with:  *  * const ASN1_ITEM *it = ASN1_ITEM_ptr(somevar.iptr);  *  * Finally an ASN1_ITEM pointer can be extracted from an  * appropriate reference with: ASN1_ITEM_rptr(X509). This  * would be used when a function takes an ASN1_ITEM * argument.  *  */
ifndef|#
directive|ifndef
name|OPENSSL_EXPORT_VAR_AS_FUNCTION
comment|/* ASN1_ITEM pointer exported type */
typedef|typedef
specifier|const
name|ASN1_ITEM
name|ASN1_ITEM_EXP
typedef|;
comment|/* Macro to obtain ASN1_ITEM pointer from exported type */
define|#
directive|define
name|ASN1_ITEM_ptr
parameter_list|(
name|iptr
parameter_list|)
value|(iptr)
comment|/* Macro to include ASN1_ITEM pointer from base type */
define|#
directive|define
name|ASN1_ITEM_ref
parameter_list|(
name|iptr
parameter_list|)
value|(&(iptr##_it))
define|#
directive|define
name|ASN1_ITEM_rptr
parameter_list|(
name|ref
parameter_list|)
value|(&(ref##_it))
define|#
directive|define
name|DECLARE_ASN1_ITEM
parameter_list|(
name|name
parameter_list|)
define|\
value|OPENSSL_EXTERN const ASN1_ITEM name##_it;
else|#
directive|else
comment|/* Platforms that can't easily handle shared global variables are declared  * as functions returning ASN1_ITEM pointers.  */
comment|/* ASN1_ITEM pointer exported type */
typedef|typedef
specifier|const
name|ASN1_ITEM
modifier|*
name|ASN1_ITEM_EXP
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Macro to obtain ASN1_ITEM pointer from exported type */
define|#
directive|define
name|ASN1_ITEM_ptr
parameter_list|(
name|iptr
parameter_list|)
value|(iptr())
comment|/* Macro to include ASN1_ITEM pointer from base type */
define|#
directive|define
name|ASN1_ITEM_ref
parameter_list|(
name|iptr
parameter_list|)
value|(iptr##_it)
define|#
directive|define
name|ASN1_ITEM_rptr
parameter_list|(
name|ref
parameter_list|)
value|(ref##_it())
define|#
directive|define
name|DECLARE_ASN1_ITEM
parameter_list|(
name|name
parameter_list|)
define|\
value|const ASN1_ITEM * name##_it(void);
endif|#
directive|endif
comment|/* Parameters used by ASN1_STRING_print_ex() */
comment|/* These determine which characters to escape:  * RFC2253 special characters, control characters and  * MSB set characters  */
define|#
directive|define
name|ASN1_STRFLGS_ESC_2253
value|1
define|#
directive|define
name|ASN1_STRFLGS_ESC_CTRL
value|2
define|#
directive|define
name|ASN1_STRFLGS_ESC_MSB
value|4
comment|/* This flag determines how we do escaping: normally  * RC2253 backslash only, set this to use backslash and  * quote.  */
define|#
directive|define
name|ASN1_STRFLGS_ESC_QUOTE
value|8
comment|/* These three flags are internal use only. */
comment|/* Character is a valid PrintableString character */
define|#
directive|define
name|CHARTYPE_PRINTABLESTRING
value|0x10
comment|/* Character needs escaping if it is the first character */
define|#
directive|define
name|CHARTYPE_FIRST_ESC_2253
value|0x20
comment|/* Character needs escaping if it is the last character */
define|#
directive|define
name|CHARTYPE_LAST_ESC_2253
value|0x40
comment|/* NB the internal flags are safely reused below by flags  * handled at the top level.  */
comment|/* If this is set we convert all character strings  * to UTF8 first   */
define|#
directive|define
name|ASN1_STRFLGS_UTF8_CONVERT
value|0x10
comment|/* If this is set we don't attempt to interpret content:  * just assume all strings are 1 byte per character. This  * will produce some pretty odd looking output!  */
define|#
directive|define
name|ASN1_STRFLGS_IGNORE_TYPE
value|0x20
comment|/* If this is set we include the string type in the output */
define|#
directive|define
name|ASN1_STRFLGS_SHOW_TYPE
value|0x40
comment|/* This determines which strings to display and which to  * 'dump' (hex dump of content octets or DER encoding). We can  * only dump non character strings or everything. If we  * don't dump 'unknown' they are interpreted as character  * strings with 1 octet per character and are subject to  * the usual escaping options.  */
define|#
directive|define
name|ASN1_STRFLGS_DUMP_ALL
value|0x80
define|#
directive|define
name|ASN1_STRFLGS_DUMP_UNKNOWN
value|0x100
comment|/* These determine what 'dumping' does, we can dump the  * content octets or the DER encoding: both use the  * RFC2253 #XXXXX notation.  */
define|#
directive|define
name|ASN1_STRFLGS_DUMP_DER
value|0x200
comment|/* All the string flags consistent with RFC2253,  * escaping control characters isn't essential in  * RFC2253 but it is advisable anyway.  */
define|#
directive|define
name|ASN1_STRFLGS_RFC2253
value|(ASN1_STRFLGS_ESC_2253 | \ 				ASN1_STRFLGS_ESC_CTRL | \ 				ASN1_STRFLGS_ESC_MSB | \ 				ASN1_STRFLGS_UTF8_CONVERT | \ 				ASN1_STRFLGS_DUMP_UNKNOWN | \ 				ASN1_STRFLGS_DUMP_DER)
name|DECLARE_STACK_OF
argument_list|(
argument|ASN1_INTEGER
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|ASN1_INTEGER
argument_list|)
name|DECLARE_STACK_OF
argument_list|(
argument|ASN1_GENERALSTRING
argument_list|)
typedef|typedef
struct|struct
name|asn1_type_st
block|{
name|int
name|type
decl_stmt|;
union|union
block|{
name|char
modifier|*
name|ptr
decl_stmt|;
name|ASN1_BOOLEAN
name|boolean
decl_stmt|;
name|ASN1_STRING
modifier|*
name|asn1_string
decl_stmt|;
name|ASN1_OBJECT
modifier|*
name|object
decl_stmt|;
name|ASN1_INTEGER
modifier|*
name|integer
decl_stmt|;
name|ASN1_ENUMERATED
modifier|*
name|enumerated
decl_stmt|;
name|ASN1_BIT_STRING
modifier|*
name|bit_string
decl_stmt|;
name|ASN1_OCTET_STRING
modifier|*
name|octet_string
decl_stmt|;
name|ASN1_PRINTABLESTRING
modifier|*
name|printablestring
decl_stmt|;
name|ASN1_T61STRING
modifier|*
name|t61string
decl_stmt|;
name|ASN1_IA5STRING
modifier|*
name|ia5string
decl_stmt|;
name|ASN1_GENERALSTRING
modifier|*
name|generalstring
decl_stmt|;
name|ASN1_BMPSTRING
modifier|*
name|bmpstring
decl_stmt|;
name|ASN1_UNIVERSALSTRING
modifier|*
name|universalstring
decl_stmt|;
name|ASN1_UTCTIME
modifier|*
name|utctime
decl_stmt|;
name|ASN1_GENERALIZEDTIME
modifier|*
name|generalizedtime
decl_stmt|;
name|ASN1_VISIBLESTRING
modifier|*
name|visiblestring
decl_stmt|;
name|ASN1_UTF8STRING
modifier|*
name|utf8string
decl_stmt|;
comment|/* set and sequence are left complete and still 		 * contain the set or sequence bytes */
name|ASN1_STRING
modifier|*
name|set
decl_stmt|;
name|ASN1_STRING
modifier|*
name|sequence
decl_stmt|;
block|}
name|value
union|;
block|}
name|ASN1_TYPE
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|ASN1_TYPE
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|ASN1_TYPE
argument_list|)
typedef|typedef
struct|struct
name|asn1_method_st
block|{
name|int
function_decl|(
modifier|*
name|i2d
function_decl|)
parameter_list|()
function_decl|;
name|char
modifier|*
function_decl|(
modifier|*
name|d2i
function_decl|)
parameter_list|()
function_decl|;
name|char
modifier|*
function_decl|(
modifier|*
name|create
function_decl|)
parameter_list|()
function_decl|;
name|void
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|()
function_decl|;
block|}
name|ASN1_METHOD
typedef|;
comment|/* This is used when parsing some Netscape objects */
typedef|typedef
struct|struct
name|asn1_header_st
block|{
name|ASN1_OCTET_STRING
modifier|*
name|header
decl_stmt|;
name|char
modifier|*
name|data
decl_stmt|;
name|ASN1_METHOD
modifier|*
name|meth
decl_stmt|;
block|}
name|ASN1_HEADER
typedef|;
comment|/* This is used to contain a list of bit names */
typedef|typedef
struct|struct
name|BIT_STRING_BITNAME_st
block|{
name|int
name|bitnum
decl_stmt|;
specifier|const
name|char
modifier|*
name|lname
decl_stmt|;
specifier|const
name|char
modifier|*
name|sname
decl_stmt|;
block|}
name|BIT_STRING_BITNAME
typedef|;
define|#
directive|define
name|M_ASN1_STRING_length
parameter_list|(
name|x
parameter_list|)
value|((x)->length)
define|#
directive|define
name|M_ASN1_STRING_length_set
parameter_list|(
name|x
parameter_list|,
name|n
parameter_list|)
value|((x)->length = (n))
define|#
directive|define
name|M_ASN1_STRING_type
parameter_list|(
name|x
parameter_list|)
value|((x)->type)
define|#
directive|define
name|M_ASN1_STRING_data
parameter_list|(
name|x
parameter_list|)
value|((x)->data)
comment|/* Macros for string operations */
define|#
directive|define
name|M_ASN1_BIT_STRING_new
parameter_list|()
value|(ASN1_BIT_STRING *)\ 		ASN1_STRING_type_new(V_ASN1_BIT_STRING)
define|#
directive|define
name|M_ASN1_BIT_STRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_BIT_STRING_dup
parameter_list|(
name|a
parameter_list|)
value|(ASN1_BIT_STRING *)\ 		ASN1_STRING_dup((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_BIT_STRING_cmp
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|ASN1_STRING_cmp(\ 		(ASN1_STRING *)a,(ASN1_STRING *)b)
define|#
directive|define
name|M_ASN1_BIT_STRING_set
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|ASN1_STRING_set((ASN1_STRING *)a,b,c)
define|#
directive|define
name|M_ASN1_INTEGER_new
parameter_list|()
value|(ASN1_INTEGER *)\ 		ASN1_STRING_type_new(V_ASN1_INTEGER)
define|#
directive|define
name|M_ASN1_INTEGER_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_INTEGER_dup
parameter_list|(
name|a
parameter_list|)
value|(ASN1_INTEGER *)ASN1_STRING_dup((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_INTEGER_cmp
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|ASN1_STRING_cmp(\ 		(ASN1_STRING *)a,(ASN1_STRING *)b)
define|#
directive|define
name|M_ASN1_ENUMERATED_new
parameter_list|()
value|(ASN1_ENUMERATED *)\ 		ASN1_STRING_type_new(V_ASN1_ENUMERATED)
define|#
directive|define
name|M_ASN1_ENUMERATED_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_ENUMERATED_dup
parameter_list|(
name|a
parameter_list|)
value|(ASN1_ENUMERATED *)ASN1_STRING_dup((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_ENUMERATED_cmp
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|ASN1_STRING_cmp(\ 		(ASN1_STRING *)a,(ASN1_STRING *)b)
define|#
directive|define
name|M_ASN1_OCTET_STRING_new
parameter_list|()
value|(ASN1_OCTET_STRING *)\ 		ASN1_STRING_type_new(V_ASN1_OCTET_STRING)
define|#
directive|define
name|M_ASN1_OCTET_STRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_OCTET_STRING_dup
parameter_list|(
name|a
parameter_list|)
value|(ASN1_OCTET_STRING *)\ 		ASN1_STRING_dup((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_OCTET_STRING_cmp
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|ASN1_STRING_cmp(\ 		(ASN1_STRING *)a,(ASN1_STRING *)b)
define|#
directive|define
name|M_ASN1_OCTET_STRING_set
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|ASN1_STRING_set((ASN1_STRING *)a,b,c)
define|#
directive|define
name|M_ASN1_OCTET_STRING_print
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|ASN1_STRING_print(a,(ASN1_STRING *)b)
define|#
directive|define
name|M_i2d_ASN1_OCTET_STRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_OCTET_STRING,\ 		V_ASN1_UNIVERSAL)
define|#
directive|define
name|B_ASN1_TIME
define|\
value|B_ASN1_UTCTIME | \ 			B_ASN1_GENERALIZEDTIME
define|#
directive|define
name|B_ASN1_PRINTABLE
define|\
value|B_ASN1_PRINTABLESTRING| \ 			B_ASN1_T61STRING| \ 			B_ASN1_IA5STRING| \ 			B_ASN1_BIT_STRING| \ 			B_ASN1_UNIVERSALSTRING|\ 			B_ASN1_BMPSTRING|\ 			B_ASN1_UTF8STRING|\ 			B_ASN1_UNKNOWN
define|#
directive|define
name|B_ASN1_DIRECTORYSTRING
define|\
value|B_ASN1_PRINTABLESTRING| \ 			B_ASN1_TELETEXSTRING|\ 			B_ASN1_BMPSTRING|\ 			B_ASN1_UNIVERSALSTRING|\ 			B_ASN1_UTF8STRING
define|#
directive|define
name|B_ASN1_DISPLAYTEXT
define|\
value|B_ASN1_IA5STRING| \ 			B_ASN1_VISIBLESTRING| \ 			B_ASN1_BMPSTRING|\ 			B_ASN1_UTF8STRING
define|#
directive|define
name|M_ASN1_PRINTABLE_new
parameter_list|()
value|ASN1_STRING_type_new(V_ASN1_T61STRING)
define|#
directive|define
name|M_ASN1_PRINTABLE_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_PRINTABLE
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
value|i2d_ASN1_bytes((ASN1_STRING *)a,\ 		pp,a->type,V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_PRINTABLE
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|d2i_ASN1_type_bytes((ASN1_STRING **)a,pp,l, \ 			B_ASN1_PRINTABLE)
define|#
directive|define
name|M_DIRECTORYSTRING_new
parameter_list|()
value|ASN1_STRING_type_new(V_ASN1_PRINTABLESTRING)
define|#
directive|define
name|M_DIRECTORYSTRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_DIRECTORYSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
value|i2d_ASN1_bytes((ASN1_STRING *)a,\ 						pp,a->type,V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_DIRECTORYSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|d2i_ASN1_type_bytes((ASN1_STRING **)a,pp,l, \ 			B_ASN1_DIRECTORYSTRING)
define|#
directive|define
name|M_DISPLAYTEXT_new
parameter_list|()
value|ASN1_STRING_type_new(V_ASN1_VISIBLESTRING)
define|#
directive|define
name|M_DISPLAYTEXT_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_DISPLAYTEXT
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
value|i2d_ASN1_bytes((ASN1_STRING *)a,\ 						pp,a->type,V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_DISPLAYTEXT
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|d2i_ASN1_type_bytes((ASN1_STRING **)a,pp,l, \ 			B_ASN1_DISPLAYTEXT)
define|#
directive|define
name|M_ASN1_PRINTABLESTRING_new
parameter_list|()
value|(ASN1_PRINTABLESTRING *)\ 		ASN1_STRING_type_new(V_ASN1_PRINTABLESTRING)
define|#
directive|define
name|M_ASN1_PRINTABLESTRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_PRINTABLESTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_PRINTABLESTRING,\ 		V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_PRINTABLESTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_PRINTABLESTRING *)d2i_ASN1_type_bytes\ 		((ASN1_STRING **)a,pp,l,B_ASN1_PRINTABLESTRING)
define|#
directive|define
name|M_ASN1_T61STRING_new
parameter_list|()
value|(ASN1_T61STRING *)\ 		ASN1_STRING_type_new(V_ASN1_T61STRING)
define|#
directive|define
name|M_ASN1_T61STRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_T61STRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_T61STRING,\ 		V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_T61STRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_T61STRING *)d2i_ASN1_type_bytes\ 		((ASN1_STRING **)a,pp,l,B_ASN1_T61STRING)
define|#
directive|define
name|M_ASN1_IA5STRING_new
parameter_list|()
value|(ASN1_IA5STRING *)\ 		ASN1_STRING_type_new(V_ASN1_IA5STRING)
define|#
directive|define
name|M_ASN1_IA5STRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_IA5STRING_dup
parameter_list|(
name|a
parameter_list|)
define|\
value|(ASN1_IA5STRING *)ASN1_STRING_dup((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_IA5STRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_IA5STRING,\ 			V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_IA5STRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_IA5STRING *)d2i_ASN1_type_bytes((ASN1_STRING **)a,pp,l,\ 			B_ASN1_IA5STRING)
define|#
directive|define
name|M_ASN1_UTCTIME_new
parameter_list|()
value|(ASN1_UTCTIME *)\ 		ASN1_STRING_type_new(V_ASN1_UTCTIME)
define|#
directive|define
name|M_ASN1_UTCTIME_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_UTCTIME_dup
parameter_list|(
name|a
parameter_list|)
value|(ASN1_UTCTIME *)ASN1_STRING_dup((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_GENERALIZEDTIME_new
parameter_list|()
value|(ASN1_GENERALIZEDTIME *)\ 		ASN1_STRING_type_new(V_ASN1_GENERALIZEDTIME)
define|#
directive|define
name|M_ASN1_GENERALIZEDTIME_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_GENERALIZEDTIME_dup
parameter_list|(
name|a
parameter_list|)
value|(ASN1_GENERALIZEDTIME *)ASN1_STRING_dup(\ 	(ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_TIME_new
parameter_list|()
value|(ASN1_TIME *)\ 		ASN1_STRING_type_new(V_ASN1_UTCTIME)
define|#
directive|define
name|M_ASN1_TIME_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_TIME_dup
parameter_list|(
name|a
parameter_list|)
value|(ASN1_TIME *)ASN1_STRING_dup((ASN1_STRING *)a)
define|#
directive|define
name|M_ASN1_GENERALSTRING_new
parameter_list|()
value|(ASN1_GENERALSTRING *)\ 		ASN1_STRING_type_new(V_ASN1_GENERALSTRING)
define|#
directive|define
name|M_ASN1_GENERALSTRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_GENERALSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_GENERALSTRING,\ 			V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_GENERALSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_GENERALSTRING *)d2i_ASN1_type_bytes\ 		((ASN1_STRING **)a,pp,l,B_ASN1_GENERALSTRING)
define|#
directive|define
name|M_ASN1_UNIVERSALSTRING_new
parameter_list|()
value|(ASN1_UNIVERSALSTRING *)\ 		ASN1_STRING_type_new(V_ASN1_UNIVERSALSTRING)
define|#
directive|define
name|M_ASN1_UNIVERSALSTRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_UNIVERSALSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_UNIVERSALSTRING,\ 			V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_UNIVERSALSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_UNIVERSALSTRING *)d2i_ASN1_type_bytes\ 		((ASN1_STRING **)a,pp,l,B_ASN1_UNIVERSALSTRING)
define|#
directive|define
name|M_ASN1_BMPSTRING_new
parameter_list|()
value|(ASN1_BMPSTRING *)\ 		ASN1_STRING_type_new(V_ASN1_BMPSTRING)
define|#
directive|define
name|M_ASN1_BMPSTRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_BMPSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_BMPSTRING,\ 			V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_BMPSTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_BMPSTRING *)d2i_ASN1_type_bytes\ 		((ASN1_STRING **)a,pp,l,B_ASN1_BMPSTRING)
define|#
directive|define
name|M_ASN1_VISIBLESTRING_new
parameter_list|()
value|(ASN1_VISIBLESTRING *)\ 		ASN1_STRING_type_new(V_ASN1_VISIBLESTRING)
define|#
directive|define
name|M_ASN1_VISIBLESTRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_VISIBLESTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_VISIBLESTRING,\ 			V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_VISIBLESTRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_VISIBLESTRING *)d2i_ASN1_type_bytes\ 		((ASN1_STRING **)a,pp,l,B_ASN1_VISIBLESTRING)
define|#
directive|define
name|M_ASN1_UTF8STRING_new
parameter_list|()
value|(ASN1_UTF8STRING *)\ 		ASN1_STRING_type_new(V_ASN1_UTF8STRING)
define|#
directive|define
name|M_ASN1_UTF8STRING_free
parameter_list|(
name|a
parameter_list|)
value|ASN1_STRING_free((ASN1_STRING *)a)
define|#
directive|define
name|M_i2d_ASN1_UTF8STRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|)
define|\
value|i2d_ASN1_bytes((ASN1_STRING *)a,pp,V_ASN1_UTF8STRING,\ 			V_ASN1_UNIVERSAL)
define|#
directive|define
name|M_d2i_ASN1_UTF8STRING
parameter_list|(
name|a
parameter_list|,
name|pp
parameter_list|,
name|l
parameter_list|)
define|\
value|(ASN1_UTF8STRING *)d2i_ASN1_type_bytes\ 		((ASN1_STRING **)a,pp,l,B_ASN1_UTF8STRING)
comment|/* for the is_set parameter to i2d_ASN1_SET */
define|#
directive|define
name|IS_SEQUENCE
value|0
define|#
directive|define
name|IS_SET
value|1
name|DECLARE_ASN1_FUNCTIONS_fname
argument_list|(
argument|ASN1_TYPE
argument_list|,
argument|ASN1_ANY
argument_list|,
argument|ASN1_TYPE
argument_list|)
name|int
name|ASN1_TYPE_get
parameter_list|(
name|ASN1_TYPE
modifier|*
name|a
parameter_list|)
function_decl|;
name|void
name|ASN1_TYPE_set
parameter_list|(
name|ASN1_TYPE
modifier|*
name|a
parameter_list|,
name|int
name|type
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|ASN1_OBJECT_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|ASN1_OBJECT_free
parameter_list|(
name|ASN1_OBJECT
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|i2d_ASN1_OBJECT
parameter_list|(
name|ASN1_OBJECT
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|c2i_ASN1_OBJECT
parameter_list|(
name|ASN1_OBJECT
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|d2i_ASN1_OBJECT
parameter_list|(
name|ASN1_OBJECT
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|DECLARE_ASN1_ITEM
argument_list|(
argument|ASN1_OBJECT
argument_list|)
name|DECLARE_STACK_OF
argument_list|(
argument|ASN1_OBJECT
argument_list|)
name|DECLARE_ASN1_SET_OF
argument_list|(
argument|ASN1_OBJECT
argument_list|)
name|ASN1_STRING
modifier|*
name|ASN1_STRING_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|ASN1_STRING_free
parameter_list|(
name|ASN1_STRING
modifier|*
name|a
parameter_list|)
function_decl|;
name|ASN1_STRING
modifier|*
name|ASN1_STRING_dup
parameter_list|(
name|ASN1_STRING
modifier|*
name|a
parameter_list|)
function_decl|;
name|ASN1_STRING
modifier|*
name|ASN1_STRING_type_new
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_cmp
parameter_list|(
name|ASN1_STRING
modifier|*
name|a
parameter_list|,
name|ASN1_STRING
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/* Since this is used to store all sorts of things, via macros, for now, make      its data void * */
name|int
name|ASN1_STRING_set
parameter_list|(
name|ASN1_STRING
modifier|*
name|str
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_length
parameter_list|(
name|ASN1_STRING
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|ASN1_STRING_length_set
parameter_list|(
name|ASN1_STRING
modifier|*
name|x
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_type
parameter_list|(
name|ASN1_STRING
modifier|*
name|x
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|ASN1_STRING_data
parameter_list|(
name|ASN1_STRING
modifier|*
name|x
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_BIT_STRING
argument_list|)
name|int
name|i2c_ASN1_BIT_STRING
parameter_list|(
name|ASN1_BIT_STRING
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|ASN1_BIT_STRING
modifier|*
name|c2i_ASN1_BIT_STRING
parameter_list|(
name|ASN1_BIT_STRING
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|int
name|ASN1_BIT_STRING_set
parameter_list|(
name|ASN1_BIT_STRING
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
name|int
name|ASN1_BIT_STRING_set_bit
parameter_list|(
name|ASN1_BIT_STRING
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
name|ASN1_BIT_STRING_get_bit
parameter_list|(
name|ASN1_BIT_STRING
modifier|*
name|a
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|ASN1_BIT_STRING_name_print
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|ASN1_BIT_STRING
modifier|*
name|bs
parameter_list|,
name|BIT_STRING_BITNAME
modifier|*
name|tbl
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|ASN1_BIT_STRING_num_asc
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|BIT_STRING_BITNAME
modifier|*
name|tbl
parameter_list|)
function_decl|;
name|int
name|ASN1_BIT_STRING_set_asc
parameter_list|(
name|ASN1_BIT_STRING
modifier|*
name|bs
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|value
parameter_list|,
name|BIT_STRING_BITNAME
modifier|*
name|tbl
parameter_list|)
function_decl|;
name|int
name|i2d_ASN1_BOOLEAN
parameter_list|(
name|int
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|int
name|d2i_ASN1_BOOLEAN
parameter_list|(
name|int
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_INTEGER
argument_list|)
name|int
name|i2c_ASN1_INTEGER
parameter_list|(
name|ASN1_INTEGER
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|ASN1_INTEGER
modifier|*
name|c2i_ASN1_INTEGER
parameter_list|(
name|ASN1_INTEGER
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|ASN1_INTEGER
modifier|*
name|d2i_ASN1_UINTEGER
parameter_list|(
name|ASN1_INTEGER
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|ASN1_INTEGER
modifier|*
name|ASN1_INTEGER_dup
parameter_list|(
name|ASN1_INTEGER
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|ASN1_INTEGER_cmp
parameter_list|(
name|ASN1_INTEGER
modifier|*
name|x
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|y
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_ENUMERATED
argument_list|)
name|int
name|ASN1_UTCTIME_check
parameter_list|(
name|ASN1_UTCTIME
modifier|*
name|a
parameter_list|)
function_decl|;
name|ASN1_UTCTIME
modifier|*
name|ASN1_UTCTIME_set
parameter_list|(
name|ASN1_UTCTIME
modifier|*
name|s
parameter_list|,
name|time_t
name|t
parameter_list|)
function_decl|;
name|int
name|ASN1_UTCTIME_set_string
parameter_list|(
name|ASN1_UTCTIME
modifier|*
name|s
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|int
name|ASN1_UTCTIME_cmp_time_t
parameter_list|(
specifier|const
name|ASN1_UTCTIME
modifier|*
name|s
parameter_list|,
name|time_t
name|t
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|time_t ASN1_UTCTIME_get(const ASN1_UTCTIME *s);
endif|#
directive|endif
name|int
name|ASN1_GENERALIZEDTIME_check
parameter_list|(
name|ASN1_GENERALIZEDTIME
modifier|*
name|a
parameter_list|)
function_decl|;
name|ASN1_GENERALIZEDTIME
modifier|*
name|ASN1_GENERALIZEDTIME_set
parameter_list|(
name|ASN1_GENERALIZEDTIME
modifier|*
name|s
parameter_list|,
name|time_t
name|t
parameter_list|)
function_decl|;
name|int
name|ASN1_GENERALIZEDTIME_set_string
parameter_list|(
name|ASN1_GENERALIZEDTIME
modifier|*
name|s
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_OCTET_STRING
argument_list|)
name|ASN1_OCTET_STRING
modifier|*
name|ASN1_OCTET_STRING_dup
parameter_list|(
name|ASN1_OCTET_STRING
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|ASN1_OCTET_STRING_cmp
parameter_list|(
name|ASN1_OCTET_STRING
modifier|*
name|a
parameter_list|,
name|ASN1_OCTET_STRING
modifier|*
name|b
parameter_list|)
function_decl|;
name|int
name|ASN1_OCTET_STRING_set
parameter_list|(
name|ASN1_OCTET_STRING
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_VISIBLESTRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_UNIVERSALSTRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_UTF8STRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_NULL
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_BMPSTRING
argument_list|)
name|int
name|UTF8_getc
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|long
modifier|*
name|val
parameter_list|)
function_decl|;
name|int
name|UTF8_putc
parameter_list|(
name|unsigned
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|long
name|value
parameter_list|)
function_decl|;
name|DECLARE_ASN1_FUNCTIONS_name
argument_list|(
argument|ASN1_STRING
argument_list|,
argument|ASN1_PRINTABLE
argument_list|)
name|DECLARE_ASN1_FUNCTIONS_name
argument_list|(
argument|ASN1_STRING
argument_list|,
argument|DIRECTORYSTRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS_name
argument_list|(
argument|ASN1_STRING
argument_list|,
argument|DISPLAYTEXT
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_PRINTABLESTRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_T61STRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_IA5STRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_GENERALSTRING
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_UTCTIME
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_GENERALIZEDTIME
argument_list|)
name|DECLARE_ASN1_FUNCTIONS
argument_list|(
argument|ASN1_TIME
argument_list|)
name|ASN1_TIME
modifier|*
name|ASN1_TIME_set
parameter_list|(
name|ASN1_TIME
modifier|*
name|s
parameter_list|,
name|time_t
name|t
parameter_list|)
function_decl|;
name|int
name|ASN1_TIME_check
parameter_list|(
name|ASN1_TIME
modifier|*
name|t
parameter_list|)
function_decl|;
name|ASN1_GENERALIZEDTIME
modifier|*
name|ASN1_TIME_to_generalizedtime
parameter_list|(
name|ASN1_TIME
modifier|*
name|t
parameter_list|,
name|ASN1_GENERALIZEDTIME
modifier|*
modifier|*
name|out
parameter_list|)
function_decl|;
name|int
name|i2d_ASN1_SET
parameter_list|(
name|STACK
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|int
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|()
parameter_list|,
name|int
name|ex_tag
parameter_list|,
name|int
name|ex_class
parameter_list|,
name|int
name|is_set
parameter_list|)
function_decl|;
name|STACK
modifier|*
name|d2i_ASN1_SET
parameter_list|(
name|STACK
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|()
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|int
name|ex_tag
parameter_list|,
name|int
name|ex_class
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|i2a_ASN1_INTEGER
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|a2i_ASN1_INTEGER
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|bs
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|i2a_ASN1_ENUMERATED
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_ENUMERATED
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|a2i_ASN1_ENUMERATED
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_ENUMERATED
modifier|*
name|bs
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|i2a_ASN1_OBJECT
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|a2i_ASN1_STRING
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_STRING
modifier|*
name|bs
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|i2a_ASN1_STRING
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_STRING
modifier|*
name|a
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|i2t_ASN1_OBJECT
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|buf_len
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|a2d_ASN1_OBJECT
parameter_list|(
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
name|olen
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|ASN1_OBJECT
modifier|*
name|ASN1_OBJECT_create
parameter_list|(
name|int
name|nid
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|sn
parameter_list|,
specifier|const
name|char
modifier|*
name|ln
parameter_list|)
function_decl|;
name|int
name|ASN1_INTEGER_set
parameter_list|(
name|ASN1_INTEGER
modifier|*
name|a
parameter_list|,
name|long
name|v
parameter_list|)
function_decl|;
name|long
name|ASN1_INTEGER_get
parameter_list|(
name|ASN1_INTEGER
modifier|*
name|a
parameter_list|)
function_decl|;
name|ASN1_INTEGER
modifier|*
name|BN_to_ASN1_INTEGER
parameter_list|(
name|BIGNUM
modifier|*
name|bn
parameter_list|,
name|ASN1_INTEGER
modifier|*
name|ai
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|ASN1_INTEGER_to_BN
parameter_list|(
name|ASN1_INTEGER
modifier|*
name|ai
parameter_list|,
name|BIGNUM
modifier|*
name|bn
parameter_list|)
function_decl|;
name|int
name|ASN1_ENUMERATED_set
parameter_list|(
name|ASN1_ENUMERATED
modifier|*
name|a
parameter_list|,
name|long
name|v
parameter_list|)
function_decl|;
name|long
name|ASN1_ENUMERATED_get
parameter_list|(
name|ASN1_ENUMERATED
modifier|*
name|a
parameter_list|)
function_decl|;
name|ASN1_ENUMERATED
modifier|*
name|BN_to_ASN1_ENUMERATED
parameter_list|(
name|BIGNUM
modifier|*
name|bn
parameter_list|,
name|ASN1_ENUMERATED
modifier|*
name|ai
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|ASN1_ENUMERATED_to_BN
parameter_list|(
name|ASN1_ENUMERATED
modifier|*
name|ai
parameter_list|,
name|BIGNUM
modifier|*
name|bn
parameter_list|)
function_decl|;
comment|/* General */
comment|/* given a string, return the correct type, max is the maximum length */
name|int
name|ASN1_PRINTABLE_type
parameter_list|(
name|unsigned
name|char
modifier|*
name|s
parameter_list|,
name|int
name|max
parameter_list|)
function_decl|;
name|int
name|i2d_ASN1_bytes
parameter_list|(
name|ASN1_STRING
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|xclass
parameter_list|)
function_decl|;
name|ASN1_STRING
modifier|*
name|d2i_ASN1_bytes
parameter_list|(
name|ASN1_STRING
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|Ptag
parameter_list|,
name|int
name|Pclass
parameter_list|)
function_decl|;
name|unsigned
name|long
name|ASN1_tag2bit
parameter_list|(
name|int
name|tag
parameter_list|)
function_decl|;
comment|/* type is one or more of the B_ASN1_ values. */
name|ASN1_STRING
modifier|*
name|d2i_ASN1_type_bytes
parameter_list|(
name|ASN1_STRING
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
comment|/* PARSING */
name|int
name|asn1_Finish
parameter_list|(
name|ASN1_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
comment|/* SPECIALS */
name|int
name|ASN1_get_object
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
modifier|*
name|plength
parameter_list|,
name|int
modifier|*
name|ptag
parameter_list|,
name|int
modifier|*
name|pclass
parameter_list|,
name|long
name|omax
parameter_list|)
function_decl|;
name|int
name|ASN1_check_infinite_end
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|p
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|void
name|ASN1_put_object
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|int
name|constructed
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|xclass
parameter_list|)
function_decl|;
name|int
name|ASN1_object_size
parameter_list|(
name|int
name|constructed
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|tag
parameter_list|)
function_decl|;
comment|/* Used to implement other functions */
name|char
modifier|*
name|ASN1_dup
parameter_list|(
name|int
function_decl|(
modifier|*
name|i2d
function_decl|)
parameter_list|()
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|d2i
function_decl|)
parameter_list|()
parameter_list|,
name|char
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
modifier|*
name|ASN1_item_dup
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|void
modifier|*
name|x
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_FP_API
name|char
modifier|*
name|ASN1_d2i_fp
parameter_list|(
name|char
modifier|*
function_decl|(
modifier|*
name|xnew
function_decl|)
parameter_list|()
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|d2i
function_decl|)
parameter_list|()
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
modifier|*
name|ASN1_item_d2i_fp
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|FILE
modifier|*
name|in
parameter_list|,
name|void
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|ASN1_i2d_fp
parameter_list|(
name|int
function_decl|(
modifier|*
name|i2d
function_decl|)
parameter_list|()
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|ASN1_item_i2d_fp
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|,
name|void
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_print_ex_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|ASN1_STRING
modifier|*
name|str
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|ASN1_STRING_to_UTF8
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|ASN1_STRING
modifier|*
name|in
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|char
modifier|*
name|ASN1_d2i_bio
parameter_list|(
name|char
modifier|*
function_decl|(
modifier|*
name|xnew
function_decl|)
parameter_list|()
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|d2i
function_decl|)
parameter_list|()
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
modifier|*
name|ASN1_item_d2i_bio
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|BIO
modifier|*
name|in
parameter_list|,
name|void
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|ASN1_i2d_bio
parameter_list|(
name|int
function_decl|(
modifier|*
name|i2d
function_decl|)
parameter_list|()
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|ASN1_item_i2d_bio
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|,
name|void
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|ASN1_UTCTIME_print
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|ASN1_UTCTIME
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|ASN1_GENERALIZEDTIME_print
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|ASN1_GENERALIZEDTIME
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|ASN1_TIME_print
parameter_list|(
name|BIO
modifier|*
name|fp
parameter_list|,
name|ASN1_TIME
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_print
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|ASN1_STRING
modifier|*
name|v
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_print_ex
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|ASN1_STRING
modifier|*
name|str
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
name|int
name|ASN1_parse
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|unsigned
name|char
modifier|*
name|pp
parameter_list|,
name|long
name|len
parameter_list|,
name|int
name|indent
parameter_list|)
function_decl|;
name|int
name|ASN1_parse_dump
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|unsigned
name|char
modifier|*
name|pp
parameter_list|,
name|long
name|len
parameter_list|,
name|int
name|indent
parameter_list|,
name|int
name|dump
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|const
name|char
modifier|*
name|ASN1_tag2str
parameter_list|(
name|int
name|tag
parameter_list|)
function_decl|;
comment|/* Used to load and write netscape format cert/key */
name|int
name|i2d_ASN1_HEADER
parameter_list|(
name|ASN1_HEADER
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|ASN1_HEADER
modifier|*
name|d2i_ASN1_HEADER
parameter_list|(
name|ASN1_HEADER
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|ASN1_HEADER
modifier|*
name|ASN1_HEADER_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|ASN1_HEADER_free
parameter_list|(
name|ASN1_HEADER
modifier|*
name|a
parameter_list|)
function_decl|;
name|int
name|ASN1_UNIVERSALSTRING_to_string
parameter_list|(
name|ASN1_UNIVERSALSTRING
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/* Not used that much at this point, except for the first two */
name|ASN1_METHOD
modifier|*
name|X509_asn1_meth
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ASN1_METHOD
modifier|*
name|RSAPrivateKey_asn1_meth
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ASN1_METHOD
modifier|*
name|ASN1_IA5STRING_asn1_meth
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ASN1_METHOD
modifier|*
name|ASN1_BIT_STRING_asn1_meth
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|ASN1_TYPE_set_octetstring
parameter_list|(
name|ASN1_TYPE
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|ASN1_TYPE_get_octetstring
parameter_list|(
name|ASN1_TYPE
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|max_len
parameter_list|)
function_decl|;
name|int
name|ASN1_TYPE_set_int_octetstring
parameter_list|(
name|ASN1_TYPE
modifier|*
name|a
parameter_list|,
name|long
name|num
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
name|ASN1_TYPE_get_int_octetstring
parameter_list|(
name|ASN1_TYPE
modifier|*
name|a
parameter_list|,
name|long
modifier|*
name|num
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|max_len
parameter_list|)
function_decl|;
name|STACK
modifier|*
name|ASN1_seq_unpack
parameter_list|(
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|d2i
function_decl|)
parameter_list|()
parameter_list|,
name|void
function_decl|(
modifier|*
name|free_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|ASN1_seq_pack
parameter_list|(
name|STACK
modifier|*
name|safes
parameter_list|,
name|int
function_decl|(
modifier|*
name|i2d
function_decl|)
parameter_list|()
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|buf
parameter_list|,
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
name|void
modifier|*
name|ASN1_unpack_string
parameter_list|(
name|ASN1_STRING
modifier|*
name|oct
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|d2i
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|void
modifier|*
name|ASN1_item_unpack
parameter_list|(
name|ASN1_STRING
modifier|*
name|oct
parameter_list|,
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|)
function_decl|;
name|ASN1_STRING
modifier|*
name|ASN1_pack_string
parameter_list|(
name|void
modifier|*
name|obj
parameter_list|,
name|int
function_decl|(
modifier|*
name|i2d
function_decl|)
parameter_list|()
parameter_list|,
name|ASN1_OCTET_STRING
modifier|*
modifier|*
name|oct
parameter_list|)
function_decl|;
name|ASN1_STRING
modifier|*
name|ASN1_item_pack
parameter_list|(
name|void
modifier|*
name|obj
parameter_list|,
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|,
name|ASN1_OCTET_STRING
modifier|*
modifier|*
name|oct
parameter_list|)
function_decl|;
name|void
name|ASN1_STRING_set_default_mask
parameter_list|(
name|unsigned
name|long
name|mask
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_set_default_mask_asc
parameter_list|(
name|char
modifier|*
name|p
parameter_list|)
function_decl|;
name|unsigned
name|long
name|ASN1_STRING_get_default_mask
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|ASN1_mbstring_copy
parameter_list|(
name|ASN1_STRING
modifier|*
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|inform
parameter_list|,
name|unsigned
name|long
name|mask
parameter_list|)
function_decl|;
name|int
name|ASN1_mbstring_ncopy
parameter_list|(
name|ASN1_STRING
modifier|*
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|inform
parameter_list|,
name|unsigned
name|long
name|mask
parameter_list|,
name|long
name|minsize
parameter_list|,
name|long
name|maxsize
parameter_list|)
function_decl|;
name|ASN1_STRING
modifier|*
name|ASN1_STRING_set_by_NID
parameter_list|(
name|ASN1_STRING
modifier|*
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inlen
parameter_list|,
name|int
name|inform
parameter_list|,
name|int
name|nid
parameter_list|)
function_decl|;
name|ASN1_STRING_TABLE
modifier|*
name|ASN1_STRING_TABLE_get
parameter_list|(
name|int
name|nid
parameter_list|)
function_decl|;
name|int
name|ASN1_STRING_TABLE_add
parameter_list|(
name|int
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|ASN1_STRING_TABLE_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* ASN1 template functions */
comment|/* Old API compatible functions */
name|ASN1_VALUE
modifier|*
name|ASN1_item_new
parameter_list|(
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|)
function_decl|;
name|void
name|ASN1_item_free
parameter_list|(
name|ASN1_VALUE
modifier|*
name|val
parameter_list|,
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|)
function_decl|;
name|ASN1_VALUE
modifier|*
name|ASN1_item_d2i
parameter_list|(
name|ASN1_VALUE
modifier|*
modifier|*
name|val
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|in
parameter_list|,
name|long
name|len
parameter_list|,
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|)
function_decl|;
name|int
name|ASN1_item_i2d
parameter_list|(
name|ASN1_VALUE
modifier|*
name|val
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
specifier|const
name|ASN1_ITEM
modifier|*
name|it
parameter_list|)
function_decl|;
name|void
name|ASN1_add_oid_module
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_ASN1_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the ASN1 functions. */
comment|/* Function codes. */
define|#
directive|define
name|ASN1_F_A2D_ASN1_OBJECT
value|100
define|#
directive|define
name|ASN1_F_A2I_ASN1_ENUMERATED
value|101
define|#
directive|define
name|ASN1_F_A2I_ASN1_INTEGER
value|102
define|#
directive|define
name|ASN1_F_A2I_ASN1_STRING
value|103
define|#
directive|define
name|ASN1_F_ASN1_CHECK_TLEN
value|104
define|#
directive|define
name|ASN1_F_ASN1_COLLATE_PRIMITIVE
value|105
define|#
directive|define
name|ASN1_F_ASN1_COLLECT
value|106
define|#
directive|define
name|ASN1_F_ASN1_D2I_BIO
value|107
define|#
directive|define
name|ASN1_F_ASN1_D2I_EX_PRIMITIVE
value|108
define|#
directive|define
name|ASN1_F_ASN1_D2I_FP
value|109
define|#
directive|define
name|ASN1_F_ASN1_DO_ADB
value|110
define|#
directive|define
name|ASN1_F_ASN1_DUP
value|111
define|#
directive|define
name|ASN1_F_ASN1_ENUMERATED_SET
value|112
define|#
directive|define
name|ASN1_F_ASN1_ENUMERATED_TO_BN
value|113
define|#
directive|define
name|ASN1_F_ASN1_GET_OBJECT
value|114
define|#
directive|define
name|ASN1_F_ASN1_HEADER_NEW
value|115
define|#
directive|define
name|ASN1_F_ASN1_I2D_BIO
value|116
define|#
directive|define
name|ASN1_F_ASN1_I2D_FP
value|117
define|#
directive|define
name|ASN1_F_ASN1_INTEGER_SET
value|118
define|#
directive|define
name|ASN1_F_ASN1_INTEGER_TO_BN
value|119
define|#
directive|define
name|ASN1_F_ASN1_ITEM_EX_D2I
value|120
define|#
directive|define
name|ASN1_F_ASN1_ITEM_NEW
value|121
define|#
directive|define
name|ASN1_F_ASN1_MBSTRING_COPY
value|122
define|#
directive|define
name|ASN1_F_ASN1_OBJECT_NEW
value|123
define|#
directive|define
name|ASN1_F_ASN1_PACK_STRING
value|124
define|#
directive|define
name|ASN1_F_ASN1_PBE_SET
value|125
define|#
directive|define
name|ASN1_F_ASN1_SEQ_PACK
value|126
define|#
directive|define
name|ASN1_F_ASN1_SEQ_UNPACK
value|127
define|#
directive|define
name|ASN1_F_ASN1_SIGN
value|128
define|#
directive|define
name|ASN1_F_ASN1_STRING_TABLE_ADD
value|129
define|#
directive|define
name|ASN1_F_ASN1_STRING_TYPE_NEW
value|130
define|#
directive|define
name|ASN1_F_ASN1_TEMPLATE_D2I
value|131
define|#
directive|define
name|ASN1_F_ASN1_TEMPLATE_EX_D2I
value|132
define|#
directive|define
name|ASN1_F_ASN1_TEMPLATE_NEW
value|133
define|#
directive|define
name|ASN1_F_ASN1_TIME_SET
value|175
define|#
directive|define
name|ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
value|134
define|#
directive|define
name|ASN1_F_ASN1_TYPE_GET_OCTETSTRING
value|135
define|#
directive|define
name|ASN1_F_ASN1_UNPACK_STRING
value|136
define|#
directive|define
name|ASN1_F_ASN1_VERIFY
value|137
define|#
directive|define
name|ASN1_F_BN_TO_ASN1_ENUMERATED
value|138
define|#
directive|define
name|ASN1_F_BN_TO_ASN1_INTEGER
value|139
define|#
directive|define
name|ASN1_F_COLLECT_DATA
value|140
define|#
directive|define
name|ASN1_F_D2I_ASN1_BIT_STRING
value|141
define|#
directive|define
name|ASN1_F_D2I_ASN1_BOOLEAN
value|142
define|#
directive|define
name|ASN1_F_D2I_ASN1_BYTES
value|143
define|#
directive|define
name|ASN1_F_D2I_ASN1_GENERALIZEDTIME
value|144
define|#
directive|define
name|ASN1_F_D2I_ASN1_HEADER
value|145
define|#
directive|define
name|ASN1_F_D2I_ASN1_INTEGER
value|146
define|#
directive|define
name|ASN1_F_D2I_ASN1_OBJECT
value|147
define|#
directive|define
name|ASN1_F_D2I_ASN1_SET
value|148
define|#
directive|define
name|ASN1_F_D2I_ASN1_TYPE_BYTES
value|149
define|#
directive|define
name|ASN1_F_D2I_ASN1_UINTEGER
value|150
define|#
directive|define
name|ASN1_F_D2I_ASN1_UTCTIME
value|151
define|#
directive|define
name|ASN1_F_D2I_NETSCAPE_RSA
value|152
define|#
directive|define
name|ASN1_F_D2I_NETSCAPE_RSA_2
value|153
define|#
directive|define
name|ASN1_F_D2I_PRIVATEKEY
value|154
define|#
directive|define
name|ASN1_F_D2I_PUBLICKEY
value|155
define|#
directive|define
name|ASN1_F_D2I_X509
value|156
define|#
directive|define
name|ASN1_F_D2I_X509_CINF
value|157
define|#
directive|define
name|ASN1_F_D2I_X509_NAME
value|158
define|#
directive|define
name|ASN1_F_D2I_X509_PKEY
value|159
define|#
directive|define
name|ASN1_F_I2D_ASN1_TIME
value|160
define|#
directive|define
name|ASN1_F_I2D_DSA_PUBKEY
value|161
define|#
directive|define
name|ASN1_F_I2D_NETSCAPE_RSA
value|162
define|#
directive|define
name|ASN1_F_I2D_PRIVATEKEY
value|163
define|#
directive|define
name|ASN1_F_I2D_PUBLICKEY
value|164
define|#
directive|define
name|ASN1_F_I2D_RSA_PUBKEY
value|165
define|#
directive|define
name|ASN1_F_LONG_C2I
value|166
define|#
directive|define
name|ASN1_F_OID_MODULE_INIT
value|174
define|#
directive|define
name|ASN1_F_PKCS5_PBE2_SET
value|167
define|#
directive|define
name|ASN1_F_X509_CINF_NEW
value|168
define|#
directive|define
name|ASN1_F_X509_CRL_ADD0_REVOKED
value|169
define|#
directive|define
name|ASN1_F_X509_INFO_NEW
value|170
define|#
directive|define
name|ASN1_F_X509_NAME_NEW
value|171
define|#
directive|define
name|ASN1_F_X509_NEW
value|172
define|#
directive|define
name|ASN1_F_X509_PKEY_NEW
value|173
comment|/* Reason codes. */
define|#
directive|define
name|ASN1_R_ADDING_OBJECT
value|171
define|#
directive|define
name|ASN1_R_AUX_ERROR
value|100
define|#
directive|define
name|ASN1_R_BAD_CLASS
value|101
define|#
directive|define
name|ASN1_R_BAD_OBJECT_HEADER
value|102
define|#
directive|define
name|ASN1_R_BAD_PASSWORD_READ
value|103
define|#
directive|define
name|ASN1_R_BAD_TAG
value|104
define|#
directive|define
name|ASN1_R_BMPSTRING_IS_WRONG_LENGTH
value|210
define|#
directive|define
name|ASN1_R_BN_LIB
value|105
define|#
directive|define
name|ASN1_R_BOOLEAN_IS_WRONG_LENGTH
value|106
define|#
directive|define
name|ASN1_R_BUFFER_TOO_SMALL
value|107
define|#
directive|define
name|ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
value|108
define|#
directive|define
name|ASN1_R_DATA_IS_WRONG
value|109
define|#
directive|define
name|ASN1_R_DECODE_ERROR
value|110
define|#
directive|define
name|ASN1_R_DECODING_ERROR
value|111
define|#
directive|define
name|ASN1_R_ENCODE_ERROR
value|112
define|#
directive|define
name|ASN1_R_ERROR_GETTING_TIME
value|173
define|#
directive|define
name|ASN1_R_ERROR_LOADING_SECTION
value|172
define|#
directive|define
name|ASN1_R_ERROR_PARSING_SET_ELEMENT
value|113
define|#
directive|define
name|ASN1_R_ERROR_SETTING_CIPHER_PARAMS
value|114
define|#
directive|define
name|ASN1_R_EXPECTING_AN_INTEGER
value|115
define|#
directive|define
name|ASN1_R_EXPECTING_AN_OBJECT
value|116
define|#
directive|define
name|ASN1_R_EXPECTING_A_BOOLEAN
value|117
define|#
directive|define
name|ASN1_R_EXPECTING_A_TIME
value|118
define|#
directive|define
name|ASN1_R_EXPLICIT_LENGTH_MISMATCH
value|119
define|#
directive|define
name|ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
value|120
define|#
directive|define
name|ASN1_R_FIELD_MISSING
value|121
define|#
directive|define
name|ASN1_R_FIRST_NUM_TOO_LARGE
value|122
define|#
directive|define
name|ASN1_R_HEADER_TOO_LONG
value|123
define|#
directive|define
name|ASN1_R_ILLEGAL_CHARACTERS
value|124
define|#
directive|define
name|ASN1_R_ILLEGAL_NULL
value|125
define|#
directive|define
name|ASN1_R_ILLEGAL_OPTIONAL_ANY
value|126
define|#
directive|define
name|ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
value|170
define|#
directive|define
name|ASN1_R_ILLEGAL_TAGGED_ANY
value|127
define|#
directive|define
name|ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
value|128
define|#
directive|define
name|ASN1_R_INVALID_BMPSTRING_LENGTH
value|129
define|#
directive|define
name|ASN1_R_INVALID_DIGIT
value|130
define|#
directive|define
name|ASN1_R_INVALID_SEPARATOR
value|131
define|#
directive|define
name|ASN1_R_INVALID_TIME_FORMAT
value|132
define|#
directive|define
name|ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
value|133
define|#
directive|define
name|ASN1_R_INVALID_UTF8STRING
value|134
define|#
directive|define
name|ASN1_R_IV_TOO_LARGE
value|135
define|#
directive|define
name|ASN1_R_LENGTH_ERROR
value|136
define|#
directive|define
name|ASN1_R_MISSING_EOC
value|137
define|#
directive|define
name|ASN1_R_MISSING_SECOND_NUMBER
value|138
define|#
directive|define
name|ASN1_R_MSTRING_NOT_UNIVERSAL
value|139
define|#
directive|define
name|ASN1_R_MSTRING_WRONG_TAG
value|140
define|#
directive|define
name|ASN1_R_NON_HEX_CHARACTERS
value|141
define|#
directive|define
name|ASN1_R_NOT_ENOUGH_DATA
value|142
define|#
directive|define
name|ASN1_R_NO_MATCHING_CHOICE_TYPE
value|143
define|#
directive|define
name|ASN1_R_NULL_IS_WRONG_LENGTH
value|144
define|#
directive|define
name|ASN1_R_ODD_NUMBER_OF_CHARS
value|145
define|#
directive|define
name|ASN1_R_PRIVATE_KEY_HEADER_MISSING
value|146
define|#
directive|define
name|ASN1_R_SECOND_NUMBER_TOO_LARGE
value|147
define|#
directive|define
name|ASN1_R_SEQUENCE_LENGTH_MISMATCH
value|148
define|#
directive|define
name|ASN1_R_SEQUENCE_NOT_CONSTRUCTED
value|149
define|#
directive|define
name|ASN1_R_SHORT_LINE
value|150
define|#
directive|define
name|ASN1_R_STRING_TOO_LONG
value|151
define|#
directive|define
name|ASN1_R_STRING_TOO_SHORT
value|152
define|#
directive|define
name|ASN1_R_TAG_VALUE_TOO_HIGH
value|153
define|#
directive|define
name|ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
value|154
define|#
directive|define
name|ASN1_R_TOO_LONG
value|155
define|#
directive|define
name|ASN1_R_TYPE_NOT_CONSTRUCTED
value|156
define|#
directive|define
name|ASN1_R_UNABLE_TO_DECODE_RSA_KEY
value|157
define|#
directive|define
name|ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
value|158
define|#
directive|define
name|ASN1_R_UNEXPECTED_EOC
value|159
define|#
directive|define
name|ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
value|211
define|#
directive|define
name|ASN1_R_UNKNOWN_FORMAT
value|160
define|#
directive|define
name|ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
value|161
define|#
directive|define
name|ASN1_R_UNKNOWN_OBJECT_TYPE
value|162
define|#
directive|define
name|ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
value|163
define|#
directive|define
name|ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
value|164
define|#
directive|define
name|ASN1_R_UNSUPPORTED_CIPHER
value|165
define|#
directive|define
name|ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
value|166
define|#
directive|define
name|ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
value|167
define|#
directive|define
name|ASN1_R_WRONG_TAG
value|168
define|#
directive|define
name|ASN1_R_WRONG_TYPE
value|169
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

