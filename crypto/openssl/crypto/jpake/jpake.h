begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Implement J-PAKE, as described in  * http://grouper.ieee.org/groups/1363/Research/contributions/hao-ryan-2008.pdf  *   * With hints from http://www.cl.cam.ac.uk/~fh240/software/JPAKE2.java.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_JPAKE_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_JPAKE_H
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_NO_JPAKE
end_ifdef

begin_error
error|#
directive|error
error|JPAKE is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<openssl/bn.h>
include|#
directive|include
file|<openssl/sha.h>
typedef|typedef
name|struct
name|JPAKE_CTX
name|JPAKE_CTX
typedef|;
comment|/* Note that "g" in the ZKPs is not necessarily the J-PAKE g. */
typedef|typedef
struct|struct
block|{
name|BIGNUM
modifier|*
name|gr
decl_stmt|;
comment|/* g^r (r random) */
name|BIGNUM
modifier|*
name|b
decl_stmt|;
comment|/* b = r - x*h, h=hash(g, g^r, g^x, name) */
block|}
name|JPAKE_ZKP
typedef|;
typedef|typedef
struct|struct
block|{
name|BIGNUM
modifier|*
name|gx
decl_stmt|;
comment|/* g^x in step 1, g^(xa + xc + xd) * xb * s in step 2 */
name|JPAKE_ZKP
name|zkpx
decl_stmt|;
comment|/* ZKP(x) or ZKP(xb * s) */
block|}
name|JPAKE_STEP_PART
typedef|;
typedef|typedef
struct|struct
block|{
name|JPAKE_STEP_PART
name|p1
decl_stmt|;
comment|/* g^x3, ZKP(x3) or g^x1, ZKP(x1) */
name|JPAKE_STEP_PART
name|p2
decl_stmt|;
comment|/* g^x4, ZKP(x4) or g^x2, ZKP(x2) */
block|}
name|JPAKE_STEP1
typedef|;
typedef|typedef
name|JPAKE_STEP_PART
name|JPAKE_STEP2
typedef|;
typedef|typedef
struct|struct
block|{
name|unsigned
name|char
name|hhk
index|[
name|SHA_DIGEST_LENGTH
index|]
decl_stmt|;
block|}
name|JPAKE_STEP3A
typedef|;
typedef|typedef
struct|struct
block|{
name|unsigned
name|char
name|hk
index|[
name|SHA_DIGEST_LENGTH
index|]
decl_stmt|;
block|}
name|JPAKE_STEP3B
typedef|;
comment|/* Parameters are copied */
name|JPAKE_CTX
modifier|*
name|JPAKE_CTX_new
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|peer_name
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|p
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|g
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|q
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|secret
parameter_list|)
function_decl|;
name|void
name|JPAKE_CTX_free
parameter_list|(
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/*  * Note that JPAKE_STEP1 can be used multiple times before release  * without another init.  */
name|void
name|JPAKE_STEP1_init
parameter_list|(
name|JPAKE_STEP1
modifier|*
name|s1
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP1_generate
parameter_list|(
name|JPAKE_STEP1
modifier|*
name|send
parameter_list|,
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP1_process
parameter_list|(
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|JPAKE_STEP1
modifier|*
name|received
parameter_list|)
function_decl|;
name|void
name|JPAKE_STEP1_release
parameter_list|(
name|JPAKE_STEP1
modifier|*
name|s1
parameter_list|)
function_decl|;
comment|/*  * Note that JPAKE_STEP2 can be used multiple times before release  * without another init.  */
name|void
name|JPAKE_STEP2_init
parameter_list|(
name|JPAKE_STEP2
modifier|*
name|s2
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP2_generate
parameter_list|(
name|JPAKE_STEP2
modifier|*
name|send
parameter_list|,
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP2_process
parameter_list|(
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|JPAKE_STEP2
modifier|*
name|received
parameter_list|)
function_decl|;
name|void
name|JPAKE_STEP2_release
parameter_list|(
name|JPAKE_STEP2
modifier|*
name|s2
parameter_list|)
function_decl|;
comment|/*  * Optionally verify the shared key. If the shared secrets do not  * match, the two ends will disagree about the shared key, but  * otherwise the protocol will succeed.  */
name|void
name|JPAKE_STEP3A_init
parameter_list|(
name|JPAKE_STEP3A
modifier|*
name|s3a
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP3A_generate
parameter_list|(
name|JPAKE_STEP3A
modifier|*
name|send
parameter_list|,
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP3A_process
parameter_list|(
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|JPAKE_STEP3A
modifier|*
name|received
parameter_list|)
function_decl|;
name|void
name|JPAKE_STEP3A_release
parameter_list|(
name|JPAKE_STEP3A
modifier|*
name|s3a
parameter_list|)
function_decl|;
name|void
name|JPAKE_STEP3B_init
parameter_list|(
name|JPAKE_STEP3B
modifier|*
name|s3b
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP3B_generate
parameter_list|(
name|JPAKE_STEP3B
modifier|*
name|send
parameter_list|,
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|JPAKE_STEP3B_process
parameter_list|(
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|JPAKE_STEP3B
modifier|*
name|received
parameter_list|)
function_decl|;
name|void
name|JPAKE_STEP3B_release
parameter_list|(
name|JPAKE_STEP3B
modifier|*
name|s3b
parameter_list|)
function_decl|;
comment|/*  * the return value belongs to the library and will be released when  * ctx is released, and will change when a new handshake is performed.  */
specifier|const
name|BIGNUM
modifier|*
name|JPAKE_get_shared_key
parameter_list|(
name|JPAKE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_JPAKE_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the JPAKE functions. */
comment|/* Function codes. */
define|#
directive|define
name|JPAKE_F_JPAKE_STEP1_PROCESS
value|101
define|#
directive|define
name|JPAKE_F_JPAKE_STEP2_PROCESS
value|102
define|#
directive|define
name|JPAKE_F_JPAKE_STEP3A_PROCESS
value|103
define|#
directive|define
name|JPAKE_F_JPAKE_STEP3B_PROCESS
value|104
define|#
directive|define
name|JPAKE_F_VERIFY_ZKP
value|100
comment|/* Reason codes. */
define|#
directive|define
name|JPAKE_R_G_TO_THE_X3_IS_NOT_LEGAL
value|108
define|#
directive|define
name|JPAKE_R_G_TO_THE_X4_IS_NOT_LEGAL
value|109
define|#
directive|define
name|JPAKE_R_G_TO_THE_X4_IS_ONE
value|105
define|#
directive|define
name|JPAKE_R_HASH_OF_HASH_OF_KEY_MISMATCH
value|106
define|#
directive|define
name|JPAKE_R_HASH_OF_KEY_MISMATCH
value|107
define|#
directive|define
name|JPAKE_R_VERIFY_B_FAILED
value|102
define|#
directive|define
name|JPAKE_R_VERIFY_X3_FAILED
value|103
define|#
directive|define
name|JPAKE_R_VERIFY_X4_FAILED
value|104
define|#
directive|define
name|JPAKE_R_ZKP_VERIFY_FAILED
value|100
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

