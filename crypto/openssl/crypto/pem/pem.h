begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/pem/pem.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *  * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *  * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from  *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_PEM_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_PEM_H
end_define

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_STACK
end_ifndef

begin_include
include|#
directive|include
file|<openssl/stack.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/evp.h>
end_include

begin_include
include|#
directive|include
file|<openssl/x509.h>
end_include

begin_include
include|#
directive|include
file|<openssl/pem2.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|PEM_BUFSIZE
value|1024
define|#
directive|define
name|PEM_OBJ_UNDEF
value|0
define|#
directive|define
name|PEM_OBJ_X509
value|1
define|#
directive|define
name|PEM_OBJ_X509_REQ
value|2
define|#
directive|define
name|PEM_OBJ_CRL
value|3
define|#
directive|define
name|PEM_OBJ_SSL_SESSION
value|4
define|#
directive|define
name|PEM_OBJ_PRIV_KEY
value|10
define|#
directive|define
name|PEM_OBJ_PRIV_RSA
value|11
define|#
directive|define
name|PEM_OBJ_PRIV_DSA
value|12
define|#
directive|define
name|PEM_OBJ_PRIV_DH
value|13
define|#
directive|define
name|PEM_OBJ_PUB_RSA
value|14
define|#
directive|define
name|PEM_OBJ_PUB_DSA
value|15
define|#
directive|define
name|PEM_OBJ_PUB_DH
value|16
define|#
directive|define
name|PEM_OBJ_DHPARAMS
value|17
define|#
directive|define
name|PEM_OBJ_DSAPARAMS
value|18
define|#
directive|define
name|PEM_OBJ_PRIV_RSA_PUBLIC
value|19
define|#
directive|define
name|PEM_OBJ_PRIV_ECDSA
value|20
define|#
directive|define
name|PEM_OBJ_PUB_ECDSA
value|21
define|#
directive|define
name|PEM_OBJ_ECPARAMETERS
value|22
define|#
directive|define
name|PEM_ERROR
value|30
define|#
directive|define
name|PEM_DEK_DES_CBC
value|40
define|#
directive|define
name|PEM_DEK_IDEA_CBC
value|45
define|#
directive|define
name|PEM_DEK_DES_EDE
value|50
define|#
directive|define
name|PEM_DEK_DES_ECB
value|60
define|#
directive|define
name|PEM_DEK_RSA
value|70
define|#
directive|define
name|PEM_DEK_RSA_MD2
value|80
define|#
directive|define
name|PEM_DEK_RSA_MD5
value|90
define|#
directive|define
name|PEM_MD_MD2
value|NID_md2
define|#
directive|define
name|PEM_MD_MD5
value|NID_md5
define|#
directive|define
name|PEM_MD_SHA
value|NID_sha
define|#
directive|define
name|PEM_MD_MD2_RSA
value|NID_md2WithRSAEncryption
define|#
directive|define
name|PEM_MD_MD5_RSA
value|NID_md5WithRSAEncryption
define|#
directive|define
name|PEM_MD_SHA_RSA
value|NID_sha1WithRSAEncryption
define|#
directive|define
name|PEM_STRING_X509_OLD
value|"X509 CERTIFICATE"
define|#
directive|define
name|PEM_STRING_X509
value|"CERTIFICATE"
define|#
directive|define
name|PEM_STRING_X509_PAIR
value|"CERTIFICATE PAIR"
define|#
directive|define
name|PEM_STRING_X509_TRUSTED
value|"TRUSTED CERTIFICATE"
define|#
directive|define
name|PEM_STRING_X509_REQ_OLD
value|"NEW CERTIFICATE REQUEST"
define|#
directive|define
name|PEM_STRING_X509_REQ
value|"CERTIFICATE REQUEST"
define|#
directive|define
name|PEM_STRING_X509_CRL
value|"X509 CRL"
define|#
directive|define
name|PEM_STRING_EVP_PKEY
value|"ANY PRIVATE KEY"
define|#
directive|define
name|PEM_STRING_PUBLIC
value|"PUBLIC KEY"
define|#
directive|define
name|PEM_STRING_RSA
value|"RSA PRIVATE KEY"
define|#
directive|define
name|PEM_STRING_RSA_PUBLIC
value|"RSA PUBLIC KEY"
define|#
directive|define
name|PEM_STRING_DSA
value|"DSA PRIVATE KEY"
define|#
directive|define
name|PEM_STRING_DSA_PUBLIC
value|"DSA PUBLIC KEY"
define|#
directive|define
name|PEM_STRING_PKCS7
value|"PKCS7"
define|#
directive|define
name|PEM_STRING_PKCS7_SIGNED
value|"PKCS #7 SIGNED DATA"
define|#
directive|define
name|PEM_STRING_PKCS8
value|"ENCRYPTED PRIVATE KEY"
define|#
directive|define
name|PEM_STRING_PKCS8INF
value|"PRIVATE KEY"
define|#
directive|define
name|PEM_STRING_DHPARAMS
value|"DH PARAMETERS"
define|#
directive|define
name|PEM_STRING_DHXPARAMS
value|"X9.42 DH PARAMETERS"
define|#
directive|define
name|PEM_STRING_SSL_SESSION
value|"SSL SESSION PARAMETERS"
define|#
directive|define
name|PEM_STRING_DSAPARAMS
value|"DSA PARAMETERS"
define|#
directive|define
name|PEM_STRING_ECDSA_PUBLIC
value|"ECDSA PUBLIC KEY"
define|#
directive|define
name|PEM_STRING_ECPARAMETERS
value|"EC PARAMETERS"
define|#
directive|define
name|PEM_STRING_ECPRIVATEKEY
value|"EC PRIVATE KEY"
define|#
directive|define
name|PEM_STRING_PARAMETERS
value|"PARAMETERS"
define|#
directive|define
name|PEM_STRING_CMS
value|"CMS"
comment|/*    * Note that this structure is initialised by PEM_SealInit and cleaned up    * by PEM_SealFinal (at least for now)    */
typedef|typedef
struct|struct
name|PEM_Encode_Seal_st
block|{
name|EVP_ENCODE_CTX
name|encode
decl_stmt|;
name|EVP_MD_CTX
name|md
decl_stmt|;
name|EVP_CIPHER_CTX
name|cipher
decl_stmt|;
block|}
name|PEM_ENCODE_SEAL_CTX
typedef|;
comment|/* enc_type is one off */
define|#
directive|define
name|PEM_TYPE_ENCRYPTED
value|10
define|#
directive|define
name|PEM_TYPE_MIC_ONLY
value|20
define|#
directive|define
name|PEM_TYPE_MIC_CLEAR
value|30
define|#
directive|define
name|PEM_TYPE_CLEAR
value|40
typedef|typedef
struct|struct
name|pem_recip_st
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|X509_NAME
modifier|*
name|dn
decl_stmt|;
name|int
name|cipher
decl_stmt|;
name|int
name|key_enc
decl_stmt|;
comment|/*      char iv[8]; unused and wrong size */
block|}
name|PEM_USER
typedef|;
typedef|typedef
struct|struct
name|pem_ctx_st
block|{
name|int
name|type
decl_stmt|;
comment|/* what type of object */
struct|struct
block|{
name|int
name|version
decl_stmt|;
name|int
name|mode
decl_stmt|;
block|}
name|proc_type
struct|;
name|char
modifier|*
name|domain
decl_stmt|;
struct|struct
block|{
name|int
name|cipher
decl_stmt|;
comment|/*-         unused, and wrong size         unsigned char iv[8]; */
block|}
name|DEK_info
struct|;
name|PEM_USER
modifier|*
name|originator
decl_stmt|;
name|int
name|num_recipient
decl_stmt|;
name|PEM_USER
modifier|*
modifier|*
name|recipient
decl_stmt|;
comment|/*-     XXX(ben): don#t think this is used!         STACK *x509_chain;      / * certificate chain */
name|EVP_MD
modifier|*
name|md
decl_stmt|;
comment|/* signature type */
name|int
name|md_enc
decl_stmt|;
comment|/* is the md encrypted or not? */
name|int
name|md_len
decl_stmt|;
comment|/* length of md_data */
name|char
modifier|*
name|md_data
decl_stmt|;
comment|/* message digest, could be pkey encrypted */
name|EVP_CIPHER
modifier|*
name|dec
decl_stmt|;
comment|/* date encryption cipher */
name|int
name|key_len
decl_stmt|;
comment|/* key length */
name|unsigned
name|char
modifier|*
name|key
decl_stmt|;
comment|/* key */
comment|/*-     unused, and wrong size     unsigned char iv[8]; */
name|int
name|data_enc
decl_stmt|;
comment|/* is the data encrypted */
name|int
name|data_len
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
block|}
name|PEM_CTX
typedef|;
comment|/*  * These macros make the PEM_read/PEM_write functions easier to maintain and  * write. Now they are all implemented with either: IMPLEMENT_PEM_rw(...) or  * IMPLEMENT_PEM_rw_cb(...)  */
ifdef|#
directive|ifdef
name|OPENSSL_NO_FP_API
define|#
directive|define
name|IMPLEMENT_PEM_read_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
comment|/**/
define|#
directive|define
name|IMPLEMENT_PEM_write_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
comment|/**/
define|#
directive|define
name|IMPLEMENT_PEM_write_fp_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
comment|/**/
define|#
directive|define
name|IMPLEMENT_PEM_write_cb_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
comment|/**/
define|#
directive|define
name|IMPLEMENT_PEM_write_cb_fp_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
comment|/**/
else|#
directive|else
define|#
directive|define
name|IMPLEMENT_PEM_read_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|type *PEM_read_##name(FILE *fp, type **x, pem_password_cb *cb, void *u)\ { \ return PEM_ASN1_read((d2i_of_void *)d2i_##asn1, str,fp,(void **)x,cb,u); \ }
define|#
directive|define
name|IMPLEMENT_PEM_write_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_##name(FILE *fp, type *x) \ { \ return PEM_ASN1_write((i2d_of_void *)i2d_##asn1,str,fp,x,NULL,NULL,0,NULL,NULL); \ }
define|#
directive|define
name|IMPLEMENT_PEM_write_fp_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_##name(FILE *fp, const type *x) \ { \ return PEM_ASN1_write((i2d_of_void *)i2d_##asn1,str,fp,(void *)x,NULL,NULL,0,NULL,NULL); \ }
define|#
directive|define
name|IMPLEMENT_PEM_write_cb_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \              unsigned char *kstr, int klen, pem_password_cb *cb, \                   void *u) \         { \         return PEM_ASN1_write((i2d_of_void *)i2d_##asn1,str,fp,x,enc,kstr,klen,cb,u); \         }
define|#
directive|define
name|IMPLEMENT_PEM_write_cb_fp_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \              unsigned char *kstr, int klen, pem_password_cb *cb, \                   void *u) \         { \         return PEM_ASN1_write((i2d_of_void *)i2d_##asn1,str,fp,x,enc,kstr,klen,cb,u); \         }
endif|#
directive|endif
define|#
directive|define
name|IMPLEMENT_PEM_read_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|type *PEM_read_bio_##name(BIO *bp, type **x, pem_password_cb *cb, void *u)\ { \ return PEM_ASN1_read_bio((d2i_of_void *)d2i_##asn1, str,bp,(void **)x,cb,u); \ }
define|#
directive|define
name|IMPLEMENT_PEM_write_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_bio_##name(BIO *bp, type *x) \ { \ return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,x,NULL,NULL,0,NULL,NULL); \ }
define|#
directive|define
name|IMPLEMENT_PEM_write_bio_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_bio_##name(BIO *bp, const type *x) \ { \ return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,(void *)x,NULL,NULL,0,NULL,NULL); \ }
define|#
directive|define
name|IMPLEMENT_PEM_write_cb_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \              unsigned char *kstr, int klen, pem_password_cb *cb, void *u) \         { \         return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,x,enc,kstr,klen,cb,u); \         }
define|#
directive|define
name|IMPLEMENT_PEM_write_cb_bio_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \              unsigned char *kstr, int klen, pem_password_cb *cb, void *u) \         { \         return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,(void *)x,enc,kstr,klen,cb,u); \         }
define|#
directive|define
name|IMPLEMENT_PEM_write
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_write_bio(name, type, str, asn1) \         IMPLEMENT_PEM_write_fp(name, type, str, asn1)
define|#
directive|define
name|IMPLEMENT_PEM_write_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_write_bio_const(name, type, str, asn1) \         IMPLEMENT_PEM_write_fp_const(name, type, str, asn1)
define|#
directive|define
name|IMPLEMENT_PEM_write_cb
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_write_cb_bio(name, type, str, asn1) \         IMPLEMENT_PEM_write_cb_fp(name, type, str, asn1)
define|#
directive|define
name|IMPLEMENT_PEM_write_cb_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_write_cb_bio_const(name, type, str, asn1) \         IMPLEMENT_PEM_write_cb_fp_const(name, type, str, asn1)
define|#
directive|define
name|IMPLEMENT_PEM_read
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_read_bio(name, type, str, asn1) \         IMPLEMENT_PEM_read_fp(name, type, str, asn1)
define|#
directive|define
name|IMPLEMENT_PEM_rw
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_read(name, type, str, asn1) \         IMPLEMENT_PEM_write(name, type, str, asn1)
define|#
directive|define
name|IMPLEMENT_PEM_rw_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_read(name, type, str, asn1) \         IMPLEMENT_PEM_write_const(name, type, str, asn1)
define|#
directive|define
name|IMPLEMENT_PEM_rw_cb
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|,
name|str
parameter_list|,
name|asn1
parameter_list|)
define|\
value|IMPLEMENT_PEM_read(name, type, str, asn1) \         IMPLEMENT_PEM_write_cb(name, type, str, asn1)
comment|/* These are the same except they are for the declarations */
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_NO_FP_API
argument_list|)
define|#
directive|define
name|DECLARE_PEM_read_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
comment|/**/
define|#
directive|define
name|DECLARE_PEM_write_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
comment|/**/
define|#
directive|define
name|DECLARE_PEM_write_cb_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
comment|/**/
else|#
directive|else
define|#
directive|define
name|DECLARE_PEM_read_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|type *PEM_read_##name(FILE *fp, type **x, pem_password_cb *cb, void *u);
define|#
directive|define
name|DECLARE_PEM_write_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|int PEM_write_##name(FILE *fp, type *x);
define|#
directive|define
name|DECLARE_PEM_write_fp_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|int PEM_write_##name(FILE *fp, const type *x);
define|#
directive|define
name|DECLARE_PEM_write_cb_fp
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \              unsigned char *kstr, int klen, pem_password_cb *cb, void *u);
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
define|#
directive|define
name|DECLARE_PEM_read_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|type *PEM_read_bio_##name(BIO *bp, type **x, pem_password_cb *cb, void *u);
define|#
directive|define
name|DECLARE_PEM_write_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|int PEM_write_bio_##name(BIO *bp, type *x);
define|#
directive|define
name|DECLARE_PEM_write_bio_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|int PEM_write_bio_##name(BIO *bp, const type *x);
define|#
directive|define
name|DECLARE_PEM_write_cb_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \              unsigned char *kstr, int klen, pem_password_cb *cb, void *u);
else|#
directive|else
define|#
directive|define
name|DECLARE_PEM_read_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
comment|/**/
define|#
directive|define
name|DECLARE_PEM_write_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
comment|/**/
define|#
directive|define
name|DECLARE_PEM_write_bio_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
comment|/**/
define|#
directive|define
name|DECLARE_PEM_write_cb_bio
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
comment|/**/
endif|#
directive|endif
define|#
directive|define
name|DECLARE_PEM_write
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|DECLARE_PEM_write_bio(name, type) \         DECLARE_PEM_write_fp(name, type)
define|#
directive|define
name|DECLARE_PEM_write_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|DECLARE_PEM_write_bio_const(name, type) \         DECLARE_PEM_write_fp_const(name, type)
define|#
directive|define
name|DECLARE_PEM_write_cb
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|DECLARE_PEM_write_cb_bio(name, type) \         DECLARE_PEM_write_cb_fp(name, type)
define|#
directive|define
name|DECLARE_PEM_read
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|DECLARE_PEM_read_bio(name, type) \         DECLARE_PEM_read_fp(name, type)
define|#
directive|define
name|DECLARE_PEM_rw
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|DECLARE_PEM_read(name, type) \         DECLARE_PEM_write(name, type)
define|#
directive|define
name|DECLARE_PEM_rw_const
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|DECLARE_PEM_read(name, type) \         DECLARE_PEM_write_const(name, type)
define|#
directive|define
name|DECLARE_PEM_rw_cb
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|DECLARE_PEM_read(name, type) \         DECLARE_PEM_write_cb(name, type)
if|#
directive|if
literal|1
comment|/* "userdata": new with OpenSSL 0.9.4 */
typedef|typedef
name|int
name|pem_password_cb
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|rwflag
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* OpenSSL 0.9.3, 0.9.3a */
typedef|typedef
name|int
name|pem_password_cb
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|rwflag
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|PEM_get_EVP_CIPHER_INFO
parameter_list|(
name|char
modifier|*
name|header
parameter_list|,
name|EVP_CIPHER_INFO
modifier|*
name|cipher
parameter_list|)
function_decl|;
name|int
name|PEM_do_header
parameter_list|(
name|EVP_CIPHER_INFO
modifier|*
name|cipher
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|long
modifier|*
name|len
parameter_list|,
name|pem_password_cb
modifier|*
name|callback
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_BIO
name|int
name|PEM_read_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|char
modifier|*
modifier|*
name|name
parameter_list|,
name|char
modifier|*
modifier|*
name|header
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|data
parameter_list|,
name|long
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|PEM_write_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|hdr
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|int
name|PEM_bytes_read_bio
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|pdata
parameter_list|,
name|long
modifier|*
name|plen
parameter_list|,
name|char
modifier|*
modifier|*
name|pnm
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|void
modifier|*
name|PEM_ASN1_read_bio
parameter_list|(
name|d2i_of_void
modifier|*
name|d2i
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
modifier|*
name|x
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|PEM_ASN1_write_bio
parameter_list|(
name|i2d_of_void
modifier|*
name|i2d
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
name|x
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|enc
parameter_list|,
name|unsigned
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_INFO
argument_list|)
operator|*
name|PEM_X509_INFO_read_bio
argument_list|(
name|BIO
operator|*
name|bp
argument_list|,
name|STACK_OF
argument_list|(
name|X509_INFO
argument_list|)
operator|*
name|sk
argument_list|,
name|pem_password_cb
operator|*
name|cb
argument_list|,
name|void
operator|*
name|u
argument_list|)
expr_stmt|;
name|int
name|PEM_X509_INFO_write_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|X509_INFO
modifier|*
name|xi
parameter_list|,
name|EVP_CIPHER
modifier|*
name|enc
parameter_list|,
name|unsigned
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cd
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|PEM_read
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|char
modifier|*
modifier|*
name|name
parameter_list|,
name|char
modifier|*
modifier|*
name|header
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|data
parameter_list|,
name|long
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
name|PEM_write
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|hdr
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
name|void
modifier|*
name|PEM_ASN1_read
parameter_list|(
name|d2i_of_void
modifier|*
name|d2i
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|void
modifier|*
modifier|*
name|x
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|PEM_ASN1_write
parameter_list|(
name|i2d_of_void
modifier|*
name|i2d
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|void
modifier|*
name|x
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|enc
parameter_list|,
name|unsigned
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|callback
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|X509_INFO
argument_list|)
operator|*
name|PEM_X509_INFO_read
argument_list|(
name|FILE
operator|*
name|fp
argument_list|,
name|STACK_OF
argument_list|(
name|X509_INFO
argument_list|)
operator|*
name|sk
argument_list|,
name|pem_password_cb
operator|*
name|cb
argument_list|,
name|void
operator|*
name|u
argument_list|)
expr_stmt|;
name|int
name|PEM_SealInit
parameter_list|(
name|PEM_ENCODE_SEAL_CTX
modifier|*
name|ctx
parameter_list|,
name|EVP_CIPHER
modifier|*
name|type
parameter_list|,
name|EVP_MD
modifier|*
name|md_type
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|ek
parameter_list|,
name|int
modifier|*
name|ekl
parameter_list|,
name|unsigned
name|char
modifier|*
name|iv
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|pubk
parameter_list|,
name|int
name|npubk
parameter_list|)
function_decl|;
name|void
name|PEM_SealUpdate
parameter_list|(
name|PEM_ENCODE_SEAL_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|,
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inl
parameter_list|)
function_decl|;
name|int
name|PEM_SealFinal
parameter_list|(
name|PEM_ENCODE_SEAL_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|int
modifier|*
name|sigl
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
name|int
modifier|*
name|outl
parameter_list|,
name|EVP_PKEY
modifier|*
name|priv
parameter_list|)
function_decl|;
name|void
name|PEM_SignInit
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|EVP_MD
modifier|*
name|type
parameter_list|)
function_decl|;
name|void
name|PEM_SignUpdate
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
name|int
name|cnt
parameter_list|)
function_decl|;
name|int
name|PEM_SignFinal
parameter_list|(
name|EVP_MD_CTX
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|char
modifier|*
name|sigret
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
function_decl|;
name|int
name|PEM_def_callback
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|num
parameter_list|,
name|int
name|w
parameter_list|,
name|void
modifier|*
name|key
parameter_list|)
function_decl|;
name|void
name|PEM_proc_type
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
name|void
name|PEM_dek_info
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|int
name|len
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
include|#
directive|include
file|<openssl/symhacks.h>
name|DECLARE_PEM_rw
argument_list|(
argument|X509
argument_list|,
argument|X509
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|X509_AUX
argument_list|,
argument|X509
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|X509_CERT_PAIR
argument_list|,
argument|X509_CERT_PAIR
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|X509_REQ
argument_list|,
argument|X509_REQ
argument_list|)
name|DECLARE_PEM_write
argument_list|(
argument|X509_REQ_NEW
argument_list|,
argument|X509_REQ
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|X509_CRL
argument_list|,
argument|X509_CRL
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|PKCS7
argument_list|,
argument|PKCS7
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|NETSCAPE_CERT_SEQUENCE
argument_list|,
argument|NETSCAPE_CERT_SEQUENCE
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|PKCS8
argument_list|,
argument|X509_SIG
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|PKCS8_PRIV_KEY_INFO
argument_list|,
argument|PKCS8_PRIV_KEY_INFO
argument_list|)
ifndef|#
directive|ifndef
name|OPENSSL_NO_RSA
name|DECLARE_PEM_rw_cb
argument_list|(
argument|RSAPrivateKey
argument_list|,
argument|RSA
argument_list|)
name|DECLARE_PEM_rw_const
argument_list|(
argument|RSAPublicKey
argument_list|,
argument|RSA
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|RSA_PUBKEY
argument_list|,
argument|RSA
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DSA
name|DECLARE_PEM_rw_cb
argument_list|(
argument|DSAPrivateKey
argument_list|,
argument|DSA
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|DSA_PUBKEY
argument_list|,
argument|DSA
argument_list|)
name|DECLARE_PEM_rw_const
argument_list|(
argument|DSAparams
argument_list|,
argument|DSA
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|DECLARE_PEM_rw_const
argument_list|(
argument|ECPKParameters
argument_list|,
argument|EC_GROUP
argument_list|)
name|DECLARE_PEM_rw_cb
argument_list|(
argument|ECPrivateKey
argument_list|,
argument|EC_KEY
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|EC_PUBKEY
argument_list|,
argument|EC_KEY
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_DH
name|DECLARE_PEM_rw_const
argument_list|(
argument|DHparams
argument_list|,
argument|DH
argument_list|)
name|DECLARE_PEM_write_const
argument_list|(
argument|DHxparams
argument_list|,
argument|DH
argument_list|)
endif|#
directive|endif
name|DECLARE_PEM_rw_cb
argument_list|(
argument|PrivateKey
argument_list|,
argument|EVP_PKEY
argument_list|)
name|DECLARE_PEM_rw
argument_list|(
argument|PUBKEY
argument_list|,
argument|EVP_PKEY
argument_list|)
name|int
name|PEM_write_bio_PKCS8PrivateKey_nid
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|PEM_write_bio_PKCS8PrivateKey
parameter_list|(
name|BIO
modifier|*
parameter_list|,
name|EVP_PKEY
modifier|*
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pem_password_cb
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8PrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|enc
parameter_list|,
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8PrivateKey_nid_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PKCS8PrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|x
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8PrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|enc
parameter_list|,
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|i2d_PKCS8PrivateKey_nid_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|PEM_write_PKCS8PrivateKey_nid
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|,
name|int
name|nid
parameter_list|,
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|d2i_PKCS8PrivateKey_fp
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|x
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|PEM_write_PKCS8PrivateKey
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|enc
parameter_list|,
name|char
modifier|*
name|kstr
parameter_list|,
name|int
name|klen
parameter_list|,
name|pem_password_cb
modifier|*
name|cd
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|PEM_read_bio_Parameters
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
modifier|*
name|x
parameter_list|)
function_decl|;
name|int
name|PEM_write_bio_Parameters
parameter_list|(
name|BIO
modifier|*
name|bp
parameter_list|,
name|EVP_PKEY
modifier|*
name|x
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|b2i_PrivateKey
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|in
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|b2i_PublicKey
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|in
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|b2i_PrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|in
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|b2i_PublicKey_bio
parameter_list|(
name|BIO
modifier|*
name|in
parameter_list|)
function_decl|;
name|int
name|i2b_PrivateKey_bio
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
name|int
name|i2b_PublicKey_bio
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|EVP_PKEY
modifier|*
name|pk
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_RC4
name|EVP_PKEY
modifier|*
name|b2i_PVK_bio
parameter_list|(
name|BIO
modifier|*
name|in
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
name|int
name|i2b_PVK_bio
parameter_list|(
name|BIO
modifier|*
name|out
parameter_list|,
name|EVP_PKEY
modifier|*
name|pk
parameter_list|,
name|int
name|enclevel
parameter_list|,
name|pem_password_cb
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|u
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* BEGIN ERROR CODES */
comment|/*  * The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_PEM_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the PEM functions. */
comment|/* Function codes. */
define|#
directive|define
name|PEM_F_B2I_DSS
value|127
define|#
directive|define
name|PEM_F_B2I_PVK_BIO
value|128
define|#
directive|define
name|PEM_F_B2I_RSA
value|129
define|#
directive|define
name|PEM_F_CHECK_BITLEN_DSA
value|130
define|#
directive|define
name|PEM_F_CHECK_BITLEN_RSA
value|131
define|#
directive|define
name|PEM_F_D2I_PKCS8PRIVATEKEY_BIO
value|120
define|#
directive|define
name|PEM_F_D2I_PKCS8PRIVATEKEY_FP
value|121
define|#
directive|define
name|PEM_F_DO_B2I
value|132
define|#
directive|define
name|PEM_F_DO_B2I_BIO
value|133
define|#
directive|define
name|PEM_F_DO_BLOB_HEADER
value|134
define|#
directive|define
name|PEM_F_DO_PK8PKEY
value|126
define|#
directive|define
name|PEM_F_DO_PK8PKEY_FP
value|125
define|#
directive|define
name|PEM_F_DO_PVK_BODY
value|135
define|#
directive|define
name|PEM_F_DO_PVK_HEADER
value|136
define|#
directive|define
name|PEM_F_I2B_PVK
value|137
define|#
directive|define
name|PEM_F_I2B_PVK_BIO
value|138
define|#
directive|define
name|PEM_F_LOAD_IV
value|101
define|#
directive|define
name|PEM_F_PEM_ASN1_READ
value|102
define|#
directive|define
name|PEM_F_PEM_ASN1_READ_BIO
value|103
define|#
directive|define
name|PEM_F_PEM_ASN1_WRITE
value|104
define|#
directive|define
name|PEM_F_PEM_ASN1_WRITE_BIO
value|105
define|#
directive|define
name|PEM_F_PEM_DEF_CALLBACK
value|100
define|#
directive|define
name|PEM_F_PEM_DO_HEADER
value|106
define|#
directive|define
name|PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
value|118
define|#
directive|define
name|PEM_F_PEM_GET_EVP_CIPHER_INFO
value|107
define|#
directive|define
name|PEM_F_PEM_PK8PKEY
value|119
define|#
directive|define
name|PEM_F_PEM_READ
value|108
define|#
directive|define
name|PEM_F_PEM_READ_BIO
value|109
define|#
directive|define
name|PEM_F_PEM_READ_BIO_DHPARAMS
value|141
define|#
directive|define
name|PEM_F_PEM_READ_BIO_PARAMETERS
value|140
define|#
directive|define
name|PEM_F_PEM_READ_BIO_PRIVATEKEY
value|123
define|#
directive|define
name|PEM_F_PEM_READ_DHPARAMS
value|142
define|#
directive|define
name|PEM_F_PEM_READ_PRIVATEKEY
value|124
define|#
directive|define
name|PEM_F_PEM_SEALFINAL
value|110
define|#
directive|define
name|PEM_F_PEM_SEALINIT
value|111
define|#
directive|define
name|PEM_F_PEM_SIGNFINAL
value|112
define|#
directive|define
name|PEM_F_PEM_WRITE
value|113
define|#
directive|define
name|PEM_F_PEM_WRITE_BIO
value|114
define|#
directive|define
name|PEM_F_PEM_WRITE_PRIVATEKEY
value|139
define|#
directive|define
name|PEM_F_PEM_X509_INFO_READ
value|115
define|#
directive|define
name|PEM_F_PEM_X509_INFO_READ_BIO
value|116
define|#
directive|define
name|PEM_F_PEM_X509_INFO_WRITE_BIO
value|117
comment|/* Reason codes. */
define|#
directive|define
name|PEM_R_BAD_BASE64_DECODE
value|100
define|#
directive|define
name|PEM_R_BAD_DECRYPT
value|101
define|#
directive|define
name|PEM_R_BAD_END_LINE
value|102
define|#
directive|define
name|PEM_R_BAD_IV_CHARS
value|103
define|#
directive|define
name|PEM_R_BAD_MAGIC_NUMBER
value|116
define|#
directive|define
name|PEM_R_BAD_PASSWORD_READ
value|104
define|#
directive|define
name|PEM_R_BAD_VERSION_NUMBER
value|117
define|#
directive|define
name|PEM_R_BIO_WRITE_FAILURE
value|118
define|#
directive|define
name|PEM_R_CIPHER_IS_NULL
value|127
define|#
directive|define
name|PEM_R_ERROR_CONVERTING_PRIVATE_KEY
value|115
define|#
directive|define
name|PEM_R_EXPECTING_PRIVATE_KEY_BLOB
value|119
define|#
directive|define
name|PEM_R_EXPECTING_PUBLIC_KEY_BLOB
value|120
define|#
directive|define
name|PEM_R_INCONSISTENT_HEADER
value|121
define|#
directive|define
name|PEM_R_KEYBLOB_HEADER_PARSE_ERROR
value|122
define|#
directive|define
name|PEM_R_KEYBLOB_TOO_SHORT
value|123
define|#
directive|define
name|PEM_R_NOT_DEK_INFO
value|105
define|#
directive|define
name|PEM_R_NOT_ENCRYPTED
value|106
define|#
directive|define
name|PEM_R_NOT_PROC_TYPE
value|107
define|#
directive|define
name|PEM_R_NO_START_LINE
value|108
define|#
directive|define
name|PEM_R_PROBLEMS_GETTING_PASSWORD
value|109
define|#
directive|define
name|PEM_R_PUBLIC_KEY_NO_RSA
value|110
define|#
directive|define
name|PEM_R_PVK_DATA_TOO_SHORT
value|124
define|#
directive|define
name|PEM_R_PVK_TOO_SHORT
value|125
define|#
directive|define
name|PEM_R_READ_KEY
value|111
define|#
directive|define
name|PEM_R_SHORT_HEADER
value|112
define|#
directive|define
name|PEM_R_UNSUPPORTED_CIPHER
value|113
define|#
directive|define
name|PEM_R_UNSUPPORTED_ENCRYPTION
value|114
define|#
directive|define
name|PEM_R_UNSUPPORTED_KEY_COMPONENTS
value|126
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

