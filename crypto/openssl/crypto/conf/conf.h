begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/conf/conf.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_CONF_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_CONF_H
end_define

begin_include
include|#
directive|include
file|<openssl/bio.h>
end_include

begin_include
include|#
directive|include
file|<openssl/lhash.h>
end_include

begin_include
include|#
directive|include
file|<openssl/stack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/safestack.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|section
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|value
decl_stmt|;
block|}
name|CONF_VALUE
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|CONF_VALUE
argument_list|)
struct_decl|struct
name|conf_st
struct_decl|;
typedef|typedef
name|struct
name|conf_st
name|CONF
typedef|;
struct_decl|struct
name|conf_method_st
struct_decl|;
typedef|typedef
name|struct
name|conf_method_st
name|CONF_METHOD
typedef|;
struct|struct
name|conf_method_st
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|CONF
modifier|*
function_decl|(
modifier|*
name|create
function_decl|)
parameter_list|(
name|CONF_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|destroy_data
function_decl|)
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|load
function_decl|)
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|,
name|long
modifier|*
name|eline
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dump
function_decl|)
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|is_number
function_decl|)
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|char
name|c
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|to_int
function_decl|)
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|char
name|c
parameter_list|)
function_decl|;
block|}
struct|;
name|int
name|CONF_set_default_method
parameter_list|(
name|CONF_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
name|LHASH
modifier|*
name|CONF_load
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|long
modifier|*
name|eline
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|NO_FP_API
name|LHASH
modifier|*
name|CONF_load_fp
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|long
modifier|*
name|eline
parameter_list|)
function_decl|;
endif|#
directive|endif
name|LHASH
modifier|*
name|CONF_load_bio
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|,
name|long
modifier|*
name|eline
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|CONF_get_section
argument_list|(
name|LHASH
operator|*
name|conf
argument_list|,
name|char
operator|*
name|section
argument_list|)
expr_stmt|;
name|char
modifier|*
name|CONF_get_string
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|char
modifier|*
name|group
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|long
name|CONF_get_number
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|char
modifier|*
name|group
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|CONF_free
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|)
function_decl|;
name|int
name|CONF_dump_fp
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
name|int
name|CONF_dump_bio
parameter_list|(
name|LHASH
modifier|*
name|conf
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
comment|/* New conf code.  The semantics are different from the functions above.    If that wasn't the case, the above functions would have been replaced */
struct|struct
name|conf_st
block|{
name|CONF_METHOD
modifier|*
name|meth
decl_stmt|;
name|void
modifier|*
name|meth_data
decl_stmt|;
name|LHASH
modifier|*
name|data
decl_stmt|;
block|}
struct|;
name|CONF
modifier|*
name|NCONF_new
parameter_list|(
name|CONF_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
name|CONF_METHOD
modifier|*
name|NCONF_default
parameter_list|()
function_decl|;
name|CONF_METHOD
modifier|*
name|NCONF_WIN32
parameter_list|()
function_decl|;
if|#
directive|if
literal|0
comment|/* Just to give you an idea of what I have in mind */
block|CONF_METHOD *NCONF_XML();
endif|#
directive|endif
name|void
name|NCONF_free
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|)
function_decl|;
name|void
name|NCONF_free_data
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|)
function_decl|;
name|int
name|NCONF_load
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|long
modifier|*
name|eline
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|NO_FP_API
name|int
name|NCONF_load_fp
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|long
modifier|*
name|eline
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|NCONF_load_bio
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|BIO
modifier|*
name|bp
parameter_list|,
name|long
modifier|*
name|eline
parameter_list|)
function_decl|;
name|STACK_OF
argument_list|(
name|CONF_VALUE
argument_list|)
operator|*
name|NCONF_get_section
argument_list|(
name|CONF
operator|*
name|conf
argument_list|,
name|char
operator|*
name|section
argument_list|)
expr_stmt|;
name|char
modifier|*
name|NCONF_get_string
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|char
modifier|*
name|group
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|long
name|NCONF_get_number
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|char
modifier|*
name|group
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|NCONF_dump_fp
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|)
function_decl|;
name|int
name|NCONF_dump_bio
parameter_list|(
name|CONF
modifier|*
name|conf
parameter_list|,
name|BIO
modifier|*
name|out
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_CONF_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the CONF functions. */
comment|/* Function codes. */
define|#
directive|define
name|CONF_F_CONF_DUMP_FP
value|104
define|#
directive|define
name|CONF_F_CONF_LOAD
value|100
define|#
directive|define
name|CONF_F_CONF_LOAD_BIO
value|102
define|#
directive|define
name|CONF_F_CONF_LOAD_FP
value|103
define|#
directive|define
name|CONF_F_NCONF_DUMP_BIO
value|105
define|#
directive|define
name|CONF_F_NCONF_DUMP_FP
value|106
define|#
directive|define
name|CONF_F_NCONF_GET_NUMBER
value|107
define|#
directive|define
name|CONF_F_NCONF_GET_SECTION
value|108
define|#
directive|define
name|CONF_F_NCONF_GET_STRING
value|109
define|#
directive|define
name|CONF_F_NCONF_LOAD_BIO
value|110
define|#
directive|define
name|CONF_F_NCONF_NEW
value|111
define|#
directive|define
name|CONF_F_STR_COPY
value|101
comment|/* Reason codes. */
define|#
directive|define
name|CONF_R_MISSING_CLOSE_SQUARE_BRACKET
value|100
define|#
directive|define
name|CONF_R_MISSING_EQUAL_SIGN
value|101
define|#
directive|define
name|CONF_R_NO_CLOSE_BRACE
value|102
define|#
directive|define
name|CONF_R_NO_CONF
value|105
define|#
directive|define
name|CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
value|106
define|#
directive|define
name|CONF_R_NO_SECTION
value|107
define|#
directive|define
name|CONF_R_UNABLE_TO_CREATE_NEW_SECTION
value|103
define|#
directive|define
name|CONF_R_VARIABLE_HAS_NO_VALUE
value|104
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

