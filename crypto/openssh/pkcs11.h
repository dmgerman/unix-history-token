begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $OpenBSD: pkcs11.h,v 1.2 2010/02/24 06:12:53 djm Exp $ */
end_comment

begin_comment
comment|/* pkcs11.h    Copyright 2006, 2007 g10 Code GmbH    Copyright 2006 Andreas Jellinghaus     This file is free software; as a special exception the author gives    unlimited permission to copy and/or distribute it, with or without    modifications, as long as this notice is preserved.     This file is distributed in the hope that it will be useful, but    WITHOUT ANY WARRANTY, to the extent permitted by law; without even    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR    PURPOSE.  */
end_comment

begin_comment
comment|/* Please submit changes back to the Scute project at    http://www.scute.org/ (or send them to marcus@g10code.com), so that    they can be picked up by other projects from there as well.  */
end_comment

begin_comment
comment|/* This file is a modified implementation of the PKCS #11 standard by    RSA Security Inc.  It is mostly a drop-in replacement, with the    following change:     This header file does not require any macro definitions by the user    (like CK_DEFINE_FUNCTION etc).  In fact, it defines those macros    for you (if useful, some are missing, let me know if you need    more).     There is an additional API available that does comply better to the    GNU coding standard.  It can be switched on by defining    CRYPTOKI_GNU before including this header file.  For this, the    following changes are made to the specification:     All structure types are changed to a "struct ck_foo" where CK_FOO    is the type name in PKCS #11.     All non-structure types are changed to ck_foo_t where CK_FOO is the    lowercase version of the type name in PKCS #11.  The basic types    (CK_ULONG et al.) are removed without substitute.     All members of structures are modified in the following way: Type    indication prefixes are removed, and underscore characters are    inserted before words.  Then the result is lowercased.     Note that function names are still in the original case, as they    need for ABI compatibility.     CK_FALSE, CK_TRUE and NULL_PTR are removed without substitute.  Use<stdbool.h>.     If CRYPTOKI_COMPAT is defined before including this header file,    then none of the API changes above take place, and the API is the    one defined by the PKCS #11 standard.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|PKCS11_H
end_ifndef

begin_define
define|#
directive|define
name|PKCS11_H
value|1
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* The version of cryptoki we implement.  The revision is changed with    each modification of this file.  If you do not use the "official"    version of this file, please consider deleting the revision macro    (you may use a macro with a different name to keep track of your    versions).  */
define|#
directive|define
name|CRYPTOKI_VERSION_MAJOR
value|2
define|#
directive|define
name|CRYPTOKI_VERSION_MINOR
value|20
define|#
directive|define
name|CRYPTOKI_VERSION_REVISION
value|6
comment|/* Compatibility interface is default, unless CRYPTOKI_GNU is    given.  */
ifndef|#
directive|ifndef
name|CRYPTOKI_GNU
ifndef|#
directive|ifndef
name|CRYPTOKI_COMPAT
define|#
directive|define
name|CRYPTOKI_COMPAT
value|1
endif|#
directive|endif
endif|#
directive|endif
comment|/* System dependencies.  */
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|CRYPTOKI_FORCE_WIN32
argument_list|)
comment|/* There is a matching pop below.  */
pragma|#
directive|pragma
name|pack
name|(
name|push
name|,
name|cryptoki
name|,
name|1
name|)
ifdef|#
directive|ifdef
name|CRYPTOKI_EXPORTS
define|#
directive|define
name|CK_SPEC
value|__declspec(dllexport)
else|#
directive|else
define|#
directive|define
name|CK_SPEC
value|__declspec(dllimport)
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|CK_SPEC
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CRYPTOKI_COMPAT
comment|/* If we are in compatibility mode, switch all exposed names to the      PKCS #11 variant.  There are corresponding #undefs below.  */
define|#
directive|define
name|ck_flags_t
value|CK_FLAGS
define|#
directive|define
name|ck_version
value|_CK_VERSION
define|#
directive|define
name|ck_info
value|_CK_INFO
define|#
directive|define
name|cryptoki_version
value|cryptokiVersion
define|#
directive|define
name|manufacturer_id
value|manufacturerID
define|#
directive|define
name|library_description
value|libraryDescription
define|#
directive|define
name|library_version
value|libraryVersion
define|#
directive|define
name|ck_notification_t
value|CK_NOTIFICATION
define|#
directive|define
name|ck_slot_id_t
value|CK_SLOT_ID
define|#
directive|define
name|ck_slot_info
value|_CK_SLOT_INFO
define|#
directive|define
name|slot_description
value|slotDescription
define|#
directive|define
name|hardware_version
value|hardwareVersion
define|#
directive|define
name|firmware_version
value|firmwareVersion
define|#
directive|define
name|ck_token_info
value|_CK_TOKEN_INFO
define|#
directive|define
name|serial_number
value|serialNumber
define|#
directive|define
name|max_session_count
value|ulMaxSessionCount
define|#
directive|define
name|session_count
value|ulSessionCount
define|#
directive|define
name|max_rw_session_count
value|ulMaxRwSessionCount
define|#
directive|define
name|rw_session_count
value|ulRwSessionCount
define|#
directive|define
name|max_pin_len
value|ulMaxPinLen
define|#
directive|define
name|min_pin_len
value|ulMinPinLen
define|#
directive|define
name|total_public_memory
value|ulTotalPublicMemory
define|#
directive|define
name|free_public_memory
value|ulFreePublicMemory
define|#
directive|define
name|total_private_memory
value|ulTotalPrivateMemory
define|#
directive|define
name|free_private_memory
value|ulFreePrivateMemory
define|#
directive|define
name|utc_time
value|utcTime
define|#
directive|define
name|ck_session_handle_t
value|CK_SESSION_HANDLE
define|#
directive|define
name|ck_user_type_t
value|CK_USER_TYPE
define|#
directive|define
name|ck_state_t
value|CK_STATE
define|#
directive|define
name|ck_session_info
value|_CK_SESSION_INFO
define|#
directive|define
name|slot_id
value|slotID
define|#
directive|define
name|device_error
value|ulDeviceError
define|#
directive|define
name|ck_object_handle_t
value|CK_OBJECT_HANDLE
define|#
directive|define
name|ck_object_class_t
value|CK_OBJECT_CLASS
define|#
directive|define
name|ck_hw_feature_type_t
value|CK_HW_FEATURE_TYPE
define|#
directive|define
name|ck_key_type_t
value|CK_KEY_TYPE
define|#
directive|define
name|ck_certificate_type_t
value|CK_CERTIFICATE_TYPE
define|#
directive|define
name|ck_attribute_type_t
value|CK_ATTRIBUTE_TYPE
define|#
directive|define
name|ck_attribute
value|_CK_ATTRIBUTE
define|#
directive|define
name|value
value|pValue
define|#
directive|define
name|value_len
value|ulValueLen
define|#
directive|define
name|ck_date
value|_CK_DATE
define|#
directive|define
name|ck_mechanism_type_t
value|CK_MECHANISM_TYPE
define|#
directive|define
name|ck_mechanism
value|_CK_MECHANISM
define|#
directive|define
name|parameter
value|pParameter
define|#
directive|define
name|parameter_len
value|ulParameterLen
define|#
directive|define
name|ck_mechanism_info
value|_CK_MECHANISM_INFO
define|#
directive|define
name|min_key_size
value|ulMinKeySize
define|#
directive|define
name|max_key_size
value|ulMaxKeySize
define|#
directive|define
name|ck_rv_t
value|CK_RV
define|#
directive|define
name|ck_notify_t
value|CK_NOTIFY
define|#
directive|define
name|ck_function_list
value|_CK_FUNCTION_LIST
define|#
directive|define
name|ck_createmutex_t
value|CK_CREATEMUTEX
define|#
directive|define
name|ck_destroymutex_t
value|CK_DESTROYMUTEX
define|#
directive|define
name|ck_lockmutex_t
value|CK_LOCKMUTEX
define|#
directive|define
name|ck_unlockmutex_t
value|CK_UNLOCKMUTEX
define|#
directive|define
name|ck_c_initialize_args
value|_CK_C_INITIALIZE_ARGS
define|#
directive|define
name|create_mutex
value|CreateMutex
define|#
directive|define
name|destroy_mutex
value|DestroyMutex
define|#
directive|define
name|lock_mutex
value|LockMutex
define|#
directive|define
name|unlock_mutex
value|UnlockMutex
define|#
directive|define
name|reserved
value|pReserved
endif|#
directive|endif
comment|/* CRYPTOKI_COMPAT */
typedef|typedef
name|unsigned
name|long
name|ck_flags_t
typedef|;
struct|struct
name|ck_version
block|{
name|unsigned
name|char
name|major
decl_stmt|;
name|unsigned
name|char
name|minor
decl_stmt|;
block|}
struct|;
struct|struct
name|ck_info
block|{
name|struct
name|ck_version
name|cryptoki_version
decl_stmt|;
name|unsigned
name|char
name|manufacturer_id
index|[
literal|32
index|]
decl_stmt|;
name|ck_flags_t
name|flags
decl_stmt|;
name|unsigned
name|char
name|library_description
index|[
literal|32
index|]
decl_stmt|;
name|struct
name|ck_version
name|library_version
decl_stmt|;
block|}
struct|;
typedef|typedef
name|unsigned
name|long
name|ck_notification_t
typedef|;
define|#
directive|define
name|CKN_SURRENDER
value|(0)
typedef|typedef
name|unsigned
name|long
name|ck_slot_id_t
typedef|;
struct|struct
name|ck_slot_info
block|{
name|unsigned
name|char
name|slot_description
index|[
literal|64
index|]
decl_stmt|;
name|unsigned
name|char
name|manufacturer_id
index|[
literal|32
index|]
decl_stmt|;
name|ck_flags_t
name|flags
decl_stmt|;
name|struct
name|ck_version
name|hardware_version
decl_stmt|;
name|struct
name|ck_version
name|firmware_version
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|CKF_TOKEN_PRESENT
value|(1<< 0)
define|#
directive|define
name|CKF_REMOVABLE_DEVICE
value|(1<< 1)
define|#
directive|define
name|CKF_HW_SLOT
value|(1<< 2)
define|#
directive|define
name|CKF_ARRAY_ATTRIBUTE
value|(1<< 30)
struct|struct
name|ck_token_info
block|{
name|unsigned
name|char
name|label
index|[
literal|32
index|]
decl_stmt|;
name|unsigned
name|char
name|manufacturer_id
index|[
literal|32
index|]
decl_stmt|;
name|unsigned
name|char
name|model
index|[
literal|16
index|]
decl_stmt|;
name|unsigned
name|char
name|serial_number
index|[
literal|16
index|]
decl_stmt|;
name|ck_flags_t
name|flags
decl_stmt|;
name|unsigned
name|long
name|max_session_count
decl_stmt|;
name|unsigned
name|long
name|session_count
decl_stmt|;
name|unsigned
name|long
name|max_rw_session_count
decl_stmt|;
name|unsigned
name|long
name|rw_session_count
decl_stmt|;
name|unsigned
name|long
name|max_pin_len
decl_stmt|;
name|unsigned
name|long
name|min_pin_len
decl_stmt|;
name|unsigned
name|long
name|total_public_memory
decl_stmt|;
name|unsigned
name|long
name|free_public_memory
decl_stmt|;
name|unsigned
name|long
name|total_private_memory
decl_stmt|;
name|unsigned
name|long
name|free_private_memory
decl_stmt|;
name|struct
name|ck_version
name|hardware_version
decl_stmt|;
name|struct
name|ck_version
name|firmware_version
decl_stmt|;
name|unsigned
name|char
name|utc_time
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|CKF_RNG
value|(1<< 0)
define|#
directive|define
name|CKF_WRITE_PROTECTED
value|(1<< 1)
define|#
directive|define
name|CKF_LOGIN_REQUIRED
value|(1<< 2)
define|#
directive|define
name|CKF_USER_PIN_INITIALIZED
value|(1<< 3)
define|#
directive|define
name|CKF_RESTORE_KEY_NOT_NEEDED
value|(1<< 5)
define|#
directive|define
name|CKF_CLOCK_ON_TOKEN
value|(1<< 6)
define|#
directive|define
name|CKF_PROTECTED_AUTHENTICATION_PATH
value|(1<< 8)
define|#
directive|define
name|CKF_DUAL_CRYPTO_OPERATIONS
value|(1<< 9)
define|#
directive|define
name|CKF_TOKEN_INITIALIZED
value|(1<< 10)
define|#
directive|define
name|CKF_SECONDARY_AUTHENTICATION
value|(1<< 11)
define|#
directive|define
name|CKF_USER_PIN_COUNT_LOW
value|(1<< 16)
define|#
directive|define
name|CKF_USER_PIN_FINAL_TRY
value|(1<< 17)
define|#
directive|define
name|CKF_USER_PIN_LOCKED
value|(1<< 18)
define|#
directive|define
name|CKF_USER_PIN_TO_BE_CHANGED
value|(1<< 19)
define|#
directive|define
name|CKF_SO_PIN_COUNT_LOW
value|(1<< 20)
define|#
directive|define
name|CKF_SO_PIN_FINAL_TRY
value|(1<< 21)
define|#
directive|define
name|CKF_SO_PIN_LOCKED
value|(1<< 22)
define|#
directive|define
name|CKF_SO_PIN_TO_BE_CHANGED
value|(1<< 23)
define|#
directive|define
name|CK_UNAVAILABLE_INFORMATION
value|((unsigned long) -1)
define|#
directive|define
name|CK_EFFECTIVELY_INFINITE
value|(0)
typedef|typedef
name|unsigned
name|long
name|ck_session_handle_t
typedef|;
define|#
directive|define
name|CK_INVALID_HANDLE
value|(0)
typedef|typedef
name|unsigned
name|long
name|ck_user_type_t
typedef|;
define|#
directive|define
name|CKU_SO
value|(0)
define|#
directive|define
name|CKU_USER
value|(1)
define|#
directive|define
name|CKU_CONTEXT_SPECIFIC
value|(2)
typedef|typedef
name|unsigned
name|long
name|ck_state_t
typedef|;
define|#
directive|define
name|CKS_RO_PUBLIC_SESSION
value|(0)
define|#
directive|define
name|CKS_RO_USER_FUNCTIONS
value|(1)
define|#
directive|define
name|CKS_RW_PUBLIC_SESSION
value|(2)
define|#
directive|define
name|CKS_RW_USER_FUNCTIONS
value|(3)
define|#
directive|define
name|CKS_RW_SO_FUNCTIONS
value|(4)
struct|struct
name|ck_session_info
block|{
name|ck_slot_id_t
name|slot_id
decl_stmt|;
name|ck_state_t
name|state
decl_stmt|;
name|ck_flags_t
name|flags
decl_stmt|;
name|unsigned
name|long
name|device_error
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|CKF_RW_SESSION
value|(1<< 1)
define|#
directive|define
name|CKF_SERIAL_SESSION
value|(1<< 2)
typedef|typedef
name|unsigned
name|long
name|ck_object_handle_t
typedef|;
typedef|typedef
name|unsigned
name|long
name|ck_object_class_t
typedef|;
define|#
directive|define
name|CKO_DATA
value|(0)
define|#
directive|define
name|CKO_CERTIFICATE
value|(1)
define|#
directive|define
name|CKO_PUBLIC_KEY
value|(2)
define|#
directive|define
name|CKO_PRIVATE_KEY
value|(3)
define|#
directive|define
name|CKO_SECRET_KEY
value|(4)
define|#
directive|define
name|CKO_HW_FEATURE
value|(5)
define|#
directive|define
name|CKO_DOMAIN_PARAMETERS
value|(6)
define|#
directive|define
name|CKO_MECHANISM
value|(7)
define|#
directive|define
name|CKO_VENDOR_DEFINED
value|((unsigned long) (1<< 31))
typedef|typedef
name|unsigned
name|long
name|ck_hw_feature_type_t
typedef|;
define|#
directive|define
name|CKH_MONOTONIC_COUNTER
value|(1)
define|#
directive|define
name|CKH_CLOCK
value|(2)
define|#
directive|define
name|CKH_USER_INTERFACE
value|(3)
define|#
directive|define
name|CKH_VENDOR_DEFINED
value|((unsigned long) (1<< 31))
typedef|typedef
name|unsigned
name|long
name|ck_key_type_t
typedef|;
define|#
directive|define
name|CKK_RSA
value|(0)
define|#
directive|define
name|CKK_DSA
value|(1)
define|#
directive|define
name|CKK_DH
value|(2)
define|#
directive|define
name|CKK_ECDSA
value|(3)
define|#
directive|define
name|CKK_EC
value|(3)
define|#
directive|define
name|CKK_X9_42_DH
value|(4)
define|#
directive|define
name|CKK_KEA
value|(5)
define|#
directive|define
name|CKK_GENERIC_SECRET
value|(0x10)
define|#
directive|define
name|CKK_RC2
value|(0x11)
define|#
directive|define
name|CKK_RC4
value|(0x12)
define|#
directive|define
name|CKK_DES
value|(0x13)
define|#
directive|define
name|CKK_DES2
value|(0x14)
define|#
directive|define
name|CKK_DES3
value|(0x15)
define|#
directive|define
name|CKK_CAST
value|(0x16)
define|#
directive|define
name|CKK_CAST3
value|(0x17)
define|#
directive|define
name|CKK_CAST128
value|(0x18)
define|#
directive|define
name|CKK_RC5
value|(0x19)
define|#
directive|define
name|CKK_IDEA
value|(0x1a)
define|#
directive|define
name|CKK_SKIPJACK
value|(0x1b)
define|#
directive|define
name|CKK_BATON
value|(0x1c)
define|#
directive|define
name|CKK_JUNIPER
value|(0x1d)
define|#
directive|define
name|CKK_CDMF
value|(0x1e)
define|#
directive|define
name|CKK_AES
value|(0x1f)
define|#
directive|define
name|CKK_BLOWFISH
value|(0x20)
define|#
directive|define
name|CKK_TWOFISH
value|(0x21)
define|#
directive|define
name|CKK_VENDOR_DEFINED
value|((unsigned long) (1<< 31))
typedef|typedef
name|unsigned
name|long
name|ck_certificate_type_t
typedef|;
define|#
directive|define
name|CKC_X_509
value|(0)
define|#
directive|define
name|CKC_X_509_ATTR_CERT
value|(1)
define|#
directive|define
name|CKC_WTLS
value|(2)
define|#
directive|define
name|CKC_VENDOR_DEFINED
value|((unsigned long) (1<< 31))
typedef|typedef
name|unsigned
name|long
name|ck_attribute_type_t
typedef|;
define|#
directive|define
name|CKA_CLASS
value|(0)
define|#
directive|define
name|CKA_TOKEN
value|(1)
define|#
directive|define
name|CKA_PRIVATE
value|(2)
define|#
directive|define
name|CKA_LABEL
value|(3)
define|#
directive|define
name|CKA_APPLICATION
value|(0x10)
define|#
directive|define
name|CKA_VALUE
value|(0x11)
define|#
directive|define
name|CKA_OBJECT_ID
value|(0x12)
define|#
directive|define
name|CKA_CERTIFICATE_TYPE
value|(0x80)
define|#
directive|define
name|CKA_ISSUER
value|(0x81)
define|#
directive|define
name|CKA_SERIAL_NUMBER
value|(0x82)
define|#
directive|define
name|CKA_AC_ISSUER
value|(0x83)
define|#
directive|define
name|CKA_OWNER
value|(0x84)
define|#
directive|define
name|CKA_ATTR_TYPES
value|(0x85)
define|#
directive|define
name|CKA_TRUSTED
value|(0x86)
define|#
directive|define
name|CKA_CERTIFICATE_CATEGORY
value|(0x87)
define|#
directive|define
name|CKA_JAVA_MIDP_SECURITY_DOMAIN
value|(0x88)
define|#
directive|define
name|CKA_URL
value|(0x89)
define|#
directive|define
name|CKA_HASH_OF_SUBJECT_PUBLIC_KEY
value|(0x8a)
define|#
directive|define
name|CKA_HASH_OF_ISSUER_PUBLIC_KEY
value|(0x8b)
define|#
directive|define
name|CKA_CHECK_VALUE
value|(0x90)
define|#
directive|define
name|CKA_KEY_TYPE
value|(0x100)
define|#
directive|define
name|CKA_SUBJECT
value|(0x101)
define|#
directive|define
name|CKA_ID
value|(0x102)
define|#
directive|define
name|CKA_SENSITIVE
value|(0x103)
define|#
directive|define
name|CKA_ENCRYPT
value|(0x104)
define|#
directive|define
name|CKA_DECRYPT
value|(0x105)
define|#
directive|define
name|CKA_WRAP
value|(0x106)
define|#
directive|define
name|CKA_UNWRAP
value|(0x107)
define|#
directive|define
name|CKA_SIGN
value|(0x108)
define|#
directive|define
name|CKA_SIGN_RECOVER
value|(0x109)
define|#
directive|define
name|CKA_VERIFY
value|(0x10a)
define|#
directive|define
name|CKA_VERIFY_RECOVER
value|(0x10b)
define|#
directive|define
name|CKA_DERIVE
value|(0x10c)
define|#
directive|define
name|CKA_START_DATE
value|(0x110)
define|#
directive|define
name|CKA_END_DATE
value|(0x111)
define|#
directive|define
name|CKA_MODULUS
value|(0x120)
define|#
directive|define
name|CKA_MODULUS_BITS
value|(0x121)
define|#
directive|define
name|CKA_PUBLIC_EXPONENT
value|(0x122)
define|#
directive|define
name|CKA_PRIVATE_EXPONENT
value|(0x123)
define|#
directive|define
name|CKA_PRIME_1
value|(0x124)
define|#
directive|define
name|CKA_PRIME_2
value|(0x125)
define|#
directive|define
name|CKA_EXPONENT_1
value|(0x126)
define|#
directive|define
name|CKA_EXPONENT_2
value|(0x127)
define|#
directive|define
name|CKA_COEFFICIENT
value|(0x128)
define|#
directive|define
name|CKA_PRIME
value|(0x130)
define|#
directive|define
name|CKA_SUBPRIME
value|(0x131)
define|#
directive|define
name|CKA_BASE
value|(0x132)
define|#
directive|define
name|CKA_PRIME_BITS
value|(0x133)
define|#
directive|define
name|CKA_SUB_PRIME_BITS
value|(0x134)
define|#
directive|define
name|CKA_VALUE_BITS
value|(0x160)
define|#
directive|define
name|CKA_VALUE_LEN
value|(0x161)
define|#
directive|define
name|CKA_EXTRACTABLE
value|(0x162)
define|#
directive|define
name|CKA_LOCAL
value|(0x163)
define|#
directive|define
name|CKA_NEVER_EXTRACTABLE
value|(0x164)
define|#
directive|define
name|CKA_ALWAYS_SENSITIVE
value|(0x165)
define|#
directive|define
name|CKA_KEY_GEN_MECHANISM
value|(0x166)
define|#
directive|define
name|CKA_MODIFIABLE
value|(0x170)
define|#
directive|define
name|CKA_ECDSA_PARAMS
value|(0x180)
define|#
directive|define
name|CKA_EC_PARAMS
value|(0x180)
define|#
directive|define
name|CKA_EC_POINT
value|(0x181)
define|#
directive|define
name|CKA_SECONDARY_AUTH
value|(0x200)
define|#
directive|define
name|CKA_AUTH_PIN_FLAGS
value|(0x201)
define|#
directive|define
name|CKA_ALWAYS_AUTHENTICATE
value|(0x202)
define|#
directive|define
name|CKA_WRAP_WITH_TRUSTED
value|(0x210)
define|#
directive|define
name|CKA_HW_FEATURE_TYPE
value|(0x300)
define|#
directive|define
name|CKA_RESET_ON_INIT
value|(0x301)
define|#
directive|define
name|CKA_HAS_RESET
value|(0x302)
define|#
directive|define
name|CKA_PIXEL_X
value|(0x400)
define|#
directive|define
name|CKA_PIXEL_Y
value|(0x401)
define|#
directive|define
name|CKA_RESOLUTION
value|(0x402)
define|#
directive|define
name|CKA_CHAR_ROWS
value|(0x403)
define|#
directive|define
name|CKA_CHAR_COLUMNS
value|(0x404)
define|#
directive|define
name|CKA_COLOR
value|(0x405)
define|#
directive|define
name|CKA_BITS_PER_PIXEL
value|(0x406)
define|#
directive|define
name|CKA_CHAR_SETS
value|(0x480)
define|#
directive|define
name|CKA_ENCODING_METHODS
value|(0x481)
define|#
directive|define
name|CKA_MIME_TYPES
value|(0x482)
define|#
directive|define
name|CKA_MECHANISM_TYPE
value|(0x500)
define|#
directive|define
name|CKA_REQUIRED_CMS_ATTRIBUTES
value|(0x501)
define|#
directive|define
name|CKA_DEFAULT_CMS_ATTRIBUTES
value|(0x502)
define|#
directive|define
name|CKA_SUPPORTED_CMS_ATTRIBUTES
value|(0x503)
define|#
directive|define
name|CKA_WRAP_TEMPLATE
value|(CKF_ARRAY_ATTRIBUTE | 0x211)
define|#
directive|define
name|CKA_UNWRAP_TEMPLATE
value|(CKF_ARRAY_ATTRIBUTE | 0x212)
define|#
directive|define
name|CKA_ALLOWED_MECHANISMS
value|(CKF_ARRAY_ATTRIBUTE | 0x600)
define|#
directive|define
name|CKA_VENDOR_DEFINED
value|((unsigned long) (1<< 31))
struct|struct
name|ck_attribute
block|{
name|ck_attribute_type_t
name|type
decl_stmt|;
name|void
modifier|*
name|value
decl_stmt|;
name|unsigned
name|long
name|value_len
decl_stmt|;
block|}
struct|;
struct|struct
name|ck_date
block|{
name|unsigned
name|char
name|year
index|[
literal|4
index|]
decl_stmt|;
name|unsigned
name|char
name|month
index|[
literal|2
index|]
decl_stmt|;
name|unsigned
name|char
name|day
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
typedef|typedef
name|unsigned
name|long
name|ck_mechanism_type_t
typedef|;
define|#
directive|define
name|CKM_RSA_PKCS_KEY_PAIR_GEN
value|(0)
define|#
directive|define
name|CKM_RSA_PKCS
value|(1)
define|#
directive|define
name|CKM_RSA_9796
value|(2)
define|#
directive|define
name|CKM_RSA_X_509
value|(3)
define|#
directive|define
name|CKM_MD2_RSA_PKCS
value|(4)
define|#
directive|define
name|CKM_MD5_RSA_PKCS
value|(5)
define|#
directive|define
name|CKM_SHA1_RSA_PKCS
value|(6)
define|#
directive|define
name|CKM_RIPEMD128_RSA_PKCS
value|(7)
define|#
directive|define
name|CKM_RIPEMD160_RSA_PKCS
value|(8)
define|#
directive|define
name|CKM_RSA_PKCS_OAEP
value|(9)
define|#
directive|define
name|CKM_RSA_X9_31_KEY_PAIR_GEN
value|(0xa)
define|#
directive|define
name|CKM_RSA_X9_31
value|(0xb)
define|#
directive|define
name|CKM_SHA1_RSA_X9_31
value|(0xc)
define|#
directive|define
name|CKM_RSA_PKCS_PSS
value|(0xd)
define|#
directive|define
name|CKM_SHA1_RSA_PKCS_PSS
value|(0xe)
define|#
directive|define
name|CKM_DSA_KEY_PAIR_GEN
value|(0x10)
define|#
directive|define
name|CKM_DSA
value|(0x11)
define|#
directive|define
name|CKM_DSA_SHA1
value|(0x12)
define|#
directive|define
name|CKM_DH_PKCS_KEY_PAIR_GEN
value|(0x20)
define|#
directive|define
name|CKM_DH_PKCS_DERIVE
value|(0x21)
define|#
directive|define
name|CKM_X9_42_DH_KEY_PAIR_GEN
value|(0x30)
define|#
directive|define
name|CKM_X9_42_DH_DERIVE
value|(0x31)
define|#
directive|define
name|CKM_X9_42_DH_HYBRID_DERIVE
value|(0x32)
define|#
directive|define
name|CKM_X9_42_MQV_DERIVE
value|(0x33)
define|#
directive|define
name|CKM_SHA256_RSA_PKCS
value|(0x40)
define|#
directive|define
name|CKM_SHA384_RSA_PKCS
value|(0x41)
define|#
directive|define
name|CKM_SHA512_RSA_PKCS
value|(0x42)
define|#
directive|define
name|CKM_SHA256_RSA_PKCS_PSS
value|(0x43)
define|#
directive|define
name|CKM_SHA384_RSA_PKCS_PSS
value|(0x44)
define|#
directive|define
name|CKM_SHA512_RSA_PKCS_PSS
value|(0x45)
define|#
directive|define
name|CKM_RC2_KEY_GEN
value|(0x100)
define|#
directive|define
name|CKM_RC2_ECB
value|(0x101)
define|#
directive|define
name|CKM_RC2_CBC
value|(0x102)
define|#
directive|define
name|CKM_RC2_MAC
value|(0x103)
define|#
directive|define
name|CKM_RC2_MAC_GENERAL
value|(0x104)
define|#
directive|define
name|CKM_RC2_CBC_PAD
value|(0x105)
define|#
directive|define
name|CKM_RC4_KEY_GEN
value|(0x110)
define|#
directive|define
name|CKM_RC4
value|(0x111)
define|#
directive|define
name|CKM_DES_KEY_GEN
value|(0x120)
define|#
directive|define
name|CKM_DES_ECB
value|(0x121)
define|#
directive|define
name|CKM_DES_CBC
value|(0x122)
define|#
directive|define
name|CKM_DES_MAC
value|(0x123)
define|#
directive|define
name|CKM_DES_MAC_GENERAL
value|(0x124)
define|#
directive|define
name|CKM_DES_CBC_PAD
value|(0x125)
define|#
directive|define
name|CKM_DES2_KEY_GEN
value|(0x130)
define|#
directive|define
name|CKM_DES3_KEY_GEN
value|(0x131)
define|#
directive|define
name|CKM_DES3_ECB
value|(0x132)
define|#
directive|define
name|CKM_DES3_CBC
value|(0x133)
define|#
directive|define
name|CKM_DES3_MAC
value|(0x134)
define|#
directive|define
name|CKM_DES3_MAC_GENERAL
value|(0x135)
define|#
directive|define
name|CKM_DES3_CBC_PAD
value|(0x136)
define|#
directive|define
name|CKM_CDMF_KEY_GEN
value|(0x140)
define|#
directive|define
name|CKM_CDMF_ECB
value|(0x141)
define|#
directive|define
name|CKM_CDMF_CBC
value|(0x142)
define|#
directive|define
name|CKM_CDMF_MAC
value|(0x143)
define|#
directive|define
name|CKM_CDMF_MAC_GENERAL
value|(0x144)
define|#
directive|define
name|CKM_CDMF_CBC_PAD
value|(0x145)
define|#
directive|define
name|CKM_MD2
value|(0x200)
define|#
directive|define
name|CKM_MD2_HMAC
value|(0x201)
define|#
directive|define
name|CKM_MD2_HMAC_GENERAL
value|(0x202)
define|#
directive|define
name|CKM_MD5
value|(0x210)
define|#
directive|define
name|CKM_MD5_HMAC
value|(0x211)
define|#
directive|define
name|CKM_MD5_HMAC_GENERAL
value|(0x212)
define|#
directive|define
name|CKM_SHA_1
value|(0x220)
define|#
directive|define
name|CKM_SHA_1_HMAC
value|(0x221)
define|#
directive|define
name|CKM_SHA_1_HMAC_GENERAL
value|(0x222)
define|#
directive|define
name|CKM_RIPEMD128
value|(0x230)
define|#
directive|define
name|CKM_RIPEMD128_HMAC
value|(0x231)
define|#
directive|define
name|CKM_RIPEMD128_HMAC_GENERAL
value|(0x232)
define|#
directive|define
name|CKM_RIPEMD160
value|(0x240)
define|#
directive|define
name|CKM_RIPEMD160_HMAC
value|(0x241)
define|#
directive|define
name|CKM_RIPEMD160_HMAC_GENERAL
value|(0x242)
define|#
directive|define
name|CKM_SHA256
value|(0x250)
define|#
directive|define
name|CKM_SHA256_HMAC
value|(0x251)
define|#
directive|define
name|CKM_SHA256_HMAC_GENERAL
value|(0x252)
define|#
directive|define
name|CKM_SHA384
value|(0x260)
define|#
directive|define
name|CKM_SHA384_HMAC
value|(0x261)
define|#
directive|define
name|CKM_SHA384_HMAC_GENERAL
value|(0x262)
define|#
directive|define
name|CKM_SHA512
value|(0x270)
define|#
directive|define
name|CKM_SHA512_HMAC
value|(0x271)
define|#
directive|define
name|CKM_SHA512_HMAC_GENERAL
value|(0x272)
define|#
directive|define
name|CKM_CAST_KEY_GEN
value|(0x300)
define|#
directive|define
name|CKM_CAST_ECB
value|(0x301)
define|#
directive|define
name|CKM_CAST_CBC
value|(0x302)
define|#
directive|define
name|CKM_CAST_MAC
value|(0x303)
define|#
directive|define
name|CKM_CAST_MAC_GENERAL
value|(0x304)
define|#
directive|define
name|CKM_CAST_CBC_PAD
value|(0x305)
define|#
directive|define
name|CKM_CAST3_KEY_GEN
value|(0x310)
define|#
directive|define
name|CKM_CAST3_ECB
value|(0x311)
define|#
directive|define
name|CKM_CAST3_CBC
value|(0x312)
define|#
directive|define
name|CKM_CAST3_MAC
value|(0x313)
define|#
directive|define
name|CKM_CAST3_MAC_GENERAL
value|(0x314)
define|#
directive|define
name|CKM_CAST3_CBC_PAD
value|(0x315)
define|#
directive|define
name|CKM_CAST5_KEY_GEN
value|(0x320)
define|#
directive|define
name|CKM_CAST128_KEY_GEN
value|(0x320)
define|#
directive|define
name|CKM_CAST5_ECB
value|(0x321)
define|#
directive|define
name|CKM_CAST128_ECB
value|(0x321)
define|#
directive|define
name|CKM_CAST5_CBC
value|(0x322)
define|#
directive|define
name|CKM_CAST128_CBC
value|(0x322)
define|#
directive|define
name|CKM_CAST5_MAC
value|(0x323)
define|#
directive|define
name|CKM_CAST128_MAC
value|(0x323)
define|#
directive|define
name|CKM_CAST5_MAC_GENERAL
value|(0x324)
define|#
directive|define
name|CKM_CAST128_MAC_GENERAL
value|(0x324)
define|#
directive|define
name|CKM_CAST5_CBC_PAD
value|(0x325)
define|#
directive|define
name|CKM_CAST128_CBC_PAD
value|(0x325)
define|#
directive|define
name|CKM_RC5_KEY_GEN
value|(0x330)
define|#
directive|define
name|CKM_RC5_ECB
value|(0x331)
define|#
directive|define
name|CKM_RC5_CBC
value|(0x332)
define|#
directive|define
name|CKM_RC5_MAC
value|(0x333)
define|#
directive|define
name|CKM_RC5_MAC_GENERAL
value|(0x334)
define|#
directive|define
name|CKM_RC5_CBC_PAD
value|(0x335)
define|#
directive|define
name|CKM_IDEA_KEY_GEN
value|(0x340)
define|#
directive|define
name|CKM_IDEA_ECB
value|(0x341)
define|#
directive|define
name|CKM_IDEA_CBC
value|(0x342)
define|#
directive|define
name|CKM_IDEA_MAC
value|(0x343)
define|#
directive|define
name|CKM_IDEA_MAC_GENERAL
value|(0x344)
define|#
directive|define
name|CKM_IDEA_CBC_PAD
value|(0x345)
define|#
directive|define
name|CKM_GENERIC_SECRET_KEY_GEN
value|(0x350)
define|#
directive|define
name|CKM_CONCATENATE_BASE_AND_KEY
value|(0x360)
define|#
directive|define
name|CKM_CONCATENATE_BASE_AND_DATA
value|(0x362)
define|#
directive|define
name|CKM_CONCATENATE_DATA_AND_BASE
value|(0x363)
define|#
directive|define
name|CKM_XOR_BASE_AND_DATA
value|(0x364)
define|#
directive|define
name|CKM_EXTRACT_KEY_FROM_KEY
value|(0x365)
define|#
directive|define
name|CKM_SSL3_PRE_MASTER_KEY_GEN
value|(0x370)
define|#
directive|define
name|CKM_SSL3_MASTER_KEY_DERIVE
value|(0x371)
define|#
directive|define
name|CKM_SSL3_KEY_AND_MAC_DERIVE
value|(0x372)
define|#
directive|define
name|CKM_SSL3_MASTER_KEY_DERIVE_DH
value|(0x373)
define|#
directive|define
name|CKM_TLS_PRE_MASTER_KEY_GEN
value|(0x374)
define|#
directive|define
name|CKM_TLS_MASTER_KEY_DERIVE
value|(0x375)
define|#
directive|define
name|CKM_TLS_KEY_AND_MAC_DERIVE
value|(0x376)
define|#
directive|define
name|CKM_TLS_MASTER_KEY_DERIVE_DH
value|(0x377)
define|#
directive|define
name|CKM_SSL3_MD5_MAC
value|(0x380)
define|#
directive|define
name|CKM_SSL3_SHA1_MAC
value|(0x381)
define|#
directive|define
name|CKM_MD5_KEY_DERIVATION
value|(0x390)
define|#
directive|define
name|CKM_MD2_KEY_DERIVATION
value|(0x391)
define|#
directive|define
name|CKM_SHA1_KEY_DERIVATION
value|(0x392)
define|#
directive|define
name|CKM_PBE_MD2_DES_CBC
value|(0x3a0)
define|#
directive|define
name|CKM_PBE_MD5_DES_CBC
value|(0x3a1)
define|#
directive|define
name|CKM_PBE_MD5_CAST_CBC
value|(0x3a2)
define|#
directive|define
name|CKM_PBE_MD5_CAST3_CBC
value|(0x3a3)
define|#
directive|define
name|CKM_PBE_MD5_CAST5_CBC
value|(0x3a4)
define|#
directive|define
name|CKM_PBE_MD5_CAST128_CBC
value|(0x3a4)
define|#
directive|define
name|CKM_PBE_SHA1_CAST5_CBC
value|(0x3a5)
define|#
directive|define
name|CKM_PBE_SHA1_CAST128_CBC
value|(0x3a5)
define|#
directive|define
name|CKM_PBE_SHA1_RC4_128
value|(0x3a6)
define|#
directive|define
name|CKM_PBE_SHA1_RC4_40
value|(0x3a7)
define|#
directive|define
name|CKM_PBE_SHA1_DES3_EDE_CBC
value|(0x3a8)
define|#
directive|define
name|CKM_PBE_SHA1_DES2_EDE_CBC
value|(0x3a9)
define|#
directive|define
name|CKM_PBE_SHA1_RC2_128_CBC
value|(0x3aa)
define|#
directive|define
name|CKM_PBE_SHA1_RC2_40_CBC
value|(0x3ab)
define|#
directive|define
name|CKM_PKCS5_PBKD2
value|(0x3b0)
define|#
directive|define
name|CKM_PBA_SHA1_WITH_SHA1_HMAC
value|(0x3c0)
define|#
directive|define
name|CKM_KEY_WRAP_LYNKS
value|(0x400)
define|#
directive|define
name|CKM_KEY_WRAP_SET_OAEP
value|(0x401)
define|#
directive|define
name|CKM_SKIPJACK_KEY_GEN
value|(0x1000)
define|#
directive|define
name|CKM_SKIPJACK_ECB64
value|(0x1001)
define|#
directive|define
name|CKM_SKIPJACK_CBC64
value|(0x1002)
define|#
directive|define
name|CKM_SKIPJACK_OFB64
value|(0x1003)
define|#
directive|define
name|CKM_SKIPJACK_CFB64
value|(0x1004)
define|#
directive|define
name|CKM_SKIPJACK_CFB32
value|(0x1005)
define|#
directive|define
name|CKM_SKIPJACK_CFB16
value|(0x1006)
define|#
directive|define
name|CKM_SKIPJACK_CFB8
value|(0x1007)
define|#
directive|define
name|CKM_SKIPJACK_WRAP
value|(0x1008)
define|#
directive|define
name|CKM_SKIPJACK_PRIVATE_WRAP
value|(0x1009)
define|#
directive|define
name|CKM_SKIPJACK_RELAYX
value|(0x100a)
define|#
directive|define
name|CKM_KEA_KEY_PAIR_GEN
value|(0x1010)
define|#
directive|define
name|CKM_KEA_KEY_DERIVE
value|(0x1011)
define|#
directive|define
name|CKM_FORTEZZA_TIMESTAMP
value|(0x1020)
define|#
directive|define
name|CKM_BATON_KEY_GEN
value|(0x1030)
define|#
directive|define
name|CKM_BATON_ECB128
value|(0x1031)
define|#
directive|define
name|CKM_BATON_ECB96
value|(0x1032)
define|#
directive|define
name|CKM_BATON_CBC128
value|(0x1033)
define|#
directive|define
name|CKM_BATON_COUNTER
value|(0x1034)
define|#
directive|define
name|CKM_BATON_SHUFFLE
value|(0x1035)
define|#
directive|define
name|CKM_BATON_WRAP
value|(0x1036)
define|#
directive|define
name|CKM_ECDSA_KEY_PAIR_GEN
value|(0x1040)
define|#
directive|define
name|CKM_EC_KEY_PAIR_GEN
value|(0x1040)
define|#
directive|define
name|CKM_ECDSA
value|(0x1041)
define|#
directive|define
name|CKM_ECDSA_SHA1
value|(0x1042)
define|#
directive|define
name|CKM_ECDH1_DERIVE
value|(0x1050)
define|#
directive|define
name|CKM_ECDH1_COFACTOR_DERIVE
value|(0x1051)
define|#
directive|define
name|CKM_ECMQV_DERIVE
value|(0x1052)
define|#
directive|define
name|CKM_JUNIPER_KEY_GEN
value|(0x1060)
define|#
directive|define
name|CKM_JUNIPER_ECB128
value|(0x1061)
define|#
directive|define
name|CKM_JUNIPER_CBC128
value|(0x1062)
define|#
directive|define
name|CKM_JUNIPER_COUNTER
value|(0x1063)
define|#
directive|define
name|CKM_JUNIPER_SHUFFLE
value|(0x1064)
define|#
directive|define
name|CKM_JUNIPER_WRAP
value|(0x1065)
define|#
directive|define
name|CKM_FASTHASH
value|(0x1070)
define|#
directive|define
name|CKM_AES_KEY_GEN
value|(0x1080)
define|#
directive|define
name|CKM_AES_ECB
value|(0x1081)
define|#
directive|define
name|CKM_AES_CBC
value|(0x1082)
define|#
directive|define
name|CKM_AES_MAC
value|(0x1083)
define|#
directive|define
name|CKM_AES_MAC_GENERAL
value|(0x1084)
define|#
directive|define
name|CKM_AES_CBC_PAD
value|(0x1085)
define|#
directive|define
name|CKM_DSA_PARAMETER_GEN
value|(0x2000)
define|#
directive|define
name|CKM_DH_PKCS_PARAMETER_GEN
value|(0x2001)
define|#
directive|define
name|CKM_X9_42_DH_PARAMETER_GEN
value|(0x2002)
define|#
directive|define
name|CKM_VENDOR_DEFINED
value|((unsigned long) (1<< 31))
struct|struct
name|ck_mechanism
block|{
name|ck_mechanism_type_t
name|mechanism
decl_stmt|;
name|void
modifier|*
name|parameter
decl_stmt|;
name|unsigned
name|long
name|parameter_len
decl_stmt|;
block|}
struct|;
struct|struct
name|ck_mechanism_info
block|{
name|unsigned
name|long
name|min_key_size
decl_stmt|;
name|unsigned
name|long
name|max_key_size
decl_stmt|;
name|ck_flags_t
name|flags
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|CKF_HW
value|(1<< 0)
define|#
directive|define
name|CKF_ENCRYPT
value|(1<< 8)
define|#
directive|define
name|CKF_DECRYPT
value|(1<< 9)
define|#
directive|define
name|CKF_DIGEST
value|(1<< 10)
define|#
directive|define
name|CKF_SIGN
value|(1<< 11)
define|#
directive|define
name|CKF_SIGN_RECOVER
value|(1<< 12)
define|#
directive|define
name|CKF_VERIFY
value|(1<< 13)
define|#
directive|define
name|CKF_VERIFY_RECOVER
value|(1<< 14)
define|#
directive|define
name|CKF_GENERATE
value|(1<< 15)
define|#
directive|define
name|CKF_GENERATE_KEY_PAIR
value|(1<< 16)
define|#
directive|define
name|CKF_WRAP
value|(1<< 17)
define|#
directive|define
name|CKF_UNWRAP
value|(1<< 18)
define|#
directive|define
name|CKF_DERIVE
value|(1<< 19)
define|#
directive|define
name|CKF_EXTENSION
value|((unsigned long) (1<< 31))
comment|/* Flags for C_WaitForSlotEvent.  */
define|#
directive|define
name|CKF_DONT_BLOCK
value|(1)
typedef|typedef
name|unsigned
name|long
name|ck_rv_t
typedef|;
typedef|typedef
name|ck_rv_t
function_decl|(
modifier|*
name|ck_notify_t
function_decl|)
parameter_list|(
name|ck_session_handle_t
name|session
parameter_list|,
name|ck_notification_t
name|event
parameter_list|,
name|void
modifier|*
name|application
parameter_list|)
function_decl|;
comment|/* Forward reference.  */
struct_decl|struct
name|ck_function_list
struct_decl|;
define|#
directive|define
name|_CK_DECLARE_FUNCTION
parameter_list|(
name|name
parameter_list|,
name|args
parameter_list|)
define|\
value|typedef ck_rv_t (*CK_ ## name) args;		\ ck_rv_t CK_SPEC name args
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Initialize
argument_list|,
operator|(
name|void
operator|*
name|init_args
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Finalize
argument_list|,
operator|(
name|void
operator|*
name|reserved
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetInfo
argument_list|,
operator|(
expr|struct
name|ck_info
operator|*
name|info
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetFunctionList
argument_list|,
operator|(
expr|struct
name|ck_function_list
operator|*
operator|*
name|function_list
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetSlotList
argument_list|,
operator|(
name|unsigned
name|char
name|token_present
operator|,
name|ck_slot_id_t
operator|*
name|slot_list
operator|,
name|unsigned
name|long
operator|*
name|count
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetSlotInfo
argument_list|,
operator|(
name|ck_slot_id_t
name|slot_id
operator|,
expr|struct
name|ck_slot_info
operator|*
name|info
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetTokenInfo
argument_list|,
operator|(
name|ck_slot_id_t
name|slot_id
operator|,
expr|struct
name|ck_token_info
operator|*
name|info
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_WaitForSlotEvent
argument_list|,
operator|(
name|ck_flags_t
name|flags
operator|,
name|ck_slot_id_t
operator|*
name|slot
operator|,
name|void
operator|*
name|reserved
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetMechanismList
argument_list|,
operator|(
name|ck_slot_id_t
name|slot_id
operator|,
name|ck_mechanism_type_t
operator|*
name|mechanism_list
operator|,
name|unsigned
name|long
operator|*
name|count
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetMechanismInfo
argument_list|,
operator|(
name|ck_slot_id_t
name|slot_id
operator|,
name|ck_mechanism_type_t
name|type
operator|,
expr|struct
name|ck_mechanism_info
operator|*
name|info
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_InitToken
argument_list|,
operator|(
name|ck_slot_id_t
name|slot_id
operator|,
name|unsigned
name|char
operator|*
name|pin
operator|,
name|unsigned
name|long
name|pin_len
operator|,
name|unsigned
name|char
operator|*
name|label
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_InitPIN
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|pin
operator|,
name|unsigned
name|long
name|pin_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SetPIN
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|old_pin
operator|,
name|unsigned
name|long
name|old_len
operator|,
name|unsigned
name|char
operator|*
name|new_pin
operator|,
name|unsigned
name|long
name|new_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_OpenSession
argument_list|,
operator|(
name|ck_slot_id_t
name|slot_id
operator|,
name|ck_flags_t
name|flags
operator|,
name|void
operator|*
name|application
operator|,
name|ck_notify_t
name|notify
operator|,
name|ck_session_handle_t
operator|*
name|session
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_CloseSession
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_CloseAllSessions
argument_list|,
operator|(
name|ck_slot_id_t
name|slot_id
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetSessionInfo
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_session_info
operator|*
name|info
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetOperationState
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|operation_state
operator|,
name|unsigned
name|long
operator|*
name|operation_state_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SetOperationState
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|operation_state
operator|,
name|unsigned
name|long
name|operation_state_len
operator|,
name|ck_object_handle_t
name|encryption_key
operator|,
name|ck_object_handle_t
name|authentiation_key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Login
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_user_type_t
name|user_type
operator|,
name|unsigned
name|char
operator|*
name|pin
operator|,
name|unsigned
name|long
name|pin_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Logout
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_CreateObject
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|count
operator|,
name|ck_object_handle_t
operator|*
name|object
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_CopyObject
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_object_handle_t
name|object
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|count
operator|,
name|ck_object_handle_t
operator|*
name|new_object
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DestroyObject
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_object_handle_t
name|object
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetObjectSize
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_object_handle_t
name|object
operator|,
name|unsigned
name|long
operator|*
name|size
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetAttributeValue
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_object_handle_t
name|object
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|count
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SetAttributeValue
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_object_handle_t
name|object
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|count
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_FindObjectsInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|count
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_FindObjects
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_object_handle_t
operator|*
name|object
operator|,
name|unsigned
name|long
name|max_object_count
operator|,
name|unsigned
name|long
operator|*
name|object_count
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_FindObjectsFinal
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_EncryptInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Encrypt
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|data
operator|,
name|unsigned
name|long
name|data_len
operator|,
name|unsigned
name|char
operator|*
name|encrypted_data
operator|,
name|unsigned
name|long
operator|*
name|encrypted_data_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_EncryptUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
name|part_len
operator|,
name|unsigned
name|char
operator|*
name|encrypted_part
operator|,
name|unsigned
name|long
operator|*
name|encrypted_part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_EncryptFinal
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|last_encrypted_part
operator|,
name|unsigned
name|long
operator|*
name|last_encrypted_part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DecryptInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Decrypt
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|encrypted_data
operator|,
name|unsigned
name|long
name|encrypted_data_len
operator|,
name|unsigned
name|char
operator|*
name|data
operator|,
name|unsigned
name|long
operator|*
name|data_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DecryptUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|encrypted_part
operator|,
name|unsigned
name|long
name|encrypted_part_len
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
operator|*
name|part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DecryptFinal
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|last_part
operator|,
name|unsigned
name|long
operator|*
name|last_part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DigestInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Digest
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|data
operator|,
name|unsigned
name|long
name|data_len
operator|,
name|unsigned
name|char
operator|*
name|digest
operator|,
name|unsigned
name|long
operator|*
name|digest_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DigestUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
name|part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DigestKey
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|ck_object_handle_t
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DigestFinal
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|digest
operator|,
name|unsigned
name|long
operator|*
name|digest_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SignInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Sign
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|data
operator|,
name|unsigned
name|long
name|data_len
operator|,
name|unsigned
name|char
operator|*
name|signature
operator|,
name|unsigned
name|long
operator|*
name|signature_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SignUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
name|part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SignFinal
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|signature
operator|,
name|unsigned
name|long
operator|*
name|signature_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SignRecoverInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SignRecover
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|data
operator|,
name|unsigned
name|long
name|data_len
operator|,
name|unsigned
name|char
operator|*
name|signature
operator|,
name|unsigned
name|long
operator|*
name|signature_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_VerifyInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_Verify
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|data
operator|,
name|unsigned
name|long
name|data_len
operator|,
name|unsigned
name|char
operator|*
name|signature
operator|,
name|unsigned
name|long
name|signature_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_VerifyUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
name|part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_VerifyFinal
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|signature
operator|,
name|unsigned
name|long
name|signature_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_VerifyRecoverInit
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_VerifyRecover
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|signature
operator|,
name|unsigned
name|long
name|signature_len
operator|,
name|unsigned
name|char
operator|*
name|data
operator|,
name|unsigned
name|long
operator|*
name|data_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DigestEncryptUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
name|part_len
operator|,
name|unsigned
name|char
operator|*
name|encrypted_part
operator|,
name|unsigned
name|long
operator|*
name|encrypted_part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DecryptDigestUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|encrypted_part
operator|,
name|unsigned
name|long
name|encrypted_part_len
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
operator|*
name|part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SignEncryptUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
name|part_len
operator|,
name|unsigned
name|char
operator|*
name|encrypted_part
operator|,
name|unsigned
name|long
operator|*
name|encrypted_part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DecryptVerifyUpdate
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|encrypted_part
operator|,
name|unsigned
name|long
name|encrypted_part_len
operator|,
name|unsigned
name|char
operator|*
name|part
operator|,
name|unsigned
name|long
operator|*
name|part_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GenerateKey
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|count
operator|,
name|ck_object_handle_t
operator|*
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GenerateKeyPair
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
expr|struct
name|ck_attribute
operator|*
name|public_key_template
operator|,
name|unsigned
name|long
name|public_key_attribute_count
operator|,
expr|struct
name|ck_attribute
operator|*
name|private_key_template
operator|,
name|unsigned
name|long
name|private_key_attribute_count
operator|,
name|ck_object_handle_t
operator|*
name|public_key
operator|,
name|ck_object_handle_t
operator|*
name|private_key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_WrapKey
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|wrapping_key
operator|,
name|ck_object_handle_t
name|key
operator|,
name|unsigned
name|char
operator|*
name|wrapped_key
operator|,
name|unsigned
name|long
operator|*
name|wrapped_key_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_UnwrapKey
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|unwrapping_key
operator|,
name|unsigned
name|char
operator|*
name|wrapped_key
operator|,
name|unsigned
name|long
name|wrapped_key_len
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|attribute_count
operator|,
name|ck_object_handle_t
operator|*
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_DeriveKey
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
expr|struct
name|ck_mechanism
operator|*
name|mechanism
operator|,
name|ck_object_handle_t
name|base_key
operator|,
expr|struct
name|ck_attribute
operator|*
name|templ
operator|,
name|unsigned
name|long
name|attribute_count
operator|,
name|ck_object_handle_t
operator|*
name|key
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_SeedRandom
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|seed
operator|,
name|unsigned
name|long
name|seed_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GenerateRandom
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|,
name|unsigned
name|char
operator|*
name|random_data
operator|,
name|unsigned
name|long
name|random_len
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_GetFunctionStatus
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|)
argument_list|)
expr_stmt|;
name|_CK_DECLARE_FUNCTION
argument_list|(
name|C_CancelFunction
argument_list|,
operator|(
name|ck_session_handle_t
name|session
operator|)
argument_list|)
expr_stmt|;
struct|struct
name|ck_function_list
block|{
name|struct
name|ck_version
name|version
decl_stmt|;
name|CK_C_Initialize
name|C_Initialize
decl_stmt|;
name|CK_C_Finalize
name|C_Finalize
decl_stmt|;
name|CK_C_GetInfo
name|C_GetInfo
decl_stmt|;
name|CK_C_GetFunctionList
name|C_GetFunctionList
decl_stmt|;
name|CK_C_GetSlotList
name|C_GetSlotList
decl_stmt|;
name|CK_C_GetSlotInfo
name|C_GetSlotInfo
decl_stmt|;
name|CK_C_GetTokenInfo
name|C_GetTokenInfo
decl_stmt|;
name|CK_C_GetMechanismList
name|C_GetMechanismList
decl_stmt|;
name|CK_C_GetMechanismInfo
name|C_GetMechanismInfo
decl_stmt|;
name|CK_C_InitToken
name|C_InitToken
decl_stmt|;
name|CK_C_InitPIN
name|C_InitPIN
decl_stmt|;
name|CK_C_SetPIN
name|C_SetPIN
decl_stmt|;
name|CK_C_OpenSession
name|C_OpenSession
decl_stmt|;
name|CK_C_CloseSession
name|C_CloseSession
decl_stmt|;
name|CK_C_CloseAllSessions
name|C_CloseAllSessions
decl_stmt|;
name|CK_C_GetSessionInfo
name|C_GetSessionInfo
decl_stmt|;
name|CK_C_GetOperationState
name|C_GetOperationState
decl_stmt|;
name|CK_C_SetOperationState
name|C_SetOperationState
decl_stmt|;
name|CK_C_Login
name|C_Login
decl_stmt|;
name|CK_C_Logout
name|C_Logout
decl_stmt|;
name|CK_C_CreateObject
name|C_CreateObject
decl_stmt|;
name|CK_C_CopyObject
name|C_CopyObject
decl_stmt|;
name|CK_C_DestroyObject
name|C_DestroyObject
decl_stmt|;
name|CK_C_GetObjectSize
name|C_GetObjectSize
decl_stmt|;
name|CK_C_GetAttributeValue
name|C_GetAttributeValue
decl_stmt|;
name|CK_C_SetAttributeValue
name|C_SetAttributeValue
decl_stmt|;
name|CK_C_FindObjectsInit
name|C_FindObjectsInit
decl_stmt|;
name|CK_C_FindObjects
name|C_FindObjects
decl_stmt|;
name|CK_C_FindObjectsFinal
name|C_FindObjectsFinal
decl_stmt|;
name|CK_C_EncryptInit
name|C_EncryptInit
decl_stmt|;
name|CK_C_Encrypt
name|C_Encrypt
decl_stmt|;
name|CK_C_EncryptUpdate
name|C_EncryptUpdate
decl_stmt|;
name|CK_C_EncryptFinal
name|C_EncryptFinal
decl_stmt|;
name|CK_C_DecryptInit
name|C_DecryptInit
decl_stmt|;
name|CK_C_Decrypt
name|C_Decrypt
decl_stmt|;
name|CK_C_DecryptUpdate
name|C_DecryptUpdate
decl_stmt|;
name|CK_C_DecryptFinal
name|C_DecryptFinal
decl_stmt|;
name|CK_C_DigestInit
name|C_DigestInit
decl_stmt|;
name|CK_C_Digest
name|C_Digest
decl_stmt|;
name|CK_C_DigestUpdate
name|C_DigestUpdate
decl_stmt|;
name|CK_C_DigestKey
name|C_DigestKey
decl_stmt|;
name|CK_C_DigestFinal
name|C_DigestFinal
decl_stmt|;
name|CK_C_SignInit
name|C_SignInit
decl_stmt|;
name|CK_C_Sign
name|C_Sign
decl_stmt|;
name|CK_C_SignUpdate
name|C_SignUpdate
decl_stmt|;
name|CK_C_SignFinal
name|C_SignFinal
decl_stmt|;
name|CK_C_SignRecoverInit
name|C_SignRecoverInit
decl_stmt|;
name|CK_C_SignRecover
name|C_SignRecover
decl_stmt|;
name|CK_C_VerifyInit
name|C_VerifyInit
decl_stmt|;
name|CK_C_Verify
name|C_Verify
decl_stmt|;
name|CK_C_VerifyUpdate
name|C_VerifyUpdate
decl_stmt|;
name|CK_C_VerifyFinal
name|C_VerifyFinal
decl_stmt|;
name|CK_C_VerifyRecoverInit
name|C_VerifyRecoverInit
decl_stmt|;
name|CK_C_VerifyRecover
name|C_VerifyRecover
decl_stmt|;
name|CK_C_DigestEncryptUpdate
name|C_DigestEncryptUpdate
decl_stmt|;
name|CK_C_DecryptDigestUpdate
name|C_DecryptDigestUpdate
decl_stmt|;
name|CK_C_SignEncryptUpdate
name|C_SignEncryptUpdate
decl_stmt|;
name|CK_C_DecryptVerifyUpdate
name|C_DecryptVerifyUpdate
decl_stmt|;
name|CK_C_GenerateKey
name|C_GenerateKey
decl_stmt|;
name|CK_C_GenerateKeyPair
name|C_GenerateKeyPair
decl_stmt|;
name|CK_C_WrapKey
name|C_WrapKey
decl_stmt|;
name|CK_C_UnwrapKey
name|C_UnwrapKey
decl_stmt|;
name|CK_C_DeriveKey
name|C_DeriveKey
decl_stmt|;
name|CK_C_SeedRandom
name|C_SeedRandom
decl_stmt|;
name|CK_C_GenerateRandom
name|C_GenerateRandom
decl_stmt|;
name|CK_C_GetFunctionStatus
name|C_GetFunctionStatus
decl_stmt|;
name|CK_C_CancelFunction
name|C_CancelFunction
decl_stmt|;
name|CK_C_WaitForSlotEvent
name|C_WaitForSlotEvent
decl_stmt|;
block|}
struct|;
typedef|typedef
name|ck_rv_t
function_decl|(
modifier|*
name|ck_createmutex_t
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|mutex
parameter_list|)
function_decl|;
typedef|typedef
name|ck_rv_t
function_decl|(
modifier|*
name|ck_destroymutex_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|mutex
parameter_list|)
function_decl|;
typedef|typedef
name|ck_rv_t
function_decl|(
modifier|*
name|ck_lockmutex_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|mutex
parameter_list|)
function_decl|;
typedef|typedef
name|ck_rv_t
function_decl|(
modifier|*
name|ck_unlockmutex_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|mutex
parameter_list|)
function_decl|;
struct|struct
name|ck_c_initialize_args
block|{
name|ck_createmutex_t
name|create_mutex
decl_stmt|;
name|ck_destroymutex_t
name|destroy_mutex
decl_stmt|;
name|ck_lockmutex_t
name|lock_mutex
decl_stmt|;
name|ck_unlockmutex_t
name|unlock_mutex
decl_stmt|;
name|ck_flags_t
name|flags
decl_stmt|;
name|void
modifier|*
name|reserved
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|CKF_LIBRARY_CANT_CREATE_OS_THREADS
value|(1<< 0)
define|#
directive|define
name|CKF_OS_LOCKING_OK
value|(1<< 1)
define|#
directive|define
name|CKR_OK
value|(0)
define|#
directive|define
name|CKR_CANCEL
value|(1)
define|#
directive|define
name|CKR_HOST_MEMORY
value|(2)
define|#
directive|define
name|CKR_SLOT_ID_INVALID
value|(3)
define|#
directive|define
name|CKR_GENERAL_ERROR
value|(5)
define|#
directive|define
name|CKR_FUNCTION_FAILED
value|(6)
define|#
directive|define
name|CKR_ARGUMENTS_BAD
value|(7)
define|#
directive|define
name|CKR_NO_EVENT
value|(8)
define|#
directive|define
name|CKR_NEED_TO_CREATE_THREADS
value|(9)
define|#
directive|define
name|CKR_CANT_LOCK
value|(0xa)
define|#
directive|define
name|CKR_ATTRIBUTE_READ_ONLY
value|(0x10)
define|#
directive|define
name|CKR_ATTRIBUTE_SENSITIVE
value|(0x11)
define|#
directive|define
name|CKR_ATTRIBUTE_TYPE_INVALID
value|(0x12)
define|#
directive|define
name|CKR_ATTRIBUTE_VALUE_INVALID
value|(0x13)
define|#
directive|define
name|CKR_DATA_INVALID
value|(0x20)
define|#
directive|define
name|CKR_DATA_LEN_RANGE
value|(0x21)
define|#
directive|define
name|CKR_DEVICE_ERROR
value|(0x30)
define|#
directive|define
name|CKR_DEVICE_MEMORY
value|(0x31)
define|#
directive|define
name|CKR_DEVICE_REMOVED
value|(0x32)
define|#
directive|define
name|CKR_ENCRYPTED_DATA_INVALID
value|(0x40)
define|#
directive|define
name|CKR_ENCRYPTED_DATA_LEN_RANGE
value|(0x41)
define|#
directive|define
name|CKR_FUNCTION_CANCELED
value|(0x50)
define|#
directive|define
name|CKR_FUNCTION_NOT_PARALLEL
value|(0x51)
define|#
directive|define
name|CKR_FUNCTION_NOT_SUPPORTED
value|(0x54)
define|#
directive|define
name|CKR_KEY_HANDLE_INVALID
value|(0x60)
define|#
directive|define
name|CKR_KEY_SIZE_RANGE
value|(0x62)
define|#
directive|define
name|CKR_KEY_TYPE_INCONSISTENT
value|(0x63)
define|#
directive|define
name|CKR_KEY_NOT_NEEDED
value|(0x64)
define|#
directive|define
name|CKR_KEY_CHANGED
value|(0x65)
define|#
directive|define
name|CKR_KEY_NEEDED
value|(0x66)
define|#
directive|define
name|CKR_KEY_INDIGESTIBLE
value|(0x67)
define|#
directive|define
name|CKR_KEY_FUNCTION_NOT_PERMITTED
value|(0x68)
define|#
directive|define
name|CKR_KEY_NOT_WRAPPABLE
value|(0x69)
define|#
directive|define
name|CKR_KEY_UNEXTRACTABLE
value|(0x6a)
define|#
directive|define
name|CKR_MECHANISM_INVALID
value|(0x70)
define|#
directive|define
name|CKR_MECHANISM_PARAM_INVALID
value|(0x71)
define|#
directive|define
name|CKR_OBJECT_HANDLE_INVALID
value|(0x82)
define|#
directive|define
name|CKR_OPERATION_ACTIVE
value|(0x90)
define|#
directive|define
name|CKR_OPERATION_NOT_INITIALIZED
value|(0x91)
define|#
directive|define
name|CKR_PIN_INCORRECT
value|(0xa0)
define|#
directive|define
name|CKR_PIN_INVALID
value|(0xa1)
define|#
directive|define
name|CKR_PIN_LEN_RANGE
value|(0xa2)
define|#
directive|define
name|CKR_PIN_EXPIRED
value|(0xa3)
define|#
directive|define
name|CKR_PIN_LOCKED
value|(0xa4)
define|#
directive|define
name|CKR_SESSION_CLOSED
value|(0xb0)
define|#
directive|define
name|CKR_SESSION_COUNT
value|(0xb1)
define|#
directive|define
name|CKR_SESSION_HANDLE_INVALID
value|(0xb3)
define|#
directive|define
name|CKR_SESSION_PARALLEL_NOT_SUPPORTED
value|(0xb4)
define|#
directive|define
name|CKR_SESSION_READ_ONLY
value|(0xb5)
define|#
directive|define
name|CKR_SESSION_EXISTS
value|(0xb6)
define|#
directive|define
name|CKR_SESSION_READ_ONLY_EXISTS
value|(0xb7)
define|#
directive|define
name|CKR_SESSION_READ_WRITE_SO_EXISTS
value|(0xb8)
define|#
directive|define
name|CKR_SIGNATURE_INVALID
value|(0xc0)
define|#
directive|define
name|CKR_SIGNATURE_LEN_RANGE
value|(0xc1)
define|#
directive|define
name|CKR_TEMPLATE_INCOMPLETE
value|(0xd0)
define|#
directive|define
name|CKR_TEMPLATE_INCONSISTENT
value|(0xd1)
define|#
directive|define
name|CKR_TOKEN_NOT_PRESENT
value|(0xe0)
define|#
directive|define
name|CKR_TOKEN_NOT_RECOGNIZED
value|(0xe1)
define|#
directive|define
name|CKR_TOKEN_WRITE_PROTECTED
value|(0xe2)
define|#
directive|define
name|CKR_UNWRAPPING_KEY_HANDLE_INVALID
value|(0xf0)
define|#
directive|define
name|CKR_UNWRAPPING_KEY_SIZE_RANGE
value|(0xf1)
define|#
directive|define
name|CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT
value|(0xf2)
define|#
directive|define
name|CKR_USER_ALREADY_LOGGED_IN
value|(0x100)
define|#
directive|define
name|CKR_USER_NOT_LOGGED_IN
value|(0x101)
define|#
directive|define
name|CKR_USER_PIN_NOT_INITIALIZED
value|(0x102)
define|#
directive|define
name|CKR_USER_TYPE_INVALID
value|(0x103)
define|#
directive|define
name|CKR_USER_ANOTHER_ALREADY_LOGGED_IN
value|(0x104)
define|#
directive|define
name|CKR_USER_TOO_MANY_TYPES
value|(0x105)
define|#
directive|define
name|CKR_WRAPPED_KEY_INVALID
value|(0x110)
define|#
directive|define
name|CKR_WRAPPED_KEY_LEN_RANGE
value|(0x112)
define|#
directive|define
name|CKR_WRAPPING_KEY_HANDLE_INVALID
value|(0x113)
define|#
directive|define
name|CKR_WRAPPING_KEY_SIZE_RANGE
value|(0x114)
define|#
directive|define
name|CKR_WRAPPING_KEY_TYPE_INCONSISTENT
value|(0x115)
define|#
directive|define
name|CKR_RANDOM_SEED_NOT_SUPPORTED
value|(0x120)
define|#
directive|define
name|CKR_RANDOM_NO_RNG
value|(0x121)
define|#
directive|define
name|CKR_DOMAIN_PARAMS_INVALID
value|(0x130)
define|#
directive|define
name|CKR_BUFFER_TOO_SMALL
value|(0x150)
define|#
directive|define
name|CKR_SAVED_STATE_INVALID
value|(0x160)
define|#
directive|define
name|CKR_INFORMATION_SENSITIVE
value|(0x170)
define|#
directive|define
name|CKR_STATE_UNSAVEABLE
value|(0x180)
define|#
directive|define
name|CKR_CRYPTOKI_NOT_INITIALIZED
value|(0x190)
define|#
directive|define
name|CKR_CRYPTOKI_ALREADY_INITIALIZED
value|(0x191)
define|#
directive|define
name|CKR_MUTEX_BAD
value|(0x1a0)
define|#
directive|define
name|CKR_MUTEX_NOT_LOCKED
value|(0x1a1)
define|#
directive|define
name|CKR_FUNCTION_REJECTED
value|(0x200)
define|#
directive|define
name|CKR_VENDOR_DEFINED
value|((unsigned long) (1<< 31))
comment|/* Compatibility layer.  */
ifdef|#
directive|ifdef
name|CRYPTOKI_COMPAT
undef|#
directive|undef
name|CK_DEFINE_FUNCTION
define|#
directive|define
name|CK_DEFINE_FUNCTION
parameter_list|(
name|retval
parameter_list|,
name|name
parameter_list|)
value|retval CK_SPEC name
comment|/* For NULL.  */
include|#
directive|include
file|<stddef.h>
typedef|typedef
name|unsigned
name|char
name|CK_BYTE
typedef|;
typedef|typedef
name|unsigned
name|char
name|CK_CHAR
typedef|;
typedef|typedef
name|unsigned
name|char
name|CK_UTF8CHAR
typedef|;
typedef|typedef
name|unsigned
name|char
name|CK_BBOOL
typedef|;
typedef|typedef
name|unsigned
name|long
name|int
name|CK_ULONG
typedef|;
typedef|typedef
name|long
name|int
name|CK_LONG
typedef|;
typedef|typedef
name|CK_BYTE
modifier|*
name|CK_BYTE_PTR
typedef|;
typedef|typedef
name|CK_CHAR
modifier|*
name|CK_CHAR_PTR
typedef|;
typedef|typedef
name|CK_UTF8CHAR
modifier|*
name|CK_UTF8CHAR_PTR
typedef|;
typedef|typedef
name|CK_ULONG
modifier|*
name|CK_ULONG_PTR
typedef|;
typedef|typedef
name|void
modifier|*
name|CK_VOID_PTR
typedef|;
typedef|typedef
name|void
modifier|*
modifier|*
name|CK_VOID_PTR_PTR
typedef|;
define|#
directive|define
name|CK_FALSE
value|0
define|#
directive|define
name|CK_TRUE
value|1
ifndef|#
directive|ifndef
name|CK_DISABLE_TRUE_FALSE
ifndef|#
directive|ifndef
name|FALSE
define|#
directive|define
name|FALSE
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|TRUE
define|#
directive|define
name|TRUE
value|1
endif|#
directive|endif
endif|#
directive|endif
typedef|typedef
name|struct
name|ck_version
name|CK_VERSION
typedef|;
typedef|typedef
name|struct
name|ck_version
modifier|*
name|CK_VERSION_PTR
typedef|;
typedef|typedef
name|struct
name|ck_info
name|CK_INFO
typedef|;
typedef|typedef
name|struct
name|ck_info
modifier|*
name|CK_INFO_PTR
typedef|;
typedef|typedef
name|ck_slot_id_t
modifier|*
name|CK_SLOT_ID_PTR
typedef|;
typedef|typedef
name|struct
name|ck_slot_info
name|CK_SLOT_INFO
typedef|;
typedef|typedef
name|struct
name|ck_slot_info
modifier|*
name|CK_SLOT_INFO_PTR
typedef|;
typedef|typedef
name|struct
name|ck_token_info
name|CK_TOKEN_INFO
typedef|;
typedef|typedef
name|struct
name|ck_token_info
modifier|*
name|CK_TOKEN_INFO_PTR
typedef|;
typedef|typedef
name|ck_session_handle_t
modifier|*
name|CK_SESSION_HANDLE_PTR
typedef|;
typedef|typedef
name|struct
name|ck_session_info
name|CK_SESSION_INFO
typedef|;
typedef|typedef
name|struct
name|ck_session_info
modifier|*
name|CK_SESSION_INFO_PTR
typedef|;
typedef|typedef
name|ck_object_handle_t
modifier|*
name|CK_OBJECT_HANDLE_PTR
typedef|;
typedef|typedef
name|ck_object_class_t
modifier|*
name|CK_OBJECT_CLASS_PTR
typedef|;
typedef|typedef
name|struct
name|ck_attribute
name|CK_ATTRIBUTE
typedef|;
typedef|typedef
name|struct
name|ck_attribute
modifier|*
name|CK_ATTRIBUTE_PTR
typedef|;
typedef|typedef
name|struct
name|ck_date
name|CK_DATE
typedef|;
typedef|typedef
name|struct
name|ck_date
modifier|*
name|CK_DATE_PTR
typedef|;
typedef|typedef
name|ck_mechanism_type_t
modifier|*
name|CK_MECHANISM_TYPE_PTR
typedef|;
typedef|typedef
name|struct
name|ck_mechanism
name|CK_MECHANISM
typedef|;
typedef|typedef
name|struct
name|ck_mechanism
modifier|*
name|CK_MECHANISM_PTR
typedef|;
typedef|typedef
name|struct
name|ck_mechanism_info
name|CK_MECHANISM_INFO
typedef|;
typedef|typedef
name|struct
name|ck_mechanism_info
modifier|*
name|CK_MECHANISM_INFO_PTR
typedef|;
typedef|typedef
name|struct
name|ck_function_list
name|CK_FUNCTION_LIST
typedef|;
typedef|typedef
name|struct
name|ck_function_list
modifier|*
name|CK_FUNCTION_LIST_PTR
typedef|;
typedef|typedef
name|struct
name|ck_function_list
modifier|*
modifier|*
name|CK_FUNCTION_LIST_PTR_PTR
typedef|;
typedef|typedef
name|struct
name|ck_c_initialize_args
name|CK_C_INITIALIZE_ARGS
typedef|;
typedef|typedef
name|struct
name|ck_c_initialize_args
modifier|*
name|CK_C_INITIALIZE_ARGS_PTR
typedef|;
define|#
directive|define
name|NULL_PTR
value|NULL
comment|/* Delete the helper macros defined at the top of the file.  */
undef|#
directive|undef
name|ck_flags_t
undef|#
directive|undef
name|ck_version
undef|#
directive|undef
name|ck_info
undef|#
directive|undef
name|cryptoki_version
undef|#
directive|undef
name|manufacturer_id
undef|#
directive|undef
name|library_description
undef|#
directive|undef
name|library_version
undef|#
directive|undef
name|ck_notification_t
undef|#
directive|undef
name|ck_slot_id_t
undef|#
directive|undef
name|ck_slot_info
undef|#
directive|undef
name|slot_description
undef|#
directive|undef
name|hardware_version
undef|#
directive|undef
name|firmware_version
undef|#
directive|undef
name|ck_token_info
undef|#
directive|undef
name|serial_number
undef|#
directive|undef
name|max_session_count
undef|#
directive|undef
name|session_count
undef|#
directive|undef
name|max_rw_session_count
undef|#
directive|undef
name|rw_session_count
undef|#
directive|undef
name|max_pin_len
undef|#
directive|undef
name|min_pin_len
undef|#
directive|undef
name|total_public_memory
undef|#
directive|undef
name|free_public_memory
undef|#
directive|undef
name|total_private_memory
undef|#
directive|undef
name|free_private_memory
undef|#
directive|undef
name|utc_time
undef|#
directive|undef
name|ck_session_handle_t
undef|#
directive|undef
name|ck_user_type_t
undef|#
directive|undef
name|ck_state_t
undef|#
directive|undef
name|ck_session_info
undef|#
directive|undef
name|slot_id
undef|#
directive|undef
name|device_error
undef|#
directive|undef
name|ck_object_handle_t
undef|#
directive|undef
name|ck_object_class_t
undef|#
directive|undef
name|ck_hw_feature_type_t
undef|#
directive|undef
name|ck_key_type_t
undef|#
directive|undef
name|ck_certificate_type_t
undef|#
directive|undef
name|ck_attribute_type_t
undef|#
directive|undef
name|ck_attribute
undef|#
directive|undef
name|value
undef|#
directive|undef
name|value_len
undef|#
directive|undef
name|ck_date
undef|#
directive|undef
name|ck_mechanism_type_t
undef|#
directive|undef
name|ck_mechanism
undef|#
directive|undef
name|parameter
undef|#
directive|undef
name|parameter_len
undef|#
directive|undef
name|ck_mechanism_info
undef|#
directive|undef
name|min_key_size
undef|#
directive|undef
name|max_key_size
undef|#
directive|undef
name|ck_rv_t
undef|#
directive|undef
name|ck_notify_t
undef|#
directive|undef
name|ck_function_list
undef|#
directive|undef
name|ck_createmutex_t
undef|#
directive|undef
name|ck_destroymutex_t
undef|#
directive|undef
name|ck_lockmutex_t
undef|#
directive|undef
name|ck_unlockmutex_t
undef|#
directive|undef
name|ck_c_initialize_args
undef|#
directive|undef
name|create_mutex
undef|#
directive|undef
name|destroy_mutex
undef|#
directive|undef
name|lock_mutex
undef|#
directive|undef
name|unlock_mutex
undef|#
directive|undef
name|reserved
endif|#
directive|endif
comment|/* CRYPTOKI_COMPAT */
comment|/* System dependencies.  */
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|CRYPTOKI_FORCE_WIN32
argument_list|)
pragma|#
directive|pragma
name|pack
name|(
name|pop
name|,
name|cryptoki
name|)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* PKCS11_H */
end_comment

end_unit

