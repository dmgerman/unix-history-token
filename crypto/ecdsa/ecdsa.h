begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/ecdsa/ecdsa.h */
end_comment

begin_comment
comment|/**  * \file   crypto/ecdsa/ecdsa.h Include file for the OpenSSL ECDSA functions  * \author Written by Nils Larsch for the OpenSSL project  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 2000-2003 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    licensing@OpenSSL.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_ECDSA_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_ECDSA_H
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_NO_ECDSA
end_ifdef

begin_error
error|#
directive|error
error|ECDSA is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/ec.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
struct|struct
name|ECDSA_SIG_st
block|{
name|BIGNUM
modifier|*
name|r
decl_stmt|;
name|BIGNUM
modifier|*
name|s
decl_stmt|;
block|}
name|ECDSA_SIG
typedef|;
comment|/** ECDSA_SIG *ECDSA_SIG_new(void)  * allocates and initialize a ECDSA_SIG structure  * \return pointer to a ECDSA_SIG structure or NULL if an error occurred  */
name|ECDSA_SIG
modifier|*
name|ECDSA_SIG_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** ECDSA_SIG_free  * frees a ECDSA_SIG structure  * \param a pointer to the ECDSA_SIG structure  */
name|void
name|ECDSA_SIG_free
parameter_list|(
name|ECDSA_SIG
modifier|*
name|a
parameter_list|)
function_decl|;
comment|/** i2d_ECDSA_SIG  * DER encode content of ECDSA_SIG object (note: this function modifies *pp  * (*pp += length of the DER encoded signature)).  * \param a  pointer to the ECDSA_SIG object  * \param pp pointer to a unsigned char pointer for the output or NULL  * \return the length of the DER encoded ECDSA_SIG object or 0   */
name|int
name|i2d_ECDSA_SIG
parameter_list|(
specifier|const
name|ECDSA_SIG
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
comment|/** d2i_ECDSA_SIG  * decodes a DER encoded ECDSA signature (note: this function changes *pp  * (*pp += len)).   * \param v pointer to ECDSA_SIG pointer (may be NULL)  * \param pp buffer with the DER encoded signature  * \param len bufferlength  * \return pointer to the decoded ECDSA_SIG structure (or NULL)  */
name|ECDSA_SIG
modifier|*
name|d2i_ECDSA_SIG
parameter_list|(
name|ECDSA_SIG
modifier|*
modifier|*
name|v
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
comment|/** ECDSA_do_sign  * computes the ECDSA signature of the given hash value using  * the supplied private key and returns the created signature.  * \param dgst pointer to the hash value  * \param dgst_len length of the hash value  * \param eckey pointer to the EC_KEY object containing a private EC key  * \return pointer to a ECDSA_SIG structure or NULL  */
name|ECDSA_SIG
modifier|*
name|ECDSA_do_sign
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgst_len
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
comment|/** ECDSA_do_sign_ex  * computes ECDSA signature of a given hash value using the supplied  * private key (note: sig must point to ECDSA_size(eckey) bytes of memory).  * \param dgst pointer to the hash value to sign  * \param dgstlen length of the hash value  * \param kinv optional pointer to a pre-computed inverse k  * \param rp optional pointer to the pre-computed rp value (see   *        ECDSA_sign_setup  * \param eckey pointer to the EC_KEY object containing a private EC key  * \return pointer to a ECDSA_SIG structure or NULL  */
name|ECDSA_SIG
modifier|*
name|ECDSA_do_sign_ex
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgstlen
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|kinv
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|rp
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
comment|/** ECDSA_do_verify  * verifies that the supplied signature is a valid ECDSA  * signature of the supplied hash value using the supplied public key.  * \param dgst pointer to the hash value  * \param dgst_len length of the hash value  * \param sig  pointer to the ECDSA_SIG structure  * \param eckey pointer to the EC_KEY object containing a public EC key  * \return 1 if the signature is valid, 0 if the signature is invalid and -1 on error  */
name|int
name|ECDSA_do_verify
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgst_len
parameter_list|,
specifier|const
name|ECDSA_SIG
modifier|*
name|sig
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
specifier|const
name|ECDSA_METHOD
modifier|*
name|ECDSA_OpenSSL
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** ECDSA_set_default_method  * sets the default ECDSA method  * \param meth the new default ECDSA_METHOD  */
name|void
name|ECDSA_set_default_method
parameter_list|(
specifier|const
name|ECDSA_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
comment|/** ECDSA_get_default_method  * returns the default ECDSA method  * \return pointer to ECDSA_METHOD structure containing the default method  */
specifier|const
name|ECDSA_METHOD
modifier|*
name|ECDSA_get_default_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** ECDSA_set_method  * sets method to be used for the ECDSA operations  * \param eckey pointer to the EC_KEY object  * \param meth  pointer to the new method  * \return 1 on success and 0 otherwise   */
name|int
name|ECDSA_set_method
parameter_list|(
name|EC_KEY
modifier|*
name|eckey
parameter_list|,
specifier|const
name|ECDSA_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
comment|/** ECDSA_size  * returns the maximum length of the DER encoded signature  * \param  eckey pointer to a EC_KEY object  * \return numbers of bytes required for the DER encoded signature  */
name|int
name|ECDSA_size
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
comment|/** ECDSA_sign_setup  * precompute parts of the signing operation.   * \param eckey pointer to the EC_KEY object containing a private EC key  * \param ctx  pointer to a BN_CTX object (may be NULL)  * \param kinv pointer to a BIGNUM pointer for the inverse of k  * \param rp   pointer to a BIGNUM pointer for x coordinate of k * generator  * \return 1 on success and 0 otherwise  */
name|int
name|ECDSA_sign_setup
parameter_list|(
name|EC_KEY
modifier|*
name|eckey
parameter_list|,
name|BN_CTX
modifier|*
name|ctx
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|kinv
parameter_list|,
name|BIGNUM
modifier|*
modifier|*
name|rp
parameter_list|)
function_decl|;
comment|/** ECDSA_sign  * computes ECDSA signature of a given hash value using the supplied  * private key (note: sig must point to ECDSA_size(eckey) bytes of memory).  * \param type this parameter is ignored  * \param dgst pointer to the hash value to sign  * \param dgstlen length of the hash value  * \param sig buffer to hold the DER encoded signature  * \param siglen pointer to the length of the returned signature  * \param eckey pointer to the EC_KEY object containing a private EC key  * \return 1 on success and 0 otherwise  */
name|int
name|ECDSA_sign
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgstlen
parameter_list|,
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
comment|/** ECDSA_sign_ex  * computes ECDSA signature of a given hash value using the supplied  * private key (note: sig must point to ECDSA_size(eckey) bytes of memory).  * \param type this parameter is ignored  * \param dgst pointer to the hash value to sign  * \param dgstlen length of the hash value  * \param sig buffer to hold the DER encoded signature  * \param siglen pointer to the length of the returned signature  * \param kinv optional pointer to a pre-computed inverse k  * \param rp optional pointer to the pre-computed rp value (see   *        ECDSA_sign_setup  * \param eckey pointer to the EC_KEY object containing a private EC key  * \return 1 on success and 0 otherwise  */
name|int
name|ECDSA_sign_ex
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgstlen
parameter_list|,
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|unsigned
name|int
modifier|*
name|siglen
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|kinv
parameter_list|,
specifier|const
name|BIGNUM
modifier|*
name|rp
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
comment|/** ECDSA_verify  * verifies that the given signature is valid ECDSA signature  * of the supplied hash value using the specified public key.  * \param type this parameter is ignored  * \param dgst pointer to the hash value   * \param dgstlen length of the hash value  * \param sig  pointer to the DER encoded signature  * \param siglen length of the DER encoded signature  * \param eckey pointer to the EC_KEY object containing a public EC key  * \return 1 if the signature is valid, 0 if the signature is invalid and -1 on error  */
name|int
name|ECDSA_verify
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|dgst
parameter_list|,
name|int
name|dgstlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sig
parameter_list|,
name|int
name|siglen
parameter_list|,
name|EC_KEY
modifier|*
name|eckey
parameter_list|)
function_decl|;
comment|/* the standard ex_data functions */
name|int
name|ECDSA_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|ECDSA_set_ex_data
parameter_list|(
name|EC_KEY
modifier|*
name|d
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|ECDSA_get_ex_data
parameter_list|(
name|EC_KEY
modifier|*
name|d
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_ECDSA_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the ECDSA functions. */
comment|/* Function codes. */
define|#
directive|define
name|ECDSA_F_ECDSA_DATA_NEW_METHOD
value|100
define|#
directive|define
name|ECDSA_F_ECDSA_DO_SIGN
value|101
define|#
directive|define
name|ECDSA_F_ECDSA_DO_VERIFY
value|102
define|#
directive|define
name|ECDSA_F_ECDSA_SIGN_SETUP
value|103
comment|/* Reason codes. */
define|#
directive|define
name|ECDSA_R_BAD_SIGNATURE
value|100
define|#
directive|define
name|ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
value|101
define|#
directive|define
name|ECDSA_R_ERR_EC_LIB
value|102
define|#
directive|define
name|ECDSA_R_MISSING_PARAMETERS
value|103
define|#
directive|define
name|ECDSA_R_NEED_NEW_SETUP_VALUES
value|106
define|#
directive|define
name|ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
value|104
define|#
directive|define
name|ECDSA_R_SIGNATURE_MALLOC_FAILED
value|105
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

