begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/store/store.h */
end_comment

begin_comment
comment|/*  * Written by Richard Levitte (richard@levitte.org) for the OpenSSL project  * 2003.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 2003 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_STORE_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_STORE_H
end_define

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL_NO_STORE
end_ifdef

begin_error
error|#
directive|error
error|STORE is disabled.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_include
include|#
directive|include
file|<openssl/evp.h>
end_include

begin_include
include|#
directive|include
file|<openssl/bn.h>
end_include

begin_include
include|#
directive|include
file|<openssl/x509.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Already defined in ossl_typ.h */
comment|/* typedef struct store_st STORE; */
comment|/* typedef struct store_method_st STORE_METHOD; */
comment|/*  * All the following functions return 0, a negative number or NULL on error.  * When everything is fine, they return a positive value or a non-NULL  * pointer, all depending on their purpose.  */
comment|/* Creators and destructor.   */
name|STORE
modifier|*
name|STORE_new_method
parameter_list|(
specifier|const
name|STORE_METHOD
modifier|*
name|method
parameter_list|)
function_decl|;
name|STORE
modifier|*
name|STORE_new_engine
parameter_list|(
name|ENGINE
modifier|*
name|engine
parameter_list|)
function_decl|;
name|void
name|STORE_free
parameter_list|(
name|STORE
modifier|*
name|ui
parameter_list|)
function_decl|;
comment|/*  * Give a user interface parametrised control commands.  This can be used to  * send down an integer, a data pointer or a function pointer, as well as be  * used to get information from a STORE.  */
name|int
name|STORE_ctrl
parameter_list|(
name|STORE
modifier|*
name|store
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|i
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
comment|/*  * A control to set the directory with keys and certificates.  Used by the  * built-in directory level method.  */
define|#
directive|define
name|STORE_CTRL_SET_DIRECTORY
value|0x0001
comment|/*  * A control to set a file to load.  Used by the built-in file level method.  */
define|#
directive|define
name|STORE_CTRL_SET_FILE
value|0x0002
comment|/*  * A control to set a configuration file to load.  Can be used by any method  * that wishes to load a configuration file.  */
define|#
directive|define
name|STORE_CTRL_SET_CONF_FILE
value|0x0003
comment|/*  * A control to set a the section of the loaded configuration file.  Can be  * used by any method that wishes to load a configuration file.  */
define|#
directive|define
name|STORE_CTRL_SET_CONF_SECTION
value|0x0004
comment|/* Some methods may use extra data */
define|#
directive|define
name|STORE_set_app_data
parameter_list|(
name|s
parameter_list|,
name|arg
parameter_list|)
value|STORE_set_ex_data(s,0,arg)
define|#
directive|define
name|STORE_get_app_data
parameter_list|(
name|s
parameter_list|)
value|STORE_get_ex_data(s,0)
name|int
name|STORE_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|STORE_set_ex_data
parameter_list|(
name|STORE
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|STORE_get_ex_data
parameter_list|(
name|STORE
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
comment|/* Use specific methods instead of the built-in one */
specifier|const
name|STORE_METHOD
modifier|*
name|STORE_get_method
parameter_list|(
name|STORE
modifier|*
name|store
parameter_list|)
function_decl|;
specifier|const
name|STORE_METHOD
modifier|*
name|STORE_set_method
parameter_list|(
name|STORE
modifier|*
name|store
parameter_list|,
specifier|const
name|STORE_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
comment|/* The standard OpenSSL methods. */
comment|/*  * This is the in-memory method.  It does everything except revoking and  * updating, and is of course volatile.  It's used by other methods that have  * an in-memory cache.  */
specifier|const
name|STORE_METHOD
modifier|*
name|STORE_Memory
parameter_list|(
name|void
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
comment|/* Not yet implemented */
comment|/*  * This is the directory store.  It does everything except revoking and  * updating, and uses STORE_Memory() to cache things in memory.  */
block|const STORE_METHOD *STORE_Directory(void);
comment|/*  * This is the file store.  It does everything except revoking and updating,  * and uses STORE_Memory() to cache things in memory.  Certificates are added  * to it with the store operation, and it will only get cached certificates.  */
block|const STORE_METHOD *STORE_File(void);
endif|#
directive|endif
comment|/*  * Store functions take a type code for the type of data they should store or  * fetch  */
typedef|typedef
enum|enum
name|STORE_object_types
block|{
name|STORE_OBJECT_TYPE_X509_CERTIFICATE
init|=
literal|0x01
block|,
comment|/* X509 * */
name|STORE_OBJECT_TYPE_X509_CRL
init|=
literal|0x02
block|,
comment|/* X509_CRL * */
name|STORE_OBJECT_TYPE_PRIVATE_KEY
init|=
literal|0x03
block|,
comment|/* EVP_PKEY * */
name|STORE_OBJECT_TYPE_PUBLIC_KEY
init|=
literal|0x04
block|,
comment|/* EVP_PKEY * */
name|STORE_OBJECT_TYPE_NUMBER
init|=
literal|0x05
block|,
comment|/* BIGNUM * */
name|STORE_OBJECT_TYPE_ARBITRARY
init|=
literal|0x06
block|,
comment|/* BUF_MEM * */
name|STORE_OBJECT_TYPE_NUM
init|=
literal|0x06
comment|/* The amount of known object types */
block|}
name|STORE_OBJECT_TYPES
typedef|;
comment|/* List of text strings corresponding to the object types. */
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|STORE_object_type_string
index|[
name|STORE_OBJECT_TYPE_NUM
operator|+
literal|1
index|]
decl_stmt|;
comment|/*  * Some store functions take a parameter list.  Those parameters come with  * one of the following codes. The comments following the codes below  * indicate what type the value should be a pointer to.  */
typedef|typedef
enum|enum
name|STORE_params
block|{
name|STORE_PARAM_EVP_TYPE
init|=
literal|0x01
block|,
comment|/* int */
name|STORE_PARAM_BITS
init|=
literal|0x02
block|,
comment|/* size_t */
name|STORE_PARAM_KEY_PARAMETERS
init|=
literal|0x03
block|,
comment|/* ??? */
name|STORE_PARAM_KEY_NO_PARAMETERS
init|=
literal|0x04
block|,
comment|/* N/A */
name|STORE_PARAM_AUTH_PASSPHRASE
init|=
literal|0x05
block|,
comment|/* char * */
name|STORE_PARAM_AUTH_KRB5_TICKET
init|=
literal|0x06
block|,
comment|/* void * */
name|STORE_PARAM_TYPE_NUM
init|=
literal|0x06
comment|/* The amount of known parameter types */
block|}
name|STORE_PARAM_TYPES
typedef|;
comment|/*  * Parameter value sizes.  -1 means unknown, anything else is the required  * size.  */
specifier|extern
specifier|const
name|int
name|STORE_param_sizes
index|[
name|STORE_PARAM_TYPE_NUM
operator|+
literal|1
index|]
decl_stmt|;
comment|/*  * Store functions take attribute lists.  Those attributes come with codes.  * The comments following the codes below indicate what type the value should  * be a pointer to.  */
typedef|typedef
enum|enum
name|STORE_attribs
block|{
name|STORE_ATTR_END
init|=
literal|0x00
block|,
name|STORE_ATTR_FRIENDLYNAME
init|=
literal|0x01
block|,
comment|/* C string */
name|STORE_ATTR_KEYID
init|=
literal|0x02
block|,
comment|/* 160 bit string (SHA1) */
name|STORE_ATTR_ISSUERKEYID
init|=
literal|0x03
block|,
comment|/* 160 bit string (SHA1) */
name|STORE_ATTR_SUBJECTKEYID
init|=
literal|0x04
block|,
comment|/* 160 bit string (SHA1) */
name|STORE_ATTR_ISSUERSERIALHASH
init|=
literal|0x05
block|,
comment|/* 160 bit string (SHA1) */
name|STORE_ATTR_ISSUER
init|=
literal|0x06
block|,
comment|/* X509_NAME * */
name|STORE_ATTR_SERIAL
init|=
literal|0x07
block|,
comment|/* BIGNUM * */
name|STORE_ATTR_SUBJECT
init|=
literal|0x08
block|,
comment|/* X509_NAME * */
name|STORE_ATTR_CERTHASH
init|=
literal|0x09
block|,
comment|/* 160 bit string (SHA1) */
name|STORE_ATTR_EMAIL
init|=
literal|0x0a
block|,
comment|/* C string */
name|STORE_ATTR_FILENAME
init|=
literal|0x0b
block|,
comment|/* C string */
name|STORE_ATTR_TYPE_NUM
init|=
literal|0x0b
block|,
comment|/* The amount of known attribute types */
name|STORE_ATTR_OR
init|=
literal|0xff
comment|/* This is a special separator, which                                  * expresses the OR operation.  */
block|}
name|STORE_ATTR_TYPES
typedef|;
comment|/*  * Attribute value sizes.  -1 means unknown, anything else is the required  * size.  */
specifier|extern
specifier|const
name|int
name|STORE_attr_sizes
index|[
name|STORE_ATTR_TYPE_NUM
operator|+
literal|1
index|]
decl_stmt|;
typedef|typedef
enum|enum
name|STORE_certificate_status
block|{
name|STORE_X509_VALID
init|=
literal|0x00
block|,
name|STORE_X509_EXPIRED
init|=
literal|0x01
block|,
name|STORE_X509_SUSPENDED
init|=
literal|0x02
block|,
name|STORE_X509_REVOKED
init|=
literal|0x03
block|}
name|STORE_CERTIFICATE_STATUS
typedef|;
comment|/*  * Engine store functions will return a structure that contains all the  * necessary information, including revokation status for certificates.  This  * is really not needed for application authors, as the ENGINE framework  * functions will extract the OpenSSL-specific information when at all  * possible.  However, for engine authors, it's crucial to know this  * structure.  */
typedef|typedef
struct|struct
name|STORE_OBJECT_st
block|{
name|STORE_OBJECT_TYPES
name|type
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|STORE_CERTIFICATE_STATUS
name|status
decl_stmt|;
name|X509
modifier|*
name|certificate
decl_stmt|;
block|}
name|x509
struct|;
name|X509_CRL
modifier|*
name|crl
decl_stmt|;
name|EVP_PKEY
modifier|*
name|key
decl_stmt|;
name|BIGNUM
modifier|*
name|number
decl_stmt|;
name|BUF_MEM
modifier|*
name|arbitrary
decl_stmt|;
block|}
name|data
union|;
block|}
name|STORE_OBJECT
typedef|;
name|DECLARE_STACK_OF
argument_list|(
argument|STORE_OBJECT
argument_list|)
name|STORE_OBJECT
modifier|*
name|STORE_OBJECT_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|STORE_OBJECT_free
parameter_list|(
name|STORE_OBJECT
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/*  * The following functions handle the storage. They return 0, a negative  * number or NULL on error, anything else on success.  */
name|X509
modifier|*
name|STORE_get_certificate
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_store_certificate
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|X509
modifier|*
name|data
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_modify_certificate
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|search_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|add_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|modify_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|delete_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_revoke_certificate
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_delete_certificate
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|void
modifier|*
name|STORE_list_certificate_start
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|X509
modifier|*
name|STORE_list_certificate_next
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_certificate_end
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_certificate_endp
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|STORE_generate_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|STORE_get_private_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_store_private_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|EVP_PKEY
modifier|*
name|data
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_modify_private_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|search_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|add_sttributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|modify_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|delete_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_revoke_private_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_delete_private_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|void
modifier|*
name|STORE_list_private_key_start
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|STORE_list_private_key_next
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_private_key_end
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_private_key_endp
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|STORE_get_public_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_store_public_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|EVP_PKEY
modifier|*
name|data
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_modify_public_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|search_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|add_sttributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|modify_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|delete_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_revoke_public_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_delete_public_key
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|void
modifier|*
name|STORE_list_public_key_start
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|EVP_PKEY
modifier|*
name|STORE_list_public_key_next
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_public_key_end
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_public_key_endp
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|X509_CRL
modifier|*
name|STORE_generate_crl
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|X509_CRL
modifier|*
name|STORE_get_crl
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_store_crl
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|X509_CRL
modifier|*
name|data
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_modify_crl
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|search_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|add_sttributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|modify_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|delete_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_delete_crl
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|void
modifier|*
name|STORE_list_crl_start
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|X509_CRL
modifier|*
name|STORE_list_crl_next
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_crl_end
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_list_crl_endp
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_store_number
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|BIGNUM
modifier|*
name|data
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_modify_number
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|search_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|add_sttributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|modify_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|delete_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|STORE_get_number
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_delete_number
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_store_arbitrary
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|BUF_MEM
modifier|*
name|data
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_modify_arbitrary
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|search_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|add_sttributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|modify_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|delete_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|BUF_MEM
modifier|*
name|STORE_get_arbitrary
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
name|int
name|STORE_delete_arbitrary
parameter_list|(
name|STORE
modifier|*
name|e
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
comment|/* Create and manipulate methods */
name|STORE_METHOD
modifier|*
name|STORE_create_method
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|STORE_destroy_method
parameter_list|(
name|STORE_METHOD
modifier|*
name|store_method
parameter_list|)
function_decl|;
comment|/* These callback types are use for store handlers */
typedef|typedef
name|int
function_decl|(
modifier|*
name|STORE_INITIALISE_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|STORE_CLEANUP_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|STORE_OBJECT
modifier|*
function_decl|(
modifier|*
name|STORE_GENERATE_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|STORE_OBJECT_TYPES
name|type
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
typedef|typedef
name|STORE_OBJECT
modifier|*
function_decl|(
modifier|*
name|STORE_GET_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|STORE_OBJECT_TYPES
name|type
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|STORE_START_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|STORE_OBJECT_TYPES
name|type
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
typedef|typedef
name|STORE_OBJECT
modifier|*
function_decl|(
modifier|*
name|STORE_NEXT_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|STORE_END_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|STORE_HANDLE_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|STORE_OBJECT_TYPES
name|type
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|STORE_STORE_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|STORE_OBJECT_TYPES
name|type
parameter_list|,
name|STORE_OBJECT
modifier|*
name|data
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|STORE_MODIFY_OBJECT_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|STORE_OBJECT_TYPES
name|type
parameter_list|,
name|OPENSSL_ITEM
name|search_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|add_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|modify_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|delete_attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|STORE_GENERIC_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|OPENSSL_ITEM
name|attributes
index|[]
parameter_list|,
name|OPENSSL_ITEM
name|parameters
index|[]
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|STORE_CTRL_FUNC_PTR
function_decl|)
parameter_list|(
name|STORE
modifier|*
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|l
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_initialise_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_INITIALISE_FUNC_PTR
name|init_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_cleanup_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_CLEANUP_FUNC_PTR
name|clean_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_generate_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_GENERATE_OBJECT_FUNC_PTR
name|generate_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_get_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_GET_OBJECT_FUNC_PTR
name|get_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_STORE_OBJECT_FUNC_PTR
name|store_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_modify_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_MODIFY_OBJECT_FUNC_PTR
name|store_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_revoke_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_HANDLE_OBJECT_FUNC_PTR
name|revoke_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_delete_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_HANDLE_OBJECT_FUNC_PTR
name|delete_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_list_start_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_START_OBJECT_FUNC_PTR
name|list_start_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_list_next_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_NEXT_OBJECT_FUNC_PTR
name|list_next_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_list_end_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_END_OBJECT_FUNC_PTR
name|list_end_f
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_update_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_GENERIC_FUNC_PTR
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_lock_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_GENERIC_FUNC_PTR
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_unlock_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_GENERIC_FUNC_PTR
parameter_list|)
function_decl|;
name|int
name|STORE_method_set_ctrl_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|,
name|STORE_CTRL_FUNC_PTR
name|ctrl_f
parameter_list|)
function_decl|;
name|STORE_INITIALISE_FUNC_PTR
name|STORE_method_get_initialise_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_CLEANUP_FUNC_PTR
name|STORE_method_get_cleanup_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_GENERATE_OBJECT_FUNC_PTR
name|STORE_method_get_generate_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_GET_OBJECT_FUNC_PTR
name|STORE_method_get_get_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_STORE_OBJECT_FUNC_PTR
name|STORE_method_get_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_MODIFY_OBJECT_FUNC_PTR
name|STORE_method_get_modify_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_HANDLE_OBJECT_FUNC_PTR
name|STORE_method_get_revoke_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_HANDLE_OBJECT_FUNC_PTR
name|STORE_method_get_delete_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_START_OBJECT_FUNC_PTR
name|STORE_method_get_list_start_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_NEXT_OBJECT_FUNC_PTR
name|STORE_method_get_list_next_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_END_OBJECT_FUNC_PTR
name|STORE_method_get_list_end_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_GENERIC_FUNC_PTR
name|STORE_method_get_update_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_GENERIC_FUNC_PTR
name|STORE_method_get_lock_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_GENERIC_FUNC_PTR
name|STORE_method_get_unlock_store_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
name|STORE_CTRL_FUNC_PTR
name|STORE_method_get_ctrl_function
parameter_list|(
name|STORE_METHOD
modifier|*
name|sm
parameter_list|)
function_decl|;
comment|/* Method helper structures and functions. */
comment|/*  * This structure is the result of parsing through the information in a list  * of OPENSSL_ITEMs.  It stores all the necessary information in a structured  * way.  */
typedef|typedef
name|struct
name|STORE_attr_info_st
name|STORE_ATTR_INFO
typedef|;
comment|/*  * Parse a list of OPENSSL_ITEMs and return a pointer to a STORE_ATTR_INFO.  * Note that we do this in the list form, since the list of OPENSSL_ITEMs can  * come in blocks separated with STORE_ATTR_OR.  Note that the value returned  * by STORE_parse_attrs_next() must be freed with STORE_ATTR_INFO_free().  */
name|void
modifier|*
name|STORE_parse_attrs_start
parameter_list|(
name|OPENSSL_ITEM
modifier|*
name|attributes
parameter_list|)
function_decl|;
name|STORE_ATTR_INFO
modifier|*
name|STORE_parse_attrs_next
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_parse_attrs_end
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int
name|STORE_parse_attrs_endp
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/* Creator and destructor */
name|STORE_ATTR_INFO
modifier|*
name|STORE_ATTR_INFO_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_free
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|)
function_decl|;
comment|/* Manipulators */
name|char
modifier|*
name|STORE_ATTR_INFO_get0_cstr
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|STORE_ATTR_INFO_get0_sha1str
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|)
function_decl|;
name|X509_NAME
modifier|*
name|STORE_ATTR_INFO_get0_dn
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|)
function_decl|;
name|BIGNUM
modifier|*
name|STORE_ATTR_INFO_get0_number
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_set_cstr
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|char
modifier|*
name|cstr
parameter_list|,
name|size_t
name|cstr_size
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_set_sha1str
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1str
parameter_list|,
name|size_t
name|sha1str_size
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_set_dn
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|X509_NAME
modifier|*
name|dn
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_set_number
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|BIGNUM
modifier|*
name|number
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_modify_cstr
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|char
modifier|*
name|cstr
parameter_list|,
name|size_t
name|cstr_size
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_modify_sha1str
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1str
parameter_list|,
name|size_t
name|sha1str_size
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_modify_dn
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|X509_NAME
modifier|*
name|dn
parameter_list|)
function_decl|;
name|int
name|STORE_ATTR_INFO_modify_number
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|attrs
parameter_list|,
name|STORE_ATTR_TYPES
name|code
parameter_list|,
name|BIGNUM
modifier|*
name|number
parameter_list|)
function_decl|;
comment|/*  * Compare on basis of a bit pattern formed by the STORE_ATTR_TYPES values in  * each contained attribute.  */
name|int
name|STORE_ATTR_INFO_compare
parameter_list|(
specifier|const
name|STORE_ATTR_INFO
modifier|*
specifier|const
modifier|*
name|a
parameter_list|,
specifier|const
name|STORE_ATTR_INFO
modifier|*
specifier|const
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/*  * Check if the set of attributes in a is within the range of attributes set  * in b.  */
name|int
name|STORE_ATTR_INFO_in_range
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|a
parameter_list|,
name|STORE_ATTR_INFO
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/* Check if the set of attributes in a are also set in b. */
name|int
name|STORE_ATTR_INFO_in
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|a
parameter_list|,
name|STORE_ATTR_INFO
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/* Same as STORE_ATTR_INFO_in(), but also checks the attribute values. */
name|int
name|STORE_ATTR_INFO_in_ex
parameter_list|(
name|STORE_ATTR_INFO
modifier|*
name|a
parameter_list|,
name|STORE_ATTR_INFO
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/* BEGIN ERROR CODES */
comment|/*  * The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_STORE_strings
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Error codes for the STORE functions. */
comment|/* Function codes. */
define|#
directive|define
name|STORE_F_MEM_DELETE
value|134
define|#
directive|define
name|STORE_F_MEM_GENERATE
value|135
define|#
directive|define
name|STORE_F_MEM_LIST_END
value|168
define|#
directive|define
name|STORE_F_MEM_LIST_NEXT
value|136
define|#
directive|define
name|STORE_F_MEM_LIST_START
value|137
define|#
directive|define
name|STORE_F_MEM_MODIFY
value|169
define|#
directive|define
name|STORE_F_MEM_STORE
value|138
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_GET0_CSTR
value|139
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_GET0_DN
value|140
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_GET0_NUMBER
value|141
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_GET0_SHA1STR
value|142
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_MODIFY_CSTR
value|143
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_MODIFY_DN
value|144
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_MODIFY_NUMBER
value|145
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_MODIFY_SHA1STR
value|146
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_SET_CSTR
value|147
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_SET_DN
value|148
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_SET_NUMBER
value|149
define|#
directive|define
name|STORE_F_STORE_ATTR_INFO_SET_SHA1STR
value|150
define|#
directive|define
name|STORE_F_STORE_CERTIFICATE
value|170
define|#
directive|define
name|STORE_F_STORE_CTRL
value|161
define|#
directive|define
name|STORE_F_STORE_DELETE_ARBITRARY
value|158
define|#
directive|define
name|STORE_F_STORE_DELETE_CERTIFICATE
value|102
define|#
directive|define
name|STORE_F_STORE_DELETE_CRL
value|103
define|#
directive|define
name|STORE_F_STORE_DELETE_NUMBER
value|104
define|#
directive|define
name|STORE_F_STORE_DELETE_PRIVATE_KEY
value|105
define|#
directive|define
name|STORE_F_STORE_DELETE_PUBLIC_KEY
value|106
define|#
directive|define
name|STORE_F_STORE_GENERATE_CRL
value|107
define|#
directive|define
name|STORE_F_STORE_GENERATE_KEY
value|108
define|#
directive|define
name|STORE_F_STORE_GET_ARBITRARY
value|159
define|#
directive|define
name|STORE_F_STORE_GET_CERTIFICATE
value|109
define|#
directive|define
name|STORE_F_STORE_GET_CRL
value|110
define|#
directive|define
name|STORE_F_STORE_GET_NUMBER
value|111
define|#
directive|define
name|STORE_F_STORE_GET_PRIVATE_KEY
value|112
define|#
directive|define
name|STORE_F_STORE_GET_PUBLIC_KEY
value|113
define|#
directive|define
name|STORE_F_STORE_LIST_CERTIFICATE_END
value|114
define|#
directive|define
name|STORE_F_STORE_LIST_CERTIFICATE_ENDP
value|153
define|#
directive|define
name|STORE_F_STORE_LIST_CERTIFICATE_NEXT
value|115
define|#
directive|define
name|STORE_F_STORE_LIST_CERTIFICATE_START
value|116
define|#
directive|define
name|STORE_F_STORE_LIST_CRL_END
value|117
define|#
directive|define
name|STORE_F_STORE_LIST_CRL_ENDP
value|154
define|#
directive|define
name|STORE_F_STORE_LIST_CRL_NEXT
value|118
define|#
directive|define
name|STORE_F_STORE_LIST_CRL_START
value|119
define|#
directive|define
name|STORE_F_STORE_LIST_PRIVATE_KEY_END
value|120
define|#
directive|define
name|STORE_F_STORE_LIST_PRIVATE_KEY_ENDP
value|155
define|#
directive|define
name|STORE_F_STORE_LIST_PRIVATE_KEY_NEXT
value|121
define|#
directive|define
name|STORE_F_STORE_LIST_PRIVATE_KEY_START
value|122
define|#
directive|define
name|STORE_F_STORE_LIST_PUBLIC_KEY_END
value|123
define|#
directive|define
name|STORE_F_STORE_LIST_PUBLIC_KEY_ENDP
value|156
define|#
directive|define
name|STORE_F_STORE_LIST_PUBLIC_KEY_NEXT
value|124
define|#
directive|define
name|STORE_F_STORE_LIST_PUBLIC_KEY_START
value|125
define|#
directive|define
name|STORE_F_STORE_MODIFY_ARBITRARY
value|162
define|#
directive|define
name|STORE_F_STORE_MODIFY_CERTIFICATE
value|163
define|#
directive|define
name|STORE_F_STORE_MODIFY_CRL
value|164
define|#
directive|define
name|STORE_F_STORE_MODIFY_NUMBER
value|165
define|#
directive|define
name|STORE_F_STORE_MODIFY_PRIVATE_KEY
value|166
define|#
directive|define
name|STORE_F_STORE_MODIFY_PUBLIC_KEY
value|167
define|#
directive|define
name|STORE_F_STORE_NEW_ENGINE
value|133
define|#
directive|define
name|STORE_F_STORE_NEW_METHOD
value|132
define|#
directive|define
name|STORE_F_STORE_PARSE_ATTRS_END
value|151
define|#
directive|define
name|STORE_F_STORE_PARSE_ATTRS_ENDP
value|172
define|#
directive|define
name|STORE_F_STORE_PARSE_ATTRS_NEXT
value|152
define|#
directive|define
name|STORE_F_STORE_PARSE_ATTRS_START
value|171
define|#
directive|define
name|STORE_F_STORE_REVOKE_CERTIFICATE
value|129
define|#
directive|define
name|STORE_F_STORE_REVOKE_PRIVATE_KEY
value|130
define|#
directive|define
name|STORE_F_STORE_REVOKE_PUBLIC_KEY
value|131
define|#
directive|define
name|STORE_F_STORE_STORE_ARBITRARY
value|157
define|#
directive|define
name|STORE_F_STORE_STORE_CERTIFICATE
value|100
define|#
directive|define
name|STORE_F_STORE_STORE_CRL
value|101
define|#
directive|define
name|STORE_F_STORE_STORE_NUMBER
value|126
define|#
directive|define
name|STORE_F_STORE_STORE_PRIVATE_KEY
value|127
define|#
directive|define
name|STORE_F_STORE_STORE_PUBLIC_KEY
value|128
comment|/* Reason codes. */
define|#
directive|define
name|STORE_R_ALREADY_HAS_A_VALUE
value|127
define|#
directive|define
name|STORE_R_FAILED_DELETING_ARBITRARY
value|132
define|#
directive|define
name|STORE_R_FAILED_DELETING_CERTIFICATE
value|100
define|#
directive|define
name|STORE_R_FAILED_DELETING_KEY
value|101
define|#
directive|define
name|STORE_R_FAILED_DELETING_NUMBER
value|102
define|#
directive|define
name|STORE_R_FAILED_GENERATING_CRL
value|103
define|#
directive|define
name|STORE_R_FAILED_GENERATING_KEY
value|104
define|#
directive|define
name|STORE_R_FAILED_GETTING_ARBITRARY
value|133
define|#
directive|define
name|STORE_R_FAILED_GETTING_CERTIFICATE
value|105
define|#
directive|define
name|STORE_R_FAILED_GETTING_KEY
value|106
define|#
directive|define
name|STORE_R_FAILED_GETTING_NUMBER
value|107
define|#
directive|define
name|STORE_R_FAILED_LISTING_CERTIFICATES
value|108
define|#
directive|define
name|STORE_R_FAILED_LISTING_KEYS
value|109
define|#
directive|define
name|STORE_R_FAILED_MODIFYING_ARBITRARY
value|138
define|#
directive|define
name|STORE_R_FAILED_MODIFYING_CERTIFICATE
value|139
define|#
directive|define
name|STORE_R_FAILED_MODIFYING_CRL
value|140
define|#
directive|define
name|STORE_R_FAILED_MODIFYING_NUMBER
value|141
define|#
directive|define
name|STORE_R_FAILED_MODIFYING_PRIVATE_KEY
value|142
define|#
directive|define
name|STORE_R_FAILED_MODIFYING_PUBLIC_KEY
value|143
define|#
directive|define
name|STORE_R_FAILED_REVOKING_CERTIFICATE
value|110
define|#
directive|define
name|STORE_R_FAILED_REVOKING_KEY
value|111
define|#
directive|define
name|STORE_R_FAILED_STORING_ARBITRARY
value|134
define|#
directive|define
name|STORE_R_FAILED_STORING_CERTIFICATE
value|112
define|#
directive|define
name|STORE_R_FAILED_STORING_KEY
value|113
define|#
directive|define
name|STORE_R_FAILED_STORING_NUMBER
value|114
define|#
directive|define
name|STORE_R_NOT_IMPLEMENTED
value|128
define|#
directive|define
name|STORE_R_NO_CONTROL_FUNCTION
value|144
define|#
directive|define
name|STORE_R_NO_DELETE_ARBITRARY_FUNCTION
value|135
define|#
directive|define
name|STORE_R_NO_DELETE_NUMBER_FUNCTION
value|115
define|#
directive|define
name|STORE_R_NO_DELETE_OBJECT_FUNCTION
value|116
define|#
directive|define
name|STORE_R_NO_GENERATE_CRL_FUNCTION
value|117
define|#
directive|define
name|STORE_R_NO_GENERATE_OBJECT_FUNCTION
value|118
define|#
directive|define
name|STORE_R_NO_GET_OBJECT_ARBITRARY_FUNCTION
value|136
define|#
directive|define
name|STORE_R_NO_GET_OBJECT_FUNCTION
value|119
define|#
directive|define
name|STORE_R_NO_GET_OBJECT_NUMBER_FUNCTION
value|120
define|#
directive|define
name|STORE_R_NO_LIST_OBJECT_ENDP_FUNCTION
value|131
define|#
directive|define
name|STORE_R_NO_LIST_OBJECT_END_FUNCTION
value|121
define|#
directive|define
name|STORE_R_NO_LIST_OBJECT_NEXT_FUNCTION
value|122
define|#
directive|define
name|STORE_R_NO_LIST_OBJECT_START_FUNCTION
value|123
define|#
directive|define
name|STORE_R_NO_MODIFY_OBJECT_FUNCTION
value|145
define|#
directive|define
name|STORE_R_NO_REVOKE_OBJECT_FUNCTION
value|124
define|#
directive|define
name|STORE_R_NO_STORE
value|129
define|#
directive|define
name|STORE_R_NO_STORE_OBJECT_ARBITRARY_FUNCTION
value|137
define|#
directive|define
name|STORE_R_NO_STORE_OBJECT_FUNCTION
value|125
define|#
directive|define
name|STORE_R_NO_STORE_OBJECT_NUMBER_FUNCTION
value|126
define|#
directive|define
name|STORE_R_NO_VALUE
value|130
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

