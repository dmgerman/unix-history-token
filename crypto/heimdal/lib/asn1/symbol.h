begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1997 - 2005 Kungliga Tekniska HÃ¶gskolan  * (Royal Institute of Technology, Stockholm, Sweden).  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * 3. Neither the name of the Institute nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYMBOL_H
end_ifndef

begin_define
define|#
directive|define
name|_SYMBOL_H
end_define

begin_include
include|#
directive|include
file|"asn1_queue.h"
end_include

begin_enum
enum|enum
name|typetype
block|{
name|TBitString
block|,
name|TBoolean
block|,
name|TChoice
block|,
name|TEnumerated
block|,
name|TGeneralString
block|,
name|TTeletexString
block|,
name|TGeneralizedTime
block|,
name|TIA5String
block|,
name|TInteger
block|,
name|TNull
block|,
name|TOID
block|,
name|TOctetString
block|,
name|TPrintableString
block|,
name|TSequence
block|,
name|TSequenceOf
block|,
name|TSet
block|,
name|TSetOf
block|,
name|TTag
block|,
name|TType
block|,
name|TUTCTime
block|,
name|TUTF8String
block|,
name|TBMPString
block|,
name|TUniversalString
block|,
name|TVisibleString
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|typetype
name|Typetype
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|type
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|value
block|{
enum|enum
block|{
name|booleanvalue
block|,
name|nullvalue
block|,
name|integervalue
block|,
name|stringvalue
block|,
name|objectidentifiervalue
block|}
name|type
enum|;
union|union
block|{
name|int
name|booleanvalue
decl_stmt|;
name|int
name|integervalue
decl_stmt|;
name|char
modifier|*
name|stringvalue
decl_stmt|;
name|struct
name|objid
modifier|*
name|objectidentifiervalue
decl_stmt|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|member
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|gen_name
decl_stmt|;
name|char
modifier|*
name|label
decl_stmt|;
name|int
name|val
decl_stmt|;
name|int
name|optional
decl_stmt|;
name|int
name|ellipsis
decl_stmt|;
name|struct
name|type
modifier|*
name|type
decl_stmt|;
name|ASN1_TAILQ_ENTRY
argument_list|(
argument|member
argument_list|)
name|members
expr_stmt|;
name|struct
name|value
modifier|*
name|defval
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|member
name|Member
typedef|;
end_typedef

begin_expr_stmt
name|ASN1_TAILQ_HEAD
argument_list|(
name|memhead
argument_list|,
name|member
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct_decl
struct_decl|struct
name|symbol
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|tagtype
block|{
name|int
name|tagclass
decl_stmt|;
name|int
name|tagvalue
decl_stmt|;
enum|enum
block|{
name|TE_IMPLICIT
block|,
name|TE_EXPLICIT
block|}
name|tagenv
enum|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|range
block|{
name|int
name|min
decl_stmt|;
name|int
name|max
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ctype
block|{
name|CT_CONTENTS
block|,
name|CT_USER
block|}
enum|;
end_enum

begin_struct_decl
struct_decl|struct
name|constraint_spec
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|type
block|{
name|Typetype
name|type
decl_stmt|;
name|struct
name|memhead
modifier|*
name|members
decl_stmt|;
name|struct
name|symbol
modifier|*
name|symbol
decl_stmt|;
name|struct
name|type
modifier|*
name|subtype
decl_stmt|;
name|struct
name|tagtype
name|tag
decl_stmt|;
name|struct
name|range
modifier|*
name|range
decl_stmt|;
name|struct
name|constraint_spec
modifier|*
name|constraint
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|type
name|Type
typedef|;
end_typedef

begin_struct
struct|struct
name|constraint_spec
block|{
name|enum
name|ctype
name|ctype
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|Type
modifier|*
name|type
decl_stmt|;
name|struct
name|value
modifier|*
name|encoding
decl_stmt|;
block|}
name|content
struct|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|objid
block|{
specifier|const
name|char
modifier|*
name|label
decl_stmt|;
name|int
name|value
decl_stmt|;
name|struct
name|objid
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|symbol
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|gen_name
decl_stmt|;
enum|enum
block|{
name|SUndefined
block|,
name|SValue
block|,
name|Stype
block|}
name|stype
enum|;
name|struct
name|value
modifier|*
name|value
decl_stmt|;
name|Type
modifier|*
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|symbol
name|Symbol
typedef|;
end_typedef

begin_function_decl
name|void
name|initsym
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Symbol
modifier|*
name|addsym
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|output_name
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|checkundefined
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

