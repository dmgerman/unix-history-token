begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1997, 1999 Kungliga Tekniska HÃ¶gskolan  * (Royal Institute of Technology, Stockholm, Sweden).   * All rights reserved.   *  * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions   * are met:   *  * 1. Redistributions of source code must retain the above copyright   *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright   *    notice, this list of conditions and the following disclaimer in the   *    documentation and/or other materials provided with the distribution.   *  * 3. Neither the name of the Institute nor the names of its contributors   *    may be used to endorse or promote products derived from this software   *    without specific prior written permission.   *  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF   * SUCH DAMAGE.   */
end_comment

begin_comment
comment|/* $Id: symbol.h,v 1.5 1999/12/02 17:05:02 joda Exp $ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYMBOL_H
end_ifndef

begin_define
define|#
directive|define
name|_SYMBOL_H
end_define

begin_enum
enum|enum
name|typetype
block|{
name|TInteger
block|,
name|TOctetString
block|,
name|TBitString
block|,
name|TSequence
block|,
name|TSequenceOf
block|,
name|TGeneralizedTime
block|,
name|TGeneralString
block|,
name|TApplication
block|,
name|TType
block|,
name|TUInteger
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|typetype
name|Typetype
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|type
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|member
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|gen_name
decl_stmt|;
name|int
name|val
decl_stmt|;
name|int
name|optional
decl_stmt|;
name|struct
name|type
modifier|*
name|type
decl_stmt|;
name|struct
name|member
modifier|*
name|next
decl_stmt|,
modifier|*
name|prev
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|member
name|Member
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|symbol
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|type
block|{
name|Typetype
name|type
decl_stmt|;
name|int
name|application
decl_stmt|;
name|Member
modifier|*
name|members
decl_stmt|;
name|struct
name|type
modifier|*
name|subtype
decl_stmt|;
name|struct
name|symbol
modifier|*
name|symbol
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|type
name|Type
typedef|;
end_typedef

begin_struct
struct|struct
name|symbol
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|gen_name
decl_stmt|;
enum|enum
block|{
name|SUndefined
block|,
name|SConstant
block|,
name|Stype
block|}
name|stype
enum|;
name|int
name|constant
decl_stmt|;
name|Type
modifier|*
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|symbol
name|Symbol
typedef|;
end_typedef

begin_function_decl
name|void
name|initsym
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Symbol
modifier|*
name|addsym
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|output_name
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

