begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1993, 1994  *	The Regents of the University of California.  All rights reserved.  * Copyright (c) 1993, 1994, 1995, 1996  *	Keith Bostic.  All rights reserved.  *  * See the LICENSE file for redistribution information.  *  *	@(#)msg.h	10.10 (Berkeley) 5/10/96  */
end_comment

begin_comment
comment|/*  * Common messages (continuation or confirmation).  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CMSG_CONF
block|,
name|CMSG_CONT
block|,
name|CMSG_CONT_EX
block|,
name|CMSG_CONT_R
block|,
name|CMSG_CONT_S
block|,
name|CMSG_CONT_Q
block|}
name|cmsg_t
typedef|;
end_typedef

begin_comment
comment|/*  * Message types.  *  * !!!  * In historical vi, O_VERBOSE didn't exist, and O_TERSE made the error  * messages shorter.  In this implementation, O_TERSE has no effect and  * O_VERBOSE results in informational displays about common errors, for  * naive users.  *  * M_NONE	Display to the user, no reformatting, no nothing.  *  * M_BERR	Error: M_ERR if O_VERBOSE, else bell.  * M_ERR	Error: Display in inverse video.  * M_INFO	 Info: Display in normal video.  * M_SYSERR	Error: M_ERR, using strerror(3) message.  * M_VINFO	 Info: M_INFO if O_VERBOSE, else ignore.  *  * The underlying message display routines only need to know about M_NONE,  * M_ERR and M_INFO -- all the other message types are converted into one  * of them by the message routines.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|M_NONE
init|=
literal|1
block|,
name|M_BERR
block|,
name|M_ERR
block|,
name|M_INFO
block|,
name|M_SYSERR
block|,
name|M_VINFO
block|}
name|mtype_t
typedef|;
end_typedef

begin_comment
comment|/*  * There are major problems with error messages being generated by routines  * preparing the screen to display error messages.  It's possible for the  * editor to generate messages before we have a screen in which to display  * them, or during the transition between ex (and vi startup) and a true vi.  * There's a queue in the global area to hold them.  *  * If SC_EX/SC_VI is set, that's the mode that the editor is in.  If the flag  * S_SCREEN_READY is set, that means that the screen is prepared to display  * messages.  */
end_comment

begin_typedef
typedef|typedef
name|struct
name|_msgh
name|MSGH
typedef|;
end_typedef

begin_comment
comment|/* MSGS list head structure. */
end_comment

begin_expr_stmt
name|LIST_HEAD
argument_list|(
name|_msgh
argument_list|,
name|_msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|_msg
block|{
name|LIST_ENTRY
argument_list|(
argument|_msg
argument_list|)
name|q
expr_stmt|;
comment|/* Linked list of messages. */
name|mtype_t
name|mtype
decl_stmt|;
comment|/* Message type: M_NONE, M_ERR, M_INFO. */
name|char
modifier|*
name|buf
decl_stmt|;
comment|/* Message buffer. */
name|size_t
name|len
decl_stmt|;
comment|/* Message length. */
block|}
struct|;
end_struct

begin_comment
comment|/* Flags to msgq_status(). */
end_comment

begin_define
define|#
directive|define
name|MSTAT_SHOWLAST
value|0x01
end_define

begin_comment
comment|/* Show the line number of the last line. */
end_comment

begin_define
define|#
directive|define
name|MSTAT_TRUNCATE
value|0x02
end_define

begin_comment
comment|/* Truncate the file name if it's too long. */
end_comment

end_unit

